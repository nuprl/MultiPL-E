{
  "name": "mbpp_172_count_occurance",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to count the number of occurence of the string 'std' in a given string.\n(define (count_occurance s)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_172_count_occurance.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_occurance))\n    (check-equal? (candidate \"letstdlenstdporstd\") 3)\n    (check-equal? (candidate \"truststdsolensporsd\") 1)\n    (check-equal? (candidate \"makestdsostdworthit\") 2)\n    (check-equal? (candidate \"stds\") 1)\n    (check-equal? (candidate \"\") 0)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (count-matches \"std\" s))\n",
    "  (define (count_occurance_iter s n)\n    (cond\n      [(empty? s) n]\n      [(string=? (substring s 0 3) \"std\") (count_occurance_iter (substring s 3) (+ n 1))]\n      [else (count_occurance_iter (substring s 1) n)]))\n  (count_occurance_iter s 0))\n",
    "  (let loop ([s s] [n 0])\n    (cond\n      [(empty? s) n]\n      [(string=? (substring s 0 3) \"std\") (loop (substring s 3) (+ n 1))]\n      [else (loop (substring s 1) n)])))\n",
    "  (cond\n    [(empty? s) 0]\n    [(string=? (substring s 0 3) \"std\") (+ 1 (count_occurance (substring s 3)))]\n    [else (count_occurance (substring s 1))]))\n",
    "  (define (count_occurance_iter s count)\n    (cond\n      [(empty? s) count]\n      [(string=? (substring s 0 3) \"std\") (count_occurance_iter (substring s 3) (+ count 1))]\n      [else (count_occurance_iter (substring s 1) count)]))\n  (count_occurance_iter s 0))\n",
    "  (count-matches \"std\" s))\n",
    "  (define (count_occurance_iter s i)\n    (cond\n      [(= i (string-length s)) 0]\n      [(string=? (substring s i (+ i 3)) \"std\") (+ 1 (count_occurance_iter s (+ i 3)))]\n      [else (count_occurance_iter s (+ i 1))]))\n  (count_occurance_iter s 0))\n",
    "  (define (count_occurance_iter s count)\n    (if (string-empty? s)\n        count\n        (if (string=? (substring s 0 3) \"std\")\n            (count_occurance_iter (substring s 1) (+ count 1))\n            (count_occurance_iter (substring s 1) count))))\n  (count_occurance_iter s 0))\n",
    "  (if (string-contains s \"std\")\n      (+ 1 (count_occurance (string-replace s \"std\" \"\")))\n      0))\n",
    "  (let ((count 0))\n    (for ([i (in-range (string-length s))])\n      (if (string=? (substring s i (+ i 3)) \"std\")\n          (set! count (+ count 1))))\n    count))\n",
    "  (cond\n    [(empty? s) 0]\n    [(string=? (substring s 0 3) \"std\") (+ 1 (count_occurance (substring s 3)))]\n    [else (count_occurance (substring s 1))]))\n",
    "  (define (count_occurance_iter s i)\n    (if (string-contains s \"std\")\n        (+ 1 (count_occurance_iter (substring s (+ i 3)) i))\n        0))\n  (count_occurance_iter s 0))\n",
    "  (cond\n    [(empty? s) 0]\n    [else\n     (cond\n       [(string=? (substring s 0 3) \"std\")\n        (+ 1 (count_occurance (substring s 3)))]\n       [else (count_occurance (substring s 1))])]))\n",
    "  (define (count_occurance_iter s i)\n    (if (= i (string-length s))\n        0\n        (if (string=? (substring s i (+ i 3)) \"std\")\n            (+ 1 (count_occurance_iter s (+ i 1)))\n            (count_occurance_iter s (+ i 1)))))\n  (count_occurance_iter s 0))\n",
    "  (cond\n    [(empty? s) 0]\n    [(string=? (substring s 0 3) \"std\") (+ 1 (count_occurance (substring s 3)))]\n    [else (count_occurance (substring s 1))]))\n",
    "  (cond\n    [(empty? s) 0]\n    [(string=? (substring s 0 3) \"std\") (+ 1 (count_occurance (substring s 3)))]\n    [else (count_occurance (substring s 1))]))\n",
    "  (define (count_occurance_iter s i)\n    (cond ((string=? s \"\") i)\n          ((string=? (substring s 0 3) \"std\") (count_occurance_iter (substring s 3) (+ i 1)))\n          (else (count_occurance_iter (substring s 1) i))))\n  (count_occurance_iter s 0))\n",
    "  (length (regexp-match #rx\"std\" s)))\n",
    "  (let ([count 0])\n    (for ([i (in-range (string-length s))])\n      (if (string=? (substring s i (+ i 3)) \"std\")\n          (set! count (+ count 1))))\n    count))\n",
    "  (define (count_occurance_iter s n)\n    (cond ((string=? s \"\") n)\n          ((string=? (substring s 0 3) \"std\") (count_occurance_iter (substring s 3) (+ n 1)))\n          (else (count_occurance_iter (substring s 1) n))))\n  (count_occurance_iter s 0))\n",
    "  (let loop ([s s] [count 0])\n    (cond\n      [(empty? s) count]\n      [(string=? (substring s 0 3) \"std\") (loop (substring s 3) (+ count 1))]\n      [else (loop (substring s 1) count)])))\n",
    "  (define (count-occurance-iter s count)\n    (cond ((string=? s \"\") count)\n          ((string=? (substring s 0 3) \"std\") (count-occurance-iter (substring s 3) (+ count 1)))\n          (else (count-occurance-iter (substring s 1) count))))\n  (count-occurance-iter s 0))\n",
    "  (define (count_occurance_iter s i)\n    (if (string=? (substring s i (+ i 3)) \"std\")\n        (+ 1 (count_occurance_iter s (+ i 1)))\n        (count_occurance_iter s (+ i 1))))\n  (count_occurance_iter s 0))\n",
    "  (count-matches \"std\" s))\n",
    "  (define (count_occurance_helper s i)\n    (cond [(= i (string-length s)) 0]\n          [(string=? (substring s i (+ i 3)) \"std\") (+ 1 (count_occurance_helper s (+ i 3)))]\n          [else (count_occurance_helper s (+ i 1))]))\n  (count_occurance_helper s 0))\n",
    "  (if (string-contains s \"std\")\n      (+ 1 (count_occurance (substring s (string-index s \"std\") (+ (string-index s \"std\") 3))))\n      0))\n",
    "  (count-matches \"std\" s))\n",
    "  (cond\n    [(empty? s) 0]\n    [(string=? (substring s 0 3) \"std\") (+ 1 (count_occurance (substring s 3)))]\n    [else (count_occurance (substring s 1))]))\n",
    "  (define (count_occurance_iter s i)\n    (cond ((= i (string-length s)) 0)\n          ((string=? (substring s i (+ i 3)) \"std\") (+ 1 (count_occurance_iter s (+ i 3))))\n          (else (count_occurance_iter s (+ i 1)))))\n  (count_occurance_iter s 0))\n",
    "  (define (count_occurance_helper s count)\n    (cond\n      [(empty? s) count]\n      [(string=? (substring s 0 3) \"std\") (count_occurance_helper (substring s 3) (+ count 1))]\n      [else (count_occurance_helper (substring s 1) count)]))\n  (count_occurance_helper s 0))\n",
    "  (count-matches \"std\" s))\n",
    "  (count-matches \"std\" s))\n",
    "  (let loop ([s s] [i 0])\n    (if (string-contains s \"std\")\n        (loop (substring s (+ 3 (string-index s \"std\"))) (+ i 1))\n        i)))\n",
    "  (define (count_occurance_iter s count)\n    (cond ((string=? s \"\") count)\n          ((string=? (substring s 0 3) \"std\") (count_occurance_iter (substring s 3) (+ count 1)))\n          (else (count_occurance_iter (substring s 1) count))))\n  (count_occurance_iter s 0))\n",
    "  (define (count_occurance_iter s i)\n    (if (string-contains s \"std\")\n        (+ 1 (count_occurance_iter (substring s (string-index s \"std\") (+ (string-index s \"std\") 3)) i))\n        0))\n  (count_occurance_iter s 0))\n",
    "  (count-matches \"std\" s))\n",
    "  (let ([count 0])\n    (for ([i (in-range (string-length s))])\n      (if (string=? (substring s i (+ i 3)) \"std\")\n          (set! count (+ count 1))))\n    count))\n",
    "  (let loop ([s s] [count 0])\n    (cond [(empty? s) count]\n          [(string=? (substring s 0 3) \"std\") (loop (substring s 3) (+ count 1))]\n          [else (loop (substring s 1) count)])))\n",
    "  (define (count_occurance_iter s i)\n    (if (= i (string-length s))\n        0\n        (+ (if (string=? (substring s i (+ i 3)) \"std\")\n               1\n               0)\n           (count_occurance_iter s (+ i 1)))))\n  (count_occurance_iter s 0))\n",
    "  (define (count_occurance_helper s i)\n    (cond\n      [(empty? s) i]\n      [(string=? (substring s 0 3) \"std\") (count_occurance_helper (substring s 3) (+ i 1))]\n      [else (count_occurance_helper (substring s 1) i)]))\n  (count_occurance_helper s 0))\n",
    "  (define (count_occurance_iter s i)\n    (if (string=? (substring s i (+ i 3)) \"std\")\n        (+ 1 (count_occurance_iter s (+ i 1)))\n        (count_occurance_iter s (+ i 1))))\n  (count_occurance_iter s 0))\n",
    "  (count-matches \"std\" s))\n",
    "  (let loop ([s s] [count 0])\n    (cond [(empty? s) count]\n          [(string=? (substring s 0 3) \"std\") (loop (substring s 3) (+ count 1))]\n          [else (loop (substring s 1) count)])))\n",
    "  (let loop ([s s] [count 0])\n    (if (string-empty? s)\n        count\n        (if (string-prefix? \"std\" s)\n            (loop (substring s 3) (+ count 1))\n            (loop (substring s 1) count)))))\n",
    "  (define (count_occurance_iter s i)\n    (cond ((string=? s \"\") i)\n          ((string-contains s \"std\") (count_occurance_iter (substring s (+ 1 (string-index s \"std\"))) (+ 1 i)))\n          (else (count_occurance_iter (substring s (+ 1 (string-length s))) i))))\n  (count_occurance_iter s 0))\n",
    "  (count-matches \"std\" s))\n",
    "  (define (count_occurance_iter s i)\n    (cond\n      [(string=? s \"\") 0]\n      [(string=? (substring s i (+ i 3)) \"std\") (+ 1 (count_occurance_iter s (+ i 3)))]\n      [else (count_occurance_iter s (+ i 1))]))\n  (count_occurance_iter s 0))\n",
    "  (define (count_occurance_helper s i)\n    (cond ((string=? s \"\") 0)\n          ((string=? (substring s i (+ i 3)) \"std\") (+ 1 (count_occurance_helper s (+ i 3))))\n          (else (count_occurance_helper s (+ i 1)))))\n  (count_occurance_helper s 0))\n",
    "  (define (count_occurance_iter s i)\n    (cond ((string=? s \"\") 0)\n          ((string=? (substring s i (+ i 3)) \"std\") (+ 1 (count_occurance_iter s (+ i 3))))\n          (else (count_occurance_iter s (+ i 1)))))\n  (count_occurance_iter s 0))\n",
    "  (define (count_occurance_iter s count)\n    (cond ((string=? s \"\") count)\n          ((string=? (substring s 0 3) \"std\") (count_occurance_iter (substring s 3) (+ count 1)))\n          (else (count_occurance_iter (substring s 1) count))))\n  (count_occurance_iter s 0))\n",
    "  (cond\n    [(empty? s) 0]\n    [(string=? (substring s 0 3) \"std\") (+ 1 (count_occurance (substring s 3)))]\n    [else (count_occurance (substring s 1))]))\n",
    "  (count-matches \"std\" s))\n",
    "  (define (count_occurance_iter s i)\n    (if (= i (string-length s))\n        0\n        (if (string=? (substring s i (+ i 3)) \"std\")\n            (+ 1 (count_occurance_iter s (+ i 1)))\n            (count_occurance_iter s (+ i 1)))))\n  (count_occurance_iter s 0))\n",
    "  (define (count_occurance_iter s i)\n    (cond\n      [(= i (string-length s)) 0]\n      [(string=? (substring s i (+ i 3)) \"std\") (+ 1 (count_occurance_iter s (+ i 3)))]\n      [else (count_occurance_iter s (+ i 1))]))\n  (count_occurance_iter s 0))\n",
    "  (define (count_occurance_iter s i)\n    (cond ((= i (string-length s)) 0)\n          ((string=? (substring s i (+ i 3)) \"std\") (+ 1 (count_occurance_iter s (+ i 3))))\n          (else (count_occurance_iter s (+ i 1)))))\n  (count_occurance_iter s 0))\n",
    "  (count-matches \"std\" s))\n",
    "  (define (count_occurance_iter s i)\n    (if (string=? (substring s i (+ i 3)) \"std\")\n        (+ 1 (count_occurance_iter s (+ i 1)))\n        (count_occurance_iter s (+ i 1))))\n  (count_occurance_iter s 0))\n",
    "  (cond\n    [(empty? s) 0]\n    [(string=? (substring s 0 3) \"std\") (+ 1 (count_occurance (substring s 3)))]\n    [else (count_occurance (substring s 1))]))\n",
    "  (define (count_occurance_helper s i)\n    (if (= i (string-length s))\n        0\n        (+ (if (string=? (substring s i (+ i 3)) \"std\")\n               1\n               0)\n           (count_occurance_helper s (+ i 1)))))\n  (count_occurance_helper s 0))\n",
    "  (let loop ([s s] [c 0])\n    (if (string-empty? s)\n        c\n        (if (string=? (substring s 0 3) \"std\")\n            (loop (substring s 1) (+ c 1))\n            (loop (substring s 1) c)))))\n",
    "  (define (count_occurance_iter s i)\n    (cond ((string=? (substring s i (+ i 3)) \"std\")\n           (+ 1 (count_occurance_iter s (+ i 3))))\n          ((= i (string-length s)) 0)\n          (else (count_occurance_iter s (+ i 1)))))\n  (count_occurance_iter s 0))\n",
    "  (define (count_occurance_helper s i)\n    (cond ((= i (string-length s)) 0)\n          ((string=? (substring s i (+ i 3)) \"std\")\n           (+ 1 (count_occurance_helper s (+ i 3))))\n          (else (count_occurance_helper s (+ i 1)))))\n  (count_occurance_helper s 0))\n",
    "  (define (count-helper s i)\n    (cond ((string=? s \"\") i)\n          ((string=? (substring s 0 3) \"std\") (count-helper (substring s 3) (+ i 1)))\n          (else (count-helper (substring s 1) i))))\n  (count-helper s 0))\n",
    "  (define (count-helper s i)\n    (if (= i (- (string-length s) 2))\n        0\n        (if (string=? (substring s i (+ i 3)) \"std\")\n            (+ 1 (count-helper s (+ i 1)))\n            (count-helper s (+ i 1)))))\n  (count-helper s 0))\n",
    "  (length (regexp-match #rx\"std\" s)))\n",
    "  (count-matches \"std\" s))\n",
    "  (define (count_occurance_iter s n)\n    (cond [(empty? s) n]\n          [(string=? (substring s 0 3) \"std\") (count_occurance_iter (substring s 1) (+ n 1))]\n          [else (count_occurance_iter (substring s 1) n)]))\n  (count_occurance_iter s 0))\n",
    "  (define (count_occurance_iter s i)\n    (cond [(string=? (substring s i (+ i 3)) \"std\") (+ 1 (count_occurance_iter s (+ i 3)))]\n          [else (count_occurance_iter s (+ i 1))]))\n  (count_occurance_iter s 0))\n",
    "  (define (count_occurance_iter s i)\n    (cond\n      [(= i (string-length s)) 0]\n      [(string=? (substring s i (+ i 3)) \"std\") (+ 1 (count_occurance_iter s (+ i 3)))]\n      [else (count_occurance_iter s (+ i 1))]))\n  (count_occurance_iter s 0))\n",
    "  (define (count_occurance_iter s i)\n    (cond\n      [(string=? (substring s i (+ i 3)) \"std\") (+ 1 (count_occurance_iter s (+ i 3)))]\n      [else (count_occurance_iter s (+ i 1))]))\n  (count_occurance_iter s 0))\n",
    "  (count-matches \"std\" s))\n",
    "  (let loop ([s s] [count 0])\n    (cond\n      [(empty? s) count]\n      [(string=? (substring s 0 3) \"std\") (loop (substring s 3) (+ count 1))]\n      [else (loop (substring s 1) count)])))\n",
    "  (let ([len (string-length s)])\n    (if (&lt; len 3)\n        0\n        (if (string=? (substring s 0 3) \"std\")\n            (+ 1 (count_occurance (substring s 1 len)))\n            (count_occurance (substring s 1 len))))))\n",
    "  (cond\n    [(empty? s) 0]\n    [(string=? (substring s 0 3) \"std\") (+ 1 (count_occurance (substring s 3)))]\n    [else (count_occurance (substring s 1))]))\n",
    "  (cond\n    [(empty? s) 0]\n    [(string=? (substring s 0 3) \"std\") (+ 1 (count_occurance (substring s 3)))]\n    [else (count_occurance (substring s 1))]))\n",
    "  (cond\n    [(empty? s) 0]\n    [(string=? (substring s 0 3) \"std\") (+ 1 (count_occurance (substring s 3)))]\n    [else (count_occurance (substring s 1))]))\n",
    "  (define (count_occurance_iter s i)\n    (if (string=? (substring s i (+ i 3)) \"std\")\n        (+ 1 (count_occurance_iter s (+ i 1)))\n        (count_occurance_iter s (+ i 1))))\n  (count_occurance_iter s 0))\n",
    "  (define (count_occurance_iter s i)\n    (cond\n      [(string=? (substring s i (+ i 3)) \"std\") (+ 1 (count_occurance_iter s (+ i 3)))]\n      [(>= i (string-length s)) 0]\n      [else (count_occurance_iter s (+ i 1))]))\n  (count_occurance_iter s 0))\n",
    "  (count-matches \"std\" s))\n",
    "  (count-matches \"std\" s))\n",
    "  (define (count_occurance_iter s i)\n    (cond ((= i 0) 0)\n          ((string=? (substring s i (+ i 3)) \"std\") (+ 1 (count_occurance_iter s (- i 1))))\n          (else (count_occurance_iter s (- i 1)))))\n  (count_occurance_iter s (- (string-length s) 1)))\n",
    "  (define (count_occurance_iter s i)\n    (if (= i (string-length s))\n        0\n        (if (string=? (substring s i (+ i 3)) \"std\")\n            (+ 1 (count_occurance_iter s (+ i 3)))\n            (count_occurance_iter s (+ i 1)))))\n  (count_occurance_iter s 0))\n",
    "  (let loop ([s s] [count 0])\n    (cond [(empty? s) count]\n          [(string=? (substring s 0 3) \"std\") (loop (substring s 3) (+ count 1))]\n          [else (loop (substring s 1) count)])))\n",
    "  (count-matches \"std\" s))\n",
    "  (define (count_occurance_iter s i)\n    (cond ((string=? s \"\") 0)\n          ((string=? (substring s i (+ i 3)) \"std\") (+ 1 (count_occurance_iter s (+ i 3))))\n          (else (count_occurance_iter s (+ i 1)))))\n  (count_occurance_iter s 0))\n",
    "  (count-matches \"std\" s))\n",
    "  (define (count_occurance_iter s i)\n    (cond ((string=? (substring s i (+ i 3)) \"std\")\n           (+ 1 (count_occurance_iter s (+ i 3))))\n          ((= i (string-length s)) 0)\n          (else (count_occurance_iter s (+ i 1)))))\n  (count_occurance_iter s 0))\n",
    "  (define (count_occurance_iter s i)\n    (cond\n      [(= i (string-length s)) 0]\n      [(string=? (substring s i (+ i 3)) \"std\") (+ 1 (count_occurance_iter s (+ i 3)))]\n      [else (count_occurance_iter s (+ i 1))]))\n  (count_occurance_iter s 0))\n",
    "  (define (count_occurance_iter s i)\n    (cond\n      [(empty? s) i]\n      [(string=? (substring s 0 3) \"std\") (count_occurance_iter (substring s 3) (+ i 1))]\n      [else (count_occurance_iter (substring s 1) i)]))\n  (count_occurance_iter s 0))\n",
    "  (let loop ([s s] [count 0])\n    (cond [(empty? s) count]\n          [(string=? (substring s 0 3) \"std\") (loop (substring s 3) (+ count 1))]\n          [else (loop (substring s 1) count)])))\n",
    "  (define (count_occurance_iter s i)\n    (cond\n      [(string=? (substring s i (+ i 3)) \"std\")\n       (+ 1 (count_occurance_iter s (+ i 3)))]\n      [else\n       (count_occurance_iter s (+ i 1))]))\n  (count_occurance_iter s 0))\n",
    "  (define (count_occurance_iter s count)\n    (cond ((string=? s \"\") count)\n          ((string=? (substring s 0 3) \"std\") (count_occurance_iter (substring s 3) (+ count 1)))\n          (else (count_occurance_iter (substring s 1) count))))\n  (count_occurance_iter s 0))\n",
    "  (define (count_occurance_iter s acc)\n    (cond ((string=? s \"\") acc)\n          ((string=? (substring s 0 3) \"std\") (count_occurance_iter (substring s 3) (+ acc 1)))\n          (else (count_occurance_iter (substring s 1) acc))))\n  (count_occurance_iter s 0))\n",
    "  (define (helper s count)\n    (cond\n      [(empty? s) count]\n      [(string=? (substring s 0 3) \"std\") (helper (substring s 3) (+ count 1))]\n      [else (helper (substring s 1) count)]))\n  (helper s 0))\n",
    "  (define (count_occurance_iter s i)\n    (cond ((string=? s \"\") 0)\n          ((string=? (substring s 0 3) \"std\")\n           (+ 1 (count_occurance_iter (substring s 3) i)))\n          (else (count_occurance_iter (substring s 1) i))))\n  (count_occurance_iter s 0))\n",
    "  (cond\n    [(empty? s) 0]\n    [(string=? (substring s 0 3) \"std\") (+ 1 (count_occurance (substring s 3)))]\n    [else (count_occurance (substring s 1))]))\n",
    "  (if (string-contains s \"std\")\n      (+ 1 (count_occurance (string-replace s \"std\" \"\")))\n      0))\n",
    "  (define (count_occurance_iter s i)\n    (cond\n      [(empty? s) i]\n      [(string=? (substring s 0 3) \"std\") (count_occurance_iter (substring s 3) (+ i 1))]\n      [else (count_occurance_iter (substring s 1) i)]))\n  (count_occurance_iter s 0))\n",
    "  (count-matches \"std\" s))\n",
    "  (cond\n    [(empty? s) 0]\n    [(string=? (substring s 0 3) \"std\") (+ 1 (count_occurance (substring s 3)))]\n    [else (count_occurance (substring s 1))]))\n",
    "  (define (count_occurance_iter s count)\n    (if (string-empty? s)\n        count\n        (if (string=? (substring s 0 3) \"std\")\n            (count_occurance_iter (substring s 1) (+ count 1))\n            (count_occurance_iter (substring s 1) count))))\n  (count_occurance_iter s 0))\n",
    "  (define (helper s count)\n    (if (string-length s)\n        (if (string=? (substring s 0 3) \"std\")\n            (helper (substring s 1) (+ count 1))\n            (helper (substring s 1) count))\n        count))\n  (helper s 0))\n",
    "  (if (string-contains s \"std\")\n      (+ 1 (count_occurance (substring s (string-index s \"std\") (+ (string-index s \"std\") 3))))\n      0))\n",
    "  (define (count_occurance_iter s acc)\n    (cond ((string=? s \"\") acc)\n          ((string=? (substring s 0 3) \"std\") (count_occurance_iter (substring s 3) (+ acc 1)))\n          (else (count_occurance_iter (substring s 1) acc))))\n  (count_occurance_iter s 0))\n",
    "  (define (count_occurance_helper s i)\n    (cond ((= i (string-length s)) 0)\n          ((string=? (substring s i (+ i 3)) \"std\") (+ 1 (count_occurance_helper s (+ i 1))))\n          (else (count_occurance_helper s (+ i 1)))))\n  (count_occurance_helper s 0))\n",
    "  (count (string-split s) 'std))\n",
    "  (define (count_occurance_iter s count)\n    (if (string-length s)\n        (if (string=? (substring s 0 3) \"std\")\n            (count_occurance_iter (substring s 1) (+ count 1))\n            (count_occurance_iter (substring s 1) count))\n        count))\n  (count_occurance_iter s 0))\n",
    "  (define (count_occurance_iter s i)\n    (cond\n      [(= i (string-length s)) 0]\n      [(string=? (substring s i (+ i 3)) \"std\") (+ 1 (count_occurance_iter s (+ i 3)))]\n      [else (count_occurance_iter s (+ i 1))]))\n  (count_occurance_iter s 0))\n",
    "  (define (count_occurance_helper s i)\n    (cond ((string=? (substring s i (+ i 3)) \"std\")\n           (+ 1 (count_occurance_helper s (+ i 3))))\n          ((= i (string-length s)) 0)\n          (else (count_occurance_helper s (+ i 1)))))\n  (count_occurance_helper s 0))\n",
    "  (count-matches \"std\" s))\n",
    "  (define (count_occurance_helper s i)\n    (if (= i (string-length s))\n        0\n        (if (string=? (substring s i (+ i 3)) \"std\")\n            (+ 1 (count_occurance_helper s (+ i 1)))\n            (count_occurance_helper s (+ i 1)))))\n  (count_occurance_helper s 0))\n",
    "  (count-matches \"std\" s))\n",
    "  (define (count_occurance_iter s i)\n    (cond\n      [(= i (string-length s)) 0]\n      [(string=? (substring s i (+ i 3)) \"std\") (+ 1 (count_occurance_iter s (+ i 3)))]\n      [else (count_occurance_iter s (+ i 1))]))\n  (count_occurance_iter s 0))\n",
    "  (define (count_occurance_iter s i)\n    (cond ((string=? (substring s i (+ i 3)) \"std\") (+ 1 (count_occurance_iter s (+ i 3))))\n          ((= i (string-length s)) 0)\n          (else (count_occurance_iter s (+ i 1)))))\n  (count_occurance_iter s 0))\n",
    "  (count-matches \"std\" s))\n",
    "  (define (count_occurance_iter s i)\n    (if (string=? (substring s i (+ i 3)) \"std\")\n        (+ 1 (count_occurance_iter s (+ i 1)))\n        (count_occurance_iter s (+ i 1))))\n  (count_occurance_iter s 0))\n",
    "  (let ([count 0])\n    (for ([i (in-range (string-length s))])\n      (if (string=? (substring s i (+ i 3)) \"std\")\n          (set! count (+ count 1))))\n    count))\n",
    "  (count-matches \"std\" s))\n",
    "  (define (count_occurance_iter s i)\n    (cond ((= i (string-length s)) 0)\n          ((string=? (substring s i (+ i 3)) \"std\") (+ 1 (count_occurance_iter s (+ i 3))))\n          (else (count_occurance_iter s (+ i 1)))))\n  (count_occurance_iter s 0))\n",
    "  (define (count_occurance_iter s i)\n    (if (= i (string-length s))\n        0\n        (if (string=? (substring s i (+ i 3)) \"std\")\n            (+ 1 (count_occurance_iter s (+ i 1)))\n            (count_occurance_iter s (+ i 1)))))\n  (count_occurance_iter s 0))\n",
    "  (define (count_occurance_helper s i)\n    (if (string=? (substring s i (+ i 3)) \"std\")\n        (+ 1 (count_occurance_helper s (+ i 1)))\n        (count_occurance_helper s (+ i 1))))\n  (count_occurance_helper s 0))\n",
    "  (define (count_occurance_iter s i)\n    (cond\n      [(string=? s \"\") 0]\n      [(string=? (substring s i (+ i 3)) \"std\") (+ 1 (count_occurance_iter s (+ i 3)))]\n      [else (count_occurance_iter s (+ i 1))]))\n  (count_occurance_iter s 0))\n",
    "  (define (count_occurance_iter s i)\n    (cond\n      [(string=? (substring s i (+ i 3)) \"std\")\n       (+ 1 (count_occurance_iter s (+ i 3)))]\n      [else (count_occurance_iter s (+ i 1))]))\n  (count_occurance_iter s 0))\n",
    "  (cond\n    [(empty? s) 0]\n    [else\n     (cond\n       [(string=? (substring s 0 3) \"std\") (+ 1 (count_occurance (substring s 3)))]\n       [else (count_occurance (substring s 1))])]))\n",
    "  (define (count_occurance_iter s i acc)\n    (cond\n      [(empty? s) acc]\n      [(string=? (substring s i (+ i 3)) \"std\") (count_occurance_iter s (+ i 3) (+ acc 1))]\n      [else (count_occurance_iter s (+ i 1) acc)]))\n  (count_occurance_iter s 0 0))\n",
    "  (define (count_occurance_helper s i)\n    (if (string=? (substring s i (+ i 3)) \"std\")\n        (+ 1 (count_occurance_helper s (+ i 1)))\n        (count_occurance_helper s (+ i 1))))\n  (count_occurance_helper s 0))\n",
    "  (define (count_occurance_iter s count)\n    (cond ((string=? s \"\") count)\n          ((string=? (substring s 0 3) \"std\") (count_occurance_iter (substring s 3) (+ count 1)))\n          (else (count_occurance_iter (substring s 1) count))))\n  (count_occurance_iter s 0))\n",
    "  (define (count_occurance_iter s n)\n    (cond ((string=? s \"\") n)\n          ((string=? (substring s 0 3) \"std\") (count_occurance_iter (substring s 3) (+ n 1)))\n          (else (count_occurance_iter (substring s 1) n))))\n  (count_occurance_iter s 0))\n",
    "  (let loop ([i 0] [count 0])\n    (cond\n      [(= i (string-length s)) count]\n      [(string=? (substring s i (+ i 3)) \"std\") (loop (+ i 3) (+ count 1))]\n      [else (loop (+ i 1) count)])))\n",
    "  (count-matches \"std\" s))\n",
    "  (define (count_occurance_iter s i)\n    (cond ((= i (string-length s)) 0)\n          ((string=? (substring s i (+ i 3)) \"std\")\n           (+ 1 (count_occurance_iter s (+ i 3))))\n          (else (count_occurance_iter s (+ i 1)))))\n  (count_occurance_iter s 0))\n",
    "  (let ([len (string-length s)])\n    (define (count_occurance-iter i)\n      (if (= i len)\n          0\n          (if (string=? (substring s i (+ i 3)) \"std\")\n              (+ 1 (count_occurance-iter (+ i 3)))\n              (count_occurance-iter (+ i 1)))))\n    (count_occurance-iter 0)))\n",
    "  (define (count_occurance_iter s i)\n    (cond\n      [(string=? (substring s i (+ i 3)) \"std\") (+ 1 (count_occurance_iter s (+ i 1)))]\n      [else (count_occurance_iter s (+ i 1))]))\n  (count_occurance_iter s 0))\n",
    "  (let ([l (string-length s)])\n    (cond\n      [(string=? s \"std\") 1]\n      [(string=? (substring s 0 3) \"std\") (+ 1 (count_occurance (substring s 3 l)))]\n      [else (count_occurance (substring s 1 l))])))\n",
    "  (let ([count 0])\n    (for ([i (in-range (string-length s))])\n      (if (string=? (substring s i (+ i 3)) \"std\")\n          (set! count (+ count 1))))\n    count))\n",
    "  (define (count_occurance_iter s i)\n    (cond ((string=? (substring s i (+ i 3)) \"std\")\n           (+ 1 (count_occurance_iter s (+ i 3))))\n          ((>= i (string-length s))\n           0)\n          (else\n           (count_occurance_iter s (+ i 1)))))\n  (count_occurance_iter s 0))\n",
    "  (let ([count 0])\n    (for ([i (in-range (string-length s))])\n      (if (string=? (substring s i (+ i 3)) \"std\")\n          (set! count (+ count 1))))\n    count))\n",
    "  (define (count_occurance_iter s i)\n    (if (string-contains s \"std\")\n        (+ 1 (count_occurance_iter (substring s (+ i 3)) (+ i 3)))\n        0))\n  (count_occurance_iter s 0))\n",
    "  (count-matches \"std\" s))\n",
    "  (define (count_occurance_helper s i)\n    (cond ((string=? (substring s i (+ i 3)) \"std\")\n           (+ 1 (count_occurance_helper s (+ i 3))))\n          ((= i (string-length s))\n           0)\n          (else (count_occurance_helper s (+ i 1)))))\n  (count_occurance_helper s 0))\n",
    "  (count-matches \"std\" s))\n",
    "  (define (count_occurance_iter s i)\n    (if (string-contains s \"std\")\n        (+ 1 (count_occurance_iter (substring s (+ i 3)) 0))\n        0))\n  (count_occurance_iter s 0))\n",
    "  (count-matches \"std\" s))\n",
    "  (define (helper s count)\n    (cond\n      [(empty? s) count]\n      [(string=? (substring s 0 3) \"std\") (helper (substring s 3) (+ count 1))]\n      [else (helper (substring s 1) count)]))\n  (helper s 0))\n",
    "  (define (count_occurance-iter s i)\n    (if (string-contains s \"std\")\n        (+ 1 (count_occurance-iter (substring s (+ i 3)) 0))\n        0))\n  (count_occurance-iter s 0))\n",
    "  (define (count_occurance_iter s count)\n    (if (string-empty? s)\n        count\n        (if (string=? (substring s 0 3) \"std\")\n            (count_occurance_iter (substring s 1) (+ count 1))\n            (count_occurance_iter (substring s 1) count))))\n  (count_occurance_iter s 0))\n",
    "  (let loop ([s s] [count 0])\n    (cond [(empty? s) count]\n          [(string=? (substring s 0 3) \"std\") (loop (substring s 3) (+ count 1))]\n          [else (loop (substring s 1) count)])))\n",
    "  (define (count_occurance_iter s i)\n    (cond ((= i 0) 0)\n          ((string=? (substring s (- i 3) i) \"std\") (+ 1 (count_occurance_iter s (- i 1))))\n          (else (count_occurance_iter s (- i 1)))))\n  (count_occurance_iter s (string-length s)))\n",
    "  (define (count_occurance_iter s i count)\n    (if (= i (string-length s))\n        count\n        (if (string=? (substring s i (+ i 3)) \"std\")\n            (count_occurance_iter s (+ i 1) (+ count 1))\n            (count_occurance_iter s (+ i 1) count))))\n  (count_occurance_iter s 0 0))\n",
    "  (define (count_occurance_iter s i)\n    (cond\n      [(string-length s) i]\n      [(string=? (substring s i (+ i 3)) \"std\") (count_occurance_iter s (+ i 3))]\n      [else (count_occurance_iter s (+ i 1))]))\n  (count_occurance_iter s 0))\n",
    "  (define (count_occurance_iter s i)\n    (if (= i (string-length s))\n        0\n        (+ (if (string=? (substring s i (+ i 3)) \"std\")\n               1\n               0)\n           (count_occurance_iter s (+ i 1)))))\n  (count_occurance_iter s 0))\n",
    "  (let loop ([s s] [count 0])\n    (if (string-empty? s)\n        count\n        (if (string=? (substring s 0 3) \"std\")\n            (loop (substring s 1) (+ count 1))\n            (loop (substring s 1) count)))))\n",
    "  (define (count_occurance_iter s i)\n    (cond\n      [(empty? s) i]\n      [(string=? (substring s 0 3) \"std\") (count_occurance_iter (substring s 3) (+ i 1))]\n      [else (count_occurance_iter (substring s 1) i)]))\n  (count_occurance_iter s 0))\n",
    "  (count-matches \"std\" s))\n",
    "  (define (count_occurance_iter s i)\n    (cond ((string=? (substring s i (+ i 3)) \"std\") (+ 1 (count_occurance_iter s (+ i 3))))\n          ((= i (string-length s)) 0)\n          (else (count_occurance_iter s (+ i 1)))))\n  (count_occurance_iter s 0))\n",
    "  (define (count_occurance_helper s i)\n    (cond\n      [(= i (string-length s)) 0]\n      [(string=? (substring s i (+ i 3)) \"std\")\n       (+ 1 (count_occurance_helper s (+ i 3)))]\n      [else (count_occurance_helper s (+ i 1))]))\n  (count_occurance_helper s 0))\n",
    "  (define (count_occurance_iter s i)\n    (if (string=? (substring s i (+ i 3)) \"std\")\n        (+ 1 (count_occurance_iter s (+ i 1)))\n        (count_occurance_iter s (+ i 1))))\n  (count_occurance_iter s 0))\n",
    "  (count-matches \"std\" s))\n",
    "  (let loop ([s s] [count 0])\n    (if (string-empty? s)\n        count\n        (if (string=? (substring s 0 3) \"std\")\n            (loop (substring s 1) (+ count 1))\n            (loop (substring s 1) count)))))\n",
    "  (define (count_occurance_iter s i)\n    (cond ((= i (string-length s)) 0)\n          ((string=? (substring s i (+ i 3)) \"std\")\n           (+ 1 (count_occurance_iter s (+ i 3))))\n          (else (count_occurance_iter s (+ i 1)))))\n  (count_occurance_iter s 0))\n",
    "  (define (count_occurance_iter s i)\n    (cond ((string=? (substring s i (+ i 3)) \"std\") (+ 1 (count_occurance_iter s (+ i 3))))\n          ((= i (string-length s)) 0)\n          (else (count_occurance_iter s (+ i 1)))))\n  (count_occurance_iter s 0))\n",
    "  (define (count_occurance_iter s i)\n    (cond\n      [(= i (string-length s)) 0]\n      [(string=? (substring s i (+ i 3)) \"std\") (+ 1 (count_occurance_iter s (+ i 3)))]\n      [else (count_occurance_iter s (+ i 1))]))\n  (count_occurance_iter s 0))\n",
    "  (let loop ([s s] [count 0])\n    (cond [(empty? s) count]\n          [(string=? (substring s 0 3) \"std\") (loop (substring s 1) (+ count 1))]\n          [else (loop (substring s 1) count)])))\n",
    "  (define (count_occurance_iter s i)\n    (cond ((string=? (substring s i (+ i 3)) \"std\")\n           (+ 1 (count_occurance_iter s (+ i 3))))\n          ((= i (string-length s)) 0)\n          (else (count_occurance_iter s (+ i 1)))))\n  (count_occurance_iter s 0))\n",
    "  (define (count_occurance_helper s)\n    (if (string-length s)\n        (if (string=? (substring s 0 3) \"std\")\n            (+ 1 (count_occurance_helper (substring s 1)))\n            (count_occurance_helper (substring s 1)))\n        0))\n  (count_occurance_helper s))\n",
    "  (define (count-occurance-helper s i acc)\n    (cond\n      [(= i (string-length s)) acc]\n      [(string=? (substring s i (+ i 3)) \"std\") (count-occurance-helper s (+ i 1) (+ acc 1))]\n      [else (count-occurance-helper s (+ i 1) acc)]))\n  (count-occurance-helper s 0 0))\n",
    "  (define (count s i)\n    (cond\n      [(= i (string-length s)) 0]\n      [(string=? (substring s i (+ i 3)) \"std\") (+ 1 (count s (+ i 3)))]\n      [else (count s (+ i 1))]))\n  (count s 0))\n",
    "  (define (count_occurance_iter s n)\n    (cond ((string=? (substring s n (+ n 3)) \"std\") (count_occurance_iter s (+ n 1)))\n          ((&gt;= n (string-length s)) n)\n          (else (count_occurance_iter s (+ n 1)))))\n  (count_occurance_iter s 0))\n",
    "  (let loop ([s s] [count 0])\n    (if (string-empty? s)\n        count\n        (if (string=? (substring s 0 3) \"std\")\n            (loop (substring s 1) (+ count 1))\n            (loop (substring s 1) count)))))\n",
    "  (length (regexp-match #rx\"std\" s)))\n",
    "  (define (count_occurance_iter s i)\n    (cond ((= i (string-length s)) 0)\n          ((string=? (substring s i (+ i 3)) \"std\") (+ 1 (count_occurance_iter s (+ i 3))))\n          (else (count_occurance_iter s (+ i 1)))))\n  (count_occurance_iter s 0))\n",
    "  (define (count_occurance_iter s n)\n    (if (string-length s)\n        (if (string=? (substring s 0 3) \"std\")\n            (count_occurance_iter (substring s 1) (+ n 1))\n            (count_occurance_iter (substring s 1) n))\n        n))\n  (count_occurance_iter s 0))\n",
    "  (define (count_occurance_iter s n)\n    (cond\n      [(empty? s) n]\n      [(string=? (substring s 0 3) \"std\") (count_occurance_iter (substring s 3) (+ n 1))]\n      [else (count_occurance_iter (substring s 1) n)]))\n  (count_occurance_iter s 0))\n",
    "  (define (count_occurance_iter s count)\n    (cond\n      [(empty? s) count]\n      [(string=? (substring s 0 3) \"std\") (count_occurance_iter (substring s 3) (+ count 1))]\n      [else (count_occurance_iter (substring s 1) count)]))\n  (count_occurance_iter s 0))\n",
    "  (define (count_occurance_helper s i)\n    (cond ((string=? s \"\") 0)\n          ((string=? (substring s i (+ i 3)) \"std\") (+ 1 (count_occurance_helper s (+ i 3))))\n          (else (count_occurance_helper s (+ i 1)))))\n  (count_occurance_helper s 0))\n",
    "  (define (count_occurance_iter s count)\n    (cond\n      [(empty? s) count]\n      [(string=? (substring s 0 3) \"std\") (count_occurance_iter (substring s 3) (+ count 1))]\n      [else (count_occurance_iter (substring s 1) count)]))\n  (count_occurance_iter s 0))\n",
    "  (define (helper s count)\n    (cond\n      [(empty? s) count]\n      [(string=? (substring s 0 3) \"std\") (helper (substring s 3) (+ count 1))]\n      [else (helper (substring s 1) count)]))\n  (helper s 0))\n",
    "  (define (count_occurance_iter s i)\n    (cond\n      [(= i (string-length s)) 0]\n      [(string=? (substring s i (+ i 3)) \"std\") (+ 1 (count_occurance_iter s (+ i 3)))]\n      [else (count_occurance_iter s (+ i 1))]))\n  (count_occurance_iter s 0))\n",
    "  (define (count_occurance_iter s i)\n    (if (string-contains s \"std\")\n        (+ 1 (count_occurance_iter (substring s (+ i 1) (string-length s)) 0))\n        0))\n  (count_occurance_iter s 0))\n",
    "  (string-length (regexp-replace* #rx\"std\" s \"\")))\n",
    "  (define (count-helper s i)\n    (cond\n      [(empty? s) i]\n      [(string=? (substring s 0 3) \"std\") (count-helper (substring s 3) (+ i 1))]\n      [else (count-helper (substring s 1) i)]))\n  (count-helper s 0))\n",
    "  (define (count_occurance_iter s count)\n    (cond ((string=? s \"\") count)\n          ((string=? (substring s 0 3) \"std\") (count_occurance_iter (substring s 3) (+ count 1)))\n          (else (count_occurance_iter (substring s 1) count))))\n  (count_occurance_iter s 0))\n",
    "  (define (count_occurance_iter s count)\n    (cond ((string=? s \"\") count)\n          ((string=? (substring s 0 3) \"std\") (count_occurance_iter (substring s 3) (+ count 1)))\n          (else (count_occurance_iter (substring s 1) count))))\n  (count_occurance_iter s 0))\n",
    "  (define (count_occurance_iter s n)\n    (cond\n      [(empty? s) n]\n      [(equal? (substring s 0 3) \"std\")\n       (count_occurance_iter (substring s 3) (+ n 1))]\n      [else (count_occurance_iter (substring s 1) n)]))\n  (count_occurance_iter s 0))\n",
    "  (define (count_occurance_iter s n)\n    (if (string-length s)\n        (if (string=? (substring s 0 3) \"std\")\n            (count_occurance_iter (substring s 1) (+ n 1))\n            (count_occurance_iter (substring s 1) n))\n        n))\n  (count_occurance_iter s 0))\n",
    "  (let loop ([s s] [count 0])\n    (cond\n      [(empty? s) count]\n      [(string=? (substring s 0 3) \"std\") (loop (substring s 3) (+ 1 count))]\n      [else (loop (substring s 1) count)])))\n",
    "  (define (count_occurance-iter s n)\n    (cond\n      [(empty? s) n]\n      [(string=? \"std\" (substring s 0 3)) (count_occurance-iter (substring s 3) (+ n 1))]\n      [else (count_occurance-iter (substring s 1) n)]))\n  (count_occurance-iter s 0))\n",
    "  (count-matches \"std\" s))\n",
    "  (let loop ([s s] [count 0])\n    (cond\n      [(empty? s) count]\n      [(string=? (substring s 0 3) \"std\") (loop (substring s 3) (+ count 1))]\n      [else (loop (substring s 1) count)])))\n",
    "  (define (count_occurance_iter s count)\n    (if (string-contains s \"std\")\n        (count_occurance_iter (substring s (+ (string-index s \"std\") 3)) (+ count 1))\n        count))\n  (count_occurance_iter s 0))\n",
    "  (count-matches \"std\" s))\n",
    "  (define (count_occurance_iter s i)\n    (if (= i (string-length s))\n        0\n        (if (string=? (substring s i (+ i 3)) \"std\")\n            (+ 1 (count_occurance_iter s (+ i 1)))\n            (count_occurance_iter s (+ i 1)))))\n  (count_occurance_iter s 0))\n",
    "  (count-matches \"std\" s))\n",
    "  (if (string-contains s \"std\")\n      (+ 1 (count_occurance (string-replace s \"std\" \"\")))\n      0))\n",
    "  (cond\n    [(empty? s) 0]\n    [(string=? (substring s 0 3) \"std\") (+ 1 (count_occurance (substring s 3)))]\n    [else (count_occurance (substring s 1))]))\n",
    "  (define (count_occurance_iter s i)\n    (cond ((string=? s \"\") i)\n          ((string=? (substring s 0 3) \"std\") (count_occurance_iter (substring s 3) (+ i 1)))\n          (else (count_occurance_iter (substring s 1) i))))\n  (count_occurance_iter s 0))\n",
    "  (define (count_occurance_iter s acc)\n    (cond\n      [(empty? s) acc]\n      [(string=? (substring s 0 3) \"std\") (count_occurance_iter (substring s 3) (+ acc 1))]\n      [else (count_occurance_iter (substring s 1) acc)]))\n  (count_occurance_iter s 0))\n",
    "  (cond [(empty? s) 0]\n        [(string=? (substring s 0 3) \"std\") (+ 1 (count_occurance (substring s 3)))]\n        [else (count_occurance (substring s 1))]))\n",
    "  (define (count_occurance_helper s i)\n    (cond\n      [(= i (- (string-length s) 2)) 0]\n      [else (cond\n              [(string=? (substring s i (+ i 3)) \"std\") (+ 1 (count_occurance_helper s (+ i 1)))]\n              [else (count_occurance_helper s (+ i 1))])]))\n  (count_occurance_helper s 0))\n",
    "  (cond\n    [(empty? s) 0]\n    [(string=? (substring s 0 3) \"std\") (+ 1 (count_occurance (substring s 3)))]\n    [else (count_occurance (substring s 1))]))\n"
  ]
}