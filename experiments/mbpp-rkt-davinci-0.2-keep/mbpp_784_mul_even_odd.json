{
  "name": "mbpp_784_mul_even_odd",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the product of first even and odd number of a given list.\n(define (mul_even_odd list1)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_784_mul_even_odd.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate mul_even_odd))\n    (check-equal? (candidate (list 1 3 5 7 4 1 6 8)) 4)\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) 2)\n    (check-equal? (candidate (list 1 5 7 9 10)) 10)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (if (null? list1)\n      1\n      (if (even? (car list1))\n          (* (car list1) (mul_even_odd (cdr list1)))\n          (mul_even_odd (cdr list1)))))\n",
    "  (if (null? list1)\n      1\n      (if (even? (car list1))\n          (* (car list1) (mul_even_odd (cdr list1)))\n          (mul_even_odd (cdr list1)))))\n</code>\n",
    "  (let ([even-number (car list1)]\n        [odd-number (cadr list1)])\n    (* even-number odd-number)))\n",
    "  (if (null? list1)\n      1\n      (if (even? (car list1))\n          (* (car list1) (mul_even_odd (cdr list1)))\n          (mul_even_odd (cdr list1)))))\n",
    "  (if (null? list1)\n      1\n      (if (even? (car list1))\n          (* (car list1) (mul_even_odd (cdr list1)))\n          (mul_even_odd (cdr list1)))))\n",
    "  (if (null? list1)\n      1\n      (if (even? (car list1))\n          (* (car list1) (mul_even_odd (cdr list1)))\n          (mul_even_odd (cdr list1)))))\n",
    "  (if (null? list1)\n      1\n      (if (even? (car list1))\n          (* (car list1) (mul_even_odd (cdr list1)))\n          (mul_even_odd (cdr list1)))))\n",
    "  (if (null? list1)\n      0\n      (if (even? (car list1))\n          (* (car list1) (mul_even_odd (cdr list1)))\n          (mul_even_odd (cdr list1)))))\n",
    "  (if (null? list1)\n      1\n      (if (even? (car list1))\n          (* (car list1) (mul_even_odd (cdr list1)))\n          (mul_even_odd (cdr list1)))))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(even? (first list1)) (* (first list1) (mul_even_odd (rest list1)))]\n    [(odd? (first list1)) (* (first list1) (mul_even_odd (rest list1)))]\n    [else (mul_even_odd (rest list1))]))\n",
    "  (if (null? list1)\n      1\n      (if (even? (car list1))\n          (* (car list1) (mul_even_odd (cdr list1)))\n          (mul_even_odd (cdr list1)))))\n",
    "  (if (null? list1)\n      1\n      (if (even? (car list1))\n          (* (car list1) (mul_even_odd (cdr list1)))\n          (mul_even_odd (cdr list1)))))\n",
    "  (if (null? list1)\n      1\n      (if (even? (car list1))\n          (* (car list1) (mul_even_odd (cdr list1)))\n          (mul_even_odd (cdr list1)))))\n",
    "  (if (null? list1)\n      1\n      (* (car list1) (mul_even_odd (cdr list1)))))\n",
    "  (if (null? list1)\n      1\n      (if (even? (car list1))\n          (* (car list1) (mul_even_odd (cdr list1)))\n          (mul_even_odd (cdr list1)))))\n",
    "  (if (null? list1)\n      1\n      (if (even? (car list1))\n          (* (car list1) (mul_even_odd (cdr list1)))\n          (mul_even_odd (cdr list1)))))\n",
    "  (if (null? list1)\n      1\n      (if (even? (car list1))\n          (* (car list1) (mul_even_odd (cdr list1)))\n          (mul_even_odd (cdr list1)))))\n",
    "  (define (even list)\n    (cond ((null? list) '())\n          ((even? (car list)) (cons (car list) (even (cdr list))))\n          (else (even (cdr list)))))\n  (define (odd list)\n    (cond ((null? list) '())\n          ((odd? (car list)) (cons (car list) (odd (cdr list))))\n          (else (odd (cdr list)))))\n  (if (null? (even list1))\n      0\n      (* (car (even list1)) (car (odd list1)))))\n",
    "  (if (null? list1)\n      1\n      (if (even? (car list1))\n          (* (car list1) (mul_even_odd (cdr list1)))\n          (mul_even_odd (cdr list1)))))\n",
    "  (letrec ([even (lambda (list1)\n                   (if (null? list1)\n                       '()\n                       (if (even? (car list1))\n                           (cons (car list1) (even (cdr list1)))\n                           (even (cdr list1)))))\n           [odd (lambda (list1)\n                  (if (null? list1)\n                      '()\n                      (if (odd? (car list1))\n                          (cons (car list1) (odd (cdr list1)))\n                          (odd (cdr list1)))))])\n    (if (null? (even list1))\n        0\n        (* (car (even list1)) (car (odd list1))))))\n"
  ]
}