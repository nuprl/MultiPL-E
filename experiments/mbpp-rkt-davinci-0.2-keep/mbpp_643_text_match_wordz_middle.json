{
  "name": "mbpp_643_text_match_wordz_middle",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function that checks if a strings contains 'z', except at the start and end of the word.\n(define (text_match_wordz_middle text)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_643_text_match_wordz_middle.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate text_match_wordz_middle))\n    (check-equal? (candidate \"pythonzabc.\") #t)\n    (check-equal? (candidate \"zxyabc.\") #f)\n    (check-equal? (candidate \"  lang  .\") #f)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (regexp-match? #rx\"\\Bz\\B\" text))\n",
    "  (define (helper text)\n    (cond\n      [(empty? text) #f]\n      [(equal? (first text) #\\z) #t]\n      [else (helper (rest text))]))\n  (and (not (empty? text))\n       (not (equal? (first text) #\\z))\n       (not (equal? (last text) #\\z))\n       (helper text)))\n",
    "  (cond\n    [(empty? text) #f]\n    [(equal? (first text) #\\z) #f]\n    [(equal? (last text) #\\z) #f]\n    [(regexp-match #rx\"z\" text) #t]\n    [else #f]))\n",
    "  (cond\n    [(empty? text) #f]\n    [(equal? (first text) #\\z) #f]\n    [(equal? (last text) #\\z) #f]\n    [else (or (equal? (first text) #\\z)\n              (text_match_wordz_middle (rest text)))]))\n",
    "  (cond\n    [(empty? text) #f]\n    [(string=? (substring text 0 1) \"z\") #f]\n    [(string=? (substring text -1) \"z\") #f]\n    [(string-contains text \"z\") #t]\n    [else #f]))\n",
    "  (let ([start-index (string-index text #\\z)])\n    (and (not (zero? start-index))\n         (not (zero? (- (string-length text) start-index)))\n         (string-index (substring text (+ start-index 1)) #\\z))))\n",
    "  (regexp-match? #rx\"\\Bz\\B\" text))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (regexp-match? #rx\"^[^z].*z.*[^z]$\" text))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (cond\n    [(empty? text) #f]\n    [(equal? (first text) 'z) #f]\n    [(equal? (last text) 'z) #f]\n    [(regexp-match? #rx\"z\" text) #t]\n    [else #f]))\n",
    "  (define (match-wordz-middle text)\n    (cond\n      [(empty? text) #f]\n      [(equal? (first text) 'z') (match-wordz-middle (rest text))]\n      [(equal? (first text) 'z') #t]\n      [else (match-wordz-middle (rest text))]))\n  (match-wordz-middle text))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (regexp-match? #rx\"\\Bz\\B\" text))\n",
    "  (and (regexp-match? #rx\"z\" text)\n       (not (regexp-match? #rx\"^z\" text))\n       (not (regexp-match? #rx\"z$\" text))))\n",
    "  (let ([text-length (string-length text)])\n    (and\n     (not (string=? (substring text 0 1) \"z\"))\n     (not (string=? (substring text (- text-length 1) text-length) \"z\"))\n     (regexp-match? #rx\"z\" text))))\n",
    "  (regexp-match? #rx\"\\Bz\\B\" text))\n",
    "  (regexp-match? #rx\"^[^z].*z.*[^z]$\" text))\n",
    "  (cond\n    [(empty? text) #f]\n    [(string=? (substring text 1 (sub1 (string-length text))) \"z\") #t]\n    [else (text_match_wordz_middle (substring text 1 (string-length text)))]))\n",
    "  (regexp-match? #rx\"\\Bz\\B\" text))\n",
    "  (cond\n    [(empty? text) #f]\n    [(equal? (first text) 'z) #f]\n    [(equal? (last text) 'z) #f]\n    [(regexp-match? #rx\"z\" text) #t]\n    [else #f]))\n",
    "  (cond\n    [(empty? text) #f]\n    [(equal? 'z (first text)) #t]\n    [else (text_match_wordz_middle (rest text))]))\n",
    "  (regexp-match? #rx\"z\" text))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string=? text \"z\") #f]\n    [(string=? text \"z\") #f]\n    [(string=? text \"z\") #f]\n    [(string=? text \"z\") #f]\n    [(string=? text \"z\") #f]\n    [(string=? text \"z\") #f]\n    [(string=? text \"z\") #f]\n    [(string=? text \"z\") #f]\n    [(string=? text \"z\") #f]\n    [(string=? text \"z\") #f]\n    [(string=? text \"z\") #f]\n    [(string=? text \"z\") #f]\n    [(string=? text \"z\") #f]\n    [(string=? text \"z\") #f]\n    [(string=? text \"z\") #f]\n    [(string=? text \"z\") #f]\n    [(string=? text \"z\") #f]\n    [(string=? text \"z\") #f]\n    [(string=? text \"z\") #f]\n    [(string=? text \"z\") #f]\n    [(string=? text \"z\") #f]\n    [(string=? text \"z\") #f]\n    [(string=? text \"z\") #f]\n    [(string=? text \"z\") #f]\n    [(string=? text \"z\") #f]\n    [(string=? text \"z\") #f]\n    [(string=? text \"z\") #f]\n    [(string=? text \"z\") #f]\n    [(string=? text \"z\") #f]\n    [(string=? text \"z\") #f]\n    [(string=? text \"z\") #f]\n    [(string=? text \"z\") #f]\n    [(string=? text \"z\") #f]\n    [(string=? text \"z\") #f]\n    [(string=? text \"z\") #f]\n    [(string=? text \"z\") #f]\n    [(string=? text \"z\") #f]\n    [(string=? text \"z\") #f]\n   ",
    "  (and (regexp-match? #rx\"z\" text)\n       (not (regexp-match? #rx\"^z\" text))\n       (not (regexp-match? #rx\"z$\" text))))\n",
    "  (cond\n    [(empty? text) false]\n    [(equal? (first text) 'z) false]\n    [(equal? (last text) 'z) false]\n    [(member 'z text) true]\n    [else false]))\n",
    "  (define (check-word word)\n    (and (not (string=? (substring word 0 1) \"z\"))\n         (not (string=? (substring word (- (string-length word) 1)) \"z\"))\n         (regexp-match? #rx\"z\" word)))\n  (filter check-word (regexp-split #rx\" \" text)))\n",
    "  (cond\n    [(empty? text) #f]\n    [(equal? (first text) #\\z) #f]\n    [(equal? (last text) #\\z) #f]\n    [else (or (equal? (first text) #\\z) (text_match_wordz_middle (rest text)))]))\n",
    "  (let ([text-list (string-&gt;list text)]\n        [text-length (length text-list)])\n    (cond\n      [(or (= text-length 0) (= text-length 1)) #f]\n      [(and (char=? (list-ref text-list 0) #\\z) (char=? (list-ref text-list (- text-length 1)) #\\z)) #f]\n      [(or (char=? (list-ref text-list 0) #\\z) (char=? (list-ref text-list (- text-length 1)) #\\z)) #t]\n      [(and (char=? (list-ref text-list 0) #\\z) (char=? (list-ref text-list (- text-length 1)) #\\z)) #f]\n      [else (cond\n              [(member #\\z text-list) #t]\n              [else #f])])))\n</code>\nI know that I can use <code>regexp-match</code> to do this, but I want to do it without using <code>regexp-match</code>.\n\n\nA:\n\nYou can use <code>string-contains</code> to check if a string contains a character, and <code>string-ref</code> to get the first and last characters.\n<code>(define (text_match_wordz_middle text)\n  (and (string-contains text #\\z)\n       (not (or (char=? (string-ref text 0) #\\z)\n                (char=? (string-ref text (sub1 (string-length text))) #\\z)))))\n</code>\n",
    "  (regexp-match? #rx\"\\Bz\\B\" text))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (define (helper text)\n    (cond\n      [(empty? text) #f]\n      [(equal? (first text) 'z') #t]\n      [else (helper (rest text))]))\n  (cond\n    [(empty? text) #f]\n    [(helper (rest (butlast text))) #t]\n    [else #f]))\n",
    "  (cond\n    [(empty? text) #f]\n    [(string=? (substring text 0 1) \"z\") (text_match_wordz_middle (substring text 1))]\n    [(string=? (substring text -1) \"z\") (text_match_wordz_middle (substring text 0 -1))]\n    [(string-contains text \"z\") #t]\n    [else #f]))\n",
    "  (and (regexp-match? #rx\"z\" text)\n       (not (regexp-match? #rx\"^z\" text))\n       (not (regexp-match? #rx\"z$\" text))))\n",
    "  (regexp-match? #rx\"z\" text))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (cond\n    [(empty? text) #f]\n    [(equal? (first text) #\\z) (text_match_wordz_middle (rest text))]\n    [(equal? (last text) #\\z) (text_match_wordz_middle (butlast text))]\n    [(regexp-match #rx\"z\" text) #t]\n    [else #f]))\n",
    "  (cond\n    [(empty? text) #f]\n    [(equal? (first text) #\\z) #f]\n    [(equal? (last text) #\\z) #f]\n    [else (or (equal? (first text) #\\z)\n              (text_match_wordz_middle (rest text)))]))\n",
    "  (cond\n    [(empty? text) #f]\n    [(string=? (substring text 1) \"z\") #f]\n    [(string=? (substring text -2) \"z\") #f]\n    [(string=? (substring text 1 -1) \"z\") #t]\n    [else (text_match_wordz_middle (substring text 1 -1))]))\n",
    "  (cond\n    [(empty? text) #f]\n    [(and (equal? (first text) #\\z) (not (equal? (last text) #\\z))) #t]\n    [else (text_match_wordz_middle (rest text))]))\n",
    "  (cond\n    [(empty? text) #f]\n    [(string=? (substring text 0 1) \"z\") (text_match_wordz_middle (substring text 1))]\n    [(string=? (substring text -1) \"z\") (text_match_wordz_middle (substring text 0 -1))]\n    [(string-contains text \"z\") #t]\n    [else #f]))\n",
    "  (cond\n    [(empty? text) #f]\n    [(equal? (first text) #\\z) #f]\n    [(equal? (last text) #\\z) #f]\n    [(regexp-match #rx\"z\" text) #t]\n    [else #f]))\n",
    "  (cond\n    [(empty? text) #f]\n    [(char=? (first text) #\\z) #f]\n    [(char=? (last text) #\\z) #f]\n    [else (or (char=? (first text) #\\z)\n              (text_match_wordz_middle (rest text)))]))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (cond\n    [(empty? text) #f]\n    [(equal? 'z (first text)) #t]\n    [else (text_match_wordz_middle (rest text))]))\n",
    "  (define (helper text)\n    (if (empty? text)\n        #f\n        (if (equal? (first text) 'z')\n            (if (empty? (rest text))\n                #f\n                (if (empty? (rest (rest text)))\n                    #f\n                    #t))\n            (helper (rest text)))))\n  (helper (string->list text)))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (and (regexp-match? #rx\"z\" text)\n       (not (regexp-match? #rx\"^z\" text))\n       (not (regexp-match? #rx\"z$\" text))))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (and (regexp-match? #rx\"z\" text)\n       (not (regexp-match? #rx\"^z\" text))\n       (not (regexp-match? #rx\"z$\" text))))\n",
    "  (regexp-match? #rx\"\\Bz\\B\" text))\n",
    "  (cond\n    [(empty? text) #f]\n    [(and (char=? (first text) #\\z) (not (or (empty? (rest text)) (empty? (rest (rest text)))))) #t]\n    [else (text_match_wordz_middle (rest text))]))\n",
    "  (regexp-match? #rx\"z\" text))\n",
    "  (regexp-match? #rx\"z\" text))\n",
    "  (cond\n    [(empty? text) #f]\n    [(equal? (first text) 'z') #f]\n    [(equal? (last text) 'z') #f]\n    [else (or (equal? (first text) 'z') (text_match_wordz_middle (rest text)))]))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (define (text_match_wordz_middle_iter text)\n    (if (empty? text)\n        #f\n        (if (equal? (first text) #\\z)\n            (if (or (empty? (rest text))\n                    (empty? (rest (rest text))))\n                #f\n                (text_match_wordz_middle_iter (rest (rest text))))\n            (text_match_wordz_middle_iter (rest text)))))\n  (text_match_wordz_middle_iter text))\n",
    "  (regexp-match? #rx\"z\" text))\n",
    "  (and (regexp-match? #rx\"z\" text)\n       (not (regexp-match? #rx\"^z\" text))\n       (not (regexp-match? #rx\"z$\" text))))\n",
    "  (regexp-match? #rx\"\\bz\\b\" text))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (and (string-contains text #\\z)\n       (not (string-contains text #\\z 1 (- (string-length text) 1)))))\n",
    "  (cond\n    [(empty? text) #f]\n    [(string=? (substring text 0 1) \"z\") (text_match_wordz_middle (substring text 1))]\n    [(string=? (substring text -1) \"z\") (text_match_wordz_middle (substring text 0 -1))]\n    [(string-contains text \"z\") #t]\n    [else #f]))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (cond\n    [(empty? text) #f]\n    [(string=? (substring text 0 1) \"z\") (text_match_wordz_middle (substring text 1))]\n    [(string=? (substring text -1) \"z\") (text_match_wordz_middle (substring text 0 -1))]\n    [(string-contains text \"z\") #t]\n    [else #f]))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (define (match-wordz-middle text)\n    (cond\n      [(empty? text) #f]\n      [(equal? (first text) 'z') (match-wordz-middle (rest text))]\n      [(equal? (first text) 'z') #t]\n      [else (match-wordz-middle (rest text))]))\n  (match-wordz-middle (string->list text)))\n",
    "  (regexp-match? #rx\"z\" text))\n",
    "  (regexp-match? #rx\"z\" text))\n",
    "  (cond\n    [(empty? text) #f]\n    [(equal? (first text) #\\z) #f]\n    [(equal? (last text) #\\z) #f]\n    [(regexp-match? #rx\"z\" text) #t]\n    [else #f]))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (regexp-match? #rx\"\\Bz\\B\" text))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (regexp-match? #rx\"\\Bz\\B\" text))\n",
    "  (regexp-match? #rx\"^[^z].*z.*[^z]$\" text))\n",
    "  (cond\n    [(empty? text) #f]\n    [(char=? (first text) #\\z) #f]\n    [(char=? (last text) #\\z) #f]\n    [(regexp-match #rx\"z\" text) #t]\n    [else #f]))\n",
    "  (and (regexp-match? #rx\"z\" text)\n       (not (regexp-match? #rx\"^z\" text))\n       (not (regexp-match? #rx\"z$\" text))))\n",
    "  (regexp-match? #rx\"(?&lt;!^)z(?!$)\" text))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (regexp-match? #rx\"z\" text))\n",
    "  (cond\n    [(empty? text) false]\n    [(and (not (empty? (rest text))) (char=? (first text) #\\z) (char=? (last text) #\\z)) false]\n    [(char=? (first text) #\\z) (text_match_wordz_middle (rest text))]\n    [else (or (char=? (first text) #\\z) (text_match_wordz_middle (rest text)))]))\n",
    "  (cond\n    [(empty? text) #f]\n    [(equal? (first text) #\\z) #f]\n    [(equal? (last text) #\\z) #f]\n    [else (or (equal? (first text) #\\z)\n              (text_match_wordz_middle (rest text)))]))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (regexp-match? #rx\"z\" text))\n",
    "  (and (regexp-match #rx\"^[^z]*z[^z]*$\" text)\n       (not (regexp-match #rx\"^z\" text))\n       (not (regexp-match #rx\"z$\" text))))\n",
    "  (cond\n    [(empty? text) #f]\n    [(regexp-match #rx\"^z\" text) #f]\n    [(regexp-match #rx\"z$\" text) #f]\n    [(regexp-match #rx\"z\" text) #t]\n    [else #f]))\n",
    "  (if (string-contains text #\\z)\n      (if (string-contains text #\\z 1 (- (string-length text) 1))\n          #t\n          #f)\n      #f))\n",
    "  (and (regexp-match? #rx\"z\" text)\n       (not (regexp-match? #rx\"^z\" text))\n       (not (regexp-match? #rx\"z$\" text))))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (if (empty? text)\n      #f\n      (if (equal? (first text) #\\z)\n          (if (equal? (last text) #\\z)\n              (text_match_wordz_middle (rest (butlast text)))\n              #t)\n          (text_match_wordz_middle (rest text)))))\n",
    "  (string-match \"\\\\bz\\\\b\" text))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (cond\n    [(empty? text) #f]\n    [(and (char=? (first text) #\\z) (not (empty? (rest text)))) #t]\n    [else (text_match_wordz_middle (rest text))]))\n",
    "  (regexp-match? #rx\"^[^z].*[^z]$\" text))\n",
    "  (cond\n    [(empty? text) #f]\n    [(string=? (substring text 0 1) \"z\") #f]\n    [(string=? (substring text -1) \"z\") #f]\n    [(string-contains text \"z\") #t]\n    [else #f]))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (regexp-match? #rx\"z\" text))\n",
    "  (and (regexp-match? #rx\"z\" text)\n       (not (regexp-match? #rx\"^z\" text))\n       (not (regexp-match? #rx\"z$\" text))))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (regexp-match? #rx\"z\" text))\n",
    "  (regexp-match? #rx\"\\Bz\\B\" text))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (regexp-match? #rx\"\\Bz\\B\" text))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (define (text_match_wordz_middle_iter text i)\n    (cond\n      [(empty? text) #f]\n      [(char=? (string-ref text i) #\\z) #t]\n      [else (text_match_wordz_middle_iter text (+ i 1))]))\n  (text_match_wordz_middle_iter text 1))\n",
    "  (cond\n    [(empty? text) #f]\n    [(equal? (first text) 'z) #f]\n    [(equal? (last text) 'z) #f]\n    [else (or (equal? (first text) 'z) (text_match_wordz_middle (rest text)))]))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (regexp-match? #rx\"^[^z].*z.*[^z]$\" text))\n",
    "  (regexp-match? #rx\"\\Bz\\B\" text))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (cond\n    [(empty? text) #f]\n    [(equal? (first text) #\\z) #f]\n    [(equal? (last text) #\\z) #f]\n    [(regexp-match #rx\"z\" text) #t]\n    [else #f]))\n",
    "  (and (regexp-match? #rx\"z\" text)\n       (not (regexp-match? #rx\"^z\" text))\n       (not (regexp-match? #rx\"z$\" text))))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (regexp-match? #rx\"z\" text))\n",
    "  (cond\n    [(empty? text) #f]\n    [(equal? (first text) #\\z) #f]\n    [(equal? (last text) #\\z) #f]\n    [(regexp-match #rx\"z\" text) #t]\n    [else #f]))\n",
    "  (cond\n    [(empty? text) #f]\n    [(equal? (first text) #\\z) #f]\n    [(equal? (last text) #\\z) #f]\n    [else (or (equal? (first text) #\\z)\n              (text_match_wordz_middle (rest text)))]))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (and (regexp-match #rx\"z\" text)\n       (not (regexp-match #rx\"^z\" text))\n       (not (regexp-match #rx\"z$\" text))))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (cond\n    [(empty? text) #f]\n    [(equal? (first text) #\\z) #f]\n    [(equal? (last text) #\\z) #f]\n    [else (or (equal? (first text) #\\z)\n              (text_match_wordz_middle (rest text)))]))\n",
    "  (regexp-match? #rx\"z\" text))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (and (regexp-match? #rx\"z\" text)\n       (not (regexp-match? #rx\"^z\" text))\n       (not (regexp-match? #rx\"z$\" text))))\n",
    "  (cond\n    [(empty? text) #f]\n    [(equal? (first text) #\\z) #f]\n    [(equal? (last text) #\\z) #f]\n    [(regexp-match #rx\"z\" text) #t]\n    [else #f]))\n",
    "  (regexp-match? #rx\"(?&lt;!^)z(?!$)\" text))\n</code>\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (define (match-wordz-middle text)\n    (cond\n      [(empty? text) #f]\n      [(char=? (first text) #\\z) #t]\n      [else (match-wordz-middle (rest text))]))\n  (match-wordz-middle (rest (butlast text))))\n",
    "  (regexp-match? #rx\"\\Bz\\B\" text))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (cond\n    [(empty? text) #f]\n    [(equal? (first text) 'z) (text_match_wordz_middle (rest text))]\n    [(equal? (last text) 'z) (text_match_wordz_middle (rest text))]\n    [else (or (equal? (first text) 'z) (text_match_wordz_middle (rest text)))]))\n",
    "  (regexp-match? #rx\"z\" text))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (regexp-match? #rx\"^[^z].*z.*[^z]$\" text))\n",
    "  (and (regexp-match? #rx\"z\" text)\n       (not (regexp-match? #rx\"^z\" text))\n       (not (regexp-match? #rx\"z$\" text))))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (and (regexp-match? #rx\"z\" text)\n       (not (regexp-match? #rx\"^z\" text))\n       (not (regexp-match? #rx\"z$\" text))))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (and (regexp-match? #rx\"z\" text)\n       (not (regexp-match? #rx\"^z\" text))\n       (not (regexp-match? #rx\"z$\" text))))\n",
    "  (define (helper text)\n    (if (empty? text)\n        #f\n        (if (string=? (first text) \"z\")\n            (if (string=? (last text) \"z\")\n                #f\n                #t)\n            (helper (rest text)))))\n  (helper text))\n",
    "  (cond\n    [(empty? text) #f]\n    [(equal? (first text) #\\z) #f]\n    [(equal? (last text) #\\z) #f]\n    [(regexp-match #rx\"z\" text) #t]\n    [else #f]))\n",
    "  (regexp-match? #rx\"z\" text))\n",
    "  (regexp-match? #rx\"z\" text))\n",
    "  (regexp-match #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (and (string-contains text #\\z)\n       (not (string-contains (substring text 1 (sub1 (string-length text))) #\\z))))\n",
    "  (regexp-match? #rx\"^[^z].*z.*[^z]$\" text))\n",
    "  (regexp-match? #rx\"\\Az.*z\\Z\" text))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (regexp-match? #rx\"z\" text))\n",
    "  (regexp-match? #rx\"\\Bz\\B\" text))\n",
    "  (regexp-match? #rx\"\\Bz\\B\" text))\n",
    "  (regexp-match? #rx\"^[^z].*z.*[^z]$\" text))\n",
    "  (regexp-match? #rx\"^[^z].*z.*[^z]$\" text))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (regexp-match? #rx\"\\Bz\\B\" text))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (regexp-match? #rx\"z\" text))\n",
    "  (regexp-match? #rx\"\\Bz\\B\" text))\n",
    "  (and (regexp-match? #rx\"^[^z]*z[^z]*$\" text)\n       (not (regexp-match? #rx\"^z\" text))\n       (not (regexp-match? #rx\"z$\" text))))\n",
    "  (regexp-match? #rx\"\\Bz\\B\" text))\n",
    "  (cond\n    [(empty? text) #f]\n    [(char=? (first text) #\\z) #f]\n    [(char=? (last text) #\\z) #f]\n    [else (or (char=? (first text) #\\z)\n              (text_match_wordz_middle (rest text)))]))\n",
    "  (regexp-match? #rx\"z\" text))\n",
    "  (cond\n    [(empty? text) #f]\n    [(and (char=? (first text) #\\z) (not (empty? (rest text))))\n     (text_match_wordz_middle (rest text))]\n    [(and (char=? (first text) #\\z) (empty? (rest text))) #f]\n    [(char=? (first text) #\\z) #t]\n    [else (text_match_wordz_middle (rest text))]))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (define (match-wordz-middle text)\n    (cond\n      [(empty? text) #f]\n      [(equal? (first text) \"z\") (match-wordz-middle (rest text))]\n      [(equal? (first text) \" \") (match-wordz-middle (rest text))]\n      [(equal? (first text) \".\") (match-wordz-middle (rest text))]\n      [(equal? (first text) \",\") (match-wordz-middle (rest text))]\n      [(equal? (first text) \"!\") (match-wordz-middle (rest text))]\n      [(equal? (first text) \"?\") (match-wordz-middle (rest text))]\n      [(equal? (first text) \":\") (match-wordz-middle (rest text))]\n      [(equal? (first text) \";\") (match-wordz-middle (rest text))]\n      [(equal? (first text) \"\\\"\") (match-wordz-middle (rest text))]\n      [(equal? (first text) \"'\") (match-wordz-middle (rest text))]\n      [(equal? (first text) \")\") (match-wordz-middle (rest text))]\n      [(equal? (first text) \"(\") (match-wordz-middle (rest text))]\n      [(equal? (first text) \"]\") (match-wordz-middle (rest text))]\n      [(equal? (first text) \"[\") (match-wordz-middle (rest text))]\n      [(equal? (first text) \"}\") (match-wordz-middle (rest text))]\n      [(equal? (first text) \"{\") (match-wordz-middle (rest text))]\n      [(equal? (first text) \"z\") #t]\n      [else (match-wordz-middle (rest text))]))\n  (match-wordz-middle text))\n",
    "  (regexp-match? #rx\"\\Bz\\B\" text))\n",
    "  (regexp-match? #rx\"z\" text))\n",
    "  (regexp-match? #rx\"z\" text))\n",
    "  (regexp-match? #rx\"z\" text))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (cond\n    [(empty? text) #f]\n    [(equal? (first text) #\\z) #f]\n    [(equal? (last text) #\\z) #f]\n    [else (or (equal? (first text) #\\z)\n              (text_match_wordz_middle (rest text)))]))\n",
    "  (define (text_match_wordz_middle_iter text)\n    (cond\n      [(empty? text) #f]\n      [(equal? (first text) #\\z) #t]\n      [else (text_match_wordz_middle_iter (rest text))]))\n  (and (not (empty? text))\n       (not (equal? (first text) #\\z))\n       (not (equal? (last text) #\\z))\n       (text_match_wordz_middle_iter text)))\n",
    "  (regexp-match? #rx\"z\" text))\n",
    "  (cond\n    [(empty? text) #f]\n    [(equal? (first text) 'z) #f]\n    [(equal? (last text) 'z) #f]\n    [(member 'z text) #t]\n    [else #f]))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (and (regexp-match? #rx\"z\" text)\n       (not (regexp-match? #rx\"^z\" text))\n       (not (regexp-match? #rx\"z$\" text))))\n",
    "  (cond\n    [(empty? text) #f]\n    [(equal? (first text) #\\z) #f]\n    [(equal? (last text) #\\z) #f]\n    [else (or (equal? (first text) #\\z) (text_match_wordz_middle (rest text)))]))\n",
    "  (regexp-match? #rx\"z\" text))\n",
    "  (regexp-match? #rx\"z\" text))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (regexp-match? #rx\"\\Bz\\B\" text))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (regexp-match? #rx\"\\Bz\\B\" text))\n",
    "  (cond\n    [(empty? text) #f]\n    [(and (char=? (first text) #\\z) (char=? (last text) #\\z)) #f]\n    [(char=? (first text) #\\z) (text_match_wordz_middle (rest text))]\n    [(char=? (last text) #\\z) (text_match_wordz_middle (butlast text))]\n    [else (or (text_match_wordz_middle (rest text)) (text_match_wordz_middle (butlast text)))]))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (regexp-match? #rx\"\\Bz\\B\" text))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n"
  ]
}