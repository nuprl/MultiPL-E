{
  "name": "mbpp_397_median_numbers",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_397_median_numbers.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(and (< a b) (< b c)) b]\n        [(and (< a c) (< c b)) c]\n        [(and (< b a) (< a c)) a]\n        [(and (< b c) (< c a)) c]\n        [(and (< c a) (< a b)) a]\n        [(and (< c b) (< b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkoiz9nhk.rkt:17:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkoiz9nhk.rkt:18:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkoiz9nhk.rkt:19:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(and (<= a b) (<= b c)) b]\n        [(and (<= a c) (<= c b)) c]\n        [(and (<= b a) (<= a c)) a]\n        [(and (<= b c) (<= c a)) c]\n        [(and (<= c a) (<= a b)) a]\n        [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpan54m_3u.rkt:17:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpan54m_3u.rkt:18:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpan54m_3u.rkt:19:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (< a b) (< b c)) b]\n    [(and (< b a) (< a c)) a]\n    [(and (< b c) (< c a)) c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf7tewsza.rkt:15:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf7tewsza.rkt:16:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf7tewsza.rkt:17:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (<= a b) (<= b c)) b]\n    [(and (<= a c) (<= c b)) c]\n    [(and (<= b a) (<= a c)) a]\n    [(and (<= b c) (<= c a)) c]\n    [(and (<= c a) (<= a b)) a]\n    [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(> a b) (cond [(> b c) b]\n                        [(> a c) c]\n                        [else a])]\n        [(> b c) (cond [(> a c) c]\n                        [else a])]\n        [else b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwga118ce.rkt:17:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwga118ce.rkt:18:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwga118ce.rkt:19:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(and (<= a b) (<= b c)) b]\n        [(and (<= a c) (<= c b)) c]\n        [(and (<= b a) (<= a c)) a]\n        [(and (<= b c) (<= c a)) c]\n        [(and (<= c a) (<= a b)) a]\n        [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpan54m_3u.rkt:17:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpan54m_3u.rkt:18:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpan54m_3u.rkt:19:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (< a b) (< b c)) b]\n    [(and (< a c) (< c b)) c]\n    [(and (< b a) (< a c)) a]\n    [(and (< b c) (< c a)) c]\n    [(and (< c a) (< a b)) a]\n    [(and (< c b) (< b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (<= a b) (<= b c)) b]\n    [(and (<= a c) (<= c b)) c]\n    [(and (<= b a) (<= a c)) a]\n    [(and (<= b c) (<= c a)) c]\n    [(and (<= c a) (<= a b)) a]\n    [(and (<= c b) (<= b a)) b]\n    [else (error \"Something went wrong\")]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg3wxmgik.rkt:19:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg3wxmgik.rkt:20:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg3wxmgik.rkt:21:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (<= a b) (<= b c)) b]\n    [(and (<= a c) (<= c b)) c]\n    [(and (<= b a) (<= a c)) a]\n    [(and (<= b c) (<= c a)) c]\n    [(and (<= c a) (<= a b)) a]\n    [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(and (&lt;= a b) (&lt;= b c)) b]\n        [(and (&lt;= a c) (&lt;= c b)) c]\n        [(and (&lt;= b a) (&lt;= a c)) a]\n        [(and (&lt;= b c) (&lt;= c a)) c]\n        [(and (&lt;= c a) (&lt;= a b)) a]\n        [(and (&lt;= c b) (&lt;= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509797,
      "stdout": "",
      "stderr": "/tmp/tmpfmpadu00.rkt:10:14: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 12\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(and (<= a b) (<= b c)) b]\n        [(and (<= a c) (<= c b)) c]\n        [(and (<= b a) (<= a c)) a]\n        [(and (<= b c) (<= c a)) c]\n        [(and (<= c a) (<= a b)) a]\n        [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpan54m_3u.rkt:17:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpan54m_3u.rkt:18:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpan54m_3u.rkt:19:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (<= a b) (<= b c)) b]\n    [(and (<= a c) (<= c b)) c]\n    [(and (<= b a) (<= a c)) a]\n    [(and (<= b c) (<= c a)) c]\n    [(and (<= c a) (<= a b)) a]\n    [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(and (<= a b) (<= b c)) b]\n        [(and (<= a c) (<= c b)) c]\n        [(and (<= b a) (<= a c)) a]\n        [(and (<= b c) (<= c a)) c]\n        [(and (<= c a) (<= a b)) a]\n        [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpan54m_3u.rkt:17:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpan54m_3u.rkt:18:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpan54m_3u.rkt:19:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(> a b)\n     (cond\n       [(> b c) b]\n       [(> a c) c]\n       [else a])]\n    [(> b c)\n     (cond\n       [(> a c) a]\n       [else c])]\n    [else\n     (cond\n       [(> a b) a]\n       [else b])]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpni1_fdb8.rkt:25:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpni1_fdb8.rkt:26:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpni1_fdb8.rkt:27:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (< a b) (< b c)) b]\n    [(and (< a c) (< c b)) c]\n    [(and (< b a) (< a c)) a]\n    [(and (< b c) (< c a)) c]\n    [(and (< c a) (< a b)) a]\n    [(and (< c b) (< b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(and (&lt;= a b) (&lt;= b c)) b]\n        [(and (&lt;= a c) (&lt;= c b)) c]\n        [(and (&lt;= b a) (&lt;= a c)) a]\n        [(and (&lt;= b c) (&lt;= c a)) c]\n        [(and (&lt;= c a) (&lt;= a b)) a]\n        [(and (&lt;= c b) (&lt;= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509797,
      "stdout": "",
      "stderr": "/tmp/tmpfmpadu00.rkt:10:14: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 12\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (< a b) (< b c)) b]\n    [(and (< a c) (< c b)) c]\n    [(and (< b a) (< a c)) a]\n    [(and (< b c) (< c a)) c]\n    [(and (< c a) (< a b)) a]\n    [(and (< c b) (< b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (< a b) (< b c)) b]\n    [(and (< a c) (< c b)) c]\n    [(and (< b a) (< a c)) a]\n    [(and (< b c) (< c a)) c]\n    [(and (< c a) (< a b)) a]\n    [(and (< c b) (< b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(and (<= a b) (<= b c)) b]\n        [(and (<= a c) (<= c b)) c]\n        [(and (<= b a) (<= a c)) a]\n        [(and (<= b c) (<= c a)) c]\n        [(and (<= c a) (<= a b)) a]\n        [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpan54m_3u.rkt:17:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpan54m_3u.rkt:18:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpan54m_3u.rkt:19:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (< a b) (< b c)) b]\n    [(and (< a c) (< c b)) c]\n    [(and (< b a) (< a c)) a]\n    [(and (< b c) (< c a)) c]\n    [(and (< c a) (< a b)) a]\n    [(and (< c b) (< b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(and (> a b) (> b c)) b]\n        [(and (> a c) (> c b)) c]\n        [(and (> b a) (> a c)) a]\n        [(and (> b c) (> c a)) c]\n        [(and (> c a) (> a b)) a]\n        [(and (> c b) (> b a)) b]\n        [(and (= a b) (= b c)) a]\n        [(and (= a b) (> b c)) b]\n        [(and (= a b) (> c b)) c]\n        [(and (= a c) (> c b)) a]\n        [(and (= a c) (> b c)) b]\n        [(and (= b c) (> c a)) b]\n        [(and (= b c) (> a c)) a]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp08o0wab7.rkt:24:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp08o0wab7.rkt:25:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp08o0wab7.rkt:26:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(and (<= a b) (<= b c)) b]\n        [(and (<= a c) (<= c b)) c]\n        [(and (<= b a) (<= a c)) a]\n        [(and (<= b c) (<= c a)) c]\n        [(and (<= c a) (<= a b)) a]\n        [(and (<= c b) (<= b a)) b]\n        [else (error \"Something went wrong\")]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_epeyuy3.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_epeyuy3.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_epeyuy3.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (<= a b) (<= b c)) b]\n    [(and (<= a c) (<= c b)) c]\n    [(and (<= b a) (<= a c)) a]\n    [(and (<= b c) (<= c a)) c]\n    [(and (<= c a) (<= a b)) a]\n    [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (< a b) (< b c)) b]\n    [(and (< b a) (< a c)) a]\n    [(and (< b c) (< c a)) c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf7tewsza.rkt:15:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf7tewsza.rkt:16:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf7tewsza.rkt:17:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (<= a b) (<= b c)) b]\n    [(and (<= a c) (<= c b)) c]\n    [(and (<= b a) (<= a c)) a]\n    [(and (<= b c) (<= c a)) c]\n    [(and (<= c a) (<= a b)) a]\n    [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (< a b) (< b c)) b]\n    [(and (< a c) (< c b)) c]\n    [(and (< b a) (< a c)) a]\n    [(and (< b c) (< c a)) c]\n    [(and (< c a) (< a b)) a]\n    [(and (< c b) (< b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond ((and (<= a b) (<= b c)) b)\n        ((and (<= b a) (<= a c)) a)\n        ((and (<= a c) (<= c b)) c)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvzao3mpa.rkt:14:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvzao3mpa.rkt:15:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvzao3mpa.rkt:16:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (<= a b) (<= b c)) b]\n    [(and (<= a c) (<= c b)) c]\n    [(and (<= b a) (<= a c)) a]\n    [(and (<= b c) (<= c a)) c]\n    [(and (<= c a) (<= a b)) a]\n    [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond ((and (<= a b) (<= b c)) b)\n        ((and (<= b a) (<= a c)) a)\n        ((and (<= a c) (<= c b)) c)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvzao3mpa.rkt:14:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvzao3mpa.rkt:15:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvzao3mpa.rkt:16:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(and (<= a b) (<= b c)) b]\n        [(and (<= b a) (<= a c)) a]\n        [(and (<= a c) (<= c b)) c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123976,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpichmgo65.rkt:14:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpichmgo65.rkt:15:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpichmgo65.rkt:16:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (<= a b) (<= b c)) b]\n    [(and (<= a c) (<= c b)) c]\n    [(and (<= b a) (<= a c)) a]\n    [(and (<= b c) (<= c a)) c]\n    [(and (<= c a) (<= a b)) a]\n    [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(and (<= a b) (<= b c)) b]\n        [(and (<= a c) (<= c b)) c]\n        [(and (<= b a) (<= a c)) a]\n        [(and (<= b c) (<= c a)) c]\n        [(and (<= c a) (<= a b)) a]\n        [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpan54m_3u.rkt:17:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpan54m_3u.rkt:18:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpan54m_3u.rkt:19:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (<= a b) (<= b c)) b]\n    [(and (<= b a) (<= a c)) a]\n    [(and (<= b c) (<= c a)) c]\n    [(and (<= c a) (<= a b)) a]\n    [(and (<= c b) (<= b a)) b]\n    [(and (<= a c) (<= c b)) c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptr_f6f5k.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptr_f6f5k.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptr_f6f5k.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (< a b) (< b c)) b]\n    [(and (< a c) (< c b)) c]\n    [(and (< b a) (< a c)) a]\n    [(and (< b c) (< c a)) c]\n    [(and (< c a) (< a b)) a]\n    [(and (< c b) (< b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(and (< a b) (< b c)) b]\n        [(and (< a c) (< c b)) c]\n        [(and (< b a) (< a c)) a]\n        [(and (< b c) (< c a)) c]\n        [(and (< c a) (< a b)) a]\n        [(and (< c b) (< b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkoiz9nhk.rkt:17:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkoiz9nhk.rkt:18:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkoiz9nhk.rkt:19:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (<= a b) (<= b c)) b]\n    [(and (<= b a) (<= a c)) a]\n    [(and (<= a c) (<= c b)) c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123977,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv2_j39ui.rkt:15:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv2_j39ui.rkt:16:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv2_j39ui.rkt:17:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (<= a b) (<= b c)) b]\n    [(and (<= a c) (<= c b)) c]\n    [(and (<= b a) (<= a c)) a]\n    [(and (<= b c) (<= c a)) c]\n    [(and (<= c a) (<= a b)) a]\n    [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (<= a b) (<= b c)) b]\n    [(and (<= a c) (<= c b)) c]\n    [(and (<= b a) (<= a c)) a]\n    [(and (<= b c) (<= c a)) c]\n    [(and (<= c a) (<= a b)) a]\n    [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (<= a b) (<= b c)) b]\n    [(and (<= a c) (<= c b)) c]\n    [(and (<= b a) (<= a c)) a]\n    [(and (<= b c) (<= c a)) c]\n    [(and (<= c a) (<= a b)) a]\n    [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(and (<= a b) (<= b c)) b]\n        [(and (<= a c) (<= c b)) c]\n        [else a]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr3_s193i.rkt:14:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr3_s193i.rkt:15:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr3_s193i.rkt:16:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(and (&lt;= a b) (&lt;= b c)) b]\n        [(and (&lt;= a c) (&lt;= c b)) c]\n        [(and (&lt;= b a) (&lt;= a c)) a]\n        [(and (&lt;= b c) (&lt;= c a)) c]\n        [(and (&lt;= c a) (&lt;= a b)) a]\n        [(and (&lt;= c b) (&lt;= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509797,
      "stdout": "",
      "stderr": "/tmp/tmpfmpadu00.rkt:10:14: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 12\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(and (<= a b) (<= b c)) b]\n        [(and (<= b a) (<= a c)) a]\n        [(and (<= a c) (<= c b)) c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123976,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpichmgo65.rkt:14:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpichmgo65.rkt:15:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpichmgo65.rkt:16:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(and (<= a b) (<= b c)) b]\n        [(and (<= a c) (<= c b)) c]\n        [(and (<= b a) (<= a c)) a]\n        [(and (<= b c) (<= c a)) c]\n        [(and (<= c a) (<= a b)) a]\n        [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpan54m_3u.rkt:17:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpan54m_3u.rkt:18:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpan54m_3u.rkt:19:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (<= a b) (<= b c)) b]\n    [(and (<= a c) (<= c b)) c]\n    [(and (<= b a) (<= a c)) a]\n    [(and (<= b c) (<= c a)) c]\n    [(and (<= c a) (<= a b)) a]\n    [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (<= a b) (<= b c)) b]\n    [(and (<= a c) (<= c b)) c]\n    [(and (<= b a) (<= a c)) a]\n    [(and (<= b c) (<= c a)) c]\n    [(and (<= c a) (<= a b)) a]\n    [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (<= a b) (<= b c)) b]\n    [(and (<= b a) (<= a c)) a]\n    [(and (<= a c) (<= c b)) c]\n    [(and (<= b c) (<= c a)) c]\n    [(and (<= c a) (<= a b)) a]\n    [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf_iw5xu.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf_iw5xu.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf_iw5xu.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (< a b) (< b c)) b]\n    [(and (< a c) (< c b)) c]\n    [(and (< b a) (< a c)) a]\n    [(and (< b c) (< c a)) c]\n    [(and (< c a) (< a b)) a]\n    [(and (< c b) (< b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (< a b) (< b c)) b]\n    [(and (< a c) (< c b)) c]\n    [(and (< b a) (< a c)) a]\n    [(and (< b c) (< c a)) c]\n    [(and (< c a) (< a b)) a]\n    [(and (< c b) (< b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (< a b) (< b c)) b]\n    [(and (< a c) (< c b)) c]\n    [(and (< b a) (< a c)) a]\n    [(and (< b c) (< c a)) c]\n    [(and (< c a) (< a b)) a]\n    [(and (< c b) (< b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (<= a b) (<= b c)) b]\n    [(and (<= a c) (<= c b)) c]\n    [(and (<= b a) (<= a c)) a]\n    [(and (<= b c) (<= c a)) c]\n    [(and (<= c a) (<= a b)) a]\n    [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (<= a b) (<= b c)) b]\n    [(and (<= a c) (<= c b)) c]\n    [(and (<= b a) (<= a c)) a]\n    [(and (<= b c) (<= c a)) c]\n    [(and (<= c a) (<= a b)) a]\n    [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (< a b) (< b c)) b]\n    [(and (< a c) (< c b)) c]\n    [(and (< b a) (< a c)) a]\n    [(and (< b c) (< c a)) c]\n    [(and (< c a) (< a b)) a]\n    [(and (< c b) (< b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(and (<= a b) (<= b c)) b]\n        [(and (<= a c) (<= c b)) c]\n        [(and (<= b a) (<= a c)) a]\n        [(and (<= b c) (<= c a)) c]\n        [(and (<= c a) (<= a b)) a]\n        [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpan54m_3u.rkt:17:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpan54m_3u.rkt:18:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpan54m_3u.rkt:19:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(and (&lt; a b) (&lt; b c)) b]\n        [(and (&lt; b a) (&lt; a c)) a]\n        [(and (&lt; b c) (&lt; c a)) c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123978,
      "stdout": "",
      "stderr": "/tmp/tmpv2eihvsr.rkt:7:14: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 9\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (< a b) (< b c)) b]\n    [(and (< a c) (< c b)) c]\n    [(and (< b a) (< a c)) a]\n    [(and (< b c) (< c a)) c]\n    [(and (< c a) (< a b)) a]\n    [(and (< c b) (< b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (&lt;= a b) (&lt;= b c)) b]\n    [(and (&lt;= a c) (&lt;= c b)) c]\n    [(and (&lt;= b a) (&lt;= a c)) a]\n    [(and (&lt;= b c) (&lt;= c a)) c]\n    [(and (&lt;= c a) (&lt;= a b)) a]\n    [(and (&lt;= c b) (&lt;= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "/tmp/tmpn16rw4x8.rkt:11:10: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 13\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(and (&lt;= a b) (&lt;= b c)) b]\n        [(and (&lt;= a c) (&lt;= c b)) c]\n        [(and (&lt;= b a) (&lt;= a c)) a]\n        [(and (&lt;= b c) (&lt;= c a)) c]\n        [(and (&lt;= c a) (&lt;= a b)) a]\n        [(and (&lt;= c b) (&lt;= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509797,
      "stdout": "",
      "stderr": "/tmp/tmpfmpadu00.rkt:10:14: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 12\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (if (and (<= a b) (<= b c))\n      b\n      (if (and (<= a c) (<= c b))\n          c\n          a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyailj82b.rkt:16:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyailj82b.rkt:17:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyailj82b.rkt:18:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (<= a b) (<= b c)) b]\n    [(and (<= a c) (<= c b)) c]\n    [(and (<= b a) (<= a c)) a]\n    [(and (<= b c) (<= c a)) c]\n    [(and (<= c a) (<= a b)) a]\n    [(and (<= c b) (<= b a)) b]\n    [else (error \"No median found\")]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk775237b.rkt:19:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk775237b.rkt:20:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk775237b.rkt:21:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(and (> a b) (> b c)) b]\n        [(and (> a c) (> c b)) c]\n        [(and (> b a) (> a c)) a]\n        [(and (> b c) (> c a)) c]\n        [(and (> c a) (> a b)) a]\n        [(and (> c b) (> b a)) b]\n        [else a]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123977,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpypiz9h4z.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpypiz9h4z.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpypiz9h4z.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(and (<= a b) (<= b c)) b]\n        [(and (<= a c) (<= c b)) c]\n        [(and (<= b a) (<= a c)) a]\n        [(and (<= b c) (<= c a)) c]\n        [(and (<= c a) (<= a b)) a]\n        [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpan54m_3u.rkt:17:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpan54m_3u.rkt:18:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpan54m_3u.rkt:19:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (<= a b) (<= b c)) b]\n    [(and (<= b a) (<= a c)) a]\n    [(and (<= b c) (<= c a)) c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnx72el7z.rkt:15:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnx72el7z.rkt:16:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnx72el7z.rkt:17:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (<= a b) (<= b c)) b]\n    [(and (<= a c) (<= c b)) c]\n    [(and (<= b a) (<= a c)) a]\n    [(and (<= b c) (<= c a)) c]\n    [(and (<= c a) (<= a b)) a]\n    [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (<= a b) (<= b c)) b]\n    [(and (<= b a) (<= a c)) a]\n    [(and (<= a c) (<= c b)) c]\n    [(and (<= b c) (<= c a)) c]\n    [(and (<= c a) (<= a b)) a]\n    [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf_iw5xu.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf_iw5xu.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf_iw5xu.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (< a b) (< b c)) b]\n    [(and (< a c) (< c b)) c]\n    [(and (< b a) (< a c)) a]\n    [(and (< b c) (< c a)) c]\n    [(and (< c a) (< a b)) a]\n    [(and (< c b) (< b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (<= a b) (<= b c)) b]\n    [(and (<= a c) (<= c b)) c]\n    [(and (<= b a) (<= a c)) a]\n    [(and (<= b c) (<= c a)) c]\n    [(and (<= c a) (<= a b)) a]\n    [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(and (<= a b) (<= b c)) b]\n        [(and (<= a c) (<= c b)) c]\n        [(and (<= b a) (<= a c)) a]\n        [(and (<= b c) (<= c a)) c]\n        [(and (<= c a) (<= a b)) a]\n        [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpan54m_3u.rkt:17:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpan54m_3u.rkt:18:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpan54m_3u.rkt:19:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (< a b) (< b c)) b]\n    [(and (< a c) (< c b)) c]\n    [(and (< b a) (< a c)) a]\n    [(and (< b c) (< c a)) c]\n    [(and (< c a) (< a b)) a]\n    [(and (< c b) (< b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(< a b) (median_numbers b a c)]\n        [(< b c) b]\n        [(< a c) c]\n        [else a]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123976,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3k5s3cqe.rkt:15:4\nactual:     25\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3k5s3cqe.rkt:16:4\nactual:     10\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3k5s3cqe.rkt:17:4\nactual:     15\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(and (<= a b) (<= b c)) b]\n        [(and (<= a c) (<= c b)) c]\n        [(and (<= b a) (<= a c)) a]\n        [(and (<= b c) (<= c a)) c]\n        [(and (<= c a) (<= a b)) a]\n        [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpan54m_3u.rkt:17:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpan54m_3u.rkt:18:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpan54m_3u.rkt:19:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (<= a b) (<= b c)) b]\n    [(and (<= a c) (<= c b)) c]\n    [(and (<= b a) (<= a c)) a]\n    [(and (<= b c) (<= c a)) c]\n    [(and (<= c a) (<= a b)) a]\n    [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(and (<= a b) (<= b c)) b]\n        [(and (<= a c) (<= c b)) c]\n        [(and (<= b a) (<= a c)) a]\n        [(and (<= b c) (<= c a)) c]\n        [(and (<= c a) (<= a b)) a]\n        [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpan54m_3u.rkt:17:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpan54m_3u.rkt:18:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpan54m_3u.rkt:19:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(and (< a b) (< b c)) b]\n        [(and (< a c) (< c b)) c]\n        [(and (< b a) (< a c)) a]\n        [(and (< b c) (< c a)) c]\n        [(and (< c a) (< a b)) a]\n        [(and (< c b) (< b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkoiz9nhk.rkt:17:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkoiz9nhk.rkt:18:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkoiz9nhk.rkt:19:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(and (< a b) (< b c)) b]\n        [(and (< a c) (< c b)) c]\n        [(and (< b a) (< a c)) a]\n        [(and (< b c) (< c a)) c]\n        [(and (< c a) (< a b)) a]\n        [(and (< c b) (< b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkoiz9nhk.rkt:17:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkoiz9nhk.rkt:18:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkoiz9nhk.rkt:19:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (<= a b) (<= b c)) b]\n    [(and (<= b a) (<= a c)) a]\n    [(and (<= a c) (<= c b)) c]\n    [(and (<= b c) (<= c a)) c]\n    [(and (<= c a) (<= a b)) a]\n    [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf_iw5xu.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf_iw5xu.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf_iw5xu.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (<= a b) (<= b c)) b]\n    [(and (<= a c) (<= c b)) c]\n    [(and (<= b a) (<= a c)) a]\n    [(and (<= b c) (<= c a)) c]\n    [(and (<= c a) (<= a b)) a]\n    [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (< a b) (< b c)) b]\n    [(and (< b a) (< a c)) a]\n    [(and (< b c) (< c a)) c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf7tewsza.rkt:15:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf7tewsza.rkt:16:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf7tewsza.rkt:17:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (< a b) (< b c)) b]\n    [(and (< b a) (< a c)) a]\n    [(and (< a c) (< c b)) c]\n    [(and (< b c) (< c a)) c]\n    [(and (< c a) (< a b)) a]\n    [(and (< c b) (< b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsxlzm51v.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsxlzm51v.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsxlzm51v.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(and (&lt;= a b) (&lt;= b c)) b]\n        [(and (&lt;= a c) (&lt;= c b)) c]\n        [(and (&lt;= b a) (&lt;= a c)) a]\n        [(and (&lt;= b c) (&lt;= c a)) c]\n        [(and (&lt;= c a) (&lt;= a b)) a]\n        [(and (&lt;= c b) (&lt;= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509797,
      "stdout": "",
      "stderr": "/tmp/tmpfmpadu00.rkt:10:14: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 12\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (< a b) (< b c)) b]\n    [(and (< a c) (< c b)) c]\n    [(and (< b a) (< a c)) a]\n    [(and (< b c) (< c a)) c]\n    [(and (< c a) (< a b)) a]\n    [(and (< c b) (< b a)) b]\n    [else a]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123976,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmhsmuj9c.rkt:19:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmhsmuj9c.rkt:20:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmhsmuj9c.rkt:21:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(and (&lt;= a b) (&lt;= b c)) b]\n        [(and (&lt;= a c) (&lt;= c b)) c]\n        [(and (&lt;= b a) (&lt;= a c)) a]\n        [(and (&lt;= b c) (&lt;= c a)) c]\n        [(and (&lt;= c a) (&lt;= a b)) a]\n        [(and (&lt;= c b) (&lt;= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509797,
      "stdout": "",
      "stderr": "/tmp/tmpfmpadu00.rkt:10:14: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 12\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (< a b) (< b c)) b]\n    [(and (< a c) (< c b)) c]\n    [(and (< b a) (< a c)) a]\n    [(and (< b c) (< c a)) c]\n    [(and (< c a) (< a b)) a]\n    [(and (< c b) (< b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (>= a b) (>= a c)) a]\n    [(and (>= b a) (>= b c)) b]\n    [(and (>= c a) (>= c b)) c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123977,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1crt4pf8.rkt:15:4\nactual:     65\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1crt4pf8.rkt:16:4\nactual:     30\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1crt4pf8.rkt:17:4\nactual:     75\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (<= a b) (<= b c)) b]\n    [(and (<= a c) (<= c b)) c]\n    [(and (<= b a) (<= a c)) a]\n    [(and (<= b c) (<= c a)) c]\n    [(and (<= c a) (<= a b)) a]\n    [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(and (<= a b) (<= b c)) b]\n        [(and (<= b a) (<= a c)) a]\n        [(and (<= a c) (<= c b)) c]\n        [(and (<= b c) (<= c a)) c]\n        [(and (<= c a) (<= a b)) a]\n        [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123976,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphneqqoxy.rkt:17:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphneqqoxy.rkt:18:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphneqqoxy.rkt:19:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (<= a b) (<= b c)) b]\n    [(and (<= a c) (<= c b)) c]\n    [(and (<= b a) (<= a c)) a]\n    [(and (<= b c) (<= c a)) c]\n    [(and (<= c a) (<= a b)) a]\n    [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (<= a b) (<= b c)) b]\n    [(and (<= a c) (<= c b)) c]\n    [(and (<= b a) (<= a c)) a]\n    [(and (<= b c) (<= c a)) c]\n    [(and (<= c a) (<= a b)) a]\n    [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(and (<= a b) (<= b c)) b]\n        [(and (<= a c) (<= c b)) c]\n        [(and (<= b a) (<= a c)) a]\n        [(and (<= b c) (<= c a)) c]\n        [(and (<= c a) (<= a b)) a]\n        [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpan54m_3u.rkt:17:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpan54m_3u.rkt:18:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpan54m_3u.rkt:19:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(and (< a b) (< b c)) b]\n        [(and (< a c) (< c b)) c]\n        [(and (< b a) (< a c)) a]\n        [(and (< b c) (< c a)) c]\n        [(and (< c a) (< a b)) a]\n        [(and (< c b) (< b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkoiz9nhk.rkt:17:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkoiz9nhk.rkt:18:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkoiz9nhk.rkt:19:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (<= a b) (<= b c)) b]\n    [(and (<= a c) (<= c b)) c]\n    [(and (<= b a) (<= a c)) a]\n    [(and (<= b c) (<= c a)) c]\n    [(and (<= c a) (<= a b)) a]\n    [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (< a b) (< b c)) b]\n    [(and (< a c) (< c b)) c]\n    [(and (< b a) (< a c)) a]\n    [(and (< b c) (< c a)) c]\n    [(and (< c a) (< a b)) a]\n    [(and (< c b) (< b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (< a b) (< b c)) b]\n    [(and (< b a) (< a c)) a]\n    [(and (< c a) (< a b)) a]\n    [(and (< a c) (< c b)) c]\n    [(and (< b c) (< c a)) c]\n    [(and (< c b) (< b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcmp68bf6.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcmp68bf6.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcmp68bf6.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(and (<= a b) (<= b c)) b]\n        [(and (<= b a) (<= a c)) a]\n        [(and (<= a c) (<= c b)) c]\n        [(and (<= b c) (<= c a)) c]\n        [(and (<= c a) (<= a b)) a]\n        [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123976,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphneqqoxy.rkt:17:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphneqqoxy.rkt:18:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphneqqoxy.rkt:19:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (<= a b) (<= b c)) b]\n    [(and (<= a c) (<= c b)) c]\n    [(and (<= b a) (<= a c)) a]\n    [(and (<= b c) (<= c a)) c]\n    [(and (<= c a) (<= a b)) a]\n    [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (&lt;= a b) (&lt;= b c)) b]\n    [(and (&lt;= b a) (&lt;= a c)) a]\n    [(and (&lt;= a c) (&lt;= c b)) c]\n    [(and (&lt;= b c) (&lt;= c a)) c]\n    [(and (&lt;= c a) (&lt;= a b)) a]\n    [(and (&lt;= c b) (&lt;= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123978,
      "stdout": "",
      "stderr": "/tmp/tmpkgxktsah.rkt:11:10: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 13\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(and (<= a b) (<= b c)) b]\n        [(and (<= a c) (<= c b)) c]\n        [(and (<= b a) (<= a c)) a]\n        [(and (<= b c) (<= c a)) c]\n        [(and (<= c a) (<= a b)) a]\n        [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpan54m_3u.rkt:17:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpan54m_3u.rkt:18:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpan54m_3u.rkt:19:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (< a b) (< b c)) b]\n    [(and (< a c) (< c b)) c]\n    [(and (< b a) (< a c)) a]\n    [(and (< b c) (< c a)) c]\n    [(and (< c a) (< a b)) a]\n    [(and (< c b) (< b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(and (<= a b) (<= b c)) b]\n        [(and (<= a c) (<= c b)) c]\n        [(and (<= b a) (<= a c)) a]\n        [(and (<= b c) (<= c a)) c]\n        [(and (<= c a) (<= a b)) a]\n        [(and (<= c b) (<= b a)) b]\n        [else (error \"No median found\")]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5u6uiv0x.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5u6uiv0x.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5u6uiv0x.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(= a b) a]\n        [(= b c) b]\n        [(= a c) c]\n        [(and (< a b) (< b c)) b]\n        [(and (< a c) (< c b)) c]\n        [(and (< b a) (< a c)) a]\n        [(and (< b c) (< c a)) c]\n        [(and (< c a) (< a b)) a]\n        [(and (< c b) (< b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6lu3xncx.rkt:20:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6lu3xncx.rkt:21:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6lu3xncx.rkt:22:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(and (< a b) (< b c)) b]\n        [(and (< a c) (< c b)) c]\n        [(and (< b a) (< a c)) a]\n        [(and (< b c) (< c a)) c]\n        [(and (< c a) (< a b)) a]\n        [(and (< c b) (< b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkoiz9nhk.rkt:17:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkoiz9nhk.rkt:18:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkoiz9nhk.rkt:19:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(and (<= a b) (<= b c)) b]\n        [(and (<= a c) (<= c b)) c]\n        [else a]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr3_s193i.rkt:14:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr3_s193i.rkt:15:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr3_s193i.rkt:16:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (<= a b) (<= b c)) b]\n    [(and (<= a c) (<= c b)) c]\n    [(and (<= b a) (<= a c)) a]\n    [(and (<= b c) (<= c a)) c]\n    [(and (<= c a) (<= a b)) a]\n    [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (< a b) (< b c)) b]\n    [(and (< a c) (< c b)) c]\n    [(and (< b a) (< a c)) a]\n    [(and (< b c) (< c a)) c]\n    [(and (< c a) (< a b)) a]\n    [(and (< c b) (< b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (<= a b) (<= b c)) b]\n    [(and (<= a c) (<= c b)) c]\n    [(and (<= b a) (<= a c)) a]\n    [(and (<= b c) (<= c a)) c]\n    [(and (<= c a) (<= a b)) a]\n    [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (< a b) (< b c)) b]\n    [(and (< a c) (< c b)) c]\n    [(and (< b a) (< a c)) a]\n    [(and (< b c) (< c a)) c]\n    [(and (< c a) (< a b)) a]\n    [(and (< c b) (< b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond ((and (<= a b) (<= b c)) b)\n        ((and (<= b a) (<= a c)) a)\n        ((and (<= b c) (<= c a)) c)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmply8x938d.rkt:14:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmply8x938d.rkt:15:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmply8x938d.rkt:16:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(and (< a b) (< b c)) b]\n        [(and (< b a) (< a c)) a]\n        [(and (< c a) (< a b)) a]\n        [(and (< a c) (< c b)) c]\n        [(and (< b c) (< c a)) c]\n        [(and (< c b) (< b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123977,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprdxdggnu.rkt:17:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprdxdggnu.rkt:18:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprdxdggnu.rkt:19:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (<= a b) (<= b c)) b]\n    [(and (<= a c) (<= c b)) c]\n    [(and (<= b a) (<= a c)) a]\n    [(and (<= b c) (<= c a)) c]\n    [(and (<= c a) (<= a b)) a]\n    [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (< a b) (< b c)) b]\n    [(and (< a c) (< c b)) c]\n    [(and (< b a) (< a c)) a]\n    [(and (< b c) (< c a)) c]\n    [(and (< c a) (< a b)) a]\n    [(and (< c b) (< b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond ((and (>= a b) (>= a c)) a)\n        ((and (>= b a) (>= b c)) b)\n        ((and (>= c a) (>= c b)) c)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123977,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpio4dlos_.rkt:14:4\nactual:     65\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpio4dlos_.rkt:15:4\nactual:     30\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpio4dlos_.rkt:16:4\nactual:     75\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (< a b) (< b c)) b]\n    [(and (< b a) (< a c)) a]\n    [(and (< c a) (< a b)) a]\n    [(and (< a c) (< c b)) c]\n    [(and (< b c) (< c a)) c]\n    [(and (< c b) (< b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcmp68bf6.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcmp68bf6.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcmp68bf6.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (<= a b) (<= b c)) b]\n    [(and (<= a c) (<= c b)) c]\n    [(and (<= b a) (<= a c)) a]\n    [(and (<= b c) (<= c a)) c]\n    [(and (<= c a) (<= a b)) a]\n    [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (< a b) (< b c)) b]\n    [(and (< b a) (< a c)) a]\n    [(and (< b c) (< c a)) c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf7tewsza.rkt:15:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf7tewsza.rkt:16:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf7tewsza.rkt:17:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (<= a b) (<= b c)) b]\n    [(and (<= a c) (<= c b)) c]\n    [(and (<= b a) (<= a c)) a]\n    [(and (<= b c) (<= c a)) c]\n    [(and (<= c a) (<= a b)) a]\n    [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (< a b) (< b c)) b]\n    [(and (< a c) (< c b)) c]\n    [(and (< b a) (< a c)) a]\n    [(and (< b c) (< c a)) c]\n    [(and (< c a) (< a b)) a]\n    [(and (< c b) (< b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(and (<= a b) (<= b c)) b]\n        [(and (<= a c) (<= c b)) c]\n        [(and (<= b a) (<= a c)) a]\n        [(and (<= b c) (<= c a)) c]\n        [(and (<= c a) (<= a b)) a]\n        [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpan54m_3u.rkt:17:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpan54m_3u.rkt:18:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpan54m_3u.rkt:19:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (<= a b) (<= b c)) b]\n    [(and (<= b a) (<= a c)) a]\n    [(and (<= b c) (<= c a)) c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnx72el7z.rkt:15:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnx72el7z.rkt:16:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnx72el7z.rkt:17:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (< a b) (< b c)) b]\n    [(and (< a c) (< c b)) c]\n    [(and (< b a) (< a c)) a]\n    [(and (< b c) (< c a)) c]\n    [(and (< c a) (< a b)) a]\n    [(and (< c b) (< b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(and (&lt;= a b) (&lt;= b c)) b]\n        [(and (&lt;= a c) (&lt;= c b)) c]\n        [(and (&lt;= b a) (&lt;= a c)) a]\n        [(and (&lt;= b c) (&lt;= c a)) c]\n        [(and (&lt;= c a) (&lt;= a b)) a]\n        [(and (&lt;= c b) (&lt;= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509797,
      "stdout": "",
      "stderr": "/tmp/tmpfmpadu00.rkt:10:14: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 12\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(and (<= a b) (<= b c)) b]\n        [(and (<= a c) (<= c b)) c]\n        [else a]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr3_s193i.rkt:14:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr3_s193i.rkt:15:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr3_s193i.rkt:16:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(and (< a b) (< b c)) b]\n        [(and (< a c) (< c b)) c]\n        [(and (< b a) (< a c)) a]\n        [(and (< b c) (< c a)) c]\n        [(and (< c a) (< a b)) a]\n        [(and (< c b) (< b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkoiz9nhk.rkt:17:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkoiz9nhk.rkt:18:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkoiz9nhk.rkt:19:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(and (<= a b) (<= b c)) b]\n        [(and (<= a c) (<= c b)) c]\n        [(and (<= b a) (<= a c)) a]\n        [(and (<= b c) (<= c a)) c]\n        [(and (<= c a) (<= a b)) a]\n        [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpan54m_3u.rkt:17:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpan54m_3u.rkt:18:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpan54m_3u.rkt:19:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (< a b) (< b c)) b]\n    [(and (< a c) (< c b)) c]\n    [(and (< b a) (< a c)) a]\n    [(and (< b c) (< c a)) c]\n    [(and (< c a) (< a b)) a]\n    [(and (< c b) (< b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (< a b) (< b c)) b]\n    [(and (< b a) (< a c)) a]\n    [(and (< b c) (< c a)) c]\n    [(and (< c a) (< a b)) a]\n    [(and (< c b) (< b a)) b]\n    [(and (< a c) (< c b)) c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplskospvh.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplskospvh.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplskospvh.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (<= a b) (<= b c)) b]\n    [(and (<= a c) (<= c b)) c]\n    [(and (<= b a) (<= a c)) a]\n    [(and (<= b c) (<= c a)) c]\n    [(and (<= c a) (<= a b)) a]\n    [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(< a b)\n         (cond [(< b c) b]\n               [(< a c) c]\n               [else a])]\n        [(< b c)\n         (cond [(< a c) a]\n               [else c])]\n        [else\n         (cond [(< a b) a]\n               [else b])]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfo8ugx8p.rkt:21:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfo8ugx8p.rkt:22:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfo8ugx8p.rkt:23:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(< a b)\n         (cond [(< b c) b]\n               [(< a c) c]\n               [else a])]\n        [(< b c)\n         (cond [(< a c) a]\n               [else c])]\n        [else\n         (cond [(< a b) a]\n               [else b])]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfo8ugx8p.rkt:21:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfo8ugx8p.rkt:22:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfo8ugx8p.rkt:23:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (&lt;= a b) (&lt;= b c)) b]\n    [(and (&lt;= a c) (&lt;= c b)) c]\n    [(and (&lt;= b a) (&lt;= a c)) a]\n    [(and (&lt;= b c) (&lt;= c a)) c]\n    [(and (&lt;= c a) (&lt;= a b)) a]\n    [(and (&lt;= c b) (&lt;= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "/tmp/tmpn16rw4x8.rkt:11:10: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 13\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (<= a b) (<= b c)) b]\n    [(and (<= a c) (<= c b)) c]\n    [(and (<= b a) (<= a c)) a]\n    [(and (<= b c) (<= c a)) c]\n    [(and (<= c a) (<= a b)) a]\n    [(and (<= c b) (<= b a)) b]\n    [else (error \"Invalid input\")]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123977,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphjfgxgne.rkt:19:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphjfgxgne.rkt:20:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphjfgxgne.rkt:21:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (< a b) (< b c)) b]\n    [(and (< a c) (< c b)) c]\n    [(and (< b a) (< a c)) a]\n    [(and (< b c) (< c a)) c]\n    [(and (< c a) (< a b)) a]\n    [(and (< c b) (< b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (< a b) (< b c)) b]\n    [(and (< a c) (< c b)) c]\n    [(and (< b a) (< a c)) a]\n    [(and (< b c) (< c a)) c]\n    [(and (< c a) (< a b)) a]\n    [(and (< c b) (< b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (<= a b) (<= b c)) b]\n    [(and (<= a c) (<= c b)) c]\n    [(and (<= b a) (<= a c)) a]\n    [(and (<= b c) (<= c a)) c]\n    [(and (<= c a) (<= a b)) a]\n    [(and (<= c b) (<= b a)) b]\n    [else (error \"median_numbers: invalid input\")]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpei63jzwf.rkt:19:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpei63jzwf.rkt:20:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpei63jzwf.rkt:21:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (< a b) (< b c)) b]\n    [(and (< a c) (< c b)) c]\n    [(and (< b a) (< a c)) a]\n    [(and (< b c) (< c a)) c]\n    [(and (< c a) (< a b)) a]\n    [(and (< c b) (< b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(and (< a b) (< b c)) b]\n        [(and (< b a) (< a c)) a]\n        [(and (< c a) (< a b)) a]\n        [(and (< a c) (< c b)) c]\n        [(and (< b c) (< c a)) c]\n        [(and (< c b) (< b a)) b]\n        [else a]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbje5iu9a.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbje5iu9a.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbje5iu9a.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (<= a b) (<= b c)) b]\n    [(and (<= a c) (<= c b)) c]\n    [(and (<= b a) (<= a c)) a]\n    [(and (<= b c) (<= c a)) c]\n    [(and (<= c a) (<= a b)) a]\n    [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (< a b) (< b c)) b]\n    [(and (< a c) (< c b)) c]\n    [(and (< b a) (< a c)) a]\n    [(and (< b c) (< c a)) c]\n    [(and (< c a) (< a b)) a]\n    [(and (< c b) (< b a)) b]\n    [else a]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123976,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmhsmuj9c.rkt:19:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmhsmuj9c.rkt:20:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmhsmuj9c.rkt:21:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (< a b) (< b c)) b]\n    [(and (< a c) (< c b)) c]\n    [(and (< b a) (< a c)) a]\n    [(and (< b c) (< c a)) c]\n    [(and (< c a) (< a b)) a]\n    [(and (< c b) (< b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (< a b) (< b c)) b]\n    [(and (< a c) (< c b)) c]\n    [(and (< b a) (< a c)) a]\n    [(and (< b c) (< c a)) c]\n    [(and (< c a) (< a b)) a]\n    [(and (< c b) (< b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (< a b) (< b c)) b]\n    [(and (< a c) (< c b)) c]\n    [(and (< b a) (< a c)) a]\n    [(and (< b c) (< c a)) c]\n    [(and (< c a) (< a b)) a]\n    [(and (< c b) (< b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (<= a b) (<= b c)) b]\n    [(and (<= a c) (<= c b)) c]\n    [(and (<= b a) (<= a c)) a]\n    [(and (<= b c) (<= c a)) c]\n    [(and (<= c a) (<= a b)) a]\n    [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (<= a b) (<= b c)) b]\n    [(and (<= a c) (<= c b)) c]\n    [(and (<= b a) (<= a c)) a]\n    [(and (<= b c) (<= c a)) c]\n    [(and (<= c a) (<= a b)) a]\n    [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (< a b) (< b c)) b]\n    [(and (< a c) (< c b)) c]\n    [(and (< b a) (< a c)) a]\n    [(and (< b c) (< c a)) c]\n    [(and (< c a) (< a b)) a]\n    [(and (< c b) (< b a)) b]\n    [else a]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123976,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmhsmuj9c.rkt:19:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmhsmuj9c.rkt:20:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmhsmuj9c.rkt:21:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (< a b) (< b c)) b]\n    [(and (< a c) (< c b)) c]\n    [(and (< b a) (< a c)) a]\n    [(and (< b c) (< c a)) c]\n    [(and (< c a) (< a b)) a]\n    [(and (< c b) (< b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(and (< a b) (< b c)) b]\n        [(and (< a c) (< c b)) c]\n        [(and (< b a) (< a c)) a]\n        [(and (< b c) (< c a)) c]\n        [(and (< c a) (< a b)) a]\n        [(and (< c b) (< b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkoiz9nhk.rkt:17:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkoiz9nhk.rkt:18:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkoiz9nhk.rkt:19:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (<= a b) (<= b c)) b]\n    [(and (<= a c) (<= c b)) c]\n    [(and (<= b a) (<= a c)) a]\n    [(and (<= b c) (<= c a)) c]\n    [(and (<= c a) (<= a b)) a]\n    [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (< a b) (< b c)) b]\n    [(and (< a c) (< c b)) c]\n    [(and (< b a) (< a c)) a]\n    [(and (< b c) (< c a)) c]\n    [(and (< c a) (< a b)) a]\n    [(and (< c b) (< b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(and (<= a b) (<= b c)) b]\n        [(and (<= b a) (<= a c)) a]\n        [(and (<= b c) (<= c a)) c]\n        [(and (<= c a) (<= a b)) a]\n        [(and (<= c b) (<= b a)) b]\n        [(and (<= a c) (<= c b)) c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw3nvciva.rkt:17:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw3nvciva.rkt:18:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw3nvciva.rkt:19:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (< a b) (< b c)) b]\n    [(and (< a c) (< c b)) c]\n    [(and (< b a) (< a c)) a]\n    [(and (< b c) (< c a)) c]\n    [(and (< c a) (< a b)) a]\n    [(and (< c b) (< b a)) b]\n    [else a]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123976,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmhsmuj9c.rkt:19:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmhsmuj9c.rkt:20:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmhsmuj9c.rkt:21:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (< a b) (< b c)) b]\n    [(and (< a c) (< c b)) c]\n    [(and (< b a) (< a c)) a]\n    [(and (< b c) (< c a)) c]\n    [(and (< c a) (< a b)) a]\n    [(and (< c b) (< b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (<= a b) (<= b c)) b]\n    [(and (<= b a) (<= a c)) a]\n    [(and (<= b c) (<= c a)) c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnx72el7z.rkt:15:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnx72el7z.rkt:16:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnx72el7z.rkt:17:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (<= a b) (<= b c)) b]\n    [(and (<= a c) (<= c b)) c]\n    [(and (<= b a) (<= a c)) a]\n    [(and (<= b c) (<= c a)) c]\n    [(and (<= c a) (<= a b)) a]\n    [(and (<= c b) (<= b a)) b]\n    [else (error \"Something went wrong\")]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg3wxmgik.rkt:19:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg3wxmgik.rkt:20:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg3wxmgik.rkt:21:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (< a b) (< b c)) b]\n    [(and (< a c) (< c b)) c]\n    [(and (< b a) (< a c)) a]\n    [(and (< b c) (< c a)) c]\n    [(and (< c a) (< a b)) a]\n    [(and (< c b) (< b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (< a b) (< b c)) b]\n    [(and (< a c) (< c b)) c]\n    [(and (< b a) (< a c)) a]\n    [(and (< b c) (< c a)) c]\n    [(and (< c a) (< a b)) a]\n    [(and (< c b) (< b a)) b]\n    [else a]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123976,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmhsmuj9c.rkt:19:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmhsmuj9c.rkt:20:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmhsmuj9c.rkt:21:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (< a b) (< b c)) b]\n    [(and (< b a) (< a c)) a]\n    [(and (< c a) (< a b)) a]\n    [(and (< a c) (< c b)) c]\n    [(and (< b c) (< c a)) c]\n    [(and (< c b) (< b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcmp68bf6.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcmp68bf6.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcmp68bf6.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond ((and (< a b) (< b c)) b)\n        ((and (< a c) (< c b)) c)\n        ((and (< b a) (< a c)) a)\n        ((and (< b c) (< c a)) c)\n        ((and (< c a) (< a b)) a)\n        ((and (< c b) (< b a)) b)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsl9oy1un.rkt:17:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsl9oy1un.rkt:18:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsl9oy1un.rkt:19:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(and (&lt;= a b) (&lt;= b c)) b]\n        [(and (&lt;= a c) (&lt;= c b)) c]\n        [(and (&lt;= b a) (&lt;= a c)) a]\n        [(and (&lt;= b c) (&lt;= c a)) c]\n        [(and (&lt;= c a) (&lt;= a b)) a]\n        [(and (&lt;= c b) (&lt;= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509797,
      "stdout": "",
      "stderr": "/tmp/tmpfmpadu00.rkt:10:14: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 12\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (< a b) (< a c)) (if (< b c) b c)]\n    [(and (< b a) (< b c)) (if (< a c) a c)]\n    [(and (< c a) (< c b)) (if (< a b) a b)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqfhtsbi9.rkt:15:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqfhtsbi9.rkt:16:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqfhtsbi9.rkt:17:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (<= a b) (<= b c)) b]\n    [(and (<= a c) (<= c b)) c]\n    [(and (<= b a) (<= a c)) a]\n    [(and (<= b c) (<= c a)) c]\n    [(and (<= c a) (<= a b)) a]\n    [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(and (<= a b) (<= b c)) b]\n        [(and (<= b a) (<= a c)) a]\n        [(and (<= a c) (<= c b)) c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123976,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpichmgo65.rkt:14:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpichmgo65.rkt:15:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpichmgo65.rkt:16:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(and (< a b) (< b c)) b]\n        [(and (< a c) (< c b)) c]\n        [(and (< b a) (< a c)) a]\n        [(and (< b c) (< c a)) c]\n        [(and (< c a) (< a b)) a]\n        [(and (< c b) (< b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkoiz9nhk.rkt:17:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkoiz9nhk.rkt:18:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkoiz9nhk.rkt:19:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(< a b) (cond [(< b c) b]\n                        [(< c a) a]\n                        [else c])]\n        [(< b c) (cond [(< c a) c]\n                        [(< a b) b]\n                        [else a])]\n        [else (cond [(< a b) a]\n                    [(< b c) b]\n                    [else c])]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq95b11yz.rkt:20:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq95b11yz.rkt:21:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq95b11yz.rkt:22:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (< a b) (< b c)) b]\n    [(and (< b a) (< a c)) a]\n    [(and (< c a) (< a b)) a]\n    [(and (< a c) (< c b)) c]\n    [(and (< b c) (< c a)) c]\n    [(and (< c b) (< b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcmp68bf6.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcmp68bf6.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcmp68bf6.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(and (<= a b) (<= a c)) a]\n        [(and (<= b a) (<= b c)) b]\n        [(and (<= c a) (<= c b)) c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwccfxto2.rkt:14:4\nactual:     25\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwccfxto2.rkt:15:4\nactual:     10\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwccfxto2.rkt:16:4\nactual:     15\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (<= a b) (<= b c)) b]\n    [(and (<= a c) (<= c b)) c]\n    [(and (<= b a) (<= a c)) a]\n    [(and (<= b c) (<= c a)) c]\n    [(and (<= c a) (<= a b)) a]\n    [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (<= a b) (<= b c)) b]\n    [(and (<= a c) (<= c b)) c]\n    [(and (<= b a) (<= a c)) a]\n    [(and (<= b c) (<= c a)) c]\n    [(and (<= c a) (<= a b)) a]\n    [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(and (<= a b) (<= b c)) b]\n        [(and (<= a c) (<= c b)) c]\n        [(and (<= b a) (<= a c)) a]\n        [(and (<= b c) (<= c a)) c]\n        [(and (<= c a) (<= a b)) a]\n        [(and (<= c b) (<= b a)) b]\n        [else (error \"Unable to find median\")]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp4ahebno.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp4ahebno.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp4ahebno.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (<= a b) (<= b c)) b]\n    [(and (<= a c) (<= c b)) c]\n    [(and (<= b a) (<= a c)) a]\n    [(and (<= b c) (<= c a)) c]\n    [(and (<= c a) (<= a b)) a]\n    [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (define (median a b c)\n    (cond\n      [(and (<= a b) (<= b c)) b]\n      [(and (<= a c) (<= c b)) c]\n      [(and (<= b a) (<= a c)) a]\n      [(and (<= b c) (<= c a)) c]\n      [(and (<= c a) (<= a b)) a]\n      [(and (<= c b) (<= b a)) b]))\n  (median a b c))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpttabkk6m.rkt:20:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpttabkk6m.rkt:21:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpttabkk6m.rkt:22:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (<= a b) (<= b c)) b]\n    [(and (<= a c) (<= c b)) c]\n    [(and (<= b a) (<= a c)) a]\n    [(and (<= b c) (<= c a)) c]\n    [(and (<= c a) (<= a b)) a]\n    [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (<= a b) (<= b c)) b]\n    [(and (<= a c) (<= c b)) c]\n    [(and (<= b a) (<= a c)) a]\n    [(and (<= b c) (<= c a)) c]\n    [(and (<= c a) (<= a b)) a]\n    [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (< a b) (< b c)) b]\n    [(and (< a c) (< c b)) c]\n    [(and (< b a) (< a c)) a]\n    [(and (< b c) (< c a)) c]\n    [(and (< c a) (< a b)) a]\n    [(and (< c b) (< b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (<= a b) (<= b c)) b]\n    [(and (<= b a) (<= a c)) a]\n    [(and (<= a c) (<= c b)) c]\n    [(and (<= c a) (<= a b)) a]\n    [(and (<= c b) (<= b a)) b]\n    [(and (<= b c) (<= c a)) c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9npvs64x.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9npvs64x.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9npvs64x.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (<= a b) (<= b c)) b]\n    [(and (<= b a) (<= a c)) a]\n    [(and (<= a c) (<= c b)) c]\n    [(and (<= c a) (<= a b)) a]\n    [(and (<= c b) (<= b a)) b]\n    [(and (<= b c) (<= c a)) c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9npvs64x.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9npvs64x.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9npvs64x.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(and (<= a b) (<= b c)) b]\n        [(and (<= b a) (<= a c)) a]\n        [(and (<= c a) (<= a b)) a]\n        [(and (<= a c) (<= c b)) c]\n        [(and (<= b c) (<= c a)) c]\n        [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcztik56r.rkt:17:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcztik56r.rkt:18:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcztik56r.rkt:19:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (<= a b) (<= b c)) b]\n    [(and (<= a c) (<= c b)) c]\n    [(and (<= b a) (<= a c)) a]\n    [(and (<= b c) (<= c a)) c]\n    [(and (<= c a) (<= a b)) a]\n    [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(and (&lt;= a b) (&lt;= b c)) b]\n        [(and (&lt;= a c) (&lt;= c b)) c]\n        [(and (&lt;= b a) (&lt;= a c)) a]\n        [(and (&lt;= b c) (&lt;= c a)) c]\n        [(and (&lt;= c a) (&lt;= a b)) a]\n        [(and (&lt;= c b) (&lt;= b a)) b]\n        [else (error \"No median found\")]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123975,
      "stdout": "",
      "stderr": "/tmp/tmph_h3opu0.rkt:10:8: read-syntax: expected a `]` to close `[`\n  possible cause: indentation suggests a missing `]` before line 13\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (< a b) (< b c)) b]\n    [(and (< a c) (< c b)) c]\n    [(and (< b a) (< a c)) a]\n    [(and (< b c) (< c a)) c]\n    [(and (< c a) (< a b)) a]\n    [(and (< c b) (< b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (<= a b) (<= b c)) b]\n    [(and (<= b a) (<= a c)) a]\n    [(and (<= a c) (<= c b)) c]\n    [(and (<= c a) (<= a b)) a]\n    [(and (<= c b) (<= b a)) b]\n    [(and (<= b c) (<= c a)) c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9npvs64x.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9npvs64x.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9npvs64x.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (< a b) (< b c)) b]\n    [(and (< a c) (< c b)) c]\n    [(and (< b a) (< a c)) a]\n    [(and (< b c) (< c a)) c]\n    [(and (< c a) (< a b)) a]\n    [(and (< c b) (< b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (<= a b) (<= b c)) b]\n    [(and (<= a c) (<= c b)) c]\n    [(and (<= b a) (<= a c)) a]\n    [(and (<= b c) (<= c a)) c]\n    [(and (<= c a) (<= a b)) a]\n    [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (< a b) (< b c)) b]\n    [(and (< a c) (< c b)) c]\n    [(and (< b a) (< a c)) a]\n    [(and (< b c) (< c a)) c]\n    [(and (< c a) (< a b)) a]\n    [(and (< c b) (< b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (< a b) (< b c)) b]\n    [(and (< a c) (< c b)) c]\n    [(and (< b a) (< a c)) a]\n    [(and (< b c) (< c a)) c]\n    [(and (< c a) (< a b)) a]\n    [(and (< c b) (< b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (<= a b) (<= b c)) b]\n    [(and (<= b a) (<= a c)) a]\n    [(and (<= b c) (<= c a)) c]\n    [(and (<= c b) (<= b a)) b]\n    [(and (<= c a) (<= a b)) a]\n    [(and (<= a c) (<= c b)) c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxdf4zmqe.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxdf4zmqe.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxdf4zmqe.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(and (< a b) (< b c)) b]\n        [(and (< a c) (< c b)) c]\n        [(and (< b a) (< a c)) a]\n        [(and (< b c) (< c a)) c]\n        [(and (< c a) (< a b)) a]\n        [(and (< c b) (< b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkoiz9nhk.rkt:17:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkoiz9nhk.rkt:18:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkoiz9nhk.rkt:19:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(and (&lt;= a b) (&lt;= b c)) b]\n        [(and (&lt;= a c) (&lt;= c b)) c]\n        [(and (&lt;= b a) (&lt;= a c)) a]\n        [(and (&lt;= b c) (&lt;= c a)) c]\n        [(and (&lt;= c a) (&lt;= a b)) a]\n        [(and (&lt;= c b) (&lt;= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509797,
      "stdout": "",
      "stderr": "/tmp/tmpfmpadu00.rkt:10:14: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 12\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(and (< a b) (< b c)) b]\n        [(and (< b a) (< a c)) a]\n        [(and (< c a) (< a b)) a]\n        [(and (< a c) (< c b)) c]\n        [(and (< b c) (< c a)) c]\n        [(and (< c b) (< b a)) b]\n        [else a]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbje5iu9a.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbje5iu9a.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbje5iu9a.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond ((and (<= a b) (<= b c)) b)\n        ((and (<= b a) (<= a c)) a)\n        ((and (<= a c) (<= c b)) c)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvzao3mpa.rkt:14:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvzao3mpa.rkt:15:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvzao3mpa.rkt:16:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (<= a b) (<= b c)) b]\n    [(and (<= b a) (<= a c)) a]\n    [(and (<= a c) (<= c b)) c]\n    [(and (<= b c) (<= c a)) c]\n    [(and (<= c a) (<= a b)) a]\n    [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf_iw5xu.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf_iw5xu.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf_iw5xu.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (< a b) (< b c)) b]\n    [(and (< a c) (< c b)) c]\n    [(and (< b a) (< a c)) a]\n    [(and (< b c) (< c a)) c]\n    [(and (< c a) (< a b)) a]\n    [(and (< c b) (< b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(and (<= a b) (<= b c)) b]\n        [(and (<= b a) (<= a c)) a]\n        [(and (<= b c) (<= c a)) c]\n        [(and (<= c a) (<= a b)) a]\n        [(and (<= c b) (<= b a)) b]\n        [(and (<= a c) (<= c b)) c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw3nvciva.rkt:17:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw3nvciva.rkt:18:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw3nvciva.rkt:19:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(and (&lt;= a b) (&lt;= b c)) b]\n        [(and (&lt;= a c) (&lt;= c b)) c]\n        [(and (&lt;= b a) (&lt;= a c)) a]\n        [(and (&lt;= b c) (&lt;= c a)) c]\n        [(and (&lt;= c a) (&lt;= a b)) a]\n        [(and (&lt;= c b) (&lt;= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509797,
      "stdout": "",
      "stderr": "/tmp/tmpfmpadu00.rkt:10:14: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 12\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (<= a b) (<= b c)) b]\n    [(and (<= a c) (<= c b)) c]\n    [(and (<= b a) (<= a c)) a]\n    [(and (<= b c) (<= c a)) c]\n    [(and (<= c a) (<= a b)) a]\n    [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(< a b) (cond [(< b c) b]\n                        [(< c a) a]\n                        [else c])]\n        [(< b c) (cond [(< c a) c]\n                        [(< a b) b]\n                        [else a])]\n        [else (cond [(< a b) a]\n                    [(< b c) b]\n                    [else c])]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq95b11yz.rkt:20:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq95b11yz.rkt:21:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq95b11yz.rkt:22:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (< a b) (< b c)) b]\n    [(and (< b a) (< a c)) a]\n    [(and (< b c) (< c a)) c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf7tewsza.rkt:15:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf7tewsza.rkt:16:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf7tewsza.rkt:17:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (<= a b) (<= b c)) b]\n    [(and (<= b a) (<= a c)) a]\n    [(and (<= b c) (<= c a)) c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnx72el7z.rkt:15:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnx72el7z.rkt:16:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnx72el7z.rkt:17:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(and (<= a b) (<= b c)) b]\n        [(and (<= a c) (<= c b)) c]\n        [(and (<= b a) (<= a c)) a]\n        [(and (<= b c) (<= c a)) c]\n        [(and (<= c a) (<= a b)) a]\n        [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpan54m_3u.rkt:17:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpan54m_3u.rkt:18:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpan54m_3u.rkt:19:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (< a b) (< b c)) b]\n    [(and (< a c) (< c b)) c]\n    [(and (< b a) (< a c)) a]\n    [(and (< b c) (< c a)) c]\n    [(and (< c a) (< a b)) a]\n    [(and (< c b) (< b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwmyu0ia.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(and (<= a b) (<= b c)) b]\n    [(and (<= a c) (<= c b)) c]\n    [(and (<= b a) (<= a c)) a]\n    [(and (<= b c) (<= c a)) c]\n    [(and (<= c a) (<= a b)) a]\n    [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:18:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:19:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6ag2huj.rkt:20:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(and (<= a b) (<= b c)) b]\n        [(and (<= a c) (<= c b)) c]\n        [(and (<= b a) (<= a c)) a]\n        [(and (<= b c) (<= c a)) c]\n        [(and (<= c a) (<= a b)) a]\n        [(and (<= c b) (<= b a)) b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpan54m_3u.rkt:17:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpan54m_3u.rkt:18:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpan54m_3u.rkt:19:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond [(> a b) (median_numbers b a c)]\n        [(> b c) (median_numbers a c b)]\n        [else b]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-equal? (candidate 25 55 65) 55.0)\n    (check-equal? (candidate 20 10 30) 20.0)\n    (check-equal? (candidate 15 45 75) 45.0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123977,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjumo5d5g.rkt:14:4\nactual:     55\nexpected:   55.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjumo5d5g.rkt:15:4\nactual:     20\nexpected:   20.0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjumo5d5g.rkt:16:4\nactual:     45\nexpected:   45.0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    }
  ]
}