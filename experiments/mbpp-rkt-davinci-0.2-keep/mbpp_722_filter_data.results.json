{
  "name": "mbpp_722_filter_data",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_722_filter_data.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (let ([height (car student)]\n                  [weight (cadr student)])\n              (and (> height h) (> weight w))))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9t59kx9m.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9t59kx9m.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9t59kx9m.rkt:18:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (\u03bb (student)\n            (let ([height (car (cdr student))]\n                  [weight (cadr (cdr student))])\n              (and (> height h) (> weight w))))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9n_bzzf1.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9n_bzzf1.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9n_bzzf1.rkt:18:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car student) h)\n                 (> (cadr student) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprih_0tcs.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprih_0tcs.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprih_0tcs.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (\u03bb (student)\n            (let ([height (car (cdr student))]\n                  [weight (car (cdr (cdr student)))])\n              (and (> height h) (> weight w))))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5qz6036n.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5qz6036n.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5qz6036n.rkt:18:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (let ([height (car student)]\n                  [weight (cadr student)])\n              (and (> height h) (> weight w))))\n          (hash-values students)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp610eui7z.rkt:16:4\n\n>: contract violation\n  expected: real?\n  given: 'list\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp610eui7z.rkt:17:4\n\n>: contract violation\n  expected: real?\n  given: 'list\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp610eui7z.rkt:18:4\n\n>: contract violation\n  expected: real?\n  given: 'list\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (for/list ([(name . (height . weight)) students])\n    (if (and (> height h) (> weight w))\n        (cons name (cons height weight)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "/tmp/tmpuo7tqwy8.rkt:5:13: for/list: bad sequence binding clause\n  at: ((name height . weight) students)\n  in: (for/list (((name height . weight) students)) (if (and (> height h) (> weight w)) (cons name (cons height weight))))\n  location...:\n   /tmp/tmpuo7tqwy8.rkt:5:13\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/racket/private/for.rkt:1555:4: try-next\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (\u03bb (student)\n            (and (> (car student) h)\n                 (> (cadr student) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp51z8rz8o.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp51z8rz8o.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp51z8rz8o.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (\u03bb (x)\n            (and (> (car (cdr x)) h)\n                 (> (cadr (cdr x)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6kfkfu7w.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6kfkfu7w.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6kfkfu7w.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (x)\n            (and (> (car (cdr x)) h)\n                 (> (cadr (cdr x)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_e9kfd3y.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_e9kfd3y.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_e9kfd3y.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (\u03bb (x)\n            (and (> (car (cdr x)) h) (> (cadr (cdr x)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9ottllgv.rkt:14:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9ottllgv.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9ottllgv.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (\u03bb (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_qdm0mnc.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_qdm0mnc.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_qdm0mnc.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (\u03bb (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_qdm0mnc.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_qdm0mnc.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_qdm0mnc.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (\u03bb (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_qdm0mnc.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_qdm0mnc.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_qdm0mnc.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (>= (car (cdr student)) h)\n                 (>= (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsyt7ogu8.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsyt7ogu8.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsyt7ogu8.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (\u03bb (student)\n            (and (> (car student) h)\n                 (> (cadr student) w)))\n          (hash-values students)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4273s1mz.rkt:15:4\n\n>: contract violation\n  expected: real?\n  given: 'list\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4273s1mz.rkt:16:4\n\n>: contract violation\n  expected: real?\n  given: 'list\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4273s1mz.rkt:17:4\n\n>: contract violation\n  expected: real?\n  given: 'list\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car student) h)\n                 (> (cadr student) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprih_0tcs.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprih_0tcs.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprih_0tcs.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (x)\n            (and (> (car x) h)\n                 (> (cadr x) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiha2_roe.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiha2_roe.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiha2_roe.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (>= (car (cdr student)) h)\n                 (>= (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsyt7ogu8.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsyt7ogu8.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsyt7ogu8.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (>= (car (cdr student)) h)\n                 (>= (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsyt7ogu8.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsyt7ogu8.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsyt7ogu8.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (\u03bb (student)\n            (and (> (student 'height) h)\n                 (> (student 'weight) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwaxuwsw4.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwaxuwsw4.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwaxuwsw4.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (\u03bb (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_qdm0mnc.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_qdm0mnc.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_qdm0mnc.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (let ([height (car (cdr student))]\n                  [weight (cadr (cdr student))])\n              (and (> height h) (> weight w))))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpccx6x839.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpccx6x839.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpccx6x839.rkt:18:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (\u03bb (student)\n            (let ([height (car (cdr student))]\n                  [weight (car (cdr (cdr student)))])\n              (and (> height h) (> weight w))))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5qz6036n.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5qz6036n.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5qz6036n.rkt:18:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (\u03bb (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_qdm0mnc.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_qdm0mnc.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_qdm0mnc.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (let ((height (car (cdr student)))\n                  (weight (cadr (cdr student))))\n              (and (> height h) (> weight w))))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxbozlddi.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxbozlddi.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxbozlddi.rkt:18:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (\u03bb (student)\n            (and (>= (car (cdr student)) h)\n                 (>= (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk6d1r175.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk6d1r175.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk6d1r175.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (\u03bb (student)\n            (and (> (car (cdr student)) h)\n                 (> (cdr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnv5_jnsd.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnv5_jnsd.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnv5_jnsd.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (let ([height (car (cdr student))]\n                  [weight (cadr (cdr student))])\n              (and (> height h) (> weight w))))\n          (hash-values students)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwund5xba.rkt:16:4\nactual:     '()\nexpected:   '#hash((\"Cierra Vega\" . (list 6.2 70)))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwund5xba.rkt:17:4\nactual:     '((list 6.0 68) (list 6.2 70))\nexpected:\n  '#hash((\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwund5xba.rkt:18:4\nactual:     '((list 5.8 66) (list 6.0 68) (list 6.2 70) (list 5.9 65))\nexpected:\n  '#hash((\"Alden Cantrell\" . (list 5.9 65))\n         (\"Cierra Vega\" . (list 6.2 70))\n         (\"Kierra Gentry\" . (list 6.0 68))\n         (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car student) h)\n                 (> (cadr student) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprih_0tcs.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprih_0tcs.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprih_0tcs.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car student) h)\n                 (> (cadr student) w)))\n          (map snd students)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "/tmp/tmp8a3plvm_.rkt:8:15: snd: unbound identifier\n  in: snd\n  location...:\n   /tmp/tmp8a3plvm_.rkt:8:15\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (>= (car (cdr student)) h)\n                 (>= (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsyt7ogu8.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsyt7ogu8.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsyt7ogu8.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (\u03bb (student)\n            (let ([height (car (cdr student))]\n                  [weight (car (cdr (cdr student)))])\n              (and (> height h) (> weight w))))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5qz6036n.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5qz6036n.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5qz6036n.rkt:18:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (>= (car (cdr student)) h)\n                 (>= (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsyt7ogu8.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsyt7ogu8.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsyt7ogu8.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (let ((height (car student))\n                  (weight (cadr student)))\n              (and (> height h) (> weight w))))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp62y09g39.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp62y09g39.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp62y09g39.rkt:18:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (x)\n            (and (>= (car x) h)\n                 (>= (cadr x) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfpoby1al.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfpoby1al.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfpoby1al.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (>= (car (cdr student)) h)\n                 (>= (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsyt7ogu8.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsyt7ogu8.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsyt7ogu8.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (let ([height (car (cdr student))]\n                  [weight (cadr (cdr student))])\n              (and (> height h) (> weight w))))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpccx6x839.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpccx6x839.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpccx6x839.rkt:18:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (\u03bb (student)\n            (and (> (car (students student)) h)\n                 (> (cadr (students student)) w)))\n          (hash-keys students)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptemml5rp.rkt:15:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptemml5rp.rkt:16:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptemml5rp.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n-------",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (>= (car (cdr student)) h)\n                 (>= (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsyt7ogu8.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsyt7ogu8.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsyt7ogu8.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (\u03bb (x)\n            (and (> (car (cdr x)) h)\n                 (> (cadr (cdr x)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6kfkfu7w.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6kfkfu7w.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6kfkfu7w.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (let ([height (car (cdr student))]\n                  [weight (cadr (cdr student))])\n              (and (> height h) (> weight w))))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpccx6x839.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpccx6x839.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpccx6x839.rkt:18:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (\u03bb (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_qdm0mnc.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_qdm0mnc.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_qdm0mnc.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (cadr student) h)\n                 (> (caddr student) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6me148nn.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6me148nn.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6me148nn.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (x)\n            (and (> (car (cdr x)) h)\n                 (> (cadr (cdr x)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_e9kfd3y.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_e9kfd3y.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_e9kfd3y.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (let ([h (car (cdr student))]\n                  [w (cadr (cdr student))])\n              (and (> h h) (> w w))))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9d3vv7ta.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9d3vv7ta.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9d3vv7ta.rkt:18:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car student) h)\n                 (> (cadr student) w)))\n          (hash-values students)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcvy_iy1i.rkt:15:4\n\n>: contract violation\n  expected: real?\n  given: 'list\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcvy_iy1i.rkt:16:4\n\n>: contract violation\n  expected: real?\n  given: 'list\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcvy_iy1i.rkt:17:4\n\n>: contract violation\n  expected: real?\n  given: 'list\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (let ([height (car student)]\n                  [weight (cadr student)])\n              (and (> height h) (> weight w))))\n          (hash-values students)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp610eui7z.rkt:16:4\n\n>: contract violation\n  expected: real?\n  given: 'list\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp610eui7z.rkt:17:4\n\n>: contract violation\n  expected: real?\n  given: 'list\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp610eui7z.rkt:18:4\n\n>: contract violation\n  expected: real?\n  given: 'list\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (students student)) h)\n                 (> (cadr (students student)) w)))\n          (hash-keys students)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb21g95f2.rkt:15:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb21g95f2.rkt:16:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb21g95f2.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n-------",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car student) h)\n                 (> (cadr student) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprih_0tcs.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprih_0tcs.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprih_0tcs.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (for/list ([student students]\n             #:when (and (> (car (student)) h)\n                         (> (cadr (student)) w)))\n    student))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprzljz7cm.rkt:15:4\n\nresult arity mismatch;\n expected number of values not received\n  expected: 1\n  received: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprzljz7cm.rkt:16:4\n\nresult arity mismatch;\n expected number of values not received\n  expected: 1\n  received: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprzljz7cm.rkt:17:4\n\nresult arity mismatch;\n expected number of values not received\n  expected: 1\n  received: 2\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (\u03bb (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_qdm0mnc.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_qdm0mnc.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_qdm0mnc.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (let ([height (car (cdr (assoc student students)))]\n                  [weight (car (cdr (cdr (assoc student students))))])\n              (and (> height h) (> weight w))))\n          (hash-keys students)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzmg_gt8t.rkt:16:4\n\nassoc: not a proper list: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzmg_gt8t.rkt:17:4\n\nassoc: not a proper list: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzmg_gt8t.rkt:18:4\n\nassoc: not a proper list: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (>= (car (cdr student)) h)\n                 (>= (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsyt7ogu8.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsyt7ogu8.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsyt7ogu8.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (\u03bb (x)\n            (and (> (cadr x) h) (> (caddr x) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplp9sbza6.rkt:14:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplp9sbza6.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplp9sbza6.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (\u03bb (student)\n            (and (>= (car (cdr student)) h)\n                 (>= (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk6d1r175.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk6d1r175.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk6d1r175.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (\u03bb (student)\n            (let ((height (car (cdr student)))\n                  (weight (cadr (cdr student))))\n              (and (> height h) (> weight w))))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgsevh_b2.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgsevh_b2.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgsevh_b2.rkt:18:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car student) h)\n                 (> (cadr student) w)))\n          (hash-values students)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcvy_iy1i.rkt:15:4\n\n>: contract violation\n  expected: real?\n  given: 'list\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcvy_iy1i.rkt:16:4\n\n>: contract violation\n  expected: real?\n  given: 'list\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcvy_iy1i.rkt:17:4\n\n>: contract violation\n  expected: real?\n  given: 'list\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car student) h)\n                 (> (cadr student) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprih_0tcs.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprih_0tcs.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprih_0tcs.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (>= (car (cdr student)) h)\n                 (>= (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsyt7ogu8.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsyt7ogu8.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsyt7ogu8.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (\u03bb (x) (and (> (cadr x) h) (> (caddr x) w))) students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123747,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkm6p8drx.rkt:12:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkm6p8drx.rkt:13:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkm6p8drx.rkt:14:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (\u03bb (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_qdm0mnc.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_qdm0mnc.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_qdm0mnc.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (students student)) h)\n                 (> (cadr (students student)) w)))\n          (hash-keys students)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb21g95f2.rkt:15:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb21g95f2.rkt:16:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb21g95f2.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n-------",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (>= (car (cdr student)) h)\n                 (>= (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsyt7ogu8.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsyt7ogu8.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsyt7ogu8.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (>= (car (cdr student)) h)\n                 (>= (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsyt7ogu8.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsyt7ogu8.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsyt7ogu8.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (\u03bb (x)\n            (and (> (car (cdr x)) h)\n                 (> (cadr (cdr x)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6kfkfu7w.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6kfkfu7w.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6kfkfu7w.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car student) h)\n                 (> (cadr student) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprih_0tcs.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprih_0tcs.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprih_0tcs.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (>= (car (cdr student)) h)\n                 (>= (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsyt7ogu8.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsyt7ogu8.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsyt7ogu8.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (<= h (car (cdr student)))\n                 (<= w (cadr (cdr student)))))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123747,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf6axpzz4.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf6axpzz4.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf6axpzz4.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car student) h) (> (cadr student) w)))\n          (hash-values students)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123747,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2k_gyyqu.rkt:14:4\n\n>: contract violation\n  expected: real?\n  given: 'list\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2k_gyyqu.rkt:15:4\n\n>: contract violation\n  expected: real?\n  given: 'list\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2k_gyyqu.rkt:16:4\n\n>: contract violation\n  expected: real?\n  given: 'list\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (students student)) h)\n                 (> (cadr (students student)) w)))\n          (hash-keys students)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb21g95f2.rkt:15:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb21g95f2.rkt:16:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb21g95f2.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n-------",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (\u03bb (x) (and (> (car (cdr x)) h) (> (cadr (cdr x)) w))) students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123747,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxuhx9udu.rkt:12:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxuhx9udu.rkt:13:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxuhx9udu.rkt:14:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (s)\n            (and (> (car (cdr s)) h)\n                 (> (cadr (cdr s)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123747,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf6ge8v4j.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf6ge8v4j.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf6ge8v4j.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (let ([height (car student)]\n                  [weight (cadr student)])\n              (and (> height h) (> weight w))))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9t59kx9m.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9t59kx9m.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9t59kx9m.rkt:18:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (let ([height (car student)]\n                  [weight (cdr student)])\n              (and (> height h) (> weight w))))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123747,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx39yjyqp.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx39yjyqp.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx39yjyqp.rkt:18:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (let ((height (car (cdr student)))\n                  (weight (cadr (cdr student))))\n              (and (> height h) (> weight w))))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxbozlddi.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxbozlddi.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxbozlddi.rkt:18:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (let ((height (car (cdr student)))\n                  (weight (cadr (cdr student))))\n              (and (> height h) (> weight w))))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxbozlddi.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxbozlddi.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxbozlddi.rkt:18:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cdr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123747,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy6rrhfjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy6rrhfjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy6rrhfjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (>= (car student) h)\n                 (>= (cadr student) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123747,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpupo1rk39.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpupo1rk39.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpupo1rk39.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (>= (car (cdr student)) h)\n                 (>= (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsyt7ogu8.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsyt7ogu8.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsyt7ogu8.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (\u03bb (student)\n            (and (>= (car (cdr student)) h)\n                 (>= (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk6d1r175.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk6d1r175.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk6d1r175.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (x)\n            (and (> (car (cdr x)) h)\n                 (> (cadr (cdr x)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_e9kfd3y.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_e9kfd3y.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_e9kfd3y.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (\u03bb (student)\n            (let ((height (car (cdr student)))\n                  (weight (car (cdr (cdr student)))))\n              (and (> height h) (> weight w))))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123747,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphhlxs32y.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphhlxs32y.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphhlxs32y.rkt:18:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (\u03bb (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_qdm0mnc.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_qdm0mnc.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_qdm0mnc.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (\u03bb (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_qdm0mnc.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_qdm0mnc.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_qdm0mnc.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (>= (car (cdr student)) h)\n                 (>= (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsyt7ogu8.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsyt7ogu8.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsyt7ogu8.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (x)\n            (and (> (car (cdr x)) h)\n                 (> (cadr (cdr x)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_e9kfd3y.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_e9kfd3y.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_e9kfd3y.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (let ((height (car (cdr student)))\n                  (weight (cadr (cdr student))))\n              (and (> height h) (> weight w))))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxbozlddi.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxbozlddi.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxbozlddi.rkt:18:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (let ([height (car (cdr student))]\n                  [weight (cadr (cdr student))])\n              (and (> height h) (> weight w))))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpccx6x839.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpccx6x839.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpccx6x839.rkt:18:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car student) h) (> (cdr student) w)))\n          (map cdr students)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123747,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4yr684l1.rkt:14:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4yr684l1.rkt:15:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4yr684l1.rkt:16:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (hash-ref students student)) h)\n                 (> (cadr (hash-ref students student)) w)))\n          (hash-keys students)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123747,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmy8ea01c.rkt:15:4\n\n>: contract violation\n  expected: real?\n  given: 'list\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmy8ea01c.rkt:16:4\n\n>: contract violation\n  expected: real?\n  given: 'list\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmy8ea01c.rkt:17:4\n\n>: contract violation\n  expected: real?\n  given: 'list\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (\u03bb (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_qdm0mnc.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_qdm0mnc.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_qdm0mnc.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (\u03bb (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_qdm0mnc.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_qdm0mnc.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_qdm0mnc.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (>= (car (cdr student)) h)\n                 (>= (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsyt7ogu8.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsyt7ogu8.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsyt7ogu8.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (car (cdr (cdr student))) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123747,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv8iiokbw.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv8iiokbw.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv8iiokbw.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (\u03bb (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_qdm0mnc.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_qdm0mnc.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_qdm0mnc.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (\u03bb (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_qdm0mnc.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_qdm0mnc.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_qdm0mnc.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (let ([h (car (cdr student))]\n                  [w (cadr (cdr student))])\n              (and (> h h) (> w w))))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9d3vv7ta.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9d3vv7ta.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9d3vv7ta.rkt:18:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (\u03bb (x) (and (>= (car x) h) (>= (cdr x) w))) students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123747,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp47qfy81k.rkt:12:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp47qfy81k.rkt:13:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp47qfy81k.rkt:14:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (>= (car (cdr student)) h)\n                 (>= (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsyt7ogu8.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsyt7ogu8.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsyt7ogu8.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (\u03bb (x)\n            (and (> (car (cdr x)) h) (> (cdr (cdr x)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123747,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxj11h6j2.rkt:14:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxj11h6j2.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxj11h6j2.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (let ([height (car (cdr student))]\n                  [weight (cadr (cdr student))])\n              (and (> height h) (> weight w))))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpccx6x839.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpccx6x839.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpccx6x839.rkt:18:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (\u03bb (student)\n            (and (> (car student) h)\n                 (> (cadr student) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp51z8rz8o.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp51z8rz8o.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp51z8rz8o.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (\u03bb (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_qdm0mnc.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_qdm0mnc.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_qdm0mnc.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (let ((height (car (cdr student)))\n                  (weight (cadr (cdr student))))\n              (and (> height h) (> weight w))))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxbozlddi.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxbozlddi.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxbozlddi.rkt:18:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (>= (car (cdr student)) h)\n                 (>= (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsyt7ogu8.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsyt7ogu8.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsyt7ogu8.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (let ([height (car student)]\n                  [weight (cadr student)])\n              (and (> height h) (> weight w))))\n          (map snd students)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123747,
      "stdout": "",
      "stderr": "/tmp/tmpod0d82cz.rkt:9:15: snd: unbound identifier\n  in: snd\n  location...:\n   /tmp/tmpod0d82cz.rkt:9:15\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (\u03bb (student)\n            (and (> (car (hash-ref students student)) h)\n                 (> (cadr (hash-ref students student)) w)))\n          (hash-keys students)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123747,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmple2u8boi.rkt:15:4\n\n>: contract violation\n  expected: real?\n  given: 'list\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmple2u8boi.rkt:16:4\n\n>: contract violation\n  expected: real?\n  given: 'list\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmple2u8boi.rkt:17:4\n\n>: contract violation\n  expected: real?\n  given: 'list\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (let ([height (car student)]\n                  [weight (cadr student)])\n              (and (> height h) (> weight w))))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9t59kx9m.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9t59kx9m.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9t59kx9m.rkt:18:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1665510496,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_f4kgjb.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (x)\n            (and (> (car (cdr x)) h) (> (cadr (cdr x)) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123747,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzlm9cmdb.rkt:14:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzlm9cmdb.rkt:15:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzlm9cmdb.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (and (> (student-height student) h)\n                 (> (student-weight student) w)))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123747,
      "stdout": "",
      "stderr": "/tmp/tmp_ood__d2.rkt:6:21: student-height: unbound identifier\n  in: student-height\n  location...:\n   /tmp/tmp_ood__d2.rkt:6:21\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n  (filter (lambda (student)\n            (let ([height (car (cdr student))]\n                  [weight (cadr (cdr student))])\n              (and (> height h) (> weight w))))\n          students))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpccx6x839.rkt:16:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpccx6x839.rkt:17:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpccx6x839.rkt:18:4\n\nfilter: contract violation\n  expected: list?\n  given: '#hash((\"Alden Cantrell\" . (list 5.9 65)) (\"Cierra Vega\" . (list 6.2 70)) (\"Kierra Gentry\" . (list 6.0 68)) (\"Pierre Cox\" . (list 5.8 66)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    }
  ]
}