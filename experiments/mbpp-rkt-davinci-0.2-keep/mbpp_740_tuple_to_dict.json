{
  "name": "mbpp_740_tuple_to_dict",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n(define (tuple_to_dict test_tup)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_740_tuple_to_dict.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate tuple_to_dict))\n    (check-equal? (candidate (list 1 5 7 10 13 5)) #hash((1 .  5) (7 .  10) (13 .  5)))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) #hash((1 .  2) (3 .  4) (5 .  6)))\n    (check-equal? (candidate (list 7 8 9 10 11 12)) #hash((7 .  8) (9 .  10) (11 .  12)))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (helper tup acc)\n    (if (null? tup)\n        acc\n        (helper (cdr tup) (cons (cons (car tup) (cadr tup)) acc))))\n  (reverse (helper test_tup '())))\n",
    "  (let loop ([lst test_tup] [acc '()])\n    (if (null? lst)\n        acc\n        (loop (cddr lst) (cons (cons (car lst) (cadr lst)) acc)))))\n",
    "  (let ([len (length test_tup)])\n    (cond\n      [(= len 0) '()]\n      [(= len 1) (cons (list (car test_tup) '()) '())]\n      [else (cons (list (car test_tup) (cadr test_tup)) (tuple_to_dict (cdr test_tup)))])))\n",
    "  (define (tuple_to_dict_helper test_tup dict)\n    (if (null? test_tup)\n        dict\n        (tuple_to_dict_helper (cdr test_tup) (dictionary-set dict (car test_tup) (cadr test_tup)))))\n  (tuple_to_dict_helper test_tup (make-dictionary)))\n",
    "  (let loop ([i 0] [acc '()])\n    (if (= i (length test_tup))\n        acc\n        (loop (+ i 2) (cons (cons (list-ref test_tup i) (list-ref test_tup (+ i 1))) acc)))))\n",
    "  (cond [(empty? test_tup) empty]\n        [else (cons (cons (first test_tup) (second test_tup)) (tuple_to_dict (rest (rest test_tup))))]))\n",
    "  (define (helper tup acc)\n    (if (null? tup)\n        acc\n        (helper (cddr tup) (cons (cons (car tup) (cadr tup)) acc))))\n  (reverse (helper test_tup '())))\n",
    "  (let loop ([i 0] [result '()])\n    (if (= i (length test_tup))\n        result\n        (loop (+ i 2) (cons (cons (list-ref test_tup i) (list-ref test_tup (+ i 1))) result)))))\n",
    "  (define (tuple_to_dict_helper test_tup dict)\n    (if (null? test_tup)\n        dict\n        (tuple_to_dict_helper (cddr test_tup) (cons (cons (car test_tup) (cadr test_tup)) dict))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (define (tuple_to_dict_helper test_tup result_dict)\n    (if (null? test_tup)\n        result_dict\n        (tuple_to_dict_helper (cdr test_tup) (dict-set result_dict (car test_tup) (cadr test_tup)))))\n  (tuple_to_dict_helper test_tup (make-dict)))\n",
    "  (define (tuple_to_dict_helper test_tup dict)\n    (if (null? test_tup)\n        dict\n        (tuple_to_dict_helper (cdr test_tup) (cons (cons (car test_tup) (cadr test_tup)) dict))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (let loop ((tup test_tup) (dict '()))\n    (if (null? tup)\n        dict\n        (loop (cddr tup) (cons (cons (car tup) (cadr tup)) dict)))))\n",
    "  (define (tuple_to_dict_helper test_tup dict)\n    (if (null? test_tup)\n        dict\n        (tuple_to_dict_helper (cdr test_tup) (cons (cons (car test_tup) (cadr test_tup)) dict))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (let loop ([tup test_tup] [dict '()])\n    (if (null? tup)\n        dict\n        (loop (cddr tup) (cons (cons (car tup) (cadr tup)) dict)))))\n",
    "  (let ([len (length test_tup)])\n    (cond\n      [(= len 0) '()]\n      [(= len 1) (cons (cons (car test_tup) '()) '())]\n      [else (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cdr (cdr test_tup))))])))\n",
    "  (let ([lst (list->vector test_tup)])\n    (for/vector ([i (in-range (vector-length lst))])\n      (cons (vector-ref lst i) (vector-ref lst (+ i 1))))))\n",
    "  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (cons (first test_tup) (second test_tup)) (tuple_to_dict (rest (rest test_tup))))]))\n",
    "  (define (tuple_to_dict_helper test_tup dict)\n    (if (null? test_tup)\n        dict\n        (tuple_to_dict_helper (cdr test_tup) (cons (cons (car test_tup) (cadr test_tup)) dict))))\n  (reverse (tuple_to_dict_helper test_tup '())))\n",
    "  (define (helper tup acc)\n    (if (null? tup)\n        acc\n        (helper (cddr tup) (cons (cons (car tup) (cadr tup)) acc))))\n  (helper test_tup '()))\n",
    "  (let loop ([tup test_tup]\n             [dict '()])\n    (cond [(null? tup) (reverse dict)]\n          [else (loop (cddr tup)\n                      (cons (cons (car tup) (cadr tup)) dict))])))\n"
  ]
}