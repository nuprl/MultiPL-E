{
  "name": "mbpp_740_tuple_to_dict",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n(define (tuple_to_dict test_tup)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_740_tuple_to_dict.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate tuple_to_dict))\n    (check-equal? (candidate (list 1 5 7 10 13 5)) #hash((1 .  5) (7 .  10) (13 .  5)))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) #hash((1 .  2) (3 .  4) (5 .  6)))\n    (check-equal? (candidate (list 7 8 9 10 11 12)) #hash((7 .  8) (9 .  10) (11 .  12)))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (helper tup acc)\n    (if (null? tup)\n        acc\n        (helper (cdr tup) (cons (cons (car tup) (cadr tup)) acc))))\n  (reverse (helper test_tup '())))\n",
    "  (let loop ([lst test_tup] [acc '()])\n    (if (null? lst)\n        acc\n        (loop (cddr lst) (cons (cons (car lst) (cadr lst)) acc)))))\n",
    "  (let ([len (length test_tup)])\n    (cond\n      [(= len 0) '()]\n      [(= len 1) (cons (list (car test_tup) '()) '())]\n      [else (cons (list (car test_tup) (cadr test_tup)) (tuple_to_dict (cdr test_tup)))])))\n",
    "  (define (tuple_to_dict_helper test_tup dict)\n    (if (null? test_tup)\n        dict\n        (tuple_to_dict_helper (cdr test_tup) (dictionary-set dict (car test_tup) (cadr test_tup)))))\n  (tuple_to_dict_helper test_tup (make-dictionary)))\n",
    "  (let loop ([i 0] [acc '()])\n    (if (= i (length test_tup))\n        acc\n        (loop (+ i 2) (cons (cons (list-ref test_tup i) (list-ref test_tup (+ i 1))) acc)))))\n",
    "  (cond [(empty? test_tup) empty]\n        [else (cons (cons (first test_tup) (second test_tup)) (tuple_to_dict (rest (rest test_tup))))]))\n",
    "  (define (helper tup acc)\n    (if (null? tup)\n        acc\n        (helper (cddr tup) (cons (cons (car tup) (cadr tup)) acc))))\n  (reverse (helper test_tup '())))\n",
    "  (let loop ([i 0] [result '()])\n    (if (= i (length test_tup))\n        result\n        (loop (+ i 2) (cons (cons (list-ref test_tup i) (list-ref test_tup (+ i 1))) result)))))\n",
    "  (define (tuple_to_dict_helper test_tup dict)\n    (if (null? test_tup)\n        dict\n        (tuple_to_dict_helper (cddr test_tup) (cons (cons (car test_tup) (cadr test_tup)) dict))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (define (tuple_to_dict_helper test_tup result_dict)\n    (if (null? test_tup)\n        result_dict\n        (tuple_to_dict_helper (cdr test_tup) (dict-set result_dict (car test_tup) (cadr test_tup)))))\n  (tuple_to_dict_helper test_tup (make-dict)))\n",
    "  (define (tuple_to_dict_helper test_tup dict)\n    (if (null? test_tup)\n        dict\n        (tuple_to_dict_helper (cdr test_tup) (cons (cons (car test_tup) (cadr test_tup)) dict))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (let loop ((tup test_tup) (dict '()))\n    (if (null? tup)\n        dict\n        (loop (cddr tup) (cons (cons (car tup) (cadr tup)) dict)))))\n",
    "  (define (tuple_to_dict_helper test_tup dict)\n    (if (null? test_tup)\n        dict\n        (tuple_to_dict_helper (cdr test_tup) (cons (cons (car test_tup) (cadr test_tup)) dict))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (let loop ([tup test_tup] [dict '()])\n    (if (null? tup)\n        dict\n        (loop (cddr tup) (cons (cons (car tup) (cadr tup)) dict)))))\n",
    "  (let ([len (length test_tup)])\n    (cond\n      [(= len 0) '()]\n      [(= len 1) (cons (cons (car test_tup) '()) '())]\n      [else (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cdr (cdr test_tup))))])))\n",
    "  (let ([lst (list->vector test_tup)])\n    (for/vector ([i (in-range (vector-length lst))])\n      (cons (vector-ref lst i) (vector-ref lst (+ i 1))))))\n",
    "  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (cons (first test_tup) (second test_tup)) (tuple_to_dict (rest (rest test_tup))))]))\n",
    "  (define (tuple_to_dict_helper test_tup dict)\n    (if (null? test_tup)\n        dict\n        (tuple_to_dict_helper (cdr test_tup) (cons (cons (car test_tup) (cadr test_tup)) dict))))\n  (reverse (tuple_to_dict_helper test_tup '())))\n",
    "  (define (helper tup acc)\n    (if (null? tup)\n        acc\n        (helper (cddr tup) (cons (cons (car tup) (cadr tup)) acc))))\n  (helper test_tup '()))\n",
    "  (let loop ([tup test_tup]\n             [dict '()])\n    (cond [(null? tup) (reverse dict)]\n          [else (loop (cddr tup)\n                      (cons (cons (car tup) (cadr tup)) dict))])))\n",
    "  (define (helper tup acc)\n    (if (null? tup)\n        acc\n        (helper (cddr tup)\n                (cons (cons (car tup) (cadr tup)) acc))))\n  (reverse (helper test_tup '())))\n",
    "  (define (helper test_tup acc)\n    (if (null? test_tup)\n        acc\n        (helper (cdr test_tup) (cons (cons (car test_tup) (cadr test_tup)) acc))))\n  (reverse (helper test_tup '())))\n",
    "  (define (helper tup acc)\n    (if (null? tup)\n        acc\n        (helper (cddr tup) (cons (cons (car tup) (cadr tup)) acc))))\n  (reverse (helper test_tup '())))\n",
    "  (let ([len (length test_tup)])\n    (cond\n      [(= len 0) '()]\n      [(= len 1) (cons (cons (car test_tup) '()) '())]\n      [else (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cdr (cdr test_tup))))])))\n",
    "  (cond\n    [(empty? test_tup) empty]\n    [else (cons (cons (first test_tup) (second test_tup)) (tuple_to_dict (rest (rest test_tup))))]))\n",
    "  (define (helper tup acc)\n    (if (null? tup)\n        acc\n        (helper (cddr tup) (cons (cons (car tup) (cadr tup)) acc))))\n  (reverse (helper test_tup '())))\n",
    "  (define (helper test_tup result)\n    (if (null? test_tup)\n        result\n        (helper (cddr test_tup) (cons (cons (car test_tup) (cadr test_tup)) result))))\n  (reverse (helper test_tup '())))\n",
    "  (define (helper tup acc)\n    (if (null? tup)\n        acc\n        (helper (cddr tup) (cons (cons (car tup) (cadr tup)) acc))))\n  (reverse (helper test_tup '())))\n",
    "  (define (helper tup)\n    (if (null? tup)\n        '()\n        (cons (cons (car tup) (cadr tup)) (helper (cddr tup)))))\n  (helper test_tup))\n",
    "  (if (null? test_tup)\n      '()\n      (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cddr test_tup)))))\n",
    "  (let ([len (length test_tup)])\n    (cond [(= len 0) '()]\n          [(= len 1) (cons (cons (car test_tup) '()) '())]\n          [else (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cdr (cdr test_tup))))])))\n",
    "  (define (tuple_to_dict_helper test_tup result)\n    (if (null? test_tup)\n        result\n        (tuple_to_dict_helper (cdr test_tup) (cons (cons (car test_tup) (cadr test_tup)) result))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (define (tuple_to_dict_helper test_tup)\n    (if (null? test_tup)\n        '()\n        (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict_helper (cddr test_tup)))))\n  (tuple_to_dict_helper test_tup))\n",
    "  (let loop ([lst (cdr test_tup)] [acc '()])\n    (if (null? lst)\n        acc\n        (loop (cdr lst) (cons (cons (car test_tup) (car lst)) acc)))))\n",
    "  (let ([len (length test_tup)])\n    (cond\n      [(zero? len) '()]\n      [(= len 1) (cons (cons (car test_tup) '()) '())]\n      [else (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cdr test_tup)))])))\n",
    "  (let loop ([i 0] [acc '()])\n    (if (= i (length test_tup))\n        acc\n        (loop (+ i 2) (cons (cons (list-ref test_tup i) (list-ref test_tup (+ i 1))) acc)))))\n",
    "  (define (tuple_to_dict_helper test_tup dict)\n    (if (null? test_tup)\n        dict\n        (tuple_to_dict_helper (cdr test_tup) (cons (cons (car test_tup) (cadr test_tup)) dict))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (let loop ([tup test_tup] [dict '()])\n    (if (null? tup)\n        dict\n        (loop (cddr tup) (cons (cons (car tup) (cadr tup)) dict)))))\n",
    "  (define (tuple_to_dict_helper test_tup dict)\n    (if (null? test_tup)\n        dict\n        (tuple_to_dict_helper (cdr test_tup) (cons (cons (car test_tup) (cadr test_tup)) dict))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (let ([len (length test_tup)])\n    (if (= len 0)\n        '()\n        (cons (cons (car test_tup) (cadr test_tup))\n              (tuple_to_dict (cddr test_tup))))))\n",
    "  (define (tuple_to_dict_helper test_tup dict)\n    (if (null? test_tup)\n        dict\n        (tuple_to_dict_helper (cddr test_tup) (cons (cons (car test_tup) (cadr test_tup)) dict))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (define (helper tup)\n    (if (null? tup)\n        '()\n        (cons (cons (car tup) (cadr tup)) (helper (cddr tup)))))\n  (helper test_tup))\n",
    "  (define (tuple_to_dict_helper test_tup dict)\n    (if (null? test_tup)\n        dict\n        (tuple_to_dict_helper (cdr test_tup) (cons (cons (car test_tup) (cadr test_tup)) dict))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (let ([lst (list->vector test_tup)])\n    (let loop ([i 0] [acc '()])\n      (if (= i (vector-length lst))\n          acc\n          (loop (+ i 2) (cons (cons (vector-ref lst i) (vector-ref lst (+ i 1))) acc))))))\n",
    "  (let ([len (length test_tup)])\n    (cond\n      [(= len 0) '()]\n      [(= len 1) (cons (cons (car test_tup) '()) '())]\n      [else (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cdr (cdr test_tup))))])))\n",
    "  (define (helper test_tup dict)\n    (if (null? test_tup)\n        dict\n        (helper (cddr test_tup) (cons (cons (car test_tup) (cadr test_tup)) dict))))\n  (helper test_tup '()))\n",
    "  (define (helper tup acc)\n    (if (null? tup)\n        acc\n        (helper (cdr tup) (cons (cons (car tup) (cadr tup)) acc))))\n  (reverse (helper test_tup '())))\n",
    "  (let ([len (length test_tup)])\n    (cond\n      [(zero? len) '()]\n      [(= len 1) (cons (cons (car test_tup) '()) '())]\n      [else (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cdr (cdr test_tup))))])))\n",
    "  (let ([len (length test_tup)])\n    (if (= len 0)\n        '()\n        (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cddr test_tup))))))\n",
    "  (let ([len (length test_tup)])\n    (cond\n      [(zero? len) '()]\n      [(= len 1) (cons (cons (car test_tup) '()) '())]\n      [else (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cddr test_tup)))])))\n",
    "  (let loop ([i 0] [acc '()])\n    (if (= i (length test_tup))\n        acc\n        (loop (+ i 2) (cons (cons (list-ref test_tup i) (list-ref test_tup (+ i 1))) acc)))))\n",
    "  (define (tuple_to_dict_helper test_tup dict)\n    (cond\n      [(empty? test_tup) dict]\n      [(empty? (rest test_tup)) dict]\n      [else (tuple_to_dict_helper (rest (rest test_tup)) (hash-set dict (first test_tup) (second test_tup)))]))\n  (tuple_to_dict_helper test_tup (make-hash)))\n",
    "  (let loop ([lst test_tup] [dict '()])\n    (if (null? lst)\n        dict\n        (loop (cddr lst) (cons (cons (car lst) (cadr lst)) dict)))))\n",
    "  (define (helper tup acc)\n    (if (null? tup)\n        acc\n        (helper (cdr tup) (cons (cons (car tup) (cadr tup)) acc))))\n  (reverse (helper test_tup '())))\n",
    "  (let ([len (length test_tup)])\n    (cond\n      [(= len 0) '()]\n      [(= len 1) (cons (cons (car test_tup) '()) '())]\n      [else (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cdr (cdr test_tup))))])))\n",
    "  (define (tuple_to_dict_helper test_tup dict)\n    (if (null? test_tup)\n        dict\n        (tuple_to_dict_helper (cdr test_tup) (cons (cons (car test_tup) (cadr test_tup)) dict))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (define (helper tup acc)\n    (if (null? tup)\n        acc\n        (helper (cddr tup) (cons (cons (car tup) (cadr tup)) acc))))\n  (helper test_tup '()))\n",
    "  (let loop ([lst test_tup] [acc '()])\n    (if (null? lst)\n        acc\n        (loop (cddr lst) (cons (cons (car lst) (cadr lst)) acc)))))\n",
    "  (define (helper tup acc)\n    (if (null? tup)\n        acc\n        (helper (cddr tup) (cons (cons (car tup) (cadr tup)) acc))))\n  (reverse (helper test_tup '())))\n",
    "  (define (helper tup dict)\n    (if (null? tup)\n        dict\n        (helper (cdr tup) (hash-set dict (car tup) (cadr tup)))))\n  (helper test_tup (make-hash)))\n",
    "  (let ([len (length test_tup)])\n    (cond\n      [(= len 0) '()]\n      [(= len 1) (cons (cons (car test_tup) '()) '())]\n      [else (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cdr test_tup)))])))\n",
    "  (cond\n    [(empty? test_tup) '()]\n    [else (cons (cons (first test_tup) (second test_tup)) (tuple_to_dict (rest (rest test_tup))))]))\n",
    "  (let loop ([lst test_tup] [acc '()])\n    (if (null? lst)\n        acc\n        (loop (cdr (cdr lst)) (cons (cons (car lst) (cadr lst)) acc)))))\n",
    "  (let ([len (length test_tup)])\n    (if (= len 0)\n        '()\n        (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cddr test_tup))))))\n",
    "  (let loop ([tup test_tup] [dict '()])\n    (if (null? tup)\n        dict\n        (loop (cddr tup) (cons (cons (car tup) (cadr tup)) dict)))))\n",
    "  (define (tuple_to_dict_helper test_tup acc)\n    (if (null? test_tup)\n        acc\n        (tuple_to_dict_helper (cdr test_tup) (cons (cons (car test_tup) (cadr test_tup)) acc))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (let ([len (length test_tup)])\n    (if (even? len)\n        (let ([half-len (/ len 2)])\n          (for/fold ([dict '()]) ([i (in-range half-len)])\n            (let ([key (list-ref test_tup (* i 2))]\n                  [value (list-ref test_tup (+ (* i 2) 1))])\n              (dict-set dict key value))))\n        (error \"The tuple is not even.\"))))\n",
    "  (let loop ([tup test_tup]\n             [dict '()])\n    (if (null? tup)\n        dict\n        (loop (cddr tup)\n              (cons (cons (car tup) (cadr tup)) dict)))))\n",
    "  (define (tuple_to_dict_helper test_tup result)\n    (if (null? test_tup)\n        result\n        (tuple_to_dict_helper (cdr test_tup) (cons (cons (car test_tup) (cadr test_tup)) result))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (let ([len (length test_tup)])\n    (cond\n      [(= len 0) '()]\n      [(= len 1) (cons (cons (car test_tup) '()) '())]\n      [else (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cdr (cdr test_tup))))])))\n</code>\n",
    "  (define (helper tup dict)\n    (if (empty? tup)\n        dict\n        (helper (cdr tup) (dict-set dict (car tup) (car (cdr tup))))))\n  (helper test_tup (make-dict)))\n",
    "  (let loop ([lst test_tup] [acc '()])\n    (if (null? lst)\n        acc\n        (loop (cddr lst) (cons (cons (car lst) (cadr lst)) acc)))))\n",
    "  (let ([len (length test_tup)])\n    (cond\n      [(= len 0) '()]\n      [(= len 1) (cons (list (car test_tup) '()) '())]\n      [else (cons (list (car test_tup) (cadr test_tup)) (tuple_to_dict (cdr test_tup)))])))\n",
    "  (define (tuple_to_dict_helper test_tup dict)\n    (if (null? test_tup)\n        dict\n        (tuple_to_dict_helper (cddr test_tup) (cons (cons (car test_tup) (cadr test_tup)) dict))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (define (tuple_to_dict_helper test_tup acc)\n    (if (null? test_tup)\n        acc\n        (tuple_to_dict_helper (cdr test_tup) (cons (cons (car test_tup) (cadr test_tup)) acc))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (define (tuple_to_dict_helper test_tup dict)\n    (if (null? test_tup)\n        dict\n        (tuple_to_dict_helper (cdr test_tup) (cons (cons (car test_tup) (cadr test_tup)) dict))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (let ([len (length test_tup)])\n    (cond\n      [(= len 0) '()]\n      [(= len 1) (cons (list (car test_tup) '()) '())]\n      [else (cons (list (car test_tup) (cadr test_tup)) (tuple_to_dict (cdr test_tup)))])))\n",
    "  (define (helper tup dict)\n    (if (null? tup)\n        dict\n        (helper (cdr tup) (cons (cons (car tup) (cadr tup)) dict))))\n  (helper test_tup '()))\n",
    "  (let ([tup_len (length test_tup)])\n    (cond\n      [(= tup_len 0) '()]\n      [(= tup_len 1) (cons (cons (car test_tup) '()) '())]\n      [else (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cdr (cdr test_tup))))])))\n",
    "  (let loop ([tup test_tup]\n             [acc '()])\n    (if (null? tup)\n        acc\n        (loop (cdr tup)\n              (cons (cons (car tup) (cadr tup)) acc)))))\n",
    "  (cond [(empty? test_tup) empty]\n        [else (cons (cons (first test_tup) (second test_tup))\n                    (tuple_to_dict (rest (rest test_tup))))]))\n",
    "  (let loop ([tup test_tup] [dict '()])\n    (if (null? tup)\n        dict\n        (loop (cddr tup) (cons (cons (car tup) (cadr tup)) dict)))))\n",
    "  (define (helper tup acc)\n    (if (null? tup)\n        acc\n        (helper (cddr tup) (cons (cons (car tup) (cadr tup)) acc))))\n  (helper test_tup '()))\n",
    "  (let ([len (length test_tup)])\n    (if (= len 0)\n        '()\n        (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cddr test_tup))))))\n",
    "  (define (tuple_to_dict_helper test_tup dict)\n    (if (null? test_tup)\n        dict\n        (tuple_to_dict_helper (cddr test_tup) (cons (cons (car test_tup) (cadr test_tup)) dict))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (let ([len (length test_tup)])\n    (if (even? len)\n        (let ([half (/ len 2)])\n          (for/fold ([acc '()]) ([i (in-range half)])\n            (cons (cons (list-ref test_tup (* 2 i)) (list-ref test_tup (+ (* 2 i) 1))) acc)))\n        (error \"Tuple length must be even\"))))\n",
    "  (define (tuple_to_dict_helper test_tup dict)\n    (if (null? test_tup)\n        dict\n        (tuple_to_dict_helper (cdr test_tup) (cons (cons (car test_tup) (cadr test_tup)) dict))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (define (tuple_to_dict_helper test_tup dict)\n    (if (null? test_tup)\n        dict\n        (tuple_to_dict_helper (cdr test_tup) (cons (cons (car test_tup) (cadr test_tup)) dict))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (define (helper tup acc)\n    (if (null? tup)\n        acc\n        (helper (cdr tup) (cons (cons (car tup) (cadr tup)) acc))))\n  (reverse (helper test_tup '())))\n",
    "  (let ([len (length test_tup)])\n    (cond [(= len 0) '()]\n          [(= len 1) (list (list (car test_tup) '()))]\n          [else (cons (list (car test_tup) (cadr test_tup)) (tuple_to_dict (cddr test_tup)))])))\n",
    "  (let loop ([lst test_tup] [acc '()])\n    (cond [(empty? lst) acc]\n          [(empty? (rest lst)) acc]\n          [else (loop (rest (rest lst)) (cons (cons (first lst) (second lst)) acc))])))\n",
    "  (let ([len (length test_tup)])\n    (cond [(= len 0) '()]\n          [(= len 1) (cons (cons (car test_tup) '()) '())]\n          [else (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cdr (cdr test_tup))))])))\n",
    "  (define (tuple_to_dict_helper test_tup dict)\n    (if (null? test_tup)\n        dict\n        (tuple_to_dict_helper (cddr test_tup) (cons (cons (car test_tup) (cadr test_tup)) dict))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (let ([len (length test_tup)])\n    (cond\n      [(= len 0) '()]\n      [(= len 1) (cons (list (car test_tup) '()) '())]\n      [else (cons (list (car test_tup) (cadr test_tup)) (tuple_to_dict (cdr (cdr test_tup))))])))\n",
    "  (let ([len (length test_tup)])\n    (if (even? len)\n        (let ([half (/ len 2)])\n          (for/fold ([acc '()])\n                     ([i (in-range half)])\n                     (cons (cons (list-ref test_tup (* 2 i))\n                                 (list-ref test_tup (+ (* 2 i) 1)))\n                           acc)))\n        (error \"tuple length must be even\"))))\n",
    "  (define (tuple_to_dict_helper test_tup acc)\n    (if (null? test_tup)\n        acc\n        (tuple_to_dict_helper (cdr test_tup) (cons (cons (car test_tup) (cadr test_tup)) acc))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (let ([len (length test_tup)])\n    (if (even? len)\n        (let ([pairs (for/fold ([acc '()]) ([i (in-range 0 len 2)])\n                       (cons (cons (list-ref test_tup i) (list-ref test-tup (+ i 1))) acc))])\n          (reverse pairs))\n        (error \"Tuple length is not even\"))))\n",
    "  (define (helper tup acc)\n    (if (null? tup)\n        acc\n        (helper (cddr tup) (cons (cons (car tup) (cadr tup)) acc))))\n  (reverse (helper test_tup '())))\n",
    "  (let ([tup-len (length test_tup)])\n    (cond\n      [(= tup-len 0) '()]\n      [(= tup-len 1) (cons (cons (car test_tup) '()) '())]\n      [else (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cdr (cdr test_tup))))])))\n",
    "  (define (tuple_to_dict_helper test_tup dict)\n    (if (null? test_tup)\n        dict\n        (tuple_to_dict_helper (cdr test_tup) (cons (cons (car test_tup) (cadr test_tup)) dict))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (define (helper tup acc)\n    (if (null? tup)\n        acc\n        (helper (cddr tup) (cons (cons (car tup) (cadr tup)) acc))))\n  (reverse (helper test_tup '())))\n",
    "  (define (tuple_to_dict_helper tup dict)\n    (if (null? tup)\n        dict\n        (tuple_to_dict_helper (cdr tup) (cons (cons (car tup) (cadr tup)) dict))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (define (tuple_to_dict_helper test_tup acc)\n    (if (null? test_tup)\n        acc\n        (tuple_to_dict_helper (cddr test_tup) (cons (cons (car test_tup) (cadr test_tup)) acc))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (let ([len (length test_tup)])\n    (if (= len 0)\n        '()\n        (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cddr test_tup))))))\n",
    "  (let loop ([i 0] [result '()])\n    (if (= i (length test_tup))\n        result\n        (loop (+ i 2) (cons (cons (list-ref test_tup i) (list-ref test_tup (+ i 1))) result)))))\n",
    "  (define (helper tup acc)\n    (if (null? tup)\n        acc\n        (helper (cdr tup) (cons (cons (car tup) (cadr tup)) acc))))\n  (reverse (helper test_tup '())))\n",
    "  (let ([len (length test_tup)])\n    (if (= len 0)\n        '()\n        (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cddr test_tup))))))\n",
    "  (define (tuple_to_dict_helper test_tup dict)\n    (if (null? test_tup)\n        dict\n        (tuple_to_dict_helper (cdr test_tup) (cons (cons (car test_tup) (cadr test_tup)) dict))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (let loop ([lst test_tup] [dict '()])\n    (if (null? lst)\n        dict\n        (loop (cddr lst) (cons (cons (car lst) (cadr lst)) dict)))))\n",
    "  (define (tuple_to_dict_helper test_tup dict)\n    (if (null? test_tup)\n        dict\n        (tuple_to_dict_helper (cdr test_tup) (cons (cons (car test_tup) (cadr test_tup)) dict))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (let loop ([tup test_tup] [dict '()])\n    (if (null? tup)\n        dict\n        (loop (cddr tup) (cons (cons (car tup) (cadr tup)) dict)))))\n",
    "  (define (tuple_to_dict_helper tup dict)\n    (if (null? tup)\n        dict\n        (tuple_to_dict_helper (cdr tup) (cons (cons (car tup) (cadr tup)) dict))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (define (helper tup acc)\n    (if (null? tup)\n        acc\n        (helper (cdr tup) (cons (cons (car tup) (cadr tup)) acc))))\n  (reverse (helper test_tup '())))\n",
    "  (define (helper tup acc)\n    (if (null? tup)\n        acc\n        (helper (cdr tup) (cons (cons (car tup) (cadr tup)) acc))))\n  (helper test_tup '()))\n",
    "  (define (helper tup)\n    (if (null? (cdr tup))\n        '()\n        (cons (cons (car tup) (cadr tup)) (helper (cddr tup)))))\n  (helper test_tup))\n",
    "  (define (tuple_to_dict_helper test_tup acc)\n    (if (null? test_tup)\n        acc\n        (tuple_to_dict_helper (cdr test_tup) (cons (cons (car test_tup) (cadr test_tup)) acc))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (define (tuple_to_dict_helper test_tup dict)\n    (if (null? test_tup)\n        dict\n        (tuple_to_dict_helper (cdr test_tup) (cons (cons (car test_tup) (cadr test_tup)) dict))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (let ([len (length test_tup)])\n    (if (= len 0)\n        '()\n        (cons (cons (car test_tup) (cadr test_tup))\n              (tuple_to_dict (cddr test_tup))))))\n",
    "  (let loop ([tup test_tup] [dict '()])\n    (if (null? tup)\n        dict\n        (loop (cddr tup) (cons (cons (car tup) (cadr tup)) dict)))))\n",
    "  (define (tuple_to_dict_helper test_tup dict)\n    (if (null? test_tup)\n        dict\n        (tuple_to_dict_helper (cddr test_tup) (dict-set dict (car test_tup) (cadr test_tup)))))\n  (tuple_to_dict_helper test_tup (make-dict)))\n",
    "  (let ([len (length test_tup)])\n    (cond\n      [(= len 0) '()]\n      [(= len 1) (cons (cons (car test_tup) '()) '())]\n      [else (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cdr (cdr test_tup))))])))\n",
    "  (let ([len (length test_tup)])\n    (cond\n      [(= len 0) '()]\n      [(= len 1) (cons (cons (car test_tup) '()) '())]\n      [else (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cdr (cdr test_tup))))])))\n",
    "  (define (helper tup acc)\n    (if (null? tup)\n        acc\n        (helper (cddr tup) (cons (cons (car tup) (cadr tup)) acc))))\n  (helper test_tup '()))\n",
    "  (let ([len (length test_tup)])\n    (if (= len 0)\n        '()\n        (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cddr test_tup))))))\n",
    "  (define (tuple_to_dict_helper test_tup result)\n    (if (null? test_tup)\n        result\n        (tuple_to_dict_helper (cdr test_tup)\n                              (cons (cons (car test_tup) (cadr test_tup)) result))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (define (tuple_to_dict_helper test_tup)\n    (if (null? test_tup)\n        '()\n        (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict_helper (cddr test_tup)))))\n  (tuple_to_dict_helper test_tup))\n",
    "  (let ([len (length test_tup)])\n    (cond\n      [(= len 0) '()]\n      [(= len 1) (cons (list (car test_tup) '()) '())]\n      [else (cons (list (car test_tup) (cadr test_tup)) (tuple_to_dict (cdr test_tup)))])))\n",
    "  (define (helper tup acc)\n    (if (null? tup)\n        acc\n        (helper (cdr tup) (cons (cons (car tup) (cadr tup)) acc))))\n  (reverse (helper test_tup '())))\n",
    "  (define (helper tup acc)\n    (if (null? tup)\n        acc\n        (helper (cdr tup) (cons (cons (car tup) (cadr tup)) acc))))\n  (reverse (helper test_tup '())))\n",
    "  (let ([len (length test_tup)])\n    (cond\n      [(< len 2) '()]\n      [else (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cddr test_tup)))])))\n",
    "  (define (helper tup acc)\n    (if (null? tup)\n        acc\n        (helper (cddr tup) (cons (cons (car tup) (cadr tup)) acc))))\n  (reverse (helper test_tup '())))\n",
    "  (let ([len (length test_tup)])\n    (if (= len 0)\n        '()\n        (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cddr test_tup))))))\n",
    "  (define (helper tup acc)\n    (if (empty? tup)\n        acc\n        (helper (cdr tup) (cons (cons (car tup) (cadr tup)) acc))))\n  (reverse (helper test_tup '())))\n",
    "  (let ([len (length test_tup)])\n    (cond\n      [(= len 0) '()]\n      [(= len 1) (cons (cons (first test_tup) '()) '())]\n      [else (cons (cons (first test_tup) (second test_tup)) (tuple_to_dict (rest (rest test_tup))))])))\n",
    "  (define (iter tup acc)\n    (if (empty? tup)\n        acc\n        (iter (rest tup) (cons (cons (first tup) (second tup)) acc))))\n  (reverse (iter test_tup '())))\n",
    "  (let ([len (length test_tup)])\n    (cond\n      [(= len 0) '()]\n      [(= len 1) (cons (cons (car test_tup) '()) '())]\n      [else (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cdr (cdr test_tup))))])))\n",
    "  (define (tuple_to_dict_helper test_tup dict)\n    (if (null? test_tup)\n        dict\n        (tuple_to_dict_helper (cdr test_tup) (cons (cons (car test_tup) (cadr test_tup)) dict))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (let loop ([tup test_tup] [dict '()])\n    (if (null? tup)\n        dict\n        (loop (cddr tup) (cons (cons (car tup) (cadr tup)) dict)))))\n",
    "  (define (helper tup dict)\n    (if (null? tup)\n        dict\n        (helper (cddr tup) (hash-set dict (car tup) (cadr tup)))))\n  (helper test_tup (make-hash)))\n",
    "  (let ([len (length test_tup)])\n    (if (even? len)\n        (let ([keys (take test_tup (/ len 2))]\n              [vals (drop test_tup (/ len 2))])\n          (dict keys vals))\n        (error \"tuple length is not even\"))))\n",
    "  (define (tuple_to_dict_helper test_tup dict)\n    (if (null? test_tup)\n        dict\n        (tuple_to_dict_helper (cddr test_tup) (cons (cons (car test_tup) (cadr test_tup)) dict))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (define (tuple_to_dict_helper tup acc)\n    (if (null? tup)\n        acc\n        (tuple_to_dict_helper (cdr tup) (cons (cons (car tup) (cadr tup)) acc))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (let ([len (length test_tup)])\n    (if (even? len)\n        (let ([dict (make-hash)])\n          (for ([i (in-range 0 len 2)])\n            (hash-set! dict (list-ref test_tup i) (list-ref test_tup (+ i 1))))\n          dict)\n        (error \"Tuple length is not even\"))))\n",
    "  (let loop ((lst test_tup)\n             (acc '()))\n    (if (null? lst)\n        acc\n        (loop (cdr lst)\n              (cons (cons (car lst) (cadr lst))\n                    acc)))))\n",
    "  (let loop ([lst test_tup] [acc '()])\n    (cond [(empty? lst) acc]\n          [(empty? (rest lst)) acc]\n          [else (loop (rest (rest lst)) (cons (cons (first lst) (second lst)) acc))])))\n",
    "  (define (helper tup acc)\n    (if (null? tup)\n        acc\n        (helper (cdr tup) (cons (cons (car tup) (cadr tup)) acc))))\n  (reverse (helper test_tup '())))\n",
    "  (define (tuple_to_dict_helper test_tup result)\n    (if (null? test_tup)\n        result\n        (tuple_to_dict_helper (cddr test_tup) (cons (cons (car test_tup) (cadr test_tup)) result))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (cons (first test_tup) (second test_tup)) (tuple_to_dict (rest (rest test_tup))))]))\n",
    "  (let loop ([i 0] [lst '()])\n    (if (= i (length test_tup))\n        (reverse lst)\n        (loop (+ i 2) (cons (cons (list-ref test_tup i) (list-ref test_tup (+ i 1))) lst)))))\n",
    "  (define (helper tup dict)\n    (if (empty? tup)\n        dict\n        (helper (cdr tup) (hash-set dict (car tup) (cadr tup)))))\n  (helper test_tup (make-hash)))\n",
    "  (let loop ([tup test_tup] [dict '()])\n    (if (null? tup)\n        dict\n        (loop (cdr tup) (cons (cons (car tup) (cadr tup)) dict)))))\n",
    "  (define (tuple_to_dict_helper test_tup dict)\n    (if (null? test_tup)\n        dict\n        (tuple_to_dict_helper (cddr test_tup) (cons (cons (car test_tup) (cadr test_tup)) dict))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (define (tuple_to_dict_helper test_tup dict)\n    (if (null? test_tup)\n        dict\n        (tuple_to_dict_helper (cdr test_tup) (cons (cons (car test_tup) (cadr test_tup)) dict))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (define (helper tup acc)\n    (if (empty? tup)\n        acc\n        (helper (cdr tup) (cons (cons (car tup) (car (cdr tup))) acc))))\n  (reverse (helper test_tup '())))\n",
    "  (define (tuple_to_dict_helper test_tup acc)\n    (if (null? test_tup)\n        acc\n        (tuple_to_dict_helper (cdr test_tup) (cons (cons (car test_tup) (cadr test_tup)) acc))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (define (helper tup acc)\n    (if (null? tup)\n        acc\n        (helper (cddr tup) (cons (cons (car tup) (cadr tup)) acc))))\n  (reverse (helper test_tup '())))\n",
    "  (define (tuple_to_dict_helper test_tup dict)\n    (if (null? test_tup)\n        dict\n        (tuple_to_dict_helper (cddr test_tup) (cons (cons (car test_tup) (cadr test_tup)) dict))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (define (helper tup dict)\n    (if (null? tup)\n        dict\n        (helper (cdr tup) (cons (cons (car tup) (cadr tup)) dict))))\n  (reverse (helper test_tup '())))\n",
    "  (define (tuple_to_dict_helper test_tup acc)\n    (if (null? test_tup)\n        acc\n        (tuple_to_dict_helper (cdr test_tup) (cons (cons (car test_tup) (cadr test_tup)) acc))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (define (helper tup acc)\n    (if (empty? tup)\n        acc\n        (helper (rest tup) (cons (cons (first tup) (second tup)) acc))))\n  (reverse (helper test_tup '())))\n",
    "  (define (helper tup acc)\n    (if (null? tup)\n        acc\n        (helper (cddr tup) (cons (cons (car tup) (cadr tup)) acc))))\n  (helper test_tup '()))\n",
    "  (let ([len (length test_tup)])\n    (if (even? len)\n        (let ([keys (take test_tup (/ len 2))]\n              [values (drop test_tup (/ len 2))])\n          (dict keys values))\n        (error \"tuple length is not even\"))))\n",
    "  (define (helper tup acc)\n    (if (null? tup)\n        acc\n        (helper (cdr tup) (cons (cons (car tup) (cadr tup)) acc))))\n  (reverse (helper test_tup '())))\n",
    "  (let loop ([lst test_tup] [res '()])\n    (if (null? lst)\n        res\n        (loop (cddr lst) (cons (cons (car lst) (cadr lst)) res)))))\n",
    "  (let loop ([i 0] [acc '()])\n    (if (= i (length test_tup))\n        acc\n        (loop (+ i 2) (cons (cons (list-ref test_tup i) (list-ref test_tup (+ i 1))) acc)))))\n",
    "  (let ([len (length test_tup)])\n    (if (= len 0)\n        '()\n        (cons (cons (car test_tup) (cadr test_tup))\n              (tuple_to_dict (cddr test_tup))))))\n",
    "  (let loop ([i 0] [result '()])\n    (if (= i (length test_tup))\n        result\n        (loop (+ i 2) (cons (cons (list-ref test_tup i) (list-ref test_tup (+ i 1))) result)))))\n",
    "  (let loop ([tup test_tup]\n             [dict '()])\n    (if (null? tup)\n        dict\n        (loop (cddr tup)\n              (cons (cons (car tup) (cadr tup)) dict)))))\n",
    "  (let ([len (length test_tup)])\n    (if (= len 0)\n        '()\n        (cons (cons (list-ref test_tup 0) (list-ref test_tup 1))\n              (tuple_to_dict (sublist test_tup 2 len))))))\n",
    "  (define (helper tup)\n    (if (null? tup)\n        '()\n        (cons (cons (car tup) (cadr tup)) (helper (cddr tup)))))\n  (helper test_tup))\n",
    "  (define (tuple_to_dict_helper test_tup dict)\n    (if (null? test_tup)\n        dict\n        (tuple_to_dict_helper (cdr test_tup) (cons (cons (car test_tup) (cadr test_tup)) dict))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (let ([len (length test_tup)]\n        [dict (make-hash)])\n    (for ([i (in-range 0 (- len 1))])\n      (hash-set! dict (list-ref test_tup i) (list-ref test_tup (+ i 1))))\n    dict))\n",
    "  (define (tuple_to_dict_helper test_tup dict)\n    (if (null? test_tup)\n        dict\n        (tuple_to_dict_helper (cdr test_tup) (cons (cons (car test_tup) (cadr test_tup)) dict))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (let loop ([tup test_tup]\n             [dict '()])\n    (if (null? tup)\n        dict\n        (loop (cddr tup)\n              (cons (cons (car tup) (cadr tup)) dict)))))\n",
    "  (define (helper tup acc)\n    (if (null? tup)\n        acc\n        (helper (cddr tup) (cons (cons (car tup) (cadr tup)) acc))))\n  (reverse (helper test_tup '())))\n",
    "  (let loop ([lst test_tup] [acc '()])\n    (if (null? lst)\n        acc\n        (loop (cddr lst) (cons (cons (car lst) (cadr lst)) acc)))))\n",
    "  (define (tuple_to_dict_helper test_tup dict)\n    (if (null? test_tup)\n        dict\n        (tuple_to_dict_helper (cdr test_tup) (cons (cons (car test_tup) (cadr test_tup)) dict))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (let ([len (length test_tup)])\n    (cond\n      [(= len 0) '()]\n      [(= len 1) (cons (cons (car test_tup) '()) '())]\n      [else (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cdr (cdr test_tup))))])))\n",
    "  (let ([len (length test_tup)])\n    (if (even? len)\n        (let ([half-len (/ len 2)])\n          (for/fold ([dict '()])\n                     ([i (in-range half-len)])\n            (dict-set dict (list-ref test_tup (* i 2)) (list-ref test_tup (+ (* i 2) 1)))))\n        (error \"tuple length is not even\"))))\n",
    "  (let loop ([i 0] [result '()])\n    (if (= i (length test_tup))\n        result\n        (loop (+ i 2) (cons (cons (list-ref test_tup i) (list-ref test_tup (+ i 1))) result)))))\n",
    "  (define (helper tup acc)\n    (if (null? tup)\n        acc\n        (helper (cddr tup) (cons (cons (car tup) (cadr tup)) acc))))\n  (helper test_tup '()))\n",
    "  (let loop ([tup test_tup]\n             [acc '()])\n    (if (null? tup)\n        acc\n        (loop (cddr tup)\n              (cons (cons (car tup) (cadr tup)) acc)))))\n",
    "  (define (helper tup acc)\n    (if (empty? tup)\n        acc\n        (helper (cdr tup) (cons (cons (car tup) (cadr tup)) acc))))\n  (reverse (helper test_tup '())))\n",
    "  (define (helper tup acc)\n    (cond [(empty? tup) acc]\n          [(empty? (rest tup)) acc]\n          [else (helper (rest (rest tup)) (cons (cons (first tup) (second tup)) acc))]))\n  (reverse (helper test_tup '())))\n",
    "  (define (tuple_to_dict_helper test_tup dict)\n    (if (null? test_tup)\n        dict\n        (tuple_to_dict_helper (cdr test_tup) (cons (cons (car test_tup) (cadr test_tup)) dict))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (define (tuple_to_dict_helper test_tup dict)\n    (if (null? test_tup)\n        dict\n        (tuple_to_dict_helper (cdr test_tup) (cons (cons (car test_tup) (cadr test_tup)) dict))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (define (helper tup acc)\n    (if (empty? tup)\n        acc\n        (helper (cdr tup) (cons (cons (car tup) (cadr tup)) acc))))\n  (reverse (helper test_tup '())))\n",
    "  (define (tuple_to_dict_helper test_tup dict)\n    (if (null? test_tup)\n        dict\n        (tuple_to_dict_helper (cdr test_tup) (cons (cons (car test_tup) (cadr test_tup)) dict))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (let ([len (length test_tup)])\n    (cond\n      [(= len 0) '()]\n      [(= len 1) (cons (cons (car test_tup) '()) '())]\n      [else (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cdr (cdr test_tup))))])))\n",
    "  (let ([len (length test_tup)])\n    (cond\n      [(= len 0) '()]\n      [(= len 1) (cons (cons (car test_tup) '()) '())]\n      [else (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cdr (cdr test_tup))))])))\n",
    "  (define (tuple_to_dict_helper test_tup acc)\n    (if (null? test_tup)\n        acc\n        (tuple_to_dict_helper (cdr test_tup) (cons (cons (car test_tup) (cadr test_tup)) acc))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (define (helper tup acc)\n    (if (null? tup)\n        acc\n        (helper (cddr tup) (cons (cons (car tup) (cadr tup)) acc))))\n  (reverse (helper test_tup '())))\n",
    "  (let loop ([lst test_tup] [acc '()])\n    (if (null? lst)\n        (reverse acc)\n        (loop (cddr lst) (cons (cons (car lst) (cadr lst)) acc)))))\n",
    "  (let loop ([tup test_tup]\n             [dict '()])\n    (if (null? tup)\n        dict\n        (loop (cddr tup)\n              (cons (cons (car tup) (cadr tup)) dict)))))\n",
    "  (let ([len (length test_tup)]\n        [i 0])\n    (if (even? len)\n        (let ([dict '()])\n          (while (< i len)\n            (set! dict (cons (cons (list-ref test_tup i) (list-ref test_tup (+ i 1))) dict))\n            (set! i (+ i 2)))\n          (reverse dict))\n        (error \"Tuple length is not even\"))))\n",
    "  (define (tuple_to_dict_helper test_tup dict)\n    (if (null? test_tup)\n        dict\n        (tuple_to_dict_helper (cdr test_tup) (cons (cons (car test_tup) (cadr test_tup)) dict))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (let ([len (length test_tup)])\n    (cond\n      [(= len 0) '()]\n      [(= len 1) (cons (cons (car test_tup) '()) '())]\n      [else (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cddr test_tup)))])))\n",
    "  (define (tuple_to_dict_helper test_tup dict)\n    (if (null? test_tup)\n        dict\n        (tuple_to_dict_helper (cdr test_tup) (cons (cons (car test_tup) (cadr test_tup)) dict))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (let ([len (length test_tup)])\n    (cond\n      [(zero? len) '()]\n      [(= len 1) (cons (cons (car test_tup) '()) '())]\n      [else (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cdr (cdr test_tup))))])))\n",
    "  (define (helper tup acc)\n    (if (null? tup)\n        acc\n        (helper (cdr tup) (cons (cons (car tup) (cadr tup)) acc))))\n  (reverse (helper test_tup '())))\n"
  ]
}