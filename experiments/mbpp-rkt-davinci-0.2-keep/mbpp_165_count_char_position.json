{
  "name": "mbpp_165_count_char_position",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n(define (count_char_position str1)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_165_count_char_position.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_char_position))\n    (check-equal? (candidate \"xbcefg\") 2)\n    (check-equal? (candidate \"ABcED\") 3)\n    (check-equal? (candidate \"AbgdeF\") 5)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let ([str2 (string-upcase str1)])\n    (for/fold ([count 0]) ([i (in-range (string-length str1))])\n      (if (char=? (string-ref str1 i) (string-ref str2 i))\n          (add1 count)\n          count))))\n",
    "  (let ([str2 (string-upcase str1)])\n    (let loop ([i 0] [count 0])\n      (cond\n        [(= i (string-length str2)) count]\n        [(= (string-ref str2 i) (integer->char (+ i 65))) (loop (+ i 1) (+ count 1))]\n        [else (loop (+ i 1) count)]))))\n",
    "  (let ([str2 (string-upcase str1)])\n    (let loop ([i 0] [count 0])\n      (if (= i (string-length str1))\n          count\n          (if (and (char-alphabetic? (string-ref str1 i))\n                   (= (char->integer (string-ref str1 i))\n                      (- (char->integer (string-ref str2 i))\n                         (char->integer #\\A))))\n              (loop (+ i 1) (+ count 1))\n              (loop (+ i 1) count))))))\n</code>\n",
    "  (define (count_char_position_helper str1 str2)\n    (if (or (string=? str1 \"\") (string=? str2 \"\"))\n        0\n        (if (char=? (string-ref str1 0) (string-ref str2 0))\n            (+ 1 (count_char_position_helper (substring str1 1) (substring str2 1)))\n            (count_char_position_helper (substring str1 1) (substring str2 1)))))\n  (count_char_position_helper str1 (string-upcase (string-alphabet))))\n",
    "  (let ([str2 (string-upcase str1)])\n    (for/sum ([i (in-range (string-length str2))])\n      (if (char=? (string-ref str2 i) (string-ref \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" i))\n          1\n          0))))\n",
    "  (define (count_char_position_iter str1 count)\n    (if (empty? str1)\n        count\n        (if (and (char-alphabetic? (first str1))\n                 (= (char-downcase (first str1))\n                    (+ (char-downcase #\\a)\n                       (sub1 count))))\n            (count_char_position_iter (rest str1) (+ count 1))\n            (count_char_position_iter (rest str1) count))))\n  (count_char_position_iter str1 0))\n",
    "  (let ([str2 (string-upcase str1)])\n    (let loop ([i 0] [count 0])\n      (if (= i (string-length str2))\n          count\n          (let ([char (string-ref str2 i)])\n            (if (and (&gt;= char #\\A) (&lt;= char #\\Z))\n                (if (= char (+ #\\A (- i)))\n                    (loop (+ i 1) (+ count 1))\n                    (loop (+ i 1) count))\n                (loop (+ i 1) count)))))))\n</code>\n",
    "  (let ((str2 (string-upcase str1)))\n    (let loop ((i 0) (count 0))\n      (if (&lt; i (string-length str1))\n          (let ((char1 (string-ref str1 i))\n                (char2 (string-ref str2 i)))\n            (if (= char1 char2)\n                (loop (+ i 1) (+ count 1))\n                (loop (+ i 1) count)))\n          count))))\n",
    "  (define (count_char_position_helper str1 str2)\n    (cond\n      [(empty? str1) 0]\n      [(empty? str2) 0]\n      [else\n       (+ (if (char=? (first str1) (first str2)) 1 0)\n          (count_char_position_helper (rest str1) (rest str2)))]))\n  (count_char_position_helper (string-upcase str1) (string-upcase \"abcdefghijklmnopqrstuvwxyz\")))\n",
    "  (define (count_char_position_helper str1 i)\n    (if (= i (string-length str1))\n        0\n        (+ (if (= (char-alphabetic? (string-ref str1 i))\n                 (char-alphabetic? (string-ref (string-downcase str1) i)))\n               1\n               0)\n           (count_char_position_helper str1 (+ i 1)))))\n  (count_char_position_helper str1 0))\n",
    "  (let ((str2 (string-upcase str1)))\n    (let loop ((i 0) (count 0))\n      (if (= i (string-length str1))\n          count\n          (if (char=? (string-ref str1 i) (string-ref str2 i))\n              (loop (+ i 1) (+ count 1))\n              (loop (+ i 1) count))))))\n",
    "  (let loop ([str str1] [count 0] [i 0])\n    (if (string=? str \"\")\n        count\n        (let ([char (string-ref str 0)])\n          (if (and (char-alphabetic? char)\n                   (= (char-downcase char) (+ (char-downcase #\\a) i)))\n              (loop (substring str 1) (+ count 1) (+ i 1))\n              (loop (substring str 1) count (+ i 1)))))))\n",
    "  (define (count_char_position_iter str1 index)\n    (if (equal? index (string-length str1))\n        0\n        (+ (if (equal? (char-upcase (string-ref str1 index)) (char-upcase (integer->char (+ index 97))))\n               1\n               0)\n           (count_char_position_iter str1 (+ index 1)))))\n  (count_char_position_iter str1 0))\n",
    "  (let ((str2 (string-upcase str1)))\n    (let loop ((i 0) (count 0))\n      (if (= i (string-length str2))\n          count\n          (if (char=? (string-ref str2 i) (integer->char (+ i 65)))\n              (loop (+ i 1) (+ count 1))\n              (loop (+ i 1) count))))))\n",
    "  (define (char-position c)\n    (let ([pos (string-index (char->string c) \"abcdefghijklmnopqrstuvwxyz\")])\n      (if (not pos)\n          0\n          (+ 1 pos))))\n  (define (count-char-position-iter str count)\n    (if (string-empty? str)\n        count\n        (count-char-position-iter (substring str 1)\n                                  (+ count (char-position (string-ref str 0))))))\n  (count-char-position-iter (string-downcase str1) 0))\n",
    "  (let ((str2 (string-downcase str1)))\n    (let loop ((i 0) (count 0))\n      (if (= i (string-length str2))\n          count\n          (if (char=? (string-ref str2 i) (integer->char (+ i 97)))\n              (loop (+ i 1) (+ count 1))\n              (loop (+ i 1) count))))))\n",
    "  (let ([str2 (string-upcase str1)])\n    (for/fold ([count 0]) ([i (in-range (string-length str1))])\n      (if (and (char-alphabetic? (string-ref str1 i))\n               (= (char-&gt;integer (string-ref str1 i))\n                  (- (char-&gt;integer (string-ref str2 i))\n                     (char-&gt;integer #\\A))))\n          (+ count 1)\n          count))))\n",
    "  (let loop ([str str1] [count 0] [i 0])\n    (if (string=? str \"\")\n        count\n        (let ([char (string-ref str 0)])\n          (if (and (char-alphabetic? char)\n                   (= (char-downcase char) (+ (char-downcase #\\a) i)))\n              (loop (substring str 1) (+ count 1) (+ i 1))\n              (loop (substring str 1) count (+ i 1)))))))\n",
    "  (let ([str2 (string-upcase str1)])\n    (for/fold ([count 0]) ([i (in-range (string-length str1))])\n      (if (char=? (string-ref str1 i) (string-ref str2 i))\n          (+ count 1)\n          count))))\n",
    "  (let ([str2 (string-upcase str1)])\n    (for/fold ([count 0]) ([i (in-range (string-length str1))])\n      (if (char=? (string-ref str1 i) (string-ref str2 i))\n          (add1 count)\n          count))))\n"
  ]
}