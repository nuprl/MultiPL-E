{
  "name": "mbpp_783_rgb_to_hsv",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n(define (rgb_to_hsv r g b)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_783_rgb_to_hsv.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rgb_to_hsv))\n    (check-equal? (candidate 255 255 255) (list 0 0.0 100.0))\n    (check-equal? (candidate 0 215 0) (list 120.0 100.0 84.31372549019608))\n    (check-equal? (candidate 10 215 110) (list 149.26829268292684 95.34883720930233 84.31372549019608))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (min3 a b c)\n    (if (&lt; a b)\n        (if (&lt; a c)\n            a\n            c)\n        (if (&lt; b c)\n            b\n            c)))\n  (define (max3 a b c)\n    (if (&gt; a b)\n        (if (&gt; a c)\n            a\n            c)\n        (if (&gt; b c)\n            b\n            c)))\n  (define (delta a b c)\n    (- (max3 a b c) (min3 a b c)))\n  (define (hue a b c)\n    (cond\n      [(= c (max3 a b c)) (if (= a b) 0 (/ (* 60 (/ (- b g) (delta a b c))) 6))]\n      [(= b (max3 a b c)) (/ (* 60 (/ (- g r) (delta a b c))) 6)]\n      [(= a (max3 a b c)) (/ (* 60 (/ (- r g) (delta a b c))) 6)]))\n  (define (saturation a b c)\n    (if (= c 0) 0 (/ (delta a b c) c)))\n  (define (value a b c)\n    c)\n  (list (hue r g b) (saturation r g b) (value r g b)))\n",
    "  (define (min3 a b c)\n    (if (&lt; a b)\n        (if (&lt; a c) a c)\n        (if (&lt; b c) b c)))\n  (define (max3 a b c)\n    (if (&gt; a b)\n        (if (&gt; a c) a c)\n        (if (&gt; b c) b c)))\n  (define (delta a b c)\n    (- (max3 a b c) (min3 a b c)))\n  (define (hue a b c)\n    (cond\n      [(= c (max3 a b c)) (/ (* 60 (/ (- b (min3 a b c)) (delta a b c))) 360)]\n      [(= b (max3 a b c)) (/ (* 60 (- 4 (/ (- c (min3 a b c)) (delta a b c)))) 360)]\n      [(= a (max3 a b c)) (/ (* 60 (- 2 (/ (- b (min3 a b c)) (delta a b c)))) 360)]))\n  (define (saturation a b c)\n    (if (= (max3 a b c) 0) 0 (/ (delta a b c) (max3 a b c))))\n  (define (value a b c)\n    (max3 a b c))\n  (list (hue r g b) (saturation r g b) (value r g b)))\n",
    "  (define (max a b c)\n    (cond [(> a b) (max a c)]\n          [(> b c) b]\n          [else c]))\n  (define (min a b c)\n    (cond [(< a b) (min a c)]\n          [(< b c) b]\n          [else c]))\n  (define (delta a b c)\n    (- (max a b c) (min a b c)))\n  (define (hue a b c)\n    (cond [(= c (max a b c)) 0]\n          [(= c (min a b c)) 0]\n          [(= b (max a b c)) (/ (* 60 (- g r)) (delta a b c))]\n          [(= g (max a b c)) (+ (/ (* 60 (- b r)) (delta a b c)) 120)]\n          [(= r (max a b c)) (+ (/ (* 60 (- g b)) (delta a b c)) 240)]))\n  (define (sat a b c)\n    (cond [(= (max a b c) 0) 0]\n          [else (/ (delta a b c) (max a b c))]))\n  (define (val a b c)\n    (max a b c))\n  (list (hue r g b) (sat r g b) (val r g b)))\n",
    "  (let* ([r (/ r 255.0)]\n         [g (/ g 255.0)]\n         [b (/ b 255.0)]\n         [cmax (max r g b)]\n         [cmin (min r g b)]\n         [delta (- cmax cmin)])\n    (cond\n      [(= cmax cmin) (list 0 0 cmax)]\n      [(= cmax r) (list (/ (- g b) delta) 1 cmax)]\n      [(= cmax g) (list (/ (- b r) delta) 1 cmax)]\n      [(= cmax b) (list (/ (- r g) delta) 1 cmax)])))\n",
    "  (define (min3 a b c)\n    (if (&lt; a b)\n        (if (&lt; a c) a c)\n        (if (&lt; b c) b c)))\n  (define (max3 a b c)\n    (if (&gt; a b)\n        (if (&gt; a c) a c)\n        (if (&gt; b c) b c)))\n  (define (rgb_to_h r g b)\n    (define (rgb_to_h_helper r g b)\n      (cond ((= r g) (/ (* 60 r) b))\n            ((= g b) (+ (* 60 g) 60))\n            ((= b r) (+ (* 60 b) 120))\n            ((= r g) (+ (* 60 r) 180))\n            ((= g b) (+ (* 60 g) 240))\n            ((= b r) (+ (* 60 b) 300))))\n    (if (&lt;= r g b)\n        (rgb_to_h_helper r g b)\n        (rgb_to_h_helper b g r)))\n  (define (rgb_to_s r g b)\n    (define (rgb_to_s_helper r g b)\n      (if (&lt;= r g b)\n          (/ (- b (min3 r g b)) (- (max3 r g b) (min3 r g b)))\n          (/ (- r (min3 r g b)) (- (max3 r g b) (min3 r g b)))))\n    (if (= (max3 r g b) 0)\n        0\n        (rgb_to_s_helper r g b)))\n  (define (rgb_to_v r g b)\n    (max3 r g b))\n  (list (rgb_to_h r g b) (rgb_to_s r g b) (rgb_to_v r g b)))\n",
    "  (define (min3 a b c)\n    (if (&lt; a b)\n        (if (&lt; a c)\n            a\n            c)\n        (if (&lt; b c)\n            b\n            c)))\n  (define (max3 a b c)\n    (if (&gt; a b)\n        (if (&gt; a c)\n            a\n            c)\n        (if (&gt; b c)\n            b\n            c)))\n  (define (delta a b c)\n    (- (max3 a b c) (min3 a b c)))\n  (define (hue a b c)\n    (cond\n      [(= a b) 0]\n      [(= a c) (/ (* 60 (/ (- b c) (delta a b c))) 6)]\n      [(= a b) (/ (* 60 (/ (- c b) (delta a b c))) 6)]\n      [(= a b) (/ (* 60 (/ (- b c) (delta a b c))) 6)]\n      [(= a b) (/ (* 60 (/ (- c b) (delta a b c))) 6)]\n      [(= a b) (/ (* 60 (/ (- b c) (delta a b c))) 6)]\n      [(= a b) (/ (* 60 (/ (- c b) (delta a b c))) 6)]\n      [(= a b) (/ (* 60 (/ (- b c) (delta a b c))) 6)]\n      [(= a b) (/ (* 60 (/ (- c b) (delta a b c))) 6)]\n      [(= a b) (/ (* 60 (/ (- b c) (delta a b c))) 6)]\n      [(= a b) (/ (* 60 (/ (- c b) (delta a b c))) 6)]\n      [(= a b) (/ (* 60 (/ (- b c) (delta a b c))) 6)]\n      [(= a b) (/ (* 60 (/ (- c b) (delta a b c))) 6)]\n      [(= a b) (/ (* 60 (/ (- b c) (delta a b c))) 6)]\n      [(= a b) (/ (* 60 (/ (- c b) (delta a b c))) 6)]\n      [(= a b) (/ (* 60 (/ (- b c",
    "  (define (min-max a b c)\n    (let ([min (min a b c)]\n          [max (max a b c)])\n      (values min max)))\n  (define (rgb-to-hsv-helper r g b)\n    (let ([min-max (min-max r g b)])\n      (let-values ([(min max) min-max])\n        (let ([delta (- max min)])\n          (let ([h (cond [(= max r) (/ (* 60.0 (- g b)) delta)]\n                         [(= max g) (+ (/ (* 60.0 (- b r)) delta) 120)]\n                         [(= max b) (+ (/ (* 60.0 (- r g)) delta) 240)])]\n                [s (if (= max 0) 0 (/ delta max))]\n                [v (/ max 255.0)])\n            (values h s v))))))\n  (rgb-to-hsv-helper r g b))\n",
    "  (define (min3 a b c)\n    (if (&lt; a b)\n        (if (&lt; a c) a c)\n        (if (&lt; b c) b c)))\n  (define (max3 a b c)\n    (if (&gt; a b)\n        (if (&gt; a c) a c)\n        (if (&gt; b c) b c)))\n  (define (delta a b c)\n    (- (max3 a b c) (min3 a b c)))\n  (define (hue a b c)\n    (cond\n      [(= a b) 0]\n      [(= a c) (/ (* 60 (/ (- b c) (delta a b c))) 6)]\n      [(= a b) (/ (* 60 (/ (- c b) (delta a b c))) 6)]\n      [(= a b) (/ (* 60 (/ (- b c) (delta a b c))) 6)]\n      [(= a b) (/ (* 60 (/ (- c b) (delta a b c))) 6)]\n      [(= a b) (/ (* 60 (/ (- b c) (delta a b c))) 6)]\n      [(= a b) (/ (* 60 (/ (- c b) (delta a b c))) 6)]\n      [(= a b) (/ (* 60 (/ (- b c) (delta a b c))) 6)]\n      [(= a b) (/ (* 60 (/ (- c b) (delta a b c))) 6)]\n      [(= a b) (/ (* 60 (/ (- b c) (delta a b c))) 6)]\n      [(= a b) (/ (* 60 (/ (- c b) (delta a b c))) 6)]\n      [(= a b) (/ (* 60 (/ (- b c) (delta a b c))) 6)]\n      [(= a b) (/ (* 60 (/ (- c b) (delta a b c))) 6)]\n      [(= a b) (/ (* 60 (/ (- b c) (delta a b c))) 6)]\n      [(= a b) (/ (* 60 (/ (- c b) (delta a b c))) 6)]\n      [(= a b) (/ (* 60 (/ (- b c) (delta a b c))) 6)]\n      [(= a b",
    "  (define (min3 a b c)\n    (if (&lt; a b)\n        (if (&lt; a c) a c)\n        (if (&lt; b c) b c)))\n  (define (max3 a b c)\n    (if (&gt; a b)\n        (if (&gt; a c) a c)\n        (if (&gt; b c) b c)))\n  (define (delta a b c)\n    (- (max3 a b c) (min3 a b c)))\n  (define (hue a b c)\n    (cond\n      [(= c a) (/ (* 60 (/ (- b c) (delta a b c))) 6)]\n      [(= c b) (/ (* 60 (/ (- c a) (delta a b c))) 6)]\n      [(= c a) (/ (* 60 (/ (- c b) (delta a b c))) 6)]))\n  (define (saturation a b c)\n    (if (= c 0) 0 (/ (* 100 (delta a b c)) c)))\n  (define (value a b c)\n    (/ (* 100 c) 255))\n  (list (hue r g b) (saturation r g b) (value r g b)))\n</code>\n",
    "  (define max (max r g b))\n  (define min (min r g b))\n  (define diff (- max min))\n  (define h (cond [(= max r) (/ (* 60 (- g b)) diff)]\n                  [(= max g) (+ (/ (* 60 (- b r)) diff) 120)]\n                  [(= max b) (+ (/ (* 60 (- r g)) diff) 240)]))\n  (define s (if (= max 0) 0 (/ (* 100 diff) max)))\n  (define v (/ (* 100 max) 255)))\n",
    "  (define (min-3 a b c)\n    (if (&lt; a b)\n        (if (&lt; a c) a c)\n        (if (&lt; b c) b c)))\n  (define (max-3 a b c)\n    (if (&gt; a b)\n        (if (&gt; a c) a c)\n        (if (&gt; b c) b c)))\n  (define (delta-3 a b c)\n    (- (max-3 a b c) (min-3 a b c)))\n  (define (hue-calc r g b)\n    (cond\n      [(= r g) (/ (* 60 (/ (- b r) (delta-3 r g b))) 6)]\n      [(= r b) (/ (* 60 (/ (- g r) (delta-3 r g b))) 6)]\n      [(= g b) (/ (* 60 (/ (- r g) (delta-3 r g b))) 6)]\n      [else (/ (* 60 (/ (- r g) (delta-3 r g b))) 6)]))\n  (define (sat-calc r g b)\n    (cond\n      [(= (max-3 r g b) 0) 0]\n      [else (/ (delta-3 r g b) (max-3 r g b))]))\n  (define (val-calc r g b)\n    (max-3 r g b))\n  (list (hue-calc r g b) (sat-calc r g b) (val-calc r g b)))\n",
    "  (define (max a b c)\n    (cond\n      [(> a b) (if (> a c) a c)]\n      [(> b c) b]\n      [else c]))\n  (define (min a b c)\n    (cond\n      [(< a b) (if (< a c) a c)]\n      [(< b c) b]\n      [else c]))\n  (define (diff a b)\n    (- a b))\n  (define (hue r g b)\n    (cond\n      [(= r g) (/ (* 60 (/ (diff b r) (diff r (min r g b)))) 6)]\n      [(= r b) (/ (* 60 (/ (diff g r) (diff r (min r g b)))) 6)]\n      [(= g b) (/ (* 60 (/ (diff r g) (diff g (min r g b)))) 6)]\n      [else (/ (* 60 (/ (diff b g) (diff g (min r g b)))) 6)]))\n  (define (saturation r g b)\n    (cond\n      [(= (max r g b) 0) 0]\n      [else (/ (diff (max r g b) (min r g b)) (max r g b))]))\n  (define (value r g b)\n    (max r g b))\n  (list (hue r g b) (saturation r g b) (value r g b)))\n",
    "  (let* ([r (/ r 255.0)]\n         [g (/ g 255.0)]\n         [b (/ b 255.0)]\n         [cmax (max r g b)]\n         [cmin (min r g b)]\n         [delta (- cmax cmin)])\n    (cond\n      [(= cmax cmin)\n       (list 0 0 (/ cmax 255.0))]\n      [(= cmax r)\n       (list (/ (- g b) delta)\n             (/ (* 6 (- cmax g)) delta)\n             (/ cmax 255.0))]\n      [(= cmax g)\n       (list (/ (- b r) delta)\n             (/ (* 6 (- cmax b)) delta)\n             (/ cmax 255.0))]\n      [(= cmax b)\n       (list (/ (- r g) delta)\n             (/ (* 6 (- cmax r)) delta)\n             (/ cmax 255.0))])))\n",
    "  (define (min3 a b c)\n    (if (&lt; a b)\n        (if (&lt; a c) a c)\n        (if (&lt; b c) b c)))\n  (define (max3 a b c)\n    (if (&gt; a b)\n        (if (&gt; a c) a c)\n        (if (&gt; b c) b c)))\n  (define (delta a b c)\n    (- (max3 a b c) (min3 a b c)))\n  (define (hue a b c)\n    (cond [(= c (max3 a b c)) (/ (* 60 (/ (- b (min3 a b c)) (delta a b c))) 360))\n          [(= c (min3 a b c)) 0]\n          [(= c b) (/ (* 60 (/ (- (max3 a b c) r) (delta a b c))) 360))\n          [(= c r) (/ (* 60 (/ (- g (min3 a b c)) (delta a b c))) 360))\n          [(= c g) (/ (* 60 (/ (- (max3 a b c) b) (delta a b c))) 360))]))\n  (define (sat a b c)\n    (if (= c 0) 0 (/ (* 100 (delta a b c)) c)))\n  (define (val a b c)\n    (/ (* 100 (max3 a b c)) 255)))\n</code>\n",
    "  (define h 0)\n  (define s 0)\n  (define v 0)\n  (define cmax (max r g b))\n  (define cmin (min r g b))\n  (define delta (- cmax cmin))\n  (if (= cmax r)\n      (set! h (/ (* 60 (- g b)) delta))\n      (if (= cmax g)\n          (set! h (+ 120 (/ (* 60 (- b r)) delta)))\n          (set! h (+ 240 (/ (* 60 (- r g)) delta)))))\n  (if (&lt; h 0)\n      (set! h (+ h 360)))\n  (if (= cmax 0)\n      (set! s 0)\n      (set! s (/ (* 100 delta) cmax)))\n  (set! v (/ (* 100 cmax) 255))\n  (list h s v))\n",
    "  (define (max a b c)\n    (cond\n      [(> a b) (max a c)]\n      [else (max b c)]))\n  (define (min a b c)\n    (cond\n      [(< a b) (min a c)]\n      [else (min b c)]))\n  (define (hue r g b)\n    (cond\n      [(= r g) (/ (* 60 (/ (- b r) (- max r g b))) 6)]\n      [(= r b) (/ (* 60 (/ (- g r) (- max r g b))) 6)]\n      [(= g b) (/ (* 60 (/ (- r g) (- max r g b))) 6)]\n      [(= r max r g b) (/ (* 60 (/ (- g r) (- max r g b))) 6)]\n      [(= g max r g b) (/ (* 60 (/ (- b g) (- max r g b))) 6)]\n      [(= b max r g b) (/ (* 60 (/ (- r b) (- max r g b))) 6)]))\n  (define (saturation r g b)\n    (cond\n      [(= max r g b) 0]\n      [else (/ (- max r g b) max r g b)]))\n  (define (value r g b)\n    (/ max r g b 255))\n  (list (hue r g b) (saturation r g b) (value r g b)))\n",
    "  (define (max_of_three a b c)\n    (cond\n      [(> a b) (max_of_two a c)]\n      [(> b c) (max_of_two b c)]\n      [else (max_of_two a b)]))\n  (define (min_of_three a b c)\n    (cond\n      [(< a b) (min_of_two a c)]\n      [(< b c) (min_of_two b c)]\n      [else (min_of_two a b)]))\n  (define (max_of_two a b)\n    (if (> a b) a b))\n  (define (min_of_two a b)\n    (if (< a b) a b))\n  (define (calc_hue r g b)\n    (cond\n      [(= b r) (/ (* 60 (- g b)) (- r g b))]\n      [(= b g) (+ (* 60 (- b r)) 120)]\n      [(= b r) (+ (* 60 (- r g)) 240)]))\n  (define (calc_sat r g b)\n    (/ (- (max_of_three r g b) (min_of_three r g b)) (max_of_three r g b)))\n  (define (calc_val r g b)\n    (max_of_three r g b))\n  (list (calc_hue r g b) (calc_sat r g b) (calc_val r g b)))\n",
    "  (define (max-of-three a b c)\n    (cond\n      [(> a b) (max-of-two a c)]\n      [(> b c) b]\n      [else c]))\n  (define (min-of-three a b c)\n    (cond\n      [(< a b) (min-of-two a c)]\n      [(< b c) b]\n      [else c]))\n  (define (max-of-two a b)\n    (if (> a b) a b))\n  (define (min-of-two a b)\n    (if (< a b) a b))\n  (define (hue-calc r g b)\n    (define (hue-calc-helper r g b)\n      (cond\n        [(= b r) (/ (* 60.0 (/ (- g b) (- r b))) 6.0)]\n        [(= b g) (/ (* 60.0 (/ (- b r) (- r b))) 2.0)]\n        [(= b r) (/ (* 60.0 (/ (- r g) (- r b))) 4.0)]\n        [else (/ (* 60.0 (/ (- g b) (- r b))) 6.0)]))\n    (define (hue-calc-helper-2 h)\n      (cond\n        [(< h 0) (+ h 360.0)]\n        [(> h 360) (- h 360.0)]\n        [else h]))\n    (hue-calc-helper-2 (hue-calc-helper r g b)))\n  (define (saturation-calc r g b)\n    (define (saturation-calc-helper cmax cmin)\n      (if (= cmax 0) 0 (/ (- cmax cmin) cmax)))\n    (saturation-calc-helper (max-of-three r g b) (min-of-three r g b)))\n  (define (value-calc r g b)\n    (max-of-three r g b))\n  (list (hue-calc r g b) (saturation-calc r g b) (value-calc r g b)))\n",
    "  (define (min3 a b c)\n    (if (&lt; a b)\n        (if (&lt; a c) a c)\n        (if (&lt; b c) b c)))\n  (define (max3 a b c)\n    (if (&gt; a b)\n        (if (&gt; a c) a c)\n        (if (&gt; b c) b c)))\n  (define (hue r g b)\n    (cond\n      [(= r g b) 0]\n      [(= r g) (/ (* 60 (/ (- b g) (- r g))) 2)]\n      [(= r b) (+ 60 (/ (* 60 (/ (- g b) (- r b))) 2))]\n      [(= g b) (+ 120 (/ (* 60 (/ (- r g) (- g b))) 2))]\n      [(= r g) (+ 180 (/ (* 60 (/ (- b g) (- r g))) 2))]\n      [(= r b) (+ 240 (/ (* 60 (/ (- g b) (- r b))) 2))]\n      [(= g b) (+ 300 (/ (* 60 (/ (- r g) (- g b))) 2))]))\n  (define (sat r g b)\n    (if (= (max3 r g b) 0) 0 (/ (- (max3 r g b) (min3 r g b)) (max3 r g b))))\n  (define (val r g b)\n    (/ (max3 r g b) 255))\n  (list (hue r g b) (sat r g b) (val r g b)))\n",
    "  (define cmax (max r g b))\n  (define cmin (min r g b))\n  (define delta (- cmax cmin))\n  (define h (cond\n             [(= cmax r) (/ (* 60 (- g b)) delta)]\n             [(= cmax g) (+ 120 (/ (* 60 (- b r)) delta))]\n             [(= cmax b) (+ 240 (/ (* 60 (- r g)) delta))]))\n  (define s (if (= cmax 0) 0 (/ delta cmax)))\n  (define v cmax)\n  (list h s v))\n"
  ]
}