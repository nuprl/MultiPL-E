{
  "name": "mbpp_424_extract_rear",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to extract only the rear index element of each string in the given tuple.\n(define (extract_rear test_tuple)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_424_extract_rear.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_rear))\n    (check-equal? (candidate (list \"Mers\" \"for\" \"Vers\")) (list \"s\" \"r\" \"s\"))\n    (check-equal? (candidate (list \"Avenge\" \"for\" \"People\")) (list \"e\" \"r\" \"e\"))\n    (check-equal? (candidate (list \"Gotta\" \"get\" \"go\")) (list \"a\" \"t\" \"o\"))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (map (lambda (x) (string-ref x (- (string-length x) 1))) test_tuple))\n",
    "  (map (lambda (x) (string-ref x (sub1 (string-length x)))) test_tuple))\n",
    "  (map (lambda (x) (string-ref x (- (string-length x) 1))) test_tuple))\n",
    "  (map (lambda (x) (string-ref x (sub1 (string-length x)))) test_tuple))\n",
    "  (map (lambda (x) (string-ref x (sub1 (string-length x)))) test_tuple))\n",
    "  (map (lambda (x) (string-ref x (- (string-length x) 1))) test_tuple))\n",
    "  (map (lambda (x) (string-ref x (sub1 (string-length x)))) test_tuple))\n",
    "  (map (lambda (x) (string-ref x (sub1 (string-length x)))) test_tuple))\n",
    "  (map (lambda (x) (string-ref x (- (string-length x) 1))) test_tuple))\n",
    "  (map (lambda (x) (string-ref x (sub1 (string-length x)))) test_tuple))\n",
    "  (map (lambda (x) (string-ref x (- (string-length x) 1))) test_tuple))\n",
    "  (map (lambda (x) (string-ref x (- (string-length x) 1))) test_tuple))\n",
    "  (map (lambda (x) (string-ref x (- (string-length x) 1))) test_tuple))\n",
    "  (map (lambda (x) (string-ref x (- (string-length x) 1))) test_tuple)\n)\n",
    "  (map (lambda (x) (string-ref x (sub1 (string-length x)))) test_tuple))\n",
    "  (map (lambda (x) (string-ref x (sub1 (string-length x)))) test_tuple))\n",
    "  (map (lambda (x) (string-ref x (- (string-length x) 1))) test_tuple))\n",
    "  (map (lambda (x) (string-ref x (- (string-length x) 1))) test_tuple))\n",
    "  (map (lambda (x) (string-ref x (- (string-length x) 1))) test_tuple))\n",
    "  (map (lambda (x) (string-ref x (- (string-length x) 1))) test_tuple))\n"
  ]
}