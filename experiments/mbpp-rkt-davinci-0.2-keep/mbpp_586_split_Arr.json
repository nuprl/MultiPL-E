{
  "name": "mbpp_586_split_Arr",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to split a list at the nth eelment and add the first part to the end.\n(define (split_Arr l n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_586_split_Arr.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split_Arr))\n    (check-equal? (candidate (list 12 10 5 6 52 36) 2) (list 5 6 52 36 12 10))\n    (check-equal? (candidate (list 1 2 3 4) 1) (list 2 3 4 1))\n    (check-equal? (candidate (list 0 1 2 3 4 5 6 7) 3) (list 3 4 5 6 7 0 1 2))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (split_Arr_helper l n acc)\n    (if (= n 0)\n        (append (reverse acc) l)\n        (split_Arr_helper (cdr l) (- n 1) (cons (car l) acc))))\n  (split_Arr_helper l n '()))\n",
    "  (if (equal? n 0)\n      (append (cdr l) (list (car l)))\n      (append (cdr l) (list (car l)) (split_Arr (cdr l) (- n 1)))))\n",
    "  (if (zero? n)\n      (append (cdr l) (list (car l)))\n      (append (cdr l) (list (car l)))))\n",
    "  (if (= n 0)\n      (append (cdr l) (list (car l)))\n      (append (cdr l) (list (car l)) (split_Arr (cdr l) (- n 1)))))\n",
    "  (append (cdr (drop l n)) (take l n)))\n",
    "  (if (zero? n)\n      (append (cdr l) (list (car l)))\n      (cons (car l) (split_Arr (cdr l) (- n 1)))))\n",
    "  (define (split_Arr_helper l n acc)\n    (if (zero? n)\n        (append acc (cdr l))\n        (split_Arr_helper (cdr l) (- n 1) (append acc (list (car l))))))\n  (split_Arr_helper l n '()))\n",
    "  (cond\n    [(empty? l) empty]\n    [(= n 0) (append (rest l) (list (first l)))]\n    [else (cons (first l) (split_Arr (rest l) (- n 1)))]))\n",
    "  (cond\n    [(= n 0) (append (cdr l) (list (car l)))]\n    [else (cons (car l) (split_Arr (cdr l) (- n 1)))]))\n",
    "  (if (empty? l)\n      '()\n      (if (= n 0)\n          (append (rest l) (list (first l)))\n          (cons (first l) (split_Arr (rest l) (- n 1))))))\n",
    "  (if (zero? n)\n      (append (cdr l) (list (car l)))\n      (append (cdr l) (list (car l)))))\n",
    "  (define (split_Arr_h l n)\n    (if (zero? n)\n        (list (reverse l))\n        (split_Arr_h (cdr l) (- n 1))))\n  (append (split_Arr_h l n) (list (reverse (split_Arr_h l n)))))\n",
    "  (if (zero? n)\n      (append (cdr l) (list (car l)))\n      (cons (car l) (split_Arr (cdr l) (- n 1)))))\n",
    "  (if (null? l)\n      '()\n      (if (= n 1)\n          (append (cdr l) (list (car l)))\n          (cons (car l) (split_Arr (cdr l) (- n 1))))))\n",
    "  (append (cdr (cdr (cdr (cdr (cdr l))))) (list (car (cdr (cdr (cdr (cdr l)))))) (list (car (cdr (cdr (cdr l))))) (list (car (cdr (cdr l)))) (list (car (cdr l)))))\n",
    "  (append (rest (drop l n)) (take l n)))\n",
    "  (if (empty? l)\n      '()\n      (if (= n 0)\n          (append (cdr l) (list (car l)))\n          (cons (car l) (split_Arr (cdr l) (- n 1))))))\n",
    "  (if (eq? n 0)\n      (append (cdr l) (list (car l)))\n      (append (cdr l) (list (car l)))))\n",
    "  (append (cdr (drop l n)) (take l n)))\n",
    "  (if (zero? n)\n      (append (cdr l) (list (car l)))\n      (cons (car l) (split_Arr (cdr l) (- n 1)))))\n"
  ]
}