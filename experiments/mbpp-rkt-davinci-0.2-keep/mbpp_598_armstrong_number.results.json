{
  "name": "mbpp_598_armstrong_number",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_598_armstrong_number.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (armstrong-helper number sum)\n    (if (= number 0)\n        (= sum number)\n        (armstrong-helper (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (remainder number 10))))))\n  (armstrong-helper number 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp77kxi8tb.rkt:16:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (power number power)\n    (if (= power 1)\n        number\n        (* number (power number (- power 1)))))\n  (define (sum-of-digits number)\n    (if (= number 0)\n        0\n        (+ (modulo number 10) (sum-of-digits (quotient number 10)))))\n  (define (armstrong-number? number)\n    (= number (sum-of-digits (power number (length (number->string number))))))\n  (armstrong-number? number))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp026vj6mw.rkt:22:4\n\nlength: contract violation\n  expected: list?\n  given: \"153\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp026vj6mw.rkt:23:4\n\nlength: contract violation\n  expected: list?\n  given: \"259\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp026vj6mw.rkt:24:4\n\nlength: contract violation\n  expected: list?\n  given: \"4458\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (armstrong_number_iter number sum)\n    (cond ((= number 0) (= sum number))\n          (else (armstrong_number_iter (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (expt 10 (quotient number 10))))))))\n  (armstrong_number_iter number 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_cn94j51.rkt:15:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-to-power-of-number-of-digits number)\n    (define (sum-of-digits-to-power-of-number-of-digits-iter number sum)\n      (cond ((zero? number) sum)\n            (else (sum-of-digits-to-power-of-number-of-digits-iter (quotient number 10)\n                                                                   (+ sum (expt (remainder number 10)\n                                                                                (number-of-digits number)))))))\n    (sum-of-digits-to-power-of-number-of-digits-iter number 0))\n  (= number (sum-of-digits-to-power-of-number-of-digits number)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "/tmp/tmpnv04so_5.rkt:10:81: number-of-digits: unbound identifier\n  in: number-of-digits\n  location...:\n   /tmp/tmpnv04so_5.rkt:10:81\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (armstrong_number_iter number sum)\n    (if (&lt; number 10)\n        (= number sum)\n        (armstrong_number_iter (quotient number 10) (+ (* (remainder number 10) (remainder number 10) (remainder number 10)) sum))))\n  (armstrong_number_iter number 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "/tmp/tmp9yx499rh.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 11\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (let ([digits (string->list (number->string number))])\n    (equal? number (apply + (map (lambda (digit) (expt (string->number (char->string digit)) (length digits))) digits)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "/tmp/tmps87dz7hb.rkt:6:72: char->string: unbound identifier\n  in: char->string\n  location...:\n   /tmp/tmps87dz7hb.rkt:6:72\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-to-the-power-of-3 number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-to-the-power-of-3 (quotient number 10)))))\n  (if (= number (sum-of-digits-to-the-power-of-3 number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-cubes-of-digits number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-cubes-of-digits (quotient number 10)))))\n  (= number (sum-of-cubes-of-digits number)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum_of_digits_cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum_of_digits_cubes (quotient number 10)))))\n  (if (= number (sum_of_digits_cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (= number (sum-of-digits-cubes number)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123119,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubed number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubed (quotient number 10)))))\n  (if (= (sum-of-digits-cubed number) number)\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (armstrong_number_iter number sum)\n    (if (zero? number)\n        (= number sum)\n        (armstrong_number_iter (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (remainder number 10))))))\n  (armstrong_number_iter number 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123117,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbtr51y4_.rkt:16:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-to-the-power-of-3 number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-to-the-power-of-3 (quotient number 10)))))\n  (if (= number (sum-of-digits-to-the-power-of-3 number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123119,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-raised-to-power number power)\n    (cond ((= number 0) 0)\n          (else (+ (expt (remainder number 10) power)\n                   (sum-of-digits-raised-to-power (quotient number 10) power)))))\n  (define (number-of-digits number)\n    (cond ((= number 0) 0)\n          (else (+ 1 (number-of-digits (quotient number 10))))))\n  (= number (sum-of-digits-raised-to-power number (number-of-digits number))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123119,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubed number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubed (quotient number 10)))))\n  (if (= (sum-of-digits-cubed number) number)\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= (sum-of-digits-cubes number) number)\n      \"Armstrong\"\n      \"Not Armstrong\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123119,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4rqphzq5.rkt:19:4\nactual:     \"Armstrong\"\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4rqphzq5.rkt:20:4\nactual:     \"Not Armstrong\"\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4rqphzq5.rkt:21:4\nactual:     \"Not Armstrong\"\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-to-power-of-number-of-digits number)\n    (define (sum-of-digits-to-power-of-number-of-digits-iter number sum)\n      (if (zero? number)\n          sum\n          (sum-of-digits-to-power-of-number-of-digits-iter (quotient number 10)\n                                                           (+ sum (expt (remainder number 10)\n                                                                        (number-of-digits number))))))\n    (sum-of-digits-to-power-of-number-of-digits-iter number 0))\n  (define (number-of-digits number)\n    (define (number-of-digits-iter number count)\n      (if (zero? number)\n          count\n          (number-of-digits-iter (quotient number 10)\n                                 (+ count 1))))\n    (number-of-digits-iter number 0))\n  (= number (sum-of-digits-to-power-of-number-of-digits number)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123119,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpozmqex70.rkt:27:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (armstrong_number_iter number sum)\n    (if (zero? number)\n        (if (= sum number)\n            #t\n            #f)\n        (armstrong_number_iter (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (remainder number 10))))))\n  (armstrong_number_iter number 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123118,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprug5ld4m.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (power x y)\n    (if (= y 0)\n        1\n        (* x (power x (- y 1)))))\n  (define (sum-of-digits number)\n    (if (= number 0)\n        0\n        (+ (remainder number 10) (sum-of-digits (quotient number 10)))))\n  (if (= number (power (sum-of-digits number) (number-of-digits number)))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123120,
      "stdout": "",
      "stderr": "/tmp/tmptno2g3v6.rkt:13:47: number-of-digits: unbound identifier\n  in: number-of-digits\n  location...:\n   /tmp/tmptno2g3v6.rkt:13:47\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-raised-to-power number power)\n    (cond\n      [(zero? number) 0]\n      [else (+ (expt (remainder number 10) power)\n               (sum-of-digits-raised-to-power (quotient number 10) power))]))\n  (define (number-of-digits number)\n    (cond\n      [(zero? number) 0]\n      [else (+ 1 (number-of-digits (quotient number 10)))]))\n  (define (armstrong? number)\n    (= number (sum-of-digits-raised-to-power number (number-of-digits number))))\n  (armstrong? number))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (armstrong_number_helper number sum)\n    (if (= number 0)\n        (= number sum)\n        (armstrong_number_helper (quotient number 10) (+ (* (remainder number 10) (remainder number 10) (remainder number 10)) sum))))\n  (armstrong_number_helper number 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123120,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3q9dpo9i.rkt:16:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (let loop ((number number) (sum 0) (digits 0))\n    (cond ((= number 0) (= sum number))\n          (else (loop (quotient number 10)\n                      (+ sum (expt (remainder number 10) digits))\n                      (+ digits 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123120,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvlz16biq.rkt:16:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (armstrong_number_iter number sum)\n    (cond ((= number 0) (= number sum))\n          (else (armstrong_number_iter (quotient number 10)\n                                       (+ sum (* (expt (remainder number 10) 3)\n                                                 (expt 10 (quotient (log number 10) 1))))))))\n  (armstrong_number_iter number 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3r_32_hu.rkt:17:4\n\nquotient: contract violation\n  expected: integer?\n  given: 2.1846914308175984\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3r_32_hu.rkt:18:4\n\nquotient: contract violation\n  expected: integer?\n  given: 2.4132997640812515\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3r_32_hu.rkt:19:4\n\nquotient: contract violation\n  expected: integer?\n  given: 3.6491400641442184\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (armstrong_number_iter number sum)\n    (if (zero? number)\n        (if (= sum number)\n            #t\n            #f)\n        (armstrong_number_iter (quotient number 10) (+ sum (expt (remainder number 10) 3)))))\n  (armstrong_number_iter number 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123118,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4q0h8w3e.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-to-the-power-of-3 number)\n    (if (= number 0)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-to-the-power-of-3 (quotient number 10)))))\n  (if (= number (sum-of-digits-to-the-power-of-3 number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (armstrong_number_iter number sum)\n    (if (zero? number)\n        (if (= number sum)\n            #t\n            #f)\n        (armstrong_number_iter (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (remainder number 10))))))\n  (armstrong_number_iter number 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123118,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7bi07kau.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-raised-to-power number power)\n    (cond\n      [(zero? number) 0]\n      [else (+ (expt (remainder number 10) power)\n               (sum-of-digits-raised-to-power (quotient number 10) power))]))\n  (define (number-of-digits number)\n    (cond\n      [(zero? number) 0]\n      [else (+ 1 (number-of-digits (quotient number 10)))]))\n  (define (armstrong? number)\n    (= number (sum-of-digits-raised-to-power number (number-of-digits number))))\n  (armstrong? number))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-cubes-of-digits number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-cubes-of-digits (quotient number 10)))))\n  (if (= number (sum-of-cubes-of-digits number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubed number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubed (quotient number 10)))))\n  (if (= number (sum-of-digits-cubed number))\n      number\n      0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123119,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmkosvt4u.rkt:19:4\nactual:     153\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmkosvt4u.rkt:20:4\nactual:     0\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmkosvt4u.rkt:21:4\nactual:     0\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-to-the-power-of-3 number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-to-the-power-of-3 (quotient number 10)))))\n  (= number (sum-of-digits-to-the-power-of-3 number)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123119,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= (sum-of-digits-cubes number) number)\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (armstrong_number_helper number sum)\n    (if (= number 0)\n        (= sum number)\n        (armstrong_number_helper (quotient number 10)\n                                 (+ sum (expt (remainder number 10) 3)))))\n  (armstrong_number_helper number 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123119,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_swlkzte.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= (sum-of-digits-cubes number) number)\n      \"Armstrong\"\n      \"Not Armstrong\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123119,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4rqphzq5.rkt:19:4\nactual:     \"Armstrong\"\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4rqphzq5.rkt:20:4\nactual:     \"Not Armstrong\"\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4rqphzq5.rkt:21:4\nactual:     \"Not Armstrong\"\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum_of_digits_cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum_of_digits_cubes (quotient number 10)))))\n  (if (= number (sum_of_digits_cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123119,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum_of_digits_to_power_of_digits_count number)\n    (define (sum_of_digits_to_power_of_digits_count_iter number sum)\n      (if (&lt; number 10)\n          (+ sum (expt number (length (number-&gt;string number))))\n          (sum_of_digits_to_power_of_digits_count_iter (quotient number 10) (+ sum (expt (remainder number 10) (length (number-&gt;string number)))))))\n    (sum_of_digits_to_power_of_digits_count_iter number 0))\n  (if (= number (sum_of_digits_to_power_of_digits_count number))\n      true\n      false))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123119,
      "stdout": "",
      "stderr": "/tmp/tmpscre9yqy.rkt:9:83: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 15\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= (sum-of-digits-cubes number) number)\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubed number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubed (quotient number 10)))))\n  (if (= number (sum-of-digits-cubed number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (armstrong-helper number sum)\n    (if (zero? number)\n        (equal? sum number)\n        (armstrong-helper (quotient number 10) (+ sum (expt (remainder number 10) 3)))))\n  (armstrong-helper number 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123120,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpah2juw4l.rkt:16:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits number)\n    (if (zero? number)\n        0\n        (+ (remainder number 10)\n           (sum-of-digits (quotient number 10)))))\n  (define (power-of-digits number)\n    (if (zero? number)\n        1\n        (* (remainder number 10)\n           (power-of-digits (quotient number 10)))))\n  (if (= number (power-of-digits number))\n      (display \"Armstrong Number\")\n      (display \"Not an Armstrong Number\")))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123120,
      "stdout": "Not an Armstrong NumberNot an Armstrong NumberNot an Armstrong Number",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmdqx1uva.rkt:24:4\nactual:     #<void>\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmdqx1uva.rkt:25:4\nactual:     #<void>\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmdqx1uva.rkt:26:4\nactual:     #<void>\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= (sum-of-digits-cubes number) number)\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= (sum-of-digits-cubes number) number)\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (armstrong_number_iter number sum)\n    (if (= number 0)\n        (= number sum)\n        (armstrong_number_iter (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (expt 10 (quotient (number-of-digits number) 1))))))\n  (armstrong_number_iter number 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123119,
      "stdout": "",
      "stderr": "/tmp/tmpeb00er3i.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 11\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (let ([digits (string->list (number->string number))])\n    (= number (apply + (map (lambda (digit) (expt (string->number (char->string digit)) (length digits))) digits)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123120,
      "stdout": "",
      "stderr": "/tmp/tmpn389an6n.rkt:6:67: char->string: unbound identifier\n  in: char->string\n  location...:\n   /tmp/tmpn389an6n.rkt:6:67\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits number)\n    (if (zero? number)\n        0\n        (+ (remainder number 10)\n           (sum-of-digits (quotient number 10)))))\n  (define (power-of-digits number)\n    (if (zero? number)\n        1\n        (* (remainder number 10)\n           (power-of-digits (quotient number 10)))))\n  (if (= number (power-of-digits number))\n      (display \"Armstrong Number\")\n      (display \"Not an Armstrong Number\")))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123120,
      "stdout": "Not an Armstrong NumberNot an Armstrong NumberNot an Armstrong Number",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmdqx1uva.rkt:24:4\nactual:     #<void>\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmdqx1uva.rkt:25:4\nactual:     #<void>\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmdqx1uva.rkt:26:4\nactual:     #<void>\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= (sum-of-digits-cubes number) number)\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (armstrong_number_helper number sum)\n    (if (zero? number)\n        (= number sum)\n        (armstrong_number_helper (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (expt 10 (sub1 (length (number->string number)))))))))\n  (armstrong_number_helper number 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123120,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvv1ej8nm.rkt:16:4\n\nlength: contract violation\n  expected: list?\n  given: \"153\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvv1ej8nm.rkt:17:4\n\nlength: contract violation\n  expected: list?\n  given: \"259\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvv1ej8nm.rkt:18:4\n\nlength: contract violation\n  expected: list?\n  given: \"4458\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (armstrong_number_iter number sum)\n    (if (zero? number)\n        (equal? number sum)\n        (armstrong_number_iter (quotient number 10) (+ (* (remainder number 10) (remainder number 10) (remainder number 10)) sum))))\n  (armstrong_number_iter number 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123120,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfjp1v5la.rkt:16:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum_of_digits_cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum_of_digits_cubes (quotient number 10)))))\n  (if (= (sum_of_digits_cubes number) number)\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-to-the-power-of-number-of-digits number)\n    (define (sum-of-digits-to-the-power-of-number-of-digits-iter number sum)\n      (if (zero? number)\n          sum\n          (sum-of-digits-to-the-power-of-number-of-digits-iter (quotient number 10)\n                                                               (+ sum (expt (remainder number 10)\n                                                                            (number-of-digits number))))))\n    (sum-of-digits-to-the-power-of-number-of-digits-iter number 0))\n  (define (number-of-digits number)\n    (define (number-of-digits-iter number count)\n      (if (zero? number)\n          count\n          (number-of-digits-iter (quotient number 10)\n                                 (+ count 1))))\n    (number-of-digits-iter number 0))\n  (= number (sum-of-digits-to-the-power-of-number-of-digits number)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123120,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6t7kcqc5.rkt:27:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (armstrong_number_iter number sum)\n    (if (zero? number)\n        (= number sum)\n        (armstrong_number_iter (quotient number 10)\n                               (+ sum (expt (remainder number 10) 3)))))\n  (armstrong_number_iter number 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123117,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyt435mph.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= (sum-of-digits-cubes number) number)\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-to-power-of-number-of-digits number)\n    (define (sum-of-digits-to-power-of-number-of-digits-iter number sum-of-digits-to-power-of-number-of-digits)\n      (cond ((= number 0) sum-of-digits-to-power-of-number-of-digits)\n            (else (sum-of-digits-to-power-of-number-of-digits-iter (quotient number 10) (+ sum-of-digits-to-power-of-number-of-digits (expt (remainder number 10) (number-of-digits number)))))))\n    (sum-of-digits-to-power-of-number-of-digits-iter number 0))\n  (define (number-of-digits number)\n    (define (number-of-digits-iter number number-of-digits)\n      (cond ((= number 0) number-of-digits)\n            (else (number-of-digits-iter (quotient number 10) (+ number-of-digits 1)))))\n    (number-of-digits-iter number 0))\n  (= number (sum-of-digits-to-power-of-number-of-digits number)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123120,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzedpz3fw.rkt:22:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-raised-to-power-of-number-of-digits number)\n    (define (sum-of-digits-raised-to-power-of-number-of-digits-iter number sum)\n      (cond ((= number 0) sum)\n            (else (sum-of-digits-raised-to-power-of-number-of-digits-iter\n                   (quotient number 10)\n                   (+ sum (expt (remainder number 10)\n                                (number-of-digits number)))))))\n    (sum-of-digits-raised-to-power-of-number-of-digits-iter number 0))\n  (define (number-of-digits number)\n    (define (number-of-digits-iter number count)\n      (cond ((= number 0) count)\n            (else (number-of-digits-iter (quotient number 10)\n                                         (+ count 1)))))\n    (number-of-digits-iter number 0))\n  (= number (sum-of-digits-raised-to-power-of-number-of-digits number)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123120,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmau51r21.rkt:26:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubed number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubed (quotient number 10)))))\n  (if (= (sum-of-digits-cubed number) number)\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= (sum-of-digits-cubes number) number)\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (let loop ((number number)\n             (sum 0)\n             (digits 0))\n    (cond ((= number 0) (= sum number))\n          (else (loop (quotient number 10)\n                      (+ sum (expt (remainder number 10) digits))\n                      (+ digits 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123120,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbfq3vac1.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (armstrong_number-helper number sum)\n    (cond\n      [(zero? number) (= number sum)]\n      [else (armstrong_number-helper (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (remainder number 10))))]))\n  (armstrong_number-helper number 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123120,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7plr33j6.rkt:16:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubed number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubed (quotient number 10)))))\n  (if (= (sum-of-digits-cubed number) number)\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= (sum-of-digits-cubes number) number)\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (power n p)\n    (if (= p 0)\n        1\n        (* n (power n (- p 1)))))\n  (define (sum-of-digits n)\n    (if (= n 0)\n        0\n        (+ (remainder n 10) (sum-of-digits (quotient n 10)))))\n  (define (num-of-digits n)\n    (if (= n 0)\n        0\n        (+ 1 (num-of-digits (quotient n 10)))))\n  (define (armstrong? n)\n    (= n (sum-of-digits (power n (num-of-digits n)))))\n  (armstrong? number))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123120,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqs0f9b4p.rkt:26:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (= number (sum-of-digits-cubes number)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (let ([digits (string->list (number->string number))])\n    (let loop ([digits digits] [sum 0])\n      (cond [(empty? digits) (= sum number)]\n            [else (loop (rest digits) (+ sum (expt (car digits) (length digits))))]))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123120,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxne_fgjj.rkt:15:4\n\nexpt: contract violation\n  expected: number?\n  given: #\\1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxne_fgjj.rkt:16:4\n\nexpt: contract violation\n  expected: number?\n  given: #\\2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxne_fgjj.rkt:17:4\n\nexpt: contract violation\n  expected: number?\n  given: #\\4\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= (sum-of-digits-cubes number) number)\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (cond\n      [(zero? number) 0]\n      [else (+ (expt (remainder number 10) 3)\n               (sum-of-digits-cubes (quotient number 10)))]))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (armstrong_number-helper number sum)\n    (cond\n      [(zero? number) (= number sum)]\n      [else (armstrong_number-helper (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (remainder number 10))))]))\n  (armstrong_number-helper number 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123120,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7plr33j6.rkt:16:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= (sum-of-digits-cubes number) number)\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (armstrong_number_iter number sum)\n    (if (= number 0)\n        (= number sum)\n        (armstrong_number_iter (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (remainder number 10))))))\n  (armstrong_number_iter number 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmponjwligh.rkt:16:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (armstrong_number_iter number sum)\n    (if (zero? number)\n        (= number sum)\n        (armstrong_number_iter (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (remainder number 10))))))\n  (armstrong_number_iter number 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123117,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbtr51y4_.rkt:16:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-raised-to-the-power-of-number-of-digits number)\n    (if (&lt; number 10)\n        (expt number (number-of-digits number))\n        (+ (expt (modulo number 10) (number-of-digits number))\n           (sum-of-digits-raised-to-the-power-of-number-of-digits (quotient number 10)))))\n  (if (= number (sum-of-digits-raised-to-the-power-of-number-of-digits number))\n      number\n      false))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123120,
      "stdout": "",
      "stderr": "/tmp/tmpl958c40v.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 14\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-to-the-power-of-3 number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-to-the-power-of-3 (quotient number 10)))))\n  (= number (sum-of-digits-to-the-power-of-3 number)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123119,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (armstrong_number_iter number sum)\n    (if (zero? number)\n        (= number sum)\n        (armstrong_number_iter (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (remainder number 10))))))\n  (armstrong_number_iter number 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123117,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbtr51y4_.rkt:16:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubed number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubed (quotient number 10)))))\n  (if (= number (sum-of-digits-cubed number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (armstrong_number_helper number sum)\n    (cond\n      [(zero? number) (= number sum)]\n      [else (armstrong_number_helper (quotient number 10) (+ sum (expt (remainder number 10) 3)))]))\n  (armstrong_number_helper number 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123120,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpundvjwxt.rkt:16:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits number)\n    (if (zero? number)\n        0\n        (+ (remainder number 10)\n           (sum-of-digits (quotient number 10)))))\n  (define (power-of-digits number)\n    (if (zero? number)\n        1\n        (* (remainder number 10)\n           (power-of-digits (quotient number 10)))))\n  (define (number-of-digits number)\n    (if (zero? number)\n        0\n        (+ 1 (number-of-digits (quotient number 10)))))\n  (define (armstrong? number)\n    (if (= (sum-of-digits number)\n           (power-of-digits number))\n        #t\n        #f))\n  (armstrong? number))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123120,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj1wew7zb.rkt:31:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-cubes-of-digits number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-cubes-of-digits (quotient number 10)))))\n  (if (= (sum-of-cubes-of-digits number) number)\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubed number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubed (quotient number 10)))))\n  (if (= number (sum-of-digits-cubed number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-raised-to-power-of-number-of-digits number)\n    (define (sum-of-digits-raised-to-power-of-number-of-digits-iter number sum)\n      (if (&lt; number 10)\n          (+ sum (expt number (number-of-digits number)))\n          (sum-of-digits-raised-to-power-of-number-of-digits-iter (quotient number 10) (+ sum (expt (remainder number 10) (number-of-digits number))))))\n    (sum-of-digits-raised-to-power-of-number-of-digits-iter number 0))\n  (define (number-of-digits number)\n    (define (number-of-digits-iter number count)\n      (if (&lt; number 10)\n          count\n          (number-of-digits-iter (quotient number 10) (+ count 1))))\n    (number-of-digits-iter number 0))\n  (= number (sum-of-digits-raised-to-power-of-number-of-digits number)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123120,
      "stdout": "",
      "stderr": "/tmp/tmpa4mdnp_z.rkt:5:2: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 11\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-cubes-of-digits number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-cubes-of-digits (quotient number 10)))))\n  (if (= number (sum-of-cubes-of-digits number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (armstrong_number_iter number sum)\n    (cond ((= number 0) (= number sum))\n          (else (armstrong_number_iter (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (remainder number 10)))))))\n  (armstrong_number_iter number 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123120,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx2cpqq_x.rkt:15:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-cubes-of-digits number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-cubes-of-digits (quotient number 10)))))\n  (if (= number (sum-of-cubes-of-digits number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubed number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubed (quotient number 10)))))\n  (if (= (sum-of-digits-cubed number) number)\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits number)\n    (if (= number 0)\n        0\n        (+ (remainder number 10)\n           (sum-of-digits (quotient number 10)))))\n  (define (number-of-digits number)\n    (if (= number 0)\n        0\n        (+ 1 (number-of-digits (quotient number 10)))))\n  (define (power number power)\n    (if (= power 0)\n        1\n        (* number (power number (- power 1)))))\n  (= number (sum-of-digits number (number-of-digits number))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123120,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4uzni02a.rkt:25:4\n\nsum-of-digits: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4uzni02a.rkt:26:4\n\nsum-of-digits: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4uzni02a.rkt:27:4\n\nsum-of-digits: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 1\n  given: 2\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (power x n)\n    (if (= n 0)\n        1\n        (* x (power x (- n 1)))))\n  (define (sum-of-digits number)\n    (if (= number 0)\n        0\n        (+ (remainder number 10) (sum-of-digits (quotient number 10)))))\n  (define (number-of-digits number)\n    (if (= number 0)\n        0\n        (+ 1 (number-of-digits (quotient number 10)))))\n  (if (= number (sum-of-digits number (number-of-digits number)))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123120,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4upsyp1r.rkt:26:4\n\nsum-of-digits: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4upsyp1r.rkt:27:4\n\nsum-of-digits: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4upsyp1r.rkt:28:4\n\nsum-of-digits: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 1\n  given: 2\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits number)\n    (if (zero? number)\n        0\n        (+ (remainder number 10)\n           (sum-of-digits (quotient number 10)))))\n  (define (power-of-digits number)\n    (if (zero? number)\n        1\n        (* (remainder number 10)\n           (power-of-digits (quotient number 10)))))\n  (define (number-of-digits number)\n    (if (zero? number)\n        0\n        (+ 1 (number-of-digits (quotient number 10)))))\n  (define (armstrong? number)\n    (= number (power-of-digits number)))\n  (armstrong? number))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123120,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyvki6d91.rkt:28:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-digits number)\n    (if (= number 0)\n        0\n        (+ (remainder number 10)\n           (sum-digits (quotient number 10)))))\n  (define (power-digits number)\n    (if (= number 0)\n        0\n        (+ (expt (remainder number 10) 3)\n           (power-digits (quotient number 10)))))\n  (if (= (sum-digits number) (power-digits number))\n      true\n      false))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123120,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy3aw0w6x.rkt:24:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-to-the-power-of-3 number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-to-the-power-of-3 (quotient number 10)))))\n  (if (= (sum-of-digits-to-the-power-of-3 number) number)\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (armstrong_number_iter number sum)\n    (if (= number 0)\n        (= sum number)\n        (armstrong_number_iter (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (expt 10 (quotient (log number 10) 1))))))\n  (armstrong_number_iter number 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123120,
      "stdout": "",
      "stderr": "/tmp/tmpqgvgoeez.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 11\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= (sum-of-digits-cubes number) number)\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      true\n      false))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubed number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubed (quotient number 10)))))\n  (if (= (sum-of-digits-cubed number) number)\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits number)\n    (cond [(zero? number) 0]\n          [else (+ (remainder number 10)\n                   (sum-of-digits (quotient number 10)))]))\n  (define (number-of-digits number)\n    (cond [(zero? number) 0]\n          [else (+ 1 (number-of-digits (quotient number 10)))]))\n  (define (power-of-digits number)\n    (cond [(zero? number) 0]\n          [else (+ (expt (remainder number 10)\n                        (number-of-digits number))\n                   (power-of-digits (quotient number 10)))]))\n  (= (power-of-digits number)\n     (sum-of-digits number)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123121,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6ixzokcp.rkt:25:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (let loop ([number number] [sum 0] [digits 0])\n    (if (&lt; number 10)\n        (= number (expt sum digits))\n        (loop (quotient number 10)\n              (+ sum (expt (remainder number 10) digits))\n              (+ digits 1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123120,
      "stdout": "",
      "stderr": "/tmp/tmpo2jmn24q.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 12\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (armstrong_number_iter number sum)\n    (if (= number 0)\n        (= number sum)\n        (armstrong_number_iter (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (expt 10 (quotient (number-of-digits number) 1))))))\n  (armstrong_number_iter number 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123119,
      "stdout": "",
      "stderr": "/tmp/tmpeb00er3i.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 11\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= (sum-of-digits-cubes number) number)\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-raised-to-power number power)\n    (cond\n      [(zero? number) 0]\n      [else (+ (expt (remainder number 10) power)\n               (sum-of-digits-raised-to-power (quotient number 10) power))]))\n  (define (number-of-digits number)\n    (cond\n      [(zero? number) 0]\n      [else (+ 1 (number-of-digits (quotient number 10)))]))\n  (define (is-armstrong number)\n    (= number (sum-of-digits-raised-to-power number (number-of-digits number))))\n  (is-armstrong number))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= (sum-of-digits-cubes number) number)\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (armstrong_number_helper number sum)\n    (if (= number 0)\n        (= sum number)\n        (armstrong_number_helper (quotient number 10)\n                                 (+ sum (* (expt (remainder number 10) 3)\n                                          (expt (remainder number 10) 3)\n                                          (expt (remainder number 10) 3))))))\n  (armstrong_number_helper number 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123121,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg2yvp5oy.rkt:19:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-raised-to-power number power)\n    (cond ((= number 0) 0)\n          (else (+ (expt (modulo number 10) power)\n                   (sum-of-digits-raised-to-power (quotient number 10) power)))))\n  (define (number-of-digits number)\n    (cond ((= number 0) 0)\n          (else (+ 1 (number-of-digits (quotient number 10))))))\n  (= number (sum-of-digits-raised-to-power number (number-of-digits number))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits number)\n    (if (= number 0)\n        0\n        (+ (remainder number 10)\n           (sum-of-digits (quotient number 10)))))\n  (define (power-of-digits number)\n    (if (= number 0)\n        1\n        (* (remainder number 10)\n           (power-of-digits (quotient number 10)))))\n  (= number (power-of-digits (sum-of-digits number))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123121,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplbsxoaom.rkt:22:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum_of_digits number)\n    (if (zero? number)\n        0\n        (+ (remainder number 10)\n           (sum_of_digits (quotient number 10)))))\n  (define (power number power)\n    (if (zero? power)\n        1\n        (* number (power number (- power 1)))))\n  (define (number_of_digits number)\n    (if (zero? number)\n        0\n        (+ 1 (number_of_digits (quotient number 10)))))\n  (define (armstrong? number)\n    (if (zero? number)\n        #t\n        (if (= (power (remainder number 10) (number_of_digits number))\n               (sum_of_digits number))\n            (armstrong? (quotient number 10))\n            #f)))\n  (armstrong? number))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk91qi14s.rkt:32:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk91qi14s.rkt:33:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk91qi14s.rkt:34:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 4\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (equal? number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (&lt; number 10)\n        (expt number 3)\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "/tmp/tmpvxp6lda9.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 14\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (armstrong_number-helper number sum)\n    (if (= number 0)\n        (= number sum)\n        (armstrong_number-helper (quotient number 10)\n                                 (+ sum (* (expt (remainder number 10) 3)\n                                           (expt 10 (quotient (length (number->string number)) 1))))))\n  (armstrong_number-helper number 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123120,
      "stdout": "",
      "stderr": "/tmp/tmpnlzhj4q9.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 13\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum_of_digits_cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum_of_digits_cubes (quotient number 10)))))\n  (if (= number (sum_of_digits_cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum_of_digits number)\n    (if (zero? number)\n        0\n        (+ (remainder number 10)\n           (sum_of_digits (quotient number 10)))))\n  (define (power_of_digits number)\n    (if (zero? number)\n        1\n        (* (remainder number 10)\n           (power_of_digits (quotient number 10)))))\n  (define (number_of_digits number)\n    (if (zero? number)\n        0\n        (+ 1 (number_of_digits (quotient number 10)))))\n  (define (armstrong? number)\n    (= (expt (sum_of_digits number)\n             (number_of_digits number))\n       (power_of_digits number)))\n  (armstrong? number))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123121,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgw58b0ca.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (armstrong_number_iter number sum)\n    (cond\n      [(zero? number) (= number sum)]\n      [else (armstrong_number_iter (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (remainder number 10))))]))\n  (armstrong_number_iter number 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123121,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoha6ksje.rkt:16:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (let* ([digits (string->list (number->string number))]\n         [length (length digits)])\n    (= number (apply + (map (lambda (digit) (expt digit length)) digits)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_3cjox9w.rkt:14:4\n\nexpt: contract violation\n  expected: number?\n  given: #\\1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_3cjox9w.rkt:15:4\n\nexpt: contract violation\n  expected: number?\n  given: #\\2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_3cjox9w.rkt:16:4\n\nexpt: contract violation\n  expected: number?\n  given: #\\4\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-to-the-power-of-number-of-digits number)\n    (define (sum-of-digits number)\n      (if (= number 0)\n          0\n          (+ (remainder number 10)\n             (sum-of-digits (quotient number 10)))))\n    (define (number-of-digits number)\n      (if (= number 0)\n          0\n          (+ 1 (number-of-digits (quotient number 10)))))\n    (define (power number power)\n      (if (= power 0)\n          1\n          (* number (power number (- power 1)))))\n    (power (sum-of-digits number) (number-of-digits number)))\n  (if (= number (sum-of-digits-to-the-power-of-number-of-digits number))\n      number\n      0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnkl7gkgp.rkt:29:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnkl7gkgp.rkt:30:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnkl7gkgp.rkt:31:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 4\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= (sum-of-digits-cubes number) number)\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (armstrong_number_iter number sum)\n    (if (= number 0)\n        (= number sum)\n        (armstrong_number_iter (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (remainder number 10))))))\n  (armstrong_number_iter number 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmponjwligh.rkt:16:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (armstrong_number_iter number sum)\n    (if (zero? number)\n        (if (= sum number)\n            #t\n            #f)\n        (armstrong_number_iter (quotient number 10) (+ sum (expt (remainder number 10) 3)))))\n  (armstrong_number_iter number 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123118,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4q0h8w3e.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (armstrong_number_iter number sum)\n    (cond ((= number 0) (= number sum))\n          (else (armstrong_number_iter (quotient number 10)\n                                       (+ sum (* (expt (remainder number 10) 3)\n                                                 (expt 10 (quotient (length number) 1))))))))\n  (armstrong_number_iter number 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5q6r7kd_.rkt:17:4\n\nlength: contract violation\n  expected: list?\n  given: 153\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5q6r7kd_.rkt:18:4\n\nlength: contract violation\n  expected: list?\n  given: 259\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5q6r7kd_.rkt:19:4\n\nlength: contract violation\n  expected: list?\n  given: 4458\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (armstrong_number_iter number sum)\n    (if (zero? number)\n        (if (= sum number)\n            #t\n            #f)\n        (armstrong_number_iter (quotient number 10) (+ sum (expt (remainder number 10) 3)))))\n  (armstrong_number_iter number 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123118,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4q0h8w3e.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= (sum-of-digits-cubes number) number)\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      true\n      false))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= (sum-of-digits-cubes number) number)\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (armstrong_number_iter number sum)\n    (if (zero? number)\n        (equal? number sum)\n        (armstrong_number_iter (quotient number 10)\n                               (+ sum (expt (remainder number 10) 3)))))\n  (armstrong_number_iter number 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123121,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpi9f7ijjy.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (armstrong_number_iter number sum)\n    (if (zero? number)\n        (if (= number sum)\n            #t\n            #f)\n        (armstrong_number_iter (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (expt 10 (sub1 (length (number->string number)))))))))\n  (armstrong_number_iter number 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppagw4oah.rkt:18:4\n\nlength: contract violation\n  expected: list?\n  given: \"153\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppagw4oah.rkt:19:4\n\nlength: contract violation\n  expected: list?\n  given: \"259\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppagw4oah.rkt:20:4\n\nlength: contract violation\n  expected: list?\n  given: \"4458\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum_of_digits_cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum_of_digits_cubes (quotient number 10)))))\n  (if (= number (sum_of_digits_cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum_of_digits_cubes number)\n    (cond\n      [(= number 0) 0]\n      [else (+ (expt (remainder number 10) 3)\n               (sum_of_digits_cubes (quotient number 10)))]))\n  (= number (sum_of_digits_cubes number)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= (sum-of-digits-cubes number) number)\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-raised-to-power-of-number-of-digits number)\n    (define (sum-of-digits-raised-to-power-of-number-of-digits-iter number sum)\n      (if (zero? number)\n          sum\n          (sum-of-digits-raised-to-power-of-number-of-digits-iter (quotient number 10) (+ sum (expt (remainder number 10) (number-of-digits number))))))\n    (sum-of-digits-raised-to-power-of-number-of-digits-iter number 0))\n  (define (number-of-digits number)\n    (define (number-of-digits-iter number count)\n      (if (zero? number)\n          count\n          (number-of-digits-iter (quotient number 10) (+ count 1))))\n    (number-of-digits-iter number 0))\n  (if (= number (sum-of-digits-raised-to-power-of-number-of-digits number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123121,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwokmtzln.rkt:26:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (armstrong_number_helper number sum)\n    (cond ((= number 0) sum)\n          (else (armstrong_number_helper (quotient number 10)\n                                         (+ sum (* (expt (remainder number 10) 3)\n                                                   (expt 10 (quotient number 10))))))))\n  (if (= number (armstrong_number_helper number 0))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123121,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprly9wvot.rkt:19:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= (sum-of-digits-cubes number) number)\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (armstrong_number_helper number sum)\n    (if (zero? number)\n        (equal? number sum)\n        (armstrong_number_helper (quotient number 10) (+ sum (expt (remainder number 10) 3)))))\n  (armstrong_number_helper number 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123121,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_3s7lnch.rkt:16:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (armstrong_number_iter number sum)\n    (if (= number 0)\n        (= number sum)\n        (armstrong_number_iter (quotient number 10) (+ (* (remainder number 10) (remainder number 10) (remainder number 10)) sum))))\n  (armstrong_number_iter number 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123121,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprzj0zjsm.rkt:16:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (armstrong_number_helper number sum)\n    (if (= number 0)\n        (= number sum)\n        (armstrong_number_helper (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (remainder number 10))))))\n  (armstrong_number_helper number 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123121,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc3i2o1pi.rkt:16:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-to-the-power-of-number-of-digits number)\n    (define (sum-of-digits-to-the-power-of-number-of-digits-iter number sum)\n      (cond ((= number 0) sum)\n            (else (sum-of-digits-to-the-power-of-number-of-digits-iter (quotient number 10) (+ sum (expt (remainder number 10) (number-of-digits number)))))))\n    (sum-of-digits-to-the-power-of-number-of-digits-iter number 0))\n  (define (number-of-digits number)\n    (define (number-of-digits-iter number count)\n      (cond ((= number 0) count)\n            (else (number-of-digits-iter (quotient number 10) (+ count 1)))))\n    (number-of-digits-iter number 0))\n  (= number (sum-of-digits-to-the-power-of-number-of-digits number)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123121,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuw_60k0m.rkt:22:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (armstrong_number_iter number sum)\n    (if (zero? number)\n        (= number sum)\n        (armstrong_number_iter (quotient number 10)\n                               (+ sum (expt (remainder number 10) 3)))))\n  (armstrong_number_iter number 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123117,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyt435mph.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-to-the-power-of-3 number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-to-the-power-of-3 (quotient number 10)))))\n  (if (= number (sum-of-digits-to-the-power-of-3 number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (armstrong_number_helper number sum)\n    (if (= number 0)\n        (= sum number)\n        (armstrong_number_helper (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (expt 10 (quotient number 10)))))))\n  (armstrong_number_helper number 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123121,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyrygo6hc.rkt:16:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-to-the-power-of-number-of-digits number)\n    (define (sum-of-digits-to-the-power-of number power)\n      (if (zero? number)\n          0\n          (+ (expt (remainder number 10) power)\n             (sum-of-digits-to-the-power-of (quotient number 10) power))))\n    (sum-of-digits-to-the-power-of number (number-of-digits number)))\n  (define (number-of-digits number)\n    (if (zero? number)\n        0\n        (+ 1 (number-of-digits (quotient number 10)))))\n  (= number (sum-of-digits-to-the-power-of-number-of-digits number)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-cubes-of-digits number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-cubes-of-digits (quotient number 10)))))\n  (= number (sum-of-cubes-of-digits number)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (armstrong_number_helper number sum)\n    (if (&lt; number 10)\n        (= number sum)\n        (armstrong_number_helper (quotient number 10) (+ sum (* (remainder number 10) (expt 10 (length (number-&gt;string number))))))))\n  (armstrong_number_helper number 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123121,
      "stdout": "",
      "stderr": "/tmp/tmpbv91510u.rkt:8:95: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 11\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-cubes-of-digits number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-cubes-of-digits (quotient number 10)))))\n  (if (= (sum-of-cubes-of-digits number) number)\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (armstrong_number-helper number sum)\n    (if (= number 0)\n        (= number sum)\n        (armstrong_number-helper (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (remainder number 10))))))\n  (armstrong_number-helper number 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123121,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc2pnu1xx.rkt:16:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}