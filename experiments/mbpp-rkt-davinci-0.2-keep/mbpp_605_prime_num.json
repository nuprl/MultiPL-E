{
  "name": "mbpp_605_prime_num",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to check if the given integer is a prime number.\n(define (prime_num num)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_605_prime_num.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate prime_num))\n    (check-equal? (candidate 13) #t)\n    (check-equal? (candidate 7) #t)\n    (check-equal? (candidate -1010) #f)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (if (= num 1)\n      #f\n      (if (= num 2)\n          #t\n          (if (= (remainder num 2) 0)\n              #f\n              (let loop ((i 3))\n                (if (= i num)\n                    #t\n                    (if (= (remainder num i) 0)\n                        #f\n                        (loop (+ i 2)))))))))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (if (= num 1)\n      #f\n      (if (= num 2)\n          #t\n          (if (= (remainder num 2) 0)\n              #f\n              (let loop ([i 3])\n                (if (= i num)\n                    #t\n                    (if (= (remainder num i) 0)\n                        #f\n                        (loop (+ i 2)))))))))\n",
    "  (define (prime-helper num div)\n    (if (= div 1)\n        #t\n        (if (= (modulo num div) 0)\n            #f\n            (prime-helper num (- div 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (if (= num 1)\n      #f\n      (let loop ((i 2))\n        (if (= i num)\n            #t\n            (if (= (remainder num i) 0)\n                #f\n                (loop (+ i 1)))))))\n",
    "  (define (prime? num)\n    (define (iter num div)\n      (cond ((= div 1) #t)\n            ((= (modulo num div) 0) #f)\n            (else (iter num (- div 1)))))\n  (iter num (- num 1)))\n",
    "  (define (prime? num)\n    (define (divisible? a b)\n      (= (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divisible? n test-divisor) test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor num 2) num))\n  (prime? num))\n",
    "  (cond\n    [(= num 1) #f]\n    [(= num 2) #t]\n    [(= (remainder num 2) 0) #f]\n    [else\n     (let loop ([i 3])\n       (cond\n         [(= i num) #t]\n         [(= (remainder num i) 0) #f]\n         [else (loop (+ i 2))]))]))\n",
    "  (define (prime? num)\n    (cond ((= num 1) #f)\n          ((= num 2) #t)\n          ((= (remainder num 2) 0) #f)\n          (else (prime? num (- num 1)))))\n  (prime? num (- num 1)))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime? num div)\n    (cond ((= div 1) #t)\n          ((= (modulo num div) 0) #f)\n          (else (prime? num (- div 1)))))\n  (prime? num (- num 1)))\n",
    "  (define (prime? num div)\n    (if (= div 1)\n        #t\n        (if (= (modulo num div) 0)\n            #f\n            (prime? num (- div 1)))))\n  (prime? num (- num 1)))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime? num)\n    (define (iter i)\n      (if (= i 1)\n          #t\n          (if (zero? (modulo num i))\n              #f\n              (iter (- i 1)))))\n    (iter (- num 1)))\n  (if (prime? num)\n      (display \"Prime\")\n      (display \"Not Prime\")))\n",
    "  (define (prime_helper num div)\n    (if (= div 1)\n        #t\n        (if (= (remainder num div) 0)\n            #f\n            (prime_helper num (- div 1)))))\n  (prime_helper num (- num 1)))\n",
    "  (define (iter i)\n    (cond ((= i 1) #t)\n          ((= (modulo num i) 0) #f)\n          (else (iter (- i 1)))))\n  (iter (- num 1)))\n",
    "  (define (prime_num_helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime_num_helper num (- divisor 1)))))\n  (prime_num_helper num (- num 1)))\n"
  ]
}