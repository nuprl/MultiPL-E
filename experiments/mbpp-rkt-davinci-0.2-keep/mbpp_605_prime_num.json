{
  "name": "mbpp_605_prime_num",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to check if the given integer is a prime number.\n(define (prime_num num)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_605_prime_num.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate prime_num))\n    (check-equal? (candidate 13) #t)\n    (check-equal? (candidate 7) #t)\n    (check-equal? (candidate -1010) #f)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (if (= num 1)\n      #f\n      (if (= num 2)\n          #t\n          (if (= (remainder num 2) 0)\n              #f\n              (let loop ((i 3))\n                (if (= i num)\n                    #t\n                    (if (= (remainder num i) 0)\n                        #f\n                        (loop (+ i 2)))))))))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (if (= num 1)\n      #f\n      (if (= num 2)\n          #t\n          (if (= (remainder num 2) 0)\n              #f\n              (let loop ([i 3])\n                (if (= i num)\n                    #t\n                    (if (= (remainder num i) 0)\n                        #f\n                        (loop (+ i 2)))))))))\n",
    "  (define (prime-helper num div)\n    (if (= div 1)\n        #t\n        (if (= (modulo num div) 0)\n            #f\n            (prime-helper num (- div 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (if (= num 1)\n      #f\n      (let loop ((i 2))\n        (if (= i num)\n            #t\n            (if (= (remainder num i) 0)\n                #f\n                (loop (+ i 1)))))))\n",
    "  (define (prime? num)\n    (define (iter num div)\n      (cond ((= div 1) #t)\n            ((= (modulo num div) 0) #f)\n            (else (iter num (- div 1)))))\n  (iter num (- num 1)))\n",
    "  (define (prime? num)\n    (define (divisible? a b)\n      (= (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divisible? n test-divisor) test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor num 2) num))\n  (prime? num))\n",
    "  (cond\n    [(= num 1) #f]\n    [(= num 2) #t]\n    [(= (remainder num 2) 0) #f]\n    [else\n     (let loop ([i 3])\n       (cond\n         [(= i num) #t]\n         [(= (remainder num i) 0) #f]\n         [else (loop (+ i 2))]))]))\n",
    "  (define (prime? num)\n    (cond ((= num 1) #f)\n          ((= num 2) #t)\n          ((= (remainder num 2) 0) #f)\n          (else (prime? num (- num 1)))))\n  (prime? num (- num 1)))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime? num div)\n    (cond ((= div 1) #t)\n          ((= (modulo num div) 0) #f)\n          (else (prime? num (- div 1)))))\n  (prime? num (- num 1)))\n",
    "  (define (prime? num div)\n    (if (= div 1)\n        #t\n        (if (= (modulo num div) 0)\n            #f\n            (prime? num (- div 1)))))\n  (prime? num (- num 1)))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime? num)\n    (define (iter i)\n      (if (= i 1)\n          #t\n          (if (zero? (modulo num i))\n              #f\n              (iter (- i 1)))))\n    (iter (- num 1)))\n  (if (prime? num)\n      (display \"Prime\")\n      (display \"Not Prime\")))\n",
    "  (define (prime_helper num div)\n    (if (= div 1)\n        #t\n        (if (= (remainder num div) 0)\n            #f\n            (prime_helper num (- div 1)))))\n  (prime_helper num (- num 1)))\n",
    "  (define (iter i)\n    (cond ((= i 1) #t)\n          ((= (modulo num i) 0) #f)\n          (else (iter (- i 1)))))\n  (iter (- num 1)))\n",
    "  (define (prime_num_helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime_num_helper num (- divisor 1)))))\n  (prime_num_helper num (- num 1)))\n",
    "  (define (prime? num div)\n    (if (= div 1)\n        #t\n        (if (= (remainder num div) 0)\n            #f\n            (prime? num (- div 1)))))\n  (prime? num (- num 1)))\n",
    "  (define (prime? num)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo num i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- num 1)))\n  (if (prime? num)\n      (printf \"~a is a prime number\\n\" num)\n      (printf \"~a is not a prime number\\n\" num)))\n",
    "  (define (prime? num)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (remainder num i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- num 1)))\n  (if (= num 1)\n      #f\n      (prime? num)))\n",
    "  (define (divides? a b)\n    (= (remainder b a) 0))\n  (define (find-divisor n test-divisor)\n    (cond ((> (square test-divisor) n) n)\n          ((divides? test-divisor n) test-divisor)\n          (else (find-divisor n (+ test-divisor 1)))))\n  (define (is-prime? n)\n    (= n (find-divisor n 2)))\n  (is-prime? num))\n",
    "  (define (prime? num)\n    (define (divisible? a b)\n      (= (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divisible? n test-divisor) test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n    (define (smallest-divisor n)\n      (find-divisor n 2))\n    (= n (smallest-divisor n)))\n  (prime? num))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime-helper num div)\n    (cond\n      [(= div 1) #t]\n      [(= (modulo num div) 0) #f]\n      [else (prime-helper num (- div 1))]))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime_helper num div)\n    (if (= div 1)\n        #t\n        (if (= (modulo num div) 0)\n            #f\n            (prime_helper num (- div 1)))))\n  (prime_helper num (- num 1)))\n",
    "  (if (= num 1)\n      #t\n      (if (= num 2)\n          #t\n          (if (= num 3)\n              #t\n              (if (= num 4)\n                  #f\n                  (if (= num 5)\n                      #t\n                      (if (= num 6)\n                          #f\n                          (if (= num 7)\n                              #t\n                              (if (= num 8)\n                                  #f\n                                  (if (= num 9)\n                                      #f\n                                      (if (= num 10)\n                                          #f\n                                          (if (= num 11)\n                                              #t\n                                              (if (= num 12)\n                                                  #f\n                                                  (if (= num 13)\n                                                      #t\n                                                      (if (= num 14)\n                                                          #f\n                                                          (if (= num 15)\n                                                              #f\n                                                              (if (= num 16)\n                                                                  #f\n                                                                  (if (= num 17)\n                                                                      #t\n                                                                      (if (= num 18)\n                                                                          #f\n                                                                          (if (= num 19)\n                                                                              #t\n                                                                              (if (= num 20)\n                                                                                  #f\n                                                                                  (if (= num 21)\n                                                                                      #f\n                                                                                      (if (= num 22)\n                                                                                          #f\n                                                                                          (if (= num 23)\n                                                                                              #t\n                                                                                              (if (= num 24)\n                                                                                                  #f\n                                                                                                  (if (= num 25)\n                                                                                                      #f\n                                                                                                      (if (= num 26)\n                                                                                                          #f\n                                                                                                          (if (= num 27)\n                                                                                                              #f\n                                                                                                              (if (= num 28)\n                                                                                                                  #f\n                                                                                                                  (if (= num 29)\n                                                                                                                      #t\n                ",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime-helper num div)\n    (cond ((= num div) #t)\n          ((= (modulo num div) 0) #f)\n          (else (prime-helper num (+ div 1)))))\n  (prime-helper num 2))\n",
    "  (define (prime? num)\n    (define (iter num div)\n      (cond ((&gt; div (sqrt num)) #t)\n            ((= (modulo num div) 0) #f)\n            (else (iter num (+ div 1)))))\n    (iter num 2))\n  (if (prime? num)\n      (printf \"~a is a prime number.\\n\" num)\n      (printf \"~a is not a prime number.\\n\" num)))\n",
    "  (define (prime_num_iter num div)\n    (cond ((= div 1) #t)\n          ((= (modulo num div) 0) #f)\n          (else (prime_num_iter num (- div 1)))))\n  (prime_num_iter num (- num 1)))\n",
    "  (define (prime? num)\n    (define (divides? a b)\n      (= (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divides? n test-divisor) test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor num 2) num))\n  (prime? num))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime? num)\n    (define (divisible? a b)\n      (= (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divisible? n test-divisor) test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor num 2) num))\n  (prime? num))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime-helper num divisor)\n    (if (= divisor 1)\n        #t\n        (if (= (remainder num divisor) 0)\n            #f\n            (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime? num)\n    (define (iter num div)\n      (cond ((= div num) #t)\n            ((= (modulo num div) 0) #f)\n            (else (iter num (+ div 1)))))\n    (iter num 2))\n  (if (prime? num)\n      (printf \"~a is a prime number\" num)\n      (printf \"~a is not a prime number\" num)))\n",
    "  (define (prime? num)\n    (define (iter i)\n      (cond\n        [(= i 1) #t]\n        [(= (remainder num i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (- num 1)))\n  (prime? num))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime_helper num div)\n    (cond\n      ((= div 1) #t)\n      ((= (modulo num div) 0) #f)\n      (else (prime_helper num (- div 1)))))\n  (prime_helper num (- num 1)))\n",
    "  (cond\n    [(= num 1) #f]\n    [(= num 2) #t]\n    [(= num 3) #t]\n    [(= num 4) #f]\n    [(= num 5) #t]\n    [(= num 6) #f]\n    [(= num 7) #t]\n    [(= num 8) #f]\n    [(= num 9) #f]\n    [(= num 10) #f]\n    [(= num 11) #t]\n    [(= num 12) #f]\n    [(= num 13) #t]\n    [(= num 14) #f]\n    [(= num 15) #f]\n    [(= num 16) #f]\n    [(= num 17) #t]\n    [(= num 18) #f]\n    [(= num 19) #t]\n    [(= num 20) #f]\n    [(= num 21) #f]\n    [(= num 22) #f]\n    [(= num 23) #t]\n    [(= num 24) #f]\n    [(= num 25) #f]\n    [(= num 26) #f]\n    [(= num 27) #f]\n    [(= num 28) #f]\n    [(= num 29) #t]\n    [(= num 30) #f]\n    [(= num 31) #t]\n    [(= num 32) #f]\n    [(= num 33) #f]\n    [(= num 34) #f]\n    [(= num 35) #f]\n    [(= num 36) #f]\n    [(= num 37) #t]\n    [(= num 38) #f]\n    [(= num 39) #f]\n    [(= num 40) #f]\n    [(= num 41) #t]\n    [(= num 42) #f]\n    [(= num 43) #t]\n    [(= num 44) #f]\n    [(= num 45) #f]\n    [(= num 46) #f]\n    [(= num 47) #t]\n    [(= num 48) #f]\n    [(= num 49) #f]\n    [(= num 50) #f]\n    [(= num 51) #",
    "  (define (prime-helper num div)\n    (cond ((= div 1) #t)\n          ((= (modulo num div) 0) #f)\n          (else (prime-helper num (- div 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime-helper num div)\n    (cond ((= div 1) #t)\n          ((= (modulo num div) 0) #f)\n          (else (prime-helper num (- div 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime? num div)\n    (cond\n      ((= div 1) #t)\n      ((= (modulo num div) 0) #f)\n      (else (prime? num (- div 1)))))\n  (prime? num (- num 1)))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= num 1) #f)\n          ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= num divisor) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (+ divisor 1)))))\n  (prime-helper num 2))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (if (= num 1)\n      #t\n      (if (= num 2)\n          #t\n          (if (= num 3)\n              #t\n              (if (= num 5)\n                  #t\n                  (if (= num 7)\n                      #t\n                      (if (= num 11)\n                          #t\n                          (if (= num 13)\n                              #t\n                              (if (= num 17)\n                                  #t\n                                  (if (= num 19)\n                                      #t\n                                      (if (= num 23)\n                                          #t\n                                          (if (= num 29)\n                                              #t\n                                              (if (= num 31)\n                                                  #t\n                                                  (if (= num 37)\n                                                      #t\n                                                      (if (= num 41)\n                                                          #t\n                                                          (if (= num 43)\n                                                              #t\n                                                              (if (= num 47)\n                                                                  #t\n                                                                  (if (= num 53)\n                                                                      #t\n                                                                      (if (= num 59)\n                                                                          #t\n                                                                          (if (= num 61)\n                                                                              #t\n                                                                              (if (= num 67)\n                                                                                  #t\n                                                                                  (if (= num 71)\n                                                                                      #t\n                                                                                      (if (= num 73)\n                                                                                          #t\n                                                                                          (if (= num 79)\n                                                                                              #t\n                                                                                              (if (= num 83)\n                                                                                                  #t\n                                                                                                  (if (= num 89)\n                                                                                                      #t\n                                                                                                      (if (= num 97)\n                                                                                                          #t\n                                                                                                          #f))))))))))))))))))))))))))))))))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime-helper num div)\n    (cond ((= div 1) #t)\n          ((= (modulo num div) 0) #f)\n          (else (prime-helper num (- div 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (cond\n    [(= num 1) #f]\n    [(= num 2) #t]\n    [(= num 3) #t]\n    [(= num 4) #f]\n    [(= num 5) #t]\n    [(= num 6) #f]\n    [(= num 7) #t]\n    [(= num 8) #f]\n    [(= num 9) #f]\n    [(= num 10) #f]\n    [(= num 11) #t]\n    [(= num 12) #f]\n    [(= num 13) #t]\n    [(= num 14) #f]\n    [(= num 15) #f]\n    [(= num 16) #f]\n    [(= num 17) #t]\n    [(= num 18) #f]\n    [(= num 19) #t]\n    [(= num 20) #f]\n    [(= num 21) #f]\n    [(= num 22) #f]\n    [(= num 23) #t]\n    [(= num 24) #f]\n    [(= num 25) #f]\n    [(= num 26) #f]\n    [(= num 27) #f]\n    [(= num 28) #f]\n    [(= num 29) #t]\n    [(= num 30) #f]\n    [(= num 31) #t]\n    [(= num 32) #f]\n    [(= num 33) #f]\n    [(= num 34) #f]\n    [(= num 35) #f]\n    [(= num 36) #f]\n    [(= num 37) #t]\n    [(= num 38) #f]\n    [(= num 39) #f]\n    [(= num 40) #f]\n    [(= num 41) #t]\n    [(= num 42) #f]\n    [(= num 43) #t]\n    [(= num 44) #f]\n    [(= num 45) #f]\n    [(= num 46) #f]\n    [(= num 47) #t]\n    [(= num 48) #f]\n    [(= num 49) #f]\n    [(= num 50) #f]\n    [(= num 51) #",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (if (= num 1)\n      #t\n      (if (= num 2)\n          #t\n          (if (= num 3)\n              #t\n              (if (= num 4)\n                  #f\n                  (if (= num 5)\n                      #t\n                      (if (= num 6)\n                          #f\n                          (if (= num 7)\n                              #t\n                              (if (= num 8)\n                                  #f\n                                  (if (= num 9)\n                                      #f\n                                      (if (= num 10)\n                                          #f\n                                          (if (= num 11)\n                                              #t\n                                              (if (= num 12)\n                                                  #f\n                                                  (if (= num 13)\n                                                      #t\n                                                      (if (= num 14)\n                                                          #f\n                                                          (if (= num 15)\n                                                              #f\n                                                              (if (= num 16)\n                                                                  #f\n                                                                  (if (= num 17)\n                                                                      #t\n                                                                      (if (= num 18)\n                                                                          #f\n                                                                          (if (= num 19)\n                                                                              #t\n                                                                              (if (= num 20)\n                                                                                  #f\n                                                                                  (if (= num 21)\n                                                                                      #f\n                                                                                      (if (= num 22)\n                                                                                          #f\n                                                                                          (if (= num 23)\n                                                                                              #t\n                                                                                              (if (= num 24)\n                                                                                                  #f\n                                                                                                  (if (= num 25)\n                                                                                                      #f\n                                                                                                      (if (= num 26)\n                                                                                                          #f\n                                                                                                          (if (= num 27)\n                                                                                                              #f\n                                                                                                              (if (= num 28)\n                                                                                                                  #f\n                                                                                                                  (if (= num 29)\n                                                                                                                      #t\n                ",
    "  (define (prime-helper num divisor)\n    (cond ((&gt; divisor (sqrt num)) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (+ divisor 1)))))\n  (prime-helper num 2))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime-helper num div)\n    (cond ((= div 1) #t)\n          ((= (modulo num div) 0) #f)\n          (else (prime-helper num (- div 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime? num div)\n    (cond ((= div 1) #t)\n          ((= (modulo num div) 0) #f)\n          (else (prime? num (- div 1)))))\n  (prime? num (- num 1)))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (if (= num 1)\n      #f\n      (if (= num 2)\n          #t\n          (if (= (remainder num 2) 0)\n              #f\n              (let loop ((i 3))\n                (if (= i num)\n                    #t\n                    (if (= (remainder num i) 0)\n                        #f\n                        (loop (+ i 2)))))))))\n",
    "  (cond\n    [(= num 1) #f]\n    [(= num 2) #t]\n    [(= num 3) #t]\n    [(= num 4) #f]\n    [(= num 5) #t]\n    [(= num 6) #f]\n    [(= num 7) #t]\n    [(= num 8) #f]\n    [(= num 9) #f]\n    [(= num 10) #f]\n    [(= num 11) #t]\n    [(= num 12) #f]\n    [(= num 13) #t]\n    [(= num 14) #f]\n    [(= num 15) #f]\n    [(= num 16) #f]\n    [(= num 17) #t]\n    [(= num 18) #f]\n    [(= num 19) #t]\n    [(= num 20) #f]\n    [(= num 21) #f]\n    [(= num 22) #f]\n    [(= num 23) #t]\n    [(= num 24) #f]\n    [(= num 25) #f]\n    [(= num 26) #f]\n    [(= num 27) #f]\n    [(= num 28) #f]\n    [(= num 29) #t]\n    [(= num 30) #f]\n    [(= num 31) #t]\n    [(= num 32) #f]\n    [(= num 33) #f]\n    [(= num 34) #f]\n    [(= num 35) #f]\n    [(= num 36) #f]\n    [(= num 37) #t]\n    [(= num 38) #f]\n    [(= num 39) #f]\n    [(= num 40) #f]\n    [(= num 41) #t]\n    [(= num 42) #f]\n    [(= num 43) #t]\n    [(= num 44) #f]\n    [(= num 45) #f]\n    [(= num 46) #f]\n    [(= num 47) #t]\n    [(= num 48) #f]\n    [(= num 49) #f]\n    [(= num 50) #f]\n    [(= num 51) #",
    "  (define (prime-helper num divisor)\n    (cond ((= num divisor) #t)\n          ((= 0 (modulo num divisor)) #f)\n          (else (prime-helper num (+ divisor 1)))))\n  (prime-helper num 2))\n",
    "  (define (prime_helper num div)\n    (cond ((= div 1) #t)\n          ((= (modulo num div) 0) #f)\n          (else (prime_helper num (- div 1)))))\n  (prime_helper num (- num 1)))\n",
    "  (define (prime-helper num div)\n    (cond ((= div 1) #t)\n          ((= (modulo num div) 0) #f)\n          (else (prime-helper num (- div 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime? num div)\n    (cond ((= num div) #t)\n          ((= (modulo num div) 0) #f)\n          (else (prime? num (+ div 1)))))\n  (prime? num 2))\n",
    "  (define (prime? num)\n    (define (divides? a b)\n      (= (remainder b a) 0))\n    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divides? test-divisor n) test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor num 2) num))\n  (prime? num))\n",
    "  (define (prime? num)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (modulo num n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- num 1)))\n  (cond ((= num 1) #f)\n        ((= num 2) #t)\n        ((prime? num) #t)\n        (else #f)))\n",
    "  (define (prime-helper num divisor)\n    (cond\n      ((= divisor 1) #t)\n      ((= (modulo num divisor) 0) #f)\n      (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime-helper num divisor)\n    (if (= divisor 1)\n        #t\n        (if (= (modulo num divisor) 0)\n            #f\n            (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime? num)\n    (define (iter n)\n      (if (= n 1)\n          #t\n          (if (= (remainder num n) 0)\n              #f\n              (iter (- n 1)))))\n    (iter (- num 1)))\n  (if (prime? num)\n      (printf \"~a is a prime number.\\n\" num)\n      (printf \"~a is not a prime number.\\n\" num)))\n",
    "  (define (iter n)\n    (cond ((= n 1) #t)\n          ((= (modulo num n) 0) #f)\n          (else (iter (- n 1)))))\n  (iter (- num 1)))\n",
    "  (define (prime-helper num div)\n    (cond ((= div 1) #t)\n          ((= (modulo num div) 0) #f)\n          (else (prime-helper num (- div 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime? num)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo num i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- num 1)))\n  (cond ((= num 1) #f)\n        ((= num 2) #t)\n        ((= num 3) #t)\n        ((= num 4) #f)\n        ((= num 5) #t)\n        ((= num 6) #f)\n        ((= num 7) #t)\n        ((= num 8) #f)\n        ((= num 9) #f)\n        ((= num 10) #f)\n        ((= num 11) #t)\n        ((= num 12) #f)\n        ((= num 13) #t)\n        ((= num 14) #f)\n        ((= num 15) #f)\n        ((= num 16) #f)\n        ((= num 17) #t)\n        ((= num 18) #f)\n        ((= num 19) #t)\n        ((= num 20) #f)\n        ((= num 21) #f)\n        ((= num 22) #f)\n        ((= num 23) #t)\n        ((= num 24) #f)\n        ((= num 25) #f)\n        ((= num 26) #f)\n        ((= num 27) #f)\n        ((= num 28) #f)\n        ((= num 29) #t)\n        ((= num 30) #f)\n        ((= num 31) #t)\n        ((= num 32) #f)\n        ((= num 33) #f)\n        ((= num 34) #f)\n        ((= num 35) #f)\n        ((= num 36) #f)\n        ((= num 37) #t)\n        ((= num 38) #f)\n        ((= num 39) #f)\n        ((= num 40) #f)\n        ((= num 41) #t)\n        ((= num 42) #f)\n        ((= num 43) #t)\n        ((= num 44) #f)\n        ((= num 45)",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (check-prime num div)\n    (cond ((= div 1) #t)\n          ((= (modulo num div) 0) #f)\n          (else (check-prime num (- div 1)))))\n  (check-prime num (- num 1)))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (remainder num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime? num div)\n    (if (= div 1)\n        #t\n        (if (= (modulo num div) 0)\n            #f\n            (prime? num (- div 1)))))\n  (prime? num (- num 1)))\n",
    "  (define (prime? num)\n    (if (= num 1)\n        #t\n        (if (= num 2)\n            #t\n            (if (= num 3)\n                #t\n                (if (= num 4)\n                    #f\n                    (if (= num 5)\n                        #t\n                        (if (= num 6)\n                            #f\n                            (if (= num 7)\n                                #t\n                                (if (= num 8)\n                                    #f\n                                    (if (= num 9)\n                                        #f\n                                        (if (= num 10)\n                                            #f\n                                            (if (= num 11)\n                                                #t\n                                                (if (= num 12)\n                                                    #f\n                                                    (if (= num 13)\n                                                        #t\n                                                        (if (= num 14)\n                                                            #f\n                                                            (if (= num 15)\n                                                                #f\n                                                                (if (= num 16)\n                                                                    #f\n                                                                    (if (= num 17)\n                                                                        #t\n                                                                        (if (= num 18)\n                                                                            #f\n                                                                            (if (= num 19)\n                                                                                #t\n                                                                                (if (= num 20)\n                                                                                    #f\n                                                                                    (if (= num 21)\n                                                                                        #f\n                                                                                        (if (= num 22)\n                                                                                            #f\n                                                                                            (if (= num 23)\n                                                                                                #t\n                                                                                                (if (= num 24)\n                                                                                                    #f\n                                                                                                    (if (= num 25)\n                                                                                                        #f\n                                                                                                        (if (= num 26)\n                                                                                                            #f\n                                                                                                            (if (= num 27)\n                                                                                                                #f\n                                                                                                                (if (= num 28)\n                                                                                                                    #f\n                                                                                                                    (if (= num 29)\n                                ",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime? n div)\n    (if (= n div)\n        #t\n        (if (= (remainder n div) 0)\n            #f\n            (prime? n (+ div 1)))))\n  (prime? num 2))\n",
    "  (if (= num 1)\n      #f\n      (if (= num 2)\n          #t\n          (if (= (remainder num 2) 0)\n              #f\n              (let loop ((i 3))\n                (if (= i num)\n                    #t\n                    (if (= (remainder num i) 0)\n                        #f\n                        (loop (+ i 2)))))))))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime_num_iter divisor)\n    (if (= divisor 1)\n        #t\n        (if (= (modulo num divisor) 0)\n            #f\n            (prime_num_iter (- divisor 1)))))\n  (prime_num_iter (- num 1)))\n",
    "  (define (prime? n d)\n    (if (= n d)\n        #t\n        (if (= (remainder n d) 0)\n            #f\n            (prime? n (+ d 1)))))\n  (prime? num 2))\n",
    "  (define (prime? num div)\n    (if (= div 1)\n        #t\n        (if (= (remainder num div) 0)\n            #f\n            (prime? num (- div 1)))))\n  (prime? num (- num 1)))\n",
    "  (define (prime? num)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (remainder num i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- num 1)))\n  (if (prime? num)\n      (display \"Prime\")\n      (display \"Not Prime\")))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime? num)\n    (define (divisible? a b)\n      (= (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divisible? n test-divisor) test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor num 2) num))\n  (if (prime? num)\n      (printf \"~a is a prime number\" num)\n      (printf \"~a is not a prime number\" num)))\n",
    "  (define (prime? num)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (modulo num n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- num 1)))\n  (prime? num))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime? num div)\n    (cond\n      [(= div 1) #t]\n      [(= (modulo num div) 0) #f]\n      [else (prime? num (- div 1))]))\n  (prime? num (- num 1)))\n",
    "  (define (prime_num_iter divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime_num_iter (- divisor 1)))))\n  (prime_num_iter (- num 1)))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime-helper num div)\n    (cond ((= div 1) #t)\n          ((= (modulo num div) 0) #f)\n          (else (prime-helper num (- div 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (divisible? a b)\n    (= (remainder a b) 0))\n  (define (find-divisor n test-divisor)\n    (cond ((> (square test-divisor) n) n)\n          ((divisible? n test-divisor) test-divisor)\n          (else (find-divisor n (+ test-divisor 1)))))\n  (define (prime? n)\n    (= n (find-divisor n 2)))\n  (prime? num))\n",
    "  (define (prime_helper num div)\n    (if (= div 1)\n        #t\n        (if (= (remainder num div) 0)\n            #f\n            (prime_helper num (- div 1)))))\n  (prime_helper num (- num 1)))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= num divisor) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (+ divisor 1)))))\n  (prime-helper num 2))\n",
    "  (define (prime-helper num div)\n    (if (= div 1)\n        #t\n        (if (= (remainder num div) 0)\n            #f\n            (prime-helper num (- div 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime? num)\n    (define (iter i)\n      (if (= i num)\n          #t\n          (if (= (modulo num i) 0)\n              #f\n              (iter (+ i 1)))))\n    (iter 2))\n  (if (= num 1)\n      #f\n      (prime? num)))\n",
    "  (define (prime? num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime? num (- divisor 1)))))\n  (prime? num (- num 1)))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= num 1) #f)\n          ((= num 2) #t)\n          ((= num divisor) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (+ divisor 1)))))\n  (prime-helper num 2))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime? num)\n    (cond\n      [(= num 1) #f]\n      [(= num 2) #t]\n      [(= num 3) #t]\n      [(= num 5) #t]\n      [(= num 7) #t]\n      [(= num 11) #t]\n      [(= num 13) #t]\n      [(= num 17) #t]\n      [(= num 19) #t]\n      [(= num 23) #t]\n      [(= num 29) #t]\n      [(= num 31) #t]\n      [(= num 37) #t]\n      [(= num 41) #t]\n      [(= num 43) #t]\n      [(= num 47) #t]\n      [(= num 53) #t]\n      [(= num 59) #t]\n      [(= num 61) #t]\n      [(= num 67) #t]\n      [(= num 71) #t]\n      [(= num 73) #t]\n      [(= num 79) #t]\n      [(= num 83) #t]\n      [(= num 89) #t]\n      [(= num 97) #t]\n      [else #f]))\n  (prime? num))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime? num)\n    (define (iter i)\n      (if (= i 1)\n          #t\n          (if (= (remainder num i) 0)\n              #f\n              (iter (- i 1)))))\n    (iter (- num 1)))\n  (if (prime? num)\n      (printf \"~a is a prime number.\\n\" num)\n      (printf \"~a is not a prime number.\\n\" num)))\n",
    "  (define (prime_helper num div)\n    (cond ((= div 1) #t)\n          ((= (modulo num div) 0) #f)\n          (else (prime_helper num (- div 1)))))\n  (prime_helper num (- num 1)))\n",
    "  (define (prime_helper num div)\n    (cond ((= div 1) #t)\n          ((= (modulo num div) 0) #f)\n          (else (prime_helper num (- div 1)))))\n  (prime_helper num (- num 1)))\n",
    "  (define (prime-helper num div)\n    (cond ((= div 1) #t)\n          ((= (modulo num div) 0) #f)\n          (else (prime-helper num (- div 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime? num)\n    (define (prime-helper num div)\n      (if (= div 1)\n          #t\n          (if (= (modulo num div) 0)\n              #f\n              (prime-helper num (- div 1)))))\n    (prime-helper num (- num 1)))\n  (if (= num 1)\n      #f\n      (prime? num)))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (remainder num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (prime? num))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime-helper num div)\n    (cond ((= div 1) #t)\n          ((= (remainder num div) 0) #f)\n          (else (prime-helper num (- div 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (helper num div)\n    (cond ((= div 1) #t)\n          ((= (remainder num div) 0) #f)\n          (else (helper num (- div 1)))))\n  (helper num (- num 1)))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime? num)\n    (define (prime-helper num div)\n      (cond ((= div 1) #t)\n            ((= (modulo num div) 0) #f)\n            (else (prime-helper num (- div 1)))))\n    (prime-helper num (- num 1)))\n  (prime? num))\n",
    "  (define (prime_helper num div)\n    (cond ((= num 1) #f)\n          ((= num 2) #t)\n          ((= num div) #t)\n          ((= (modulo num div) 0) #f)\n          (else (prime_helper num (+ div 1)))))\n  (prime_helper num 2))\n",
    "  (if (= num 1)\n      #t\n      (if (= num 2)\n          #t\n          (if (= num 3)\n              #t\n              (if (= num 4)\n                  #f\n                  (if (= num 5)\n                      #t\n                      (if (= num 6)\n                          #f\n                          (if (= num 7)\n                              #t\n                              (if (= num 8)\n                                  #f\n                                  (if (= num 9)\n                                      #f\n                                      (if (= num 10)\n                                          #f\n                                          (if (= num 11)\n                                              #t\n                                              (if (= num 12)\n                                                  #f\n                                                  (if (= num 13)\n                                                      #t\n                                                      (if (= num 14)\n                                                          #f\n                                                          (if (= num 15)\n                                                              #f\n                                                              (if (= num 16)\n                                                                  #f\n                                                                  (if (= num 17)\n                                                                      #t\n                                                                      (if (= num 18)\n                                                                          #f\n                                                                          (if (= num 19)\n                                                                              #t\n                                                                              (if (= num 20)\n                                                                                  #f\n                                                                                  (if (= num 21)\n                                                                                      #f\n                                                                                      (if (= num 22)\n                                                                                          #f\n                                                                                          (if (= num 23)\n                                                                                              #t\n                                                                                              (if (= num 24)\n                                                                                                  #f\n                                                                                                  (if (= num 25)\n                                                                                                      #f\n                                                                                                      (if (= num 26)\n                                                                                                          #f\n                                                                                                          (if (= num 27)\n                                                                                                              #f\n                                                                                                              (if (= num 28)\n                                                                                                                  #f\n                                                                                                                  (if (= num 29)\n                                                                                                                      #t\n                ",
    "  (define (prime? num div)\n    (cond ((= num div) #t)\n          ((= (modulo num div) 0) #f)\n          (else (prime? num (+ div 1)))))\n  (prime? num 2))\n",
    "  (let loop ((i 2))\n    (if (= i num)\n        #t\n        (if (= (modulo num i) 0)\n            #f\n            (loop (+ i 1))))))\n",
    "  (define (prime-helper num div)\n    (cond ((= div 1) #t)\n          ((= (modulo num div) 0) #f)\n          (else (prime-helper num (- div 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime_helper num div)\n    (cond ((= div 1) #t)\n          ((= (remainder num div) 0) #f)\n          (else (prime_helper num (- div 1)))))\n  (prime_helper num (- num 1)))\n",
    "  (cond\n    [(= num 1) false]\n    [(= num 2) true]\n    [(= num 3) true]\n    [(= num 4) false]\n    [(= num 5) true]\n    [(= num 6) false]\n    [(= num 7) true]\n    [(= num 8) false]\n    [(= num 9) false]\n    [(= num 10) false]\n    [(= num 11) true]\n    [(= num 12) false]\n    [(= num 13) true]\n    [(= num 14) false]\n    [(= num 15) false]\n    [(= num 16) false]\n    [(= num 17) true]\n    [(= num 18) false]\n    [(= num 19) true]\n    [(= num 20) false]\n    [(= num 21) false]\n    [(= num 22) false]\n    [(= num 23) true]\n    [(= num 24) false]\n    [(= num 25) false]\n    [(= num 26) false]\n    [(= num 27) false]\n    [(= num 28) false]\n    [(= num 29) true]\n    [(= num 30) false]\n    [(= num 31) true]\n    [(= num 32) false]\n    [(= num 33) false]\n    [(= num 34) false]\n    [(= num 35) false]\n    [(= num 36) false]\n    [(= num 37) true]\n    [(= num 38) false]\n    [(= num 39) false]\n    [(= num 40) false]\n    [(= num 41) true]\n    [(= num 42) false]\n    [(= num 43) true]\n    [(= num 44) false]\n    [(= num 45) false]\n    [(= num 46) false]\n    [(= num 47) true]\n    [(= num 48) false]\n    [(= num 49) false]\n    [(= num 50) false]\n    [(= num 51) false]\n    [(= num 52) false]\n    [(= num 53) true]\n    [(= num 54) false]\n    [(= num 55) false]\n    [(= num 56) false]\n    [(=",
    "  (if (= num 1)\n      #t\n      (if (= num 2)\n          #t\n          (if (= num 3)\n              #t\n              (if (= num 4)\n                  #f\n                  (if (= num 5)\n                      #t\n                      (if (= num 6)\n                          #f\n                          (if (= num 7)\n                              #t\n                              (if (= num 8)\n                                  #f\n                                  (if (= num 9)\n                                      #f\n                                      (if (= num 10)\n                                          #f\n                                          (if (= num 11)\n                                              #t\n                                              (if (= num 12)\n                                                  #f\n                                                  (if (= num 13)\n                                                      #t\n                                                      (if (= num 14)\n                                                          #f\n                                                          (if (= num 15)\n                                                              #f\n                                                              (if (= num 16)\n                                                                  #f\n                                                                  (if (= num 17)\n                                                                      #t\n                                                                      (if (= num 18)\n                                                                          #f\n                                                                          (if (= num 19)\n                                                                              #t\n                                                                              (if (= num 20)\n                                                                                  #f\n                                                                                  (if (= num 21)\n                                                                                      #f\n                                                                                      (if (= num 22)\n                                                                                          #f\n                                                                                          (if (= num 23)\n                                                                                              #t\n                                                                                              (if (= num 24)\n                                                                                                  #f\n                                                                                                  (if (= num 25)\n                                                                                                      #f\n                                                                                                      (if (= num 26)\n                                                                                                          #f\n                                                                                                          (if (= num 27)\n                                                                                                              #f\n                                                                                                              (if (= num 28)\n                                                                                                                  #f\n                                                                                                                  (if (= num 29)\n                                                                                                                      #t\n                ",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime? num div)\n    (if (= div 1)\n        #t\n        (if (= (remainder num div) 0)\n            #f\n            (prime? num (- div 1)))))\n  (prime? num (- num 1)))\n",
    "  (define (prime? num)\n    (define (iter count)\n      (if (= count 1)\n          #t\n          (if (= (modulo num count) 0)\n              #f\n              (iter (- count 1)))))\n    (iter (- num 1)))\n  (if (= num 1)\n      #f\n      (prime? num)))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime? num)\n    (define (iter i)\n      (if (= i 1)\n          #t\n          (if (= (modulo num i) 0)\n              #f\n              (iter (- i 1)))))\n    (iter (- num 1)))\n  (if (= num 1)\n      #f\n      (prime? num)))\n",
    "  (define (prime-helper num div)\n    (cond ((= div 1) #t)\n          ((= (modulo num div) 0) #f)\n          (else (prime-helper num (- div 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime? num div)\n    (if (= div 1)\n        #t\n        (if (= (modulo num div) 0)\n            #f\n            (prime? num (- div 1)))))\n  (prime? num (- num 1)))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= num 1) #f)\n          ((= num 2) #t)\n          ((= num divisor) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (+ divisor 1)))))\n  (prime-helper num 2))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime? num div)\n    (if (= num div)\n        #t\n        (if (= (modulo num div) 0)\n            #f\n            (prime? num (+ div 1)))))\n  (prime? num 2))\n",
    "  (define (prime-helper num div)\n    (cond ((= div 1) #t)\n          ((= (modulo num div) 0) #f)\n          (else (prime-helper num (- div 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (if (= num 1)\n      #f\n      (if (= num 2)\n          #t\n          (if (= num 3)\n              #t\n              (if (= num 4)\n                  #f\n                  (if (= num 5)\n                      #t\n                      (if (= num 6)\n                          #f\n                          (if (= num 7)\n                              #t\n                              (if (= num 8)\n                                  #f\n                                  (if (= num 9)\n                                      #f\n                                      (if (= num 10)\n                                          #f\n                                          (if (= num 11)\n                                              #t\n                                              (if (= num 12)\n                                                  #f\n                                                  (if (= num 13)\n                                                      #t\n                                                      (if (= num 14)\n                                                          #f\n                                                          (if (= num 15)\n                                                              #f\n                                                              (if (= num 16)\n                                                                  #f\n                                                                  (if (= num 17)\n                                                                      #t\n                                                                      (if (= num 18)\n                                                                          #f\n                                                                          (if (= num 19)\n                                                                              #t\n                                                                              (if (= num 20)\n                                                                                  #f\n                                                                                  (if (= num 21)\n                                                                                      #f\n                                                                                      (if (= num 22)\n                                                                                          #f\n                                                                                          (if (= num 23)\n                                                                                              #t\n                                                                                              (if (= num 24)\n                                                                                                  #f\n                                                                                                  (if (= num 25)\n                                                                                                      #f\n                                                                                                      (if (= num 26)\n                                                                                                          #f\n                                                                                                          (if (= num 27)\n                                                                                                              #f\n                                                                                                              (if (= num 28)\n                                                                                                                  #f\n                                                                                                                  (if (= num 29)\n                                                                                                                      #t\n                ",
    "  (define (prime? num div)\n    (if (= div 1)\n        #t\n        (if (= (modulo num div) 0)\n            #f\n            (prime? num (- div 1)))))\n  (prime? num (- num 1)))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime? num div)\n    (cond ((= div 1) #t)\n          ((= (remainder num div) 0) #f)\n          (else (prime? num (- div 1)))))\n  (prime? num (- num 1)))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime? num div)\n    (cond ((= div 1) #t)\n          ((= (modulo num div) 0) #f)\n          (else (prime? num (- div 1)))))\n  (prime? num (- num 1)))\n",
    "  (define (prime_helper num div)\n    (cond ((= div 1) #t)\n          ((= (modulo num div) 0) #f)\n          (else (prime_helper num (- div 1)))))\n  (prime_helper num (- num 1)))\n",
    "  (define (prime-helper num div)\n    (if (= div 1)\n        #t\n        (if (= (modulo num div) 0)\n            #f\n            (prime-helper num (- div 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime-helper num div)\n    (if (= div 1)\n        #t\n        (if (= (modulo num div) 0)\n            #f\n            (prime-helper num (- div 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime_helper num div)\n    (cond ((= div 1) #t)\n          ((= (modulo num div) 0) #f)\n          (else (prime_helper num (- div 1)))))\n  (prime_helper num (- num 1)))\n",
    "  (define (prime? num div)\n    (cond ((= div 1) #t)\n          ((= (modulo num div) 0) #f)\n          (else (prime? num (- div 1)))))\n  (prime? num (- num 1)))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime_num-iter num div)\n    (cond ((= div 1) #t)\n          ((= (modulo num div) 0) #f)\n          (else (prime-num-iter num (- div 1)))))\n  (prime-num-iter num (/ num 2)))\n",
    "  (define (prime_helper num div)\n    (cond ((= div 1) #t)\n          ((= (remainder num div) 0) #f)\n          (else (prime_helper num (- div 1)))))\n  (prime_helper num (- num 1)))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime-helper num div)\n    (cond ((= div 1) #t)\n          ((= (modulo num div) 0) #f)\n          (else (prime-helper num (- div 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime_num_iter counter)\n    (if (= counter 1)\n        #t\n        (if (= (modulo num counter) 0)\n            #f\n            (prime_num_iter (- counter 1)))))\n  (prime_num_iter (- num 1)))\n",
    "  (define (prime? num)\n    (define (divisible? a b)\n      (= (modulo a b) 0))\n    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divisible? n test-divisor) test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor num 2) num))\n  (prime? num))\n",
    "  (define (prime? num)\n    (define (divisible? a b)\n      (= (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divisible? n test-divisor) test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n    (define (smallest-divisor n)\n      (find-divisor n 2))\n    (define (prime? n)\n      (= n (smallest-divisor n)))\n    (prime? num))\n  (prime? num))\n",
    "  (define (prime-helper num divisor)\n    (if (= divisor 1)\n        #t\n        (if (= (modulo num divisor) 0)\n            #f\n            (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (cond\n    [(= num 1) #f]\n    [(= num 2) #t]\n    [(= num 3) #t]\n    [(= num 4) #f]\n    [(= num 5) #t]\n    [(= num 6) #f]\n    [(= num 7) #t]\n    [(= num 8) #f]\n    [(= num 9) #f]\n    [(= num 10) #f]\n    [(= num 11) #t]\n    [(= num 12) #f]\n    [(= num 13) #t]\n    [(= num 14) #f]\n    [(= num 15) #f]\n    [(= num 16) #f]\n    [(= num 17) #t]\n    [(= num 18) #f]\n    [(= num 19) #t]\n    [(= num 20) #f]\n    [(= num 21) #f]\n    [(= num 22) #f]\n    [(= num 23) #t]\n    [(= num 24) #f]\n    [(= num 25) #f]\n    [(= num 26) #f]\n    [(= num 27) #f]\n    [(= num 28) #f]\n    [(= num 29) #t]\n    [(= num 30) #f]\n    [(= num 31) #t]\n    [(= num 32) #f]\n    [(= num 33) #f]\n    [(= num 34) #f]\n    [(= num 35) #f]\n    [(= num 36) #f]\n    [(= num 37) #t]\n    [(= num 38) #f]\n    [(= num 39) #f]\n    [(= num 40) #f]\n    [(= num 41) #t]\n    [(= num 42) #f]\n    [(= num 43) #t]\n    [(= num 44) #f]\n    [(= num 45) #f]\n    [(= num 46) #f]\n    [(= num 47) #t]\n    [(= num 48) #f]\n    [(= num 49) #f]\n    [(= num 50) #f]\n    [(= num 51) #",
    "  (define (prime-helper num div)\n    (cond ((= div 1) #t)\n          ((= (modulo num div) 0) #f)\n          (else (prime-helper num (- div 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime? num)\n    (define (iter i)\n      (cond\n        ((= i 1) #t)\n        ((= (modulo num i) 0) #f)\n        (else (iter (- i 1)))))\n    (iter (- num 1)))\n  (prime? num))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime? num div)\n    (if (= div 1)\n        #t\n        (if (= (modulo num div) 0)\n            #f\n            (prime? num (- div 1)))))\n  (prime? num (- num 1)))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= num divisor) #t)\n          ((= 0 (modulo num divisor)) #f)\n          (else (prime-helper num (+ divisor 1)))))\n  (prime-helper num 2))\n",
    "  (define (prime-helper num div)\n    (if (= div 1)\n        #t\n        (if (zero? (modulo num div))\n            #f\n            (prime-helper num (- div 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (if (= num 2)\n      #t\n      (if (= num 1)\n          #f\n          (if (= num 0)\n              #f\n              (let loop ((i 2))\n                (if (= i num)\n                    #t\n                    (if (= (modulo num i) 0)\n                        #f\n                        (loop (+ i 1)))))))))\n",
    "  (define (prime? num)\n    (define (iter divisor)\n      (cond ((= divisor 1) #t)\n            ((= (modulo num divisor) 0) #f)\n            (else (iter (- divisor 1)))))\n    (iter (- num 1)))\n  (cond ((= num 0) #f)\n        ((= num 1) #f)\n        ((= num 2) #t)\n        (else (prime? num))))\n",
    "  (define (prime-helper num div)\n    (cond ((= div 1) #t)\n          ((= (modulo num div) 0) #f)\n          (else (prime-helper num (- div 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime? num div)\n    (if (= div 1)\n        #t\n        (if (= (modulo num div) 0)\n            #f\n            (prime? num (- div 1)))))\n  (prime? num (- num 1)))\n",
    "  (define (prime_helper num divisor)\n    (if (= num divisor)\n        #t\n        (if (= (modulo num divisor) 0)\n            #f\n            (prime_helper num (+ divisor 1)))))\n  (prime_helper num 2))\n",
    "  (define (prime? num)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo num i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- num 1)))\n  (cond ((= num 1) #f)\n        ((= num 2) #t)\n        ((prime? num) #t)\n        (else #f)))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= num divisor) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (+ divisor 1)))))\n  (prime-helper num 2))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= num divisor) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (+ divisor 1)))))\n  (prime-helper num 2))\n",
    "  (define (prime? num)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo num i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- num 1)))\n  (if (prime? num) \"Prime\" \"Not Prime\"))\n",
    "  (define (prime-helper num div)\n    (cond ((= div 1) #t)\n          ((= (modulo num div) 0) #f)\n          (else (prime-helper num (- div 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (if (= num 1)\n      #f\n      (if (= num 2)\n          #t\n          (if (even? num)\n              #f\n              (let loop ((i 3))\n                (if (= i num)\n                    #t\n                    (if (even? i)\n                        (loop (+ i 1))\n                        (if (= (remainder num i) 0)\n                            #f\n                            (loop (+ i 1))))))))))\n",
    "  (define (prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (prime? num))\n",
    "  (define (prime? num)\n    (define (iter i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo num i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (- num 1)))\n  (if (= num 1)\n      #f\n      (prime? num)))\n"
  ]
}