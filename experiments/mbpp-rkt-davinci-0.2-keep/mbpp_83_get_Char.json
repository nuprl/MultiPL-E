{
  "name": "mbpp_83_get_Char",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n(define (get_Char strr)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_83_get_Char.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_Char))\n    (check-equal? (candidate \"abc\") \"f\")\n    (check-equal? (candidate \"gfg\") \"t\")\n    (check-equal? (candidate \"ab\") \"c\")\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (get_Char_helper strr acc)\n    (if (null? strr)\n        acc\n        (get_Char_helper (cdr strr) (+ acc (char->integer (car strr))))))\n  (integer->char (modulo (get_Char_helper strr 0) 26)))\n",
    "  (define (get_Char_helper strr acc)\n    (if (null? strr)\n        acc\n        (get_Char_helper (cdr strr) (+ acc (char->integer (car strr))))))\n  (integer->char (modulo (get_Char_helper strr 0) 26)))\n",
    "  (define (get_Char_helper strr acc)\n    (if (empty? strr)\n        acc\n        (get_Char_helper (rest strr) (+ acc (char->integer (first strr))))))\n  (integer->char (modulo (get_Char_helper strr 0) 26)))\n",
    "  (define (helper strr)\n    (if (null? strr)\n        0\n        (+ (char->integer (car strr)) (helper (cdr strr)))))\n  (integer->char (modulo (helper strr) 26)))\n",
    "  (let ([sum 0])\n    (for ([i (in-range (string-length strr))])\n      (set! sum (+ sum (string-ref strr i))))\n    (modulo sum 26)))\n",
    "  (define (get_Char_helper strr acc)\n    (if (null? strr)\n        (char (+ acc 65))\n        (get_Char_helper (cdr strr) (+ acc (char->integer (car strr))))))\n  (get_Char_helper strr 0))\n",
    "  (let ([str (string->list strr)])\n    (let loop ([str str] [sum 0])\n      (cond\n        [(empty? str) (integer->char (+ sum 97))]\n        [else (loop (rest str) (+ sum (char->integer (first str))))]))))\n",
    "  (define (get_Char_helper strr i)\n    (cond\n      [(= i (string-length strr)) 0]\n      [else (+ (string-ref strr i) (get_Char_helper strr (+ i 1)))]))\n  (char->integer (string-ref strr 0)))\n",
    "  (define (get_Char_helper strr sum)\n    (if (null? strr)\n        (modulo sum 26)\n        (get_Char_helper (cdr strr) (+ sum (char->integer (car strr))))))\n  (integer->char (get_Char_helper strr 0)))\n",
    "  (define (get_Char_helper strr sum)\n    (if (string=? strr \"\")\n        (modulo sum 26)\n        (get_Char_helper (substring strr 1 (string-length strr)) (+ sum (string-ref strr 0)))))\n  (get_Char_helper strr 0))\n",
    "  (define (get_Char_helper strr i)\n    (cond ((&gt; i (string-length strr)) 0)\n          (else (+ (char-&gt;integer (string-ref strr i)) (get_Char_helper strr (+ i 1))))))\n  (integer-&gt;char (modulo (get_Char_helper strr 0) 26)))\n",
    "  (define (get_Char_helper strr sum)\n    (if (null? strr)\n        (modulo sum 26)\n        (get_Char_helper (cdr strr) (+ sum (car strr)))))\n  (get_Char_helper strr 0))\n",
    "  (let ([str (string->list strr)])\n    (let loop ([str str] [sum 0])\n      (if (null? str)\n          (char->integer (integer->char (+ sum 97)))\n          (loop (cdr str) (+ sum (char->integer (car str))))))))\n",
    "  (define (get_Char_helper strr acc)\n    (if (empty? strr)\n        acc\n        (get_Char_helper (rest strr) (+ acc (char->integer (first strr))))))\n  (integer->char (modulo (get_Char_helper strr 0) 26)))\n",
    "  (define (get_Char_helper strr i)\n    (if (= i (string-length strr))\n        0\n        (+ (char->integer (string-ref strr i))\n           (get_Char_helper strr (+ i 1)))))\n  (integer->char (+ (modulo (get_Char_helper strr 0) 26) 65)))\n",
    "  (define (get_Char_helper strr sum)\n    (if (empty? strr)\n        (integer->char (modulo sum 26))\n        (get_Char_helper (rest strr) (+ sum (char->integer (first strr))))))\n  (get_Char_helper strr 0))\n",
    "  (define (get_Char_helper strr sum)\n    (if (null? strr)\n        (modulo sum 26)\n        (get_Char_helper (cdr strr) (+ (car strr) sum))))\n  (get_Char_helper strr 0))\n",
    "  (define (get_Char_helper strr sum)\n    (cond\n      [(empty? strr) (modulo sum 26)]\n      [else (get_Char_helper (rest strr) (+ sum (char->integer (first strr))))]))\n  (integer->char (get_Char_helper strr 0)))\n",
    "  (define (get_Char_helper strr sum)\n    (if (null? strr)\n        (modulo sum 26)\n        (get_Char_helper (cdr strr) (+ sum (car strr)))))\n  (get_Char_helper strr 0))\n",
    "  (let ([str (string->list strr)])\n    (let loop ([str str] [sum 0])\n      (if (null? str)\n          (integer->char (+ sum 97))\n          (loop (cdr str) (+ sum (car str)))))))\n"
  ]
}