{
  "name": "mbpp_476_big_sum",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to find the sum of the largest and smallest value in a given array.\n(define (big_sum nums)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_476_big_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate big_sum))\n    (check-equal? (candidate (list 1 2 3)) 4)\n    (check-equal? (candidate (list -1 2 3 4)) 3)\n    (check-equal? (candidate (list 2 3 6)) 8)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (+ max min)))\n",
    "  (let ([big (apply max nums)]\n        [small (apply min nums)])\n    (+ big small)))\n",
    "  (let ([big (apply max nums)]\n        [small (apply min nums)])\n    (+ big small)))\n",
    "  (let ([big (apply max nums)]\n        [small (apply min nums)])\n    (+ big small)))\n",
    "  (let ([big (apply max nums)]\n        [small (apply min nums)])\n    (+ big small)))\n",
    "  (let* ([max (apply max nums)]\n         [min (apply min nums)])\n    (+ max min)))\n",
    "  (let ([big (apply max nums)]\n        [small (apply min nums)])\n    (+ big small)))\n",
    "  (define (big_sum-helper nums max min)\n    (if (null? nums)\n        (+ max min)\n        (if (&gt; (car nums) max)\n            (big_sum-helper (cdr nums) (car nums) min)\n            (if (&lt; (car nums) min)\n                (big_sum-helper (cdr nums) max (car nums))\n                (big_sum-helper (cdr nums) max min)))))\n  (big_sum-helper nums (car nums) (car nums)))\n",
    "  (let ((min (apply min nums))\n        (max (apply max nums)))\n    (+ min max)))\n",
    "  (apply + (list (apply max nums) (apply min nums))))\n",
    "  (let ([big (apply max nums)]\n        [small (apply min nums)])\n    (+ big small)))\n",
    "  (let ([big (apply max nums)]\n        [small (apply min nums)])\n    (+ big small)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (+ max min)))\n",
    "  (let ([big (apply max nums)]\n        [small (apply min nums)])\n    (+ big small)))\n",
    "  (let ([big (apply max nums)]\n        [small (apply min nums)])\n    (+ big small)))\n",
    "  (let ([big (apply max nums)]\n        [small (apply min nums)])\n    (+ big small)))\n",
    "  (let ([big (apply max nums)]\n        [small (apply min nums)])\n    (+ big small)))\n",
    "  (let ([big (apply max nums)]\n        [small (apply min nums)])\n    (+ big small)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (+ max min)))\n",
    "  (let* ([smallest (apply min nums)]\n         [largest (apply max nums)])\n    (+ smallest largest)))\n"
  ]
}