{
  "name": "mbpp_77_is_Diff",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to find whether a number is divisible by 11.\n(define (is_Diff n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_77_is_Diff.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Diff))\n    (check-equal? (candidate 12345) #f)\n    (check-equal? (candidate 1212112) #t)\n    (check-equal? (candidate 1212) #f)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let loop ([n n] [sum 0])\n    (cond [(zero? n) (= sum 0)]\n          [else (loop (quotient n 10) (+ sum (remainder n 10)))])))\n",
    "  (if (= (modulo n 11) 0)\n      #t\n      #f))\n",
    "  (let loop ([n n] [sum 0])\n    (if (zero? n)\n        (= (abs (- sum (modulo sum 11))) 0)\n        (loop (quotient n 10) (+ sum (remainder n 10))))))\n",
    "  (if (= (modulo n 11) 0)\n      #t\n      #f))\n",
    "  (if (= n 0)\n      #t\n      (if (= n 1)\n          #f\n          (if (= n 2)\n              #t\n              (if (= n 3)\n                  #f\n                  (if (= n 4)\n                      #t\n                      (if (= n 5)\n                          #f\n                          (if (= n 6)\n                              #t\n                              (if (= n 7)\n                                  #f\n                                  (if (= n 8)\n                                      #t\n                                      (if (= n 9)\n                                          #f\n                                          (if (= n 10)\n                                              #t\n                                              (is_Diff (- n 11)))))))))))))))\n",
    "  (if (zero? n)\n      #t\n      (let ([d (modulo n 10)]\n            [n (quotient n 10)])\n        (if (zero? n)\n            #t\n            (is_Diff (- n d))))))\n",
    "  (if (= (modulo n 11) 0)\n      #t\n      #f))\n",
    "  (if (= (modulo n 11) 0)\n      #t\n      #f))\n",
    "  (let loop ([n (number->string n)]\n             [i 0]\n             [j 0])\n    (cond [(empty? n) (= i j)]\n          [(= (modulo i 11) (modulo j 11))\n           (loop (rest n) (+ i (string->number (first n))) j)]\n          [else\n           (loop (rest n) i (+ j (string->number (first n))))])))\n",
    "  (define (is_Diff_helper n1 n2)\n    (if (zero? n1)\n        (if (zero? n2)\n            #t\n            #f)\n        (is_Diff_helper (quotient n1 10) (+ (remainder n1 10) n2))))\n  (is_Diff_helper n 0))\n",
    "  (cond\n    [(= n 0) #t]\n    [(= n 1) #f]\n    [(= n 2) #f]\n    [(= n 3) #t]\n    [(= n 4) #f]\n    [(= n 5) #t]\n    [(= n 6) #f]\n    [(= n 7) #t]\n    [(= n 8) #f]\n    [(= n 9) #t]\n    [(= n 10) #f]\n    [(= n 11) #t]\n    [(= n 12) #f]\n    [(= n 13) #t]\n    [(= n 14) #f]\n    [(= n 15) #t]\n    [(= n 16) #f]\n    [(= n 17) #t]\n    [(= n 18) #f]\n    [(= n 19) #t]\n    [(= n 20) #f]\n    [(= n 21) #t]\n    [(= n 22) #f]\n    [(= n 23) #t]\n    [(= n 24) #f]\n    [(= n 25) #t]\n    [(= n 26) #f]\n    [(= n 27) #t]\n    [(= n 28) #f]\n    [(= n 29) #t]\n    [(= n 30) #f]\n    [(= n 31) #t]\n    [(= n 32) #f]\n    [(= n 33) #t]\n    [(= n 34) #f]\n    [(= n 35) #t]\n    [(= n 36) #f]\n    [(= n 37) #t]\n    [(= n 38) #f]\n    [(= n 39) #t]\n    [(= n 40) #f]\n    [(= n 41) #t]\n    [(= n 42) #f]\n    [(= n 43) #t]\n    [(= n 44) #f]\n    [(= n 45) #t]\n    [(= n 46) #f]\n    [(= n 47) #t]\n    [(= n 48) #f]\n    [(= n 49) #t]\n    [(= n 50) #",
    "  (if (zero? n)\n      #t\n      (let ([d (modulo n 10)]\n            [n (quotient n 10)])\n        (if (zero? n)\n            #f\n            (if (zero? (modulo (- d (modulo n 10)) 11))\n                (is_Diff (quotient n 10))\n                #f)))))\n",
    "  (define (is_Diff_helper n sum)\n    (cond ((= n 0) (= (modulo sum 11) 0))\n          ((= (modulo n 10) 0) (is_Diff_helper (quotient n 10) sum))\n          ((= (modulo n 10) 1) (is_Diff_helper (quotient n 10) (+ sum 1)))\n          ((= (modulo n 10) 2) (is_Diff_helper (quotient n 10) (+ sum 2)))\n          ((= (modulo n 10) 3) (is_Diff_helper (quotient n 10) (+ sum 3)))\n          ((= (modulo n 10) 4) (is_Diff_helper (quotient n 10) (+ sum 4)))\n          ((= (modulo n 10) 5) (is_Diff_helper (quotient n 10) (+ sum 5)))\n          ((= (modulo n 10) 6) (is_Diff_helper (quotient n 10) (+ sum 6)))\n          ((= (modulo n 10) 7) (is_Diff_helper (quotient n 10) (+ sum 7)))\n          ((= (modulo n 10) 8) (is_Diff_helper (quotient n 10) (+ sum 8)))\n          ((= (modulo n 10) 9) (is_Diff_helper (quotient n 10) (+ sum 9)))\n          ((= (modulo n 10) 10) (is_Diff_helper (quotient n 10) (+ sum 10)))))\n  (is_Diff_helper n 0))\n",
    "  (if (zero? n)\n      #t\n      (let ([n (abs n)])\n        (let loop ([n n] [s 0])\n          (if (zero? n)\n              (zero? (modulo s 11))\n              (loop (quotient n 10) (+ (modulo n 10) s)))))))\n",
    "  (cond\n    [(= n 0) #t]\n    [(= n 11) #t]\n    [(= n (- 11 (modulo n 11))) #t]\n    [else #f]))\n",
    "  (cond\n    [(= n 0) #t]\n    [(= n 1) #f]\n    [(= n 2) #t]\n    [(= n 3) #f]\n    [(= n 4) #t]\n    [(= n 5) #f]\n    [(= n 6) #t]\n    [(= n 7) #f]\n    [(= n 8) #t]\n    [(= n 9) #f]\n    [(= n 10) #t]\n    [(= n 11) #f]\n    [(= n 12) #t]\n    [(= n 13) #f]\n    [(= n 14) #t]\n    [(= n 15) #f]\n    [(= n 16) #t]\n    [(= n 17) #f]\n    [(= n 18) #t]\n    [(= n 19) #f]\n    [(= n 20) #t]\n    [(= n 21) #f]\n    [(= n 22) #t]\n    [(= n 23) #f]\n    [(= n 24) #t]\n    [(= n 25) #f]\n    [(= n 26) #t]\n    [(= n 27) #f]\n    [(= n 28) #t]\n    [(= n 29) #f]\n    [(= n 30) #t]\n    [(= n 31) #f]\n    [(= n 32) #t]\n    [(= n 33) #f]\n    [(= n 34) #t]\n    [(= n 35) #f]\n    [(= n 36) #t]\n    [(= n 37) #f]\n    [(= n 38) #t]\n    [(= n 39) #f]\n    [(= n 40) #t]\n    [(= n 41) #f]\n    [(= n 42) #t]\n    [(= n 43) #f]\n    [(= n 44) #t]\n    [(= n 45) #f]\n    [(= n 46) #t]\n    [(= n 47) #f]\n    [(= n 48) #t]\n    [(= n 49) #f]\n    [(= n 50) #",
    "  (if (zero? n)\n      #t\n      (let* ([d (modulo n 10)]\n             [n (quotient n 10)])\n        (if (zero? n)\n            #f\n            (is_Diff (- n (* 2 d)))))))\n",
    "  (if (zero? n)\n      #t\n      (let* ([s (string->number (number->string n))]\n             [d (modulo s 11)])\n        (if (zero? d)\n            #t\n            (is_Diff (- n d))))))\n",
    "  (if (zero? n)\n      #t\n      (let ([n (abs n)])\n        (let loop ([n n] [sum 0])\n          (if (zero? n)\n              (zero? (modulo sum 11))\n              (loop (quotient n 10) (+ (modulo n 10) sum)))))))\n",
    "  (cond ((= n 0) #t)\n        ((= n 1) #f)\n        ((= n 2) #t)\n        ((= n 3) #f)\n        ((= n 4) #t)\n        ((= n 5) #f)\n        ((= n 6) #t)\n        ((= n 7) #f)\n        ((= n 8) #t)\n        ((= n 9) #f)\n        ((= n 10) #t)\n        ((= n 11) #f)\n        ((= n 12) #t)\n        ((= n 13) #f)\n        ((= n 14) #t)\n        ((= n 15) #f)\n        ((= n 16) #t)\n        ((= n 17) #f)\n        ((= n 18) #t)\n        ((= n 19) #f)\n        ((= n 20) #t)\n        ((= n 21) #f)\n        ((= n 22) #t)\n        ((= n 23) #f)\n        ((= n 24) #t)\n        ((= n 25) #f)\n        ((= n 26) #t)\n        ((= n 27) #f)\n        ((= n 28) #t)\n        ((= n 29) #f)\n        ((= n 30) #t)\n        ((= n 31) #f)\n        ((= n 32) #t)\n        ((= n 33) #f)\n        ((= n 34) #t)\n        ((= n 35) #f)\n        ((= n 36) #t)\n        ((= n 37) #f)\n        ((= n 38) #t)\n        ((= n 39) #f)\n        ((= n 40) #t)\n        ((= n 41) #f)\n        ((= n 42) #t)\n        ((= n 43) #f)\n        ((= n 44) #t)\n        ((= n 45) #f)\n        ((= n 46) #t)\n        ((= n 47) #f)\n        ((= n 48) #t)\n        ((= n 49) #f)\n        ((= n 50) #t)",
    "  (if (= 0 (modulo n 11))\n      #t\n      #f))\n",
    "  (define (is_Diff_helper n1 n2)\n    (if (zero? n1)\n        (if (zero? n2)\n            #t\n            #f)\n        (is_Diff_helper (quotient n1 10) (+ (remainder n1 10) n2))))\n  (is_Diff_helper n 0))\n",
    "  (if (= 0 (modulo n 11))\n      #t\n      #f))\n",
    "  (if (= (modulo n 11) 0)\n      #t\n      #f))\n",
    "  (if (zero? n)\n      #f\n      (let ([d (modulo n 10)])\n        (if (zero? d)\n            (is_Diff (quotient n 10))\n            (let ([d (modulo n 10)])\n              (if (zero? d)\n                  (is_Diff (quotient n 10))\n                  (let ([d (modulo n 10)])\n                    (if (zero? d)\n                        (is_Diff (quotient n 10))\n                        (let ([d (modulo n 10)])\n                          (if (zero? d)\n                              (is_Diff (quotient n 10))\n                              (let ([d (modulo n 10)])\n                                (if (zero? d)\n                                    (is_Diff (quotient n 10))\n                                    (let ([d (modulo n 10)])\n                                      (if (zero? d)\n                                          (is_Diff (quotient n 10))\n                                          (let ([d (modulo n 10)])\n                                            (if (zero? d)\n                                                (is_Diff (quotient n 10))\n                                                (let ([d (modulo n 10)])\n                                                  (if (zero? d)\n                                                      (is_Diff (quotient n 10))\n                                                      (let ([d (modulo n 10)])\n                                                        (if (zero? d)\n                                                            (is_Diff (quotient n 10))\n                                                            (let ([d (modulo n 10)])\n                                                              (if (zero? d)\n                                                                  (is_Diff (quotient n 10))\n                                                                  (let ([d (modulo n 10)])\n                                                                    (if (zero? d)\n                                                                        (is_Diff (quotient n 10))\n                                                                        (let ([d (modulo n 10)])\n                                                                          (if (zero? d)\n                                                                              (is_Diff (quotient n 10))\n                                                                              (let ([d (modulo n 10)])\n                                                                ",
    "  (let ([n (string->number (number->string n))])\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #f]\n      [(= n 2) #f]\n      [(= n 3) #f]\n      [(= n 4) #f]\n      [(= n 5) #f]\n      [(= n 6) #f]\n      [(= n 7) #f]\n      [(= n 8) #f]\n      [(= n 9) #f]\n      [(= n 10) #f]\n      [(= n 11) #t]\n      [(= n 12) #f]\n      [(= n 13) #f]\n      [(= n 14) #f]\n      [(= n 15) #f]\n      [(= n 16) #f]\n      [(= n 17) #f]\n      [(= n 18) #f]\n      [(= n 19) #f]\n      [(= n 20) #f]\n      [(= n 21) #t]\n      [(= n 22) #f]\n      [(= n 23) #f]\n      [(= n 24) #f]\n      [(= n 25) #f]\n      [(= n 26) #f]\n      [(= n 27) #f]\n      [(= n 28) #f]\n      [(= n 29) #f]\n      [(= n 30) #f]\n      [(= n 31) #t]\n      [(= n 32) #f]\n      [(= n 33) #f]\n      [(= n 34) #f]\n      [(= n 35) #f]\n      [(= n 36) #f]\n      [(= n 37) #f]\n      [(= n 38) #f]\n      [(= n 39) #f]\n      [(= n 40) #f]\n      [(= n 41) #t]\n      [(= n 42) #f]\n      [(= n 43) #f]\n      [(= n 44) #f]\n      [(= n 45) #f]\n      [(= n 46) #f]\n      [(= n 47) #f]\n      [(= n 48) #f]\n",
    "  (let loop ([n (number->string n)]\n             [s1 0]\n             [s2 0])\n    (cond [(empty? n) (= (- s1 s2) 0)]\n          [else (loop (rest n)\n                      (+ s1 (string->number (first n)))\n                      (+ s2 (string->number (first n))))])))\n",
    "  (if (zero? n)\n      #t\n      (let ([n (abs n)])\n        (let loop ([n n] [sum 0])\n          (if (zero? n)\n              (zero? (modulo sum 11))\n              (loop (quotient n 10) (+ (modulo n 10) sum)))))))\n",
    "  (let ((n (string->number (number->string n))))\n    (if (zero? (modulo n 11))\n        #t\n        #f)))\n",
    "  (if (zero? n)\n      #t\n      (let ([n (abs n)])\n        (let loop ([n n] [d 0])\n          (if (zero? n)\n              (zero? d)\n              (loop (quotient n 10)\n                    (modulo (+ (modulo n 10) d) 11)))))))\n",
    "  (if (zero? n)\n      #t\n      (let ([n (abs n)])\n        (let loop ([n n] [sum 0])\n          (if (zero? n)\n              (zero? (modulo sum 11))\n              (loop (quotient n 10) (+ sum (remainder n 10))))))))\n",
    "  (if (zero? n)\n      #t\n      (let* ([n (abs n)]\n             [n (string->number (string-join (reverse (string->list (number->string n)))))])\n        (is_Diff (- n)))))\n",
    "  (cond\n    [(= n 0) #t]\n    [(= n 1) #f]\n    [(= n -1) #f]\n    [else (is_Diff (- n (if (odd? n) 11 1)))]))\n",
    "  (if (= (remainder n 11) 0)\n      #t\n      #f))\n",
    "  (if (zero? n)\n      #t\n      (let ([d (modulo n 10)])\n        (is_Diff (quotient (- n d) 10)))))\n",
    "  (if (zero? n)\n      #t\n      (let* ([s (string->number (number->string n))]\n             [d (modulo s 11)])\n        (if (zero? d)\n            #t\n            (is_Diff (- n d))))))\n",
    "  (if (= (modulo n 11) 0)\n      #t\n      #f))\n",
    "  (if (zero? n)\n      #t\n      (let ([n (abs n)])\n        (let loop ([n n] [sum 0])\n          (if (zero? n)\n              (zero? (modulo sum 11))\n              (loop (quotient n 10) (+ sum (remainder n 10))))))))\n",
    "  (let ((n (string->number (number->string n))))\n    (if (zero? (modulo n 11))\n        #t\n        #f)))\n",
    "  (if (= (modulo n 11) 0)\n      #t\n      #f))\n",
    "  (define (is_Diff_iter n s)\n    (cond ((= n 0) #f)\n          ((= n s) #t)\n          ((&lt; n s) (is_Diff_iter (- n s) s))\n          (else (is_Diff_iter (- n s) (- s n)))))\n  (is_Diff_iter n n))\n",
    "  (if (zero? n)\n      #t\n      (let ([n (abs n)])\n        (if (zero? (modulo n 11))\n            #t\n            (let ([n (modulo n 11)])\n              (if (zero? n)\n                  #t\n                  (let ([n (abs n)])\n                    (if (zero? (modulo n 11))\n                        #t\n                        (let ([n (modulo n 11)])\n                          (if (zero? n)\n                              #t\n                              (let ([n (abs n)])\n                                (if (zero? (modulo n 11))\n                                    #t\n                                    (let ([n (modulo n 11)])\n                                      (if (zero? n)\n                                          #t\n                                          (let ([n (abs n)])\n                                            (if (zero? (modulo n 11))\n                                                #t\n                                                (let ([n (modulo n 11)])\n                                                  (if (zero? n)\n                                                      #t\n                                                      (let ([n (abs n)])\n                                                        (if (zero? (modulo n 11))\n                                                            #t\n                                                            (let ([n (modulo n 11)])\n                                                              (if (zero? n)\n                                                                  #t\n                                                                  (let ([n (abs n)])\n                                                                    (if (zero? (modulo n 11))\n                                                                        #t\n                                                                        (let ([n (modulo n 11)])\n                                                                          (if (zero? n)\n                                                                              #t\n                                                                              (let ([n (abs n)])\n                                                                                (if (zero? (modulo n 11))\n                                                                                    #t\n                                                                                    (let ([n (modulo n 11)])\n                                                                                      (if (zero? n)\n                                                                                          #t\n                                                                                          (let ([n (abs n)])\n                                                                                            (if (zero? (modulo n 11))\n                                                                ",
    "  (if (zero? n)\n      #t\n      (let ([n (abs n)])\n        (let loop ([n n] [s 0])\n          (if (zero? n)\n              (zero? (modulo s 11))\n              (loop (quotient n 10) (+ (modulo n 10) s)))))))\n",
    "  (if (zero? n)\n      #t\n      (let ([d (modulo n 10)]\n            [n (quotient n 10)])\n        (if (zero? n)\n            #f\n            (if (zero? (modulo (+ d (quotient n 10)) 11))\n                (is_Diff (quotient n 10))\n                #f)))))\n",
    "  (let ([n (string->number (number->string n))])\n    (if (zero? (modulo n 11))\n        #t\n        #f)))\n",
    "  (let loop ([n (number->string n)]\n             [i 0]\n             [odd_sum 0]\n             [even_sum 0])\n    (if (zero? (string-length n))\n        (= (- odd_sum even_sum) 0)\n        (if (odd? i)\n            (loop (substring n 1) (+ i 1) (+ odd_sum (string->number (substring n 0 1))) even_sum)\n            (loop (substring n 1) (+ i 1) odd_sum (+ even_sum (string->number (substring n 0 1))))))))\n",
    "  (if (= (modulo n 11) 0)\n      #t\n      #f))\n",
    "  (let loop ((n (number->string n))\n             (sum 0))\n    (if (null? n)\n        (= (modulo sum 11) 0)\n        (loop (cdr n)\n              (+ sum (string->number (list-ref n 0)))))))\n",
    "  (let loop ([n n] [sum 0])\n    (if (zero? n)\n        (zero? (modulo sum 11))\n        (loop (quotient n 10) (+ (remainder n 10) sum)))))\n",
    "  (let ([n (string->number (number->string n))])\n    (if (zero? (modulo n 11))\n        #t\n        #f)))\n",
    "  (if (zero? n)\n      #t\n      (let ([n (abs n)])\n        (let loop ([n (number->string n)]\n                   [i 0]\n                   [j 0])\n          (if (null? n)\n              (zero? (- i j))\n              (loop (cdr n)\n                    (+ i (string-&gt;number (car n)))\n                    (+ j (string-&gt;number (car n)))))))))\n</code>\n",
    "  (if (= n 0)\n      #t\n      (if (= n 1)\n          #f\n          (if (= n 2)\n              #t\n              (if (= n 3)\n                  #f\n                  (if (= n 4)\n                      #t\n                      (if (= n 5)\n                          #f\n                          (if (= n 6)\n                              #t\n                              (if (= n 7)\n                                  #f\n                                  (if (= n 8)\n                                      #t\n                                      (if (= n 9)\n                                          #f\n                                          (if (= n 10)\n                                              #t\n                                              (is_Diff (- n 11)))))))))))))))\n",
    "  (define (is_Diff_iter n1 n2)\n    (if (= n1 0)\n        (if (= n2 0)\n            #t\n            #f)\n        (is_Diff_iter (- n1 1) (- n2 (modulo n1 10)))))\n  (is_Diff_iter n 0))\n",
    "  (if (zero? n)\n      #t\n      (let ([d (modulo n 10)])\n        (is_Diff (quotient (- n d) 10)))))\n",
    "  (cond\n    [(zero? n) #t]\n    [(zero? (modulo n 11)) #t]\n    [else #f]))\n",
    "  (if (zero? n)\n      #t\n      (let ([n (string->number (string-append (number->string (modulo n 11))\n                                             (number->string (quotient n 11))))])\n        (is_Diff n))))\n",
    "  (cond\n    [(= n 0) #t]\n    [(= n 11) #t]\n    [(= n 22) #t]\n    [(= n 33) #t]\n    [(= n 44) #t]\n    [(= n 55) #t]\n    [(= n 66) #t]\n    [(= n 77) #t]\n    [(= n 88) #t]\n    [(= n 99) #t]\n    [else #f]))\n",
    "  (let loop ((n (number->string n))\n             (sum 0))\n    (cond ((null? n)\n           (= (modulo sum 11) 0))\n          ((= (modulo (string->number (string-ref n 0)) 2) 0)\n           (loop (string-drop n 1)\n                 (+ sum (string->number (string-ref n 0)))))\n          (else (loop (string-drop n 1)\n                      (- sum (string->number (string-ref n 0))))))))\n",
    "  (if (= (modulo n 11) 0)\n      #t\n      #f))\n",
    "  (define (is_Diff_helper n)\n    (cond [(zero? n) 0]\n          [(even? n) (is_Diff_helper (/ n 10))]\n          [else (is_Diff_helper (/ (- n 1) 10))]))\n  (cond [(zero? n) #f]\n        [(zero? (is_Diff_helper n)) #t]\n        [else #f]))\n",
    "  (cond\n    [(= n 0) #t]\n    [(= n 1) #f]\n    [(= n 2) #f]\n    [(= n 3) #t]\n    [(= n 4) #f]\n    [(= n 5) #t]\n    [(= n 6) #f]\n    [(= n 7) #t]\n    [(= n 8) #f]\n    [(= n 9) #t]\n    [(= n 10) #f]\n    [(= n 11) #t]\n    [(= n 12) #f]\n    [(= n 13) #t]\n    [(= n 14) #f]\n    [(= n 15) #t]\n    [(= n 16) #f]\n    [(= n 17) #t]\n    [(= n 18) #f]\n    [(= n 19) #t]\n    [(= n 20) #f]\n    [(= n 21) #t]\n    [(= n 22) #f]\n    [(= n 23) #t]\n    [(= n 24) #f]\n    [(= n 25) #t]\n    [(= n 26) #f]\n    [(= n 27) #t]\n    [(= n 28) #f]\n    [(= n 29) #t]\n    [(= n 30) #f]\n    [(= n 31) #t]\n    [(= n 32) #f]\n    [(= n 33) #t]\n    [(= n 34) #f]\n    [(= n 35) #t]\n    [(= n 36) #f]\n    [(= n 37) #t]\n    [(= n 38) #f]\n    [(= n 39) #t]\n    [(= n 40) #f]\n    [(= n 41) #t]\n    [(= n 42) #f]\n    [(= n 43) #t]\n    [(= n 44) #f]\n    [(= n 45) #t]\n    [(= n 46) #f]\n    [(= n 47) #t]\n    [(= n 48) #f]\n    [(= n 49) #t]\n    [(= n 50) #",
    "  (let ([n (number->string n)])\n    (let loop ([i 0] [sum 0])\n      (cond\n        [(= i (string-length n)) (= 0 (modulo sum 11))]\n        [else (loop (+ i 1) (+ sum (string-&gt;number (string-ref n i))))]))))\n",
    "  (if (zero? n)\n      #f\n      (let ([n (abs n)])\n        (let loop ([n n] [s 0])\n          (if (zero? n)\n              (zero? (modulo s 11))\n              (loop (quotient n 10) (+ s (remainder n 10))))))))\n",
    "  (if (= (modulo n 11) 0)\n      #t\n      #f))\n",
    "  (let loop ((n n) (sum 0))\n    (if (zero? n)\n        (zero? sum)\n        (loop (quotient n 10) (+ sum (remainder n 10))))))\n",
    "  (if (zero? n)\n      #t\n      (let ([n (abs n)])\n        (let loop ([n n] [sum 0])\n          (if (zero? n)\n              (zero? (modulo sum 11))\n              (loop (quotient n 10) (+ sum (remainder n 10))))))))\n",
    "  (cond\n    [(= n 0) #t]\n    [(= n 1) #f]\n    [(= (modulo n 11) 0) #t]\n    [else #f]))\n",
    "  (cond\n    [(= n 0) #t]\n    [(= n 1) #f]\n    [(= n 2) #t]\n    [(= n 3) #f]\n    [(= n 4) #t]\n    [(= n 5) #f]\n    [(= n 6) #t]\n    [(= n 7) #f]\n    [(= n 8) #t]\n    [(= n 9) #f]\n    [(= n 10) #t]\n    [(= n 11) #f]\n    [(= n 12) #t]\n    [(= n 13) #f]\n    [(= n 14) #t]\n    [(= n 15) #f]\n    [(= n 16) #t]\n    [(= n 17) #f]\n    [(= n 18) #t]\n    [(= n 19) #f]\n    [(= n 20) #t]\n    [(= n 21) #f]\n    [(= n 22) #t]\n    [(= n 23) #f]\n    [(= n 24) #t]\n    [(= n 25) #f]\n    [(= n 26) #t]\n    [(= n 27) #f]\n    [(= n 28) #t]\n    [(= n 29) #f]\n    [(= n 30) #t]\n    [(= n 31) #f]\n    [(= n 32) #t]\n    [(= n 33) #f]\n    [(= n 34) #t]\n    [(= n 35) #f]\n    [(= n 36) #t]\n    [(= n 37) #f]\n    [(= n 38) #t]\n    [(= n 39) #f]\n    [(= n 40) #t]\n    [(= n 41) #f]\n    [(= n 42) #t]\n    [(= n 43) #f]\n    [(= n 44) #t]\n    [(= n 45) #f]\n    [(= n 46) #t]\n    [(= n 47) #f]\n    [(= n 48) #t]\n    [(= n 49) #f]\n    [(= n 50) #",
    "  (let ([s (number->string n)])\n    (let loop ([i 0] [j (string-length s)])\n      (if (= i j)\n          #f\n          (let ([d (string-ref s i)])\n            (if (char=? d #\\0)\n                (loop (+ i 1) j)\n                (let ([d2 (string-ref s (- j 1))])\n                  (if (char=? d2 #\\0)\n                      (loop (+ i 1) (- j 1))\n                      (let ([d1 (string->number (string d))]\n                            [d2 (string->number (string d2))])\n                        (if (= (% (- d1 d2) 11) 0)\n                            #t\n                            (loop (+ i 1) (- j 1)))))))))))))\n",
    "  (if (= n 0)\n      #t\n      (let ([n (abs n)])\n        (if (= (modulo n 11) 0)\n            #t\n            (is_Diff (- (quotient n 10) (modulo n 10)))))))\n",
    "  (let loop ([n n] [i 0])\n    (cond [(zero? n) (= i 0)]\n          [(zero? (modulo n 10)) (loop (quotient n 10) i)]\n          [else (loop (quotient n 10) (+ i (modulo n 10)))])))\n",
    "  (cond\n    [(= n 0) #t]\n    [(= n 1) #f]\n    [(= n 2) #f]\n    [(= n 3) #t]\n    [(= n 4) #f]\n    [(= n 5) #t]\n    [(= n 6) #f]\n    [(= n 7) #t]\n    [(= n 8) #f]\n    [(= n 9) #t]\n    [(= n 10) #f]\n    [(= n 11) #t]\n    [(= n 12) #f]\n    [(= n 13) #t]\n    [(= n 14) #f]\n    [(= n 15) #t]\n    [(= n 16) #f]\n    [(= n 17) #t]\n    [(= n 18) #f]\n    [(= n 19) #t]\n    [(= n 20) #f]\n    [(= n 21) #t]\n    [(= n 22) #f]\n    [(= n 23) #t]\n    [(= n 24) #f]\n    [(= n 25) #t]\n    [(= n 26) #f]\n    [(= n 27) #t]\n    [(= n 28) #f]\n    [(= n 29) #t]\n    [(= n 30) #f]\n    [(= n 31) #t]\n    [(= n 32) #f]\n    [(= n 33) #t]\n    [(= n 34) #f]\n    [(= n 35) #t]\n    [(= n 36) #f]\n    [(= n 37) #t]\n    [(= n 38) #f]\n    [(= n 39) #t]\n    [(= n 40) #f]\n    [(= n 41) #t]\n    [(= n 42) #f]\n    [(= n 43) #t]\n    [(= n 44) #f]\n    [(= n 45) #t]\n    [(= n 46) #f]\n    [(= n 47) #t]\n    [(= n 48) #f]\n    [(= n 49) #t]\n    [(= n 50) #",
    "  (let loop ([n n] [sum 0])\n    (cond [(zero? n) (= (remainder sum 11) 0)]\n          [else (loop (quotient n 10) (+ sum (remainder n 10)))])))\n",
    "  (if (zero? n)\n      #t\n      (let ((n (abs n)))\n        (let loop ((n (number->string n))\n                   (i 0)\n                   (j 0))\n          (if (zero? (string-length n))\n              (zero? (- i j))\n              (let ((d (string->number (string-ref n 0))))\n                (loop (substring n 1)\n                      (+ i d)\n                      (- j d))))))))\n",
    "  (if (zero? n)\n      #t\n      (let ([d (modulo n 10)])\n        (if (zero? d)\n            (is_Diff (quotient n 10))\n            (let ([d2 (modulo (quotient n 10) 10)])\n              (if (zero? d2)\n                  (is_Diff (quotient n 10))\n                  (if (zero? (modulo (- d d2) 11))\n                      #t\n                      #f)))))))\n",
    "  (let loop ([n n])\n    (cond\n      [(zero? n) #t]\n      [(zero? (modulo n 11)) #f]\n      [else (loop (modulo n 11))])))\n",
    "  (if (zero? n)\n      #t\n      (let ([n (string->number (string-append (number->string (modulo n 10)) (number->string (modulo (quotient n 10) 10))))])\n        (if (zero? n)\n            #t\n            (is_Diff n)))))\n",
    "  (if (= (modulo n 11) 0)\n      #t\n      #f))\n",
    "  (if (= 0 (modulo n 11))\n      #t\n      #f))\n",
    "  (if (= (modulo n 11) 0)\n      #t\n      #f))\n",
    "  (if (zero? n)\n      #t\n      (let ([d (modulo n 10)])\n        (is_Diff (quotient (- n d) 10)))))\n",
    "  (if (zero? n)\n      #t\n      (let* ([s (string->number (number->string n))]\n             [d (string->number (number->string (remainder n 11)))])\n        (if (zero? d)\n            #t\n            (is_Diff (- s d))))))\n",
    "  (if (= 0 (modulo n 11))\n      #t\n      #f))\n",
    "  (if (zero? n)\n      #t\n      (let ([n (string->number (string-append (number->string (quotient n 10)) (number->string (remainder n 10))))])\n        (if (zero? n)\n            #t\n            (is_Diff n)))))\n",
    "  (let loop ((n (number->string n))\n             (sum1 0)\n             (sum2 0))\n    (cond ((null? n) (= (abs (- sum1 sum2)) 11))\n          (else (loop (cdr n)\n                      (+ sum1 (string->number (car n)))\n                      (+ sum2 (string->number (car (cdr n)))))))))\n",
    "  (let loop ((n (abs n))\n             (sum 0))\n    (cond ((zero? n) (= (abs sum) 11))\n          ((even? n) (loop (quotient n 2) (+ sum (remainder n 2))))\n          (else (loop (quotient n 2) (- sum (remainder n 2)))))))\n",
    "  (if (zero? n)\n      #t\n      (let ([d (modulo n 10)])\n        (if (zero? d)\n            (is_Diff (quotient n 10))\n            (let ([d2 (modulo (quotient n 10) 10)])\n              (if (zero? d2)\n                  (is_Diff (quotient n 10))\n                  (if (zero? (modulo (- d d2) 11))\n                      #t\n                      #f)))))))\n",
    "  (cond\n    [(= n 0) #t]\n    [(= n 1) #f]\n    [(= n 2) #f]\n    [(= n 3) #t]\n    [(= n 4) #f]\n    [(= n 5) #t]\n    [(= n 6) #f]\n    [(= n 7) #t]\n    [(= n 8) #f]\n    [(= n 9) #t]\n    [(= n 10) #f]\n    [(= n 11) #t]\n    [(= n 12) #f]\n    [(= n 13) #t]\n    [(= n 14) #f]\n    [(= n 15) #t]\n    [(= n 16) #f]\n    [(= n 17) #t]\n    [(= n 18) #f]\n    [(= n 19) #t]\n    [(= n 20) #f]\n    [(= n 21) #t]\n    [(= n 22) #f]\n    [(= n 23) #t]\n    [(= n 24) #f]\n    [(= n 25) #t]\n    [(= n 26) #f]\n    [(= n 27) #t]\n    [(= n 28) #f]\n    [(= n 29) #t]\n    [(= n 30) #f]\n    [(= n 31) #t]\n    [(= n 32) #f]\n    [(= n 33) #t]\n    [(= n 34) #f]\n    [(= n 35) #t]\n    [(= n 36) #f]\n    [(= n 37) #t]\n    [(= n 38) #f]\n    [(= n 39) #t]\n    [(= n 40) #f]\n    [(= n 41) #t]\n    [(= n 42) #f]\n    [(= n 43) #t]\n    [(= n 44) #f]\n    [(= n 45) #t]\n    [(= n 46) #f]\n    [(= n 47) #t]\n    [(= n 48) #f]\n    [(= n 49) #t]\n    [(= n 50) #",
    "  (if (= 0 (modulo n 11))\n      #t\n      #f))\n",
    "  (define (sum_digits n)\n    (if (zero? n)\n        0\n        (+ (remainder n 10) (sum_digits (quotient n 10)))))\n  (define (is_Diff_helper n)\n    (if (zero? n)\n        #t\n        (if (zero? (remainder n 11))\n            #t\n            #f)))\n  (is_Diff_helper (abs (- (sum_digits n) (sum_digits (quotient n 10))))))\n",
    "  (if (= 0 (modulo n 11))\n      #t\n      #f))\n",
    "  (let loop ([n n] [sum 0])\n    (cond\n      [(zero? n) (= sum 0)]\n      [else (loop (quotient n 10) (+ sum (remainder n 10)))])))\n",
    "  (if (= 0 (modulo n 11))\n      #t\n      #f))\n",
    "  (if (= 0 (modulo n 11))\n      #t\n      #f))\n",
    "  (if (= (modulo n 11) 0)\n      #t\n      #f))\n",
    "  (if (= n 0)\n      #t\n      (if (= n 1)\n          #f\n          (if (= (modulo n 11) 0)\n              #t\n              #f))))\n",
    "  (if (zero? n)\n      #t\n      (let ([n (abs n)])\n        (let loop ([n n] [d 0])\n          (if (zero? n)\n              (zero? (modulo d 11))\n              (loop (quotient n 10) (+ d (remainder n 10))))))))\n",
    "  (let ([n (string->number (string-&gt;list n))])\n    (if (zero? (modulo n 11))\n        #t\n        #f)))\n",
    "  (if (= (modulo n 11) 0)\n      #t\n      #f))\n",
    "  (cond\n    [(= n 0) #t]\n    [(= n 1) #f]\n    [(= n 2) #f]\n    [(= n 3) #t]\n    [(= n 4) #f]\n    [(= n 5) #t]\n    [(= n 6) #f]\n    [(= n 7) #t]\n    [(= n 8) #f]\n    [(= n 9) #t]\n    [(= n 10) #f]\n    [(= n 11) #t]\n    [(= n 12) #f]\n    [(= n 13) #t]\n    [(= n 14) #f]\n    [(= n 15) #t]\n    [(= n 16) #f]\n    [(= n 17) #t]\n    [(= n 18) #f]\n    [(= n 19) #t]\n    [(= n 20) #f]\n    [(= n 21) #t]\n    [(= n 22) #f]\n    [(= n 23) #t]\n    [(= n 24) #f]\n    [(= n 25) #t]\n    [(= n 26) #f]\n    [(= n 27) #t]\n    [(= n 28) #f]\n    [(= n 29) #t]\n    [(= n 30) #f]\n    [(= n 31) #t]\n    [(= n 32) #f]\n    [(= n 33) #t]\n    [(= n 34) #f]\n    [(= n 35) #t]\n    [(= n 36) #f]\n    [(= n 37) #t]\n    [(= n 38) #f]\n    [(= n 39) #t]\n    [(= n 40) #f]\n    [(= n 41) #t]\n    [(= n 42) #f]\n    [(= n 43) #t]\n    [(= n 44) #f]\n    [(= n 45) #t]\n    [(= n 46) #f]\n    [(= n 47) #t]\n    [(= n 48) #f]\n    [(= n 49) #t]\n    [(= n 50) #",
    "  (if (= n 0)\n      #t\n      (if (= n 1)\n          #f\n          (if (= n 2)\n              #t\n              (if (= n 3)\n                  #f\n                  (if (= n 4)\n                      #t\n                      (if (= n 5)\n                          #f\n                          (if (= n 6)\n                              #t\n                              (if (= n 7)\n                                  #f\n                                  (if (= n 8)\n                                      #t\n                                      (if (= n 9)\n                                          #f\n                                          (if (= n 10)\n                                              #t\n                                              (is_Diff (- n 11)))))))))))))))\n",
    "  (if (zero? n)\n      #t\n      (let ([d (modulo n 10)])\n        (if (zero? d)\n            (is_Diff (quotient n 10))\n            (let ([d2 (modulo n 100)])\n              (if (zero? d2)\n                  (is_Diff (quotient n 100))\n                  (let ([d3 (modulo n 1000)])\n                    (if (zero? d3)\n                        (is_Diff (quotient n 1000))\n                        (let ([d4 (modulo n 10000)])\n                          (if (zero? d4)\n                              (is_Diff (quotient n 10000))\n                              (let ([d5 (modulo n 100000)])\n                                (if (zero? d5)\n                                    (is_Diff (quotient n 100000))\n                                    (let ([d6 (modulo n 1000000)])\n                                      (if (zero? d6)\n                                          (is_Diff (quotient n 1000000))\n                                          (let ([d7 (modulo n 10000000)])\n                                            (if (zero? d7)\n                                                (is_Diff (quotient n 10000000))\n                                                (let ([d8 (modulo n 100000000)])\n                                                  (if (zero? d8)\n                                                      (is_Diff (quotient n 100000000))\n                                                      (let ([d9 (modulo n 1000000000)])\n                                                        (if (zero? d9)\n                                                            (is_Diff (quotient n 1000000000))\n                                                            (let ([d10 (modulo n 10000000000)])\n                                                              (if (zero? d10)\n                                                                  (is_Diff (quotient n 10000000000))\n                                                                  (let ([d11 (modulo n 100000000000)])\n                                                                    (if (zero? d11)\n                                                                        (is_Diff (quotient n 100000000000))\n                                                                        (let ([d12 (modulo n 1000000000000)])\n                                                                          (if (zero? d12",
    "  (if (zero? n)\n      #t\n      (let ([n (abs n)])\n        (let loop ([n n] [sum 0])\n          (if (zero? n)\n              (zero? (modulo sum 11))\n              (loop (quotient n 10) (+ sum (remainder n 10))))))))\n",
    "  (let ([n (string->number (number->string n))])\n    (if (zero? (modulo n 11))\n        #t\n        #f)))\n",
    "  (let loop ([n n] [i 0])\n    (cond\n      [(= i (string-length n)) #t]\n      [(= (modulo (string->number (substring n i (+ i 1))) 11) 0) #f]\n      [else (loop n (+ i 1))])))\n",
    "  (if (= (modulo n 11) 0)\n      #t\n      #f))\n",
    "  (if (zero? n)\n      #t\n      (let ([n (abs n)])\n        (let loop ([n n] [sum 0])\n          (if (zero? n)\n              (zero? (modulo sum 11))\n              (loop (quotient n 10) (+ (remainder n 10) sum)))))))\n",
    "  (if (zero? n)\n      #t\n      (let* ([a (modulo n 10)]\n             [b (modulo n 100)]\n             [c (modulo n 1000)])\n        (if (and (zero? a) (zero? b) (zero? c))\n            #t\n            (is_Diff (- n (- (* a 100) (* b 10) c)))))))\n",
    "  (if (= (modulo n 11) 0)\n      #t\n      #f))\n",
    "  (let loop ([n n] [count 0])\n    (if (zero? n)\n        (if (zero? count)\n            #t\n            #f)\n        (loop (quotient n 10) (+ count (remainder n 10))))))\n",
    "  (if (= 0 (modulo n 11))\n      #t\n      #f))\n",
    "  (let loop ([n n] [d 0])\n    (cond [(zero? n) (= d 0)]\n          [(zero? (modulo n 10)) (loop (quotient n 10) d)]\n          [else (loop (quotient n 10) (+ d (modulo n 10)))])))\n",
    "  (if (= (modulo n 11) 0)\n      #t\n      #f))\n",
    "  (if (= 0 (remainder n 11))\n      #t\n      #f))\n",
    "  (if (= n 0)\n      #t\n      (let ([d (modulo n 10)])\n        (is_Diff (quotient (- n d) 10)))))\n",
    "  (if (= (modulo n 11) 0)\n      #t\n      #f))\n",
    "  (if (= (modulo n 11) 0)\n      #t\n      #f))\n",
    "  (if (zero? n)\n      #t\n      (let ([d (modulo n 10)])\n        (if (zero? d)\n            (is_Diff (quotient n 10))\n            (let ([d2 (modulo (quotient n 10) 10)])\n              (if (zero? (- d d2))\n                  (is_Diff (quotient n 10))\n                  #f))))))\n",
    "  (if (zero? n)\n      #t\n      (let ([n (abs n)])\n        (let loop ([n n] [d 0])\n          (if (zero? n)\n              (zero? (modulo d 11))\n              (loop (quotient n 10) (+ (modulo n 10) d)))))))\n",
    "  (if (zero? n)\n      #t\n      (is_Diff (modulo (abs (- (modulo n 10) (modulo (quotient n 10) 10))) 11))))\n",
    "  (if (zero? n)\n      #t\n      (let ([n (abs n)])\n        (let loop ([n n] [sum 0])\n          (if (zero? n)\n              (zero? (modulo sum 11))\n              (loop (quotient n 10) (+ sum (remainder n 10))))))))\n",
    "  (let loop ([n n] [i 0])\n    (cond [(zero? n) (= i 0)]\n          [(even? n) (loop (quotient n 10) (+ i (remainder n 10)))]\n          [else (loop (quotient n 10) (- i (remainder n 10)))])))\n",
    "  (cond\n    [(= n 0) #t]\n    [(= n 1) #f]\n    [else\n     (let ([n (abs n)])\n       (let loop ([n n] [d 0])\n         (if (= n 0)\n             (= d 0)\n             (loop (quotient n 10)\n                   (+ (remainder n 10) (- d))))))]))\n",
    "  (define (is_Diff_helper n s)\n    (cond\n      [(= n 0) s]\n      [(= n 1) (not s)]\n      [(= n 2) (not s)]\n      [(= n 3) s]\n      [(= n 4) (not s)]\n      [(= n 5) s]\n      [(= n 6) s]\n      [(= n 7) (not s)]\n      [(= n 8) s]\n      [(= n 9) (not s)]\n      [(= n 10) (not s)]\n      [else (is_Diff_helper (modulo n 11) (not s))]))\n  (is_Diff_helper n #f))\n",
    "  (if (= 0 (modulo n 11))\n      #t\n      #f))\n",
    "  (let loop ([n (number->string n)])\n    (cond\n      [(empty? n) #f]\n      [(empty? (rest n)) #t]\n      [else\n       (let ([d1 (string->number (first n))]\n             [d2 (string->number (second n))])\n         (loop (number->string (- d1 d2))))])))\n",
    "  (if (zero? n)\n      #t\n      (let* ([n (number->string n)]\n             [n (string-&gt;list n)]\n             [n (map string-&gt;number n)]\n             [n (map (lambda (x) (if (odd? x) (- x) x)) n)]\n             [n (apply + n)])\n        (is_Diff n))))\n",
    "  (cond\n    [(= n 0) #t]\n    [(= n 1) #f]\n    [(= n 2) #f]\n    [(= n 3) #t]\n    [(= n 4) #f]\n    [(= n 5) #t]\n    [(= n 6) #f]\n    [(= n 7) #t]\n    [(= n 8) #f]\n    [(= n 9) #t]\n    [(= n 10) #f]\n    [(= n 11) #t]\n    [(= n 12) #f]\n    [(= n 13) #t]\n    [(= n 14) #f]\n    [(= n 15) #t]\n    [(= n 16) #f]\n    [(= n 17) #t]\n    [(= n 18) #f]\n    [(= n 19) #t]\n    [(= n 20) #f]\n    [(= n 21) #t]\n    [(= n 22) #f]\n    [(= n 23) #t]\n    [(= n 24) #f]\n    [(= n 25) #t]\n    [(= n 26) #f]\n    [(= n 27) #t]\n    [(= n 28) #f]\n    [(= n 29) #t]\n    [(= n 30) #f]\n    [(= n 31) #t]\n    [(= n 32) #f]\n    [(= n 33) #t]\n    [(= n 34) #f]\n    [(= n 35) #t]\n    [(= n 36) #f]\n    [(= n 37) #t]\n    [(= n 38) #f]\n    [(= n 39) #t]\n    [(= n 40) #f]\n    [(= n 41) #t]\n    [(= n 42) #f]\n    [(= n 43) #t]\n    [(= n 44) #f]\n    [(= n 45) #t]\n    [(= n 46) #f]\n    [(= n 47) #t]\n    [(= n 48) #f]\n    [(= n 49) #t]\n    [(= n 50) #",
    "  (if (zero? n)\n      #t\n      (let ([n (abs n)])\n        (let loop ([n n] [d 0])\n          (if (zero? n)\n              (= d 11)\n              (loop (quotient n 10) (+ d (remainder n 10))))))))\n",
    "  (define (is_Diff_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [else (+ (is_Diff_helper (- n 2)) (is_Diff_helper (- n 1)))]))\n  (= (is_Diff_helper n) 11))\n",
    "  (if (= n 0)\n      #t\n      (if (= n 1)\n          #f\n          (if (= (modulo n 11) 0)\n              #t\n              #f))))\n",
    "  (if (= (modulo n 11) 0)\n      #t\n      #f))\n",
    "  (let ([n (string->number (string-&gt;list n))])\n    (if (zero? (modulo n 11))\n        #t\n        #f)))\n",
    "  (if (zero? n)\n      #t\n      (let ([n (abs n)])\n        (let loop ([n1 (quotient n 10)])\n          (if (zero? n1)\n              #t\n              (let ([n2 (remainder n1 10)])\n                (loop (quotient (- n1 n2) 10))))))))\n",
    "  (let loop ([n n] [i 0])\n    (cond [(zero? n) (= i 11)]\n          [(even? n) (loop (quotient n 2) (+ i (remainder n 2)))]\n          [else (loop (quotient n 2) (- i (remainder n 2)))])))\n",
    "  (if (= 0 (modulo n 11))\n      #t\n      #f))\n",
    "  (cond\n    [(zero? n) true]\n    [(zero? (modulo n 11)) true]\n    [else false]))\n",
    "  (if (zero? n)\n      #t\n      (let* ([n (string->number (number->string n))]\n             [n (if (even? n)\n                    (- n (/ n 2))\n                    (- n (/ n 2) 1))])\n        (is_Diff n))))\n",
    "  (define (sum-digits n)\n    (if (zero? n)\n        0\n        (+ (remainder n 10) (sum-digits (quotient n 10)))))\n  (if (zero? n)\n      #f\n      (if (zero? (remainder n 11))\n          #t\n          (is_Diff (abs (- n (sum-digits n)))))))\n",
    "  (if (= 0 (modulo n 11))\n      #t\n      #f))\n",
    "  (if (= (modulo n 11) 0)\n      #t\n      #f))\n",
    "  (if (= n 0)\n      #t\n      (if (= n 1)\n          #f\n          (if (= n 2)\n              #t\n              (if (= n 3)\n                  #f\n                  (if (= n 4)\n                      #t\n                      (if (= n 5)\n                          #f\n                          (if (= n 6)\n                              #t\n                              (if (= n 7)\n                                  #f\n                                  (if (= n 8)\n                                      #t\n                                      (if (= n 9)\n                                          #f\n                                          (if (= n 10)\n                                              #t\n                                              (if (= n 11)\n                                                  #f\n                                                  (if (= n 12)\n                                                      #t\n                                                      (if (= n 13)\n                                                          #f\n                                                          (if (= n 14)\n                                                              #t\n                                                              (if (= n 15)\n                                                                  #f\n                                                                  (if (= n 16)\n                                                                      #t\n                                                                      (if (= n 17)\n                                                                          #f\n                                                                          (if (= n 18)\n                                                                              #t\n                                                                              (if (= n 19)\n                                                                                  #f\n                                                                                  (if (= n 20)\n                                                                                      #t\n                                                                                      (if (= n 21)\n                                                                                          #f\n                                                                                          (if (= n 22)\n                                                                                              #t\n                                                                                              (if (= n 23)\n                                                                                                  #f\n                                                                                                  (if (= n 24)\n                                                                                                      #t\n                                                                                                      (if (= n 25)\n                                                                                                          #f\n                                                                                                          (if (= n 26)\n                                                                                                              #t\n                                                                                                              (if (= n 27)\n                                                                                                                  #f\n                                                                                                                  (if (= n 28)\n                                                                                                                      #t\n                ",
    "  (if (zero? n)\n      #t\n      (let ([n (abs n)])\n        (let loop ([n n] [d 0])\n          (if (zero? n)\n              (zero? (modulo d 11))\n              (loop (quotient n 10) (+ (remainder n 10) d)))))))\n",
    "  (if (zero? n)\n      #t\n      (let* ([d (modulo n 10)]\n             [n (quotient n 10)])\n        (if (zero? n)\n            #f\n            (is_Diff (- n d))))))\n",
    "  (cond\n    [(zero? n) #t]\n    [(zero? (remainder n 11)) #t]\n    [else #f]))\n",
    "  (if (= (modulo n 11) 0)\n      #t\n      #f))\n",
    "  (if (zero? n)\n      #t\n      (let ([d (modulo n 10)])\n        (is_Diff (quotient (- n d) 10)))))\n",
    "  (if (= (modulo n 11) 0)\n      #t\n      #f))\n",
    "  (define (is_Diff_iter n1 n2)\n    (cond ((= n1 0) #t)\n          ((= n2 0) #f)\n          (else (is_Diff_iter (- n1 n2) (- n2 n1)))))\n  (is_Diff_iter n n))\n",
    "  (let loop ((n (number->string n))\n             (sum 0))\n    (if (null? n)\n        (= (modulo sum 11) 0)\n        (loop (cdr n)\n              (+ sum (string->number (car n)))))))\n",
    "  (define (is_Diff_helper n1 n2)\n    (cond\n      [(= n1 0) (is_Diff_helper n2 0)]\n      [(= n2 0) #t]\n      [else (is_Diff_helper (- n1 1) (+ n2 1))]))\n  (is_Diff_helper n 0))\n",
    "  (cond\n    [(= n 0) #t]\n    [(= n 1) #f]\n    [(= n 2) #f]\n    [(= n 3) #t]\n    [(= n 4) #f]\n    [(= n 5) #t]\n    [(= n 6) #f]\n    [(= n 7) #t]\n    [(= n 8) #f]\n    [(= n 9) #t]\n    [(= n 10) #f]\n    [(= n 11) #t]\n    [(= n 12) #f]\n    [(= n 13) #t]\n    [(= n 14) #f]\n    [(= n 15) #t]\n    [(= n 16) #f]\n    [(= n 17) #t]\n    [(= n 18) #f]\n    [(= n 19) #t]\n    [(= n 20) #f]\n    [(= n 21) #t]\n    [(= n 22) #f]\n    [(= n 23) #t]\n    [(= n 24) #f]\n    [(= n 25) #t]\n    [(= n 26) #f]\n    [(= n 27) #t]\n    [(= n 28) #f]\n    [(= n 29) #t]\n    [(= n 30) #f]\n    [(= n 31) #t]\n    [(= n 32) #f]\n    [(= n 33) #t]\n    [(= n 34) #f]\n    [(= n 35) #t]\n    [(= n 36) #f]\n    [(= n 37) #t]\n    [(= n 38) #f]\n    [(= n 39) #t]\n    [(= n 40) #f]\n    [(= n 41) #t]\n    [(= n 42) #f]\n    [(= n 43) #t]\n    [(= n 44) #f]\n    [(= n 45) #t]\n    [(= n 46) #f]\n    [(= n 47) #t]\n    [(= n 48) #f]\n    [(= n 49) #t]\n    [(= n 50) #",
    "  (if (= 0 (modulo n 11))\n      #t\n      #f))\n",
    "  (if (= (modulo n 11) 0)\n      #t\n      #f))\n",
    "  (if (= (modulo n 11) 0)\n      #t\n      #f))\n",
    "  (define (is_Diff_helper n1 n2)\n    (if (zero? n1)\n        (if (zero? n2)\n            #t\n            #f)\n        (is_Diff_helper (quotient n1 10) (+ (remainder n1 10) n2))))\n  (is_Diff_helper n 0))\n",
    "  (let loop ([n n] [sum 0])\n    (cond [(zero? n) (= (remainder sum 11) 0)]\n          [else (loop (quotient n 10) (+ (remainder n 10) sum))])))\n",
    "  (cond\n    [(= n 0) #t]\n    [(= n 1) #f]\n    [else\n     (let ([n (abs n)])\n       (let loop ([n n] [sum 0])\n         (if (= n 0)\n             (= (remainder sum 11) 0)\n             (loop (quotient n 10) (+ sum (remainder n 10))))))]))\n",
    "  (if (zero? n)\n      #t\n      (let ([n (abs n)])\n        (let loop ([n n] [d 0])\n          (if (zero? n)\n              (zero? (remainder d 11))\n              (loop (quotient n 10) (+ d (remainder n 10))))))))\n",
    "  (if (= (modulo n 11) 0)\n      #t\n      #f))\n",
    "  (let loop ([n n] [i 0])\n    (cond [(= n 0) (= i 0)]\n          [(= n 1) (= i 1)]\n          [(= n 2) (= i 2)]\n          [(= n 3) (= i 3)]\n          [(= n 4) (= i 4)]\n          [(= n 5) (= i 5)]\n          [(= n 6) (= i 6)]\n          [(= n 7) (= i 7)]\n          [(= n 8) (= i 8)]\n          [(= n 9) (= i 9)]\n          [(= n 10) (= i 10)]\n          [(= n 11) (= i 11)]\n          [(= n 12) (= i 12)]\n          [(= n 13) (= i 13)]\n          [(= n 14) (= i 14)]\n          [(= n 15) (= i 15)]\n          [(= n 16) (= i 16)]\n          [(= n 17) (= i 17)]\n          [(= n 18) (= i 18)]\n          [(= n 19) (= i 19)]\n          [(= n 20) (= i 20)]\n          [(= n 21) (= i 21)]\n          [(= n 22) (= i 22)]\n          [(= n 23) (= i 23)]\n          [(= n 24) (= i 24)]\n          [(= n 25) (= i 25)]\n          [(= n 26) (= i 26)]\n          [(= n 27) (= i 27)]\n          [(= n 28) (= i 28)]\n          [(= n 29) (= i 29)]\n          [(= n 30) (= i 30)]\n          [(= n 31) (= i 31)]\n          [(= n 32) (= i 32)]\n          [(= n 33) (= i 33)]\n          [(= n 34) (= i 34)]\n          [(= n 35) (= i 35)]\n          [(= n 36) (= i 36)]\n          [(= n 37) (= i 37)]\n          [(= n 38) (= i 38)]\n          [(= n 39) (= i 39)]\n          [(= n 40) (= i 40)]\n          [(= n 41) (= i 41)]\n          [(= n 42) (= i 42)]\n          [(= n 43) (= i 43)]\n          [(= n 44) (= i 44)]\n         ",
    "  (cond [(= n 0) #t]\n        [(= n 1) #f]\n        [(= n 2) #f]\n        [(= n 3) #f]\n        [(= n 4) #f]\n        [(= n 5) #f]\n        [(= n 6) #f]\n        [(= n 7) #f]\n        [(= n 8) #f]\n        [(= n 9) #f]\n        [(= n 10) #f]\n        [(= n 11) #t]\n        [(= n 12) #t]\n        [(= n 13) #f]\n        [(= n 14) #f]\n        [(= n 15) #f]\n        [(= n 16) #f]\n        [(= n 17) #f]\n        [(= n 18) #f]\n        [(= n 19) #f]\n        [(= n 20) #f]\n        [(= n 21) #t]\n        [(= n 22) #t]\n        [(= n 23) #f]\n        [(= n 24) #f]\n        [(= n 25) #f]\n        [(= n 26) #f]\n        [(= n 27) #f]\n        [(= n 28) #f]\n        [(= n 29) #f]\n        [(= n 30) #f]\n        [(= n 31) #t]\n        [(= n 32) #t]\n        [(= n 33) #f]\n        [(= n 34) #f]\n        [(= n 35) #f]\n        [(= n 36) #f]\n        [(= n 37) #f]\n        [(= n 38) #f]\n        [(= n 39) #f]\n        [(= n 40) #f]\n        [(= n 41) #t]\n        [(= n 42) #t]\n        [(= n 43) #f]\n        [(= n 44) #f]\n        [(= n 45) #f]\n        [(= n 46) #f]\n        [(= n 47) #f]\n        [(= n 48) #f]\n        [(= n 49) #f]\n        [(= n 50) #f]",
    "  (if (= (modulo n 11) 0)\n      #t\n      #f))\n",
    "  (cond\n    [(= n 0) #t]\n    [(= n 1) #f]\n    [(= n 2) #t]\n    [(= n 3) #f]\n    [(= n 4) #t]\n    [(= n 5) #f]\n    [(= n 6) #t]\n    [(= n 7) #f]\n    [(= n 8) #t]\n    [(= n 9) #f]\n    [(= n 10) #t]\n    [(= n 11) #f]\n    [(= n 12) #t]\n    [(= n 13) #f]\n    [(= n 14) #t]\n    [(= n 15) #f]\n    [(= n 16) #t]\n    [(= n 17) #f]\n    [(= n 18) #t]\n    [(= n 19) #f]\n    [(= n 20) #t]\n    [(= n 21) #f]\n    [(= n 22) #t]\n    [(= n 23) #f]\n    [(= n 24) #t]\n    [(= n 25) #f]\n    [(= n 26) #t]\n    [(= n 27) #f]\n    [(= n 28) #t]\n    [(= n 29) #f]\n    [(= n 30) #t]\n    [(= n 31) #f]\n    [(= n 32) #t]\n    [(= n 33) #f]\n    [(= n 34) #t]\n    [(= n 35) #f]\n    [(= n 36) #t]\n    [(= n 37) #f]\n    [(= n 38) #t]\n    [(= n 39) #f]\n    [(= n 40) #t]\n    [(= n 41) #f]\n    [(= n 42) #t]\n    [(= n 43) #f]\n    [(= n 44) #t]\n    [(= n 45) #f]\n    [(= n 46) #t]\n    [(= n 47) #f]\n    [(= n 48) #t]\n    [(= n 49) #f]\n    [(= n 50) #",
    "  (if (= (modulo n 11) 0)\n      true\n      false))\n",
    "  (if (= n 0)\n      #t\n      (if (= n 1)\n          #f\n          (if (= n 2)\n              #f\n              (if (= n 3)\n                  #t\n                  (if (= n 4)\n                      #f\n                      (if (= n 5)\n                          #t\n                          (if (= n 6)\n                              #f\n                              (if (= n 7)\n                                  #t\n                                  (if (= n 8)\n                                      #f\n                                      (if (= n 9)\n                                          #t\n                                          (if (= n 10)\n                                              #f\n                                              (if (= n 11)\n                                                  #t\n                                                  (if (= n 12)\n                                                      #f\n                                                      (if (= n 13)\n                                                          #t\n                                                          (if (= n 14)\n                                                              #f\n                                                              (if (= n 15)\n                                                                  #t\n                                                                  (if (= n 16)\n                                                                      #f\n                                                                      (if (= n 17)\n                                                                          #t\n                                                                          (if (= n 18)\n                                                                              #f\n                                                                              (if (= n 19)\n                                                                                  #t\n                                                                                  (if (= n 20)\n                                                                                      #f\n                                                                                      (if (= n 21)\n                                                                                          #t\n                                                                                          (if (= n 22)\n                                                                                              #f\n                                                                                              (if (= n 23)\n                                                                                                  #t\n                                                                                                  (if (= n 24)\n                                                                                                      #f\n                                                                                                      (if (= n 25)\n                                                                                                          #t\n                                                                                                          (if (= n 26)\n                                                                                                              #f\n                                                                                                              (if (= n 27)\n                                                                                                                  #t\n                                                                                                                  (if (= n 28)\n                                                                                                                      #f\n                ",
    "  (cond\n    [(= n 0) #t]\n    [(= n 1) #f]\n    [(= n (- n (/ n 11) (* 11 (/ n 11)))) #t]\n    [else #f]))\n",
    "  (let loop ([n (number->string n)]\n             [sum 0])\n    (cond\n      [(empty? n) (= (modulo sum 11) 0)]\n      [else (loop (rest n) (+ sum (string->number (first n))))])))\n",
    "  (if (= 0 (modulo n 11))\n      #t\n      #f))\n",
    "  (define (is_Diff_helper n1 n2)\n    (cond\n      [(zero? n1) (zero? n2)]\n      [(zero? n2) (zero? n1)]\n      [else (is_Diff_helper (quotient n1 10) (quotient n2 10))]))\n  (is_Diff_helper n (- n)))\n",
    "  (cond\n    [(= n 0) true]\n    [(= n 1) false]\n    [else\n     (let ([d (modulo n 11)])\n       (is_Diff (- d (quotient n 11))))]))\n",
    "  (let ([n (string->number (number->string n))])\n    (if (zero? (modulo n 11))\n        #t\n        #f)))\n",
    "  (if (= (modulo n 11) 0)\n      #t\n      #f))\n",
    "  (if (zero? n)\n      #t\n      (let ([d (modulo n 10)])\n        (is_Diff (quotient (- n d) 10)))))\n",
    "  (cond\n    [(= n 0) #t]\n    [(= n 11) #t]\n    [(= n 22) #t]\n    [(= n 33) #t]\n    [(= n 44) #t]\n    [(= n 55) #t]\n    [(= n 66) #t]\n    [(= n 77) #t]\n    [(= n 88) #t]\n    [(= n 99) #t]\n    [else #f]))\n",
    "  (if (= (modulo n 11) 0)\n      #t\n      #f))\n",
    "  (let loop ([n (number->string n)]\n             [i 0]\n             [j 0])\n    (cond\n      [(empty? n)\n       (if (= i j)\n           #t\n           #f)]\n      [(= (modulo i 2) 0)\n       (loop (rest n) (+ i 1) (+ j (string->number (first n))))]\n      [else\n       (loop (rest n) (+ i 1) (- j (string->number (first n))))])))\n",
    "  (let ([s (number->string n)])\n    (let loop ([i 0] [sum 0])\n      (if (= i (string-length s))\n          (= (modulo sum 11) 0)\n          (loop (+ i 1) (+ sum (string-&gt;number (substring s i (+ i 1)))))))))\n",
    "  (if (zero? n)\n      #t\n      (let ([n (abs n)])\n        (let loop ([n n] [sum 0])\n          (if (zero? n)\n              (zero? (modulo sum 11))\n              (loop (quotient n 10) (+ (remainder n 10) sum)))))))\n",
    "  (if (= (modulo n 11) 0)\n      #t\n      #f))\n",
    "  (if (= (modulo n 11) 0)\n      #t\n      #f))\n",
    "  (if (zero? n)\n      #t\n      (let ([a (modulo n 10)]\n            [b (modulo n 100)])\n        (if (zero? b)\n            (is_Diff (/ n 10))\n            (if (zero? a)\n                (is_Diff (/ n 10))\n                (if (zero? (- a b))\n                    (is_Diff (/ n 10))\n                    #f))))))\n",
    "  (let loop ([n (number->string n)]\n             [sum1 0]\n             [sum2 0])\n    (cond [(empty? n) (= (abs (- sum1 sum2)) 11)]\n          [else\n           (let ([d (string->number (substring n 0 1))])\n             (loop (substring n 1)\n                   (+ sum1 d)\n                   (+ sum2 d)))])))\n",
    "  (define (is_Diff_helper n sum1 sum2)\n    (cond\n      [(zero? n) (= sum1 sum2)]\n      [else (is_Diff_helper (quotient n 10) (+ sum1 (remainder n 10)) sum2)]))\n  (is_Diff_helper n 0 0))\n",
    "  (if (= (modulo n 11) 0)\n      #t\n      #f))\n",
    "  (if (= (modulo n 11) 0)\n      #t\n      #f))\n",
    "  (if (= (modulo n 11) 0)\n      #t\n      #f))\n",
    "  (let loop ([n n] [i 0])\n    (cond\n      [(= i (string-length n)) #t]\n      [(= (modulo (+ (string-ref n i) (string-ref n (+ i 1))) 11) 0) #f]\n      [else (loop n (+ i 2))])))\n",
    "  (define (is_Diff_helper n1 n2)\n    (if (= n1 0)\n        (= n2 0)\n        (is_Diff_helper (- n1 1) (- n2 (remainder n1 10)))))\n  (is_Diff_helper n 0))\n",
    "  (let loop ([n n])\n    (cond\n      [(= n 0) #t]\n      [(= (modulo n 11) 0) #f]\n      [else (loop (modulo n 11))])))\n",
    "  (if (= (modulo n 11) 0)\n      #t\n      #f))\n",
    "  (let ([n (string->number (number->string n))])\n    (if (= (modulo n 11) 0)\n        #t\n        #f)))\n",
    "  (if (= (modulo n 11) 0)\n      #t\n      #f))\n",
    "  (if (= n 0)\n      #t\n      (if (= n 1)\n          #f\n          (if (= n 2)\n              #t\n              (if (= n 3)\n                  #f\n                  (if (= n 4)\n                      #t\n                      (if (= n 5)\n                          #f\n                          (if (= n 6)\n                              #t\n                              (if (= n 7)\n                                  #f\n                                  (if (= n 8)\n                                      #t\n                                      (if (= n 9)\n                                          #f\n                                          (if (= n 10)\n                                              #t\n                                              (if (= n 11)\n                                                  #f\n                                                  (if (= n 12)\n                                                      #t\n                                                      (if (= n 13)\n                                                          #f\n                                                          (if (= n 14)\n                                                              #t\n                                                              (if (= n 15)\n                                                                  #f\n                                                                  (if (= n 16)\n                                                                      #t\n                                                                      (if (= n 17)\n                                                                          #f\n                                                                          (if (= n 18)\n                                                                              #t\n                                                                              (if (= n 19)\n                                                                                  #f\n                                                                                  (if (= n 20)\n                                                                                      #t\n                                                                                      (if (= n 21)\n                                                                                          #f\n                                                                                          (if (= n 22)\n                                                                                              #t\n                                                                                              (if (= n 23)\n                                                                                                  #f\n                                                                                                  (if (= n 24)\n                                                                                                      #t\n                                                                                                      (if (= n 25)\n                                                                                                          #f\n                                                                                                          (if (= n 26)\n                                                                                                              #t\n                                                                                                              (if (= n 27)\n                                                                                                                  #f\n                                                                                                                  (if (= n 28)\n                                                                                                                      #t\n                ",
    "  (cond\n    [(= n 0) #t]\n    [(= n 1) #f]\n    [(= n 2) #f]\n    [(= n 3) #f]\n    [(= n 4) #t]\n    [(= n 5) #f]\n    [(= n 6) #t]\n    [(= n 7) #f]\n    [(= n 8) #t]\n    [(= n 9) #f]\n    [(= n 10) #t]\n    [(= n 11) #f]\n    [(= n 12) #t]\n    [(= n 13) #f]\n    [(= n 14) #t]\n    [(= n 15) #f]\n    [(= n 16) #t]\n    [(= n 17) #f]\n    [(= n 18) #t]\n    [(= n 19) #f]\n    [(= n 20) #t]\n    [(= n 21) #f]\n    [(= n 22) #t]\n    [(= n 23) #f]\n    [(= n 24) #t]\n    [(= n 25) #f]\n    [(= n 26) #t]\n    [(= n 27) #f]\n    [(= n 28) #t]\n    [(= n 29) #f]\n    [(= n 30) #t]\n    [(= n 31) #f]\n    [(= n 32) #t]\n    [(= n 33) #f]\n    [(= n 34) #t]\n    [(= n 35) #f]\n    [(= n 36) #t]\n    [(= n 37) #f]\n    [(= n 38) #t]\n    [(= n 39) #f]\n    [(= n 40) #t]\n    [(= n 41) #f]\n    [(= n 42) #t]\n    [(= n 43) #f]\n    [(= n 44) #t]\n    [(= n 45) #f]\n    [(= n 46) #t]\n    [(= n 47) #f]\n    [(= n 48) #t]\n    [(= n 49) #f]\n    [(= n 50) #",
    "  (let loop ([n (number->string n)]\n             [i 0]\n             [j 0])\n    (cond [(empty? n) (zero? (- i j))]\n          [else (loop (rest n)\n                      (+ i (string->number (first n)))\n                      (+ j (string->number (first n))))])))\n",
    "  (if (zero? n)\n      #t\n      (let ([n (abs n)])\n        (let loop ([n n] [sum 0])\n          (if (zero? n)\n              (zero? (modulo sum 11))\n              (loop (quotient n 10) (+ sum (remainder n 10))))))))\n",
    "  (if (zero? (modulo n 11))\n      #t\n      #f))\n",
    "  (if (zero? n)\n      #t\n      (let ([d (modulo n 10)])\n        (if (zero? d)\n            (is_Diff (quotient n 10))\n            (let ([d2 (modulo (quotient n 10) 10)])\n              (if (zero? d2)\n                  (is_Diff (quotient n 10))\n                  (if (equal? (modulo (+ d d2) 11) 0)\n                      #t\n                      #f)))))))\n",
    "  (let loop ([n n] [sum 0])\n    (cond [(zero? n) (= (abs (- sum 11)) 1)]\n          [else (loop (quotient n 10) (+ (remainder n 10) sum))])))\n"
  ]
}