{
  "name": "mbpp_77_is_Diff",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to find whether a number is divisible by 11.\n(define (is_Diff n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_77_is_Diff.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Diff))\n    (check-equal? (candidate 12345) #f)\n    (check-equal? (candidate 1212112) #t)\n    (check-equal? (candidate 1212) #f)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let loop ([n n] [sum 0])\n    (cond [(zero? n) (= sum 0)]\n          [else (loop (quotient n 10) (+ sum (remainder n 10)))])))\n",
    "  (if (= (modulo n 11) 0)\n      #t\n      #f))\n",
    "  (let loop ([n n] [sum 0])\n    (if (zero? n)\n        (= (abs (- sum (modulo sum 11))) 0)\n        (loop (quotient n 10) (+ sum (remainder n 10))))))\n",
    "  (if (= (modulo n 11) 0)\n      #t\n      #f))\n",
    "  (if (= n 0)\n      #t\n      (if (= n 1)\n          #f\n          (if (= n 2)\n              #t\n              (if (= n 3)\n                  #f\n                  (if (= n 4)\n                      #t\n                      (if (= n 5)\n                          #f\n                          (if (= n 6)\n                              #t\n                              (if (= n 7)\n                                  #f\n                                  (if (= n 8)\n                                      #t\n                                      (if (= n 9)\n                                          #f\n                                          (if (= n 10)\n                                              #t\n                                              (is_Diff (- n 11)))))))))))))))\n",
    "  (if (zero? n)\n      #t\n      (let ([d (modulo n 10)]\n            [n (quotient n 10)])\n        (if (zero? n)\n            #t\n            (is_Diff (- n d))))))\n",
    "  (if (= (modulo n 11) 0)\n      #t\n      #f))\n",
    "  (if (= (modulo n 11) 0)\n      #t\n      #f))\n",
    "  (let loop ([n (number->string n)]\n             [i 0]\n             [j 0])\n    (cond [(empty? n) (= i j)]\n          [(= (modulo i 11) (modulo j 11))\n           (loop (rest n) (+ i (string->number (first n))) j)]\n          [else\n           (loop (rest n) i (+ j (string->number (first n))))])))\n",
    "  (define (is_Diff_helper n1 n2)\n    (if (zero? n1)\n        (if (zero? n2)\n            #t\n            #f)\n        (is_Diff_helper (quotient n1 10) (+ (remainder n1 10) n2))))\n  (is_Diff_helper n 0))\n",
    "  (cond\n    [(= n 0) #t]\n    [(= n 1) #f]\n    [(= n 2) #f]\n    [(= n 3) #t]\n    [(= n 4) #f]\n    [(= n 5) #t]\n    [(= n 6) #f]\n    [(= n 7) #t]\n    [(= n 8) #f]\n    [(= n 9) #t]\n    [(= n 10) #f]\n    [(= n 11) #t]\n    [(= n 12) #f]\n    [(= n 13) #t]\n    [(= n 14) #f]\n    [(= n 15) #t]\n    [(= n 16) #f]\n    [(= n 17) #t]\n    [(= n 18) #f]\n    [(= n 19) #t]\n    [(= n 20) #f]\n    [(= n 21) #t]\n    [(= n 22) #f]\n    [(= n 23) #t]\n    [(= n 24) #f]\n    [(= n 25) #t]\n    [(= n 26) #f]\n    [(= n 27) #t]\n    [(= n 28) #f]\n    [(= n 29) #t]\n    [(= n 30) #f]\n    [(= n 31) #t]\n    [(= n 32) #f]\n    [(= n 33) #t]\n    [(= n 34) #f]\n    [(= n 35) #t]\n    [(= n 36) #f]\n    [(= n 37) #t]\n    [(= n 38) #f]\n    [(= n 39) #t]\n    [(= n 40) #f]\n    [(= n 41) #t]\n    [(= n 42) #f]\n    [(= n 43) #t]\n    [(= n 44) #f]\n    [(= n 45) #t]\n    [(= n 46) #f]\n    [(= n 47) #t]\n    [(= n 48) #f]\n    [(= n 49) #t]\n    [(= n 50) #",
    "  (if (zero? n)\n      #t\n      (let ([d (modulo n 10)]\n            [n (quotient n 10)])\n        (if (zero? n)\n            #f\n            (if (zero? (modulo (- d (modulo n 10)) 11))\n                (is_Diff (quotient n 10))\n                #f)))))\n",
    "  (define (is_Diff_helper n sum)\n    (cond ((= n 0) (= (modulo sum 11) 0))\n          ((= (modulo n 10) 0) (is_Diff_helper (quotient n 10) sum))\n          ((= (modulo n 10) 1) (is_Diff_helper (quotient n 10) (+ sum 1)))\n          ((= (modulo n 10) 2) (is_Diff_helper (quotient n 10) (+ sum 2)))\n          ((= (modulo n 10) 3) (is_Diff_helper (quotient n 10) (+ sum 3)))\n          ((= (modulo n 10) 4) (is_Diff_helper (quotient n 10) (+ sum 4)))\n          ((= (modulo n 10) 5) (is_Diff_helper (quotient n 10) (+ sum 5)))\n          ((= (modulo n 10) 6) (is_Diff_helper (quotient n 10) (+ sum 6)))\n          ((= (modulo n 10) 7) (is_Diff_helper (quotient n 10) (+ sum 7)))\n          ((= (modulo n 10) 8) (is_Diff_helper (quotient n 10) (+ sum 8)))\n          ((= (modulo n 10) 9) (is_Diff_helper (quotient n 10) (+ sum 9)))\n          ((= (modulo n 10) 10) (is_Diff_helper (quotient n 10) (+ sum 10)))))\n  (is_Diff_helper n 0))\n",
    "  (if (zero? n)\n      #t\n      (let ([n (abs n)])\n        (let loop ([n n] [s 0])\n          (if (zero? n)\n              (zero? (modulo s 11))\n              (loop (quotient n 10) (+ (modulo n 10) s)))))))\n",
    "  (cond\n    [(= n 0) #t]\n    [(= n 11) #t]\n    [(= n (- 11 (modulo n 11))) #t]\n    [else #f]))\n",
    "  (cond\n    [(= n 0) #t]\n    [(= n 1) #f]\n    [(= n 2) #t]\n    [(= n 3) #f]\n    [(= n 4) #t]\n    [(= n 5) #f]\n    [(= n 6) #t]\n    [(= n 7) #f]\n    [(= n 8) #t]\n    [(= n 9) #f]\n    [(= n 10) #t]\n    [(= n 11) #f]\n    [(= n 12) #t]\n    [(= n 13) #f]\n    [(= n 14) #t]\n    [(= n 15) #f]\n    [(= n 16) #t]\n    [(= n 17) #f]\n    [(= n 18) #t]\n    [(= n 19) #f]\n    [(= n 20) #t]\n    [(= n 21) #f]\n    [(= n 22) #t]\n    [(= n 23) #f]\n    [(= n 24) #t]\n    [(= n 25) #f]\n    [(= n 26) #t]\n    [(= n 27) #f]\n    [(= n 28) #t]\n    [(= n 29) #f]\n    [(= n 30) #t]\n    [(= n 31) #f]\n    [(= n 32) #t]\n    [(= n 33) #f]\n    [(= n 34) #t]\n    [(= n 35) #f]\n    [(= n 36) #t]\n    [(= n 37) #f]\n    [(= n 38) #t]\n    [(= n 39) #f]\n    [(= n 40) #t]\n    [(= n 41) #f]\n    [(= n 42) #t]\n    [(= n 43) #f]\n    [(= n 44) #t]\n    [(= n 45) #f]\n    [(= n 46) #t]\n    [(= n 47) #f]\n    [(= n 48) #t]\n    [(= n 49) #f]\n    [(= n 50) #",
    "  (if (zero? n)\n      #t\n      (let* ([d (modulo n 10)]\n             [n (quotient n 10)])\n        (if (zero? n)\n            #f\n            (is_Diff (- n (* 2 d)))))))\n",
    "  (if (zero? n)\n      #t\n      (let* ([s (string->number (number->string n))]\n             [d (modulo s 11)])\n        (if (zero? d)\n            #t\n            (is_Diff (- n d))))))\n",
    "  (if (zero? n)\n      #t\n      (let ([n (abs n)])\n        (let loop ([n n] [sum 0])\n          (if (zero? n)\n              (zero? (modulo sum 11))\n              (loop (quotient n 10) (+ (modulo n 10) sum)))))))\n",
    "  (cond ((= n 0) #t)\n        ((= n 1) #f)\n        ((= n 2) #t)\n        ((= n 3) #f)\n        ((= n 4) #t)\n        ((= n 5) #f)\n        ((= n 6) #t)\n        ((= n 7) #f)\n        ((= n 8) #t)\n        ((= n 9) #f)\n        ((= n 10) #t)\n        ((= n 11) #f)\n        ((= n 12) #t)\n        ((= n 13) #f)\n        ((= n 14) #t)\n        ((= n 15) #f)\n        ((= n 16) #t)\n        ((= n 17) #f)\n        ((= n 18) #t)\n        ((= n 19) #f)\n        ((= n 20) #t)\n        ((= n 21) #f)\n        ((= n 22) #t)\n        ((= n 23) #f)\n        ((= n 24) #t)\n        ((= n 25) #f)\n        ((= n 26) #t)\n        ((= n 27) #f)\n        ((= n 28) #t)\n        ((= n 29) #f)\n        ((= n 30) #t)\n        ((= n 31) #f)\n        ((= n 32) #t)\n        ((= n 33) #f)\n        ((= n 34) #t)\n        ((= n 35) #f)\n        ((= n 36) #t)\n        ((= n 37) #f)\n        ((= n 38) #t)\n        ((= n 39) #f)\n        ((= n 40) #t)\n        ((= n 41) #f)\n        ((= n 42) #t)\n        ((= n 43) #f)\n        ((= n 44) #t)\n        ((= n 45) #f)\n        ((= n 46) #t)\n        ((= n 47) #f)\n        ((= n 48) #t)\n        ((= n 49) #f)\n        ((= n 50) #t)"
  ]
}