{
  "name": "mbpp_240_replace_list",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n(define (replace_list list1 list2)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_240_replace_list.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_list))\n    (check-equal? (candidate (list 1 3 5 7 9 10) (list 2 4 6 8)) (list 1 3 5 7 9 2 4 6 8))\n    (check-equal? (candidate (list 1 2 3 4 5) (list 5 6 7 8)) (list 1 2 3 4 5 6 7 8))\n    (check-equal? (candidate (list \"red\" \"blue\" \"green\") (list \"yellow\")) (list \"red\" \"blue\" \"yellow\"))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond\n    [(empty? list1) empty]\n    [(empty? (rest list1)) (append list2 empty)]\n    [else (cons (first list1) (replace_list (rest list1) list2))]))\n",
    "  (cond\n    [(empty? list1) empty]\n    [(empty? (rest list1)) (append list2 empty)]\n    [else (cons (first list1) (replace_list (rest list1) list2))]))\n",
    "  (cond\n    [(empty? list1) empty]\n    [(empty? (rest list1)) (append list2 empty)]\n    [else (cons (first list1) (replace_list (rest list1) list2))]))\n",
    "  (if (null? list1)\n      list2\n      (append (butlast list1) list2)))\n",
    "  (cond\n    [(empty? list1) list2]\n    [(empty? (rest list1)) (cons (first list1) list2)]\n    [else (cons (first list1) (replace_list (rest list1) list2))]))\n",
    "  (cond\n    [(empty? list1) empty]\n    [(empty? (rest list1)) (append list2 empty)]\n    [else (cons (first list1) (replace_list (rest list1) list2))]))\n",
    "  (cond\n    [(empty? list1) empty]\n    [(empty? (rest list1)) list2]\n    [else (cons (first list1) (replace_list (rest list1) list2))]))\n",
    "  (cond\n    [(empty? list1) empty]\n    [(empty? (rest list1)) (append list2 empty)]\n    [else (cons (first list1) (replace_list (rest list1) list2))]))\n",
    "  (if (null? list1)\n      list2\n      (cons (car list1) (replace_list (cdr list1) list2))))\n",
    "  (if (null? (cdr list1))\n      (append (cdr list1) list2)\n      (append (list (car list1)) (replace_list (cdr list1) list2))))\n",
    "  (cond\n    [(empty? list1) empty]\n    [(empty? (rest list1)) (append list2 empty)]\n    [else (cons (first list1) (replace_list (rest list1) list2))]))\n",
    "  (cond\n    [(empty? list1) empty]\n    [(empty? (rest list1)) (append list2 empty)]\n    [else (cons (first list1) (replace_list (rest list1) list2))]))\n",
    "  (cond\n    [(empty? list1) list2]\n    [(empty? (rest list1)) (cons (first list1) list2)]\n    [else (cons (first list1) (replace_list (rest list1) list2))]))\n",
    "  (cond\n    [(null? list1) list2]\n    [(null? (cdr list1)) (cons (car list1) list2)]\n    [else (cons (car list1) (replace_list (cdr list1) list2))]))\n",
    "  (if (null? list1)\n      list2\n      (cons (car list1) (replace_list (cdr list1) list2))))\n",
    "  (cond [(empty? list1) empty]\n        [(empty? (rest list1)) (append list2 empty)]\n        [else (cons (first list1) (replace_list (rest list1) list2))]))\n",
    "  (cond\n    [(null? list1) list2]\n    [(null? (cdr list1)) (cons (car list1) list2)]\n    [else (cons (car list1) (replace_list (cdr list1) list2))]))\n",
    "  (cond\n    [(empty? list1) empty]\n    [(empty? (rest list1)) (append list2 empty)]\n    [else (cons (first list1) (replace_list (rest list1) list2))]))\n",
    "  (cond\n    [(empty? list1) list2]\n    [(empty? (rest list1)) (cons (first list1) list2)]\n    [else (cons (first list1) (replace_list (rest list1) list2))]))\n",
    "  (cond\n    [(empty? list1) empty]\n    [(empty? (rest list1)) (append list2 empty)]\n    [else (cons (first list1) (replace_list (rest list1) list2))]))\n"
  ]
}