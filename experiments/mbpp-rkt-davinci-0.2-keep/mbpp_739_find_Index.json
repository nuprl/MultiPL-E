{
  "name": "mbpp_739_find_Index",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n(define (find_Index n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_739_find_Index.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_Index))\n    (check-equal? (candidate 2) 4)\n    (check-equal? (candidate 3) 14)\n    (check-equal? (candidate 4) 45)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (find_Index_iter n i)\n    (if (&gt; (number-&gt;string (triangular i)) n)\n        i\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (define (find_Index_iter n i)\n    (if (&gt; (number-&gt;string (triangular i)) n)\n        (- i 1)\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (define (find_Index_iter i)\n    (if (&gt; (number-&gt;string (triangular i)) (number-&gt;string n))\n        i\n        (find_Index_iter (+ i 1))))\n  (find_Index_iter 1))\n",
    "  (define (triangular n)\n    (if (= n 1)\n        1\n        (+ n (triangular (- n 1)))))\n  (define (find_Index_iter n i)\n    (if (= (number->string (triangular i)) (number->string (expt 10 n)))\n        i\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (define (find_Index_iter n i)\n    (if (&gt; (number-&gt;string (triangular i)) (number-&gt;string n))\n        i\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (define (triangular n)\n    (if (= n 1)\n        1\n        (+ n (triangular (- n 1)))))\n  (define (find_Index_helper n i)\n    (if (= (number->string (triangular i)) (number->string (expt 10 n)))\n        i\n        (find_Index_helper n (+ i 1))))\n  (find_Index_helper n 1))\n",
    "  (define (find_Index_iter n i)\n    (if (&gt; (number-&gt;string (triangular i)) (number-&gt;string n))\n        i\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (define (triangular n)\n    (define (triangular-iter n sum)\n      (if (= n 1)\n          sum\n          (triangular-iter (- n 1) (+ n sum))))\n    (triangular-iter n 1))\n  (define (find-index-iter n i)\n    (if (= (length (number->string (triangular i))) n)\n        i\n        (find-index-iter n (+ i 1))))\n  (find-index-iter n 1))\n",
    "  (define (find_Index_iter n i)\n    (if (&gt; (number-&gt;string (triangular i)) n)\n        (- i 1)\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (define (find_Index_iter n i)\n    (if (= n (length (number->string (* i (add1 i)))))\n        i\n        (find_Index_iter n (add1 i))))\n  (find_Index_iter n 1))\n",
    "  (define (find_Index_iter n i)\n    (if (&gt; (number-&gt;string (triangular i)) n)\n        i\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (define (triangular n)\n    (define (helper n sum)\n      (if (= n 0)\n          sum\n          (helper (- n 1) (+ sum n))))\n    (helper n 0))\n  (define (helper n index)\n    (if (&gt; (number-&gt;string (triangular index)) (number-&gt;string n))\n        index\n        (helper n (+ index 1))))\n  (helper n 1))\n</code>\nI'm not sure if I'm doing this right. I'm not sure if I'm supposed to use <code>number-&gt;string</code> to convert the numbers to strings to compare them. I'm not sure if I'm supposed to use <code>string-length</code> to compare the length of the strings. I'm not sure if I'm supposed to use <code>string-&gt;number</code> to convert the strings back to numbers. I'm not sure if I'm supposed to use <code>string=?</code> to compare the strings. I'm not sure if I'm supposed to use <code>=</code> to compare the numbers. I'm not sure if I'm supposed to use <code>&gt;</code> to compare the numbers. I'm not sure if I'm supposed to use <code>&lt;</code> to compare the numbers. I'm not sure if I'm supposed to use <code>&gt;=</code> to compare the numbers. I'm not sure if I'm supposed to use <code>&lt;=</code> to compare the numbers. I'm not sure if I'm supposed to use <code>&gt;=</code> to compare the numbers. I'm not sure if I'm supposed to use <code>&lt;=</code> to compare the numbers. I'm not sure if I'm supposed to use <code>string-&gt;number</code> to convert the strings back to numbers. I'm not sure if I'm supposed to use <code>string-length</code> to compare the length of the strings. I'm not sure if I'm supposed to use <code>number-&gt;string</code> to convert the numbers to strings to compare them. I'm not sure if I'm supposed to use <code>string",
    "  (define (find_Index_iter n i)\n    (if (&gt; (number-&gt;string (triangular i)) n)\n        i\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (define (find_Index_iter i)\n    (if (&gt; (number-&gt;string (triangular i)) (number-&gt;string (expt 10 n)))\n        i\n        (find_Index_iter (+ i 1))))\n  (find_Index_iter 1))\n",
    "  (let loop ([i 1] [tri 1])\n    (if (= (number->string tri) (string-length (number->string tri)))\n        i\n        (loop (+ i 1) (+ tri i)))))\n",
    "  (let loop ([i 1] [triangular_number 1])\n    (cond\n      [(= (number->string triangular_number) (number->string n)) i]\n      [else (loop (+ i 1) (+ triangular_number (+ i 1)))])))\n",
    "  (define (find_Index_iter n i)\n    (if (&gt; (number-&gt;string (triangular i)) (number-&gt;string n))\n        (- i 1)\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (define (triangular n)\n    (define (triangular-iter n acc)\n      (if (= n 1)\n          acc\n          (triangular-iter (- n 1) (+ acc n))))\n    (triangular-iter n 1))\n  (define (find-index-iter n i)\n    (if (= (number->string (triangular i)) (number->string (expt 10 n)))\n        i\n        (find-index-iter n (+ i 1))))\n  (find-index-iter n 1))\n",
    "  (define (find_Index_iter i)\n    (if (&gt; (number-&gt;string (triangular i)) n)\n        i\n        (find_Index_iter (+ i 1))))\n  (find_Index_iter 1))\n",
    "  (define (find_Index_iter i)\n    (if (&gt; (number-&gt;string (triangular i)) (number-&gt;string (expt 10 (- n 1))))\n        i\n        (find_Index_iter (+ i 1))))\n  (find_Index_iter 1))\n",
    "  (define (find_Index_iter n i)\n    (if (&gt; (number-&gt;string (triangular i)) n)\n        (- i 1)\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (define (find_Index_iter i)\n    (if (&gt; (number-&gt;string (triangular i)) n)\n        i\n        (find_Index_iter (+ i 1))))\n  (find_Index_iter 1))\n",
    "  (define (triangular n)\n    (if (= n 1)\n        1\n        (+ n (triangular (- n 1)))))\n  (define (find_Index_helper n i)\n    (if (= (number->string (triangular i)) (number->string (expt 10 n)))\n        i\n        (find_Index_helper n (+ i 1))))\n  (find_Index_helper n 1))\n",
    "  (define (find_Index_iter i)\n    (if (&gt; (number-&gt;string (triangular i)) (number-&gt;string n))\n        (- i 1)\n        (find_Index_iter (+ i 1))))\n  (find_Index_iter 1))\n",
    "  (define (triangular x)\n    (if (= x 1)\n        1\n        (+ x (triangular (- x 1)))))\n  (define (find_Index_helper n i)\n    (if (= (number->string (triangular i)) (number->string (expt 10 n)))\n        i\n        (find_Index_helper n (+ i 1))))\n  (find_Index_helper n 1))\n",
    "  (define (triangular n)\n    (if (= n 1)\n        1\n        (+ n (triangular (- n 1)))))\n  (define (find_Index_Helper n i)\n    (if (= (number->string (triangular i)) (number->string (expt 10 n)))\n        i\n        (find_Index_Helper n (+ i 1))))\n  (find_Index_Helper n 1))\n",
    "  (let loop ((i 1) (triangle-number 1))\n    (if (= (number->string triangle-number) (number->string (expt 10 n)))\n        i\n        (loop (+ i 1) (+ triangle-number i)))))\n",
    "  (define (find_Index_iter n i)\n    (cond ((&gt; (number-&gt;string (triangular i)) (number-&gt;string n)) (- i 1))\n          (else (find_Index_iter n (+ i 1)))))\n  (find_Index_iter n 1))\n",
    "  (define (triangular n)\n    (if (= n 1)\n        1\n        (+ n (triangular (- n 1)))))\n  (define (find_Index_helper n i)\n    (if (= (number->string (triangular i)) (number->string (expt 10 n)))\n        i\n        (find_Index_helper n (+ i 1))))\n  (find_Index_helper n 1))\n",
    "  (define (triangular n)\n    (if (= n 1) 1\n        (+ n (triangular (- n 1)))))\n  (define (find_Index_helper n i)\n    (if (= (number->string (triangular i)) (number->string (triangular (+ i 1))))\n        (find_Index_helper n (+ i 1))\n        i))\n  (find_Index_helper n 1))\n",
    "  (define (find_Index_iter n i)\n    (if (&gt; (number-&gt;string (triangular i)) n)\n        (- i 1)\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (define (find_Index_helper n i)\n    (if (&gt; (number-&gt;string (triangular i)) n)\n        i\n        (find_Index_helper n (+ i 1))))\n  (find_Index_helper n 1))\n",
    "  (define (find_Index_Helper n i)\n    (if (&gt; (expt 10 n) (triangular i))\n        i\n        (find_Index_Helper n (+ i 1))))\n  (find_Index_Helper n 1))\n",
    "  (define (triangular x)\n    (if (= x 1)\n        1\n        (+ x (triangular (- x 1)))))\n  (define (find_Index_iter i)\n    (if (&gt; (number-&gt;string (triangular i)) n)\n        i\n        (find_Index_iter (+ i 1))))\n  (find_Index_iter 1))\n</code>\nI am getting the following error:\n<code>application: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 1\n  arguments...:\n   1\n</code>\nI am not sure what I am doing wrong. I am trying to compare the length of the string of the triangular number to the length of the string of the input.\n\n\nA:\n\nYou are using the wrong comparison operator. You want to compare the length of the string of the triangular number to the length of the string of the input. You are comparing the string of the triangular number to the input.\n<code>(define (find_Index n)\n  (define (triangular x)\n    (if (= x 1)\n        1\n        (+ x (triangular (- x 1)))))\n  (define (find_Index_iter i)\n    (if (&gt; (string-length (number-&gt;string (triangular i))) n)\n        i\n        (find_Index_iter (+ i 1))))\n  (find_Index_iter 1))\n</code>\n",
    "  (define (triangular n)\n    (if (= n 1)\n        1\n        (+ n (triangular (- n 1)))))\n  (define (find_Index_helper n i)\n    (if (= (number->string (triangular i)) (number->string (expt 10 n)))\n        i\n        (find_Index_helper n (+ i 1))))\n  (find_Index_helper n 1))\n",
    "  (define (triangular x)\n    (define (triangular-iter x y)\n      (if (= x y)\n          y\n          (triangular-iter (+ x 1) (+ y x))))\n    (triangular-iter 1 1))\n  (define (find-Index-iter x)\n    (if (= (number->string (triangular x)) (number->string (expt 10 n)))\n        x\n        (find-Index-iter (+ x 1))))\n  (find-Index-iter 1))\n",
    "  (define (find_Index_iter i)\n    (if (&gt; (number-&gt;string (triangular i)) (number-&gt;string (expt 10 n)))\n        (find_Index_iter (+ i 1))\n        i))\n  (find_Index_iter 1))\n",
    "  (define (find_Index_iter i)\n    (if (&gt; (number-&gt;string (triangular i)) (number-&gt;string (expt 10 n)))\n        i\n        (find_Index_iter (+ i 1))))\n  (find_Index_iter 1))\n",
    "  (define (triangular n)\n    (if (= n 1)\n        1\n        (+ n (triangular (- n 1)))))\n  (define (find_Index_iter n i)\n    (if (= (number->string (triangular i)) (number->string (expt 10 n)))\n        i\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (define (find_Index_iter i)\n    (if (= (number->string (triangular i)) (substring (number->string (triangular i)) 0 n))\n        i\n        (find_Index_iter (+ i 1))))\n  (find_Index_iter 1))\n",
    "  (define (triangular_Number n)\n    (define (helper n acc)\n      (if (= n 0)\n          acc\n          (helper (- n 1) (+ n acc))))\n    (helper n 0))\n  (define (helper n index)\n    (if (= (number->string (triangular_Number index)) (number->string n))\n        index\n        (helper n (+ index 1))))\n  (helper n 1))\n",
    "  (define (find_Index_iter n i)\n    (if (&gt; (number-&gt;string (triangular i)) (number-&gt;string n))\n        i\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (let loop ([i 1] [triangular 0])\n    (cond\n      [(= (number->string triangular) (number->string (expt 10 n))) i]\n      [else (loop (+ i 1) (+ triangular i))])))\n",
    "  (define (find_Index_iter n i)\n    (if (&gt; (number-&gt;string (triangular i)) (number-&gt;string n))\n        i\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (define (find_Index_iter i)\n    (if (&gt; (number-&gt;string (triangular i)) n)\n        i\n        (find_Index_iter (+ i 1))))\n  (find_Index_iter 1))\n",
    "  (define (find_Index_iter i)\n    (if (&gt; (number-&gt;string (triangular i)) (number-&gt;string n))\n        (- i 1)\n        (find_Index_iter (+ i 1))))\n  (find_Index_iter 1))\n",
    "  (define (find_Index_iter n i)\n    (if (&gt; (number-&gt;string (triangular i)) n)\n        (- i 1)\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (define (find_Index_iter i)\n    (if (&gt; (number-&gt;string (triangular i)) (number-&gt;string n))\n        i\n        (find_Index_iter (+ i 1))))\n  (find_Index_iter 1))\n",
    "  (define (find_Index_iter i)\n    (if (&gt; (number-&gt;string (triangular i)) (number-&gt;string n))\n        i\n        (find_Index_iter (+ i 1))))\n  (find_Index_iter 1))\n",
    "  (define (find_Index_iter n i)\n    (if (= (number->string (triangular i)) (number->string n))\n        i\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (define (find_Index_iter n i)\n    (cond\n      [(= n (length (number->string (triangular i)))) i]\n      [else (find_Index_iter n (+ i 1))]))\n  (find_Index_iter n 1))\n",
    "  (define (triangular x)\n    (if (= x 1)\n        1\n        (+ x (triangular (- x 1)))))\n  (define (find_Index_iter x)\n    (if (= (number->string (triangular x)) (number->string (expt 10 n)))\n        x\n        (find_Index_iter (+ x 1))))\n  (find_Index_iter 1))\n",
    "  (define (find_Index_iter n i)\n    (cond ((&gt; (number-&gt;string (triangular i)) n) (- i 1))\n          (else (find_Index_iter n (+ i 1)))))\n  (find_Index_iter n 1))\n",
    "  (define (find_Index_iter i)\n    (if (&gt; (number-&gt;string (triangular-number i)) (number-&gt;string n))\n        i\n        (find_Index_iter (+ i 1))))\n  (find_Index_iter 1))\n",
    "  (define (triangular n)\n    (if (= n 1)\n        1\n        (+ n (triangular (- n 1)))))\n  (define (find_Index_iter n i)\n    (if (= (length (number->string (triangular i))) n)\n        i\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (define (triangle n)\n    (define (triangle-iter n acc)\n      (if (= n 0)\n          acc\n          (triangle-iter (- n 1) (+ n acc))))\n    (triangle-iter n 0))\n  (define (find-index-iter n i)\n    (if (= (length (number->string (triangle i))) n)\n        i\n        (find-index-iter n (+ i 1))))\n  (find-index-iter n 1))\n",
    "  (define (find_Index_iter n i)\n    (if (&gt; (number-&gt;string (triangular i)) n)\n        i\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (define (find_Index_iter n i)\n    (if (&gt; (number-&gt;string (triangular i)) n)\n        i\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (let loop ([i 1] [sum 0])\n    (cond\n      [(= (number->string sum) (number->string (expt 10 n))) i]\n      [else (loop (+ i 1) (+ sum i))])))\n",
    "  (let loop ([i 1] [triangular 0])\n    (if (= (number->string triangular) (number->string (expt 10 n)))\n        i\n        (loop (+ i 1) (+ triangular i)))))\n",
    "  (let loop ([i 1] [triangle 1])\n    (cond\n      [(= (number->string triangle) (number->string (expt 10 n))) i]\n      [else (loop (+ i 1) (+ triangle i))])))\n",
    "  (let loop ([i 1] [triangle 0])\n    (if (= (number->string triangle) (number->string (expt 10 n)))\n        i\n        (loop (+ i 1) (+ triangle i)))))\n",
    "  (define (triangular_number n)\n    (if (= n 1)\n        1\n        (+ n (triangular_number (- n 1)))))\n  (define (find_Index_helper n i)\n    (if (&gt; (number-&gt;string (triangular_number i)) n)\n        (- i 1)\n        (find_Index_helper n (+ i 1))))\n  (find_Index_helper n 1))\n",
    "  (define (find_Index_iter i sum)\n    (cond\n      [(= (number->string sum) (number->string (expt 10 n))) i]\n      [else (find_Index_iter (+ i 1) (+ sum i))]))\n  (find_Index_iter 1 1))\n",
    "  (define (find_Index_iter n i)\n    (if (&lt; (number-&gt;string (triangular i)) n)\n        (find_Index_iter n (+ i 1))\n        (- i 1)))\n  (find_Index_iter n 1))\n",
    "  (define (find_Index_iter n i)\n    (if (&gt; (number-&gt;string (triangular i)) (number-&gt;string n))\n        i\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (define (find_Index_iter n i)\n    (if (&gt; (number-&gt;string (triangular i)) n)\n        i\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (define (triangular-number n)\n    (if (= n 1)\n        1\n        (+ n (triangular-number (- n 1)))))\n  (define (find-index-helper n i)\n    (if (= (number->string (triangular-number i)) (number->string n))\n        i\n        (find-index-helper n (+ i 1))))\n  (find-index-helper n 1))\n",
    "  (let loop ([i 1] [triangle 0])\n    (cond\n      [(= (number->string triangle) (number->string (expt 10 n))) i]\n      [else (loop (+ i 1) (+ triangle i))])))\n",
    "  (define (find_Index_helper n i)\n    (cond ((&gt; (number-&gt;string (triangular i)) n) (- i 1))\n          (else (find_Index_helper n (+ i 1)))))\n  (find_Index_helper n 1))\n",
    "  (define (find_Index_iter n i)\n    (if (&gt; (number-&gt;string (triangular i)) n)\n        i\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (define (find_Index_iter i)\n    (if (&gt; (number-&gt;string (triangular i)) n)\n        i\n        (find_Index_iter (+ i 1))))\n  (find_Index_iter 1))\n",
    "  (define (find_Index_iter n i)\n    (if (&gt; (number-&gt;string (triangular i)) n)\n        i\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (define (triangular n)\n    (if (= n 1)\n        1\n        (+ n (triangular (- n 1)))))\n  (define (find_Index_helper n i)\n    (if (= (number->string (triangular i)) (number->string (expt 10 n)))\n        i\n        (find_Index_helper n (+ i 1))))\n  (find_Index_helper n 1))\n",
    "  (define (triangular n)\n    (if (= n 1)\n        1\n        (+ n (triangular (- n 1)))))\n  (define (find_Index_helper n i)\n    (if (= (expt 10 n) (triangular i))\n        i\n        (find_Index_helper n (+ i 1))))\n  (find_Index_helper n 1))\n",
    "  (define (triangular n)\n    (define (helper n acc)\n      (if (= n 0)\n          acc\n          (helper (- n 1) (+ acc n))))\n    (helper n 0))\n  (define (helper n acc)\n    (if (= (number->string (triangular acc)) (number->string n))\n        acc\n        (helper n (+ acc 1))))\n  (helper n 1))\n",
    "  (define (find_Index_iter n i)\n    (if (&gt; (number-&gt;string (triangular i)) n)\n        (- i 1)\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (define (triangular n)\n    (define (triangular-iter n acc)\n      (if (= n 1)\n          acc\n          (triangular-iter (- n 1) (+ n acc))))\n    (triangular-iter n 0))\n  (define (find-index-iter n i)\n    (if (= (number->string (triangular i)) (number->string (expt 10 n)))\n        i\n        (find-index-iter n (+ i 1))))\n  (find-index-iter n 1))\n",
    "  (define (find_Index_iter n i)\n    (if (&lt; (number-&gt;string (triangular i)) (number-&gt;string n))\n        (find_Index_iter n (+ i 1))\n        i))\n  (find_Index_iter n 1))\n",
    "  (let loop ([i 1] [triangle 0])\n    (cond\n      [(= n (number->string triangle)) i]\n      [else (loop (+ i 1) (+ triangle i))])))\n",
    "  (define (find_Index_iter n i)\n    (if (&gt; (number-&gt;string (triangular i)) (number-&gt;string n))\n        (- i 1)\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (let loop ([i 1] [triangle 0])\n    (cond [(= (number->string triangle) (number->string (expt 10 n))) i]\n          [else (loop (+ i 1) (+ triangle i))])))\n",
    "  (define (is_triangular n)\n    (define (triangular n)\n      (if (= n 0)\n          0\n          (+ n (triangular (- n 1)))))\n    (define (is_triangular_helper n i)\n      (if (= (triangular i) n)\n          #t\n          (if (&gt; (triangular i) n)\n              #f\n              (is_triangular_helper n (+ i 1)))))\n    (is_triangular_helper n 1))\n  (define (find_Index_helper n i)\n    (if (is_triangular (* i i))\n        i\n        (find_Index_helper n (+ i 1))))\n  (find_Index_helper n 1))\n</code>\nI am trying to write a function that finds the index of the smallest triangular number with n digits. I have written a function that checks if a number is triangular, and another that finds the triangular number of a given index. I am trying to use these two functions to write the function that finds the index of the smallest triangular number with n digits. I am having trouble with the base case of the find_Index_helper function. I am trying to make the base case when the triangular number of the index i has n digits, but I am not sure how to do this. I have tried using the log function, but I am not sure how to use it in this case.\n\n\nA:\n\nYou can use <code>log</code> to find the number of digits of a number.\n<code>(define (num-digits n)\n  (ceiling (log n 10)))\n</code>\nThen you can use this to find the index of the smallest triangular number with n digits.\n<code>(define (find-index n)\n  (define (triangular n)\n    (if (= n 0)\n        0\n        (+ n (triangular (- n 1)))))\n  (define (find-index-helper n i)\n    (if (= (num-digits (triangular i)) n)\n        i\n        (find-index-helper n (+ i 1))))\n  (find-index-helper n 1))\n</code>\n",
    "  (let loop ((i 1) (j 1))\n    (if (= (number->string (triangular i)) (make-string n #\\0))\n        i\n        (loop (+ i 1) (+ j 1)))))\n",
    "  (define (find_Index_iter i)\n    (if (&gt; (number-&gt;string (triangular i)) n)\n        i\n        (find_Index_iter (+ i 1))))\n  (find_Index_iter 1))\n",
    "  (define (find_Index_iter i)\n    (if (&lt; (number-&gt;string (triangular i)) (number-&gt;string (* 10 n)))\n        (find_Index_iter (+ i 1))\n        (- i 1)))\n  (find_Index_iter 1))\n",
    "  (define (triangular n)\n    (if (= n 1)\n        1\n        (+ n (triangular (- n 1)))))\n  (define (find_Index_helper n i)\n    (if (= (number->string (triangular i)) (number->string (expt 10 n)))\n        i\n        (find_Index_helper n (+ i 1))))\n  (find_Index_helper n 1))\n",
    "  (define (find_Index_iter n i)\n    (cond\n      [(= n (length (number->string (triangle i)))) i]\n      [else (find_Index_iter n (+ i 1))]))\n  (find_Index_iter n 1))\n",
    "  (define (triangular n)\n    (if (= n 1)\n        1\n        (+ n (triangular (- n 1)))))\n  (define (find_Index_helper n i)\n    (if (= (number->string (triangular i)) (number->string (expt 10 n)))\n        i\n        (find_Index_helper n (+ i 1))))\n  (find_Index_helper n 1))\n",
    "  (define (find_Index_iter n i)\n    (if (= (number->string (triangular i)) (number->string n))\n        i\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (define (triangular n)\n    (if (= n 1)\n        1\n        (+ n (triangular (- n 1)))))\n  (define (find_Index_helper n i)\n    (if (= (number->string (triangular i)) (number->string (expt 10 n)))\n        i\n        (find_Index_helper n (+ i 1))))\n  (find_Index_helper n 1))\n",
    "  (let loop ([i 1] [triangle 0])\n    (cond\n      [(= (number->string triangle) (number->string (expt 10 n))) i]\n      [else (loop (+ i 1) (+ triangle i))])))\n",
    "  (define (triangular n)\n    (if (= n 1)\n        1\n        (+ n (triangular (- n 1)))))\n  (define (find_Index_helper n i)\n    (if (= (number->string (triangular i)) (number->string (expt 10 n)))\n        i\n        (find_Index_helper n (+ i 1))))\n  (find_Index_helper n 1))\n",
    "  (define (find_Index_iter i)\n    (if (&gt; (number-&gt;string (triangular i)) n)\n        i\n        (find_Index_iter (+ i 1))))\n  (find_Index_iter 1))\n",
    "  (define (triangular x)\n    (define (triangular-iter x y)\n      (if (= x 0)\n          y\n          (triangular-iter (- x 1) (+ y x))))\n    (triangular-iter x 0))\n  (define (find-index-iter x)\n    (if (= (length (number->string (triangular x))) n)\n        x\n        (find-index-iter (+ x 1))))\n  (find-index-iter 1))\n",
    "  (define (find_Index_iter n i)\n    (if (&gt; (number-&gt;string (triangular i)) (number-&gt;string n))\n        i\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (define (triangular n)\n    (if (= n 1)\n        1\n        (+ n (triangular (- n 1)))))\n  (define (find_Index_helper n i)\n    (if (= (length (number->string (triangular i))) n)\n        i\n        (find_Index_helper n (+ i 1))))\n  (find_Index_helper n 1))\n",
    "  (define (triangular n)\n    (if (= n 1)\n        1\n        (+ n (triangular (- n 1)))))\n  (define (find_Index_helper n i)\n    (if (= (number->string (triangular i)) (number->string (expt 10 n)))\n        i\n        (find_Index_helper n (+ i 1))))\n  (find_Index_helper n 1))\n",
    "  (define (triangular n)\n    (if (= n 1)\n        1\n        (+ n (triangular (- n 1)))))\n  (define (find_Index_helper n i)\n    (if (= (number->string (triangular i)) (number->string (expt 10 n)))\n        i\n        (find_Index_helper n (+ i 1))))\n  (find_Index_helper n 1))\n",
    "  (define (find_Index_iter n i)\n    (if (&lt; (number-&gt;string (triangular i)) n)\n        (find_Index_iter n (+ i 1))\n        (- i 1)))\n  (find_Index_iter n 1))\n",
    "  (define (find_Index_iter i)\n    (if (&gt; (number-&gt;string (triangular i)) (number-&gt;string n))\n        (- i 1)\n        (find_Index_iter (+ i 1))))\n  (find_Index_iter 1))\n",
    "  (let loop ([i 1] [j 1])\n    (if (= (number->string (triangular i)) (number->string n))\n        i\n        (loop (+ i 1) (+ j 1)))))\n",
    "  (define (triangular n)\n    (define (helper n acc)\n      (if (= n 0)\n          acc\n          (helper (- n 1) (+ acc n))))\n    (helper n 0))\n  (define (helper n acc)\n    (if (= (number->string (triangular acc)) (number->string (expt 10 n)))\n        acc\n        (helper n (+ acc 1))))\n  (helper n 1))\n",
    "  (define (find_Index_iter n i)\n    (if (&gt; (number-&gt;string (triangular i)) n)\n        i\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (define (find_Index_iter n i)\n    (if (&gt; (number-&gt;string (triangular i)) (number-&gt;string n))\n        i\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (let loop ([i 1] [tri 1])\n    (if (= (number->string tri) (number->string (expt 10 n)))\n        i\n        (loop (+ i 1) (+ tri i)))))\n",
    "  (define (find_Index_iter n i)\n    (if (&gt; (number-&gt;string (triangular i)) (number-&gt;string n))\n        i\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (define (triangular n)\n    (if (= n 1)\n        1\n        (+ n (triangular (- n 1)))))\n  (define (find_Index_helper n i)\n    (if (= (number->string (triangular i)) (number->string (expt 10 n)))\n        i\n        (find_Index_helper n (+ i 1))))\n  (find_Index_helper n 1))\n",
    "  (let loop ((i 1) (j 1) (k 1))\n    (cond ((= (number->string (triangular k)) (make-string n #\\0))\n           (- i 1))\n          ((> (number->string (triangular k)) (make-string n #\\0))\n           (loop (+ i 1) j (+ k 1)))\n          (else (loop i (+ j 1) (+ k 1))))))\n",
    "  (define (find_Index_iter n i)\n    (if (&gt; (number-&gt;string (triangular i)) (number-&gt;string n))\n        i\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (let loop ([i 1] [triangle 0])\n    (cond\n      [(= n (length (number->string triangle))) i]\n      [else (loop (+ i 1) (+ triangle i))])))\n",
    "  (define (find_Index_iter n i)\n    (if (&gt; (number-&gt;string (triangular i)) (number-&gt;string n))\n        i\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (define (find_Index_iter i)\n    (if (&gt; (number-&gt;string (triangular i)) (number-&gt;string n))\n        i\n        (find_Index_iter (+ i 1))))\n  (find_Index_iter 1))\n",
    "  (define (triangular n)\n    (define (triangular-iter n sum)\n      (if (= n 0)\n          sum\n          (triangular-iter (- n 1) (+ n sum))))\n    (triangular-iter n 0))\n  (define (find-Index-iter n i)\n    (if (= (number->string (triangular i)) (number->string (expt 10 (- n 1))))\n        i\n        (find-Index-iter n (+ i 1))))\n  (find-Index-iter n 1))\n",
    "  (define (find_Index_iter n i)\n    (if (= (number->string (triangular i)) (number->string n))\n        i\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (define (find_Index_iter n i)\n    (cond\n      [(= n (length (number->string (triangular i)))) i]\n      [else (find_Index_iter n (+ i 1))]))\n  (find_Index_iter n 1))\n",
    "  (define (find_Index_iter n i)\n    (cond ((&gt; (number-&gt;string (triangular i)) n) (- i 1))\n          (else (find_Index_iter n (+ i 1)))))\n  (find_Index_iter n 1))\n",
    "  (define (triangular x)\n    (define (triangular-iter x y)\n      (if (= x 0)\n          y\n          (triangular-iter (- x 1) (+ y x))))\n    (triangular-iter x 0))\n  (define (find-Index-iter x)\n    (if (= (number->string (triangular x)) (substring (number->string (triangular x)) 0 n))\n        x\n        (find-Index-iter (+ x 1))))\n  (find-Index-iter 1))\n",
    "  (define (triangular n)\n    (define (helper n acc)\n      (if (= n 0)\n          acc\n          (helper (- n 1) (+ acc n))))\n    (helper n 0))\n  (define (find_Index_helper n i)\n    (if (= (number->string (triangular i)) (number->string n))\n        i\n        (find_Index_helper n (+ i 1))))\n  (find_Index_helper n 1))\n",
    "  (define (find_Index_iter i)\n    (if (&gt; (number-&gt;string (triangular i)) (number-&gt;string (expt 10 n)))\n        i\n        (find_Index_iter (+ i 1))))\n  (find_Index_iter 1))\n",
    "  (define (find_Index_iter i)\n    (if (&gt; (number-&gt;string (triangular-number i)) n)\n        i\n        (find_Index_iter (+ i 1))))\n  (find_Index_iter 1))\n",
    "  (let loop ([i 1] [tri 1])\n    (if (= (number->string tri) (substring (number->string (expt 10 n)) 1))\n        i\n        (loop (+ i 1) (+ tri i)))))\n",
    "  (let loop ([i 1] [j 1])\n    (if (= (number->string (triangular i)) (number->string n))\n        i\n        (loop (+ i 1) (+ j 1)))))\n",
    "  (define (find_Index_iter n i)\n    (if (&gt; (number-&gt;string (triangular i)) (number-&gt;string n))\n        i\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (define (find_Index_iter i)\n    (if (&lt; (number-&gt;string (triangular i)) (number-&gt;string (* 10 n)))\n        (find_Index_iter (+ i 1))\n        (- i 1)))\n  (find_Index_iter 1))\n",
    "  (define (find_Index_iter i)\n    (if (&gt; (number-&gt;string (triangular i)) n)\n        i\n        (find_Index_iter (+ i 1))))\n  (find_Index_iter 1))\n",
    "  (define (find_Index_iter n i)\n    (if (= (number->string (triangular i)) (number->string n))\n        i\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (define (find_Index_iter n i)\n    (if (&gt; (number-&gt;string (triangular i)) (number-&gt;string n))\n        i\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (define (find_Index_iter n i)\n    (if (&gt; (number-&gt;string (triangular i)) n)\n        i\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (define (find_Index_iter i)\n    (if (&gt; (number-&gt;string (triangular i)) (number-&gt;string (expt 10 (- n 1))))\n        i\n        (find_Index_iter (+ i 1))))\n  (find_Index_iter 1))\n",
    "  (let loop ((i 1) (tri 1))\n    (if (= (length (number->string tri)) n)\n        i\n        (loop (+ i 1) (+ tri i)))))\n",
    "  (define (find_Index_iter i)\n    (if (&gt; (number-&gt;string (triangular i)) n)\n        i\n        (find_Index_iter (+ i 1))))\n  (find_Index_iter 1))\n",
    "  (define (triangular_number n)\n    (if (= n 1)\n        1\n        (+ n (triangular_number (- n 1)))))\n  (define (find_Index_helper n i)\n    (if (= (number->string (triangular_number i)) (number->string (expt 10 n)))\n        i\n        (find_Index_helper n (+ i 1))))\n  (find_Index_helper n 1))\n",
    "  (define (find_Index_iter n i)\n    (if (&gt; (number-&gt;string (triangular i)) n)\n        i\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (define (triangular n)\n    (if (= n 0)\n        0\n        (+ n (triangular (- n 1)))))\n  (define (find_Index_helper n i)\n    (if (&gt; (triangular i) (expt 10 (- n 1)))\n        (- i 1)\n        (find_Index_helper n (+ i 1))))\n  (find_Index_helper n 1))\n",
    "  (define (triangular n)\n    (if (= n 1)\n        1\n        (+ n (triangular (- n 1)))))\n  (define (find_Index_helper n i)\n    (if (= (number->string (triangular i)) (number->string (expt 10 n)))\n        i\n        (find_Index_helper n (+ i 1))))\n  (find_Index_helper n 1))\n",
    "  (define (find_Index_iter n i)\n    (if (&gt; (number-&gt;string (triangular i)) (number-&gt;string n))\n        (- i 1)\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (define (triangular-number n)\n    (if (= n 1)\n        1\n        (+ n (triangular-number (- n 1)))))\n  (define (find-index-helper n i)\n    (if (= (number->string (triangular-number i)) (number->string (expt 10 n)))\n        i\n        (find-index-helper n (+ i 1))))\n  (find-index-helper n 1))\n",
    "  (define (triangular n)\n    (if (= n 1)\n        1\n        (+ n (triangular (- n 1)))))\n  (define (find_Index_helper n i)\n    (if (= (number->string (triangular i)) (number->string (expt 10 n)))\n        i\n        (find_Index_helper n (+ i 1))))\n  (find_Index_helper n 1))\n",
    "  (define (find_Index_iter n i)\n    (if (&gt; (number-&gt;string (triangular i)) n)\n        i\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (define (triangular x)\n    (if (= x 1)\n        1\n        (+ x (triangular (- x 1)))))\n  (define (find_Index_iter i)\n    (if (= (number->string (triangular i)) (number->string (expt 10 (- n 1))))\n        i\n        (find_Index_iter (+ i 1))))\n  (find_Index_iter 1))\n",
    "  (define (find_Index_iter n i)\n    (if (&gt; (number-&gt;string (triangular i)) (number-&gt;string n))\n        i\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (define (triangular n)\n    (if (= n 1)\n        1\n        (+ n (triangular (- n 1)))))\n  (define (find_Index_iter n i)\n    (if (= (number->string (triangular i)) (number->string (expt 10 n)))\n        i\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (define (find_Index_iter n i)\n    (if (&gt; (number-&gt;string (triangular i)) (number-&gt;string n))\n        i\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (define (triangular n)\n    (if (= n 1)\n        1\n        (+ n (triangular (- n 1)))))\n  (define (find_Index_iter n i)\n    (if (= (number->string (triangular i)) (number->string (expt 10 n)))\n        i\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (define (find_Index_iter n i)\n    (if (&gt; (number-&gt;string (triangular i)) (number-&gt;string n))\n        i\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (define (find_Index_iter i)\n    (if (= (number->string (triangular i)) (number->string n))\n        i\n        (find_Index_iter (+ i 1))))\n  (find_Index_iter 1))\n",
    "  (define (find_Index_iter i)\n    (if (&gt; (number-&gt;string (triangular i)) (number-&gt;string n))\n        i\n        (find_Index_iter (+ i 1))))\n  (find_Index_iter 1))\n",
    "  (define (triangular n)\n    (if (= n 0)\n        0\n        (+ n (triangular (- n 1)))))\n  (define (find_Index_helper n i)\n    (if (= (number->string (triangular i)) (number->string (expt 10 n)))\n        i\n        (find_Index_helper n (+ i 1))))\n  (find_Index_helper n 1))\n",
    "  (let loop ([i 1] [j 1])\n    (if (= (number->string (triangular i)) (number->string n))\n        i\n        (loop (+ i 1) (+ j 1)))))\n",
    "  (define (triangular_number n)\n    (if (= n 1)\n        1\n        (+ n (triangular_number (- n 1)))))\n  (define (digits n)\n    (if (= n 0)\n        0\n        (+ 1 (digits (/ n 10)))))\n  (define (find_Index_helper n i)\n    (if (= (digits (triangular_number i)) n)\n        i\n        (find_Index_helper n (+ i 1))))\n  (find_Index_helper n 1))\n</code>\n",
    "  (define (triangular n)\n    (if (= n 1)\n        1\n        (+ n (triangular (- n 1)))))\n  (define (find_Index_iter n i)\n    (if (= (number->string (triangular i)) (number->string (expt 10 n)))\n        i\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (define (triangular n)\n    (if (= n 0)\n        0\n        (+ n (triangular (- n 1)))))\n  (define (find_Index_helper n i)\n    (if (= (number->string (triangular i)) (number->string (expt 10 n)))\n        i\n        (find_Index_helper n (+ i 1))))\n  (find_Index_helper n 1))\n",
    "  (define (triangular n)\n    (if (= n 0)\n        0\n        (+ n (triangular (- n 1)))))\n  (define (find_Index_helper n index)\n    (if (= (length (number->string (triangular index))) n)\n        index\n        (find_Index_helper n (+ index 1))))\n  (find_Index_helper n 1))\n",
    "  (define (triangular n)\n    (if (= n 0)\n        0\n        (+ n (triangular (- n 1)))))\n  (define (find_Index_helper n i)\n    (if (= (number->string (triangular i)) (number->string (expt 10 n)))\n        i\n        (find_Index_helper n (+ i 1))))\n  (find_Index_helper n 1))\n",
    "  (define (find_Index_iter n i)\n    (if (&gt; (number-&gt;string (triangular i)) n)\n        i\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (define (find_Index_iter n i)\n    (if (&lt; (number-&gt;string (triangular i)) n)\n        (find_Index_iter n (+ i 1))\n        (- i 1)))\n  (find_Index_iter n 1))\n",
    "  (define (triangular n)\n    (if (= n 1)\n        1\n        (+ n (triangular (- n 1)))))\n  (define (find_Index_helper n i)\n    (if (= (number->string (triangular i)) (number->string (expt 10 n)))\n        i\n        (find_Index_helper n (+ i 1))))\n  (find_Index_helper n 1))\n",
    "  (define (find_Index_iter i)\n    (if (&gt; (number-&gt;string (triangular i)) (number-&gt;string (expt 10 n)))\n        (- i 1)\n        (find_Index_iter (+ i 1))))\n  (find_Index_iter 1))\n",
    "  (define (find_Index_iter n i)\n    (if (&gt; (number-&gt;string (triangular i)) (number-&gt;string n))\n        (- i 1)\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (define (find_Index_iter n i)\n    (if (&gt; (number-&gt;string (triangular i)) n)\n        i\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (let loop ([i 1] [tri 1])\n    (if (= (number->string tri) (number->string (expt 10 n)))\n        i\n        (loop (+ i 1) (+ tri i)))))\n",
    "  (define (triangle n)\n    (if (= n 1)\n        1\n        (+ n (triangle (- n 1)))))\n  (define (triangle_n n)\n    (define (helper n i)\n      (if (= (number->string (triangle i)) n)\n          i\n          (helper n (+ i 1))))\n    (helper n 1))\n  (triangle_n (number->string n)))\n",
    "  (let loop ([i 1] [triangle 0])\n    (cond\n      [(= (number->string triangle) (number->string (expt 10 n))) i]\n      [else (loop (+ i 1) (+ triangle i))])))\n",
    "  (define (triangular n)\n    (if (= n 1)\n        1\n        (+ n (triangular (- n 1)))))\n  (define (find_Index_iter n i)\n    (if (= (number->string (triangular i)) (number->string n))\n        i\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (define (find_Index_iter n i)\n    (if (&gt; (number-&gt;string (triangular i)) n)\n        i\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (define (find_Index_iter n i)\n    (if (&gt; (number-&gt;string (triangular i)) n)\n        i\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (define (find_Index_iter n i)\n    (if (&gt; (number-&gt;string (triangular i)) n)\n        i\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (define (triangular x)\n    (define (triangular-iter x y)\n      (if (= x y)\n          y\n          (triangular-iter (+ x 1) (+ y x))))\n    (triangular-iter 1 1))\n  (define (find-Index-iter x)\n    (if (= (length (number->string (triangular x))) n)\n        x\n        (find-Index-iter (+ x 1))))\n  (find-Index-iter 1))\n",
    "  (define (find_Index_iter n i)\n    (if (&lt; (number-&gt;string (triangular i)) (number-&gt;string n))\n        (find_Index_iter n (+ i 1))\n        (- i 1)))\n  (find_Index_iter n 1))\n",
    "  (define (triangular x)\n    (define (triangular-iter x y)\n      (if (= x 1)\n          y\n          (triangular-iter (- x 1) (+ x y))))\n    (triangular-iter x 0))\n  (define (find-index-iter x)\n    (if (= (number->string (triangular x)) (number->string (expt 10 n)))\n        x\n        (find-index-iter (+ x 1))))\n  (find-index-iter 1))\n",
    "  (define (find_Index_iter n i)\n    (if (&lt; (number-&gt;string (triangular i)) n)\n        (find_Index_iter n (+ i 1))\n        (- i 1)))\n  (find_Index_iter n 1))\n",
    "  (define (find_Index_iter n i)\n    (if (&gt; (number-&gt;string (triangular i)) n)\n        i\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (define (find_Index_iter n i)\n    (if (&gt; (number-&gt;string (triangular i)) n)\n        i\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (define (find_Index_iter n i)\n    (if (&gt; (number-&gt;string (triangular i)) n)\n        (- i 1)\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (define (find_Index_iter n i)\n    (if (&gt; (expt 10 n) (triangular i))\n        i\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (define (find_Index_iter n i)\n    (if (&gt; (number-&gt;string (triangular i)) (number-&gt;string n))\n        (- i 1)\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (define (find_Index_iter i)\n    (if (&gt; (number-&gt;string (triangular i)) n)\n        i\n        (find_Index_iter (+ i 1))))\n  (find_Index_iter 1))\n",
    "  (define (find_Index_helper n i)\n    (if (&gt; (number-&gt;string (triangular i)) n)\n        i\n        (find_Index_helper n (+ i 1))))\n  (find_Index_helper n 1))\n",
    "  (define (triangular n)\n    (if (= n 1)\n        1\n        (+ n (triangular (- n 1)))))\n  (define (find_Index_iter n i)\n    (if (= (number->string (triangular i)) (number->string (expt 10 n)))\n        i\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (define (find_Index_iter n i)\n    (cond\n      [(= n (number->string (triangular i))) i]\n      [else (find_Index_iter n (+ i 1))]))\n  (find_Index_iter n 1))\n",
    "  (define (find_Index_iter i)\n    (if (&gt; (number-&gt;string (triangular i)) (number-&gt;string (expt 10 n)))\n        i\n        (find_Index_iter (+ i 1))))\n  (find_Index_iter 1))\n",
    "  (define (find_Index_iter n i)\n    (if (= (number->string (triangular i)) (number->string n))\n        i\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (define (triangular n)\n    (if (= n 1)\n        1\n        (+ n (triangular (- n 1)))))\n  (define (find_Index_helper n i)\n    (if (= (number->string (triangular i)) (number->string n))\n        i\n        (find_Index_helper n (+ i 1))))\n  (find_Index_helper n 1))\n",
    "  (define (triangular n)\n    (if (= n 1)\n        1\n        (+ n (triangular (- n 1)))))\n  (define (find_Index_helper n i)\n    (if (= (number->string (triangular i)) (number->string (expt 10 n)))\n        i\n        (find_Index_helper n (+ i 1))))\n  (find_Index_helper n 1))\n",
    "  (define (triangular n)\n    (if (= n 1)\n        1\n        (+ n (triangular (- n 1)))))\n  (define (find_Index_helper n i)\n    (if (= (number->string (triangular i)) (number->string (expt 10 n)))\n        i\n        (find_Index_helper n (+ i 1))))\n  (find_Index_helper n 1))\n",
    "  (define (triangular x)\n    (if (= x 1)\n        1\n        (+ x (triangular (- x 1)))))\n  (define (find_Index_helper n i)\n    (if (= (number->string (triangular i)) n)\n        i\n        (find_Index_helper n (+ i 1))))\n  (find_Index_helper n 1))\n",
    "  (define (triangular n)\n    (define (helper n acc)\n      (if (= n 0)\n          acc\n          (helper (- n 1) (+ acc n))))\n    (helper n 0))\n  (define (helper n acc)\n    (if (= (number->string (triangular acc)) (number->string (expt 10 (- n 1))))\n        acc\n        (helper n (+ acc 1))))\n  (helper n 1))\n",
    "  (define (find_Index_iter i)\n    (if (= (number->string (triangular i)) (number->string (expt 10 (- n 1))))\n        i\n        (find_Index_iter (+ i 1))))\n  (find_Index_iter 1))\n",
    "  (define (find_Index_iter n i)\n    (if (&gt; (number-&gt;string (triangular i)) (number-&gt;string n))\n        i\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (define (find_Index_iter n i)\n    (if (= (number->string (triangular i)) (number->string n))\n        i\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (define (triangular n)\n    (if (= n 1)\n        1\n        (+ n (triangular (- n 1)))))\n  (define (find_Index_helper n i)\n    (if (= (number->string (triangular i)) (number->string (expt 10 n)))\n        i\n        (find_Index_helper n (+ i 1))))\n  (find_Index_helper n 1))\n",
    "  (define (triangular n)\n    (if (= n 1)\n        1\n        (+ n (triangular (- n 1)))))\n  (define (find_Index_helper n i)\n    (if (= (number->string (triangular i)) (number->string (expt 10 n)))\n        i\n        (find_Index_helper n (+ i 1))))\n  (find_Index_helper n 1))\n",
    "  (define (triangular_number n)\n    (if (= n 1)\n        1\n        (+ n (triangular_number (- n 1)))))\n  (define (find_Index_helper n i)\n    (if (= (number->string (triangular_number i)) (number->string n))\n        i\n        (find_Index_helper n (+ i 1))))\n  (find_Index_helper n 1))\n",
    "  (let loop ((i 1) (j 1))\n    (if (= (number->string (triangular i)) (substring (number->string (triangular i)) 0 n))\n        i\n        (loop (+ i 1) (+ j 1)))))\n",
    "  (define (find_Index_iter n i)\n    (if (&gt; (number-&gt;string (triangular i)) n)\n        (- i 1)\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (let loop ([i 1] [triangle 0])\n    (cond\n      [(= (number->string triangle) (number->string (expt 10 n))) i]\n      [else (loop (+ i 1) (+ triangle i))])))\n",
    "  (define (find_Index_iter n i)\n    (if (&gt; (number-&gt;string (triangular i)) n)\n        i\n        (find_Index_iter n (+ i 1))))\n  (find_Index_iter n 1))\n",
    "  (define (find_Index_helper n i)\n    (if (= (number->string (triangular i)) (number->string n))\n        i\n        (find_Index_helper n (+ i 1))))\n  (find_Index_helper n 1))\n",
    "  (define (find_Index_iter counter sum)\n    (cond\n      [(= (number->string sum) (number->string (expt 10 n))) counter]\n      [else (find_Index_iter (+ counter 1) (+ sum counter))]))\n  (find_Index_iter 1 1))\n"
  ]
}