{
  "name": "mbpp_437_remove_odd",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to remove odd characters in a string.\n(define (remove_odd str1)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_437_remove_odd.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate remove_odd))\n    (check-equal? (candidate \"python\") \"yhn\")\n    (check-equal? (candidate \"program\") \"rga\")\n    (check-equal? (candidate \"language\") \"agae\")\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (string-join\n   (filter even?\n           (string->list str1))))\n",
    "  (define (remove_odd_iter str1 str2 i)\n    (cond ((= i (string-length str1)) str2)\n          ((= (modulo i 2) 0) (remove_odd_iter str1 (string-append str2 (string (string-ref str1 i))) (+ i 1)))\n          (else (remove_odd_iter str1 str2 (+ i 1)))))\n  (remove_odd_iter str1 \"\" 0))\n",
    "  (string-join\n   (filter (lambda (x) (even? (char-&gt;integer x)))\n           (string-&gt;list str1))))\n",
    "  (string-join\n   (filter (lambda (x) (even? (string-length x)))\n           (string-split str1 #\\space))\n   #\\space))\n",
    "  (string-join\n   (filter (lambda (x) (even? (char->integer x))) (string->list str1))))\n",
    "  (string-append (substring str1 0 (remainder (string-length str1) 2))\n                 (substring str1 (remainder (string-length str1) 2))))\n",
    "  (string-append (substring str1 0 2)\n                 (substring str1 4)))\n",
    "  (string-join\n   (filter (lambda (x) (even? (char->integer x)))\n           (string->list str1))))\n",
    "  (string-join\n   (filter (lambda (x) (even? (char->integer x)))\n           (string->list str1))))\n",
    "  (string-append (substring str1 0 2)\n                 (substring str1 4 6)\n                 (substring str1 8 10)))\n",
    "  (string-append (substring str1 0 (remainder (string-length str1) 2))\n                 (substring str1 (remainder (string-length str1) 2))))\n",
    "  (string-append (substring str1 0 1)\n                 (substring str1 2)))\n",
    "  (string-join (filter even? (string->list str1))))\n",
    "  (string-join\n   (filter (lambda (x) (even? (char->integer x))) (string->list str1))))\n",
    "  (string-join\n   (filter (lambda (x) (even? (string-length x)))\n           (string-split str1 #\\space))))\n",
    "  (string-join\n   (filter (lambda (x) (even? (string-length x)))\n           (string-split str1 #\\space))))\n",
    "  (define (remove_odd-iter str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(odd? (char->integer (first str1))) (remove_odd-iter (rest str1) str2)]\n      [else (remove_odd-iter (rest str1) (string-append str2 (string (first str1))))]))\n  (remove_odd-iter str1 \"\"))\n",
    "  (string-append\n   (substring str1 0 (remainder (string-length str1) 2))\n   (substring str1 (remainder (string-length str1) 2))))\n",
    "  (define (remove_odd_helper str1 str2)\n    (if (empty? str1)\n        str2\n        (if (odd? (char-&gt;integer (first str1)))\n            (remove_odd_helper (rest str1) str2)\n            (remove_odd_helper (rest str1) (string-append str2 (string (first str1)))))))\n  (remove_odd_helper str1 \"\"))\n",
    "  (string-join\n   (filter (lambda (x) (even? (string-length x)))\n           (string-split str1 #\\space))\n   #\\space))\n"
  ]
}