{
  "name": "mbpp_724_power_base_sum",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_724_power_base_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum-iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum-iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprbc06l73.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprbc06l73.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprbc06l73.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprbc06l73.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum-iter base power result)\n    (cond\n      [(zero? power) result]\n      [else (power_base_sum-iter base (- power 1) (+ result (sum-digits (expt base power))))]))\n  (power_base_sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509816,
      "stdout": "",
      "stderr": "/tmp/tmpzjderm2w.rkt:8:61: sum-digits: unbound identifier\n  in: sum-digits\n  location...:\n   /tmp/tmpzjderm2w.rkt:8:61\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509816,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf5glsos.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf5glsos.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf5glsos.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf5glsos.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum-iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum-iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum-iter base power 0))\n</code>\nI'm not sure if this is the most efficient way to do it, but it works.\n\n\nA:\n\nYou can use the <code>for/sum</code> loop to iterate over the powers of <code>base</code>, and then use the <code>modulo</code> function to get the last digit of each power.\n<code>(define (power-base-sum base power)\n  (for/sum ([i (in-range power)])\n    (modulo (expt base i) 10)))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509816,
      "stdout": "",
      "stderr": "/tmp/tmpvjldd__5.rkt:11:50: do: bad syntax\n  in: do\n  location...:\n   /tmp/tmpvjldd__5.rkt:11:50\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/wrap-modbeg.rkt:46:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond\n      [(zero? power) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509816,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy3bf7sk3.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy3bf7sk3.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy3bf7sk3.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy3bf7sk3.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          ((= power 1) (+ sum base))\n          (else (power_base_sum_iter base (- power 1) (+ sum base)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509816,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6achckv8.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6achckv8.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6achckv8.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum-iter base power sum)\n    (cond ((= power 0) sum)\n          ((= power 1) (+ sum base))\n          (else (power_base_sum-iter base (- power 1) (+ sum (* base (expt base (- power 1))))))))\n  (power_base_sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509816,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6n3oidf5.rkt:16:4\nactual:     2535301200456458802993406410750\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6n3oidf5.rkt:17:4\nactual:     1227133512\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6n3oidf5.rkt:18:4\nactual:     40210710958664\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6n3oidf5.rkt:19:4\nactual:     39\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))]))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509816,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd809eg8n.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd809eg8n.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd809eg8n.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_helper base power acc)\n    (cond ((= power 0) acc)\n          (else (power_base_sum_helper base (- power 1) (+ acc (expt base power))))))\n  (power_base_sum_helper base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509816,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3c9uowpt.rkt:15:4\nactual:     2535301200456458802993406410750\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3c9uowpt.rkt:16:4\nactual:     1227133512\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3c9uowpt.rkt:17:4\nactual:     40210710958664\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3c9uowpt.rkt:18:4\nactual:     39\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power-helper base power result)\n    (cond ((= power 0) result)\n          (else (power-helper base (- power 1) (+ result (expt base power))))))\n  (define (sum-digits number)\n    (cond ((= number 0) 0)\n          (else (+ (modulo number 10) (sum-digits (quotient number 10))))))\n  (sum-digits (power-helper base power 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509816,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2w29uxtq.rkt:18:4\nactual:     111\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2w29uxtq.rkt:19:4\nactual:     27\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2w29uxtq.rkt:20:4\nactual:     53\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2w29uxtq.rkt:21:4\nactual:     12\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_helper base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_helper base (- power 1) (+ sum (modulo (expt base power) 10)))))\n  (power_base_sum_helper base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509816,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps5xhp0fa.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps5xhp0fa.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps5xhp0fa.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps5xhp0fa.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum-iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum-iter base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp55a3f290.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp55a3f290.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp55a3f290.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp55a3f290.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          ((= power 1) (+ sum base))\n          (else (power_base_sum_iter base (- power 1) (+ sum base)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509816,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6achckv8.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6achckv8.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6achckv8.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10))))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509816,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy1l44nca.rkt:15:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy1l44nca.rkt:16:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy1l44nca.rkt:17:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy1l44nca.rkt:18:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(zero? power) 1]\n    [else\n     (let ([base-power (expt base power)])\n       (cond\n         [(zero? base-power) 0]\n         [else\n          (+ (modulo base-power 10)\n             (power_base_sum base (- power 1)))]))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509816,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp89cuw0k2.rkt:20:4\nactual:     501\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp89cuw0k2.rkt:21:4\nactual:     53\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp89cuw0k2.rkt:22:4\nactual:     75\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp89cuw0k2.rkt:23:4\nactual:     20\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 0]\n    [else\n     (let ([result (expt base power)])\n       (cond\n         [(= result 0) 0]\n         [else\n          (+ (remainder result 10)\n             (power_base_sum base (- power 1)))]))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509816,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_v__lb0f.rkt:20:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_v__lb0f.rkt:21:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_v__lb0f.rkt:22:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_v__lb0f.rkt:23:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power-base-sum-iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power-base-sum-iter base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power-base-sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509816,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8hzcym8q.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8hzcym8q.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8hzcym8q.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8hzcym8q.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 0]\n    [else (+ (remainder base 10) (power_base_sum base (- power 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124183,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsdjptok0.rkt:14:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsdjptok0.rkt:15:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsdjptok0.rkt:16:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 1]\n    [else (sum-digits (expt base power))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "/tmp/tmpw8agfitj.rkt:7:11: sum-digits: unbound identifier\n  in: sum-digits\n  location...:\n   /tmp/tmpw8agfitj.rkt:7:11\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))\n          )))\n  (power_base_sum_iter base power 0)\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124183,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp30ywc0tv.rkt:17:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp30ywc0tv.rkt:18:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp30ywc0tv.rkt:19:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_helper base power sum)\n    (cond\n      [(= power 0) sum]\n      [(= power 1) (+ sum base)]\n      [else (power_base_sum_helper base (- power 1) (+ sum base))]))\n  (power_base_sum_helper base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124183,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcd6r8txh.rkt:17:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcd6r8txh.rkt:18:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcd6r8txh.rkt:19:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 1]\n    [else\n     (apply + (map string-&gt;number (string-split (number-&gt;string (expt base power)) #\\space)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124182,
      "stdout": "",
      "stderr": "/tmp/tmpb6szqksi.rkt:8:14: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 10\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_helper base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_helper base (- power 1) (+ sum (modulo (expt base power) 10)))))\n  (power_base_sum_helper base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509816,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps5xhp0fa.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps5xhp0fa.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps5xhp0fa.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps5xhp0fa.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          ((= base 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum base)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124183,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1b0t4a6d.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1b0t4a6d.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1b0t4a6d.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 1]\n    [else\n     (let ([result (* base (power_base_sum base (- power 1)))])\n       (cond\n         [(= result 0) 0]\n         [else\n          (+ (remainder result 10) (power_base_sum (/ result 10) 0))]))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmw3zxkow.rkt:19:4\nactual:     1\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmw3zxkow.rkt:20:4\nactual:     3\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmw3zxkow.rkt:21:4\nactual:     5\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmw3zxkow.rkt:22:4\nactual:     10\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum-iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum-iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprbc06l73.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprbc06l73.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprbc06l73.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprbc06l73.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_helper base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_helper base (- power 1) (+ sum (modulo (expt base power) 10)))))\n  (power_base_sum_helper base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509816,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps5xhp0fa.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps5xhp0fa.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps5xhp0fa.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps5xhp0fa.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 1]\n    [else\n     (let ([p (expt base power)])\n       (cond\n         [(= p 0) 0]\n         [else\n          (+ (modulo p 10) (power_base_sum base (- power 1)))]))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124183,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo24ics_o.rkt:19:4\nactual:     501\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo24ics_o.rkt:20:4\nactual:     53\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo24ics_o.rkt:21:4\nactual:     75\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo24ics_o.rkt:22:4\nactual:     20\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ (remainder (expt base power) 10) sum))]))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124183,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk5bstula.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk5bstula.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk5bstula.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk5bstula.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(zero? power) 1]\n    [else\n     (let ([result (expt base power)])\n       (cond\n         [(zero? result) 0]\n         [else\n          (+ (remainder result 10)\n             (power_base_sum base (- power 1)))]))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124183,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps9oyqwcu.rkt:20:4\nactual:     501\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps9oyqwcu.rkt:21:4\nactual:     53\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps9oyqwcu.rkt:22:4\nactual:     75\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps9oyqwcu.rkt:23:4\nactual:     20\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_helper base power acc)\n    (if (= power 0)\n        acc\n        (power_base_sum_helper base (- power 1) (+ acc (remainder (expt base power) 10)))))\n  (power_base_sum_helper base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy372al9_.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy372al9_.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy372al9_.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy372al9_.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509816,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf5glsos.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf5glsos.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf5glsos.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf5glsos.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum-iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum-iter base (- power 1) (+ sum (remainder (expt base power) 10))))))\n  (power_base_sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpforf09m9.rkt:15:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpforf09m9.rkt:16:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpforf09m9.rkt:17:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpforf09m9.rkt:18:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_helper base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_helper base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum_helper base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124165,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8wmimlzm.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8wmimlzm.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8wmimlzm.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8wmimlzm.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_helper base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_helper base (- power 1) (+ sum (modulo base 10)))]))\n  (power_base_sum_helper base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124183,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdszih0z_.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdszih0z_.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdszih0z_.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))\n          )\n    )\n  )\n  (power_base_sum_iter base power 0)\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124183,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnt75vo38.rkt:19:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnt75vo38.rkt:20:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnt75vo38.rkt:21:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 1]\n    [else\n     (let ([result (* base (power_base_sum base (- power 1)))])\n       (cond\n         [(= result 0) 0]\n         [else\n          (+ (modulo result 10)\n             (power_base_sum (quotient result 10) power))]))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124196,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2gm8y0wt.rkt:20:4\nactual:     7\nexpected:   115\n--------------------\n",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum-iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum-iter base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp55a3f290.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp55a3f290.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp55a3f290.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp55a3f290.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power-base-sum-iter base power acc)\n    (if (= power 0)\n        acc\n        (power-base-sum-iter base (- power 1) (+ acc (expt base power)))))\n  (power-base-sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124183,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2znll82l.rkt:16:4\nactual:     2535301200456458802993406410750\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2znll82l.rkt:17:4\nactual:     1227133512\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2znll82l.rkt:18:4\nactual:     40210710958664\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2znll82l.rkt:19:4\nactual:     39\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 1]\n    [else\n     (let ([result (* base (power_base_sum base (- power 1)))])\n       (cond\n         [(= result 0) 0]\n         [else\n          (+ (remainder result 10) (power_base_sum base power))]))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124181,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum-iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum-iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprbc06l73.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprbc06l73.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprbc06l73.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprbc06l73.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 1]\n    [else\n     (let ([result (* base (power_base_sum base (- power 1)))])\n       (cond\n         [(= result 0) 0]\n         [else\n          (+ (modulo result 10) (power_base_sum (/ result 10) 0))]))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124165,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp597ndua3.rkt:19:4\nactual:     1\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp597ndua3.rkt:20:4\nactual:     3\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp597ndua3.rkt:21:4\nactual:     5\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp597ndua3.rkt:22:4\nactual:     10\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_helper base power)\n    (cond\n      [(= power 0) 1]\n      [else (* base (power_base_sum_helper base (- power 1)))]))\n  (define (sum_digits number)\n    (cond\n      [(= number 0) 0]\n      [else (+ (modulo number 10) (sum_digits (quotient number 10)))]))\n  (sum_digits (power_base_sum_helper base power)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_helper base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_helper base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum_helper base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptv189e6d.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptv189e6d.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptv189e6d.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptv189e6d.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509816,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf5glsos.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf5glsos.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf5glsos.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf5glsos.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_helper base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_helper base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum_helper base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124165,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8wmimlzm.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8wmimlzm.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8wmimlzm.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8wmimlzm.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          ((= power 1) (+ sum base))\n          (else (power_base_sum_iter base (- power 1) (+ sum base)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509816,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6achckv8.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6achckv8.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6achckv8.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 1]\n    [else\n     (let ([result (* base (power_base_sum base (- power 1)))])\n       (cond\n         [(= result 0) 0]\n         [else\n          (+ (remainder result 10) (power_base_sum base power))]))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124181,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          ((= power 1) (+ sum base))\n          (else (power_base_sum_iter base (- power 1) (+ sum base)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509816,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6achckv8.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6achckv8.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6achckv8.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509816,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf5glsos.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf5glsos.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf5glsos.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf5glsos.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum-iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum-iter base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp55a3f290.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp55a3f290.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp55a3f290.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp55a3f290.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum base)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe8osoygw.rkt:15:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe8osoygw.rkt:16:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe8osoygw.rkt:17:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power-base-sum-iter base power sum)\n    (if (= power 0)\n        sum\n        (power-base-sum-iter base (- power 1) (+ sum (modulo base 10)))))\n  (power-base-sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124183,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpid8vr1ui.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpid8vr1ui.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpid8vr1ui.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 1]\n    [else\n     (define (helper base power)\n       (cond\n         [(= power 0) 0]\n         [else\n          (+ (remainder base 10) (helper (/ base 10) (- power 1)))]))\n     (helper (expt base power) power)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124183,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxygcz1ka.rkt:20:4\n\nremainder: contract violation\n  expected: integer?\n  given: 633825300114114700748351602688/5\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxygcz1ka.rkt:21:4\n\nremainder: contract violation\n  expected: integer?\n  given: 536870912/5\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxygcz1ka.rkt:22:4\n\nremainder: contract violation\n  expected: integer?\n  given: 17592186044416/5\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxygcz1ka.rkt:23:4\n\nremainder: contract violation\n  expected: integer?\n  given: 27/10\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power acc)\n    (cond\n      [(zero? power) acc]\n      [else (power_base_sum_iter base (sub1 power) (+ acc (sum-digits (expt base power))))]))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124183,
      "stdout": "",
      "stderr": "/tmp/tmpgcanwltt.rkt:8:59: sum-digits: unbound identifier\n  in: sum-digits\n  location...:\n   /tmp/tmpgcanwltt.rkt:8:59\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power acc)\n    (if (= power 0)\n        acc\n        (power_base_sum_iter base (- power 1) (+ acc base))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpas03zhjf.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpas03zhjf.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpas03zhjf.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509816,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf5glsos.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf5glsos.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf5glsos.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf5glsos.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum (remainder base 10)))\n          )\n    )\n  )\n  (power_base_sum_iter base power 0)\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps44f0tl9.rkt:19:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps44f0tl9.rkt:20:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps44f0tl9.rkt:21:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond\n      [(zero? power) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509816,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy3bf7sk3.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy3bf7sk3.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy3bf7sk3.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy3bf7sk3.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 1]\n    [else (sum-digits (expt base power))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "/tmp/tmpw8agfitj.rkt:7:11: sum-digits: unbound identifier\n  in: sum-digits\n  location...:\n   /tmp/tmpw8agfitj.rkt:7:11\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 1]\n    [else\n     (let ([base-power (expt base power)])\n       (cond\n         [(= base-power 0) 0]\n         [else\n          (+ (remainder base-power 10)\n             (power_base_sum base (- power 1)))]))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124183,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsj1i3luu.rkt:20:4\nactual:     501\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsj1i3luu.rkt:21:4\nactual:     53\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsj1i3luu.rkt:22:4\nactual:     75\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsj1i3luu.rkt:23:4\nactual:     20\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 1]\n    [else\n     (let ([base-power (* base (power_base_sum base (- power 1)))])\n       (sum-digits base-power))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124183,
      "stdout": "",
      "stderr": "/tmp/tmphi5xsoh1.rkt:9:8: sum-digits: unbound identifier\n  in: sum-digits\n  location...:\n   /tmp/tmphi5xsoh1.rkt:9:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124165,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz6llajqs.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz6llajqs.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz6llajqs.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz6llajqs.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (if (= power 0)\n      1\n      (for/sum ([i (in-range power)])\n               (sum-digits (expt base i)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124182,
      "stdout": "",
      "stderr": "/tmp/tmpbkwl7w34.rkt:8:16: sum-digits: unbound identifier\n  in: sum-digits\n  location...:\n   /tmp/tmpbkwl7w34.rkt:8:16\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power result)\n    (cond ((= power 0) result)\n          (else (power_base_sum_iter base (- power 1) (+ result (expt base power))))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124183,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprsn_vknt.rkt:15:4\nactual:     2535301200456458802993406410750\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprsn_vknt.rkt:16:4\nactual:     1227133512\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprsn_vknt.rkt:17:4\nactual:     40210710958664\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprsn_vknt.rkt:18:4\nactual:     39\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (base-sum base)))]))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124183,
      "stdout": "",
      "stderr": "/tmp/tmp1nfdgr2x.rkt:8:58: base-sum: unbound identifier\n  in: base-sum\n  location...:\n   /tmp/tmp1nfdgr2x.rkt:8:58\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power acc)\n    (if (= power 0)\n        acc\n        (power_base_sum_iter base (- power 1) (+ acc base))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpas03zhjf.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpas03zhjf.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpas03zhjf.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509816,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf5glsos.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf5glsos.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf5glsos.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf5glsos.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum-iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum-iter base (- power 1) (+ sum (remainder (expt base power) 10))))))\n  (power_base_sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpforf09m9.rkt:15:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpforf09m9.rkt:16:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpforf09m9.rkt:17:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpforf09m9.rkt:18:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power acc)\n    (if (= power 0)\n        acc\n        (power_base_sum_iter base (- power 1) (+ acc base))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpas03zhjf.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpas03zhjf.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpas03zhjf.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power-base-sum-iter base power sum)\n    (if (= power 0)\n        sum\n        (power-base-sum-iter base (- power 1) (+ sum (remainder base 10)))))\n  (power-base-sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124183,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph7q8attf.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph7q8attf.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph7q8attf.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_helper base power acc)\n    (cond\n      [(= power 0) acc]\n      [(= power 1) (add-digits base acc)]\n      [else (power_base_sum_helper (mult-digits base base) (- power 1) (add-digits base acc))]))\n  (power_base_sum_helper base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124183,
      "stdout": "",
      "stderr": "/tmp/tmpo959crpn.rkt:8:20: add-digits: unbound identifier\n  in: add-digits\n  location...:\n   /tmp/tmpo959crpn.rkt:8:20\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum (remainder base 10)))\n          )\n    )\n  )\n  (power_base_sum_iter base power 0)\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps44f0tl9.rkt:19:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps44f0tl9.rkt:20:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps44f0tl9.rkt:21:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power result)\n    (cond\n      [(= power 0) result]\n      [else (power_base_sum_iter base (- power 1) (+ result (modulo (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124183,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzh49l8yw.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzh49l8yw.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzh49l8yw.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzh49l8yw.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509816,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf5glsos.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf5glsos.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf5glsos.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf5glsos.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10))))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509816,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy1l44nca.rkt:15:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy1l44nca.rkt:16:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy1l44nca.rkt:17:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy1l44nca.rkt:18:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 1]\n    [else\n     (let ([result (* base (power_base_sum base (- power 1)))])\n       (cond\n         [(= result 0) 0]\n         [else (+ (remainder result 10) (power_base_sum base power))]))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124198,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 0]\n    [else (+ (remainder base 10) (power_base_sum (/ base 10) (- power 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124183,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp26c2ygde.rkt:14:4\n\nremainder: contract violation\n  expected: integer?\n  given: 1/5\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp26c2ygde.rkt:15:4\n\nremainder: contract violation\n  expected: integer?\n  given: 4/5\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp26c2ygde.rkt:16:4\n\nremainder: contract violation\n  expected: integer?\n  given: 4/5\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp26c2ygde.rkt:17:4\n\nremainder: contract violation\n  expected: integer?\n  given: 3/10\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum-iter base power sum)\n    (cond ((= power 0) sum)\n          ((= power 1) (+ sum base))\n          (else (power_base_sum-iter base (- power 1) (+ sum (expt base power))))))\n  (power_base_sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4e7z2xnb.rkt:16:4\nactual:     2535301200456458802993406410750\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4e7z2xnb.rkt:17:4\nactual:     1227133512\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4e7z2xnb.rkt:18:4\nactual:     40210710958664\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4e7z2xnb.rkt:19:4\nactual:     39\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum-iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum-iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprbc06l73.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprbc06l73.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprbc06l73.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprbc06l73.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum-iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum-iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy2akgzb7.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy2akgzb7.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy2akgzb7.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy2akgzb7.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 1]\n    [else (sum-digits (expt base power))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "/tmp/tmpw8agfitj.rkt:7:11: sum-digits: unbound identifier\n  in: sum-digits\n  location...:\n   /tmp/tmpw8agfitj.rkt:7:11\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          ((= power 1) (+ sum base))\n          (else (power_base_sum_iter base (- power 1) (+ sum base)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509816,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6achckv8.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6achckv8.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6achckv8.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond\n      [(zero? power) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124183,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnsi1zpi9.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnsi1zpi9.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnsi1zpi9.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnsi1zpi9.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_helper base power sum)\n    (cond\n      [(zero? power) sum]\n      [else (power_base_sum_helper base (sub1 power) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum_helper base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124184,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptub1e1po.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptub1e1po.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptub1e1po.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptub1e1po.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 1]\n    [else\n     (let ([result (* base (power_base_sum base (- power 1)))])\n       (cond\n         [(= result 0) 0]\n         [else\n          (+ (remainder result 10)\n             (power_base_sum base power))]))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124181,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power acc)\n    (if (= power 0)\n        acc\n        (power_base_sum_iter base (- power 1) (+ acc base))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpas03zhjf.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpas03zhjf.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpas03zhjf.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_helper base power acc)\n    (cond\n      [(zero? power) acc]\n      [else (power_base_sum_helper base (sub1 power) (+ acc (remainder (expt base power) 10)))]))\n  (power_base_sum_helper base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124165,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcq0u3jx1.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcq0u3jx1.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcq0u3jx1.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcq0u3jx1.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum-iter base power sum)\n    (cond\n      [(zero? power) sum]\n      [else (power_base_sum-iter base (sub1 power) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv0ld78uc.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv0ld78uc.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv0ld78uc.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv0ld78uc.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 0]\n    [else (+ (modulo base 10) (power_base_sum (/ base 10) (- power 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbipk_eom.rkt:14:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 1/5\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbipk_eom.rkt:15:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 4/5\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbipk_eom.rkt:16:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 4/5\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbipk_eom.rkt:17:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 3/10\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509816,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf5glsos.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf5glsos.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf5glsos.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf5glsos.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_helper base power acc)\n    (cond\n      [(zero? power) acc]\n      [else (power_base_sum_helper base (- power 1) (+ acc (remainder (expt base power) 10)))]))\n  (power_base_sum_helper base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124184,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7d0vzv3f.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7d0vzv3f.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7d0vzv3f.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7d0vzv3f.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10))))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509816,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy1l44nca.rkt:15:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy1l44nca.rkt:16:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy1l44nca.rkt:17:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy1l44nca.rkt:18:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_helper base power sum)\n    (cond ((= power 0) sum)\n          ((= base 0) sum)\n          (else (power_base_sum_helper base (- power 1) (+ sum (expt base power))))))\n  (power_base_sum_helper base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124184,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8yldib5r.rkt:16:4\nactual:     2535301200456458802993406410750\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8yldib5r.rkt:17:4\nactual:     1227133512\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8yldib5r.rkt:18:4\nactual:     40210710958664\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8yldib5r.rkt:19:4\nactual:     39\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 1]\n    [else\n     (let ([result (* base (power_base_sum base (- power 1)))])\n       (cond\n         [(zero? result) 0]\n         [else (+ (modulo result 10) (power_base_sum (/ result 10) 0))]))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124184,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqvjkd5e6.rkt:18:4\nactual:     1\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqvjkd5e6.rkt:19:4\nactual:     3\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqvjkd5e6.rkt:20:4\nactual:     5\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqvjkd5e6.rkt:21:4\nactual:     10\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))]))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509816,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd809eg8n.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd809eg8n.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd809eg8n.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum (remainder base 10)))\n          )))\n  (power_base_sum_iter base power 0)\n  )\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124184,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcjarczev.rkt:17:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcjarczev.rkt:18:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcjarczev.rkt:19:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power result)\n    (cond\n      [(= power 0) result]\n      [else (power_base_sum_iter base (- power 1) (+ result (modulo base 10)))]))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124184,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr7bmot8x.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr7bmot8x.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr7bmot8x.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          ((= power 1) (+ sum base))\n          (else (power_base_sum_iter base (- power 1) (+ sum base)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509816,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6achckv8.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6achckv8.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6achckv8.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power acc)\n    (if (= power 0)\n        acc\n        (power_base_sum_iter base (- power 1) (+ acc (remainder (expt base power) 10)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpws56cf6q.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpws56cf6q.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpws56cf6q.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpws56cf6q.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power result)\n    (if (= power 0)\n        result\n        (power_base_sum_iter base (- power 1) (+ result (remainder (expt base power) 10)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe027eg15.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe027eg15.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe027eg15.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe027eg15.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_helper base power)\n    (if (= power 0)\n        0\n        (+ (remainder base 10)\n           (power_base_sum_helper (quotient base 10) (- power 1)))))\n  (power_base_sum_helper base power))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124184,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpayv23vle.rkt:17:4\nactual:     2\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpayv23vle.rkt:18:4\nactual:     8\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpayv23vle.rkt:19:4\nactual:     8\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpayv23vle.rkt:20:4\nactual:     3\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum (remainder base 10)))\n          )\n    )\n  )\n  (power_base_sum_iter base power 0)\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps44f0tl9.rkt:19:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps44f0tl9.rkt:20:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps44f0tl9.rkt:21:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 0]\n    [else (+ (remainder base 10) (power_base_sum (/ base 10) (- power 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124183,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp26c2ygde.rkt:14:4\n\nremainder: contract violation\n  expected: integer?\n  given: 1/5\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp26c2ygde.rkt:15:4\n\nremainder: contract violation\n  expected: integer?\n  given: 4/5\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp26c2ygde.rkt:16:4\n\nremainder: contract violation\n  expected: integer?\n  given: 4/5\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp26c2ygde.rkt:17:4\n\nremainder: contract violation\n  expected: integer?\n  given: 3/10\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power-base-sum-iter base power sum)\n    (cond\n      [(zero? power) sum]\n      [else (power-base-sum-iter base (sub1 power) (+ sum (expt base power)))]))\n  (power-base-sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124184,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_ylcfm2_.rkt:16:4\nactual:     2535301200456458802993406410750\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_ylcfm2_.rkt:17:4\nactual:     1227133512\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_ylcfm2_.rkt:18:4\nactual:     40210710958664\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_ylcfm2_.rkt:19:4\nactual:     39\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum-iter base power acc)\n    (cond ((= power 0) acc)\n          (else (power_base_sum-iter base (- power 1) (+ acc (remainder (expt base power) 10))))))\n  (power_base_sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt3m9o2aw.rkt:15:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt3m9o2aw.rkt:16:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt3m9o2aw.rkt:17:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt3m9o2aw.rkt:18:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power acc)\n    (cond\n      [(= power 0) acc]\n      [else (power_base_sum_iter base (- power 1) (+ acc (remainder (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbctgok5q.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbctgok5q.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbctgok5q.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbctgok5q.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_helper base power acc)\n    (if (= power 0)\n        acc\n        (power_base_sum_helper base (- power 1) (+ acc (remainder (expt base power) 10)))))\n  (power_base_sum_helper base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy372al9_.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy372al9_.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy372al9_.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy372al9_.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum-iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum-iter base (- power 1) (+ sum (remainder (expt base power) 10))))))\n  (power_base_sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpforf09m9.rkt:15:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpforf09m9.rkt:16:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpforf09m9.rkt:17:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpforf09m9.rkt:18:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 1]\n    [else (sum-digits (expt base power))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "/tmp/tmpw8agfitj.rkt:7:11: sum-digits: unbound identifier\n  in: sum-digits\n  location...:\n   /tmp/tmpw8agfitj.rkt:7:11\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10))))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509816,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy1l44nca.rkt:15:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy1l44nca.rkt:16:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy1l44nca.rkt:17:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy1l44nca.rkt:18:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power acc)\n    (if (= power 0)\n        acc\n        (power_base_sum_iter base (- power 1) (+ acc base))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpas03zhjf.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpas03zhjf.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpas03zhjf.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 1]\n    [else\n     (let ([result (* base (power_base_sum base (- power 1)))])\n       (cond\n         [(= result 0) 0]\n         [else\n          (+ (modulo result 10) (power_base_sum (/ result 10) 0))]))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124165,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp597ndua3.rkt:19:4\nactual:     1\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp597ndua3.rkt:20:4\nactual:     3\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp597ndua3.rkt:21:4\nactual:     5\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp597ndua3.rkt:22:4\nactual:     10\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))\n          (quotient base 10))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124184,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ws3co0_.rkt:16:4\nactual:     0\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ws3co0_.rkt:17:4\nactual:     0\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ws3co0_.rkt:18:4\nactual:     0\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ws3co0_.rkt:19:4\nactual:     0\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum-iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum-iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprbc06l73.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprbc06l73.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprbc06l73.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprbc06l73.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum (remainder base 10)))\n          )\n    )\n  )\n  (power_base_sum_iter base power 0)\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps44f0tl9.rkt:19:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps44f0tl9.rkt:20:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps44f0tl9.rkt:21:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124165,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz6llajqs.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz6llajqs.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz6llajqs.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz6llajqs.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509816,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf5glsos.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf5glsos.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf5glsos.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf5glsos.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 1]\n    [else (sum-digits (expt base power))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "/tmp/tmpw8agfitj.rkt:7:11: sum-digits: unbound identifier\n  in: sum-digits\n  location...:\n   /tmp/tmpw8agfitj.rkt:7:11\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_helper base power sum)\n    (cond\n      [(zero? power) sum]\n      [else (power_base_sum_helper base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum_helper base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124165,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpttu71d22.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpttu71d22.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpttu71d22.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpttu71d22.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power result)\n    (cond\n      [(= power 0) result]\n      [else (power_base_sum_iter base (- power 1) (+ result (modulo base 10)))]))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124184,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr7bmot8x.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr7bmot8x.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr7bmot8x.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_helper base power)\n    (if (= power 1)\n        base\n        (power_base_sum_helper (sum-digits (expt base power)) (- power 1))))\n  (power_base_sum_helper base power))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124184,
      "stdout": "",
      "stderr": "/tmp/tmpfofylwv8.rkt:8:32: sum-digits: unbound identifier\n  in: sum-digits\n  location...:\n   /tmp/tmpfofylwv8.rkt:8:32\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power result)\n    (if (= power 1)\n        (result)\n        (power_base_sum_iter base (- power 1) (+ result (sum-digits (expt base power))))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124184,
      "stdout": "",
      "stderr": "/tmp/tmpvhnina7i.rkt:8:57: sum-digits: unbound identifier\n  in: sum-digits\n  location...:\n   /tmp/tmpvhnina7i.rkt:8:57\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124165,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz6llajqs.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz6llajqs.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz6llajqs.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz6llajqs.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 1]\n    [else\n     (let ([result (* base (power_base_sum base (- power 1)))])\n       (cond\n         [(= result 0) 0]\n         [else\n          (+ (modulo result 10) (power_base_sum (/ result 10) 0))]))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124165,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp597ndua3.rkt:19:4\nactual:     1\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp597ndua3.rkt:20:4\nactual:     3\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp597ndua3.rkt:21:4\nactual:     5\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp597ndua3.rkt:22:4\nactual:     10\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power acc)\n    (cond ((= power 0) acc)\n          (else (power_base_sum_iter base (- power 1) (+ acc (sum_digits (expt base power)))))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124184,
      "stdout": "",
      "stderr": "/tmp/tmpyqhn_w_6.rkt:7:62: sum_digits: unbound identifier\n  in: sum_digits\n  location...:\n   /tmp/tmpyqhn_w_6.rkt:7:62\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum-iter base power sum)\n    (cond\n      [(zero? power) sum]\n      [else (power_base_sum-iter base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7xkeageu.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7xkeageu.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7xkeageu.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7xkeageu.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_helper base power acc)\n    (cond\n      [(= power 0) acc]\n      [else (power_base_sum_helper base (- power 1) (+ acc (power_base_sum_helper base (- power 1) 0)))]))\n  (power_base_sum_helper base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124198,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_helper base power acc)\n    (cond ((= power 0) acc)\n          (else (power_base_sum_helper base (- power 1) (+ acc (modulo base 10)))\n          )))\n  (power_base_sum_helper base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124184,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4_8czv2y.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4_8czv2y.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4_8czv2y.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 1]\n    [else\n     (sum-digits\n      (expt base power))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "/tmp/tmp3zz_93ru.rkt:8:6: sum-digits: unbound identifier\n  in: sum-digits\n  location...:\n   /tmp/tmp3zz_93ru.rkt:8:6\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          ((= power 1) (+ sum base))\n          (else (power_base_sum_iter base (- power 1) (+ sum base)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509816,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6achckv8.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6achckv8.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6achckv8.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(zero? power) 1]\n    [else\n     (let ([base-sum (sum-digits base)])\n       (+ base-sum (power_base_sum base-sum (- power 1))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124184,
      "stdout": "",
      "stderr": "/tmp/tmp4l023d6w.rkt:8:22: sum-digits: unbound identifier\n  in: sum-digits\n  location...:\n   /tmp/tmp4l023d6w.rkt:8:22\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= base 0) 0]\n    [(= power 0) 1]\n    [else (+ (modulo base 10) (power_base_sum (quotient base 10) (- power 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124184,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdbgy09gz.rkt:15:4\nactual:     2\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdbgy09gz.rkt:16:4\nactual:     8\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdbgy09gz.rkt:17:4\nactual:     8\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdbgy09gz.rkt:18:4\nactual:     3\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 1]\n    [else (sum-digits (expt base power))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "/tmp/tmpw8agfitj.rkt:7:11: sum-digits: unbound identifier\n  in: sum-digits\n  location...:\n   /tmp/tmpw8agfitj.rkt:7:11\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum-iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else\n       (power_base_sum-iter base (- power 1) (+ sum (expt base power)))]))\n  (power_base_sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124184,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr_5cup4e.rkt:17:4\nactual:     2535301200456458802993406410750\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr_5cup4e.rkt:18:4\nactual:     1227133512\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr_5cup4e.rkt:19:4\nactual:     40210710958664\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr_5cup4e.rkt:20:4\nactual:     39\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 0]\n    [else (+ (power_base_sum base (- power 1)) (modulo base 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124184,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg5jfbzg_.rkt:14:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg5jfbzg_.rkt:15:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg5jfbzg_.rkt:16:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_helper base power)\n    (if (= power 0)\n        0\n        (+ (remainder base 10)\n           (power_base_sum_helper (quotient base 10) (- power 1)))))\n  (power_base_sum_helper base power))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124184,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpayv23vle.rkt:17:4\nactual:     2\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpayv23vle.rkt:18:4\nactual:     8\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpayv23vle.rkt:19:4\nactual:     8\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpayv23vle.rkt:20:4\nactual:     3\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond\n      [(zero? power) sum]\n      [else (power_base_sum_iter base (sub1 power) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124184,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq_fkyp34.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq_fkyp34.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq_fkyp34.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq_fkyp34.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509816,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf5glsos.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf5glsos.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf5glsos.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf5glsos.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 1) (+ sum base)]\n      [else (power_base_sum_iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124184,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphf3jmsbn.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphf3jmsbn.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphf3jmsbn.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphf3jmsbn.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum-iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum-iter base (- power 1) (+ sum (modulo base 10)))]))\n  (power_base_sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124184,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5dc9hyvy.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5dc9hyvy.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5dc9hyvy.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509816,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf5glsos.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf5glsos.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf5glsos.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf5glsos.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(zero? power) 1]\n    [else\n     (apply + (map (lambda (x) (string-&gt;number (string-ref x 0)))\n                   (string-split (number-&gt;string (expt base power)) #\\space)))]))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124184,
      "stdout": "",
      "stderr": "/tmp/tmpnv1eaoe1.rkt:9:33: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 10\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo (expt base power) 10)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124184,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfy2n50u8.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfy2n50u8.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfy2n50u8.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfy2n50u8.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))\n          )))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpimxyu3bd.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpimxyu3bd.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpimxyu3bd.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_helper base power acc)\n    (cond\n      [(zero? power) acc]\n      [else (power_base_sum_helper base (sub1 power) (+ acc (remainder (expt base power) 10)))]))\n  (power_base_sum_helper base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124165,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcq0u3jx1.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcq0u3jx1.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcq0u3jx1.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcq0u3jx1.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum base))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpskdncjkm.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpskdncjkm.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpskdncjkm.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_helper base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_helper base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_helper base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124184,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq0exporn.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq0exporn.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq0exporn.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_helper base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_helper base (- power 1) (+ sum (modulo base 10)))]))\n  (power_base_sum_helper base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124183,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdszih0z_.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdszih0z_.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdszih0z_.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 0]\n    [else\n     (+ (remainder base 10)\n        (power_base_sum (/ base 10) (- power 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwj9yyip.rkt:16:4\n\nremainder: contract violation\n  expected: integer?\n  given: 1/5\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwj9yyip.rkt:17:4\n\nremainder: contract violation\n  expected: integer?\n  given: 4/5\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwj9yyip.rkt:18:4\n\nremainder: contract violation\n  expected: integer?\n  given: 4/5\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwj9yyip.rkt:19:4\n\nremainder: contract violation\n  expected: integer?\n  given: 3/10\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (if (= power 0)\n      0\n      (remainder (+ (* base (power_base_sum base (- power 1)))\n                    (power_base_sum base (- power 1)))\n                 10)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124199,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 1]\n    [else\n     (let ([result (* base (power_base_sum base (- power 1)))])\n       (cond\n         [(= result 0) 0]\n         [else\n          (+ (modulo result 10) (power_base_sum (/ result 10) 0))]))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124165,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp597ndua3.rkt:19:4\nactual:     1\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp597ndua3.rkt:20:4\nactual:     3\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp597ndua3.rkt:21:4\nactual:     5\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp597ndua3.rkt:22:4\nactual:     10\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 1]\n    [else\n     (let ([result (* base (power_base_sum base (- power 1)))])\n       (cond\n         [(= result 0) 0]\n         [else (+ (modulo result 10) (power_base_sum (/ result 10) 0))]))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124185,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp318znxys.rkt:18:4\nactual:     1\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp318znxys.rkt:19:4\nactual:     3\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp318znxys.rkt:20:4\nactual:     5\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp318znxys.rkt:21:4\nactual:     10\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power acc)\n    (cond\n      [(zero? power) acc]\n      [else (power_base_sum_iter base (- power 1) (+ acc (sum-digits (expt base power))))]))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124184,
      "stdout": "",
      "stderr": "/tmp/tmph4d3f0ng.rkt:8:58: sum-digits: unbound identifier\n  in: sum-digits\n  location...:\n   /tmp/tmph4d3f0ng.rkt:8:58\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo (expt base power) 10)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124184,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfy2n50u8.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfy2n50u8.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfy2n50u8.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfy2n50u8.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          ((= power 1) (+ sum base))\n          (else (power_base_sum_iter base (- power 1) (+ sum base)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509816,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6achckv8.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6achckv8.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6achckv8.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 1]\n    [else\n     (let ([result (* base (power_base_sum base (- power 1)))])\n       (cond\n         [(= result 0) 0]\n         [else\n          (+ (modulo result 10) (power_base_sum (/ result 10) 0))]))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124165,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp597ndua3.rkt:19:4\nactual:     1\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp597ndua3.rkt:20:4\nactual:     3\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp597ndua3.rkt:21:4\nactual:     5\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp597ndua3.rkt:22:4\nactual:     10\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509816,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf5glsos.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf5glsos.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf5glsos.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf5glsos.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509816,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf5glsos.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf5glsos.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf5glsos.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf5glsos.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 1]\n    [else\n     (let ([result (* base (power_base_sum base (- power 1)))])\n       (cond\n         [(= result 0) 0]\n         [else\n          (+ (modulo result 10) (power_base_sum (/ result 10) 0))]))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124165,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp597ndua3.rkt:19:4\nactual:     1\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp597ndua3.rkt:20:4\nactual:     3\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp597ndua3.rkt:21:4\nactual:     5\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp597ndua3.rkt:22:4\nactual:     10\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum-iter base power sum)\n    (cond\n      [(zero? power) sum]\n      [else (power_base_sum-iter base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7xkeageu.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7xkeageu.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7xkeageu.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7xkeageu.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 0]\n    [else\n     (+ (remainder (expt base power) 10)\n        (power_base_sum base (- power 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124185,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6zxt83f4.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6zxt83f4.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6zxt83f4.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6zxt83f4.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))]))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509816,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd809eg8n.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd809eg8n.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd809eg8n.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power acc)\n    (if (= power 0)\n        acc\n        (power_base_sum_iter base (- power 1) (+ acc base))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpas03zhjf.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpas03zhjf.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpas03zhjf.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum-iter base power acc)\n    (cond ((= power 0) acc)\n          (else (power_base_sum-iter base (- power 1) (+ acc (power_base_sum-iter base (- power 1) 0))))))\n  (power_base_sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124199,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 0]\n    [else (+ (modulo base 10) (power_base_sum (/ base 10) (- power 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbipk_eom.rkt:14:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 1/5\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbipk_eom.rkt:15:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 4/5\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbipk_eom.rkt:16:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 4/5\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbipk_eom.rkt:17:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 3/10\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(zero? power) 1]\n    [else\n     (define (power_base_sum_iter base power sum)\n       (cond\n         [(zero? power) sum]\n         [else (power_base_sum_iter base (- power 1) (+ sum (expt base power)))]))\n     (power_base_sum_iter base power 0)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124185,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbmkniofh.rkt:19:4\nactual:     2535301200456458802993406410750\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbmkniofh.rkt:20:4\nactual:     1227133512\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbmkniofh.rkt:21:4\nactual:     40210710958664\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbmkniofh.rkt:22:4\nactual:     39\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum-iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum-iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy2akgzb7.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy2akgzb7.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy2akgzb7.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy2akgzb7.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum-iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum-iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy2akgzb7.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy2akgzb7.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy2akgzb7.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy2akgzb7.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_helper base power result)\n    (cond ((= power 0) result)\n          (else (power_base_sum_helper base (- power 1) (+ result (expt base power))))))\n  (power_base_sum_helper base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124185,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5mdgid7e.rkt:15:4\nactual:     2535301200456458802993406410750\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5mdgid7e.rkt:16:4\nactual:     1227133512\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5mdgid7e.rkt:17:4\nactual:     40210710958664\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5mdgid7e.rkt:18:4\nactual:     39\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum base)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe8osoygw.rkt:15:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe8osoygw.rkt:16:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe8osoygw.rkt:17:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power-base-sum-iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power-base-sum-iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power-base-sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124185,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp44tjy8la.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp44tjy8la.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp44tjy8la.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp44tjy8la.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 0]\n    [else\n     (let ([pow (expt base power)])\n       (cond\n         [(= pow 0) 0]\n         [else\n          (+ (modulo pow 10) (power_base_sum base (- power 1)))]))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124185,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvrriq9a8.rkt:19:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvrriq9a8.rkt:20:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvrriq9a8.rkt:21:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvrriq9a8.rkt:22:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509816,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf5glsos.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf5glsos.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf5glsos.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkf5glsos.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum-iter base power acc)\n    (if (= power 0)\n        acc\n        (power_base_sum-iter base (- power 1) (+ acc (remainder (expt base power) 10)))))\n  (power_base_sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124185,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp92j6p61p.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp92j6p61p.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp92j6p61p.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp92j6p61p.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 0]\n    [else\n     (+ (remainder base 10)\n        (power_base_sum (/ base 10) (- power 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwj9yyip.rkt:16:4\n\nremainder: contract violation\n  expected: integer?\n  given: 1/5\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwj9yyip.rkt:17:4\n\nremainder: contract violation\n  expected: integer?\n  given: 4/5\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwj9yyip.rkt:18:4\n\nremainder: contract violation\n  expected: integer?\n  given: 4/5\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwj9yyip.rkt:19:4\n\nremainder: contract violation\n  expected: integer?\n  given: 3/10\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124165,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz6llajqs.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz6llajqs.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz6llajqs.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz6llajqs.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power acc)\n    (cond\n      [(zero? power) acc]\n      [else (power_base_sum_iter base (sub1 power) (+ acc (sum-digits (expt base power))))]))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124183,
      "stdout": "",
      "stderr": "/tmp/tmpgcanwltt.rkt:8:59: sum-digits: unbound identifier\n  in: sum-digits\n  location...:\n   /tmp/tmpgcanwltt.rkt:8:59\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))]))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509816,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd809eg8n.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd809eg8n.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd809eg8n.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power acc)\n    (cond ((= power 0) acc)\n          (else (power_base_sum_iter base (- power 1) (+ acc base)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124185,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpazvt59u1.rkt:15:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpazvt59u1.rkt:16:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpazvt59u1.rkt:17:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))\n                (quotient base 10))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124185,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknvmg1bk.rkt:16:4\nactual:     0\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknvmg1bk.rkt:17:4\nactual:     0\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknvmg1bk.rkt:18:4\nactual:     0\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknvmg1bk.rkt:19:4\nactual:     0\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    }
  ]
}