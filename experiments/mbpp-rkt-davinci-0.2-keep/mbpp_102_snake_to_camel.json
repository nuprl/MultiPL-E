{
  "name": "mbpp_102_snake_to_camel",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_102_snake_to_camel.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (string-join\n   (map (lambda (x)\n          (if (equal? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (define (helper word result)\n    (cond [(empty? word) result]\n          [(char=? (first word) #\\_)\n           (helper (rest word) (string-append result (string-upcase (first (rest word)))))\n           ]\n          [else (helper (rest word) (string-append result (string (first word))))]))\n  (helper word \"\"))\n",
    "  (string-join\n   (map (lambda (x) (string-capitalize x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (char=? #\\_ (string-ref x 0))\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (w) (string-upcase w))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x)\n          (if (equal? (string-length x) 1)\n              (string-upcase x)\n              (string-append (string-upcase (substring x 0 1))\n                             (substring x 1))))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (define (helper word result)\n    (cond\n      [(empty? word) result]\n      [(char=? (first word) #\\_) (helper (rest word) (string-append result (string-upcase (first (rest word)))))]\n      [else (helper (rest word) (string-append result (string (first word))))]))\n  (helper word \"\"))\n",
    "  (string-join\n   (map (lambda (x) (string-upcase x))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x) (string-upcase x))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (w)\n          (string-upcase (substring w 1)))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (word)\n      (string-upcase (substring word 1)))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (eq? (string-length x) 1)\n          (string-upcase x)\n          (string-append (string-upcase (substring x 0 1))\n                        (substring x 1))))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (define (snake_to_camel_iter word acc)\n    (if (string-empty? word)\n        acc\n        (if (string=? (string-take word 1) \"_\")\n            (snake_to_camel_iter (string-drop word 1)\n                                 (string-append acc (string-upcase (string-take word 2))))\n            (snake_to_camel_iter (string-drop word 1)\n                                 (string-append acc (string-take word 1))))))\n  (snake_to_camel_iter word \"\"))\n",
    "  (string-join (map (lambda (x) (if (char-numeric? (string-ref x 0)) x (string-capitalize x))) (string-split word #\\_)) \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x) (string-upcase x))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                       (string-upcase (substring x 1))\n                       x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x) (string-upcase x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join (map (lambda (w) (string-upcase w)) (string-split word #\"_\")) \"\"))\n",
    "  (string-join\n   (map (lambda (x) (string-upcase x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (define (helper word result)\n    (if (empty? word)\n        result\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (string-append result (string-upcase (string (second word)))))\n            (helper (rest word) (string-append result (string (first word)))))))\n  (helper word \"\"))\n",
    "  (string-join\n   (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                        (string-upcase (substring x 1))\n                        x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (w) (string-capitalize w))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (define (helper word acc)\n    (if (empty? word)\n        acc\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (string-append acc (string-upcase (string (second word)))))\n            (helper (rest word) (string-append acc (string (first word)))))))\n  (helper word \"\"))\n",
    "  (string-join\n   (map\n    (lambda (word)\n      (string-capitalize word))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (w) (string-upcase (substring w 1)))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (define (snake_to_camel_iter word acc)\n    (cond ((null? word) (string-join (reverse acc) \"\"))\n          ((string=? (first word) \"_\")\n           (snake_to_camel_iter (rest word) (cons (string-upcase (second word)) (rest acc))))\n          (else (snake_to_camel_iter (rest word) (cons (first word) acc)))))\n  (snake_to_camel_iter word '()))\n",
    "  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (char-numeric? (string-ref x 0))\n          x\n          (string-upcase x)))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x) (string-capitalize x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-length x) 1)\n          (string-upcase x)\n          (string-append (string-upcase (substring x 0 1))\n                        (substring x 1))))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                        (string-upcase (substring x 1))\n                        x))\n        (string-split word #\\_)) \"\"))\n",
    "  (string-join\n   (map\n    (lambda (word)\n      (string-upcase (substring word 1)))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (string-join (map (lambda (x) (if (char=? (string-ref x 0) #\\_) (string-upcase (substring x 1)) x)) (string-split word #\\_)) \"\"))\n",
    "  (string-join\n   (map (lambda (x) (string-upcase x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (word)\n      (string-upcase (substring word 0 1))\n      (substring word 1))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                       (string-upcase (substring x 1))\n                       x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                                    (string-upcase (substring x 1))\n                                    x))\n                     (string-split word #\\_))\n               \"\"))\n",
    "  (define (helper word)\n    (cond [(empty? word) empty]\n          [(char=? (first word) #\\_) (cons (char-upcase (second word)) (helper (rest (rest word))))]\n          [else (cons (first word) (helper (rest word)))]))\n  (string->symbol (list->string (helper (string->list word)))))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (let loop ([word word]\n             [result '()])\n    (cond [(empty? word) (string-join (reverse result))]\n          [(char=? (first word) #\\_)\n           (loop (rest word) (cons (string-upcase (second word)) result))]\n          [else (loop (rest word) (cons (first word) result))])))\n",
    "  (string-join\n   (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                       (string-upcase (substring x 1))\n                       x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                                    (string-upcase (substring x 1))\n                                    x))\n                     (string-split word #\\_)) \"\"))\n",
    "  (string-join\n   (map (lambda (w) (string-upcase w))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-length x) 1)\n          (string-upcase x)\n          (string-append (string-upcase (substring x 0 1)) (substring x 1))))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join (map (lambda (x) (string-upcase x)) (string-split word #\\_)) \"\"))\n",
    "  (define (snake_to_camel-iter word result)\n    (cond\n      [(empty? word) result]\n      [(char=? (first word) #\\_)\n       (snake_to_camel-iter (rest word) (string-append result (string-upcase (string (second word)))))\n      ]\n      [else\n       (snake_to_camel-iter (rest word) (string-append result (string (first word))))\n      ]\n    )\n  )\n  (snake_to_camel-iter word \"\")\n)\n",
    "  (string-join (map string-upcase (string-split word #\"_\")) \"\"))\n",
    "  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (let loop ([word word]\n             [result '()])\n    (cond [(empty? word) (string-join (reverse result))]\n          [(char=? (first word) #\\_) (loop (rest word) (cons (char-upcase (second word)) result))]\n          [else (loop (rest word) (cons (first word) result))])))\n",
    "  (string-append (string-upcase (substring word 0 1))\n                 (substring word 1)))\n",
    "  (define (snake_to_camel_helper word result)\n    (cond [(empty? word) result]\n          [(char=? (first word) #\\_)\n           (snake_to_camel_helper (rest word)\n                                  (string-append result (string-upcase (string (second word))) (rest (rest word))))]\n          [else (snake_to_camel_helper (rest word) (string-append result (string (first word))))]))\n  (snake_to_camel_helper word \"\"))\n",
    "  (string-join\n   (map\n    (lambda (w)\n      (string-upcase (substring w 1)))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (s) (string-upcase s))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x) (string-upcase x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (word)\n      (string-capitalize word))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                                    (string-upcase (substring x 1))\n                                    x))\n                      (string-split word #\\_))\n               \"\"))\n",
    "  (string-join\n   (map (lambda (x) (string-upcase x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x)\n          (if (eq? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-length x) 1)\n          (string-upcase x)\n          (string-append (string-upcase (substring x 0 1))\n                         (substring x 1))))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (string-join (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                                    (string-upcase (substring x 1))\n                                    x))\n                     (string-split word #\\_))\n               \"\"))\n",
    "  (string-join\n   (map\n    (lambda (w)\n      (string-upcase (substring w 1)))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (define (helper word acc)\n    (cond [(empty? word) (list->string (reverse acc))]\n          [(char=? (first word) #\\_) (helper (rest word) (cons (char-upcase (first (rest word))) (rest (rest word))))]\n          [else (helper (rest word) (cons (first word) acc))]))\n  (helper word '()))\n",
    "  (string-join\n   (map\n    (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                (string-upcase (substring x 1))\n                x))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x) (if (equal? (string-ref x 0) #\\_)\n                       (string-upcase (string-drop x 1))\n                       x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x)\n          (if (string=? (substring x 0 1) \"_\")\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (define (helper word result)\n    (cond\n      [(empty? word) result]\n      [(char=? (first word) #\\_) (helper (rest word) (string-append result (string-upcase (string (second word)))))]\n      [else (helper (rest word) (string-append result (string (first word))))]))\n  (helper word \"\"))\n",
    "  (define (helper word)\n    (if (string-contains word #\\_)\n        (string-append (string-upcase (string-take word 1))\n                       (string-drop word 1))\n        word))\n  (string-join (map helper (string-split word #\\_)) \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (char-upper-case? (string-ref x 0))\n          x\n          (string-append (string-upcase (string-ref x 0)) (substring x 1))))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (define (snake_to_camel_iter word acc)\n    (if (empty? word)\n        acc\n        (if (char=? (first word) #\\_)\n            (snake_to_camel_iter (rest word) (string-append acc (string-upcase (string (second word)))))\n            (snake_to_camel_iter (rest word) (string-append acc (string (first word)))))))\n  (snake_to_camel_iter word \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-length x) 1)\n          (string-upcase x)\n          (string-append (string-upcase (substring x 0 1)) (substring x 1))))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (string=? (substring x 0 1) \"_\")\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                                    (string-upcase (substring x 1))\n                                    x))\n                     (string-split word #\\_))\n               \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-length x) 1)\n          (string-upcase x)\n          (string-append (string-upcase (substring x 0 1))\n                         (substring x 1))))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join (map (lambda (x) (if (equal? (string-ref x 0) #\\_)\n                               (string-upcase (substring x 1))\n                               x))\n                     (string-split word #\\_))\n               \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-length x) 1)\n          (string-upcase x)\n          (string-append (string-upcase (substring x 0 1))\n                         (substring x 1))))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (w)\n      (string-upcase (substring w 1)))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (s) (string-upcase (substring s 1)))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (w) (string-upcase (substring w 1)))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (string-join (map (lambda (word)\n                      (if (char-upper-case? (string-ref word 0))\n                          word\n                          (string-append (string-upcase (string-ref word 0))\n                                         (substring word 1))))\n                    (regexp-split #rx\"_\" word))\n               \"\"))\n",
    "  (define (snake_to_camel_iter word acc)\n    (cond [(empty? word) (list->string (reverse acc))]\n          [(char=? (first word) #\\_)\n           (snake_to_camel_iter (rest word) (cons (char-upcase (second word)) (rest (rest word))))]\n          [else (snake_to_camel_iter (rest word) (cons (first word) acc))]))\n  (snake_to_camel_iter word '()))\n",
    "  (define (helper word)\n    (if (string-empty? word)\n        \"\"\n        (if (string=? (string-take word 1) \"_\")\n            (string-append (string-upcase (string-take word 2)) (helper (string-drop word 2)))\n            (string-append (string-take word 1) (helper (string-drop word 1))))))\n  (helper (string-downcase word)))\n",
    "  (string-join (map (lambda (w) (string-upcase w)) (string-split word #\"_\")) \"\"))\n",
    "  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join (map (lambda (w) (string-upcase w)) (string-split word #\\_)) \"\"))\n",
    "  (string-join\n   (map (lambda (x)\n          (if (equal? (string-length x) 1)\n              (string-upcase x)\n              (string-append (string-upcase (substring x 0 1))\n                             (substring x 1))))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (define (helper word acc)\n    (if (empty? word)\n        acc\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (string-append acc (string-upcase (string (second word)))))\n            (helper (rest word) (string-append acc (string (first word)))))))\n  (helper word \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (string=? (substring x 0 1) \"_\")\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map string-upcase\n        (filter (lambda (x) (not (equal? x \"\")))\n                (regexp-split #rx\"_\" word)))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (word)\n          (string-upcase (substring word 0 1))\n          (substring word 1))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join (map (lambda (x) (string-upcase x)) (string-split word #\\_)) \"\"))\n",
    "  (string-join\n   (map\n    (lambda (w)\n      (string-upcase (substring w 1)))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x) (string-upcase (substring x 1)))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (define (helper word acc)\n    (cond\n      [(empty? word) (reverse acc)]\n      [(char=? (first word) #\\_)\n       (helper (rest word) (cons (char-upcase (first (rest word))) (rest acc)))]\n      [else (helper (rest word) (cons (first word) acc))]))\n  (helper word '()))\n",
    "  (define (helper word)\n    (if (empty? word)\n        empty\n        (if (char=? (first word) #\\_)\n            (cons (char-upcase (second word))\n                  (helper (rest (rest word))))\n            (cons (first word)\n                  (helper (rest word))))))\n  (helper word))\n",
    "  (string-join\n   (map\n    (lambda (w)\n      (string-upcase (substring w 1)))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (define (helper word result)\n    (cond [(empty? word) result]\n          [(char=? (first word) #\\_)\n           (helper (rest word)\n                   (string-append result (string-upcase (string (second word)))))\n           ]\n          [else (helper (rest word) (string-append result (string (first word))))]))\n  (helper word \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (w)\n          (string-upcase (substring w 1)))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (string-join (map string-upcase (string-split word #\"_\")) \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (eq? (string-length x) 1)\n          x\n          (string-append (string-upcase (substring x 0 1)) (substring x 1))))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (w) (string-upcase w))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join (map (\u03bb (x) (if (char=? (string-ref x 0) #\\_)\n                                (string-upcase (substring x 1))\n                                x))\n                     (string-split word #\\_))\n               \"\"))\n",
    "  (string-join (map (lambda (x) (if (string=? x \"_\") \"\" (string-upcase x)))\n                    (string-split word #\\_))\n               \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (string=? (substring x 0 1) \"_\")\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (\u03bb (x) (string-upcase x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                                    (string-upcase (substring x 1))\n                                    x))\n                     (string-split word #\\_))\n               \"\"))\n",
    "  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join (map (lambda (x) (if (string=? x \"_\") \"\" (string-upcase x)))\n                    (string-split word #\\_))\n               \"\"))\n",
    "  (define (helper word result)\n    (if (empty? word)\n        result\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (string-append result (string-upcase (string (second word)))))\n            (helper (rest word) (string-append result (string (first word)))))))\n  (helper word \"\"))\n",
    "  (string-join\n   (map\n    (lambda (word)\n      (string-upcase (substring word 1)))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x) (string-capitalize x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (define (helper word result)\n    (if (empty? word)\n        result\n        (if (equal? (first word) #\\_)\n            (helper (rest word) (string-append result (string-upcase (second word))))\n            (helper (rest word) (string-append result (string (first word)))))))\n  (helper word \"\"))\n",
    "  (string-join (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                                    (string-upcase (substring x 1))\n                                    x))\n                     (string-split word #\\_))\n               \"\"))\n",
    "  (string-join\n   (map\n    (lambda (word)\n      (string-upcase (substring word 0 1))\n      (substring word 1))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x)\n          (if (equal? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x)\n          (if (string=? (substring x 0 1) \"_\")\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (word)\n      (string-upcase (substring word 1)))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x)\n          (if (string=? (substring x 0 1) \"_\")\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (w)\n          (if (char-lower-case? (string-ref w 0))\n              (string-upcase w)\n              w))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (define (helper word acc)\n    (cond\n      [(empty? word) (reverse acc)]\n      [(char=? (first word) #\\_) (helper (rest word) (cons (char-upcase (first (rest word))) (rest (rest word))))]\n      [else (helper (rest word) (cons (first word) acc))]))\n  (helper word '()))\n",
    "  (string-join\n   (map (lambda (x)\n          (if (string=? (substring x 0 1) \"_\")\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (w)\n          (string-upcase (string-take w 1))\n          (string-drop w 1))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x) (if (string=? (substring x 0 1) \"_\")\n                        (string-upcase (substring x 1))\n                        x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x)\n          (if (char-numeric? (string-ref x 0))\n              x\n              (string-upcase x)))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-length x) 1)\n          (string-upcase x)\n          (string-append (string-upcase (substring x 0 1))\n                        (substring x 1))))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (w)\n          (string-upcase (substring w 1)))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x) (string-upcase x))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                       (string-upcase (substring x 1))\n                       x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (define (snake_to_camel_iter word result)\n    (cond ((string=? word \"\") result)\n          ((string=? (substring word 0 1) \"_\")\n           (snake_to_camel_iter (substring word 1)\n                                (string-append result (string-upcase (substring word 1 1)))))\n          (else (snake_to_camel_iter (substring word 1)\n                                     (string-append result (substring word 0 1))))))\n  (snake_to_camel_iter word \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (define (helper word acc)\n    (if (empty? word)\n        acc\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (string-append acc (string-upcase (string (second word)))))\n            (helper (rest word) (string-append acc (string (first word)))))))\n  (helper word \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x)\n          (if (equal? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (define (helper word result)\n    (cond\n      [(empty? word) result]\n      [(char=? (first word) #\\_) (helper (rest word) (string-append result (string-upcase (string (second word))))) ]\n      [else (helper (rest word) (string-append result (string (first word))))]))\n  (helper word \"\"))\n",
    "  (define (helper word)\n    (if (string-contains word #\\_)\n        (string-append\n         (string-upcase (substring word 0 (string-index word #\\_)))\n         (substring word (+ 1 (string-index word #\\_))))\n        word))\n  (helper word))\n",
    "  (define (helper word)\n    (if (null? word)\n        '()\n        (if (equal? (first word) #\\_)\n            (cons (char-upcase (second word)) (helper (rest (rest word))))\n            (cons (first word) (helper (rest word))))))\n  (string-append (list->string (helper (string->list word))) \" \"))\n",
    "  (string-join\n   (map (lambda (w) (string-upcase w))\n        (regexp-split #rx\"_\" word)) \"\"))\n",
    "  (define (helper word result)\n    (if (empty? word)\n        result\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (string-append result (string-upcase (first (rest word)))))\n            (helper (rest word) (string-append result (string (first word)))))))\n  (helper word \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                        (string-upcase (substring x 1))\n                        x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x)\n          (if (char-numeric? (string-ref x 0))\n              x\n              (string-capitalize x)))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (define (helper word)\n    (if (empty? word)\n        empty\n        (if (char=? (first word) #\\_)\n            (cons (char-upcase (second word)) (helper (rest (rest word))))\n            (cons (first word) (helper (rest word))))))\n  (string-&gt;symbol (string-&gt;list (symbol-&gt;string (helper (string-&gt;symbol word))))))\n",
    "  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (string=? (substring x 0 1) \"_\")\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (word)\n          (string-upcase (substring word 0 1))\n          (substring word 1))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (string=? x \"_\")\n          \"\"\n          (string-upcase x)))\n    (string-split word \"_\"))\n   \"\"))\n",
    "  (string-join\n   (map string-upcase\n        (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (cond\n        [(string=? x \"_\") \"\"]\n        [(string=? (substring x 0 1) \"_\") (string-upcase (substring x 1))]\n        [else x]))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x) (string-upcase x))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (define (helper word acc)\n    (cond\n      [(empty? word) (list->string (reverse acc))]\n      [(char=? (first word) #\\_) (helper (rest word) (cons (char-upcase (first (rest word))) (rest (rest word))))]\n      [else (helper (rest word) (cons (first word) acc))]))\n  (helper word '()))\n",
    "  (string-join\n   (map\n    (lambda (word)\n      (string-upcase (substring word 1)))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (char-numeric? (string-ref x 0))\n          x\n          (string-capitalize x)))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (w) (string-upcase w))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x) (string-upcase x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (define (helper word result)\n    (cond [(empty? word) result]\n          [(char=? (first word) #\\_) (helper (rest word) (string-append result (string-upcase (string (second word))))) ]\n          [else (helper (rest word) (string-append result (string (first word))))]))\n  (helper word \"\"))\n",
    "  (string-join\n   (map (lambda (x)\n          (if (char-upper-case? (string-ref x 0))\n              x\n              (string-append (string-upcase (string-ref x 0))\n                             (substring x 1))))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (char-numeric? (string-ref x 0))\n          (string-append \"_\" x)\n          x))\n    (map string-upcase\n         (string-split word #\\_)))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x)\n          (if (char-numeric? (string-ref x 0))\n              x\n              (string-capitalize x)))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (string=? (substring x 0 1) \"_\")\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (define (helper word result)\n    (cond\n      [(empty? word) result]\n      [(char=? (first word) #\\_)\n       (helper (rest word) (string-append result (string-upcase (first (rest word)))))\n      ]\n      [else (helper (rest word) (string-append result (first word)))]))\n  (helper word \"\"))\n",
    "  (string-join\n   (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                       (string-upcase (substring x 1))\n                       x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x) (if (equal? (string-ref x 0) #\\_)\n                       (string-upcase (substring x 1))\n                       x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (define (helper word acc)\n    (cond [(empty? word) (reverse acc)]\n          [(char=? (first word) #\\_) (helper (rest word) (cons (char-upcase (first (rest word))) (rest (rest word))))]\n          [else (helper (rest word) (cons (first word) acc))]))\n  (helper word '()))\n",
    "  (define (helper word)\n    (cond ((empty? word) '())\n          ((char=? (first word) #\\_) (cons (char-upcase (second word)) (helper (rest (rest word)))))\n          (else (cons (first word) (helper (rest word))))))\n  (string-&gt;symbol (string-join (helper (string-&gt;list word)))))\n",
    "  (string-join\n   (map (lambda (word)\n          (string-upcase (substring word 0 1))\n          (substring word 1))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (define (helper word)\n    (if (empty? word)\n        empty\n        (if (char=? (first word) #\\_)\n            (cons (char-upcase (second word)) (helper (rest (rest word))))\n            (cons (first word) (helper (rest word))))))\n  (helper word))\n",
    "  (let loop ([word word]\n             [result '()])\n    (cond [(empty? word) (string-join (reverse result))]\n          [(char=? (first word) #\\_)\n           (loop (rest word) (cons (string-upcase (second word)) result))]\n          [else (loop (rest word) (cons (first word) result))])))\n",
    "  (define (snake_to_camel_iter word acc)\n    (cond\n      [(empty? word) (string-&gt;list (string-join (reverse acc))) ]\n      [(char=? (first word) #\\_) (snake_to_camel_iter (rest word) (cons (string-upcase (list (second word))) (rest acc)))]\n      [else (snake_to_camel_iter (rest word) (cons (list (first word)) acc))]))\n  (string-&gt;list (string-join (snake_to_camel_iter (string-&gt;list word) '()))))\n",
    "  (string-join (map (lambda (x)\n                      (if (equal? (string-ref x 0) #\\_)\n                          (string-upcase (substring x 1))\n                          x))\n                    (string-split word #\\_))\n               \"\"))\n",
    "  (string-join\n   (map (lambda (x) (string-upcase x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (w) (string-upcase (string-take w 1)) (string-drop w 1))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x)\n          (if (equal? (string-length x) 1)\n              x\n              (string-append (string-upcase (substring x 0 1))\n                             (substring x 1))))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (define (helper word acc)\n    (if (empty? word)\n        (string-join (reverse acc))\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (cons (string-upcase (second word)) (rest acc)))\n            (helper (rest word) (cons (first word) acc)))))\n  (helper word '()))\n",
    "  (string-join\n   (map\n    (lambda (w)\n      (string-upcase (substring w 0 1))\n      (substring w 1))\n    (string-split word #\\_))\n   \"\"))\n"
  ]
}