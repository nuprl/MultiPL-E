{
  "name": "mbpp_102_snake_to_camel",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_102_snake_to_camel.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (string-join\n   (map (lambda (x)\n          (if (equal? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (define (helper word result)\n    (cond [(empty? word) result]\n          [(char=? (first word) #\\_)\n           (helper (rest word) (string-append result (string-upcase (first (rest word)))))\n           ]\n          [else (helper (rest word) (string-append result (string (first word))))]))\n  (helper word \"\"))\n",
    "  (string-join\n   (map (lambda (x) (string-capitalize x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (char=? #\\_ (string-ref x 0))\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (w) (string-upcase w))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x)\n          (if (equal? (string-length x) 1)\n              (string-upcase x)\n              (string-append (string-upcase (substring x 0 1))\n                             (substring x 1))))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (define (helper word result)\n    (cond\n      [(empty? word) result]\n      [(char=? (first word) #\\_) (helper (rest word) (string-append result (string-upcase (first (rest word)))))]\n      [else (helper (rest word) (string-append result (string (first word))))]))\n  (helper word \"\"))\n",
    "  (string-join\n   (map (lambda (x) (string-upcase x))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x) (string-upcase x))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (w)\n          (string-upcase (substring w 1)))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (word)\n      (string-upcase (substring word 1)))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (eq? (string-length x) 1)\n          (string-upcase x)\n          (string-append (string-upcase (substring x 0 1))\n                        (substring x 1))))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (define (snake_to_camel_iter word acc)\n    (if (string-empty? word)\n        acc\n        (if (string=? (string-take word 1) \"_\")\n            (snake_to_camel_iter (string-drop word 1)\n                                 (string-append acc (string-upcase (string-take word 2))))\n            (snake_to_camel_iter (string-drop word 1)\n                                 (string-append acc (string-take word 1))))))\n  (snake_to_camel_iter word \"\"))\n",
    "  (string-join (map (lambda (x) (if (char-numeric? (string-ref x 0)) x (string-capitalize x))) (string-split word #\\_)) \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x) (string-upcase x))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                       (string-upcase (substring x 1))\n                       x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x) (string-upcase x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join (map (lambda (w) (string-upcase w)) (string-split word #\"_\")) \"\"))\n",
    "  (string-join\n   (map (lambda (x) (string-upcase x))\n        (string-split word #\\_))\n   \"\"))\n"
  ]
}