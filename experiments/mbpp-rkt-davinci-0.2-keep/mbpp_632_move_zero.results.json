{
  "name": "mbpp_632_move_zero",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_632_move_zero.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (let loop ([num_list num_list]\n             [new_list '()])\n    (cond [(empty? num_list) (reverse new_list)]\n          [(zero? (first num_list)) (loop (rest num_list) (cons (first num_list) new_list))]\n          [else (loop (rest num_list) (cons (first num_list) new_list))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnoag385v.rkt:16:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnoag385v.rkt:17:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnoag385v.rkt:18:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (zero? x))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list res)\n    (cond\n      [(null? num_list) res]\n      [(zero? (car num_list)) (move_zero_iter (cdr num_list) (append res (list 0)))]\n      [else (move_zero_iter (cdr num_list) (append res (list (car num_list))))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppb5o2dmd.rkt:17:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppb5o2dmd.rkt:18:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppb5o2dmd.rkt:19:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (zero? x))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons 0 acc))]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn3c798uu.rkt:17:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn3c798uu.rkt:18:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn3c798uu.rkt:19:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (= x 0))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzzc4okz5.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzzc4okz5.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzzc4okz5.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) (remove (first num_list) acc)))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjd7wboub.rkt:17:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjd7wboub.rkt:18:4\nactual:     '(3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjd7wboub.rkt:19:4\nactual:     '(0 0 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7uxv4sc7.rkt:17:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7uxv4sc7.rkt:18:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7uxv4sc7.rkt:19:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list))\n             (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (= x 0))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzzc4okz5.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzzc4okz5.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzzc4okz5.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list (first num_list)))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(null? num_list) '()]\n    [(zero? (car num_list)) (append (move_zero (cdr num_list)) (list 0))]\n    [else (cons (car num_list) (move_zero (cdr num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (zero? x))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (zero? x))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (zero? x))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (= x 0))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzzc4okz5.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzzc4okz5.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzzc4okz5.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_helper num_list zero_list)\n    (cond\n      [(empty? num_list) (append zero_list num_list)]\n      [(zero? (first num_list))\n       (move_zero_helper (rest num_list) (append zero_list (list (first num_list))))]\n      [else (move_zero_helper (rest num_list) (append (list (first num_list)) zero_list))]))\n  (move_zero_helper num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf3qq4w8z.rkt:18:4\nactual:     '(4 3 2 1 0 0)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf3qq4w8z.rkt:19:4\nactual:     '(5 4 2 3 2 0 0 0 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (zero? x))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_helper num_list result)\n    (cond [(empty? num_list) result]\n          [(zero? (first num_list)) (move_zero_helper (rest num_list) (append result (list 0)))]\n          [else (move_zero_helper (rest num_list) (append result (list (first num_list))))]))\n  (move_zero_helper num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123895,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsndgnqfb.rkt:16:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsndgnqfb.rkt:17:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsndgnqfb.rkt:18:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (let loop ([num_list num_list]\n             [new_list '()])\n    (cond [(empty? num_list) (reverse new_list)]\n          [(zero? (first num_list)) (loop (rest num_list) (cons 0 new_list))]\n          [else (loop (rest num_list) (cons (first num_list) new_list))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123895,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvglw5kur.rkt:16:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvglw5kur.rkt:17:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvglw5kur.rkt:18:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list acc)\n    (cond [(empty? num_list) (reverse acc)]\n          [(zero? (first num_list)) (move_zero_iter (rest num_list) acc)]\n          [else (move_zero_iter (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123895,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbrfg4shh.rkt:16:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbrfg4shh.rkt:17:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbrfg4shh.rkt:18:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (= x 0))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzzc4okz5.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzzc4okz5.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzzc4okz5.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_helper num_list zero_list)\n    (cond\n      [(null? num_list) (append zero_list num_list)]\n      [(zero? (car num_list)) (move_zero_helper (cdr num_list) (append zero_list (list (car num_list))))]\n      [else (move_zero_helper (cdr num_list) (append zero_list (list (car num_list))))]))\n  (move_zero_helper num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123895,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv723zxdp.rkt:17:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv723zxdp.rkt:18:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv723zxdp.rkt:19:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list acc)\n    (cond [(empty? num_list) (reverse acc)]\n          [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons 0 acc))]\n          [else (move_zero_iter (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123895,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfjcs0qkk.rkt:16:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfjcs0qkk.rkt:17:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfjcs0qkk.rkt:18:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (= x 0))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzzc4okz5.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzzc4okz5.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzzc4okz5.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(= (first num_list) 0) (move_zero_iter (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123895,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjcvbi6ul.rkt:17:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjcvbi6ul.rkt:18:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjcvbi6ul.rkt:19:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else (append (list (first num_list))\n                  (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (zero? x))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(null? num_list) '()]\n    [(zero? (car num_list)) (append (move_zero (cdr num_list)) (list 0))]\n    [else (cons (car num_list) (move_zero (cdr num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_helper num_list new_list)\n    (cond\n      [(empty? num_list) new_list]\n      [(zero? (first num_list))\n       (move_zero_helper (rest num_list) (append new_list (list 0)))]\n      [else (move_zero_helper (rest num_list) (append new_list (list (first num_list))))]))\n  (move_zero_helper num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123895,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppbqqt5yl.rkt:18:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppbqqt5yl.rkt:19:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppbqqt5yl.rkt:20:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list new_list)\n    (cond\n      [(empty? num_list) new_list]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (append new_list (list 0)))]\n      [else (move_zero_iter (rest num_list) (append new_list (list (first num_list))))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123895,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjov3i3sb.rkt:17:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjov3i3sb.rkt:18:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjov3i3sb.rkt:19:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (let loop ((num_list num_list)\n             (zero_list null)\n             (non_zero_list null))\n    (cond ((null? num_list)\n           (append non_zero_list zero_list))\n          ((zero? (car num_list))\n           (loop (cdr num_list)\n                 (cons (car num_list) zero_list)\n                 non_zero_list))\n          (else\n           (loop (cdr num_list)\n                 zero_list\n                 (cons (car num_list) non_zero_list))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123895,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpukn6z486.rkt:24:4\nactual:     '(4 3 2 1 0 0)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpukn6z486.rkt:25:4\nactual:     '(5 4 2 3 2 0 0 0 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (= x 0))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzzc4okz5.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzzc4okz5.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzzc4okz5.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7uxv4sc7.rkt:17:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7uxv4sc7.rkt:18:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7uxv4sc7.rkt:19:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (zero? x))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (= x 0))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzzc4okz5.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzzc4okz5.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzzc4okz5.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list new_list)\n    (cond\n      [(empty? num_list) new_list]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (append new_list (list 0)))]\n      [else (move_zero_iter (rest num_list) (append new_list (list (first num_list))))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123895,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjov3i3sb.rkt:17:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjov3i3sb.rkt:18:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjov3i3sb.rkt:19:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (zero? x))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list zero_list)\n    (cond\n      [(empty? num_list) (append zero_list num_list)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (append zero_list (list (first num_list))))]\n      [else (move_zero_iter (rest num_list) (append (list (first num_list)) zero_list))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123895,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpug0x6rz7.rkt:17:4\nactual:     '(4 3 2 1 0 0)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpug0x6rz7.rkt:18:4\nactual:     '(5 4 2 3 2 0 0 0 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (let loop ([num_list num_list]\n             [acc '()])\n    (cond [(null? num_list) (reverse acc)]\n          [(zero? (car num_list))\n           (loop (cdr num_list) (cons (car num_list) acc))]\n          [else (loop (cdr num_list) (cons (car num_list) acc))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123895,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptqdh09ec.rkt:17:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptqdh09ec.rkt:18:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptqdh09ec.rkt:19:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_helper num_list new_list)\n    (cond [(empty? num_list) new_list]\n          [(zero? (first num_list))\n           (move_zero_helper (rest num_list) (append new_list (list (first num_list))))]\n          [else\n           (move_zero_helper (rest num_list) (append new_list (list 0)))]))\n  (move_zero_helper num_list (list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123895,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1txxv8zy.rkt:18:4\nactual:     '(0 0 0 0 0 0)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1txxv8zy.rkt:19:4\nactual:     '(0 0 0 0 0 0 0 0 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1txxv8zy.rkt:20:4\nactual:     '(0 0 0 0 0)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (zero? x))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (= x 0))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzzc4okz5.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzzc4okz5.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzzc4okz5.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (helper num_list acc)\n    (cond [(empty? num_list) acc]\n          [(zero? (first num_list))\n           (helper (rest num_list) (append acc (list 0)))]\n          [else (helper (rest num_list) (append acc (list (first num_list))))]))\n  (helper num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123895,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3z74e94x.rkt:17:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3z74e94x.rkt:18:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3z74e94x.rkt:19:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (zero? x))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (= x 0))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzzc4okz5.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzzc4okz5.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzzc4okz5.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (zero? x))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_helper num_list new_list)\n    (cond\n      [(empty? num_list) new_list]\n      [(zero? (first num_list)) (move_zero_helper (rest num_list) (append new_list (list (first num_list))))]\n      [else (move_zero_helper (rest num_list) (append (list (first num_list)) new_list))]))\n  (move_zero_helper num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123895,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwttoci7c.rkt:17:4\nactual:     '(4 3 2 1 0 0)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwttoci7c.rkt:18:4\nactual:     '(5 4 2 3 2 0 0 0 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (zero? x))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) (rest acc)))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123895,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt_eq91np.rkt:17:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt_eq91np.rkt:18:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt_eq91np.rkt:19:4\nactual:     '(1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (zero? x))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (zero? x))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list acc)\n    (cond\n      [(null? num_list) (reverse acc)]\n      [(zero? (car num_list)) (move_zero_iter (cdr num_list) acc)]\n      [else (move_zero_iter (cdr num_list) (cons (car num_list) acc))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123895,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy3qyityk.rkt:17:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy3qyityk.rkt:18:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy3qyityk.rkt:19:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (zero? x))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (let loop ([num_list num_list]\n             [result '()])\n    (cond [(null? num_list) result]\n          [(zero? (car num_list))\n           (loop (cdr num_list) (append result (list 0)))]\n          [else\n           (loop (cdr num_list) (append result (list (car num_list))))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123895,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpns1q77bz.rkt:18:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpns1q77bz.rkt:19:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpns1q77bz.rkt:20:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_helper num_list new_list)\n    (cond ((null? num_list) new_list)\n          ((zero? (car num_list))\n           (move_zero_helper (cdr num_list) (append new_list (list 0))))\n          (else (move_zero_helper (cdr num_list) (append new_list (list (car num_list)))))))\n  (move_zero_helper num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123895,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7bqykr9m.rkt:17:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7bqykr9m.rkt:18:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7bqykr9m.rkt:19:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7uxv4sc7.rkt:17:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7uxv4sc7.rkt:18:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7uxv4sc7.rkt:19:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list result)\n    (cond\n      [(empty? num_list) (reverse result)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) result)]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) result))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123895,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplp78ag3m.rkt:17:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplp78ag3m.rkt:18:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplp78ag3m.rkt:19:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list)) (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list zero_list)\n    (cond\n      [(empty? num_list) (append zero_list num_list)]\n      [(zero? (first num_list))\n       (move_zero_iter (rest num_list) (append zero_list (list (first num_list))))]\n      [else (move_zero_iter (rest num_list) zero_list)]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123895,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv06t5cqe.rkt:18:4\nactual:     '(0 0)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv06t5cqe.rkt:19:4\nactual:     '(0 0 0 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv06t5cqe.rkt:20:4\nactual:     '(0 0)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) acc)]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123895,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg5grk66g.rkt:17:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg5grk66g.rkt:18:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg5grk66g.rkt:19:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (let loop ([num_list num_list]\n             [new_list '()])\n    (cond [(null? num_list) (reverse new_list)]\n          [(zero? (car num_list))\n           (loop (cdr num_list) (cons (car num_list) new_list))]\n          [else\n           (loop (cdr num_list) (cons 0 new_list))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123896,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4x9czs_c.rkt:18:4\nactual:     '(0 0 0 0 0 0)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4x9czs_c.rkt:19:4\nactual:     '(0 0 0 0 0 0 0 0 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4x9czs_c.rkt:20:4\nactual:     '(0 0 0 0 0)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list result)\n    (cond\n      [(empty? num_list) result]\n      [(zero? (first num_list))\n       (move_zero_iter (rest num_list) (append result (list 0)))]\n      [else (move_zero_iter (rest num_list) (append result (list (first num_list))))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123896,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpin4j_uhm.rkt:18:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpin4j_uhm.rkt:19:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpin4j_uhm.rkt:20:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (zero? x))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list result)\n    (cond\n      [(empty? num_list) (reverse result)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) result)]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) result))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123895,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplp78ag3m.rkt:17:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplp78ag3m.rkt:18:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplp78ag3m.rkt:19:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (let loop ([num_list num_list]\n             [result '()])\n    (cond [(null? num_list) (reverse result)]\n          [(zero? (car num_list)) (loop (cdr num_list) (cons (car num_list) result))]\n          [else (loop (cdr num_list) (cons (car num_list) result))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123896,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2vgvk8z2.rkt:16:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2vgvk8z2.rkt:17:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2vgvk8z2.rkt:18:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list new_list)\n    (cond [(empty? num_list) new_list]\n          [(zero? (first num_list)) (move_zero_iter (rest num_list) (append new_list (list 0)))]\n          [else (move_zero_iter (rest num_list) (append new_list (list (first num_list))))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123896,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo0sn7299.rkt:16:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo0sn7299.rkt:17:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo0sn7299.rkt:18:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (= x 0))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzzc4okz5.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzzc4okz5.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzzc4okz5.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (zero? x))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_helper num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_helper (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_helper (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_helper num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123896,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1w_s65lq.rkt:17:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1w_s65lq.rkt:18:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1w_s65lq.rkt:19:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) (remove zero? acc)))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123896,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph_vtpctg.rkt:17:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph_vtpctg.rkt:18:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph_vtpctg.rkt:19:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (zero? x))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_helper num_list result)\n    (cond\n      [(empty? num_list) result]\n      [(zero? (first num_list))\n       (move_zero_helper (rest num_list) (append result (list 0)))]\n      [else (move_zero_helper (rest num_list) (append result (list (first num_list))))]))\n  (move_zero_helper num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123896,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdnczf2u3.rkt:18:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdnczf2u3.rkt:19:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdnczf2u3.rkt:20:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (zero? x))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list (first num_list)))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (zero? x))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (zero? x))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list)) (append (move_zero (rest num_list)) (list 0))]\n    [else (append (list (first num_list)) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123896,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (zero? x))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list result)\n    (cond\n      [(empty? num_list) result]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (append result (list 0)))]\n      [else (move_zero_iter (rest num_list) (append result (list (first num_list))))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123896,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3f4cwadg.rkt:17:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3f4cwadg.rkt:18:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3f4cwadg.rkt:19:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (let loop ([num_list num_list]\n             [result '()])\n    (cond [(empty? num_list) (reverse result)]\n          [(zero? (first num_list))\n           (loop (rest num_list) (cons (first num_list) result))]\n          [else (loop (rest num_list) (cons (first num_list) result))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123896,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp95pshypq.rkt:17:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp95pshypq.rkt:18:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp95pshypq.rkt:19:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list acc)\n    (cond [(empty? num_list) acc]\n          [(zero? (first num_list)) (move_zero_iter (rest num_list) (append acc (list 0)))]\n          [else (move_zero_iter (rest num_list) (append acc (list (first num_list))))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123896,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp__x47v5g.rkt:16:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp__x47v5g.rkt:17:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp__x47v5g.rkt:18:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list zero_list)\n    (cond [(empty? num_list) zero_list]\n          [(zero? (first num_list))\n           (move_zero_iter (rest num_list) (append zero_list (list 0)))]\n          [else (move_zero_iter (rest num_list) (append zero_list (list (first num_list))))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123896,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk3f0eiy3.rkt:17:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk3f0eiy3.rkt:18:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk3f0eiy3.rkt:19:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_helper num_list acc)\n    (cond [(empty? num_list) (reverse acc)]\n          [(zero? (first num_list)) (move_zero_helper (rest num_list) (cons (first num_list) acc))]\n          [else (move_zero_helper (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_helper num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123896,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9c9ot596.rkt:16:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9c9ot596.rkt:17:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9c9ot596.rkt:18:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_helper num_list zero_list)\n    (cond\n      [(empty? num_list) (append zero_list num_list)]\n      [(zero? (first num_list))\n       (move_zero_helper (rest num_list) (append zero_list (list (first num_list))))]\n      [else (move_zero_helper (rest num_list) (append (list (first num_list)) zero_list))]))\n  (move_zero_helper num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf3qq4w8z.rkt:18:4\nactual:     '(4 3 2 1 0 0)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf3qq4w8z.rkt:19:4\nactual:     '(5 4 2 3 2 0 0 0 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (let loop ([num_list num_list] [new_list '()])\n    (cond [(empty? num_list) new_list]\n          [(zero? (first num_list)) (loop (rest num_list) (append new_list (list 0)))]\n          [else (loop (rest num_list) (append new_list (list (first num_list))))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123896,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphmrxjyac.rkt:15:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphmrxjyac.rkt:16:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphmrxjyac.rkt:17:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) (remove (first num_list) acc)))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjd7wboub.rkt:17:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjd7wboub.rkt:18:4\nactual:     '(3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjd7wboub.rkt:19:4\nactual:     '(0 0 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_helper num_list zero_list)\n    (cond\n      [(empty? num_list) (append zero_list num_list)]\n      [(zero? (first num_list)) (move_zero_helper (rest num_list) (append zero_list (list (first num_list))))]\n      [else (move_zero_helper (rest num_list) (append zero_list (list (first num_list))))]))\n  (move_zero_helper num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123896,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqz5ei41h.rkt:17:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqz5ei41h.rkt:18:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqz5ei41h.rkt:19:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list))\n       (move_zero_iter (rest num_list) (cons (first num_list) acc))]\n      [else (append (list (first num_list)) (move_zero_iter (rest num_list) acc))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123896,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list result)\n    (if (null? num_list)\n        result\n        (if (zero? (car num_list))\n            (move_zero_iter (cdr num_list) (append result (list 0)))\n            (move_zero_iter (cdr num_list) (append result (list (car num_list)))))))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123896,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1uhtgv8a.rkt:18:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1uhtgv8a.rkt:19:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1uhtgv8a.rkt:20:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (= x 0))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzzc4okz5.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzzc4okz5.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzzc4okz5.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list result)\n    (cond\n      [(empty? num_list) result]\n      [(zero? (first num_list))\n       (move_zero_iter (rest num_list) (append result (list 0)))]\n      [else\n       (move_zero_iter (rest num_list) (append result (list (first num_list))))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123896,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpizoytbbc.rkt:19:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpizoytbbc.rkt:20:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpizoytbbc.rkt:21:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list result)\n    (cond\n      [(empty? num_list) result]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (append result (list 0)))]\n      [else (move_zero_iter (rest num_list) (append result (list (first num_list))))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123896,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3f4cwadg.rkt:17:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3f4cwadg.rkt:18:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3f4cwadg.rkt:19:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_helper num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_helper (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_helper (rest num_list) (cons (first num_list) (rest acc)))]))\n  (move_zero_helper num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123896,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxpyxb7l5.rkt:17:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxpyxb7l5.rkt:18:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxpyxb7l5.rkt:19:4\nactual:     '(1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (zero? x))) num_list)\n  (filter (lambda (x) (zero? x)) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123896,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_n9c2ei4.rkt:13:4\nactual:     '(0 0)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_n9c2ei4.rkt:14:4\nactual:     '(0 0 0 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_n9c2ei4.rkt:15:4\nactual:     '(0 0)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) acc)]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123895,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg5grk66g.rkt:17:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg5grk66g.rkt:18:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg5grk66g.rkt:19:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7uxv4sc7.rkt:17:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7uxv4sc7.rkt:18:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7uxv4sc7.rkt:19:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (zero? x))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(null? num_list) '()]\n    [(zero? (car num_list)) (append (move_zero (cdr num_list)) (list 0))]\n    [else (cons (car num_list) (move_zero (cdr num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(null? num_list) '()]\n    [(zero? (car num_list)) (append (move_zero (cdr num_list)) (list 0))]\n    [else (cons (car num_list) (move_zero (cdr num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (= x 0))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzzc4okz5.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzzc4okz5.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzzc4okz5.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list new_list)\n    (cond\n      [(empty? num_list) new_list]\n      [(zero? (first num_list))\n       (move_zero_iter (rest num_list) (append new_list (list (first num_list))))]\n      [else (move_zero_iter (rest num_list) (append new_list (list (first num_list))))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123896,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5w7uza4m.rkt:18:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5w7uza4m.rkt:19:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5w7uza4m.rkt:20:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (let loop ([num_list num_list]\n             [result '()])\n    (cond [(empty? num_list) (reverse result)]\n          [(zero? (first num_list))\n           (loop (rest num_list) (cons (first num_list) result))]\n          [else (loop (rest num_list) (cons (first num_list) result))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123896,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp95pshypq.rkt:17:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp95pshypq.rkt:18:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp95pshypq.rkt:19:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_helper num_list zero_list)\n    (cond\n      [(empty? num_list) (append zero_list num_list)]\n      [(zero? (first num_list))\n       (move_zero_helper (rest num_list) (append zero_list (list (first num_list))))]\n      [else (move_zero_helper (rest num_list) zero_list)]))\n  (move_zero_helper num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123896,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoppdv0xq.rkt:18:4\nactual:     '(0 0)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoppdv0xq.rkt:19:4\nactual:     '(0 0 0 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoppdv0xq.rkt:20:4\nactual:     '(0 0)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (let loop ([num_list num_list] [acc '()])\n    (if (null? num_list)\n        acc\n        (if (zero? (car num_list))\n            (loop (cdr num_list) (append acc (list 0)))\n            (loop (cdr num_list) (append acc (list (car num_list))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123896,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzvga953a.rkt:17:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzvga953a.rkt:18:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzvga953a.rkt:19:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list result)\n    (cond\n      [(empty? num_list) result]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (append result (list 0)))]\n      [else (move_zero_iter (rest num_list) (append result (list (first num_list))))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123896,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3f4cwadg.rkt:17:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3f4cwadg.rkt:18:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3f4cwadg.rkt:19:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (zero? x))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list acc)\n    (cond [(empty? num_list) (reverse acc)]\n          [(zero? (first num_list)) (move_zero_iter (rest num_list) acc)]\n          [else (move_zero_iter (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123895,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbrfg4shh.rkt:16:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbrfg4shh.rkt:17:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbrfg4shh.rkt:18:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) (rest acc)))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123895,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt_eq91np.rkt:17:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt_eq91np.rkt:18:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt_eq91np.rkt:19:4\nactual:     '(1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) '()]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123897,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (= x 0))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzzc4okz5.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzzc4okz5.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzzc4okz5.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list acc)\n    (cond [(empty? num_list) acc]\n          [(zero? (first num_list)) (move_zero_iter (rest num_list) (append acc (list 0)))]\n          [else (move_zero_iter (rest num_list) (append acc (list (first num_list))))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123896,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp__x47v5g.rkt:16:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp__x47v5g.rkt:17:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp__x47v5g.rkt:18:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list acc)\n    (cond [(empty? num_list) acc]\n          [(zero? (first num_list))\n           (move_zero_iter (rest num_list) (append acc (list 0)))]\n          [else (move_zero_iter (rest num_list) (append acc (list (first num_list))))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123897,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpomiwht1v.rkt:17:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpomiwht1v.rkt:18:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpomiwht1v.rkt:19:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list acc)\n    (cond [(empty? num_list) (reverse acc)]\n          [(zero? (first num_list)) (move_zero_iter (rest num_list) acc)]\n          [else (move_zero_iter (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123895,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbrfg4shh.rkt:16:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbrfg4shh.rkt:17:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbrfg4shh.rkt:18:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_helper num_list acc)\n    (cond [(empty? num_list) acc]\n          [(zero? (first num_list)) (move_zero_helper (rest num_list) (append acc (list 0)))]\n          [else (move_zero_helper (rest num_list) (append acc (list (first num_list))))]))\n  (move_zero_helper num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123897,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiwe1mmrr.rkt:16:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiwe1mmrr.rkt:17:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiwe1mmrr.rkt:18:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) (rest acc)))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123895,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt_eq91np.rkt:17:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt_eq91np.rkt:18:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt_eq91np.rkt:19:4\nactual:     '(1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (let loop ([num_list num_list] [result '()])\n    (cond [(empty? num_list) result]\n          [(zero? (first num_list))\n           (loop (rest num_list) (append result (list 0)))]\n          [else (loop (rest num_list) (append result (list (first num_list))))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123897,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm2tk_4si.rkt:16:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm2tk_4si.rkt:17:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm2tk_4si.rkt:18:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) acc]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (append acc (list 0)))]\n      [else (move_zero_iter (rest num_list) (append acc (list (first num_list))))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123897,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe869gjhk.rkt:17:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe869gjhk.rkt:18:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe869gjhk.rkt:19:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (let loop ([num_list num_list] [result '()])\n    (cond [(empty? num_list) (reverse result)]\n          [(zero? (first num_list)) (loop (rest num_list) (cons (first num_list) result))]\n          [else (loop (rest num_list) (cons (first num_list) result))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123897,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv9bkoi9w.rkt:15:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv9bkoi9w.rkt:16:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv9bkoi9w.rkt:17:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) acc]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (append acc (list 0)))]\n      [else (move_zero_iter (rest num_list) (append acc (list (first num_list))))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123897,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe869gjhk.rkt:17:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe869gjhk.rkt:18:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe869gjhk.rkt:19:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) (rest acc)))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123895,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt_eq91np.rkt:17:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt_eq91np.rkt:18:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt_eq91np.rkt:19:4\nactual:     '(1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list result)\n    (cond [(empty? num_list) result]\n          [(zero? (first num_list))\n           (move_zero_iter (rest num_list) (append result (list (first num_list))))]\n          [else (move_zero_iter (rest num_list) (append (list (first num_list)) result))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123897,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9zg57usi.rkt:17:4\nactual:     '(4 3 2 1 0 0)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9zg57usi.rkt:18:4\nactual:     '(5 4 2 3 2 0 0 0 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list zero_list)\n    (cond\n      [(empty? num_list) (append zero_list (reverse num_list))]\n      [(zero? (first num_list))\n       (move_zero_iter (rest num_list) (cons (first num_list) zero_list))]\n      [else (move_zero_iter (rest num_list) zero_list)]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123897,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5a9yeuqb.rkt:18:4\nactual:     '(0 0)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5a9yeuqb.rkt:19:4\nactual:     '(0 0 0 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5a9yeuqb.rkt:20:4\nactual:     '(0 0)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (= x 0))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzzc4okz5.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzzc4okz5.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzzc4okz5.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) acc]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (append acc (list (first num_list))))]\n      [else (move_zero_iter (rest num_list) (append acc (list (first num_list))))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123897,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmmrbf7ml.rkt:17:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmmrbf7ml.rkt:18:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmmrbf7ml.rkt:19:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (= x 0))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzzc4okz5.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzzc4okz5.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzzc4okz5.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list new_list)\n    (cond\n      [(empty? num_list) new_list]\n      [(zero? (first num_list))\n       (move_zero_iter (rest num_list) (append new_list (list 0)))]\n      [else (move_zero_iter (rest num_list) (append new_list (list (first num_list))))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123897,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp770mqji7.rkt:18:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp770mqji7.rkt:19:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp770mqji7.rkt:20:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (let loop ([num_list num_list]\n             [acc '()])\n    (cond [(null? num_list) (reverse acc)]\n          [(zero? (car num_list)) (loop (cdr num_list) (cons (car num_list) acc))]\n          [else (loop (cdr num_list) (cons (car num_list) acc))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123897,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeu4wjvd4.rkt:16:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeu4wjvd4.rkt:17:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeu4wjvd4.rkt:18:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (zero? x))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (zero? x))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_helper num_list acc)\n    (cond\n      [(null? num_list) (reverse acc)]\n      [(zero? (car num_list)) (move_zero_helper (cdr num_list) acc)]\n      [else (move_zero_helper (cdr num_list) (cons (car num_list) acc))]))\n  (move_zero_helper num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123897,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9fih74co.rkt:17:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9fih74co.rkt:18:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9fih74co.rkt:19:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (zero? x))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list zero_list)\n    (cond\n      [(null? num_list) zero_list]\n      [(zero? (car num_list)) (move_zero_iter (cdr num_list) (append zero_list (list (car num_list))))]\n      [else (move_zero_iter (cdr num_list) (append (list (car num_list)) zero_list))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123897,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2u92urc2.rkt:17:4\nactual:     '(4 3 2 1 0 0)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2u92urc2.rkt:18:4\nactual:     '(5 4 2 3 2 0 0 0 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) acc)]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123895,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg5grk66g.rkt:17:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg5grk66g.rkt:18:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg5grk66g.rkt:19:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (let loop ([num_list num_list] [new_list '()])\n    (cond [(empty? num_list) new_list]\n          [(zero? (first num_list)) (loop (rest num_list) (append new_list (list 0)))]\n          [else (loop (rest num_list) (append new_list (list (first num_list))))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123896,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphmrxjyac.rkt:15:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphmrxjyac.rkt:16:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphmrxjyac.rkt:17:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list acc)\n    (cond [(empty? num_list) (reverse acc)]\n          [(zero? (first num_list)) (move_zero_iter (rest num_list) acc)]\n          [else (move_zero_iter (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_iter num_list empty))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123897,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbuy6ll5o.rkt:16:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbuy6ll5o.rkt:17:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbuy6ll5o.rkt:18:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond [(empty? num_list) empty]\n        [(zero? (first num_list))\n         (append (move_zero (rest num_list)) (list 0))]\n        [else (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123897,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (= x 0))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzzc4okz5.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzzc4okz5.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzzc4okz5.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7uxv4sc7.rkt:17:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7uxv4sc7.rkt:18:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7uxv4sc7.rkt:19:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (let loop ([num_list num_list]\n             [new_list '()])\n    (cond [(empty? num_list) (reverse new_list)]\n          [(zero? (first num_list))\n           (loop (rest num_list) (cons (first num_list) new_list))]\n          [else\n           (loop (rest num_list) (cons (first num_list) new_list))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123897,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4qnj2b4b.rkt:18:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4qnj2b4b.rkt:19:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4qnj2b4b.rkt:20:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (zero? x))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7uxv4sc7.rkt:17:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7uxv4sc7.rkt:18:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7uxv4sc7.rkt:19:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (zero? x))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list new_list)\n    (cond\n      [(empty? num_list) (reverse new_list)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (append new_list (list (first num_list))))]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) new_list))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123897,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppzn0wm1r.rkt:17:4\nactual:     '(0 0 1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppzn0wm1r.rkt:18:4\nactual:     '(0 0 0 0 2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppzn0wm1r.rkt:19:4\nactual:     '(0 0 1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_helper num_list acc)\n    (cond [(empty? num_list) (reverse acc)]\n          [(zero? (first num_list)) (move_zero_helper (rest num_list) (cons (first num_list) acc))]\n          [else (move_zero_helper (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_helper num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123896,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9c9ot596.rkt:16:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9c9ot596.rkt:17:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9c9ot596.rkt:18:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (zero? x))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list zero_list)\n    (cond\n      [(empty? num_list) (append zero_list num_list)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (append zero_list (list (first num_list))))]\n      [else (move_zero_iter (rest num_list) zero_list)]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123897,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmply8uff5x.rkt:17:4\nactual:     '(0 0)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmply8uff5x.rkt:18:4\nactual:     '(0 0 0 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmply8uff5x.rkt:19:4\nactual:     '(0 0)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) (rest acc)))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123895,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt_eq91np.rkt:17:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt_eq91np.rkt:18:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt_eq91np.rkt:19:4\nactual:     '(1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list zero_list)\n    (cond ((null? num_list) zero_list)\n          ((zero? (car num_list))\n           (move_zero_iter (cdr num_list) (append zero_list (list 0))))\n          (else (move_zero_iter (cdr num_list) (append zero_list (list (car num_list)))))))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123897,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoda1a_lz.rkt:17:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoda1a_lz.rkt:18:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoda1a_lz.rkt:19:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) (rest acc)))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123895,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt_eq91np.rkt:17:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt_eq91np.rkt:18:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt_eq91np.rkt:19:4\nactual:     '(1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) acc)]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123895,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg5grk66g.rkt:17:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg5grk66g.rkt:18:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg5grk66g.rkt:19:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list new_list)\n    (cond\n      [(empty? num_list) new_list]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (append new_list (list 0)))]\n      [else (move_zero_iter (rest num_list) (append new_list (list (first num_list))))]))\n  (move_zero_iter num_list empty))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123897,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuhleq_i6.rkt:17:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuhleq_i6.rkt:18:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuhleq_i6.rkt:19:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (equal? x 0))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123897,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1k7gmz8m.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1k7gmz8m.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1k7gmz8m.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (let loop ([num_list num_list] [new_list '()])\n    (cond [(empty? num_list) new_list]\n          [(zero? (first num_list)) (loop (rest num_list) (append new_list (list (first num_list))))]\n          [else (loop (rest num_list) (append new_list (list (first num_list))))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123897,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph4j8wts6.rkt:15:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph4j8wts6.rkt:16:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph4j8wts6.rkt:17:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_helper num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_helper (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_helper (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_helper num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123896,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1w_s65lq.rkt:17:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1w_s65lq.rkt:18:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1w_s65lq.rkt:19:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list acc)\n    (cond [(empty? num_list) (reverse acc)]\n          [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons (first num_list) acc))]\n          [else (move_zero_iter (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123897,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjitklkx5.rkt:16:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjitklkx5.rkt:17:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjitklkx5.rkt:18:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list acc)\n    (cond\n      [(null? num_list) (reverse acc)]\n      [(zero? (car num_list)) (move_zero_iter (cdr num_list) acc)]\n      [else (move_zero_iter (cdr num_list) (cons (car num_list) acc))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123895,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy3qyityk.rkt:17:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy3qyityk.rkt:18:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy3qyityk.rkt:19:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (let loop ([num_list num_list] [zero_list '()])\n    (cond [(null? num_list) (append zero_list num_list)]\n          [(zero? (car num_list))\n           (loop (cdr num_list) (append zero_list (list (car num_list))))]\n          [else (loop (cdr num_list) zero_list)])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123898,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiydnzuoe.rkt:16:4\nactual:     '(0 0)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiydnzuoe.rkt:17:4\nactual:     '(0 0 0 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiydnzuoe.rkt:18:4\nactual:     '(0 0)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (zero? x))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (zero? x))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7uxv4sc7.rkt:17:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7uxv4sc7.rkt:18:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7uxv4sc7.rkt:19:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (let loop ([num_list num_list]\n             [new_list '()])\n    (cond [(null? num_list) (reverse new_list)]\n          [(zero? (car num_list)) (loop (cdr num_list) new_list)]\n          [else (loop (cdr num_list) (cons (car num_list) new_list))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123898,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpya0b5hab.rkt:16:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpya0b5hab.rkt:17:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpya0b5hab.rkt:18:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (zero? x))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (zero? x))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (append (filter (lambda (x) (not (zero? x))) num_list)\n          (filter (lambda (x) (zero? x)) num_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123898,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (zero? x))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (zero? x))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (let loop ([num_list num_list]\n             [result '()])\n    (cond [(null? num_list) (reverse result)]\n          [(zero? (car num_list)) (loop (cdr num_list) (cons (car num_list) result))]\n          [else (loop (cdr num_list) (cons (car num_list) result))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123896,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2vgvk8z2.rkt:16:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2vgvk8z2.rkt:17:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2vgvk8z2.rkt:18:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_helper num_list new_list)\n    (cond\n      [(empty? num_list) new_list]\n      [(zero? (first num_list)) (move_zero_helper (rest num_list) (append new_list (list (first num_list))))]\n      [else (move_zero_helper (rest num_list) (append new_list (list (first num_list))))]))\n  (move_zero_helper num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123898,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmpo_wk5m.rkt:17:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmpo_wk5m.rkt:18:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmpo_wk5m.rkt:19:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list acc)\n    (cond\n      [(null? num_list) (reverse acc)]\n      [(zero? (car num_list)) (move_zero_iter (cdr num_list) acc)]\n      [else (move_zero_iter (cdr num_list) (cons (car num_list) acc))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123895,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy3qyityk.rkt:17:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy3qyityk.rkt:18:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy3qyityk.rkt:19:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list)) (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(null? num_list) '()]\n    [(zero? (car num_list)) (append (move_zero (cdr num_list)) (list 0))]\n    [else (cons (car num_list) (move_zero (cdr num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (zero? x))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (zero? x))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) acc]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (append acc (list 0)))]\n      [else (move_zero_iter (rest num_list) (append acc (list (first num_list))))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123897,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe869gjhk.rkt:17:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe869gjhk.rkt:18:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe869gjhk.rkt:19:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) acc)]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123895,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg5grk66g.rkt:17:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg5grk66g.rkt:18:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg5grk66g.rkt:19:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (let loop ([num_list num_list]\n             [zero_list '()])\n    (cond [(empty? num_list) (append zero_list num_list)]\n          [(zero? (first num_list))\n           (loop (rest num_list)\n                 (append zero_list (list (first num_list))))]\n          [else (loop (rest num_list)\n                      (append zero_list (list (first num_list))))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123898,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjy9yle81.rkt:19:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjy9yle81.rkt:20:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjy9yle81.rkt:21:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) (remove (first num_list) acc)))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjd7wboub.rkt:17:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjd7wboub.rkt:18:4\nactual:     '(3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjd7wboub.rkt:19:4\nactual:     '(0 0 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7uxv4sc7.rkt:17:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7uxv4sc7.rkt:18:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7uxv4sc7.rkt:19:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list acc)\n    (cond\n      [(null? num_list) (reverse acc)]\n      [(zero? (car num_list)) (move_zero_iter (cdr num_list) acc)]\n      [else (move_zero_iter (cdr num_list) (cons (car num_list) acc))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123895,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy3qyityk.rkt:17:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy3qyityk.rkt:18:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy3qyityk.rkt:19:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list acc)\n    (cond\n      [(null? num_list) (reverse acc)]\n      [(zero? (car num_list)) (move_zero_iter (cdr num_list) acc)]\n      [else (move_zero_iter (cdr num_list) (cons (car num_list) acc))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123895,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy3qyityk.rkt:17:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy3qyityk.rkt:18:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy3qyityk.rkt:19:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) (rest acc)))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123895,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt_eq91np.rkt:17:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt_eq91np.rkt:18:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt_eq91np.rkt:19:4\nactual:     '(1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) '()]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else (append (list (first num_list))\n                  (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123898,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) (rest acc)))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123895,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt_eq91np.rkt:17:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt_eq91np.rkt:18:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt_eq91np.rkt:19:4\nactual:     '(1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (= x 0))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzzc4okz5.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzzc4okz5.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzzc4okz5.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (zero? x))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (zero? x))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopivxgsk.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (= x 0))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzzc4okz5.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzzc4okz5.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzzc4okz5.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    }
  ]
}