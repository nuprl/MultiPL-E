{
  "name": "mbpp_297_flatten_list",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_297_flatten_list.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond [(empty? list1) empty]\n        [(list? (first list1))\n         (append (flatten_list (first list1))\n                 (flatten_list (rest list1)))]\n        [else (cons (first list1) (flatten_list (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(empty? list1) empty]\n    [(list? (first list1))\n     (append (flatten_list (first list1)) (flatten_list (rest list1)))]\n    [else (cons (first list1) (flatten_list (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond [(null? list1) '()]\n        [(list? (car list1))\n         (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n        [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(empty? list1) empty]\n    [(list? (first list1))\n     (append (flatten_list (first list1)) (flatten_list (rest list1)))]\n    [else (cons (first list1) (flatten_list (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(empty? list1) empty]\n    [(list? (first list1))\n     (append (flatten_list (first list1)) (flatten_list (rest list1)))]\n    [else (cons (first list1) (flatten_list (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1))\n     (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(empty? list1) empty]\n    [(list? (first list1)) (append (flatten_list (first list1)) (flatten_list (rest list1)))]\n    [else (cons (first list1) (flatten_list (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(empty? list1) empty]\n    [(list? (first list1))\n     (append (flatten_list (first list1)) (flatten_list (rest list1)))]\n    [else (cons (first list1) (flatten_list (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(empty? list1) empty]\n    [(list? (first list1)) (append (flatten_list (first list1)) (flatten_list (rest list1)))]\n    [else (cons (first list1) (flatten_list (rest list1)))]))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1666123868,
      "stdout": "",
      "stderr": "/tmp/tmpl6toto2z.rkt:9:0: </code>: unbound identifier\n  in: </code>\n  location...:\n   /tmp/tmpl6toto2z.rkt:9:0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(empty? list1) empty]\n    [(list? (first list1))\n     (append (flatten_list (first list1)) (flatten_list (rest list1)))]\n    [else (cons (first list1) (flatten_list (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(empty? list1) empty]\n    [(list? (first list1)) (append (flatten_list (first list1)) (flatten_list (rest list1)))]\n    [else (cons (first list1) (flatten_list (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond ((null? list1) '())\n        ((list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1))))\n        (else (cons (car list1) (flatten_list (cdr list1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1666123866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(empty? list1) empty]\n    [(list? (first list1))\n     (append (flatten_list (first list1)) (flatten_list (rest list1)))]\n    [else (cons (first list1) (flatten_list (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1))\n     (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else\n     (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1666123866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(empty? list1) empty]\n    [(list? (first list1))\n     (append (flatten_list (first list1)) (flatten_list (rest list1)))]\n    [else (cons (first list1) (flatten_list (rest list1)))]))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1666123868,
      "stdout": "",
      "stderr": "/tmp/tmpcjoiv6jr.rkt:10:0: </code>: unbound identifier\n  in: </code>\n  location...:\n   /tmp/tmpcjoiv6jr.rkt:10:0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(empty? list1) empty]\n    [(list? (first list1))\n     (append (flatten_list (first list1)) (flatten_list (rest list1)))]\n    [else (cons (first list1) (flatten_list (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(not (list? (car list1))) (cons (car list1) (flatten_list (cdr list1)))]\n    [else (append (flatten_list (car list1)) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1))\n     (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(empty? list1) empty]\n    [(list? (first list1))\n     (append (flatten_list (first list1)) (flatten_list (rest list1)))]\n    [else (cons (first list1) (flatten_list (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(empty? list1) empty]\n    [(list? (first list1))\n     (append (flatten_list (first list1))\n             (flatten_list (rest list1)))]\n    [else (cons (first list1) (flatten_list (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(not (list? (car list1))) (cons (car list1) (flatten_list (cdr list1)))]\n    [else (append (flatten_list (car list1)) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(empty? list1) empty]\n    [(list? (first list1))\n     (append (flatten_list (first list1)) (flatten_list (rest list1)))]\n    [else (cons (first list1) (flatten_list (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(not (list? (car list1))) (cons (car list1) (flatten_list (cdr list1)))]\n    [else (append (flatten_list (car list1)) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(empty? list1) empty]\n    [(list? (first list1)) (append (flatten_list (first list1)) (flatten_list (rest list1)))]\n    [else (cons (first list1) (flatten_list (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond ((null? list1) '())\n        ((list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1))))\n        (else (cons (car list1) (flatten_list (cdr list1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1666123866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(empty? list1) empty]\n    [(list? (first list1))\n     (append (flatten_list (first list1)) (flatten_list (rest list1)))]\n    [else (cons (first list1) (flatten_list (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1))\n     (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(empty? list1) empty]\n    [(list? (first list1))\n     (append (flatten_list (first list1)) (flatten_list (rest list1)))]\n    [else (cons (first list1) (flatten_list (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(empty? list1) empty]\n    [(list? (first list1))\n     (append (flatten_list (first list1)) (flatten_list (rest list1)))]\n    [else\n     (cons (first list1) (flatten_list (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1666123866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1))\n     (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else\n     (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1666123866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(empty? list1) empty]\n    [(list? (first list1))\n     (append (flatten_list (first list1)) (flatten_list (rest list1)))]\n    [else (cons (first list1) (flatten_list (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(not (list? (car list1))) (cons (car list1) (flatten_list (cdr list1)))]\n    [else (append (flatten_list (car list1)) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(empty? list1) empty]\n    [(list? (first list1))\n     (append (flatten_list (first list1)) (flatten_list (rest list1)))]\n    [else (cons (first list1) (flatten_list (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(empty? list1) empty]\n    [(list? (first list1))\n     (append (flatten_list (first list1)) (flatten_list (rest list1)))]\n    [else (cons (first list1) (flatten_list (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond [(empty? list1) empty]\n        [(list? (first list1))\n         (append (flatten_list (first list1))\n                 (flatten_list (rest list1)))]\n        [else (cons (first list1) (flatten_list (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1666123868,
      "stdout": "",
      "stderr": "/tmp/tmp_pg3k17w.rkt:9:0: </code>: unbound identifier\n  in: </code>\n  location...:\n   /tmp/tmp_pg3k17w.rkt:9:0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1))\n     (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond [(empty? list1) empty]\n        [(list? (first list1)) (append (flatten_list (first list1)) (flatten_list (rest list1)))]\n        [else (cons (first list1) (flatten_list (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1666123866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond [(empty? list1) empty]\n        [(list? (first list1))\n         (append (flatten_list (first list1))\n                 (flatten_list (rest list1)))]\n        [else (cons (first list1)\n                    (flatten_list (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1666123868,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond [(empty? list1) empty]\n        [(list? (first list1))\n         (append (flatten_list (first list1))\n                 (flatten_list (rest list1)))]\n        [else (cons (first list1)\n                    (flatten_list (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1666123868,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(empty? list1) empty]\n    [(list? (first list1))\n     (append (flatten_list (first list1)) (flatten_list (rest list1)))]\n    [else (cons (first list1) (flatten_list (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(empty? list1) empty]\n    [(list? (first list1))\n     (append (flatten_list (first list1)) (flatten_list (rest list1)))]\n    [else (cons (first list1) (flatten_list (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond ((null? list1) '())\n        ((list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1))))\n        (else (cons (car list1) (flatten_list (cdr list1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1666123866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(empty? list1) empty]\n    [(list? (first list1))\n     (append (flatten_list (first list1)) (flatten_list (rest list1)))]\n    [else (cons (first list1) (flatten_list (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(empty? list1) empty]\n    [(list? (first list1))\n     (append (flatten_list (first list1))\n             (flatten_list (rest list1)))]\n    [else (cons (first list1)\n                (flatten_list (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(not (list? (car list1))) (cons (car list1) (flatten_list (cdr list1)))]\n    [else (append (flatten_list (car list1)) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(empty? list1) empty]\n    [(list? (first list1))\n     (append (flatten_list (first list1)) (flatten_list (rest list1)))]\n    [else (cons (first list1) (flatten_list (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(empty? list1) empty]\n    [(list? (first list1))\n     (append (flatten_list (first list1)) (flatten_list (rest list1)))]\n    [else\n     (cons (first list1) (flatten_list (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1666123866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(empty? list1) empty]\n    [(list? (first list1)) (append (flatten_list (first list1)) (flatten_list (rest list1)))]\n    [else (cons (first list1) (flatten_list (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(empty? list1) empty]\n    [(list? (first list1))\n     (append (flatten_list (first list1))\n             (flatten_list (rest list1)))]\n    [else (cons (first list1)\n                (flatten_list (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(empty? list1) empty]\n    [(list? (first list1))\n     (append (flatten_list (first list1)) (flatten_list (rest list1)))]\n    [else (cons (first list1) (flatten_list (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(not (list? (car list1))) (cons (car list1) (flatten_list (cdr list1)))]\n    [else (append (flatten_list (car list1)) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond [(empty? list1) empty]\n        [(list? (first list1))\n         (append (flatten_list (first list1))\n                 (flatten_list (rest list1)))]\n        [else (cons (first list1)\n                    (flatten_list (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1666123868,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(empty? list1) empty]\n    [(list? (first list1)) (append (flatten_list (first list1)) (flatten_list (rest list1)))]\n    [else (cons (first list1) (flatten_list (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(empty? list1) empty]\n    [(list? (first list1))\n     (append (flatten_list (first list1))\n             (flatten_list (rest list1)))]\n    [else (cons (first list1) (flatten_list (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(empty? list1) empty]\n    [else\n     (append (if (list? (first list1))\n                 (flatten_list (first list1))\n                 (list (first list1)))\n             (flatten_list (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1666123868,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(empty? list1) empty]\n    [(list? (first list1))\n     (append (flatten_list (first list1)) (flatten_list (rest list1)))]\n    [else (cons (first list1) (flatten_list (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond [(null? list1) '()]\n        [(list? (car list1))\n         (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n        [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(empty? list1) empty]\n    [(list? (first list1))\n     (append (flatten_list (first list1)) (flatten_list (rest list1)))]\n    [else (cons (first list1) (flatten_list (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond [(empty? list1) empty]\n        [(list? (first list1)) (append (flatten_list (first list1)) (flatten_list (rest list1)))]\n        [else (cons (first list1) (flatten_list (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1666123866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(empty? list1) empty]\n    [(list? (first list1))\n     (append (flatten_list (first list1)) (flatten_list (rest list1)))]\n    [else (cons (first list1) (flatten_list (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(empty? list1) empty]\n    [(list? (first list1))\n     (append (flatten_list (first list1)) (flatten_list (rest list1)))]\n    [else (cons (first list1) (flatten_list (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(empty? list1) empty]\n    [(list? (first list1))\n     (append (flatten_list (first list1)) (flatten_list (rest list1)))]\n    [else (cons (first list1) (flatten_list (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond ((null? list1) '())\n        ((list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1))))\n        (else (cons (car list1) (flatten_list (cdr list1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1666123866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(empty? list1) empty]\n    [(list? (first list1))\n     (append (flatten_list (first list1)) (flatten_list (rest list1)))]\n    [else (cons (first list1) (flatten_list (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond [(empty? list1) empty]\n        [(list? (first list1))\n         (append (flatten_list (first list1)) (flatten_list (rest list1)))]\n        [else (cons (first list1) (flatten_list (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1666123866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(not (list? (car list1))) (cons (car list1) (flatten_list (cdr list1)))]\n    [else (append (flatten_list (car list1)) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(empty? list1) empty]\n    [(list? (first list1)) (append (flatten_list (first list1)) (flatten_list (rest list1)))]\n    [else (cons (first list1) (flatten_list (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1))\n     (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(not (list? (car list1))) (cons (car list1) (flatten_list (cdr list1)))]\n    [else (append (flatten_list (car list1)) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond [(empty? list1) empty]\n        [(list? (first list1))\n         (append (flatten_list (first list1)) (flatten_list (rest list1)))]\n        [else (cons (first list1) (flatten_list (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1666123866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(empty? list1) empty]\n    [(list? (first list1))\n     (append (flatten_list (first list1)) (flatten_list (rest list1)))]\n    [else (cons (first list1) (flatten_list (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(empty? list1) empty]\n    [(list? (first list1))\n     (append (flatten_list (first list1))\n             (flatten_list (rest list1)))]\n    [else (cons (first list1)\n                (flatten_list (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1))\n     (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1))\n     (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(not (list? (car list1))) (cons (car list1) (flatten_list (cdr list1)))]\n    [else (append (flatten_list (car list1)) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(not (list? (car list1))) (cons (car list1) (flatten_list (cdr list1)))]\n    [else (append (flatten_list (car list1)) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(empty? list1) empty]\n    [(list? (first list1)) (append (flatten_list (first list1)) (flatten_list (rest list1)))]\n    [else (cons (first list1) (flatten_list (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond [(empty? list1) empty]\n        [(list? (first list1))\n         (append (flatten_list (first list1))\n                 (flatten_list (rest list1)))]\n        [else (cons (first list1) (flatten_list (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(empty? list1) empty]\n    [(list? (first list1))\n     (append (flatten_list (first list1)) (flatten_list (rest list1)))]\n    [else (cons (first list1) (flatten_list (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond ((null? list1) '())\n        ((list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1))))\n        (else (cons (car list1) (flatten_list (cdr list1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1666123866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(not (pair? list1)) list1]\n    [(and (pair? list1) (pair? (car list1)))\n     (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1666123866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond [(null? list1) '()]\n        [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n        [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1666123866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(empty? list1) empty]\n    [(list? (first list1))\n     (append (flatten_list (first list1)) (flatten_list (rest list1)))]\n    [else (cons (first list1) (flatten_list (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(empty? list1) empty]\n    [(list? (first list1)) (append (flatten_list (first list1)) (flatten_list (rest list1)))]\n    [else (cons (first list1) (flatten_list (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(empty? list1) empty]\n    [(list? (first list1))\n     (append (flatten_list (first list1))\n             (flatten_list (rest list1)))]\n    [else\n     (cons (first list1)\n           (flatten_list (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1))\n     (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(empty? list1) empty]\n    [(list? (first list1)) (append (flatten_list (first list1)) (flatten_list (rest list1)))]\n    [else (cons (first list1) (flatten_list (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond [(null? list1) '()]\n        [(list? (car list1))\n         (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n        [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(empty? list1) empty]\n    [(list? (first list1))\n     (append (flatten_list (first list1)) (flatten_list (rest list1)))]\n    [else (cons (first list1) (flatten_list (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(empty? list1) empty]\n    [(list? (first list1))\n     (append (flatten_list (first list1)) (flatten_list (rest list1)))]\n    [else\n     (cons (first list1) (flatten_list (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1666123866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]\n    [(list? (car list1)) (append (flatten_list (car list1)) (flatten_list (cdr list1)))]\n    [else (cons (car list1) (flatten_list (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-equal? (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120))\n    (check-equal? (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9))\n))\n\n(test-humaneval)",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}