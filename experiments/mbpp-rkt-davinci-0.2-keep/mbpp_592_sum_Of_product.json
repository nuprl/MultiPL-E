{
  "name": "mbpp_592_sum_Of_product",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to find the sum of the product of consecutive binomial co-efficients.\n(define (sum_Of_product n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_592_sum_Of_product.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_Of_product))\n    (check-equal? (candidate 3) 15)\n    (check-equal? (candidate 4) 56)\n    (check-equal? (candidate 1) 1)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k sum)\n    (if (= k n)\n        sum\n        (sum_Of_product_iter n (+ k 1) (+ sum (* (binomial n k) (binomial n (+ k 1)))))))\n  (sum_Of_product_iter n 1 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k)\n    (if (= k n)\n        (binomial n k)\n        (+ (binomial n k) (sum_Of_product_iter n (+ k 1)))))\n  (sum_Of_product_iter n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_of_product_helper n k)\n    (if (= k n)\n        0\n        (+ (* (binomial n k) (binomial n (+ k 1))) (sum_of_product_helper n (+ k 1)))))\n  (sum_of_product_helper n 0))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k)\n    (if (= k n)\n        (binomial n k)\n        (+ (binomial n k) (sum_Of_product_iter n (+ k 1)))))\n  (sum_Of_product_iter n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k sum)\n    (if (= k n)\n        sum\n        (sum_Of_product_iter n (+ k 1) (+ (* (binomial n k) (binomial n (+ k 1))) sum))))\n  (sum_Of_product_iter n 0 0))\n",
    "  (define (binomial n k)\n    (if (= k 0)\n        1\n        (* (/ n k) (binomial (- n 1) (- k 1)))))\n  (define (sum_Of_product_iter n k)\n    (if (= k n)\n        (binomial n k)\n        (+ (binomial n k) (sum_Of_product_iter n (+ k 1)))))\n  (sum_Of_product_iter n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial-coefficient n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum-of-product-helper n k)\n    (if (= k n)\n        (binomial-coefficient n k)\n        (+ (binomial-coefficient n k) (sum-of-product-helper n (+ k 1)))))\n  (sum-of-product-helper n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k)\n    (if (= k n)\n        (binomial n k)\n        (+ (binomial n k) (sum_Of_product_iter n (+ k 1)))))\n  (sum_Of_product_iter n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial_coefficient n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_of_product_helper n k)\n    (if (= k n)\n        (binomial_coefficient n k)\n        (+ (binomial_coefficient n k) (sum_of_product_helper n (+ k 1)))))\n  (sum_of_product_helper n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n i)\n    (if (= i n)\n        (binomial n i)\n        (+ (binomial n i) (sum_Of_product_iter n (+ i 1)))))\n  (sum_Of_product_iter n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_of_product_helper n k)\n    (if (= k n)\n        (binomial n k)\n        (+ (binomial n k) (sum_of_product_helper n (+ k 1)))))\n  (sum_of_product_helper n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k)\n    (if (= k n)\n        (binomial n k)\n        (+ (binomial n k) (sum_Of_product_iter n (+ k 1)))))\n  (sum_Of_product_iter n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k)\n    (if (= k n)\n        (binomial n k)\n        (+ (binomial n k) (sum_Of_product_iter n (+ k 1)))))\n  (sum_Of_product_iter n 0))\n",
    "  (define (fact n)\n    (if (= n 0)\n        1\n        (* n (fact (- n 1)))))\n  (define (binomial n k)\n    (/ (fact n) (* (fact k) (fact (- n k)))))\n  (define (sum_of_product_helper n k)\n    (if (= k 1)\n        (binomial n k)\n        (+ (binomial n k) (sum_of_product_helper n (- k 1)))))\n  (sum_of_product_helper n n))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_of_product_helper n k)\n    (if (= k n)\n        (binomial n k)\n        (+ (binomial n k) (sum_of_product_helper n (+ k 1)))))\n  (sum_of_product_helper n 0))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k)\n    (if (= k n)\n        (binomial n k)\n        (+ (binomial n k) (sum_Of_product_iter n (+ k 1)))))\n  (sum_Of_product_iter n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k)\n    (if (= k n)\n        (binomial n k)\n        (+ (binomial n k) (sum_Of_product_iter n (+ k 1)))))\n  (sum_Of_product_iter n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k)\n    (if (= k 0)\n        0\n        (+ (* (binomial n k) (binomial n (- k 1))) (sum_Of_product_iter n (- k 1)))))\n  (sum_Of_product_iter n n))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial_coefficient n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_of_product_helper n k)\n    (if (= k 0)\n        0\n        (+ (binomial_coefficient n k) (sum_of_product_helper n (- k 1)))))\n  (sum_of_product_helper n n))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k sum)\n    (if (= k n)\n        sum\n        (sum_Of_product_iter n (+ k 1) (+ sum (* (binomial n k) (binomial n (+ k 1)))))))\n  (sum_Of_product_iter n 0 0))\n"
  ]
}