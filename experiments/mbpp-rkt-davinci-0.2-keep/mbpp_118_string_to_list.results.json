{
  "name": "mbpp_118_string_to_list",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_118_string_to_list.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (regexp-split #px\"\\\\s+\" string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (regexp-split #px\"\\\\s+\" string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (regexp-split #px\"\\\\s+\" string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (regexp-split #rx\" \" string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (regexp-split #rx\" \" string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (regexp-split #px\"\\\\s+\" string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (regexp-split #px\"\\\\s+\" string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (regexp-split #px\"\\\\s+\" string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (regexp-split #px\"\\\\s+\" string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (regexp-split #rx\" \" string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (regexp-split #px\"\\\\s+\" string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (regexp-split #rx\" \" string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (regexp-split #rx\" \" string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (regexp-split #px\"\\\\s+\" string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (regexp-split #rx\" \" string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (regexp-match* #px\"\\\\S+\" string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (regexp-split #rx\" \" string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (regexp-split #px\"\\\\s+\" string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (regexp-split #rx\" \" string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (regexp-split #rx\" \" string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (regexp-split #px\"\\\\s+\" string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (regexp-split #rx\" \" string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (regexp-split #rx\" \" string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (regexp-split #px\"\\\\s+\" string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (regexp-split #rx\" \" string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (regexp-split #rx\" \" string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (string-split string #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqw8kwhis.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    }
  ]
}