{
  "name": "mbpp_94_index_minimum",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n(define (index_minimum test_list)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_94_index_minimum.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond\n    [(empty? test_list) empty]\n    [(null? (cdr test_list)) (car test_list)]\n    [else (let* ([first (car test_list)]\n                 [second (cadr test_list)]\n                 [first-val (cadr first)]\n                 [second-val (cadr second)])\n             (if (< first-val second-val)\n                 first\n                 second))]))\n",
    "  (let ((min_index 0)\n        (min_value (cadr (car test_list))))\n    (for ([(index value) test_list])\n      (when (< value min_value)\n        (set! min_index index)\n        (set! min_value value)))\n    min_index))\n",
    "  (if (null? test_list)\n      #f\n      (let ([min_value (apply min (map second test_list))])\n        (first (find (lambda (x) (= (second x) min_value)) test_list)))))\n",
    "  (let ([min_index 0]\n        [min_value (second (list-ref test_list 0))])\n    (for ([i (in-range (length test_list))])\n      (let ([value (second (list-ref test_list i))])\n        (when (< value min_value)\n          (set! min_index i)\n          (set! min_value value))))\n    (first (list-ref test_list min_index))))\n",
    "  (cond\n    [(empty? test_list) (error \"Empty list\")]\n    [else (index_minimum_helper test_list (first test_list) 0)]))\n",
    "  (cond [(empty? test_list) #f]\n        [else\n         (define min_index (index_minimum (rest test_list)))\n         (cond [(empty? min_index) (first test_list)]\n               [(< (second (first test_list)) (second min_index)) (first test_list)]\n               [else min_index])]))\n",
    "  (let loop ([test_list test_list]\n             [min_index 0]\n             [min_value (second (car test_list))])\n    (if (null? test_list)\n        min_index\n        (let ([current_value (second (car test_list))])\n          (if (< current_value min_value)\n              (loop (cdr test_list)\n                    (add1 min_index)\n                    current_value)\n              (loop (cdr test_list)\n                    min_index\n                    min_value))))))\n",
    "  (letrec ([min-index (lambda (test_list)\n                        (if (null? test_list)\n                            0\n                            (let ([min-index (min-index (cdr test_list))])\n                              (if (< (cadr (car test_list)) (cadr (list-ref test_list min-index)))\n                                  0\n                                  (+ 1 min-index)))))])\n    (list-ref test_list (min-index test_list))))\n",
    "  (let loop ([test_list test_list]\n             [min_index 0]\n             [min_value (second (car test_list))])\n    (cond [(null? test_list) min_index]\n          [(< (second (car test_list)) min_value)\n           (loop (cdr test_list)\n                 (add1 min_index)\n                 (second (car test_list)))]\n          [else (loop (cdr test_list)\n                      min_index\n                      min_value)])))\n",
    "  (cond\n    [(empty? test_list) #f]\n    [(null? (rest test_list)) (first test_list)]\n    [else\n     (let* ([first_tuple (first test_list)]\n            [first_value (first first_tuple)]\n            [first_index (second first_tuple)]\n            [rest_list (rest test_list)]\n            [rest_tuple (index_minimum rest_list)]\n            [rest_value (first rest_tuple)]\n            [rest_index (second rest_tuple)])\n       (if (< first_index rest_index)\n           first_tuple\n           rest_tuple))]))\n",
    "  (cond\n    [(empty? test_list) (error \"empty list\")]\n    [(empty? (rest test_list)) (first test_list)]\n    [else\n     (let* ([first_tuple (first test_list)]\n            [rest_tuple (index_minimum (rest test_list))])\n       (if (< (second first_tuple) (second rest_tuple))\n           first_tuple\n           rest_tuple))]))\n",
    "  (let loop ([test_list test_list]\n             [min_index 0]\n             [min_value (second (car test_list))])\n    (cond [(null? test_list) min_index]\n          [else (let ([current_value (second (car test_list))])\n                  (if (< current_value min_value)\n                      (loop (cdr test_list)\n                            (add1 min_index)\n                            current_value)\n                      (loop (cdr test_list)\n                            min_index\n                            min_value)))])))\n",
    "  (cond\n    [(empty? test_list) (error \"List is empty\")]\n    [else (index_minimum_helper test_list (first test_list) 0)]))\n",
    "  (cond\n    [(empty? test_list) #f]\n    [(empty? (rest test_list)) (first test_list)]\n    [else\n     (let* ([first_tuple (first test_list)]\n            [first_tuple_second (second first_tuple)]\n            [rest_tuple (index_minimum (rest test_list))]\n            [rest_tuple_second (second rest_tuple)])\n       (if (< first_tuple_second rest_tuple_second)\n           first_tuple\n           rest_tuple))]))\n",
    "  (cond\n    [(empty? test_list) empty]\n    [(= (length test_list) 1) (first test_list)]\n    [else\n     (let*\n         ([first_tuple (first test_list)]\n          [second_tuple (first (rest test_list))]\n          [first_tuple_second_value (second first_tuple)]\n          [second_tuple_second_value (second second_tuple)])\n       (if (< first_tuple_second_value second_tuple_second_value)\n           first_tuple\n           (index_minimum (rest test_list))))]))\n",
    "  (cond [(empty? test_list) empty]\n        [else (let* ([min_index (index_minimum (rest test_list))]\n                     [min_value (if (empty? min_index) empty (second min_index))]\n                     [current_index (first test_list)]\n                     [current_value (second current_index)])\n                (if (empty? min_index)\n                    current_index\n                    (if (< current_value min_value)\n                        current_index\n                        min_index)))]))\n",
    "  (cond\n    [(empty? test_list) #f]\n    [else\n     (let* ([min_val (apply min (map second test_list))]\n            [min_index (index-of min_val test_list)]\n            [min_tuple (list-ref test_list min_index)])\n       (first min_tuple))]))\n",
    "  (cond\n    [(empty? test_list) (error \"empty list\")]\n    [(null? (cdr test_list)) (car (car test_list))]\n    [else\n     (let* ([min_index (index_minimum (cdr test_list))]\n            [min_value (cadr (list-ref test_list min_index))]\n            [current_index (add1 (length test_list))]\n            [current_value (cadr (list-ref test_list current_index))])\n       (if (< current_value min_value)\n           current_index\n           min_index))]))\n",
    "  (cond\n    [(empty? test_list) (error \"empty list\")]\n    [else (index_minimum_helper test_list (first test_list) 0)]))\n",
    "  (cond\n    [(empty? test_list) (error \"Empty list\")]\n    [(empty? (rest test_list)) (first test_list)]\n    [else\n     (let* ([first_tuple (first test_list)]\n            [first_value (first first_tuple)]\n            [first_index (second first_tuple)]\n            [rest_list (rest test_list)]\n            [rest_tuple (index_minimum rest_list)]\n            [rest_value (first rest_tuple)]\n            [rest_index (second rest_tuple)])\n       (cond\n         [(< first_index rest_index) first_tuple]\n         [else rest_tuple]))]))\n"
  ]
}