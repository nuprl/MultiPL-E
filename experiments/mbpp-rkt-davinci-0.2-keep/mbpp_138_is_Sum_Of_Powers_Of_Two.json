{
  "name": "mbpp_138_is_Sum_Of_Powers_Of_Two",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n(define (is_Sum_Of_Powers_Of_Two n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_138_is_Sum_Of_Powers_Of_Two.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sum_Of_Powers_Of_Two))\n    (check-equal? (candidate 10) #t)\n    (check-equal? (candidate 7) #f)\n    (check-equal? (candidate 14) #t)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n sum)\n    (cond\n      [(= n sum) #t]\n      [(< n sum) #f]\n      [else\n       (or (is_Sum_Of_Powers_Of_Two_Helper n (+ sum (expt 2 (floor (log n 2)))))\n           (is_Sum_Of_Powers_Of_Two_Helper n (+ sum (expt 2 (floor (log n 2) - 1)))))]))\n  (is_Sum_Of_Powers_Of_Two_Helper n 0))\n",
    "  (define (helper n result)\n    (cond\n      [(= n 0) result]\n      [(= n 1) (cons 1 result)]\n      [(= (remainder n 2) 0) (helper (/ n 2) (cons 2 result))]\n      [else (helper (- n 1) (cons 1 result))]))\n  (helper n '()))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #t]\n      [(= n 2) #t]\n      [(= n 3) #f]\n      [(= n 4) #t]\n      [(= n 5) #f]\n      [(= n 6) #f]\n      [(= n 7) #f]\n      [(= n 8) #t]\n      [(= n 9) #f]\n      [(= n 10) #f]\n      [(= n 11) #f]\n      [(= n 12) #f]\n      [(= n 13) #f]\n      [(= n 14) #f]\n      [(= n 15) #f]\n      [(= n 16) #t]\n      [(= n 17) #f]\n      [(= n 18) #f]\n      [(= n 19) #f]\n      [(= n 20) #f]\n      [(= n 21) #f]\n      [(= n 22) #f]\n      [(= n 23) #f]\n      [(= n 24) #f]\n      [(= n 25) #f]\n      [(= n 26) #f]\n      [(= n 27) #f]\n      [(= n 28) #f]\n      [(= n 29) #f]\n      [(= n 30) #f]\n      [(= n 31) #f]\n      [(= n 32) #t]\n      [(= n 33) #f]\n      [(= n 34) #f]\n      [(= n 35) #f]\n      [(= n 36) #f]\n      [(= n 37) #f]\n      [(= n 38) #f]\n      [(= n 39) #f]\n      [(= n 40) #f]\n      [(= n 41) #f]\n      [(= n 42) #f]\n      [(= n 43) #f]\n      [(= n 44) #f]\n      [(= n 45) #f]\n      [(= n 46) #f]\n      [(= n 47) #f]\n      [(= n 48)",
    "  (cond\n    [(= n 0) #f]\n    [(= n 1) #t]\n    [else\n     (let loop ([n n])\n       (cond\n         [(= n 0) #t]\n         [(= n 1) #t]\n         [(= n 2) #t]\n         [(= n 3) #f]\n         [(= n 4) #t]\n         [(= n 5) #f]\n         [(= n 6) #f]\n         [(= n 7) #f]\n         [(= n 8) #t]\n         [(= n 9) #f]\n         [(= n 10) #f]\n         [(= n 11) #f]\n         [(= n 12) #f]\n         [(= n 13) #f]\n         [(= n 14) #f]\n         [(= n 15) #f]\n         [(= n 16) #t]\n         [else\n          (loop (- n 16))]))]))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_helper n i)\n    (cond\n      [(= n 0) #t]\n      [(= n (expt 2 i)) #t]\n      [(&gt; n (expt 2 i)) (or (is_Sum_Of_Powers_Of_Two_helper (- n (expt 2 i)) (+ i 1))\n                             (is_Sum_Of_Powers_Of_Two_helper n (+ i 1)))]\n      [else #f]))\n  (is_Sum_Of_Powers_Of_Two_helper n 0))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n i)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #f]\n      [(= n (expt 2 i)) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 1)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 2)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 3)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 4)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 5)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 6)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 7)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 8)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 9)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 10)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 11)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 12)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 13)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 14)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 15)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 16)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 17)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 18)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 19)))) #t]\n      [(= n (+ (expt 2 i) (expt",
    "  (let loop ([n n] [i 0])\n    (cond [(= n 0) #t]\n          [(= n (expt 2 i)) #t]\n          [(&lt; n (expt 2 i)) #f]\n          [else (loop (- n (expt 2 i)) (+ i 1))])))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_iter n i)\n    (cond\n      [(= n 0) #t]\n      [(= n (expt 2 i)) #t]\n      [(< n (expt 2 i)) (is_Sum_Of_Powers_Of_Two_iter n (- i 1))]\n      [else (or (is_Sum_Of_Powers_Of_Two_iter (- n (expt 2 i)) (- i 1))\n                (is_Sum_Of_Powers_Of_Two_iter n (- i 1)))]))\n  (is_Sum_Of_Powers_Of_Two_iter n (floor (log n 2))))\n",
    "  (if (= n 0)\n      #f\n      (let loop ((n n) (i 1))\n        (if (= n 1)\n            #t\n            (if (= (modulo n 2) 1)\n                (loop (quotient n 2) (+ i 1))\n                #f)))))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n p)\n    (cond\n      [(= n 0) #t]\n      [(= n p) #t]\n      [(< n p) #f]\n      [else (or (is_Sum_Of_Powers_Of_Two_Helper (- n p) p)\n                (is_Sum_Of_Powers_Of_Two_Helper n (* p 2)))]))\n  (is_Sum_Of_Powers_Of_Two_Helper n 1))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n acc)\n    (if (= n 0)\n        acc\n        (let ([m (logand n (- n 1))])\n          (is_Sum_Of_Powers_Of_Two_Helper (logand n (- n 1)) (cons (logand n (- n 1)) acc)))))\n  (is_Sum_Of_Powers_Of_Two_Helper n '()))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n p)\n    (if (= n 0)\n        #t\n        (if (= n (expt 2 p))\n            #t\n            (if (&lt; n (expt 2 p))\n                (is_Sum_Of_Powers_Of_Two_Helper n (- p 1))\n                (is_Sum_Of_Powers_Of_Two_Helper (- n (expt 2 p)) p)))))\n  (is_Sum_Of_Powers_Of_Two_Helper n (floor (log n 2))))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n sum)\n    (cond\n      [(= n 0) #t]\n      [(= n sum) #t]\n      [(> n sum) (is_Sum_Of_Powers_Of_Two_Helper n (+ sum (expt 2 (floor (log n 2)))))])\n      [else #f]))\n  (is_Sum_Of_Powers_Of_Two_Helper n 0))\n",
    "  (define (is_Sum_Of_Powers_Of_Two-iter n sum)\n    (cond\n      [(= n 0) #t]\n      [(= n sum) #t]\n      [(< n sum) #f]\n      [else (is_Sum_Of_Powers_Of_Two-iter (- n sum) (+ sum (expt 2 (floor (log n sum)))))]))\n  (is_Sum_Of_Powers_Of_Two-iter n 1))\n",
    "  (let loop ((n n) (i 0))\n    (cond ((= n 0) #t)\n          ((< n 0) #f)\n          ((= (remainder n 2) 1)\n           (loop (- n (expt 2 i)) (+ i 1)))\n          (else (loop (/ n 2) (+ i 1))))))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #t]\n      [(= n 2) #t]\n      [(= n 3) #f]\n      [(= n 4) #t]\n      [(= n 5) #f]\n      [(= n 6) #f]\n      [(= n 7) #f]\n      [(= n 8) #t]\n      [(= n 9) #f]\n      [(= n 10) #f]\n      [(= n 11) #f]\n      [(= n 12) #f]\n      [(= n 13) #f]\n      [(= n 14) #f]\n      [(= n 15) #f]\n      [(= n 16) #t]\n      [(= n 17) #f]\n      [(= n 18) #f]\n      [(= n 19) #f]\n      [(= n 20) #f]\n      [(= n 21) #f]\n      [(= n 22) #f]\n      [(= n 23) #f]\n      [(= n 24) #f]\n      [(= n 25) #f]\n      [(= n 26) #f]\n      [(= n 27) #f]\n      [(= n 28) #f]\n      [(= n 29) #f]\n      [(= n 30) #f]\n      [(= n 31) #f]\n      [(= n 32) #t]\n      [(= n 33) #f]\n      [(= n 34) #f]\n      [(= n 35) #f]\n      [(= n 36) #f]\n      [(= n 37) #f]\n      [(= n 38) #f]\n      [(= n 39) #f]\n      [(= n 40) #f]\n      [(= n 41) #f]\n      [(= n 42) #f]\n      [(= n 43) #f]\n      [(= n 44) #f]\n      [(= n 45) #f]\n      [(= n 46) #f]\n      [(= n 47) #f]\n      [(= n 48)",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #t]\n      [(= n 2) #t]\n      [(= n 3) #f]\n      [(= n 4) #t]\n      [(= n 5) #f]\n      [(= n 6) #f]\n      [(= n 7) #f]\n      [(= n 8) #t]\n      [(= n 9) #f]\n      [(= n 10) #f]\n      [(= n 11) #f]\n      [(= n 12) #f]\n      [(= n 13) #f]\n      [(= n 14) #f]\n      [(= n 15) #f]\n      [(= n 16) #t]\n      [(= n 17) #f]\n      [(= n 18) #f]\n      [(= n 19) #f]\n      [(= n 20) #f]\n      [(= n 21) #f]\n      [(= n 22) #f]\n      [(= n 23) #f]\n      [(= n 24) #f]\n      [(= n 25) #f]\n      [(= n 26) #f]\n      [(= n 27) #f]\n      [(= n 28) #f]\n      [(= n 29) #f]\n      [(= n 30) #f]\n      [(= n 31) #f]\n      [(= n 32) #t]\n      [(= n 33) #f]\n      [(= n 34) #f]\n      [(= n 35) #f]\n      [(= n 36) #f]\n      [(= n 37) #f]\n      [(= n 38) #f]\n      [(= n 39) #f]\n      [(= n 40) #f]\n      [(= n 41) #f]\n      [(= n 42) #f]\n      [(= n 43) #f]\n      [(= n 44) #f]\n      [(= n 45) #f]\n      [(= n 46) #f]\n      [(= n 47) #f]\n      [(= n 48)",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n i)\n    (if (= n 0)\n        #t\n        (if (= n (expt 2 i))\n            #t\n            (if (&lt; n (expt 2 i))\n                (is_Sum_Of_Powers_Of_Two_Helper n (- i 1))\n                (is_Sum_Of_Powers_Of_Two_Helper (- n (expt 2 i)) (- i 1))))))\n  (is_Sum_Of_Powers_Of_Two_Helper n (floor (log n 2))))\n",
    "  (if (= n 0)\n      #f\n      (if (= n 1)\n          #t\n          (if (= n 2)\n              #t\n              (if (= n 3)\n                  #f\n                  (if (= n 4)\n                      #t\n                      (if (= n 5)\n                          #f\n                          (if (= n 6)\n                              #f\n                              (if (= n 7)\n                                  #f\n                                  (if (= n 8)\n                                      #t\n                                      (if (= n 9)\n                                          #f\n                                          (if (= n 10)\n                                              #f\n                                              (if (= n 11)\n                                                  #f\n                                                  (if (= n 12)\n                                                      #f\n                                                      (if (= n 13)\n                                                          #f\n                                                          (if (= n 14)\n                                                              #f\n                                                              (if (= n 15)\n                                                                  #f\n                                                                  (if (= n 16)\n                                                                      #t\n                                                                      (if (= n 17)\n                                                                          #f\n                                                                          (if (= n 18)\n                                                                              #f\n                                                                              (if (= n 19)\n                                                                                  #f\n                                                                                  (if (= n 20)\n                                                                                      #f\n                                                                                      (if (= n 21)\n                                                                                          #f\n                                                                                          (if (= n 22)\n                                                                                              #f\n                                                                                              (if (= n 23)\n                                                                                                  #f\n                                                                                                  (if (= n 24)\n                                                                                                      #f\n                                                                                                      (if (= n 25)\n                                                                                                          #f\n                                                                                                          (if (= n 26)\n                                                                                                              #f\n                                                                                                              (if (= n 27)\n                                                                                                                  #f\n                                                                                                                  (if (= n 28)\n                                                                                                                      #f\n                ",
    "  (cond\n    [(= n 0) #f]\n    [(= n 1) #t]\n    [else (is_Sum_Of_Powers_Of_Two (- n (expt 2 (floor (log n 2)))))]))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_iter n i)\n    (cond\n      [(= n 0) #t]\n      [(= n (expt 2 i)) #t]\n      [(< n (expt 2 i)) (is_Sum_Of_Powers_Of_Two_iter n (- i 1))]\n      [else (or (is_Sum_Of_Powers_Of_Two_iter (- n (expt 2 i)) i)\n                (is_Sum_Of_Powers_Of_Two_iter n (- i 1)))]))\n  (is_Sum_Of_Powers_Of_Two_iter n (floor (log n 2))))\n",
    "  (if (= n 0)\n      #f\n      (let loop ((n n) (i 0))\n        (if (= n 0)\n            #t\n            (if (= (modulo n 2) 1)\n                (loop (quotient n 2) (+ i 1))\n                (loop (quotient n 2) (+ i 1)))))))\n",
    "  (if (= n 0)\n      #f\n      (let loop ((n n) (i 0))\n        (if (= n 0)\n            #t\n            (if (= (modulo n 2) 1)\n                (loop (quotient n 2) (+ i 1))\n                (loop (quotient n 2) (+ i 1)))))))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n p)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #f]\n      [(= n (expt 2 p)) #t]\n      [(= n (+ (expt 2 p) (is_Sum_Of_Powers_Of_Two_Helper (- n (expt 2 p)) p))) #t]\n      [else (is_Sum_Of_Powers_Of_Two_Helper n (+ p 1))]))\n  (is_Sum_Of_Powers_Of_Two_Helper n 0))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n i)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #f]\n      [(= n (expt 2 i)) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 1)))) #t]\n      [(> n (expt 2 i)) (is_Sum_Of_Powers_Of_Two_Helper (- n (expt 2 i)) (+ i 1))]\n      [else (is_Sum_Of_Powers_Of_Two_Helper n (+ i 1))]))\n  (is_Sum_Of_Powers_Of_Two_Helper n 0))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_iter n i)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #f]\n      [(= n (expt 2 i)) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 1)))) #t]\n      [else (is_Sum_Of_Powers_Of_Two_iter n (+ i 1))]))\n  (is_Sum_Of_Powers_Of_Two_iter n 0))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_iter n sum)\n    (cond\n      [(= n 0) #t]\n      [(= n sum) #t]\n      [(< n sum) #f]\n      [else (is_Sum_Of_Powers_Of_Two_iter (- n (expt 2 (floor (log n 2)))) sum)]))\n  (is_Sum_Of_Powers_Of_Two_iter n 0))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_iter n p)\n    (cond\n      [(= n 0) #t]\n      [(= n p) #t]\n      [(= n (+ p (is_Sum_Of_Powers_Of_Two_iter (- n p) p))) #t]\n      [else #f]))\n  (is_Sum_Of_Powers_Of_Two_iter n 1))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n acc)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) (if (member 1 acc) #f #t)]\n      [(= n 2) (if (member 2 acc) #f #t)]\n      [(= n 3) (if (member 3 acc) #f #t)]\n      [(= n 4) (if (member 4 acc) #f #t)]\n      [(= n 5) (if (member 5 acc) #f #t)]\n      [(= n 6) (if (member 6 acc) #f #t)]\n      [(= n 7) (if (member 7 acc) #f #t)]\n      [(= n 8) (if (member 8 acc) #f #t)]\n      [(= n 9) (if (member 9 acc) #f #t)]\n      [(= n 10) (if (member 10 acc) #f #t)]\n      [(= n 11) (if (member 11 acc) #f #t)]\n      [(= n 12) (if (member 12 acc) #f #t)]\n      [(= n 13) (if (member 13 acc) #f #t)]\n      [(= n 14) (if (member 14 acc) #f #t)]\n      [(= n 15) (if (member 15 acc) #f #t)]\n      [(= n 16) (if (member 16 acc) #f #t)]\n      [(= n 17) (if (member 17 acc) #f #t)]\n      [(= n 18) (if (member 18 acc) #f #t)]\n      [(= n 19) (if (member 19 acc) #f #t)]\n      [(= n 20) (if (member 20 acc) #f #t)]\n      [(= n 21) (if (member 21 acc) #f #t)]\n      [(= n 22) (if (member 22 acc) #f #t)]\n      [(= n 23) (if (member 23 acc) #f #t)]\n      [(= n 24) (if (member 24 acc) #f #t)]\n      [(= n 25) (if (member 25 acc) #f #t)]\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n p)\n    (cond [(= n 0) #t]\n          [(= n 1) #f]\n          [(= n p) #t]\n          [(= n (+ p (is_Sum_Of_Powers_Of_Two_Helper (- n p) p))) #t]\n          [else (is_Sum_Of_Powers_Of_Two_Helper n (* p 2))]))\n  (is_Sum_Of_Powers_Of_Two_Helper n 1))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n i)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #f]\n      [(= n (expt 2 i)) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 1)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 2)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 3)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 4)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 5)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 6)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 7)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 8)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 9)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 10)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 11)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 12)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 13)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 14)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 15)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 16)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 17)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 18)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 19)))) #t]\n      [(= n (+ (expt 2 i) (expt",
    "  (define (is_Sum_Of_Powers_Of_Two_helper n i)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #f]\n      [(= n (expt 2 i)) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 1)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 2)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 3)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 4)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 5)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 6)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 7)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 8)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 9)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 10)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 11)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 12)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 13)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 14)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 15)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 16)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 17)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 18)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 19)))) #t]\n      [(= n (+ (expt 2 i) (ex",
    "  (define (is_Sum_Of_Powers_Of_Two_iter n sum)\n    (cond ((= n 0) #t)\n          ((= n sum) #t)\n          ((&lt; n sum) #f)\n          (else (is_Sum_Of_Powers_Of_Two_iter (- n sum) (* 2 sum)))))\n  (is_Sum_Of_Powers_Of_Two_iter n 1))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n sum)\n    (cond\n      [(= n 0) #t]\n      [(= n sum) #t]\n      [(< n sum) #f]\n      [else (is_Sum_Of_Powers_Of_Two_Helper (- n (expt 2 (floor (log n 2)))) sum)]))\n  (is_Sum_Of_Powers_Of_Two_Helper n 0))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Iter n i)\n    (cond\n      [(= n 0) #t]\n      [(= n i) #t]\n      [(= n (+ i (expt 2 (floor (log i))))) (is_Sum_Of_Powers_Of_Two_Iter (- n i) (+ i 1))]\n      [else (is_Sum_Of_Powers_Of_Two_Iter n (+ i 1))]))\n  (is_Sum_Of_Powers_Of_Two_Iter n 1))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_iter n acc)\n    (cond\n      [(= n 0) acc]\n      [(= n 1) (cons 1 acc)]\n      [(= (modulo n 2) 1) (is_Sum_Of_Powers_Of_Two_iter (quotient n 2) (cons 1 acc))]\n      [else (is_Sum_Of_Powers_Of_Two_iter (quotient n 2) acc)]))\n  (is_Sum_Of_Powers_Of_Two_iter n '()))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n i)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #f]\n      [(= n (expt 2 i)) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 1)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 2)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 3)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 4)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 5)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 6)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 7)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 8)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 9)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 10)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 11)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 12)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 13)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 14)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 15)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 16)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 17)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 18)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 19)))) #t]\n      [(= n (+ (expt 2 i) (expt",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n i)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #f]\n      [(= n (expt 2 i)) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 1)))) #t]\n      [else (is_Sum_Of_Powers_Of_Two_Helper n (- i 1))]))\n  (is_Sum_Of_Powers_Of_Two_Helper n (floor (log n 2))))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_helper n i)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #t]\n      [(= n 2) #t]\n      [(= n 3) #f]\n      [(= n 4) #t]\n      [(= n 5) #f]\n      [(= n 6) #f]\n      [(= n 7) #f]\n      [(= n 8) #t]\n      [(= n 9) #f]\n      [(= n 10) #f]\n      [(= n 11) #f]\n      [(= n 12) #f]\n      [(= n 13) #f]\n      [(= n 14) #f]\n      [(= n 15) #f]\n      [(= n 16) #t]\n      [(= n 17) #f]\n      [(= n 18) #f]\n      [(= n 19) #f]\n      [(= n 20) #f]\n      [(= n 21) #f]\n      [(= n 22) #f]\n      [(= n 23) #f]\n      [(= n 24) #f]\n      [(= n 25) #f]\n      [(= n 26) #f]\n      [(= n 27) #f]\n      [(= n 28) #f]\n      [(= n 29) #f]\n      [(= n 30) #f]\n      [(= n 31) #f]\n      [(= n 32) #t]\n      [(= n 33) #f]\n      [(= n 34) #f]\n      [(= n 35) #f]\n      [(= n 36) #f]\n      [(= n 37) #f]\n      [(= n 38) #f]\n      [(= n 39) #f]\n      [(= n 40) #f]\n      [(= n 41) #f]\n      [(= n 42) #f]\n      [(= n 43) #f]\n      [(= n 44) #f]\n      [(= n 45) #f]\n      [(= n 46) #f]\n      [(= n 47) #f]\n      [(= n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #t]\n      [(= n 2) #t]\n      [(= n 3) #f]\n      [(= n 4) #t]\n      [(= n 5) #f]\n      [(= n 6) #f]\n      [(= n 7) #f]\n      [(= n 8) #t]\n      [(= n 9) #f]\n      [(= n 10) #f]\n      [(= n 11) #f]\n      [(= n 12) #f]\n      [(= n 13) #f]\n      [(= n 14) #f]\n      [(= n 15) #f]\n      [(= n 16) #t]\n      [(= n 17) #f]\n      [(= n 18) #f]\n      [(= n 19) #f]\n      [(= n 20) #f]\n      [(= n 21) #f]\n      [(= n 22) #f]\n      [(= n 23) #f]\n      [(= n 24) #f]\n      [(= n 25) #f]\n      [(= n 26) #f]\n      [(= n 27) #f]\n      [(= n 28) #f]\n      [(= n 29) #f]\n      [(= n 30) #f]\n      [(= n 31) #f]\n      [(= n 32) #t]\n      [(= n 33) #f]\n      [(= n 34) #f]\n      [(= n 35) #f]\n      [(= n 36) #f]\n      [(= n 37) #f]\n      [(= n 38) #f]\n      [(= n 39) #f]\n      [(= n 40) #f]\n      [(= n 41) #f]\n      [(= n 42) #f]\n      [(= n 43) #f]\n      [(= n 44) #f]\n      [(= n 45) #f]\n      [(= n 46) #f]\n      [(= n 47) #f]\n      [(= n 48)",
    "  (define (is_Sum_Of_Powers_Of_Two_iter n p)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #f]\n      [(= n p) #t]\n      [(> n p) (is_Sum_Of_Powers_Of_Two_iter (- n p) (* 2 p))]\n      [else (is_Sum_Of_Powers_Of_Two_iter n (* 2 p))]))\n  (is_Sum_Of_Powers_Of_Two_iter n 1))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_iter n i)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #f]\n      [(= n (expt 2 i)) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- n (expt 2 i))))) #t]\n      [else (is_Sum_Of_Powers_Of_Two_iter n (+ i 1))]))\n  (is_Sum_Of_Powers_Of_Two_iter n 0))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_iter n acc)\n    (cond\n      [(= n 0) acc]\n      [(= n 1) (cons 1 acc)]\n      [(= (modulo n 2) 1) (is_Sum_Of_Powers_Of_Two_iter (quotient n 2) (cons 1 acc))]\n      [else (is_Sum_Of_Powers_Of_Two_iter (quotient n 2) acc)]))\n  (is_Sum_Of_Powers_Of_Two_iter n '()))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_iter n i)\n    (cond\n      [(= n 0) #t]\n      [(= n (expt 2 i)) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 1)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 2)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 3)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 4)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 5)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 6)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 7)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 8)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 9)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 10)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 11)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 12)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 13)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 14)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 15)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 16)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 17)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 18)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 19)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 20)))) #t]\n     ",
    "  (cond\n    [(= n 0) #f]\n    [(= n 1) #t]\n    [(= n 2) #t]\n    [else\n     (let loop ([n n])\n       (cond\n         [(= n 0) #t]\n         [(= n 1) #t]\n         [(= n 2) #t]\n         [(= n 3) #f]\n         [(= n 4) #t]\n         [(= n 5) #f]\n         [(= n 6) #f]\n         [(= n 7) #f]\n         [(= n 8) #t]\n         [(= n 9) #f]\n         [(= n 10) #f]\n         [(= n 11) #f]\n         [(= n 12) #f]\n         [(= n 13) #f]\n         [(= n 14) #f]\n         [(= n 15) #f]\n         [(= n 16) #t]\n         [(= n 17) #f]\n         [(= n 18) #f]\n         [(= n 19) #f]\n         [(= n 20) #f]\n         [(= n 21) #f]\n         [(= n 22) #f]\n         [(= n 23) #f]\n         [(= n 24) #f]\n         [(= n 25) #f]\n         [(= n 26) #f]\n         [(= n 27) #f]\n         [(= n 28) #f]\n         [(= n 29) #f]\n         [(= n 30) #f]\n         [(= n 31) #f]\n         [(= n 32) #t]\n         [(= n 33) #f]\n         [(= n 34) #f]\n         [(= n 35) #f]\n         [(= n 36) #f]\n         [(= n 37) #f]\n         [(= n 38) #f]\n         [(= n 39) #f]\n         [(= n 40) #f]\n         [(= n 41) #f]\n         [(= n 42) #f]\n         [(= n 43) #f]\n         [(= n 44) #f]\n         [(= n 45) #f]\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n i)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #f]\n      [(= n (expt 2 i)) #t]\n      [(< n (expt 2 i)) (is_Sum_Of_Powers_Of_Two_Helper n (- i 1))]\n      [else (or (is_Sum_Of_Powers_Of_Two_Helper (- n (expt 2 i)) i)\n                (is_Sum_Of_Powers_Of_Two_Helper n (- i 1)))]))\n  (is_Sum_Of_Powers_Of_Two_Helper n (floor (log n 2))))\n",
    "  (cond\n    [(zero? n) #f]\n    [(= n 1) #t]\n    [else\n     (let loop ([n n] [i 0])\n       (cond\n         [(zero? n) #f]\n         [(= n 1) #t]\n         [(= n (expt 2 i)) #t]\n         [else (loop (- n (expt 2 i)) (+ i 1))]))]))\n",
    "  (let loop ([n n] [i 0])\n    (cond [(= n 0) #t]\n          [(= n (expt 2 i)) #t]\n          [(< n (expt 2 i)) #f]\n          [else (loop (- n (expt 2 i)) (+ i 1))])))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n sum)\n    (cond ((= n 0) #t)\n          ((= n sum) #t)\n          ((&lt; n sum) #f)\n          (else (is_Sum_Of_Powers_Of_Two_Helper (- n sum) (+ sum (* 2 sum))))))\n  (is_Sum_Of_Powers_Of_Two_Helper n 1))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_helper n i)\n    (cond\n      [(= n 0) #t]\n      [(= n (expt 2 i)) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- n (expt 2 i))))) #t]\n      [else (is_Sum_Of_Powers_Of_Two_helper n (+ i 1))]))\n  (is_Sum_Of_Powers_Of_Two_helper n 0))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_iter n sum)\n    (cond\n      [(= n sum) #t]\n      [(> n sum) (is_Sum_Of_Powers_Of_Two_iter n (+ sum (expt 2 (floor (log n 2)))))])\n      [else #f]))\n  (is_Sum_Of_Powers_Of_Two_iter n 0))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n i)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #t]\n      [(= n 2) #t]\n      [(= n 3) #f]\n      [(= n 4) #t]\n      [(= n 5) #f]\n      [(= n 6) #f]\n      [(= n 7) #f]\n      [(= n 8) #t]\n      [(= n 9) #f]\n      [(= n 10) #f]\n      [(= n 11) #f]\n      [(= n 12) #f]\n      [(= n 13) #f]\n      [(= n 14) #f]\n      [(= n 15) #f]\n      [(= n 16) #t]\n      [(= n 17) #f]\n      [(= n 18) #f]\n      [(= n 19) #f]\n      [(= n 20) #f]\n      [(= n 21) #f]\n      [(= n 22) #f]\n      [(= n 23) #f]\n      [(= n 24) #f]\n      [(= n 25) #f]\n      [(= n 26) #f]\n      [(= n 27) #f]\n      [(= n 28) #f]\n      [(= n 29) #f]\n      [(= n 30) #f]\n      [(= n 31) #f]\n      [(= n 32) #t]\n      [(= n 33) #f]\n      [(= n 34) #f]\n      [(= n 35) #f]\n      [(= n 36) #f]\n      [(= n 37) #f]\n      [(= n 38) #f]\n      [(= n 39) #f]\n      [(= n 40) #f]\n      [(= n 41) #f]\n      [(= n 42) #f]\n      [(= n 43) #f]\n      [(= n 44) #f]\n      [(= n 45) #f]\n      [(= n 46) #f]\n      [(= n 47) #f]\n      [(= n 48",
    "  (define (is_Sum_Of_Powers_Of_Two_iter n i)\n    (if (= n 0)\n        #t\n        (if (= (remainder n 2) 1)\n            (is_Sum_Of_Powers_Of_Two_iter (quotient n 2) (+ i 1))\n            (is_Sum_Of_Powers_Of_Two_iter (quotient n 2) i))))\n  (is_Sum_Of_Powers_Of_Two_iter n 0))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n i)\n    (if (= n 0)\n        #t\n        (if (= n (expt 2 i))\n            #t\n            (if (&lt; n (expt 2 i))\n                (is_Sum_Of_Powers_Of_Two_Helper n (- i 1))\n                (is_Sum_Of_Powers_Of_Two_Helper (- n (expt 2 i)) i)))))\n  (is_Sum_Of_Powers_Of_Two_Helper n (floor (log n 2))))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n acc)\n    (if (zero? n)\n        acc\n        (if (zero? (modulo n 2))\n            (is_Sum_Of_Powers_Of_Two_Helper (quotient n 2) (cons n acc))\n            (is_Sum_Of_Powers_Of_Two_Helper (quotient n 2) acc))))\n  (is_Sum_Of_Powers_Of_Two_Helper n '()))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n m)\n    (cond\n      [(= n 0) #t]\n      [(= n m) #f]\n      [(= n (+ m (expt 2 (log m)))) (is_Sum_Of_Powers_Of_Two_Helper (- n m) m)]\n      [else (is_Sum_Of_Powers_Of_Two_Helper n (+ m 1))]))\n  (is_Sum_Of_Powers_Of_Two_Helper n 1))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_iter n i)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #f]\n      [(= n (* 2 i)) #t]\n      [(= n (+ (* 2 i) 1)) #f]\n      [(> n (* 2 i)) (is_Sum_Of_Powers_Of_Two_iter (- n (* 2 i)) (+ i 1))]\n      [else (is_Sum_Of_Powers_Of_Two_iter n (+ i 1))]))\n  (is_Sum_Of_Powers_Of_Two_iter n 0))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n i)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #t]\n      [(= n (expt 2 i)) #t]\n      [(< n (expt 2 i)) (is_Sum_Of_Powers_Of_Two_Helper n (- i 1))]\n      [else (or (is_Sum_Of_Powers_Of_Two_Helper (- n (expt 2 i)) i) (is_Sum_Of_Powers_Of_Two_Helper n (- i 1)))]))\n  (is_Sum_Of_Powers_Of_Two_Helper n (floor (log n 2))))\n",
    "  (let loop ([n n] [pow 2])\n    (if (= n 0)\n        #t\n        (if (&lt; n pow)\n            (loop n (* pow 2))\n            (loop (- n pow) pow)))))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n)\n    (cond ((= n 0) #t)\n          ((= n 1) #t)\n          ((= n 2) #t)\n          ((= n 3) #f)\n          ((= n 4) #t)\n          ((= n 5) #f)\n          ((= n 6) #f)\n          ((= n 7) #f)\n          ((= n 8) #t)\n          ((= n 9) #f)\n          ((= n 10) #f)\n          ((= n 11) #f)\n          ((= n 12) #f)\n          ((= n 13) #f)\n          ((= n 14) #f)\n          ((= n 15) #f)\n          ((= n 16) #t)\n          (else (is_Sum_Of_Powers_Of_Two_Helper (- n 16)))))\n  (is_Sum_Of_Powers_Of_Two_Helper n))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_helper n)\n    (cond ((= n 0) #t)\n          ((= n 1) #t)\n          ((= n 2) #t)\n          ((= n 3) #f)\n          ((= n 4) #t)\n          ((= n 5) #f)\n          ((= n 6) #f)\n          ((= n 7) #f)\n          ((= n 8) #t)\n          ((= n 9) #f)\n          ((= n 10) #f)\n          ((= n 11) #f)\n          ((= n 12) #f)\n          ((= n 13) #f)\n          ((= n 14) #f)\n          ((= n 15) #f)\n          ((= n 16) #t)\n          ((= n 17) #f)\n          ((= n 18) #f)\n          ((= n 19) #f)\n          ((= n 20) #f)\n          ((= n 21) #f)\n          ((= n 22) #f)\n          ((= n 23) #f)\n          ((= n 24) #f)\n          ((= n 25) #f)\n          ((= n 26) #f)\n          ((= n 27) #f)\n          ((= n 28) #f)\n          ((= n 29) #f)\n          ((= n 30) #f)\n          ((= n 31) #f)\n          ((= n 32) #t)\n          (else (is_Sum_Of_Powers_Of_Two_helper (- n 32)))))\n  (is_Sum_Of_Powers_Of_Two_helper n))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_iter n sum)\n    (cond\n      [(= n 0) #t]\n      [(= n sum) #t]\n      [(< n sum) #f]\n      [else (is_Sum_Of_Powers_Of_Two_iter n (+ sum (expt 2 (floor (log n sum)))))]))\n  (is_Sum_Of_Powers_Of_Two_iter n 1))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n i)\n    (if (= n 0)\n        #t\n        (if (= n 1)\n            #t\n            (if (= n (expt 2 i))\n                #t\n                (if (&lt; n (expt 2 i))\n                    (is_Sum_Of_Powers_Of_Two_Helper n (- i 1))\n                    (is_Sum_Of_Powers_Of_Two_Helper (- n (expt 2 i)) (- i 1)))))))\n  (is_Sum_Of_Powers_Of_Two_Helper n (floor (log n 2))))\n",
    "  (let loop ((n n) (i 0))\n    (cond\n      [(= n 0) #t]\n      [(= n (expt 2 i)) #t]\n      [(< n (expt 2 i)) #f]\n      [else (loop (- n (expt 2 i)) (+ i 1))])))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n sum)\n    (cond\n      [(= n 0) (if (= sum 0) #t #f)]\n      [(= n 1) (if (= sum 1) #t #f)]\n      [(= n 2) (if (= sum 2) #t #f)]\n      [(= n 3) (if (= sum 3) #t #f)]\n      [(= n 4) (if (= sum 4) #t #f)]\n      [(= n 5) (if (= sum 5) #t #f)]\n      [(= n 6) (if (= sum 6) #t #f)]\n      [(= n 7) (if (= sum 7) #t #f)]\n      [(= n 8) (if (= sum 8) #t #f)]\n      [(= n 9) (if (= sum 9) #t #f)]\n      [(= n 10) (if (= sum 10) #t #f)]\n      [(= n 11) (if (= sum 11) #t #f)]\n      [(= n 12) (if (= sum 12) #t #f)]\n      [(= n 13) (if (= sum 13) #t #f)]\n      [(= n 14) (if (= sum 14) #t #f)]\n      [(= n 15) (if (= sum 15) #t #f)]\n      [(= n 16) (if (= sum 16) #t #f)]\n      [(= n 17) (if (= sum 17) #t #f)]\n      [(= n 18) (if (= sum 18) #t #f)]\n      [(= n 19) (if (= sum 19) #t #f)]\n      [(= n 20) (if (= sum 20) #t #f)]\n      [(= n 21) (if (= sum 21) #t #f)]\n      [(= n 22) (if (= sum 22) #t #f)]\n      [(= n 23) (if (= sum 23) #t #f)]\n      [(= n 24) (if (= sum 24) #t #f)]\n      [(= n 25) (if (= sum 25) #t #f)]\n      [(= n 26) (if (= sum 26) #t #f)]",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n i)\n    (cond\n      [(= n 0) #t]\n      [(< n 0) #f]\n      [else\n       (or (is_Sum_Of_Powers_Of_Two_Helper (- n (expt 2 i)) i)\n           (is_Sum_Of_Powers_Of_Two_Helper n (+ i 1)))]))\n  (is_Sum_Of_Powers_Of_Two_Helper n 0))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n i)\n    (if (= n 0)\n        #t\n        (if (= n (expt 2 i))\n            #t\n            (if (&lt; n (expt 2 i))\n                (is_Sum_Of_Powers_Of_Two_Helper n (- i 1))\n                (is_Sum_Of_Powers_Of_Two_Helper (- n (expt 2 i)) (- i 1))))))\n  (is_Sum_Of_Powers_Of_Two_Helper n 31))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_iter n sum)\n    (cond\n      [(= n sum) #t]\n      [(> n sum) (is_Sum_Of_Powers_Of_Two_iter n (+ sum (expt 2 (floor (log n)))))])\n      [else #f]))\n  (is_Sum_Of_Powers_Of_Two_iter n 0))\n",
    "  (let loop ([n n] [i 0])\n    (if (= n 0)\n        #t\n        (if (= (modulo n 2) 1)\n            (loop (quotient n 2) (+ i 1))\n            #f))))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n)\n    (if (zero? n)\n        #f\n        (if (zero? (modulo n 2))\n            (is_Sum_Of_Powers_Of_Two_Helper (quotient n 2))\n            (is_Sum_Of_Powers_Of_Two_Helper (- n 1)))))\n  (if (zero? n)\n      #f\n      (is_Sum_Of_Powers_Of_Two_Helper n)))\n",
    "  (cond\n    [(= n 0) #f]\n    [(= n 1) #t]\n    [(= n 2) #t]\n    [(= n 3) #f]\n    [else (is_Sum_Of_Powers_Of_Two (- n 1))]))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n i)\n    (cond\n      [(= n 0) #t]\n      [(= n (expt 2 i)) #t]\n      [(> n (expt 2 i)) (is_Sum_Of_Powers_Of_Two_Helper (- n (expt 2 i)) (+ i 1))]\n      [else #f]))\n  (is_Sum_Of_Powers_Of_Two_Helper n 0))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_iter n i)\n    (cond ((= n 0) #t)\n          ((= n 1) #f)\n          ((= n (expt 2 i)) #t)\n          ((&lt; n (expt 2 i)) (is_Sum_Of_Powers_Of_Two_iter n (- i 1)))\n          ((&gt; n (expt 2 i)) (is_Sum_Of_Powers_Of_Two_iter (- n (expt 2 i)) i))))\n  (is_Sum_Of_Powers_Of_Two_iter n (floor (log n 2))))\n",
    "  (cond\n    [(= n 0) #f]\n    [(= n 1) #t]\n    [(= n 2) #t]\n    [(= n 3) #f]\n    [(= n 4) #t]\n    [(= n 5) #f]\n    [(= n 6) #f]\n    [(= n 7) #f]\n    [(= n 8) #t]\n    [(= n 9) #f]\n    [(= n 10) #f]\n    [(= n 11) #f]\n    [(= n 12) #f]\n    [(= n 13) #f]\n    [(= n 14) #f]\n    [(= n 15) #f]\n    [(= n 16) #t]\n    [(= n 17) #f]\n    [(= n 18) #f]\n    [(= n 19) #f]\n    [(= n 20) #f]\n    [(= n 21) #f]\n    [(= n 22) #f]\n    [(= n 23) #f]\n    [(= n 24) #f]\n    [(= n 25) #f]\n    [(= n 26) #f]\n    [(= n 27) #f]\n    [(= n 28) #f]\n    [(= n 29) #f]\n    [(= n 30) #f]\n    [(= n 31) #f]\n    [(= n 32) #t]\n    [(= n 33) #f]\n    [(= n 34) #f]\n    [(= n 35) #f]\n    [(= n 36) #f]\n    [(= n 37) #f]\n    [(= n 38) #f]\n    [(= n 39) #f]\n    [(= n 40) #f]\n    [(= n 41) #f]\n    [(= n 42) #f]\n    [(= n 43) #f]\n    [(= n 44) #f]\n    [(= n 45) #f]\n    [(= n 46) #f]\n    [(= n 47) #f]\n    [(= n 48) #f]\n    [(= n 49) #f]\n    [(= n 50) #",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n i)\n    (cond\n      [(= n 0) #t]\n      [(= n (expt 2 i)) #t]\n      [(> n (expt 2 i)) (or (is_Sum_Of_Powers_Of_Two_Helper (- n (expt 2 i)) i)\n                            (is_Sum_Of_Powers_Of_Two_Helper n (+ i 1)))]\n      [else #f]))\n  (is_Sum_Of_Powers_Of_Two_Helper n 0))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_iter n i)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #f]\n      [(= n (expt 2 i)) #t]\n      [(< n (expt 2 i)) (is_Sum_Of_Powers_Of_Two_iter n (- i 1))]\n      [else (or (is_Sum_Of_Powers_Of_Two_iter (- n (expt 2 i)) i)\n                (is_Sum_Of_Powers_Of_Two_iter n (- i 1)))]))\n  (is_Sum_Of_Powers_Of_Two_iter n (floor (log n 2))))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_iter n i)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #f]\n      [(= n (expt 2 i)) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 1)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 2)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 3)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 4)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 5)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 6)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 7)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 8)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 9)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 10)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 11)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 12)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 13)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 14)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 15)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 16)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 17)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 18)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 19)))) #t]\n      [(= n (+ (expt 2 i) (expt",
    "  (define (is_Sum_Of_Powers_Of_Two_Iter n i)\n    (cond\n      [(= n 0) #t]\n      [(= (modulo n (expt 2 i)) 0) (is_Sum_Of_Powers_Of_Two_Iter (- n (expt 2 i)) i)]\n      [else (is_Sum_Of_Powers_Of_Two_Iter n (+ i 1))]))\n  (is_Sum_Of_Powers_Of_Two_Iter n 0))\n",
    "  (let loop ([n n] [i 0])\n    (if (= n 0)\n        #t\n        (if (zero? (modulo n 2))\n            (loop (quotient n 2) (+ i 1))\n            (loop (- n (expt 2 i)) (+ i 1))))))\n",
    "  (if (= n 0)\n      #f\n      (let loop ((n n)\n                 (i 0))\n        (if (= n 0)\n            #t\n            (if (= (modulo n 2) 1)\n                (loop (quotient n 2) (+ i 1))\n                (loop (quotient n 2) (+ i 1)))))))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_iter n sum)\n    (cond ((= n 0) #t)\n          ((= n sum) #t)\n          ((&gt; n sum) (is_Sum_Of_Powers_Of_Two_iter n (+ sum (expt 2 (floor (log n 2))))) )\n          (else #f)))\n  (is_Sum_Of_Powers_Of_Two_iter n 0))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n acc)\n    (cond ((= n 0) #t)\n          ((= n 1) #f)\n          ((= (modulo n 2) 1) (is_Sum_Of_Powers_Of_Two_Helper (- n 1) acc))\n          ((= (modulo n 2) 0) (is_Sum_Of_Powers_Of_Two_Helper (/ n 2) (+ acc 1)))\n          (else #f)))\n  (is_Sum_Of_Powers_Of_Two_Helper n 0))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n i)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #t]\n      [(= n 2) #t]\n      [(= n 3) #f]\n      [(= n 4) #t]\n      [(= n 5) #f]\n      [(= n 6) #f]\n      [(= n 7) #f]\n      [(= n 8) #t]\n      [(= n 9) #f]\n      [(= n 10) #f]\n      [(= n 11) #f]\n      [(= n 12) #f]\n      [(= n 13) #f]\n      [(= n 14) #f]\n      [(= n 15) #f]\n      [(= n 16) #t]\n      [(= n 17) #f]\n      [(= n 18) #f]\n      [(= n 19) #f]\n      [(= n 20) #f]\n      [(= n 21) #f]\n      [(= n 22) #f]\n      [(= n 23) #f]\n      [(= n 24) #f]\n      [(= n 25) #f]\n      [(= n 26) #f]\n      [(= n 27) #f]\n      [(= n 28) #f]\n      [(= n 29) #f]\n      [(= n 30) #f]\n      [(= n 31) #f]\n      [(= n 32) #t]\n      [(= n 33) #f]\n      [(= n 34) #f]\n      [(= n 35) #f]\n      [(= n 36) #f]\n      [(= n 37) #f]\n      [(= n 38) #f]\n      [(= n 39) #f]\n      [(= n 40) #f]\n      [(= n 41) #f]\n      [(= n 42) #f]\n      [(= n 43) #f]\n      [(= n 44) #f]\n      [(= n 45) #f]\n      [(= n 46) #f]\n      [(= n 47) #f]\n      [(= n 48",
    "  (define (is_Sum_Of_Powers_Of_Two_iter n acc)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #f]\n      [(= (modulo n 2) 1) (is_Sum_Of_Powers_Of_Two_iter (quotient n 2) (+ acc 1))]\n      [else (is_Sum_Of_Powers_Of_Two_iter (quotient n 2) acc)]))\n  (is_Sum_Of_Powers_Of_Two_iter n 0))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n i)\n    (cond\n      [(= n 0) #t]\n      [(= n (expt 2 i)) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 1)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 2)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 3)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 4)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 5)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 6)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 7)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 8)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 9)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 10)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 11)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 12)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 13)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 14)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 15)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 16)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 17)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 18)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 19)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 20)))) #t]\n     ",
    "  (let loop ([n n] [i 0])\n    (cond [(= n 0) #t]\n          [(= n (expt 2 i)) #t]\n          [(< n (expt 2 i)) #f]\n          [else (loop (- n (expt 2 i)) (+ i 1))])))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n i)\n    (cond ((= n 0) #t)\n          ((= n 1) #t)\n          ((= n 2) #t)\n          ((= n 3) #f)\n          ((= n 4) #t)\n          ((= n 5) #f)\n          ((= n 6) #f)\n          ((= n 7) #f)\n          ((= n 8) #t)\n          ((= n 9) #f)\n          ((= n 10) #f)\n          ((= n 11) #f)\n          ((= n 12) #f)\n          ((= n 13) #f)\n          ((= n 14) #f)\n          ((= n 15) #f)\n          ((= n 16) #t)\n          ((= n 17) #f)\n          ((= n 18) #f)\n          ((= n 19) #f)\n          ((= n 20) #f)\n          ((= n 21) #f)\n          ((= n 22) #f)\n          ((= n 23) #f)\n          ((= n 24) #f)\n          ((= n 25) #f)\n          ((= n 26) #f)\n          ((= n 27) #f)\n          ((= n 28) #f)\n          ((= n 29) #f)\n          ((= n 30) #f)\n          ((= n 31) #f)\n          ((= n 32) #t)\n          (else (is_Sum_Of_Powers_Of_Two_Helper (- n (expt 2 i)) (+ i 1)))))\n  (is_Sum_Of_Powers_Of_Two_Helper n 0))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_iter n i)\n    (cond ((= n 0) #t)\n          ((= n 1) #f)\n          ((= n (expt 2 i)) #t)\n          ((&lt; n (expt 2 i)) (is_Sum_Of_Powers_Of_Two_iter n (- i 1)))\n          (else (is_Sum_Of_Powers_Of_Two_iter (- n (expt 2 i)) i))))\n  (is_Sum_Of_Powers_Of_Two_iter n (floor (log n 2))))\n</code>\n",
    "  (define (is_Sum_Of_Powers_Of_Two_iter n i)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #f]\n      [(= n (expt 2 i)) #t]\n      [(< n (expt 2 i)) (is_Sum_Of_Powers_Of_Two_iter n (- i 1))]\n      [else (or (is_Sum_Of_Powers_Of_Two_iter (- n (expt 2 i)) i)\n                (is_Sum_Of_Powers_Of_Two_iter n (- i 1)))]))\n  (is_Sum_Of_Powers_Of_Two_iter n (floor (log n 2))))\n",
    "  (cond\n    [(= n 0) #f]\n    [(= n 1) #t]\n    [(= n 2) #t]\n    [(= n 3) #f]\n    [(= n 4) #t]\n    [(= n 5) #f]\n    [(= n 6) #f]\n    [(= n 7) #f]\n    [(= n 8) #t]\n    [(= n 9) #f]\n    [(= n 10) #f]\n    [(= n 11) #f]\n    [(= n 12) #f]\n    [(= n 13) #f]\n    [(= n 14) #f]\n    [(= n 15) #f]\n    [(= n 16) #t]\n    [(= n 17) #f]\n    [(= n 18) #f]\n    [(= n 19) #f]\n    [(= n 20) #f]\n    [(= n 21) #f]\n    [(= n 22) #f]\n    [(= n 23) #f]\n    [(= n 24) #f]\n    [(= n 25) #f]\n    [(= n 26) #f]\n    [(= n 27) #f]\n    [(= n 28) #f]\n    [(= n 29) #f]\n    [(= n 30) #f]\n    [(= n 31) #f]\n    [(= n 32) #t]\n    [(= n 33) #f]\n    [(= n 34) #f]\n    [(= n 35) #f]\n    [(= n 36) #f]\n    [(= n 37) #f]\n    [(= n 38) #f]\n    [(= n 39) #f]\n    [(= n 40) #f]\n    [(= n 41) #f]\n    [(= n 42) #f]\n    [(= n 43) #f]\n    [(= n 44) #f]\n    [(= n 45) #f]\n    [(= n 46) #f]\n    [(= n 47) #f]\n    [(= n 48) #f]\n    [(= n 49) #f]\n    [(= n 50) #",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n p)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #f]\n      [(= n (expt 2 p)) #t]\n      [(= n (+ (expt 2 p) (is_Sum_Of_Powers_Of_Two_Helper n (- n (expt 2 p))))) #t]\n      [else (is_Sum_Of_Powers_Of_Two_Helper n (+ p 1))]))\n  (is_Sum_Of_Powers_Of_Two_Helper n 0))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n i)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #f]\n      [(= n (expt 2 i)) #t]\n      [(< n (expt 2 i)) (is_Sum_Of_Powers_Of_Two_Helper n (- i 1))]\n      [else (or (is_Sum_Of_Powers_Of_Two_Helper (- n (expt 2 i)) i)\n                (is_Sum_Of_Powers_Of_Two_Helper n (- i 1)))]))\n  (is_Sum_Of_Powers_Of_Two_Helper n (floor (log n 2))))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_iter n i)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #f]\n      [(= n (expt 2 i)) #t]\n      [(< n (expt 2 i)) (is_Sum_Of_Powers_Of_Two_iter n (- i 1))]\n      [else (or (is_Sum_Of_Powers_Of_Two_iter (- n (expt 2 i)) i)\n                (is_Sum_Of_Powers_Of_Two_iter n (- i 1)))]))\n  (is_Sum_Of_Powers_Of_Two_iter n (exact-floor (log n 2))))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n i)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #f]\n      [(= n (expt 2 i)) #t]\n      [(< n (expt 2 i)) (is_Sum_Of_Powers_Of_Two_Helper n (- i 1))]\n      [else (or (is_Sum_Of_Powers_Of_Two_Helper (- n (expt 2 i)) i)\n                (is_Sum_Of_Powers_Of_Two_Helper n (- i 1)))]))\n  (is_Sum_Of_Powers_Of_Two_Helper n (floor (log n 2))))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_iter n i)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #f]\n      [(= n (expt 2 i)) #t]\n      [(> n (expt 2 i)) (is_Sum_Of_Powers_Of_Two_iter (- n (expt 2 i)) (+ i 1))]\n      [else (is_Sum_Of_Powers_Of_Two_iter n (+ i 1))]))\n  (is_Sum_Of_Powers_Of_Two_iter n 0))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n sum)\n    (cond [(= n sum) #t]\n          [(< n sum) #f]\n          [else (or (is_Sum_Of_Powers_Of_Two_Helper n (+ sum (expt 2 (floor (log n 2)))))\n                   (is_Sum_Of_Powers_Of_Two_Helper n (+ sum (expt 2 (floor (log n 2)) 1))))]))\n  (is_Sum_Of_Powers_Of_Two_Helper n 0))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_iter n acc)\n    (cond ((= n 0) acc)\n          ((= n 1) (cons 1 acc))\n          ((= (modulo n 2) 1) (is_Sum_Of_Powers_Of_Two_iter (quotient n 2) (cons 1 acc)))\n          (else (is_Sum_Of_Powers_Of_Two_iter (quotient n 2) acc))))\n  (is_Sum_Of_Powers_Of_Two_iter n '()))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n sum)\n    (cond ((= n 0) #t)\n          ((= n sum) #t)\n          ((&lt; n sum) #f)\n          (else (is_Sum_Of_Powers_Of_Two_Helper (- n sum) (+ sum (expt 2 (floor (log n sum))))))))\n  (is_Sum_Of_Powers_Of_Two_Helper n 1))\n",
    "  (cond\n    [(= n 0) #f]\n    [(= n 1) #t]\n    [(= (modulo n 2) 1) (is_Sum_Of_Powers_Of_Two (- n 1))]\n    [else (is_Sum_Of_Powers_Of_Two (/ n 2))]))\n",
    "  (if (= n 0)\n      #f\n      (let loop ((n n) (i 0))\n        (if (= n 0)\n            #t\n            (if (= (modulo n 2) 1)\n                (loop (quotient n 2) (+ i 1))\n                (loop (quotient n 2) (+ i 1)))))))\n",
    "  (if (= n 0)\n      #f\n      (let loop ((n n) (i 0))\n        (if (= n 0)\n            #t\n            (if (= (modulo n 2) 1)\n                (loop (quotient n 2) (+ i 1))\n                (loop (quotient n 2) i))))))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_iter n i)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #t]\n      [(= n 2) #t]\n      [(= n 3) #t]\n      [(= n 4) #t]\n      [(= n 5) #t]\n      [(= n 6) #t]\n      [(= n 7) #t]\n      [(= n 8) #t]\n      [(= n 9) #t]\n      [(= n 10) #t]\n      [(= n 11) #t]\n      [(= n 12) #t]\n      [(= n 13) #t]\n      [(= n 14) #t]\n      [(= n 15) #t]\n      [(= n 16) #t]\n      [(= n 17) #t]\n      [(= n 18) #t]\n      [(= n 19) #t]\n      [(= n 20) #t]\n      [(= n 21) #t]\n      [(= n 22) #t]\n      [(= n 23) #t]\n      [(= n 24) #t]\n      [(= n 25) #t]\n      [(= n 26) #t]\n      [(= n 27) #t]\n      [(= n 28) #t]\n      [(= n 29) #t]\n      [(= n 30) #t]\n      [(= n 31) #t]\n      [(= n 32) #t]\n      [(= n 33) #t]\n      [(= n 34) #t]\n      [(= n 35) #t]\n      [(= n 36) #t]\n      [(= n 37) #t]\n      [(= n 38) #t]\n      [(= n 39) #t]\n      [(= n 40) #t]\n      [(= n 41) #t]\n      [(= n 42) #t]\n      [(= n 43) #t]\n      [(= n 44) #t]\n      [(= n 45) #t]\n      [(= n 46) #t]\n      [(= n 47) #t]\n      [(= n 48",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n sum)\n    (cond\n      [(= n 0) #t]\n      [(= n sum) #t]\n      [(< n sum) #f]\n      [else (is_Sum_Of_Powers_Of_Two_Helper (- n (expt 2 (floor (log n 2)))) sum)]))\n  (is_Sum_Of_Powers_Of_Two_Helper n 0))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #t]\n      [(= n 2) #t]\n      [(= n 3) #f]\n      [(= n 4) #t]\n      [(= n 5) #f]\n      [(= n 6) #f]\n      [(= n 7) #f]\n      [(= n 8) #t]\n      [(= n 9) #f]\n      [(= n 10) #f]\n      [(= n 11) #f]\n      [(= n 12) #f]\n      [(= n 13) #f]\n      [(= n 14) #f]\n      [(= n 15) #f]\n      [(= n 16) #t]\n      [(= n 17) #f]\n      [(= n 18) #f]\n      [(= n 19) #f]\n      [(= n 20) #f]\n      [(= n 21) #f]\n      [(= n 22) #f]\n      [(= n 23) #f]\n      [(= n 24) #f]\n      [(= n 25) #f]\n      [(= n 26) #f]\n      [(= n 27) #f]\n      [(= n 28) #f]\n      [(= n 29) #f]\n      [(= n 30) #f]\n      [(= n 31) #f]\n      [(= n 32) #t]\n      [(= n 33) #f]\n      [(= n 34) #f]\n      [(= n 35) #f]\n      [(= n 36) #f]\n      [(= n 37) #f]\n      [(= n 38) #f]\n      [(= n 39) #f]\n      [(= n 40) #f]\n      [(= n 41) #f]\n      [(= n 42) #f]\n      [(= n 43) #f]\n      [(= n 44) #f]\n      [(= n 45) #f]\n      [(= n 46) #f]\n      [(= n 47) #f]\n      [(= n 48)",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n i)\n    (cond\n      [(= n 0) #t]\n      [(= n (expt 2 i)) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- n (expt 2 i))))) #t]\n      [else (is_Sum_Of_Powers_Of_Two_Helper n (+ i 1))]))\n  (is_Sum_Of_Powers_Of_Two_Helper n 0))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #t]\n      [(= n 2) #t]\n      [(= n 3) #f]\n      [(= n 4) #t]\n      [(= n 5) #f]\n      [(= n 6) #f]\n      [(= n 7) #f]\n      [(= n 8) #t]\n      [(= n 9) #f]\n      [(= n 10) #f]\n      [(= n 11) #f]\n      [(= n 12) #f]\n      [(= n 13) #f]\n      [(= n 14) #f]\n      [(= n 15) #f]\n      [(= n 16) #t]\n      [(= n 17) #f]\n      [(= n 18) #f]\n      [(= n 19) #f]\n      [(= n 20) #f]\n      [(= n 21) #f]\n      [(= n 22) #f]\n      [(= n 23) #f]\n      [(= n 24) #f]\n      [(= n 25) #f]\n      [(= n 26) #f]\n      [(= n 27) #f]\n      [(= n 28) #f]\n      [(= n 29) #f]\n      [(= n 30) #f]\n      [(= n 31) #f]\n      [(= n 32) #t]\n      [(= n 33) #f]\n      [(= n 34) #f]\n      [(= n 35) #f]\n      [(= n 36) #f]\n      [(= n 37) #f]\n      [(= n 38) #f]\n      [(= n 39) #f]\n      [(= n 40) #f]\n      [(= n 41) #f]\n      [(= n 42) #f]\n      [(= n 43) #f]\n      [(= n 44) #f]\n      [(= n 45) #f]\n      [(= n 46) #f]\n      [(= n 47) #f]\n      [(= n 48)",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n sum)\n    (cond ((= n sum) #t)\n          ((&lt; n sum) #f)\n          (else (is_Sum_Of_Powers_Of_Two_Helper n (+ sum (expt 2 (floor (log n sum))))))))\n  (is_Sum_Of_Powers_Of_Two_Helper n 1))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_iter n i)\n    (cond ((= n 0) #t)\n          ((= n 1) #f)\n          ((= n (expt 2 i)) #t)\n          ((= n (+ (expt 2 i) (expt 2 (- i 1)))) #t)\n          ((= n (+ (expt 2 i) (expt 2 (- i 2)))) #t)\n          ((= n (+ (expt 2 i) (expt 2 (- i 3)))) #t)\n          ((= n (+ (expt 2 i) (expt 2 (- i 4)))) #t)\n          ((= n (+ (expt 2 i) (expt 2 (- i 5)))) #t)\n          ((= n (+ (expt 2 i) (expt 2 (- i 6)))) #t)\n          ((= n (+ (expt 2 i) (expt 2 (- i 7)))) #t)\n          ((= n (+ (expt 2 i) (expt 2 (- i 8)))) #t)\n          ((= n (+ (expt 2 i) (expt 2 (- i 9)))) #t)\n          ((= n (+ (expt 2 i) (expt 2 (- i 10)))) #t)\n          ((= n (+ (expt 2 i) (expt 2 (- i 11)))) #t)\n          ((= n (+ (expt 2 i) (expt 2 (- i 12)))) #t)\n          ((= n (+ (expt 2 i) (expt 2 (- i 13)))) #t)\n          ((= n (+ (expt 2 i) (expt 2 (- i 14)))) #t)\n          ((= n (+ (expt 2 i) (expt 2 (- i 15)))) #t)\n          ((= n (+ (expt 2 i) (expt 2 (- i 16)))) #t)\n          ((= n (+ (expt 2 i) (expt 2 (- i 17)))) #t)\n          ((= n (+ (expt 2 i) (expt 2 (- i 18)))) #t)\n          ((= n (+ (expt 2 i) (expt 2 (- i 19)))) #t)\n          ((= n (+ (expt 2 i) (expt 2 (-",
    "  (define (is_Sum_Of_Powers_Of_Two_Iter n i)\n    (cond\n      [(= n 0) #t]\n      [(= n (expt 2 i)) #t]\n      [(> n (expt 2 i)) (is_Sum_Of_Powers_Of_Two_Iter (- n (expt 2 i)) (+ i 1))]\n      [else #f]))\n  (is_Sum_Of_Powers_Of_Two_Iter n 0))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n i)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #t]\n      [(= n 2) #t]\n      [(= n 3) #f]\n      [(= n 4) #t]\n      [(= n 5) #f]\n      [(= n 6) #f]\n      [(= n 7) #f]\n      [(= n 8) #t]\n      [(= n 9) #f]\n      [(= n 10) #f]\n      [(= n 11) #f]\n      [(= n 12) #f]\n      [(= n 13) #f]\n      [(= n 14) #f]\n      [(= n 15) #f]\n      [(= n 16) #t]\n      [(= n 17) #f]\n      [(= n 18) #f]\n      [(= n 19) #f]\n      [(= n 20) #f]\n      [(= n 21) #f]\n      [(= n 22) #f]\n      [(= n 23) #f]\n      [(= n 24) #f]\n      [(= n 25) #f]\n      [(= n 26) #f]\n      [(= n 27) #f]\n      [(= n 28) #f]\n      [(= n 29) #f]\n      [(= n 30) #f]\n      [(= n 31) #f]\n      [(= n 32) #t]\n      [(= n 33) #f]\n      [(= n 34) #f]\n      [(= n 35) #f]\n      [(= n 36) #f]\n      [(= n 37) #f]\n      [(= n 38) #f]\n      [(= n 39) #f]\n      [(= n 40) #f]\n      [(= n 41) #f]\n      [(= n 42) #f]\n      [(= n 43) #f]\n      [(= n 44) #f]\n      [(= n 45) #f]\n      [(= n 46) #f]\n      [(= n 47) #f]\n      [(= n 48",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n i)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #f]\n      [(= n (expt 2 i)) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 1)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 2)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 3)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 4)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 5)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 6)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 7)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 8)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 9)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 10)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 11)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 12)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 13)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 14)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 15)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 16)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 17)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 18)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 19)))) #t]\n      [(= n (+ (expt 2 i) (expt",
    "  (define (is_Sum_Of_Powers_Of_Two_iter n i)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #f]\n      [(= n (expt 2 i)) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- n (expt 2 i))))) #t]\n      [else (is_Sum_Of_Powers_Of_Two_iter n (+ i 1))]))\n  (is_Sum_Of_Powers_Of_Two_iter n 0))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_iter n i)\n    (cond [(= n 0) #t]\n          [(= n 1) #f]\n          [(= n (expt 2 i)) #t]\n          [(> n (expt 2 i)) (is_Sum_Of_Powers_Of_Two_iter (- n (expt 2 i)) (+ i 1))]\n          [else (is_Sum_Of_Powers_Of_Two_iter n (+ i 1))]))\n  (is_Sum_Of_Powers_Of_Two_iter n 0))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n i)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #f]\n      [(= n (expt 2 i)) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 1)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 2)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 3)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 4)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 5)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 6)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 7)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 8)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 9)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 10)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 11)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 12)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 13)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 14)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 15)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 16)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 17)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 18)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 19)))) #t]\n      [(= n (+ (expt 2 i) (expt",
    "  (define (is_Sum_Of_Powers_Of_Two_iter n i)\n    (cond\n      [(= n 0) #t]\n      [(= n (expt 2 i)) #t]\n      [(< n (expt 2 i)) (is_Sum_Of_Powers_Of_Two_iter n (- i 1))]\n      [else (or (is_Sum_Of_Powers_Of_Two_iter (- n (expt 2 i)) i)\n                (is_Sum_Of_Powers_Of_Two_iter n (- i 1)))]))\n  (is_Sum_Of_Powers_Of_Two_iter n (floor (log n 2))))\n",
    "  (if (= n 0)\n      #f\n      (let loop ((n n) (i 0))\n        (if (= n 1)\n            #t\n            (if (= (remainder n 2) 1)\n                (loop (quotient n 2) (+ i 1))\n                #f)))))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_ n i)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #f]\n      [(= n (expt 2 i)) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- n (expt 2 i))))) #t]\n      [else (is_Sum_Of_Powers_Of_Two_ n (+ i 1))]))\n  (is_Sum_Of_Powers_Of_Two_ n 0))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n sum)\n    (cond\n      [(= n 0) #t]\n      [(= n sum) #t]\n      [(< n sum) #f]\n      [else (is_Sum_Of_Powers_Of_Two_Helper (- n sum) (+ sum (* 2 sum)))]))\n  (is_Sum_Of_Powers_Of_Two_Helper n 1))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n acc)\n    (cond\n      [(= n 0) acc]\n      [(= n 1) (cons 1 acc)]\n      [(= n 2) (cons 2 acc)]\n      [(= n 3) (cons 3 acc)]\n      [(= n 4) (cons 4 acc)]\n      [(= n 5) (cons 5 acc)]\n      [(= n 6) (cons 6 acc)]\n      [(= n 7) (cons 7 acc)]\n      [(= n 8) (cons 8 acc)]\n      [(= n 9) (cons 9 acc)]\n      [(= n 10) (cons 10 acc)]\n      [(= n 11) (cons 11 acc)]\n      [(= n 12) (cons 12 acc)]\n      [(= n 13) (cons 13 acc)]\n      [(= n 14) (cons 14 acc)]\n      [(= n 15) (cons 15 acc)]\n      [(= n 16) (cons 16 acc)]\n      [(= n 17) (cons 17 acc)]\n      [(= n 18) (cons 18 acc)]\n      [(= n 19) (cons 19 acc)]\n      [(= n 20) (cons 20 acc)]\n      [(= n 21) (cons 21 acc)]\n      [(= n 22) (cons 22 acc)]\n      [(= n 23) (cons 23 acc)]\n      [(= n 24) (cons 24 acc)]\n      [(= n 25) (cons 25 acc)]\n      [(= n 26) (cons 26 acc)]\n      [(= n 27) (cons 27 acc)]\n      [(= n 28) (cons 28 acc)]\n      [(= n 29) (cons 29 acc)]\n      [(= n 30) (cons 30 acc)]\n      [(= n 31) (cons 31 acc)]\n      [(= n 32) (cons 32 acc)]\n      [(= n 33) (cons 33 acc)]\n      [(= n 34) (cons 34 acc)]\n      [(= n 35) (cons 35 acc)]\n      [(= n 36) (cons 36 acc)]\n      [(= n 37) (cons 37 acc)]\n      [(= n 38) (cons 38 acc)]\n      [(= n 39) (cons 39 acc)]\n      [(= n 40) (cons",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n)\n    (cond ((= n 0) #t)\n          ((= n 1) #f)\n          ((even? n) (is_Sum_Of_Powers_Of_Two_Helper (/ n 2)))\n          (else (is_Sum_Of_Powers_Of_Two_Helper (- n 1)))))\n  (is_Sum_Of_Powers_Of_Two_Helper n))\n",
    "  (if (= n 0)\n      #f\n      (let loop ((n n) (i 0))\n        (if (= n 0)\n            #t\n            (if (= (modulo n 2) 1)\n                (loop (quotient n 2) (+ i 1))\n                (loop (quotient n 2) (+ i 1)))))))\n",
    "  (cond\n    [(= n 0) #f]\n    [(= n 1) #t]\n    [(= n 2) #t]\n    [(= n 3) #f]\n    [(= n 4) #t]\n    [(= n 5) #f]\n    [(= n 6) #f]\n    [(= n 7) #f]\n    [(= n 8) #t]\n    [(= n 9) #f]\n    [(= n 10) #f]\n    [(= n 11) #f]\n    [(= n 12) #f]\n    [(= n 13) #f]\n    [(= n 14) #f]\n    [(= n 15) #f]\n    [(= n 16) #t]\n    [(= n 17) #f]\n    [(= n 18) #f]\n    [(= n 19) #f]\n    [(= n 20) #f]\n    [(= n 21) #f]\n    [(= n 22) #f]\n    [(= n 23) #f]\n    [(= n 24) #f]\n    [(= n 25) #f]\n    [(= n 26) #f]\n    [(= n 27) #f]\n    [(= n 28) #f]\n    [(= n 29) #f]\n    [(= n 30) #f]\n    [(= n 31) #f]\n    [(= n 32) #t]\n    [(= n 33) #f]\n    [(= n 34) #f]\n    [(= n 35) #f]\n    [(= n 36) #f]\n    [(= n 37) #f]\n    [(= n 38) #f]\n    [(= n 39) #f]\n    [(= n 40) #f]\n    [(= n 41) #f]\n    [(= n 42) #f]\n    [(= n 43) #f]\n    [(= n 44) #f]\n    [(= n 45) #f]\n    [(= n 46) #f]\n    [(= n 47) #f]\n    [(= n 48) #f]\n    [(= n 49) #f]\n    [(= n 50) #",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n p)\n    (cond\n      [(= n 0) true]\n      [(= n 1) false]\n      [(= n (expt 2 p)) true]\n      [(> n (expt 2 p)) (is_Sum_Of_Powers_Of_Two_Helper (- n (expt 2 p)) p)]\n      [else (is_Sum_Of_Powers_Of_Two_Helper n (+ p 1))]))\n  (is_Sum_Of_Powers_Of_Two_Helper n 0))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_helper n i)\n    (cond\n      [(= n 0) #t]\n      [(= n (expt 2 i)) #t]\n      [(< n (expt 2 i)) (is_Sum_Of_Powers_Of_Two_helper n (- i 1))]\n      [else (or (is_Sum_Of_Powers_Of_Two_helper (- n (expt 2 i)) i)\n                (is_Sum_Of_Powers_Of_Two_helper n (- i 1)))]))\n  (is_Sum_Of_Powers_Of_Two_helper n (floor (log n 2))))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #t]\n      [(= n 2) #t]\n      [(= n 3) #f]\n      [(= n 4) #t]\n      [(= n 5) #f]\n      [(= n 6) #f]\n      [(= n 7) #f]\n      [(= n 8) #t]\n      [(= n 9) #f]\n      [(= n 10) #f]\n      [(= n 11) #f]\n      [(= n 12) #f]\n      [(= n 13) #f]\n      [(= n 14) #f]\n      [(= n 15) #f]\n      [(= n 16) #t]\n      [(= n 17) #f]\n      [(= n 18) #f]\n      [(= n 19) #f]\n      [(= n 20) #f]\n      [(= n 21) #f]\n      [(= n 22) #f]\n      [(= n 23) #f]\n      [(= n 24) #f]\n      [(= n 25) #f]\n      [(= n 26) #f]\n      [(= n 27) #f]\n      [(= n 28) #f]\n      [(= n 29) #f]\n      [(= n 30) #f]\n      [(= n 31) #f]\n      [(= n 32) #t]\n      [else #f]))\n  (is_Sum_Of_Powers_Of_Two_Helper n))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n i)\n    (cond ((= n 0) #t)\n          ((= n 1) #f)\n          ((= n (expt 2 i)) #t)\n          ((&lt; n (expt 2 i)) (is_Sum_Of_Powers_Of_Two_Helper n (- i 1)))\n          (else (is_Sum_Of_Powers_Of_Two_Helper (- n (expt 2 i)) i))))\n  (is_Sum_Of_Powers_Of_Two_Helper n (floor (log n 2))))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_iter n i)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #f]\n      [(= n (expt 2 i)) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 1)))) #t]\n      [else (is_Sum_Of_Powers_Of_Two_iter n (+ i 1))]))\n  (is_Sum_Of_Powers_Of_Two_iter n 0))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n p)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #f]\n      [(= n (expt 2 p)) #t]\n      [(= n (+ (expt 2 p) (is_Sum_Of_Powers_Of_Two_Helper (- n (expt 2 p)) p))) #t]\n      [else (is_Sum_Of_Powers_Of_Two_Helper n (+ p 1))]))\n  (is_Sum_Of_Powers_Of_Two_Helper n 0))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_iter n i)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #f]\n      [(= n (expt 2 i)) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- n (expt 2 i))))) #t]\n      [else (is_Sum_Of_Powers_Of_Two_iter n (+ i 1))]))\n  (is_Sum_Of_Powers_Of_Two_iter n 0))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_iter n i)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #f]\n      [(= n (expt 2 i)) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- n (expt 2 i))))) #t]\n      [else (is_Sum_Of_Powers_Of_Two_iter n (+ i 1))]))\n  (is_Sum_Of_Powers_Of_Two_iter n 0))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n p)\n    (cond\n      [(zero? n) #t]\n      [(zero? p) #f]\n      [(= n (expt 2 p)) #t]\n      [(< n (expt 2 p)) (is_Sum_Of_Powers_Of_Two_Helper n (- p 1))]\n      [else (or (is_Sum_Of_Powers_Of_Two_Helper (- n (expt 2 p)) p)\n                (is_Sum_Of_Powers_Of_Two_Helper n (- p 1)))]))\n  (is_Sum_Of_Powers_Of_Two_Helper n (floor (log n 2))))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_iter n i)\n    (cond ((= n 0) #t)\n          ((= n 1) #f)\n          ((= n (expt 2 i)) #t)\n          ((&gt; n (expt 2 i)) (is_Sum_Of_Powers_Of_Two_iter (- n (expt 2 i)) (+ i 1)))\n          (else (is_Sum_Of_Powers_Of_Two_iter n (+ i 1)))))\n  (is_Sum_Of_Powers_Of_Two_iter n 0))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n)\n    (cond ((= n 0) #t)\n          ((= n 1) #t)\n          ((= n 2) #t)\n          ((= n 3) #f)\n          ((= n 4) #t)\n          ((= n 5) #f)\n          ((= n 6) #f)\n          ((= n 7) #f)\n          ((= n 8) #t)\n          ((= n 9) #f)\n          ((= n 10) #f)\n          ((= n 11) #f)\n          ((= n 12) #f)\n          ((= n 13) #f)\n          ((= n 14) #f)\n          ((= n 15) #f)\n          ((= n 16) #t)\n          ((= n 17) #f)\n          ((= n 18) #f)\n          ((= n 19) #f)\n          ((= n 20) #f)\n          ((= n 21) #f)\n          ((= n 22) #f)\n          ((= n 23) #f)\n          ((= n 24) #f)\n          ((= n 25) #f)\n          ((= n 26) #f)\n          ((= n 27) #f)\n          ((= n 28) #f)\n          ((= n 29) #f)\n          ((= n 30) #f)\n          ((= n 31) #f)\n          ((= n 32) #t)\n          (else (is_Sum_Of_Powers_Of_Two_Helper (- n 32)))))\n  (is_Sum_Of_Powers_Of_Two_Helper n))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_iter n i)\n    (cond\n      [(= n 0) #t]\n      [(= n (expt 2 i)) #t]\n      [(< n (expt 2 i)) (is_Sum_Of_Powers_Of_Two_iter n (- i 1))]\n      [else (or (is_Sum_Of_Powers_Of_Two_iter (- n (expt 2 i)) i)\n                (is_Sum_Of_Powers_Of_Two_iter n (- i 1)))]))\n  (is_Sum_Of_Powers_Of_Two_iter n (floor (log n 2))))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_iter n i)\n    (if (= n 0)\n        #t\n        (if (= n (expt 2 i))\n            #t\n            (if (&lt; n (expt 2 i))\n                (is_Sum_Of_Powers_Of_Two_iter n (- i 1))\n                (is_Sum_Of_Powers_Of_Two_iter (- n (expt 2 i)) (- i 1))))))\n  (is_Sum_Of_Powers_Of_Two_iter n (floor (log n 2))))\n</code>\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n i)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #f]\n      [(= n (expt 2 i)) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 1)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 2)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 3)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 4)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 5)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 6)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 7)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 8)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 9)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 10)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 11)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 12)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 13)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 14)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 15)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 16)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 17)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 18)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 19)))) #t]\n      [(= n (+ (expt 2 i) (expt",
    "  (define (is_Sum_Of_Powers_Of_Two_helper n sum)\n    (cond\n      [(= n 0) (if (= sum 0) #t #f)]\n      [(= n 1) (if (= sum 1) #t #f)]\n      [(= n 2) (if (= sum 2) #t #f)]\n      [(= n 3) (if (= sum 3) #t #f)]\n      [(= n 4) (if (= sum 4) #t #f)]\n      [(= n 5) (if (= sum 5) #t #f)]\n      [(= n 6) (if (= sum 6) #t #f)]\n      [(= n 7) (if (= sum 7) #t #f)]\n      [(= n 8) (if (= sum 8) #t #f)]\n      [(= n 9) (if (= sum 9) #t #f)]\n      [(= n 10) (if (= sum 10) #t #f)]\n      [(= n 11) (if (= sum 11) #t #f)]\n      [(= n 12) (if (= sum 12) #t #f)]\n      [(= n 13) (if (= sum 13) #t #f)]\n      [(= n 14) (if (= sum 14) #t #f)]\n      [(= n 15) (if (= sum 15) #t #f)]\n      [(= n 16) (if (= sum 16) #t #f)]\n      [(= n 17) (if (= sum 17) #t #f)]\n      [(= n 18) (if (= sum 18) #t #f)]\n      [(= n 19) (if (= sum 19) #t #f)]\n      [(= n 20) (if (= sum 20) #t #f)]\n      [(= n 21) (if (= sum 21) #t #f)]\n      [(= n 22) (if (= sum 22) #t #f)]\n      [(= n 23) (if (= sum 23) #t #f)]\n      [(= n 24) (if (= sum 24) #t #f)]\n      [(= n 25) (if (= sum 25) #t #f)]\n      [(= n 26) (if (= sum 26) #t #f",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n i)\n    (cond\n      [(= n 0) #t]\n      [(= n (expt 2 i)) #t]\n      [(&lt; n (expt 2 i)) (is_Sum_Of_Powers_Of_Two_Helper n (- i 1))]\n      [else (is_Sum_Of_Powers_Of_Two_Helper (- n (expt 2 i)) (- i 1))]))\n  (is_Sum_Of_Powers_Of_Two_Helper n (floor (log n 2))))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n i)\n    (if (= n 0)\n        #t\n        (if (= n (expt 2 i))\n            #t\n            (if (&lt; n (expt 2 i))\n                (is_Sum_Of_Powers_Of_Two_Helper n (- i 1))\n                (is_Sum_Of_Powers_Of_Two_Helper (- n (expt 2 i)) i)))))\n  (is_Sum_Of_Powers_Of_Two_Helper n (floor (log n 2))))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n i)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #t]\n      [(= n 2) #t]\n      [(= n 3) #t]\n      [(= n 4) #t]\n      [(= n 5) #t]\n      [(= n 6) #t]\n      [(= n 7) #t]\n      [(= n 8) #t]\n      [(= n 9) #t]\n      [(= n 10) #t]\n      [(= n 11) #t]\n      [(= n 12) #t]\n      [(= n 13) #t]\n      [(= n 14) #t]\n      [(= n 15) #t]\n      [(= n 16) #t]\n      [(= n 17) #t]\n      [(= n 18) #t]\n      [(= n 19) #t]\n      [(= n 20) #t]\n      [(= n 21) #t]\n      [(= n 22) #t]\n      [(= n 23) #t]\n      [(= n 24) #t]\n      [(= n 25) #t]\n      [(= n 26) #t]\n      [(= n 27) #t]\n      [(= n 28) #t]\n      [(= n 29) #t]\n      [(= n 30) #t]\n      [(= n 31) #t]\n      [(= n 32) #t]\n      [(= n 33) #t]\n      [(= n 34) #t]\n      [(= n 35) #t]\n      [(= n 36) #t]\n      [(= n 37) #t]\n      [(= n 38) #t]\n      [(= n 39) #t]\n      [(= n 40) #t]\n      [(= n 41) #t]\n      [(= n 42) #t]\n      [(= n 43) #t]\n      [(= n 44) #t]\n      [(= n 45) #t]\n      [(= n 46) #t]\n      [(= n 47) #t]\n      [(= n 48",
    "  (define (is_Sum_Of_Powers_Of_Two_helper n k)\n    (cond\n      [(= n 0) #t]\n      [(= n (expt 2 k)) #t]\n      [(= n (+ (expt 2 k) (expt 2 (- k 1)))) #t]\n      [(= n (+ (expt 2 k) (expt 2 (- k 2)))) #t]\n      [(= n (+ (expt 2 k) (expt 2 (- k 3)))) #t]\n      [(= n (+ (expt 2 k) (expt 2 (- k 4)))) #t]\n      [(= n (+ (expt 2 k) (expt 2 (- k 5)))) #t]\n      [(= n (+ (expt 2 k) (expt 2 (- k 6)))) #t]\n      [(= n (+ (expt 2 k) (expt 2 (- k 7)))) #t]\n      [(= n (+ (expt 2 k) (expt 2 (- k 8)))) #t]\n      [(= n (+ (expt 2 k) (expt 2 (- k 9)))) #t]\n      [(= n (+ (expt 2 k) (expt 2 (- k 10)))) #t]\n      [(= n (+ (expt 2 k) (expt 2 (- k 11)))) #t]\n      [(= n (+ (expt 2 k) (expt 2 (- k 12)))) #t]\n      [(= n (+ (expt 2 k) (expt 2 (- k 13)))) #t]\n      [(= n (+ (expt 2 k) (expt 2 (- k 14)))) #t]\n      [(= n (+ (expt 2 k) (expt 2 (- k 15)))) #t]\n      [(= n (+ (expt 2 k) (expt 2 (- k 16)))) #t]\n      [(= n (+ (expt 2 k) (expt 2 (- k 17)))) #t]\n      [(= n (+ (expt 2 k) (expt 2 (- k 18)))) #t]\n      [(= n (+ (expt 2 k) (expt 2 (- k 19)))) #t]\n      [(= n (+ (expt 2 k) (expt 2 (- k 20)))) #t]\n",
    "  (define (is_Sum_Of_Powers_Of_Two_iter n acc)\n    (cond\n      [(= n 0) acc]\n      [(= n 1) (cons 1 acc)]\n      [(= (remainder n 2) 1) (is_Sum_Of_Powers_Of_Two_iter (quotient n 2) (cons 1 acc))]\n      [else (is_Sum_Of_Powers_Of_Two_iter (quotient n 2) acc)]))\n  (is_Sum_Of_Powers_Of_Two_iter n '()))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n i)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #f]\n      [(= n (expt 2 i)) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 1)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 2)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 3)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 4)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 5)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 6)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 7)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 8)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 9)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 10)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 11)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 12)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 13)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 14)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 15)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 16)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 17)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 18)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 19)))) #t]\n      [(= n (+ (expt 2 i) (expt",
    "  (let loop ([n n] [i 0])\n    (cond [(= n 0) #t]\n          [(= n (expt 2 i)) #t]\n          [(< n (expt 2 i)) #f]\n          [else (loop (- n (expt 2 i)) (+ i 1))])))\n",
    "  (if (= n 0)\n      #f\n      (let loop ([n n] [i 0])\n        (if (= n 0)\n            #t\n            (if (= (remainder n 2) 1)\n                (loop (quotient n 2) (+ i 1))\n                (loop (quotient n 2) (+ i 1)))))))\n",
    "  (cond\n    [(= n 0) #f]\n    [(= n 1) #t]\n    [(= n 2) #t]\n    [(= n 3) #f]\n    [(= n 4) #t]\n    [(= n 5) #f]\n    [(= n 6) #f]\n    [(= n 7) #f]\n    [(= n 8) #t]\n    [(= n 9) #f]\n    [(= n 10) #f]\n    [(= n 11) #f]\n    [(= n 12) #f]\n    [(= n 13) #f]\n    [(= n 14) #f]\n    [(= n 15) #f]\n    [(= n 16) #t]\n    [(= n 17) #f]\n    [(= n 18) #f]\n    [(= n 19) #f]\n    [(= n 20) #f]\n    [(= n 21) #f]\n    [(= n 22) #f]\n    [(= n 23) #f]\n    [(= n 24) #f]\n    [(= n 25) #f]\n    [(= n 26) #f]\n    [(= n 27) #f]\n    [(= n 28) #f]\n    [(= n 29) #f]\n    [(= n 30) #f]\n    [(= n 31) #f]\n    [(= n 32) #t]\n    [(= n 33) #f]\n    [(= n 34) #f]\n    [(= n 35) #f]\n    [(= n 36) #f]\n    [(= n 37) #f]\n    [(= n 38) #f]\n    [(= n 39) #f]\n    [(= n 40) #f]\n    [(= n 41) #f]\n    [(= n 42) #f]\n    [(= n 43) #f]\n    [(= n 44) #f]\n    [(= n 45) #f]\n    [(= n 46) #f]\n    [(= n 47) #f]\n    [(= n 48) #f]\n    [(= n 49) #f]\n    [(= n 50) #",
    "  (define (is_Sum_Of_Powers_Of_Two_iter n i)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [(= n 3) #f]\n      [(= n 4) #t]\n      [(= n 5) #f]\n      [(= n 6) #f]\n      [(= n 7) #f]\n      [(= n 8) #t]\n      [(= n 9) #f]\n      [(= n 10) #f]\n      [(= n 11) #f]\n      [(= n 12) #f]\n      [(= n 13) #f]\n      [(= n 14) #f]\n      [(= n 15) #f]\n      [(= n 16) #t]\n      [(= n 17) #f]\n      [(= n 18) #f]\n      [(= n 19) #f]\n      [(= n 20) #f]\n      [(= n 21) #f]\n      [(= n 22) #f]\n      [(= n 23) #f]\n      [(= n 24) #f]\n      [(= n 25) #f]\n      [(= n 26) #f]\n      [(= n 27) #f]\n      [(= n 28) #f]\n      [(= n 29) #f]\n      [(= n 30) #f]\n      [(= n 31) #f]\n      [(= n 32) #t]\n      [(= n 33) #f]\n      [(= n 34) #f]\n      [(= n 35) #f]\n      [(= n 36) #f]\n      [(= n 37) #f]\n      [(= n 38) #f]\n      [(= n 39) #f]\n      [(= n 40) #f]\n      [(= n 41) #f]\n      [(= n 42) #f]\n      [(= n 43) #f]\n      [(= n 44) #f]\n      [(= n 45) #f]\n      [(= n 46) #f]\n      [(= n 47) #f]\n      [(= n 48",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n result)\n    (if (= n 0)\n        result\n        (is_Sum_Of_Powers_Of_Two_Helper (quotient n 2) (cons (remainder n 2) result))))\n  (if (and (not (= n 0)) (not (= n 1)))\n      (is_Sum_Of_Powers_Of_Two_Helper n '())\n      #f))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_iter n i)\n    (cond\n      ((= n 0) #t)\n      ((= n (expt 2 i)) #t)\n      ((&gt; n (expt 2 i)) (is_Sum_Of_Powers_Of_Two_iter (- n (expt 2 i)) (+ i 1)))\n      (else #f)))\n  (is_Sum_Of_Powers_Of_Two_iter n 0))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n i)\n    (cond ((= n 0) #t)\n          ((= n 1) #f)\n          ((= n (expt 2 i)) #t)\n          ((&gt; n (expt 2 i)) (is_Sum_Of_Powers_Of_Two_Helper (- n (expt 2 i)) (+ i 1)))\n          (else (is_Sum_Of_Powers_Of_Two_Helper n (+ i 1)))))\n  (is_Sum_Of_Powers_Of_Two_Helper n 0))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_iter n i)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #f]\n      [(= n (expt 2 i)) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- n (expt 2 i))))) #t]\n      [else (is_Sum_Of_Powers_Of_Two_iter n (+ i 1))]))\n  (is_Sum_Of_Powers_Of_Two_iter n 0))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n sum)\n    (cond ((= n 0) #t)\n          ((= n sum) #t)\n          ((&lt; n sum) #f)\n          (else (is_Sum_Of_Powers_Of_Two_Helper (- n sum) (* 2 sum)))))\n  (is_Sum_Of_Powers_Of_Two_Helper n 1))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n i)\n    (cond ((= n 0) #t)\n          ((= n 1) #f)\n          ((= n (expt 2 i)) #t)\n          ((&gt; n (expt 2 i)) (is_Sum_Of_Powers_Of_Two_Helper (- n (expt 2 i)) i))\n          (else (is_Sum_Of_Powers_Of_Two_Helper n (+ i 1)))))\n  (is_Sum_Of_Powers_Of_Two_Helper n 0))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n i)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #f]\n      [(= n (expt 2 i)) #t]\n      [(&gt; n (expt 2 i)) (is_Sum_Of_Powers_Of_Two_Helper (- n (expt 2 i)) (+ i 1))]\n      [else (is_Sum_Of_Powers_Of_Two_Helper n (+ i 1))]))\n  (is_Sum_Of_Powers_Of_Two_Helper n 0))\n</code>\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n i)\n    (cond ((= n 0) #t)\n          ((= n 1) #t)\n          ((= n 2) #t)\n          ((= n 3) #f)\n          ((= n 4) #t)\n          ((= n 5) #f)\n          ((= n 6) #f)\n          ((= n 7) #f)\n          ((= n 8) #t)\n          ((= n 9) #f)\n          ((= n 10) #f)\n          ((= n 11) #f)\n          ((= n 12) #f)\n          ((= n 13) #f)\n          ((= n 14) #f)\n          ((= n 15) #f)\n          ((= n 16) #t)\n          ((= n 17) #f)\n          ((= n 18) #f)\n          ((= n 19) #f)\n          ((= n 20) #f)\n          ((= n 21) #f)\n          ((= n 22) #f)\n          ((= n 23) #f)\n          ((= n 24) #f)\n          ((= n 25) #f)\n          ((= n 26) #f)\n          ((= n 27) #f)\n          ((= n 28) #f)\n          ((= n 29) #f)\n          ((= n 30) #f)\n          ((= n 31) #f)\n          ((= n 32) #t)\n          (else (is_Sum_Of_Powers_Of_Two_Helper (- n (expt 2 i)) (+ i 1)))))\n  (is_Sum_Of_Powers_Of_Two_Helper n 0))\n",
    "  (if (= n 0)\n      #f\n      (let loop ([n n] [i 0])\n        (cond [(= n 0) #t]\n              [(= n (expt 2 i)) #t]\n              [(< n (expt 2 i)) (loop n (+ i 1))]\n              [(> n (expt 2 i)) (loop (- n (expt 2 i)) (+ i 1))]))))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Iter n i)\n    (cond ((= n 0) #t)\n          ((= n 1) #f)\n          ((= n (expt 2 i)) #t)\n          ((&lt; n (expt 2 i)) (is_Sum_Of_Powers_Of_Two_Iter n (- i 1)))\n          (else (is_Sum_Of_Powers_Of_Two_Iter (- n (expt 2 i)) i))))\n  (is_Sum_Of_Powers_Of_Two_Iter n (floor (log n 2))))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n i)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #t]\n      [(= n 2) #t]\n      [(= n 3) #f]\n      [(= n 4) #t]\n      [(= n 5) #f]\n      [(= n 6) #f]\n      [(= n 7) #f]\n      [(= n 8) #t]\n      [(= n 9) #f]\n      [(= n 10) #f]\n      [(= n 11) #f]\n      [(= n 12) #f]\n      [(= n 13) #f]\n      [(= n 14) #f]\n      [(= n 15) #f]\n      [(= n 16) #t]\n      [(= n 17) #f]\n      [(= n 18) #f]\n      [(= n 19) #f]\n      [(= n 20) #f]\n      [(= n 21) #f]\n      [(= n 22) #f]\n      [(= n 23) #f]\n      [(= n 24) #f]\n      [(= n 25) #f]\n      [(= n 26) #f]\n      [(= n 27) #f]\n      [(= n 28) #f]\n      [(= n 29) #f]\n      [(= n 30) #f]\n      [(= n 31) #f]\n      [(= n 32) #t]\n      [(= n 33) #f]\n      [(= n 34) #f]\n      [(= n 35) #f]\n      [(= n 36) #f]\n      [(= n 37) #f]\n      [(= n 38) #f]\n      [(= n 39) #f]\n      [(= n 40) #f]\n      [(= n 41) #f]\n      [(= n 42) #f]\n      [(= n 43) #f]\n      [(= n 44) #f]\n      [(= n 45) #f]\n      [(= n 46) #f]\n      [(= n 47) #f]\n      [(= n 48",
    "  (cond\n    [(= n 0) #t]\n    [(= n 1) #t]\n    [(= n 2) #t]\n    [(= n 3) #f]\n    [(= n 4) #t]\n    [(= n 5) #f]\n    [(= n 6) #f]\n    [(= n 7) #f]\n    [(= n 8) #t]\n    [(= n 9) #f]\n    [(= n 10) #f]\n    [(= n 11) #f]\n    [(= n 12) #f]\n    [(= n 13) #f]\n    [(= n 14) #f]\n    [(= n 15) #f]\n    [(= n 16) #t]\n    [(= n 17) #f]\n    [(= n 18) #f]\n    [(= n 19) #f]\n    [(= n 20) #f]\n    [(= n 21) #f]\n    [(= n 22) #f]\n    [(= n 23) #f]\n    [(= n 24) #f]\n    [(= n 25) #f]\n    [(= n 26) #f]\n    [(= n 27) #f]\n    [(= n 28) #f]\n    [(= n 29) #f]\n    [(= n 30) #f]\n    [(= n 31) #f]\n    [(= n 32) #t]\n    [(= n 33) #f]\n    [(= n 34) #f]\n    [(= n 35) #f]\n    [(= n 36) #f]\n    [(= n 37) #f]\n    [(= n 38) #f]\n    [(= n 39) #f]\n    [(= n 40) #f]\n    [(= n 41) #f]\n    [(= n 42) #f]\n    [(= n 43) #f]\n    [(= n 44) #f]\n    [(= n 45) #f]\n    [(= n 46) #f]\n    [(= n 47) #f]\n    [(= n 48) #f]\n    [(= n 49) #f]\n    [(= n 50) #",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n i)\n    (cond\n      [(= n 0) #t]\n      [(= n (expt 2 i)) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 1)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 2)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 3)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 4)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 5)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 6)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 7)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 8)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 9)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 10)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 11)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 12)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 13)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 14)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 15)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 16)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 17)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 18)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 19)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 20)))) #t]\n     ",
    "  (let loop ((n n) (i 0))\n    (cond\n      [(= n 0) #t]\n      [(< n 0) #f]\n      [else\n       (if (= (remainder n 2) 1)\n           (loop (- n (expt 2 i)) (+ i 1))\n           (loop (- n (expt 2 i)) (+ i 1)))])))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n)\n    (cond\n      [(zero? n) #t]\n      [(and (even? n) (is_Sum_Of_Powers_Of_Two_Helper (/ n 2))) #t]\n      [else #f]))\n  (and (positive? n) (is_Sum_Of_Powers_Of_Two_Helper n)))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_helper n i)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #f]\n      [(= n (expt 2 i)) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 1)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 2)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 3)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 4)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 5)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 6)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 7)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 8)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 9)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 10)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 11)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 12)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 13)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 14)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 15)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 16)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 17)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 18)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 19)))) #t]\n      [(= n (+ (expt 2 i) (ex",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n i)\n    (if (= n 0)\n        #t\n        (if (= n (expt 2 i))\n            #t\n            (if (&lt; n (expt 2 i))\n                (is_Sum_Of_Powers_Of_Two_Helper n (- i 1))\n                (is_Sum_Of_Powers_Of_Two_Helper (- n (expt 2 i)) i)))))\n  (is_Sum_Of_Powers_Of_Two_Helper n (floor (log n 2))))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n i)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #f]\n      [(= n (expt 2 i)) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 1)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 2)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 3)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 4)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 5)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 6)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 7)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 8)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 9)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 10)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 11)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 12)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 13)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 14)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 15)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 16)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 17)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 18)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 19)))) #t]\n      [(= n (+ (expt 2 i) (expt",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n i)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #f]\n      [(= n (expt 2 i)) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 1)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 2)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 3)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 4)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 5)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 6)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 7)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 8)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 9)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 10)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 11)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 12)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 13)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 14)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 15)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 16)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 17)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 18)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 19)))) #t]\n      [(= n (+ (expt 2 i) (expt",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n power)\n    (cond\n      [(= n 0) #t]\n      [(= n power) #t]\n      [(= n (+ power (is_Sum_Of_Powers_Of_Two_Helper (- n power) (* power 2)))) #t]\n      [else #f]))\n  (is_Sum_Of_Powers_Of_Two_Helper n 1))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_iter n i)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #f]\n      [(= n (expt 2 i)) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- n (expt 2 i))))) #t]\n      [else (is_Sum_Of_Powers_Of_Two_iter n (+ i 1))]))\n  (is_Sum_Of_Powers_Of_Two_iter n 0))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #t]\n      [(= n 2) #t]\n      [(= n 3) #f]\n      [(= n 4) #t]\n      [(= n 5) #f]\n      [(= n 6) #f]\n      [(= n 7) #f]\n      [(= n 8) #t]\n      [(= n 9) #f]\n      [(= n 10) #f]\n      [(= n 11) #f]\n      [(= n 12) #f]\n      [(= n 13) #f]\n      [(= n 14) #f]\n      [(= n 15) #f]\n      [(= n 16) #t]\n      [(= n 17) #f]\n      [(= n 18) #f]\n      [(= n 19) #f]\n      [(= n 20) #f]\n      [(= n 21) #f]\n      [(= n 22) #f]\n      [(= n 23) #f]\n      [(= n 24) #f]\n      [(= n 25) #f]\n      [(= n 26) #f]\n      [(= n 27) #f]\n      [(= n 28) #f]\n      [(= n 29) #f]\n      [(= n 30) #f]\n      [(= n 31) #f]\n      [(= n 32) #t]\n      [(= n 33) #f]\n      [(= n 34) #f]\n      [(= n 35) #f]\n      [(= n 36) #f]\n      [(= n 37) #f]\n      [(= n 38) #f]\n      [(= n 39) #f]\n      [(= n 40) #f]\n      [(= n 41) #f]\n      [(= n 42) #f]\n      [(= n 43) #f]\n      [(= n 44) #f]\n      [(= n 45) #f]\n      [(= n 46) #f]\n      [(= n 47) #f]\n      [(= n 48)",
    "  (define (is_Sum_Of_Powers_Of_Two_iter n sum)\n    (cond\n      [(= n 0) #t]\n      [(= n sum) #t]\n      [(> n sum) (is_Sum_Of_Powers_Of_Two_iter n (+ sum (expt 2 (floor (log n sum))))) ]\n      [else #f]))\n  (is_Sum_Of_Powers_Of_Two_iter n 1))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_iter n sum)\n    (cond ((= n 0) #t)\n          ((= n sum) #t)\n          ((&lt; n sum) #f)\n          (else (is_Sum_Of_Powers_Of_Two_iter n (+ sum (expt 2 (floor (log n sum))))))))\n  (is_Sum_Of_Powers_Of_Two_iter n 1))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n)\n    (cond ((= n 0) #t)\n          ((= n 1) #t)\n          ((= n 2) #t)\n          ((= n 3) #f)\n          ((= n 4) #t)\n          ((= n 5) #f)\n          ((= n 6) #f)\n          ((= n 7) #f)\n          ((= n 8) #t)\n          ((= n 9) #f)\n          ((= n 10) #f)\n          ((= n 11) #f)\n          ((= n 12) #f)\n          ((= n 13) #f)\n          ((= n 14) #f)\n          ((= n 15) #f)\n          ((= n 16) #t)\n          ((= n 17) #f)\n          ((= n 18) #f)\n          ((= n 19) #f)\n          ((= n 20) #f)\n          ((= n 21) #f)\n          ((= n 22) #f)\n          ((= n 23) #f)\n          ((= n 24) #f)\n          ((= n 25) #f)\n          ((= n 26) #f)\n          ((= n 27) #f)\n          ((= n 28) #f)\n          ((= n 29) #f)\n          ((= n 30) #f)\n          ((= n 31) #f)\n          ((= n 32) #t)\n          (else (is_Sum_Of_Powers_Of_Two_Helper (- n 32)))))\n  (is_Sum_Of_Powers_Of_Two_Helper n))\n",
    "  (let loop ((n n) (i 0))\n    (if (= n 0)\n        #t\n        (if (= (remainder n 2) 0)\n            (loop (quotient n 2) (+ i 1))\n            (loop (- n (expt 2 i)) (+ i 1))))))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n)\n    (cond ((= n 0) #f)\n          ((= n 1) #t)\n          ((= n 2) #t)\n          ((= n 3) #f)\n          (else (is_Sum_Of_Powers_Of_Two_Helper (- n (expt 2 (floor (log n 2))))))))\n  (is_Sum_Of_Powers_Of_Two_Helper n))\n",
    "  (let loop ((n n) (i 0))\n    (cond ((= n 0) #t)\n          ((< n 0) #f)\n          ((= (modulo n 2) 1) (loop (- n (expt 2 i)) (+ i 1)))\n          (else (loop (/ n 2) (+ i 1))))))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n i)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #f]\n      [(= n (expt 2 i)) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 1)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 2)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 3)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 4)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 5)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 6)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 7)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 8)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 9)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 10)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 11)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 12)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 13)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 14)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 15)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 16)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 17)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 18)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 19)))) #t]\n      [(= n (+ (expt 2 i) (expt",
    "  (define (is_Sum_Of_Powers_Of_Two_iter n p)\n    (cond ((= n 0) #t)\n          ((= n 1) #f)\n          ((= n (expt 2 p)) #t)\n          ((&lt; n (expt 2 p)) (is_Sum_Of_Powers_Of_Two_iter n (- p 1)))\n          (else (is_Sum_Of_Powers_Of_Two_iter (- n (expt 2 p)) p))))\n  (is_Sum_Of_Powers_Of_Two_iter n (floor (log n 2))))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n i)\n    (if (= n 0)\n        #t\n        (if (= n (expt 2 i))\n            #t\n            (if (&lt; n (expt 2 i))\n                (is_Sum_Of_Powers_Of_Two_Helper n (- i 1))\n                (is_Sum_Of_Powers_Of_Two_Helper (- n (expt 2 i)) i)))))\n  (is_Sum_Of_Powers_Of_Two_Helper n (floor (log n 2))))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_iter n sum)\n    (cond\n      [(= n 0) (if (= sum 0) #t #f)]\n      [(= n 1) (if (= sum 1) #t #f)]\n      [(= n 2) (if (= sum 2) #t #f)]\n      [(= n 3) (if (= sum 3) #t #f)]\n      [(= n 4) (if (= sum 4) #t #f)]\n      [(= n 5) (if (= sum 5) #t #f)]\n      [(= n 6) (if (= sum 6) #t #f)]\n      [(= n 7) (if (= sum 7) #t #f)]\n      [(= n 8) (if (= sum 8) #t #f)]\n      [(= n 9) (if (= sum 9) #t #f)]\n      [(= n 10) (if (= sum 10) #t #f)]\n      [(= n 11) (if (= sum 11) #t #f)]\n      [(= n 12) (if (= sum 12) #t #f)]\n      [(= n 13) (if (= sum 13) #t #f)]\n      [(= n 14) (if (= sum 14) #t #f)]\n      [(= n 15) (if (= sum 15) #t #f)]\n      [(= n 16) (if (= sum 16) #t #f)]\n      [(= n 17) (if (= sum 17) #t #f)]\n      [(= n 18) (if (= sum 18) #t #f)]\n      [(= n 19) (if (= sum 19) #t #f)]\n      [(= n 20) (if (= sum 20) #t #f)]\n      [(= n 21) (if (= sum 21) #t #f)]\n      [(= n 22) (if (= sum 22) #t #f)]\n      [(= n 23) (if (= sum 23) #t #f)]\n      [(= n 24) (if (= sum 24) #t #f)]\n      [(= n 25) (if (= sum 25) #t #f)]\n      [(= n 26) (if (= sum 26) #t #f)]",
    "  (define (helper n acc)\n    (cond\n      [(= n 0) (reverse acc)]\n      [(= n 1) (reverse (cons 1 acc))]\n      [(even? n) (helper (/ n 2) (cons 0 acc))]\n      [else (helper (- n 1) (cons 1 acc))]))\n  (helper n '()))\n",
    "  (if (= n 0)\n      #f\n      (let loop ((n n) (i 0))\n        (if (= n 0)\n            #t\n            (if (= (modulo n 2) 1)\n                (loop (quotient n 2) (+ i 1))\n                (loop (quotient n 2) i))))))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n i)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #f]\n      [(= n (expt 2 i)) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 1)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 2)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 3)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 4)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 5)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 6)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 7)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 8)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 9)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 10)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 11)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 12)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 13)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 14)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 15)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 16)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 17)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 18)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 19)))) #t]\n      [(= n (+ (expt 2 i) (expt",
    "  (define (is_Sum_Of_Powers_Of_Two_iter n i)\n    (cond ((= n 0) #t)\n          ((= n 1) #f)\n          ((= n (expt 2 i)) #t)\n          ((&gt; n (expt 2 i)) (is_Sum_Of_Powers_Of_Two_iter (- n (expt 2 i)) (+ i 1)))\n          (else (is_Sum_Of_Powers_Of_Two_iter n (+ i 1)))))\n  (is_Sum_Of_Powers_Of_Two_iter n 0))\n",
    "  (define (is_Power_Of_Two n)\n    (cond ((= n 1) #t)\n          ((= n 2) #t)\n          ((= n 4) #t)\n          ((= n 8) #t)\n          ((= n 16) #t)\n          ((= n 32) #t)\n          ((= n 64) #t)\n          ((= n 128) #t)\n          ((= n 256) #t)\n          ((= n 512) #t)\n          ((= n 1024) #t)\n          ((= n 2048) #t)\n          ((= n 4096) #t)\n          ((= n 8192) #t)\n          ((= n 16384) #t)\n          ((= n 32768) #t)\n          ((= n 65536) #t)\n          ((= n 131072) #t)\n          ((= n 262144) #t)\n          ((= n 524288) #t)\n          ((= n 1048576) #t)\n          ((= n 2097152) #t)\n          ((= n 4194304) #t)\n          ((= n 8388608) #t)\n          ((= n 16777216) #t)\n          ((= n 33554432) #t)\n          ((= n 67108864) #t)\n          ((= n 134217728) #t)\n          ((= n 268435456) #t)\n          ((= n 536870912) #t)\n          ((= n 1073741824) #t)\n          ((= n 2147483648) #t)\n          ((= n 4294967296) #t)\n          ((= n 8589934592) #t)\n          ((= n 17179869184) #t)\n          ((= n 34359738368) #t)\n          ((= n 68719476736) #t)\n          ((= n 137438953472) #t)\n          ((= n 274877906944) #t)\n          ((= n 549755813888) #t)\n          ((= n 1099511627776) #t)\n          ((= n",
    "  (define (is_Sum_Of_Powers_Of_Two_iter n sum)\n    (cond\n      [(= n 0) #t]\n      [(= n sum) #f]\n      [(= n (sub1 sum)) #t]\n      [(< n sum) (is_Sum_Of_Powers_Of_Two_iter n (sub1 sum))]\n      [else (is_Sum_Of_Powers_Of_Two_iter (sub1 n) sum)]))\n  (is_Sum_Of_Powers_Of_Two_iter n n))\n",
    "  (if (= n 0)\n      #f\n      (let loop ((n n) (i 0))\n        (if (= n 0)\n            #t\n            (if (= (remainder n 2) 1)\n                (loop (quotient n 2) (+ i 1))\n                (loop n (+ i 1)))))))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_iter n i)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #f]\n      [(= n (expt 2 i)) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 1)))) #t]\n      [else (is_Sum_Of_Powers_Of_Two_iter n (+ i 1))]))\n  (is_Sum_Of_Powers_Of_Two_iter n 0))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_iter n acc)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) (if (member 1 acc) #f #t)]\n      [(= n 2) (if (member 2 acc) #f #t)]\n      [(= n 3) (if (member 3 acc) #f #t)]\n      [(= n 4) (if (member 4 acc) #f #t)]\n      [(= n 5) (if (member 5 acc) #f #t)]\n      [(= n 6) (if (member 6 acc) #f #t)]\n      [(= n 7) (if (member 7 acc) #f #t)]\n      [(= n 8) (if (member 8 acc) #f #t)]\n      [(= n 9) (if (member 9 acc) #f #t)]\n      [(= n 10) (if (member 10 acc) #f #t)]\n      [(= n 11) (if (member 11 acc) #f #t)]\n      [(= n 12) (if (member 12 acc) #f #t)]\n      [(= n 13) (if (member 13 acc) #f #t)]\n      [(= n 14) (if (member 14 acc) #f #t)]\n      [(= n 15) (if (member 15 acc) #f #t)]\n      [(= n 16) (if (member 16 acc) #f #t)]\n      [(= n 17) (if (member 17 acc) #f #t)]\n      [(= n 18) (if (member 18 acc) #f #t)]\n      [(= n 19) (if (member 19 acc) #f #t)]\n      [(= n 20) (if (member 20 acc) #f #t)]\n      [(= n 21) (if (member 21 acc) #f #t)]\n      [(= n 22) (if (member 22 acc) #f #t)]\n      [(= n 23) (if (member 23 acc) #f #t)]\n      [(= n 24) (if (member 24 acc) #f #t)]\n      [(= n 25) (if (member 25 acc) #f #t)]\n",
    "  (let loop ([n n] [i 0])\n    (if (= n 0)\n        #f\n        (if (= (modulo n 2) 1)\n            (loop (quotient n 2) (+ i 1))\n            (if (= (modulo n 2) 0)\n                (loop (quotient n 2) (+ i 1))\n                #f)))))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_iter n i)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #f]\n      [(= n (expt 2 i)) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 1)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 2)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 3)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 4)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 5)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 6)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 7)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 8)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 9)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 10)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 11)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 12)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 13)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 14)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 15)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 16)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 17)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 18)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 19)))) #t]\n      [(= n (+ (expt 2 i) (expt",
    "  (define (is_Sum_Of_Powers_Of_Two_iter n i)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #f]\n      [(= (remainder n 2) 0) (is_Sum_Of_Powers_Of_Two_iter (/ n 2) (+ i 1))]\n      [else (is_Sum_Of_Powers_Of_Two_iter (- n 1) (+ i 1))]))\n  (is_Sum_Of_Powers_Of_Two_iter n 0))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_ n i)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #t]\n      [(= n 2) #t]\n      [(= n 3) #t]\n      [(= n 4) #t]\n      [(= n 5) #t]\n      [(= n 6) #t]\n      [(= n 7) #t]\n      [(= n 8) #t]\n      [(= n 9) #t]\n      [(= n 10) #t]\n      [(= n 11) #t]\n      [(= n 12) #t]\n      [(= n 13) #t]\n      [(= n 14) #t]\n      [(= n 15) #t]\n      [(= n 16) #t]\n      [(= n 17) #t]\n      [(= n 18) #t]\n      [(= n 19) #t]\n      [(= n 20) #t]\n      [(= n 21) #t]\n      [(= n 22) #t]\n      [(= n 23) #t]\n      [(= n 24) #t]\n      [(= n 25) #t]\n      [(= n 26) #t]\n      [(= n 27) #t]\n      [(= n 28) #t]\n      [(= n 29) #t]\n      [(= n 30) #t]\n      [(= n 31) #t]\n      [(= n 32) #t]\n      [(= n 33) #t]\n      [(= n 34) #t]\n      [(= n 35) #t]\n      [(= n 36) #t]\n      [(= n 37) #t]\n      [(= n 38) #t]\n      [(= n 39) #t]\n      [(= n 40) #t]\n      [(= n 41) #t]\n      [(= n 42) #t]\n      [(= n 43) #t]\n      [(= n 44) #t]\n      [(= n 45) #t]\n      [(= n 46) #t]\n      [(= n 47) #t]\n      [(= n 48)",
    "  (define (is_Sum_Of_Powers_Of_Two_iter n i)\n    (cond ((= n 0) #t)\n          ((= n 1) #f)\n          ((= n (expt 2 i)) #t)\n          ((&lt; n (expt 2 i)) (is_Sum_Of_Powers_Of_Two_iter n (- i 1)))\n          (else (is_Sum_Of_Powers_Of_Two_iter (- n (expt 2 i)) i))))\n  (is_Sum_Of_Powers_Of_Two_iter n (floor (/ (log n) (log 2)))))\n</code>\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #f]\n      [else\n       (or (= (modulo n 2) 0)\n           (is_Sum_Of_Powers_Of_Two_Helper (- n 1)))]))\n  (is_Sum_Of_Powers_Of_Two_Helper n))\n",
    "  (let loop ([n n] [i 0])\n    (cond\n      [(= n 0) #t]\n      [(< n 0) #f]\n      [else\n       (cond\n         [(= (modulo n (expt 2 i)) 0) (loop (- n (expt 2 i)) i)]\n         [else (loop n (+ i 1))])])))\n",
    "  (cond\n    [(= n 1) #t]\n    [(= n 2) #t]\n    [(= n 3) #f]\n    [(= n 4) #t]\n    [(= n 5) #f]\n    [(= n 6) #f]\n    [(= n 7) #f]\n    [(= n 8) #t]\n    [(= n 9) #f]\n    [(= n 10) #f]\n    [(= n 11) #f]\n    [(= n 12) #f]\n    [(= n 13) #f]\n    [(= n 14) #f]\n    [(= n 15) #f]\n    [(= n 16) #t]\n    [(= n 17) #f]\n    [(= n 18) #f]\n    [(= n 19) #f]\n    [(= n 20) #f]\n    [(= n 21) #f]\n    [(= n 22) #f]\n    [(= n 23) #f]\n    [(= n 24) #f]\n    [(= n 25) #f]\n    [(= n 26) #f]\n    [(= n 27) #f]\n    [(= n 28) #f]\n    [(= n 29) #f]\n    [(= n 30) #f]\n    [(= n 31) #f]\n    [(= n 32) #t]\n    [(= n 33) #f]\n    [(= n 34) #f]\n    [(= n 35) #f]\n    [(= n 36) #f]\n    [(= n 37) #f]\n    [(= n 38) #f]\n    [(= n 39) #f]\n    [(= n 40) #f]\n    [(= n 41) #f]\n    [(= n 42) #f]\n    [(= n 43) #f]\n    [(= n 44) #f]\n    [(= n 45) #f]\n    [(= n 46) #f]\n    [(= n 47) #f]\n    [(= n 48) #f]\n    [(= n 49) #f]\n    [(= n 50) #f]\n    [(= n 51) #",
    "  (define (is_Sum_Of_Powers_Of_Two_iter n i)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #f]\n      [(= n (expt 2 i)) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 1)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 2)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 3)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 4)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 5)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 6)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 7)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 8)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 9)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 10)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 11)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 12)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 13)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 14)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 15)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 16)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 17)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 18)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 19)))) #t]\n      [(= n (+ (expt 2 i) (expt",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #t]\n      [(= n 2) #t]\n      [(= n 3) #f]\n      [(= n 4) #t]\n      [(= n 5) #f]\n      [(= n 6) #f]\n      [(= n 7) #f]\n      [(= n 8) #t]\n      [(= n 9) #f]\n      [(= n 10) #f]\n      [(= n 11) #f]\n      [(= n 12) #f]\n      [(= n 13) #f]\n      [(= n 14) #f]\n      [(= n 15) #f]\n      [(= n 16) #t]\n      [(= n 17) #f]\n      [(= n 18) #f]\n      [(= n 19) #f]\n      [(= n 20) #f]\n      [(= n 21) #f]\n      [(= n 22) #f]\n      [(= n 23) #f]\n      [(= n 24) #f]\n      [(= n 25) #f]\n      [(= n 26) #f]\n      [(= n 27) #f]\n      [(= n 28) #f]\n      [(= n 29) #f]\n      [(= n 30) #f]\n      [(= n 31) #f]\n      [(= n 32) #t]\n      [else #f]))\n  (is_Sum_Of_Powers_Of_Two_Helper n))\n",
    "  (cond\n    [(= n 0) #f]\n    [(= n 1) #t]\n    [(= n 2) #t]\n    [else\n     (let loop ([n n])\n       (cond\n         [(= n 0) #t]\n         [(= n 1) #t]\n         [(= n 2) #t]\n         [(= n 3) #f]\n         [(= n 4) #t]\n         [(= n 5) #f]\n         [(= n 6) #f]\n         [(= n 7) #f]\n         [(= n 8) #t]\n         [(= n 9) #f]\n         [(= n 10) #f]\n         [(= n 11) #f]\n         [(= n 12) #f]\n         [(= n 13) #f]\n         [(= n 14) #f]\n         [(= n 15) #f]\n         [(= n 16) #t]\n         [(= n 17) #f]\n         [(= n 18) #f]\n         [(= n 19) #f]\n         [(= n 20) #f]\n         [(= n 21) #f]\n         [(= n 22) #f]\n         [(= n 23) #f]\n         [(= n 24) #f]\n         [(= n 25) #f]\n         [(= n 26) #f]\n         [(= n 27) #f]\n         [(= n 28) #f]\n         [(= n 29) #f]\n         [(= n 30) #f]\n         [(= n 31) #f]\n         [(= n 32) #t]\n         [(= n 33) #f]\n         [(= n 34) #f]\n         [(= n 35) #f]\n         [(= n 36) #f]\n         [(= n 37) #f]\n         [(= n 38) #f]\n         [(= n 39) #f]\n         [(= n 40) #f]\n         [(= n 41) #f]\n         [(= n 42) #f]\n         [(= n 43) #f]\n         [(= n 44) #f]\n         [(= n 45) #f]\n",
    "  (if (= n 0)\n      #f\n      (let loop ([n n] [i 0])\n        (if (= n 1)\n            #t\n            (if (= (modulo n 2) 0)\n                (loop (quotient n 2) (+ i 1))\n                (loop (- n (expt 2 i)) (+ i 1)))))))\n"
  ]
}