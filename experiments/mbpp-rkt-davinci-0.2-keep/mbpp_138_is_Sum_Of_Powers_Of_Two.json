{
  "name": "mbpp_138_is_Sum_Of_Powers_Of_Two",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n(define (is_Sum_Of_Powers_Of_Two n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_138_is_Sum_Of_Powers_Of_Two.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sum_Of_Powers_Of_Two))\n    (check-equal? (candidate 10) #t)\n    (check-equal? (candidate 7) #f)\n    (check-equal? (candidate 14) #t)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n sum)\n    (cond\n      [(= n sum) #t]\n      [(< n sum) #f]\n      [else\n       (or (is_Sum_Of_Powers_Of_Two_Helper n (+ sum (expt 2 (floor (log n 2)))))\n           (is_Sum_Of_Powers_Of_Two_Helper n (+ sum (expt 2 (floor (log n 2) - 1)))))]))\n  (is_Sum_Of_Powers_Of_Two_Helper n 0))\n",
    "  (define (helper n result)\n    (cond\n      [(= n 0) result]\n      [(= n 1) (cons 1 result)]\n      [(= (remainder n 2) 0) (helper (/ n 2) (cons 2 result))]\n      [else (helper (- n 1) (cons 1 result))]))\n  (helper n '()))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #t]\n      [(= n 2) #t]\n      [(= n 3) #f]\n      [(= n 4) #t]\n      [(= n 5) #f]\n      [(= n 6) #f]\n      [(= n 7) #f]\n      [(= n 8) #t]\n      [(= n 9) #f]\n      [(= n 10) #f]\n      [(= n 11) #f]\n      [(= n 12) #f]\n      [(= n 13) #f]\n      [(= n 14) #f]\n      [(= n 15) #f]\n      [(= n 16) #t]\n      [(= n 17) #f]\n      [(= n 18) #f]\n      [(= n 19) #f]\n      [(= n 20) #f]\n      [(= n 21) #f]\n      [(= n 22) #f]\n      [(= n 23) #f]\n      [(= n 24) #f]\n      [(= n 25) #f]\n      [(= n 26) #f]\n      [(= n 27) #f]\n      [(= n 28) #f]\n      [(= n 29) #f]\n      [(= n 30) #f]\n      [(= n 31) #f]\n      [(= n 32) #t]\n      [(= n 33) #f]\n      [(= n 34) #f]\n      [(= n 35) #f]\n      [(= n 36) #f]\n      [(= n 37) #f]\n      [(= n 38) #f]\n      [(= n 39) #f]\n      [(= n 40) #f]\n      [(= n 41) #f]\n      [(= n 42) #f]\n      [(= n 43) #f]\n      [(= n 44) #f]\n      [(= n 45) #f]\n      [(= n 46) #f]\n      [(= n 47) #f]\n      [(= n 48)",
    "  (cond\n    [(= n 0) #f]\n    [(= n 1) #t]\n    [else\n     (let loop ([n n])\n       (cond\n         [(= n 0) #t]\n         [(= n 1) #t]\n         [(= n 2) #t]\n         [(= n 3) #f]\n         [(= n 4) #t]\n         [(= n 5) #f]\n         [(= n 6) #f]\n         [(= n 7) #f]\n         [(= n 8) #t]\n         [(= n 9) #f]\n         [(= n 10) #f]\n         [(= n 11) #f]\n         [(= n 12) #f]\n         [(= n 13) #f]\n         [(= n 14) #f]\n         [(= n 15) #f]\n         [(= n 16) #t]\n         [else\n          (loop (- n 16))]))]))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_helper n i)\n    (cond\n      [(= n 0) #t]\n      [(= n (expt 2 i)) #t]\n      [(&gt; n (expt 2 i)) (or (is_Sum_Of_Powers_Of_Two_helper (- n (expt 2 i)) (+ i 1))\n                             (is_Sum_Of_Powers_Of_Two_helper n (+ i 1)))]\n      [else #f]))\n  (is_Sum_Of_Powers_Of_Two_helper n 0))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n i)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #f]\n      [(= n (expt 2 i)) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 1)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 2)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 3)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 4)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 5)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 6)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 7)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 8)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 9)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 10)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 11)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 12)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 13)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 14)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 15)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 16)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 17)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 18)))) #t]\n      [(= n (+ (expt 2 i) (expt 2 (- i 19)))) #t]\n      [(= n (+ (expt 2 i) (expt",
    "  (let loop ([n n] [i 0])\n    (cond [(= n 0) #t]\n          [(= n (expt 2 i)) #t]\n          [(&lt; n (expt 2 i)) #f]\n          [else (loop (- n (expt 2 i)) (+ i 1))])))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_iter n i)\n    (cond\n      [(= n 0) #t]\n      [(= n (expt 2 i)) #t]\n      [(< n (expt 2 i)) (is_Sum_Of_Powers_Of_Two_iter n (- i 1))]\n      [else (or (is_Sum_Of_Powers_Of_Two_iter (- n (expt 2 i)) (- i 1))\n                (is_Sum_Of_Powers_Of_Two_iter n (- i 1)))]))\n  (is_Sum_Of_Powers_Of_Two_iter n (floor (log n 2))))\n",
    "  (if (= n 0)\n      #f\n      (let loop ((n n) (i 1))\n        (if (= n 1)\n            #t\n            (if (= (modulo n 2) 1)\n                (loop (quotient n 2) (+ i 1))\n                #f)))))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n p)\n    (cond\n      [(= n 0) #t]\n      [(= n p) #t]\n      [(< n p) #f]\n      [else (or (is_Sum_Of_Powers_Of_Two_Helper (- n p) p)\n                (is_Sum_Of_Powers_Of_Two_Helper n (* p 2)))]))\n  (is_Sum_Of_Powers_Of_Two_Helper n 1))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n acc)\n    (if (= n 0)\n        acc\n        (let ([m (logand n (- n 1))])\n          (is_Sum_Of_Powers_Of_Two_Helper (logand n (- n 1)) (cons (logand n (- n 1)) acc)))))\n  (is_Sum_Of_Powers_Of_Two_Helper n '()))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n p)\n    (if (= n 0)\n        #t\n        (if (= n (expt 2 p))\n            #t\n            (if (&lt; n (expt 2 p))\n                (is_Sum_Of_Powers_Of_Two_Helper n (- p 1))\n                (is_Sum_Of_Powers_Of_Two_Helper (- n (expt 2 p)) p)))))\n  (is_Sum_Of_Powers_Of_Two_Helper n (floor (log n 2))))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n sum)\n    (cond\n      [(= n 0) #t]\n      [(= n sum) #t]\n      [(> n sum) (is_Sum_Of_Powers_Of_Two_Helper n (+ sum (expt 2 (floor (log n 2)))))])\n      [else #f]))\n  (is_Sum_Of_Powers_Of_Two_Helper n 0))\n",
    "  (define (is_Sum_Of_Powers_Of_Two-iter n sum)\n    (cond\n      [(= n 0) #t]\n      [(= n sum) #t]\n      [(< n sum) #f]\n      [else (is_Sum_Of_Powers_Of_Two-iter (- n sum) (+ sum (expt 2 (floor (log n sum)))))]))\n  (is_Sum_Of_Powers_Of_Two-iter n 1))\n",
    "  (let loop ((n n) (i 0))\n    (cond ((= n 0) #t)\n          ((< n 0) #f)\n          ((= (remainder n 2) 1)\n           (loop (- n (expt 2 i)) (+ i 1)))\n          (else (loop (/ n 2) (+ i 1))))))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #t]\n      [(= n 2) #t]\n      [(= n 3) #f]\n      [(= n 4) #t]\n      [(= n 5) #f]\n      [(= n 6) #f]\n      [(= n 7) #f]\n      [(= n 8) #t]\n      [(= n 9) #f]\n      [(= n 10) #f]\n      [(= n 11) #f]\n      [(= n 12) #f]\n      [(= n 13) #f]\n      [(= n 14) #f]\n      [(= n 15) #f]\n      [(= n 16) #t]\n      [(= n 17) #f]\n      [(= n 18) #f]\n      [(= n 19) #f]\n      [(= n 20) #f]\n      [(= n 21) #f]\n      [(= n 22) #f]\n      [(= n 23) #f]\n      [(= n 24) #f]\n      [(= n 25) #f]\n      [(= n 26) #f]\n      [(= n 27) #f]\n      [(= n 28) #f]\n      [(= n 29) #f]\n      [(= n 30) #f]\n      [(= n 31) #f]\n      [(= n 32) #t]\n      [(= n 33) #f]\n      [(= n 34) #f]\n      [(= n 35) #f]\n      [(= n 36) #f]\n      [(= n 37) #f]\n      [(= n 38) #f]\n      [(= n 39) #f]\n      [(= n 40) #f]\n      [(= n 41) #f]\n      [(= n 42) #f]\n      [(= n 43) #f]\n      [(= n 44) #f]\n      [(= n 45) #f]\n      [(= n 46) #f]\n      [(= n 47) #f]\n      [(= n 48)",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #t]\n      [(= n 2) #t]\n      [(= n 3) #f]\n      [(= n 4) #t]\n      [(= n 5) #f]\n      [(= n 6) #f]\n      [(= n 7) #f]\n      [(= n 8) #t]\n      [(= n 9) #f]\n      [(= n 10) #f]\n      [(= n 11) #f]\n      [(= n 12) #f]\n      [(= n 13) #f]\n      [(= n 14) #f]\n      [(= n 15) #f]\n      [(= n 16) #t]\n      [(= n 17) #f]\n      [(= n 18) #f]\n      [(= n 19) #f]\n      [(= n 20) #f]\n      [(= n 21) #f]\n      [(= n 22) #f]\n      [(= n 23) #f]\n      [(= n 24) #f]\n      [(= n 25) #f]\n      [(= n 26) #f]\n      [(= n 27) #f]\n      [(= n 28) #f]\n      [(= n 29) #f]\n      [(= n 30) #f]\n      [(= n 31) #f]\n      [(= n 32) #t]\n      [(= n 33) #f]\n      [(= n 34) #f]\n      [(= n 35) #f]\n      [(= n 36) #f]\n      [(= n 37) #f]\n      [(= n 38) #f]\n      [(= n 39) #f]\n      [(= n 40) #f]\n      [(= n 41) #f]\n      [(= n 42) #f]\n      [(= n 43) #f]\n      [(= n 44) #f]\n      [(= n 45) #f]\n      [(= n 46) #f]\n      [(= n 47) #f]\n      [(= n 48)",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n i)\n    (if (= n 0)\n        #t\n        (if (= n (expt 2 i))\n            #t\n            (if (&lt; n (expt 2 i))\n                (is_Sum_Of_Powers_Of_Two_Helper n (- i 1))\n                (is_Sum_Of_Powers_Of_Two_Helper (- n (expt 2 i)) (- i 1))))))\n  (is_Sum_Of_Powers_Of_Two_Helper n (floor (log n 2))))\n",
    "  (if (= n 0)\n      #f\n      (if (= n 1)\n          #t\n          (if (= n 2)\n              #t\n              (if (= n 3)\n                  #f\n                  (if (= n 4)\n                      #t\n                      (if (= n 5)\n                          #f\n                          (if (= n 6)\n                              #f\n                              (if (= n 7)\n                                  #f\n                                  (if (= n 8)\n                                      #t\n                                      (if (= n 9)\n                                          #f\n                                          (if (= n 10)\n                                              #f\n                                              (if (= n 11)\n                                                  #f\n                                                  (if (= n 12)\n                                                      #f\n                                                      (if (= n 13)\n                                                          #f\n                                                          (if (= n 14)\n                                                              #f\n                                                              (if (= n 15)\n                                                                  #f\n                                                                  (if (= n 16)\n                                                                      #t\n                                                                      (if (= n 17)\n                                                                          #f\n                                                                          (if (= n 18)\n                                                                              #f\n                                                                              (if (= n 19)\n                                                                                  #f\n                                                                                  (if (= n 20)\n                                                                                      #f\n                                                                                      (if (= n 21)\n                                                                                          #f\n                                                                                          (if (= n 22)\n                                                                                              #f\n                                                                                              (if (= n 23)\n                                                                                                  #f\n                                                                                                  (if (= n 24)\n                                                                                                      #f\n                                                                                                      (if (= n 25)\n                                                                                                          #f\n                                                                                                          (if (= n 26)\n                                                                                                              #f\n                                                                                                              (if (= n 27)\n                                                                                                                  #f\n                                                                                                                  (if (= n 28)\n                                                                                                                      #f\n                ",
    "  (cond\n    [(= n 0) #f]\n    [(= n 1) #t]\n    [else (is_Sum_Of_Powers_Of_Two (- n (expt 2 (floor (log n 2)))))]))\n"
  ]
}