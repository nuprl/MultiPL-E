{
  "name": "mbpp_272_rear_extract",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_272_rear_extract.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (car (reverse x))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (car (cdr x))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0n7zcoip.rkt:12:4\nactual:     '(\"Rash\" \"Varsha\" \"Kil\")\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0n7zcoip.rkt:13:4\nactual:     '(\"Sai\" \"Ayesha\" \"Salman\")\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0n7zcoip.rkt:14:4\nactual:     '(\"Sudeep\" \"Vandana\" \"Dawood\")\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map cdr test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4e6m_x0e.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4e6m_x0e.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4e6m_x0e.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (tuple)\n         (cdr tuple))\n       test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphfn1d6fb.rkt:14:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphfn1d6fb.rkt:15:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphfn1d6fb.rkt:16:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (car (cdr x))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0n7zcoip.rkt:12:4\nactual:     '(\"Rash\" \"Varsha\" \"Kil\")\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0n7zcoip.rkt:13:4\nactual:     '(\"Sai\" \"Ayesha\" \"Salman\")\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0n7zcoip.rkt:14:4\nactual:     '(\"Sudeep\" \"Vandana\" \"Dawood\")\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x)\n         (cdr x))\n       test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3axvm6co.rkt:14:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3axvm6co.rkt:15:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3axvm6co.rkt:16:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (tuple) (cdr tuple)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk9wdrz8c.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk9wdrz8c.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk9wdrz8c.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (car (cdr x))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0n7zcoip.rkt:12:4\nactual:     '(\"Rash\" \"Varsha\" \"Kil\")\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0n7zcoip.rkt:13:4\nactual:     '(\"Sai\" \"Ayesha\" \"Salman\")\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0n7zcoip.rkt:14:4\nactual:     '(\"Sudeep\" \"Vandana\" \"Dawood\")\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x)\n         (cdr x))\n       test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3axvm6co.rkt:14:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3axvm6co.rkt:15:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3axvm6co.rkt:16:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (car (cdr x))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0n7zcoip.rkt:12:4\nactual:     '(\"Rash\" \"Varsha\" \"Kil\")\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0n7zcoip.rkt:13:4\nactual:     '(\"Sai\" \"Ayesha\" \"Salman\")\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0n7zcoip.rkt:14:4\nactual:     '(\"Sudeep\" \"Vandana\" \"Dawood\")\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map cdr test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4e6m_x0e.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4e6m_x0e.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4e6m_x0e.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map cdr test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4e6m_x0e.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4e6m_x0e.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4e6m_x0e.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n  (map (lambda (x) (cdr x)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:12:4\nactual:     '((\"Rash\" 21) (\"Varsha\" 20) (\"Kil\" 19))\nexpected:   '(21 20 19)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:13:4\nactual:     '((\"Sai\" 36) (\"Ayesha\" 25) (\"Salman\" 45))\nexpected:   '(36 25 45)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6yvlxz42.rkt:14:4\nactual:     '((\"Sudeep\" 14) (\"Vandana\" 36) (\"Dawood\" 56))\nexpected:   '(14 36 56)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    }
  ]
}