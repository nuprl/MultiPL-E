{
  "name": "mbpp_475_sort_counter",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_475_sort_counter.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (x) (list (cdr x) (car x))) dict1)\n        <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpka2gb3be.rkt:13:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 87) (\"Math\" . 81) (\"Physics\" . 83))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpka2gb3be.rkt:14:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 250) (\"Math\" . 400) (\"Physics\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpka2gb3be.rkt:15:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 1250) (\"Math\" . 900) (\"Physics\" . 1000))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        < #:key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpis8thk1e.rkt:14:4\nactual:     '((81 \"Math\") (83 \"Physics\") (87 \"Chemistry\"))\nexpected:   '((\"Chemistry\" 87) (\"Physics\" 83) (\"Math\" 81))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpis8thk1e.rkt:15:4\nactual:     '((250 \"Chemistry\") (300 \"Physics\") (400 \"Math\"))\nexpected:   '((\"Math\" 400) (\"Physics\" 300) (\"Chemistry\" 250))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpis8thk1e.rkt:16:4\nactual:     '((900 \"Math\") (1000 \"Physics\") (1250 \"Chemistry\"))\nexpected:   '((\"Chemistry\" 1250) (\"Physics\" 1000) (\"Math\" 900))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "/tmp/tmpmhcusmma.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpmhcusmma.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "/tmp/tmpmhcusmma.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpmhcusmma.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        (lambda (x y) (&lt; (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "/tmp/tmplgd67swd.rkt:6:22: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 8\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (x) (list (car x) (cdr x))) dict1)\n        (lambda (x y) (< (cadr x) (cadr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa8sd9r3_.rkt:13:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 87) (\"Math\" . 81) (\"Physics\" . 83))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa8sd9r3_.rkt:14:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 250) (\"Math\" . 400) (\"Physics\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa8sd9r3_.rkt:15:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 1250) (\"Math\" . 900) (\"Physics\" . 1000))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "/tmp/tmpmhcusmma.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpmhcusmma.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "/tmp/tmpmhcusmma.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpmhcusmma.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(k v) dict1])\n          (list v k))\n        <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbownvrcg.rkt:14:4\n\n<: contract violation\n  expected: real?\n  given: '(81 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbownvrcg.rkt:15:4\n\n<: contract violation\n  expected: real?\n  given: '(400 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbownvrcg.rkt:16:4\n\n<: contract violation\n  expected: real?\n  given: '(900 \"Math\")\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpneisn8kv.rkt:14:4\n\n<: contract violation\n  expected: real?\n  given: '(81 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpneisn8kv.rkt:15:4\n\n<: contract violation\n  expected: real?\n  given: '(400 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpneisn8kv.rkt:16:4\n\n<: contract violation\n  expected: real?\n  given: '(900 \"Math\")\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (x) (list (car x) (cdr x))) dict1)\n        (lambda (x y) (&lt; (cadr x) (cadr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "/tmp/tmpom5ssqzk.rkt:6:22: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 8\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "/tmp/tmpmhcusmma.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpmhcusmma.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        (lambda (x y) (&lt; (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "/tmp/tmplgd67swd.rkt:6:22: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 8\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpguxqnf29.rkt:14:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 87) (\"Math\" . 81) (\"Physics\" . 83))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpguxqnf29.rkt:15:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 250) (\"Math\" . 400) (\"Physics\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpguxqnf29.rkt:16:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 1250) (\"Math\" . 900) (\"Physics\" . 1000))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        (lambda (x y) (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpom20tcd5.rkt:13:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 87) (\"Math\" . 81) (\"Physics\" . 83))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpom20tcd5.rkt:14:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 250) (\"Math\" . 400) (\"Physics\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpom20tcd5.rkt:15:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 1250) (\"Math\" . 900) (\"Physics\" . 1000))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "/tmp/tmpmhcusmma.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpmhcusmma.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpneisn8kv.rkt:14:4\n\n<: contract violation\n  expected: real?\n  given: '(81 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpneisn8kv.rkt:15:4\n\n<: contract violation\n  expected: real?\n  given: '(400 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpneisn8kv.rkt:16:4\n\n<: contract violation\n  expected: real?\n  given: '(900 \"Math\")\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "/tmp/tmpmhcusmma.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpmhcusmma.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(k v) dict1])\n          (list v k))\n        <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbownvrcg.rkt:14:4\n\n<: contract violation\n  expected: real?\n  given: '(81 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbownvrcg.rkt:15:4\n\n<: contract violation\n  expected: real?\n  given: '(400 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbownvrcg.rkt:16:4\n\n<: contract violation\n  expected: real?\n  given: '(900 \"Math\")\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "/tmp/tmpmhcusmma.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpmhcusmma.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpneisn8kv.rkt:14:4\n\n<: contract violation\n  expected: real?\n  given: '(81 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpneisn8kv.rkt:15:4\n\n<: contract violation\n  expected: real?\n  given: '(400 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpneisn8kv.rkt:16:4\n\n<: contract violation\n  expected: real?\n  given: '(900 \"Math\")\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "/tmp/tmpmhcusmma.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpmhcusmma.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(k v) dict1])\n          (list v k))\n        <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbownvrcg.rkt:14:4\n\n<: contract violation\n  expected: real?\n  given: '(81 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbownvrcg.rkt:15:4\n\n<: contract violation\n  expected: real?\n  given: '(400 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbownvrcg.rkt:16:4\n\n<: contract violation\n  expected: real?\n  given: '(900 \"Math\")\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (x) (cons (cdr x) (car x))) (dict-keys dict1)) <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfh9wh5v3.rkt:12:4\n\ncdr: contract violation\n  expected: pair?\n  given: \"Chemistry\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfh9wh5v3.rkt:13:4\n\ncdr: contract violation\n  expected: pair?\n  given: \"Chemistry\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfh9wh5v3.rkt:14:4\n\ncdr: contract violation\n  expected: pair?\n  given: \"Chemistry\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "/tmp/tmpmhcusmma.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpmhcusmma.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (x) (list (car x) (cdr x))) dict1)\n        (lambda (x y) (&lt; (cadr x) (cadr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "/tmp/tmpom5ssqzk.rkt:6:22: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 8\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        (lambda (x y) (&lt; (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "/tmp/tmplgd67swd.rkt:6:22: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 8\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(k v) dict1])\n          (list v k))\n        <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbownvrcg.rkt:14:4\n\n<: contract violation\n  expected: real?\n  given: '(81 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbownvrcg.rkt:15:4\n\n<: contract violation\n  expected: real?\n  given: '(400 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbownvrcg.rkt:16:4\n\n<: contract violation\n  expected: real?\n  given: '(900 \"Math\")\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        < #:key first))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3w147t5w.rkt:14:4\nactual:     '((81 \"Math\") (83 \"Physics\") (87 \"Chemistry\"))\nexpected:   '((\"Chemistry\" 87) (\"Physics\" 83) (\"Math\" 81))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3w147t5w.rkt:15:4\nactual:     '((250 \"Chemistry\") (300 \"Physics\") (400 \"Math\"))\nexpected:   '((\"Math\" 400) (\"Physics\" 300) (\"Chemistry\" 250))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3w147t5w.rkt:16:4\nactual:     '((900 \"Math\") (1000 \"Physics\") (1250 \"Chemistry\"))\nexpected:   '((\"Chemistry\" 1250) (\"Physics\" 1000) (\"Math\" 900))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        (lambda (x y) (&gt; (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "/tmp/tmppo85gjwe.rkt:6:22: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 8\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "/tmp/tmpmhcusmma.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpmhcusmma.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(k v) dict1])\n          (list v k))\n        <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbownvrcg.rkt:14:4\n\n<: contract violation\n  expected: real?\n  given: '(81 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbownvrcg.rkt:15:4\n\n<: contract violation\n  expected: real?\n  given: '(400 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbownvrcg.rkt:16:4\n\n<: contract violation\n  expected: real?\n  given: '(900 \"Math\")\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(k v) dict1])\n          (list v k))\n        <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbownvrcg.rkt:14:4\n\n<: contract violation\n  expected: real?\n  given: '(81 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbownvrcg.rkt:15:4\n\n<: contract violation\n  expected: real?\n  given: '(400 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbownvrcg.rkt:16:4\n\n<: contract violation\n  expected: real?\n  given: '(900 \"Math\")\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "/tmp/tmpmhcusmma.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpmhcusmma.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        (lambda (x y) (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpom20tcd5.rkt:13:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 87) (\"Math\" . 81) (\"Physics\" . 83))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpom20tcd5.rkt:14:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 250) (\"Math\" . 400) (\"Physics\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpom20tcd5.rkt:15:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 1250) (\"Math\" . 900) (\"Physics\" . 1000))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        < #:key first))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3w147t5w.rkt:14:4\nactual:     '((81 \"Math\") (83 \"Physics\") (87 \"Chemistry\"))\nexpected:   '((\"Chemistry\" 87) (\"Physics\" 83) (\"Math\" 81))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3w147t5w.rkt:15:4\nactual:     '((250 \"Chemistry\") (300 \"Physics\") (400 \"Math\"))\nexpected:   '((\"Math\" 400) (\"Physics\" 300) (\"Chemistry\" 250))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3w147t5w.rkt:16:4\nactual:     '((900 \"Math\") (1000 \"Physics\") (1250 \"Chemistry\"))\nexpected:   '((\"Chemistry\" 1250) (\"Physics\" 1000) (\"Math\" 900))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(k v) (in-list dict1)])\n         (list v k))\n        <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcf5b94fy.rkt:14:4\n\nin-list: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 87) (\"Math\" . 81) (\"Physics\" . 83))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcf5b94fy.rkt:15:4\n\nin-list: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 250) (\"Math\" . 400) (\"Physics\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcf5b94fy.rkt:16:4\n\nin-list: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 1250) (\"Math\" . 900) (\"Physics\" . 1000))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (k v) (list v k)) dict1) <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpygleluh5.rkt:12:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 87) (\"Math\" . 81) (\"Physics\" . 83))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpygleluh5.rkt:13:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 250) (\"Math\" . 400) (\"Physics\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpygleluh5.rkt:14:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 1250) (\"Math\" . 900) (\"Physics\" . 1000))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "/tmp/tmpmhcusmma.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpmhcusmma.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        (lambda (x y) (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpom20tcd5.rkt:13:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 87) (\"Math\" . 81) (\"Physics\" . 83))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpom20tcd5.rkt:14:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 250) (\"Math\" . 400) (\"Physics\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpom20tcd5.rkt:15:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 1250) (\"Math\" . 900) (\"Physics\" . 1000))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(key value) dict1])\n          (list value key))\n        <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwc06rsi2.rkt:14:4\n\n<: contract violation\n  expected: real?\n  given: '(81 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwc06rsi2.rkt:15:4\n\n<: contract violation\n  expected: real?\n  given: '(400 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwc06rsi2.rkt:16:4\n\n<: contract violation\n  expected: real?\n  given: '(900 \"Math\")\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        < #:key first))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3w147t5w.rkt:14:4\nactual:     '((81 \"Math\") (83 \"Physics\") (87 \"Chemistry\"))\nexpected:   '((\"Chemistry\" 87) (\"Physics\" 83) (\"Math\" 81))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3w147t5w.rkt:15:4\nactual:     '((250 \"Chemistry\") (300 \"Physics\") (400 \"Math\"))\nexpected:   '((\"Math\" 400) (\"Physics\" 300) (\"Chemistry\" 250))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3w147t5w.rkt:16:4\nactual:     '((900 \"Math\") (1000 \"Physics\") (1250 \"Chemistry\"))\nexpected:   '((\"Chemistry\" 1250) (\"Physics\" 1000) (\"Math\" 900))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "/tmp/tmpmhcusmma.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpmhcusmma.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        (lambda (x y) (&lt; (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "/tmp/tmplgd67swd.rkt:6:22: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 8\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (define (sort_helper dict1)\n    (cond\n      [(empty? dict1) empty]\n      [else\n       (let* ([min (min-key dict1)]\n              [min-val (dict-ref dict1 min)]\n              [rest (remove min dict1)])\n         (cons (cons min min-val) (sort_helper rest)))]))\n  (sort_helper dict1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "/tmp/tmpdalipupv.rkt:9:20: min-key: unbound identifier\n  in: min-key\n  location...:\n   /tmp/tmpdalipupv.rkt:9:20\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y) (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "/tmp/tmpe08_bgnd.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpe08_bgnd.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(k v) dict1])\n          (list v k))\n        <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbownvrcg.rkt:14:4\n\n<: contract violation\n  expected: real?\n  given: '(81 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbownvrcg.rkt:15:4\n\n<: contract violation\n  expected: real?\n  given: '(400 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbownvrcg.rkt:16:4\n\n<: contract violation\n  expected: real?\n  given: '(900 \"Math\")\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(k v) dict1])\n          (list v k))\n        <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbownvrcg.rkt:14:4\n\n<: contract violation\n  expected: real?\n  given: '(81 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbownvrcg.rkt:15:4\n\n<: contract violation\n  expected: real?\n  given: '(400 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbownvrcg.rkt:16:4\n\n<: contract violation\n  expected: real?\n  given: '(900 \"Math\")\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        (lambda (x y) (&lt; (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "/tmp/tmplgd67swd.rkt:6:22: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 8\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        (lambda (x y) (&lt; (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "/tmp/tmplgd67swd.rkt:6:22: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 8\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(k v) dict1])\n          (cons k v))\n        < #:key cdr))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122403,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbny2_ulm.rkt:14:4\nactual:     '((\"Math\" . 81) (\"Physics\" . 83) (\"Chemistry\" . 87))\nexpected:   '((\"Chemistry\" 87) (\"Physics\" 83) (\"Math\" 81))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbny2_ulm.rkt:15:4\nactual:     '((\"Chemistry\" . 250) (\"Physics\" . 300) (\"Math\" . 400))\nexpected:   '((\"Math\" 400) (\"Physics\" 300) (\"Chemistry\" 250))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbny2_ulm.rkt:16:4\nactual:     '((\"Math\" . 900) (\"Physics\" . 1000) (\"Chemistry\" . 1250))\nexpected:   '((\"Chemistry\" 1250) (\"Physics\" 1000) (\"Math\" 900))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        (lambda (x y) (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpom20tcd5.rkt:13:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 87) (\"Math\" . 81) (\"Physics\" . 83))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpom20tcd5.rkt:14:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 250) (\"Math\" . 400) (\"Physics\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpom20tcd5.rkt:15:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 1250) (\"Math\" . 900) (\"Physics\" . 1000))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpneisn8kv.rkt:14:4\n\n<: contract violation\n  expected: real?\n  given: '(81 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpneisn8kv.rkt:15:4\n\n<: contract violation\n  expected: real?\n  given: '(400 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpneisn8kv.rkt:16:4\n\n<: contract violation\n  expected: real?\n  given: '(900 \"Math\")\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        < #:key first))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3w147t5w.rkt:14:4\nactual:     '((81 \"Math\") (83 \"Physics\") (87 \"Chemistry\"))\nexpected:   '((\"Chemistry\" 87) (\"Physics\" 83) (\"Math\" 81))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3w147t5w.rkt:15:4\nactual:     '((250 \"Chemistry\") (300 \"Physics\") (400 \"Math\"))\nexpected:   '((\"Math\" 400) (\"Physics\" 300) (\"Chemistry\" 250))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3w147t5w.rkt:16:4\nactual:     '((900 \"Math\") (1000 \"Physics\") (1250 \"Chemistry\"))\nexpected:   '((\"Chemistry\" 1250) (\"Physics\" 1000) (\"Math\" 900))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(k v) dict1])\n         (list v k))\n        <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphl5on4el.rkt:14:4\n\n<: contract violation\n  expected: real?\n  given: '(81 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphl5on4el.rkt:15:4\n\n<: contract violation\n  expected: real?\n  given: '(400 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphl5on4el.rkt:16:4\n\n<: contract violation\n  expected: real?\n  given: '(900 \"Math\")\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpneisn8kv.rkt:14:4\n\n<: contract violation\n  expected: real?\n  given: '(81 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpneisn8kv.rkt:15:4\n\n<: contract violation\n  expected: real?\n  given: '(400 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpneisn8kv.rkt:16:4\n\n<: contract violation\n  expected: real?\n  given: '(900 \"Math\")\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(key value) dict1])\n          (list value key))\n        <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwc06rsi2.rkt:14:4\n\n<: contract violation\n  expected: real?\n  given: '(81 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwc06rsi2.rkt:15:4\n\n<: contract violation\n  expected: real?\n  given: '(400 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwc06rsi2.rkt:16:4\n\n<: contract violation\n  expected: real?\n  given: '(900 \"Math\")\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        (lambda (x y) (&lt; (cdr x) (cdr y)))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "/tmp/tmp3eru7ry2.rkt:6:22: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        < #:key first))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3w147t5w.rkt:14:4\nactual:     '((81 \"Math\") (83 \"Physics\") (87 \"Chemistry\"))\nexpected:   '((\"Chemistry\" 87) (\"Physics\" 83) (\"Math\" 81))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3w147t5w.rkt:15:4\nactual:     '((250 \"Chemistry\") (300 \"Physics\") (400 \"Math\"))\nexpected:   '((\"Math\" 400) (\"Physics\" 300) (\"Chemistry\" 250))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3w147t5w.rkt:16:4\nactual:     '((900 \"Math\") (1000 \"Physics\") (1250 \"Chemistry\"))\nexpected:   '((\"Chemistry\" 1250) (\"Physics\" 1000) (\"Math\" 900))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpneisn8kv.rkt:14:4\n\n<: contract violation\n  expected: real?\n  given: '(81 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpneisn8kv.rkt:15:4\n\n<: contract violation\n  expected: real?\n  given: '(400 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpneisn8kv.rkt:16:4\n\n<: contract violation\n  expected: real?\n  given: '(900 \"Math\")\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (k v) (list k v)) dict1)\n        (lambda (a b) (&lt; (second a) (second b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "/tmp/tmpk37zdc_5.rkt:6:22: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 8\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        (lambda (x y) (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpom20tcd5.rkt:13:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 87) (\"Math\" . 81) (\"Physics\" . 83))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpom20tcd5.rkt:14:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 250) (\"Math\" . 400) (\"Physics\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpom20tcd5.rkt:15:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 1250) (\"Math\" . 900) (\"Physics\" . 1000))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(key val) dict1])\n          (list val key))\n        <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122403,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmtzr6pbn.rkt:14:4\n\n<: contract violation\n  expected: real?\n  given: '(81 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmtzr6pbn.rkt:15:4\n\n<: contract violation\n  expected: real?\n  given: '(400 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmtzr6pbn.rkt:16:4\n\n<: contract violation\n  expected: real?\n  given: '(900 \"Math\")\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpneisn8kv.rkt:14:4\n\n<: contract violation\n  expected: real?\n  given: '(81 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpneisn8kv.rkt:15:4\n\n<: contract violation\n  expected: real?\n  given: '(400 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpneisn8kv.rkt:16:4\n\n<: contract violation\n  expected: real?\n  given: '(900 \"Math\")\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(k v) dict1])\n          (list v k))\n        < #:key first))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpda3he2kl.rkt:14:4\nactual:     '((81 \"Math\") (83 \"Physics\") (87 \"Chemistry\"))\nexpected:   '((\"Chemistry\" 87) (\"Physics\" 83) (\"Math\" 81))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpda3he2kl.rkt:15:4\nactual:     '((250 \"Chemistry\") (300 \"Physics\") (400 \"Math\"))\nexpected:   '((\"Math\" 400) (\"Physics\" 300) (\"Chemistry\" 250))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpda3he2kl.rkt:16:4\nactual:     '((900 \"Math\") (1000 \"Physics\") (1250 \"Chemistry\"))\nexpected:   '((\"Chemistry\" 1250) (\"Physics\" 1000) (\"Math\" 900))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "/tmp/tmpmhcusmma.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpmhcusmma.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (x) (list (car x) (cdr x))) dict1)\n        (lambda (x y) (< (cadr x) (cadr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa8sd9r3_.rkt:13:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 87) (\"Math\" . 81) (\"Physics\" . 83))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa8sd9r3_.rkt:14:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 250) (\"Math\" . 400) (\"Physics\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa8sd9r3_.rkt:15:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 1250) (\"Math\" . 900) (\"Physics\" . 1000))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(key val) dict1])\n          (list val key))\n        <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122403,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmtzr6pbn.rkt:14:4\n\n<: contract violation\n  expected: real?\n  given: '(81 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmtzr6pbn.rkt:15:4\n\n<: contract violation\n  expected: real?\n  given: '(400 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmtzr6pbn.rkt:16:4\n\n<: contract violation\n  expected: real?\n  given: '(900 \"Math\")\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpneisn8kv.rkt:14:4\n\n<: contract violation\n  expected: real?\n  given: '(81 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpneisn8kv.rkt:15:4\n\n<: contract violation\n  expected: real?\n  given: '(400 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpneisn8kv.rkt:16:4\n\n<: contract violation\n  expected: real?\n  given: '(900 \"Math\")\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        < #:key first))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3w147t5w.rkt:14:4\nactual:     '((81 \"Math\") (83 \"Physics\") (87 \"Chemistry\"))\nexpected:   '((\"Chemistry\" 87) (\"Physics\" 83) (\"Math\" 81))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3w147t5w.rkt:15:4\nactual:     '((250 \"Chemistry\") (300 \"Physics\") (400 \"Math\"))\nexpected:   '((\"Math\" 400) (\"Physics\" 300) (\"Chemistry\" 250))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3w147t5w.rkt:16:4\nactual:     '((900 \"Math\") (1000 \"Physics\") (1250 \"Chemistry\"))\nexpected:   '((\"Chemistry\" 1250) (\"Physics\" 1000) (\"Math\" 900))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (x) (list (car x) (cdr x))) dict1)\n        (lambda (x y) (< (cadr x) (cadr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa8sd9r3_.rkt:13:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 87) (\"Math\" . 81) (\"Physics\" . 83))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa8sd9r3_.rkt:14:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 250) (\"Math\" . 400) (\"Physics\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa8sd9r3_.rkt:15:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 1250) (\"Math\" . 900) (\"Physics\" . 1000))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        <\n        :key cdr))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "/tmp/tmp1s08bhy5.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp1s08bhy5.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (k v) (list v k)) dict1)\n        <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122403,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphzuh0ag2.rkt:13:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 87) (\"Math\" . 81) (\"Physics\" . 83))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphzuh0ag2.rkt:14:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 250) (\"Math\" . 400) (\"Physics\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphzuh0ag2.rkt:15:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 1250) (\"Math\" . 900) (\"Physics\" . 1000))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        < #:key first))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3w147t5w.rkt:14:4\nactual:     '((81 \"Math\") (83 \"Physics\") (87 \"Chemistry\"))\nexpected:   '((\"Chemistry\" 87) (\"Physics\" 83) (\"Math\" 81))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3w147t5w.rkt:15:4\nactual:     '((250 \"Chemistry\") (300 \"Physics\") (400 \"Math\"))\nexpected:   '((\"Math\" 400) (\"Physics\" 300) (\"Chemistry\" 250))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3w147t5w.rkt:16:4\nactual:     '((900 \"Math\") (1000 \"Physics\") (1250 \"Chemistry\"))\nexpected:   '((\"Chemistry\" 1250) (\"Physics\" 1000) (\"Math\" 900))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        < #:key first))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3w147t5w.rkt:14:4\nactual:     '((81 \"Math\") (83 \"Physics\") (87 \"Chemistry\"))\nexpected:   '((\"Chemistry\" 87) (\"Physics\" 83) (\"Math\" 81))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3w147t5w.rkt:15:4\nactual:     '((250 \"Chemistry\") (300 \"Physics\") (400 \"Math\"))\nexpected:   '((\"Math\" 400) (\"Physics\" 300) (\"Chemistry\" 250))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3w147t5w.rkt:16:4\nactual:     '((900 \"Math\") (1000 \"Physics\") (1250 \"Chemistry\"))\nexpected:   '((\"Chemistry\" 1250) (\"Physics\" 1000) (\"Math\" 900))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        (lambda (x y) (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpom20tcd5.rkt:13:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 87) (\"Math\" . 81) (\"Physics\" . 83))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpom20tcd5.rkt:14:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 250) (\"Math\" . 400) (\"Physics\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpom20tcd5.rkt:15:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 1250) (\"Math\" . 900) (\"Physics\" . 1000))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "/tmp/tmpmhcusmma.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpmhcusmma.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(k v) dict1])\n          (cons v k))\n        <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5zmtu05z.rkt:14:4\n\n<: contract violation\n  expected: real?\n  given: '(81 . \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5zmtu05z.rkt:15:4\n\n<: contract violation\n  expected: real?\n  given: '(400 . \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5zmtu05z.rkt:16:4\n\n<: contract violation\n  expected: real?\n  given: '(900 . \"Math\")\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "/tmp/tmpmhcusmma.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpmhcusmma.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ((k (in-list (hash-keys dict1)))\n                   #:when (not (eq? (hash-ref dict1 k) 0)))\n        (list (hash-ref dict1 k) k))\n        <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122403,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp980n7snv.rkt:15:4\n\n<: contract violation\n  expected: real?\n  given: '(81 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp980n7snv.rkt:16:4\n\n<: contract violation\n  expected: real?\n  given: '(400 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp980n7snv.rkt:17:4\n\n<: contract violation\n  expected: real?\n  given: '(900 \"Math\")\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y) (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "/tmp/tmpe08_bgnd.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpe08_bgnd.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpneisn8kv.rkt:14:4\n\n<: contract violation\n  expected: real?\n  given: '(81 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpneisn8kv.rkt:15:4\n\n<: contract violation\n  expected: real?\n  given: '(400 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpneisn8kv.rkt:16:4\n\n<: contract violation\n  expected: real?\n  given: '(900 \"Math\")\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (k v) (list v k)) dict1)\n        <\n        #:key first))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpivcs7v97.rkt:14:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 87) (\"Math\" . 81) (\"Physics\" . 83))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpivcs7v97.rkt:15:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 250) (\"Math\" . 400) (\"Physics\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpivcs7v97.rkt:16:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 1250) (\"Math\" . 900) (\"Physics\" . 1000))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(k v) dict1])\n         (list v k))\n        < #:key first))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122403,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpibsjd19t.rkt:14:4\nactual:     '((81 \"Math\") (83 \"Physics\") (87 \"Chemistry\"))\nexpected:   '((\"Chemistry\" 87) (\"Physics\" 83) (\"Math\" 81))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpibsjd19t.rkt:15:4\nactual:     '((250 \"Chemistry\") (300 \"Physics\") (400 \"Math\"))\nexpected:   '((\"Math\" 400) (\"Physics\" 300) (\"Chemistry\" 250))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpibsjd19t.rkt:16:4\nactual:     '((900 \"Math\") (1000 \"Physics\") (1250 \"Chemistry\"))\nexpected:   '((\"Chemistry\" 1250) (\"Physics\" 1000) (\"Math\" 900))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (x) (cons (cdr x) (car x))) dict1)\n        (lambda (x y) (< (car x) (car y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122403,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx60k6shd.rkt:13:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 87) (\"Math\" . 81) (\"Physics\" . 83))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx60k6shd.rkt:14:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 250) (\"Math\" . 400) (\"Physics\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx60k6shd.rkt:15:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 1250) (\"Math\" . 900) (\"Physics\" . 1000))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (x) (list (car x) (cdr x))) dict1)\n        (lambda (x y) (&lt; (cadr x) (cadr y)))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "/tmp/tmp8oddmwsl.rkt:6:22: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "/tmp/tmpmhcusmma.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpmhcusmma.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (x) (cons (cdr x) (car x))) dict1)\n        <\n        #:key cdr))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122403,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpudx5v1vi.rkt:14:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 87) (\"Math\" . 81) (\"Physics\" . 83))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpudx5v1vi.rkt:15:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 250) (\"Math\" . 400) (\"Physics\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpudx5v1vi.rkt:16:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 1250) (\"Math\" . 900) (\"Physics\" . 1000))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (x) (list (car x) (cdr x))) dict1)\n        (lambda (x y) (&lt; (cadr x) (cadr y)))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "/tmp/tmp8oddmwsl.rkt:6:22: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (x) (cons (cdr x) (car x))) dict1)\n        < #:key (lambda (x) (car x))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122403,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcvu3lark.rkt:13:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 87) (\"Math\" . 81) (\"Physics\" . 83))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcvu3lark.rkt:14:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 250) (\"Math\" . 400) (\"Physics\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcvu3lark.rkt:15:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 1250) (\"Math\" . 900) (\"Physics\" . 1000))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpneisn8kv.rkt:14:4\n\n<: contract violation\n  expected: real?\n  given: '(81 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpneisn8kv.rkt:15:4\n\n<: contract violation\n  expected: real?\n  given: '(400 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpneisn8kv.rkt:16:4\n\n<: contract violation\n  expected: real?\n  given: '(900 \"Math\")\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "/tmp/tmpmhcusmma.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpmhcusmma.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (k v) (list v k)) dict1)\n        <\n        #:key first))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpivcs7v97.rkt:14:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 87) (\"Math\" . 81) (\"Physics\" . 83))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpivcs7v97.rkt:15:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 250) (\"Math\" . 400) (\"Physics\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpivcs7v97.rkt:16:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 1250) (\"Math\" . 900) (\"Physics\" . 1000))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (k v) (list v k)) dict1)\n        (lambda (x y) (&lt; (car x) (car y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "/tmp/tmpng2ugr_8.rkt:6:22: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 8\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(key val) dict1])\n          (list val key))\n        <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122403,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmtzr6pbn.rkt:14:4\n\n<: contract violation\n  expected: real?\n  given: '(81 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmtzr6pbn.rkt:15:4\n\n<: contract violation\n  expected: real?\n  given: '(400 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmtzr6pbn.rkt:16:4\n\n<: contract violation\n  expected: real?\n  given: '(900 \"Math\")\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpneisn8kv.rkt:14:4\n\n<: contract violation\n  expected: real?\n  given: '(81 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpneisn8kv.rkt:15:4\n\n<: contract violation\n  expected: real?\n  given: '(400 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpneisn8kv.rkt:16:4\n\n<: contract violation\n  expected: real?\n  given: '(900 \"Math\")\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(k v) (in-dict dict1)])\n         (cons k v))\n        < #:key cdr))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122403,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx43s3tr6.rkt:14:4\nactual:     '((\"Math\" . 81) (\"Physics\" . 83) (\"Chemistry\" . 87))\nexpected:   '((\"Chemistry\" 87) (\"Physics\" 83) (\"Math\" 81))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx43s3tr6.rkt:15:4\nactual:     '((\"Chemistry\" . 250) (\"Physics\" . 300) (\"Math\" . 400))\nexpected:   '((\"Math\" 400) (\"Physics\" 300) (\"Chemistry\" 250))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx43s3tr6.rkt:16:4\nactual:     '((\"Math\" . 900) (\"Physics\" . 1000) (\"Chemistry\" . 1250))\nexpected:   '((\"Chemistry\" 1250) (\"Physics\" 1000) (\"Math\" 900))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (a b)\n          (< (cdr a) (cdr b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122403,
      "stdout": "",
      "stderr": "/tmp/tmpdiwxhzwt.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpdiwxhzwt.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "/tmp/tmpmhcusmma.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpmhcusmma.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        (lambda (x y) (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpom20tcd5.rkt:13:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 87) (\"Math\" . 81) (\"Physics\" . 83))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpom20tcd5.rkt:14:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 250) (\"Math\" . 400) (\"Physics\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpom20tcd5.rkt:15:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 1250) (\"Math\" . 900) (\"Physics\" . 1000))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpneisn8kv.rkt:14:4\n\n<: contract violation\n  expected: real?\n  given: '(81 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpneisn8kv.rkt:15:4\n\n<: contract violation\n  expected: real?\n  given: '(400 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpneisn8kv.rkt:16:4\n\n<: contract violation\n  expected: real?\n  given: '(900 \"Math\")\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        (lambda (x y) (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpom20tcd5.rkt:13:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 87) (\"Math\" . 81) (\"Physics\" . 83))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpom20tcd5.rkt:14:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 250) (\"Math\" . 400) (\"Physics\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpom20tcd5.rkt:15:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 1250) (\"Math\" . 900) (\"Physics\" . 1000))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(key val) dict1])\n          (list val key))\n        <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122403,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmtzr6pbn.rkt:14:4\n\n<: contract violation\n  expected: real?\n  given: '(81 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmtzr6pbn.rkt:15:4\n\n<: contract violation\n  expected: real?\n  given: '(400 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmtzr6pbn.rkt:16:4\n\n<: contract violation\n  expected: real?\n  given: '(900 \"Math\")\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "/tmp/tmpmhcusmma.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpmhcusmma.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "/tmp/tmpmhcusmma.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpmhcusmma.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        (lambda (x y) (&lt; (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "/tmp/tmplgd67swd.rkt:6:22: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 8\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(key value) dict1])\n          (list value key))\n        < #:key first))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122403,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2u52lpbi.rkt:14:4\nactual:     '((81 \"Math\") (83 \"Physics\") (87 \"Chemistry\"))\nexpected:   '((\"Chemistry\" 87) (\"Physics\" 83) (\"Math\" 81))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2u52lpbi.rkt:15:4\nactual:     '((250 \"Chemistry\") (300 \"Physics\") (400 \"Math\"))\nexpected:   '((\"Math\" 400) (\"Physics\" 300) (\"Chemistry\" 250))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2u52lpbi.rkt:16:4\nactual:     '((900 \"Math\") (1000 \"Physics\") (1250 \"Chemistry\"))\nexpected:   '((\"Chemistry\" 1250) (\"Physics\" 1000) (\"Math\" 900))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(key value) (in-dict dict1)])\n         (list value key))\n        <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122403,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk0ibs1hc.rkt:14:4\n\n<: contract violation\n  expected: real?\n  given: '(81 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk0ibs1hc.rkt:15:4\n\n<: contract violation\n  expected: real?\n  given: '(400 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk0ibs1hc.rkt:16:4\n\n<: contract violation\n  expected: real?\n  given: '(900 \"Math\")\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        < #:key first))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3w147t5w.rkt:14:4\nactual:     '((81 \"Math\") (83 \"Physics\") (87 \"Chemistry\"))\nexpected:   '((\"Chemistry\" 87) (\"Physics\" 83) (\"Math\" 81))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3w147t5w.rkt:15:4\nactual:     '((250 \"Chemistry\") (300 \"Physics\") (400 \"Math\"))\nexpected:   '((\"Math\" 400) (\"Physics\" 300) (\"Chemistry\" 250))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3w147t5w.rkt:16:4\nactual:     '((900 \"Math\") (1000 \"Physics\") (1250 \"Chemistry\"))\nexpected:   '((\"Chemistry\" 1250) (\"Physics\" 1000) (\"Math\" 900))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "/tmp/tmpmhcusmma.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpmhcusmma.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        < #:key first))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3w147t5w.rkt:14:4\nactual:     '((81 \"Math\") (83 \"Physics\") (87 \"Chemistry\"))\nexpected:   '((\"Chemistry\" 87) (\"Physics\" 83) (\"Math\" 81))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3w147t5w.rkt:15:4\nactual:     '((250 \"Chemistry\") (300 \"Physics\") (400 \"Math\"))\nexpected:   '((\"Math\" 400) (\"Physics\" 300) (\"Chemistry\" 250))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3w147t5w.rkt:16:4\nactual:     '((900 \"Math\") (1000 \"Physics\") (1250 \"Chemistry\"))\nexpected:   '((\"Chemistry\" 1250) (\"Physics\" 1000) (\"Math\" 900))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(key value) dict1])\n          (list value key))\n        <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwc06rsi2.rkt:14:4\n\n<: contract violation\n  expected: real?\n  given: '(81 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwc06rsi2.rkt:15:4\n\n<: contract violation\n  expected: real?\n  given: '(400 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwc06rsi2.rkt:16:4\n\n<: contract violation\n  expected: real?\n  given: '(900 \"Math\")\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (k v) (list v k)) dict1)\n        <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122403,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphzuh0ag2.rkt:13:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 87) (\"Math\" . 81) (\"Physics\" . 83))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphzuh0ag2.rkt:14:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 250) (\"Math\" . 400) (\"Physics\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphzuh0ag2.rkt:15:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 1250) (\"Math\" . 900) (\"Physics\" . 1000))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "/tmp/tmpmhcusmma.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpmhcusmma.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(k v) dict1])\n          (list v k))\n        <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbownvrcg.rkt:14:4\n\n<: contract violation\n  expected: real?\n  given: '(81 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbownvrcg.rkt:15:4\n\n<: contract violation\n  expected: real?\n  given: '(400 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbownvrcg.rkt:16:4\n\n<: contract violation\n  expected: real?\n  given: '(900 \"Math\")\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(key value) (in-dict dict1)])\n         (list value key))\n        <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122403,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk0ibs1hc.rkt:14:4\n\n<: contract violation\n  expected: real?\n  given: '(81 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk0ibs1hc.rkt:15:4\n\n<: contract violation\n  expected: real?\n  given: '(400 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk0ibs1hc.rkt:16:4\n\n<: contract violation\n  expected: real?\n  given: '(900 \"Math\")\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        <\n        #:key cdr))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122403,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpd62nc104.rkt:14:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 87) (\"Math\" . 81) (\"Physics\" . 83))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpd62nc104.rkt:15:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 250) (\"Math\" . 400) (\"Physics\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpd62nc104.rkt:16:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 1250) (\"Math\" . 900) (\"Physics\" . 1000))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (k v) (cons v k)) dict1) <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122403,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcaixblkx.rkt:12:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 87) (\"Math\" . 81) (\"Physics\" . 83))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcaixblkx.rkt:13:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 250) (\"Math\" . 400) (\"Physics\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcaixblkx.rkt:14:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 1250) (\"Math\" . 900) (\"Physics\" . 1000))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        < #:key first))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3w147t5w.rkt:14:4\nactual:     '((81 \"Math\") (83 \"Physics\") (87 \"Chemistry\"))\nexpected:   '((\"Chemistry\" 87) (\"Physics\" 83) (\"Math\" 81))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3w147t5w.rkt:15:4\nactual:     '((250 \"Chemistry\") (300 \"Physics\") (400 \"Math\"))\nexpected:   '((\"Math\" 400) (\"Physics\" 300) (\"Chemistry\" 250))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3w147t5w.rkt:16:4\nactual:     '((900 \"Math\") (1000 \"Physics\") (1250 \"Chemistry\"))\nexpected:   '((\"Chemistry\" 1250) (\"Physics\" 1000) (\"Math\" 900))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(key value) dict1])\n          (list value key))\n        <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwc06rsi2.rkt:14:4\n\n<: contract violation\n  expected: real?\n  given: '(81 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwc06rsi2.rkt:15:4\n\n<: contract violation\n  expected: real?\n  given: '(400 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwc06rsi2.rkt:16:4\n\n<: contract violation\n  expected: real?\n  given: '(900 \"Math\")\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(key value) (in-dict dict1)])\n         (list value key))\n        <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122403,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk0ibs1hc.rkt:14:4\n\n<: contract violation\n  expected: real?\n  given: '(81 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk0ibs1hc.rkt:15:4\n\n<: contract violation\n  expected: real?\n  given: '(400 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk0ibs1hc.rkt:16:4\n\n<: contract violation\n  expected: real?\n  given: '(900 \"Math\")\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "/tmp/tmpmhcusmma.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpmhcusmma.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (x) (list (car x) (cdr x))) dict1)\n        (lambda (x y) (&lt; (cadr x) (cadr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "/tmp/tmpom5ssqzk.rkt:6:22: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 8\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "/tmp/tmpmhcusmma.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpmhcusmma.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (define (sort-helper dict1)\n    (let loop ((dict1 dict1) (result '()))\n      (if (null? dict1)\n          result\n          (let ((key (car (car dict1)))\n                (value (cdr (car dict1))))\n            (loop (cdr dict1) (cons (cons key value) result))))))\n  (let ((sorted-dict (sort-helper dict1)))\n    (reverse sorted-dict)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122403,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1k75ubff.rkt:20:4\n\ncar: contract violation\n  expected: pair?\n  given: '#hash((\"Chemistry\" . 87) (\"Math\" . 81) (\"Physics\" . 83))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1k75ubff.rkt:21:4\n\ncar: contract violation\n  expected: pair?\n  given: '#hash((\"Chemistry\" . 250) (\"Math\" . 400) (\"Physics\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1k75ubff.rkt:22:4\n\ncar: contract violation\n  expected: pair?\n  given: '#hash((\"Chemistry\" . 1250) (\"Math\" . 900) (\"Physics\" . 1000))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(k v) dict1])\n          (list v k))\n        <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbownvrcg.rkt:14:4\n\n<: contract violation\n  expected: real?\n  given: '(81 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbownvrcg.rkt:15:4\n\n<: contract violation\n  expected: real?\n  given: '(400 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbownvrcg.rkt:16:4\n\n<: contract violation\n  expected: real?\n  given: '(900 \"Math\")\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (x) (list (car x) (cdr x))) dict1)\n        (lambda (x y) (&lt; (cadr x) (cadr y)))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "/tmp/tmp8oddmwsl.rkt:6:22: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "/tmp/tmpmhcusmma.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpmhcusmma.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        < #:key first))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3w147t5w.rkt:14:4\nactual:     '((81 \"Math\") (83 \"Physics\") (87 \"Chemistry\"))\nexpected:   '((\"Chemistry\" 87) (\"Physics\" 83) (\"Math\" 81))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3w147t5w.rkt:15:4\nactual:     '((250 \"Chemistry\") (300 \"Physics\") (400 \"Math\"))\nexpected:   '((\"Math\" 400) (\"Physics\" 300) (\"Chemistry\" 250))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3w147t5w.rkt:16:4\nactual:     '((900 \"Math\") (1000 \"Physics\") (1250 \"Chemistry\"))\nexpected:   '((\"Chemistry\" 1250) (\"Physics\" 1000) (\"Math\" 900))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "/tmp/tmpmhcusmma.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpmhcusmma.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (x) (list (cdr x) (car x))) dict1)\n        <\n        :key (lambda (x) (car x))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122403,
      "stdout": "",
      "stderr": "/tmp/tmp986j0zxw.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp986j0zxw.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "/tmp/tmpmhcusmma.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpmhcusmma.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (x) (list (car x) (cdr x))) dict1)\n        (lambda (x y) (&lt; (cadr x) (cadr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "/tmp/tmpom5ssqzk.rkt:6:22: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 8\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(k v) dict1])\n          (list v k))\n        <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbownvrcg.rkt:14:4\n\n<: contract violation\n  expected: real?\n  given: '(81 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbownvrcg.rkt:15:4\n\n<: contract violation\n  expected: real?\n  given: '(400 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbownvrcg.rkt:16:4\n\n<: contract violation\n  expected: real?\n  given: '(900 \"Math\")\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "/tmp/tmpmhcusmma.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpmhcusmma.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (\u03bb (x) (list (car x) (cdr x))) dict1)\n        (\u03bb (x y) (&lt; (cadr x) (cadr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122403,
      "stdout": "",
      "stderr": "/tmp/tmp_boa_91c.rkt:6:17: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 8\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(key value) dict1])\n          (list value key))\n        <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwc06rsi2.rkt:14:4\n\n<: contract violation\n  expected: real?\n  given: '(81 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwc06rsi2.rkt:15:4\n\n<: contract violation\n  expected: real?\n  given: '(400 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwc06rsi2.rkt:16:4\n\n<: contract violation\n  expected: real?\n  given: '(900 \"Math\")\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (k v) (list v k)) dict1)\n        <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122403,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphzuh0ag2.rkt:13:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 87) (\"Math\" . 81) (\"Physics\" . 83))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphzuh0ag2.rkt:14:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 250) (\"Math\" . 400) (\"Physics\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphzuh0ag2.rkt:15:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 1250) (\"Math\" . 900) (\"Physics\" . 1000))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "/tmp/tmpmhcusmma.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpmhcusmma.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "/tmp/tmpmhcusmma.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpmhcusmma.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpneisn8kv.rkt:14:4\n\n<: contract violation\n  expected: real?\n  given: '(81 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpneisn8kv.rkt:15:4\n\n<: contract violation\n  expected: real?\n  given: '(400 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpneisn8kv.rkt:16:4\n\n<: contract violation\n  expected: real?\n  given: '(900 \"Math\")\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(k v) dict1])\n          (list v k))\n        <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbownvrcg.rkt:14:4\n\n<: contract violation\n  expected: real?\n  given: '(81 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbownvrcg.rkt:15:4\n\n<: contract violation\n  expected: real?\n  given: '(400 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbownvrcg.rkt:16:4\n\n<: contract violation\n  expected: real?\n  given: '(900 \"Math\")\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(k v) dict1])\n          (list v k))\n        <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbownvrcg.rkt:14:4\n\n<: contract violation\n  expected: real?\n  given: '(81 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbownvrcg.rkt:15:4\n\n<: contract violation\n  expected: real?\n  given: '(400 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbownvrcg.rkt:16:4\n\n<: contract violation\n  expected: real?\n  given: '(900 \"Math\")\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(k v) dict1])\n          (list v k))\n        <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbownvrcg.rkt:14:4\n\n<: contract violation\n  expected: real?\n  given: '(81 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbownvrcg.rkt:15:4\n\n<: contract violation\n  expected: real?\n  given: '(400 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbownvrcg.rkt:16:4\n\n<: contract violation\n  expected: real?\n  given: '(900 \"Math\")\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(k v) dict1])\n          (list v k))\n        <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbownvrcg.rkt:14:4\n\n<: contract violation\n  expected: real?\n  given: '(81 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbownvrcg.rkt:15:4\n\n<: contract violation\n  expected: real?\n  given: '(400 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbownvrcg.rkt:16:4\n\n<: contract violation\n  expected: real?\n  given: '(900 \"Math\")\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (x) (list (car x) (cdr x))) dict1)\n        (lambda (x y) (&lt; (cadr x) (cadr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "/tmp/tmpom5ssqzk.rkt:6:22: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 8\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (x) (list (car x) (cdr x))) dict1)\n        (lambda (x y) (&lt; (cadr x) (cadr y)))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "/tmp/tmp8oddmwsl.rkt:6:22: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y) (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "/tmp/tmpe08_bgnd.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpe08_bgnd.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        (lambda (x y) (&lt; (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "/tmp/tmplgd67swd.rkt:6:22: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 8\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "/tmp/tmpmhcusmma.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpmhcusmma.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        (lambda (x y) (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpom20tcd5.rkt:13:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 87) (\"Math\" . 81) (\"Physics\" . 83))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpom20tcd5.rkt:14:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 250) (\"Math\" . 400) (\"Physics\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpom20tcd5.rkt:15:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 1250) (\"Math\" . 900) (\"Physics\" . 1000))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        < #:key first))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3w147t5w.rkt:14:4\nactual:     '((81 \"Math\") (83 \"Physics\") (87 \"Chemistry\"))\nexpected:   '((\"Chemistry\" 87) (\"Physics\" 83) (\"Math\" 81))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3w147t5w.rkt:15:4\nactual:     '((250 \"Chemistry\") (300 \"Physics\") (400 \"Math\"))\nexpected:   '((\"Math\" 400) (\"Physics\" 300) (\"Chemistry\" 250))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3w147t5w.rkt:16:4\nactual:     '((900 \"Math\") (1000 \"Physics\") (1250 \"Chemistry\"))\nexpected:   '((\"Chemistry\" 1250) (\"Physics\" 1000) (\"Math\" 900))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "/tmp/tmpmhcusmma.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpmhcusmma.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "/tmp/tmpmhcusmma.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpmhcusmma.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        (lambda (x y) (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpom20tcd5.rkt:13:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 87) (\"Math\" . 81) (\"Physics\" . 83))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpom20tcd5.rkt:14:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 250) (\"Math\" . 400) (\"Physics\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpom20tcd5.rkt:15:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 1250) (\"Math\" . 900) (\"Physics\" . 1000))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "/tmp/tmpmhcusmma.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpmhcusmma.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "/tmp/tmpmhcusmma.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpmhcusmma.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpneisn8kv.rkt:14:4\n\n<: contract violation\n  expected: real?\n  given: '(81 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpneisn8kv.rkt:15:4\n\n<: contract violation\n  expected: real?\n  given: '(400 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpneisn8kv.rkt:16:4\n\n<: contract violation\n  expected: real?\n  given: '(900 \"Math\")\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "/tmp/tmpmhcusmma.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpmhcusmma.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "/tmp/tmpmhcusmma.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpmhcusmma.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(k v) dict1])\n         (list v k))\n        <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphl5on4el.rkt:14:4\n\n<: contract violation\n  expected: real?\n  given: '(81 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphl5on4el.rkt:15:4\n\n<: contract violation\n  expected: real?\n  given: '(400 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphl5on4el.rkt:16:4\n\n<: contract violation\n  expected: real?\n  given: '(900 \"Math\")\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (k v) (list v k)) dict1) <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpygleluh5.rkt:12:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 87) (\"Math\" . 81) (\"Physics\" . 83))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpygleluh5.rkt:13:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 250) (\"Math\" . 400) (\"Physics\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpygleluh5.rkt:14:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 1250) (\"Math\" . 900) (\"Physics\" . 1000))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (x) (list (car x) (cdr x))) dict1)\n        (lambda (x y) (&lt; (cadr x) (cadr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "/tmp/tmpom5ssqzk.rkt:6:22: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 8\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(key val) dict1])\n          (list val key))\n        <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122403,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmtzr6pbn.rkt:14:4\n\n<: contract violation\n  expected: real?\n  given: '(81 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmtzr6pbn.rkt:15:4\n\n<: contract violation\n  expected: real?\n  given: '(400 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmtzr6pbn.rkt:16:4\n\n<: contract violation\n  expected: real?\n  given: '(900 \"Math\")\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        < #:key first))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3w147t5w.rkt:14:4\nactual:     '((81 \"Math\") (83 \"Physics\") (87 \"Chemistry\"))\nexpected:   '((\"Chemistry\" 87) (\"Physics\" 83) (\"Math\" 81))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3w147t5w.rkt:15:4\nactual:     '((250 \"Chemistry\") (300 \"Physics\") (400 \"Math\"))\nexpected:   '((\"Math\" 400) (\"Physics\" 300) (\"Chemistry\" 250))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3w147t5w.rkt:16:4\nactual:     '((900 \"Math\") (1000 \"Physics\") (1250 \"Chemistry\"))\nexpected:   '((\"Chemistry\" 1250) (\"Physics\" 1000) (\"Math\" 900))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "/tmp/tmpmhcusmma.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpmhcusmma.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (x) (list (cdr x) (car x))) dict1)\n        (lambda (x y) (&gt; (car x) (car y)))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122403,
      "stdout": "",
      "stderr": "/tmp/tmpg49pk0lp.rkt:6:22: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "/tmp/tmpmhcusmma.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpmhcusmma.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpneisn8kv.rkt:14:4\n\n<: contract violation\n  expected: real?\n  given: '(81 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpneisn8kv.rkt:15:4\n\n<: contract violation\n  expected: real?\n  given: '(400 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpneisn8kv.rkt:16:4\n\n<: contract violation\n  expected: real?\n  given: '(900 \"Math\")\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "/tmp/tmpmhcusmma.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpmhcusmma.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        (lambda (x y) (&lt; (cdr x) (cdr y)))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "/tmp/tmp3eru7ry2.rkt:6:22: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (x) (cons (car x) (cdr x)))\n             (hash-map->list dict1))\n        (lambda (x y) (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122403,
      "stdout": "",
      "stderr": "/tmp/tmp37urcxvu.rkt:6:14: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmp37urcxvu.rkt:6:14\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(key value) dict1])\n          (list value key))\n        <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwc06rsi2.rkt:14:4\n\n<: contract violation\n  expected: real?\n  given: '(81 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwc06rsi2.rkt:15:4\n\n<: contract violation\n  expected: real?\n  given: '(400 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwc06rsi2.rkt:16:4\n\n<: contract violation\n  expected: real?\n  given: '(900 \"Math\")\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "/tmp/tmpmhcusmma.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpmhcusmma.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (x) (cons (cdr x) (car x))) dict1)\n        <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122403,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5yp3mr1c.rkt:13:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 87) (\"Math\" . 81) (\"Physics\" . 83))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5yp3mr1c.rkt:14:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 250) (\"Math\" . 400) (\"Physics\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5yp3mr1c.rkt:15:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 1250) (\"Math\" . 900) (\"Physics\" . 1000))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        < #:key first))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3w147t5w.rkt:14:4\nactual:     '((81 \"Math\") (83 \"Physics\") (87 \"Chemistry\"))\nexpected:   '((\"Chemistry\" 87) (\"Physics\" 83) (\"Math\" 81))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3w147t5w.rkt:15:4\nactual:     '((250 \"Chemistry\") (300 \"Physics\") (400 \"Math\"))\nexpected:   '((\"Math\" 400) (\"Physics\" 300) (\"Chemistry\" 250))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3w147t5w.rkt:16:4\nactual:     '((900 \"Math\") (1000 \"Physics\") (1250 \"Chemistry\"))\nexpected:   '((\"Chemistry\" 1250) (\"Physics\" 1000) (\"Math\" 900))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(k v) dict1])\n          (list v k))\n        <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbownvrcg.rkt:14:4\n\n<: contract violation\n  expected: real?\n  given: '(81 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbownvrcg.rkt:15:4\n\n<: contract violation\n  expected: real?\n  given: '(400 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbownvrcg.rkt:16:4\n\n<: contract violation\n  expected: real?\n  given: '(900 \"Math\")\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "/tmp/tmpmhcusmma.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpmhcusmma.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        < #:key first))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3w147t5w.rkt:14:4\nactual:     '((81 \"Math\") (83 \"Physics\") (87 \"Chemistry\"))\nexpected:   '((\"Chemistry\" 87) (\"Physics\" 83) (\"Math\" 81))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3w147t5w.rkt:15:4\nactual:     '((250 \"Chemistry\") (300 \"Physics\") (400 \"Math\"))\nexpected:   '((\"Math\" 400) (\"Physics\" 300) (\"Chemistry\" 250))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3w147t5w.rkt:16:4\nactual:     '((900 \"Math\") (1000 \"Physics\") (1250 \"Chemistry\"))\nexpected:   '((\"Chemistry\" 1250) (\"Physics\" 1000) (\"Math\" 900))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "/tmp/tmpmhcusmma.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpmhcusmma.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        < #:key first))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3w147t5w.rkt:14:4\nactual:     '((81 \"Math\") (83 \"Physics\") (87 \"Chemistry\"))\nexpected:   '((\"Chemistry\" 87) (\"Physics\" 83) (\"Math\" 81))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3w147t5w.rkt:15:4\nactual:     '((250 \"Chemistry\") (300 \"Physics\") (400 \"Math\"))\nexpected:   '((\"Math\" 400) (\"Physics\" 300) (\"Chemistry\" 250))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3w147t5w.rkt:16:4\nactual:     '((900 \"Math\") (1000 \"Physics\") (1250 \"Chemistry\"))\nexpected:   '((\"Chemistry\" 1250) (\"Physics\" 1000) (\"Math\" 900))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        (lambda (x y) (&lt; (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "/tmp/tmplgd67swd.rkt:6:22: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 8\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(key value) dict1])\n          (list value key))\n        <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwc06rsi2.rkt:14:4\n\n<: contract violation\n  expected: real?\n  given: '(81 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwc06rsi2.rkt:15:4\n\n<: contract violation\n  expected: real?\n  given: '(400 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwc06rsi2.rkt:16:4\n\n<: contract violation\n  expected: real?\n  given: '(900 \"Math\")\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(k v) dict1])\n          (list v k))\n        <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbownvrcg.rkt:14:4\n\n<: contract violation\n  expected: real?\n  given: '(81 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbownvrcg.rkt:15:4\n\n<: contract violation\n  expected: real?\n  given: '(400 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbownvrcg.rkt:16:4\n\n<: contract violation\n  expected: real?\n  given: '(900 \"Math\")\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (x) (list (car x) (cdr x))) dict1)\n        (lambda (x y) (< (cadr x) (cadr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa8sd9r3_.rkt:13:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 87) (\"Math\" . 81) (\"Physics\" . 83))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa8sd9r3_.rkt:14:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 250) (\"Math\" . 400) (\"Physics\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa8sd9r3_.rkt:15:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 1250) (\"Math\" . 900) (\"Physics\" . 1000))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        < #:key first))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3w147t5w.rkt:14:4\nactual:     '((81 \"Math\") (83 \"Physics\") (87 \"Chemistry\"))\nexpected:   '((\"Chemistry\" 87) (\"Physics\" 83) (\"Math\" 81))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3w147t5w.rkt:15:4\nactual:     '((250 \"Chemistry\") (300 \"Physics\") (400 \"Math\"))\nexpected:   '((\"Math\" 400) (\"Physics\" 300) (\"Chemistry\" 250))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3w147t5w.rkt:16:4\nactual:     '((900 \"Math\") (1000 \"Physics\") (1250 \"Chemistry\"))\nexpected:   '((\"Chemistry\" 1250) (\"Physics\" 1000) (\"Math\" 900))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(k v) dict1]) (cons v k))\n        <\n        #:key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122403,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc5k0_c4d.rkt:14:4\nactual:     '((81 . \"Math\") (83 . \"Physics\") (87 . \"Chemistry\"))\nexpected:   '((\"Chemistry\" 87) (\"Physics\" 83) (\"Math\" 81))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc5k0_c4d.rkt:15:4\nactual:     '((250 . \"Chemistry\") (300 . \"Physics\") (400 . \"Math\"))\nexpected:   '((\"Math\" 400) (\"Physics\" 300) (\"Chemistry\" 250))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc5k0_c4d.rkt:16:4\nactual:     '((900 . \"Math\") (1000 . \"Physics\") (1250 . \"Chemistry\"))\nexpected:   '((\"Chemistry\" 1250) (\"Physics\" 1000) (\"Math\" 900))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (k v) (list v k)) dict1)\n        <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122403,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphzuh0ag2.rkt:13:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 87) (\"Math\" . 81) (\"Physics\" . 83))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphzuh0ag2.rkt:14:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 250) (\"Math\" . 400) (\"Physics\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphzuh0ag2.rkt:15:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 1250) (\"Math\" . 900) (\"Physics\" . 1000))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (a b)\n          (< (cdr a) (cdr b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122403,
      "stdout": "",
      "stderr": "/tmp/tmpdiwxhzwt.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpdiwxhzwt.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        (lambda (x y) (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpom20tcd5.rkt:13:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 87) (\"Math\" . 81) (\"Physics\" . 83))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpom20tcd5.rkt:14:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 250) (\"Math\" . 400) (\"Physics\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpom20tcd5.rkt:15:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 1250) (\"Math\" . 900) (\"Physics\" . 1000))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "/tmp/tmpmhcusmma.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpmhcusmma.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        (lambda (x y) (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpom20tcd5.rkt:13:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 87) (\"Math\" . 81) (\"Physics\" . 83))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpom20tcd5.rkt:14:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 250) (\"Math\" . 400) (\"Physics\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpom20tcd5.rkt:15:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 1250) (\"Math\" . 900) (\"Physics\" . 1000))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        (lambda (x y) (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpom20tcd5.rkt:13:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 87) (\"Math\" . 81) (\"Physics\" . 83))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpom20tcd5.rkt:14:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 250) (\"Math\" . 400) (\"Physics\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpom20tcd5.rkt:15:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 1250) (\"Math\" . 900) (\"Physics\" . 1000))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        (lambda (x y) (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpom20tcd5.rkt:13:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 87) (\"Math\" . 81) (\"Physics\" . 83))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpom20tcd5.rkt:14:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 250) (\"Math\" . 400) (\"Physics\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpom20tcd5.rkt:15:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 1250) (\"Math\" . 900) (\"Physics\" . 1000))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        < #:key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpis8thk1e.rkt:14:4\nactual:     '((81 \"Math\") (83 \"Physics\") (87 \"Chemistry\"))\nexpected:   '((\"Chemistry\" 87) (\"Physics\" 83) (\"Math\" 81))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpis8thk1e.rkt:15:4\nactual:     '((250 \"Chemistry\") (300 \"Physics\") (400 \"Math\"))\nexpected:   '((\"Math\" 400) (\"Physics\" 300) (\"Chemistry\" 250))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpis8thk1e.rkt:16:4\nactual:     '((900 \"Math\") (1000 \"Physics\") (1250 \"Chemistry\"))\nexpected:   '((\"Chemistry\" 1250) (\"Physics\" 1000) (\"Math\" 900))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (x) (list (car x) (cdr x))) dict1)\n        (lambda (x y) (&lt; (cadr x) (cadr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "/tmp/tmpom5ssqzk.rkt:6:22: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 8\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        (lambda (x y) (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpom20tcd5.rkt:13:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 87) (\"Math\" . 81) (\"Physics\" . 83))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpom20tcd5.rkt:14:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 250) (\"Math\" . 400) (\"Physics\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpom20tcd5.rkt:15:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 1250) (\"Math\" . 900) (\"Physics\" . 1000))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (for/list ([(key value) dict1])\n          (list value key))\n        <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwc06rsi2.rkt:14:4\n\n<: contract violation\n  expected: real?\n  given: '(81 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwc06rsi2.rkt:15:4\n\n<: contract violation\n  expected: real?\n  given: '(400 \"Math\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwc06rsi2.rkt:16:4\n\n<: contract violation\n  expected: real?\n  given: '(900 \"Math\")\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        (lambda (x y) (&lt; (cdr x) (cdr y)))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "/tmp/tmp3eru7ry2.rkt:6:22: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n  (sort (map (lambda (k v) (list v k)) dict1)\n        <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122403,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphzuh0ag2.rkt:13:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 87) (\"Math\" . 81) (\"Physics\" . 83))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphzuh0ag2.rkt:14:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 250) (\"Math\" . 400) (\"Physics\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphzuh0ag2.rkt:15:4\n\nmap: contract violation\n  expected: list?\n  given: '#hash((\"Chemistry\" . 1250) (\"Math\" . 900) (\"Physics\" . 1000))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    }
  ]
}