{
  "name": "mbpp_237_check_occurences",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_237_check_occurences.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (let ([key (hash item)])\n        (if (hash-has-key? occurences key)\n            (hash-set! occurences key (+ 1 (hash-ref occurences key)))\n            (hash-set! occurences key 1))))\n    occurences))\n",
    "  (define (check_occurences_helper test_list result_dict)\n    (if (null? test_list)\n        result_dict\n        (let* ([current_tuple (car test_list)]\n               [current_tuple_count (hash-ref result_dict current_tuple 0)])\n          (hash-set! result_dict current_tuple (+ current_tuple_count 1))\n          (check_occurences_helper (cdr test_list) result_dict))))\n  (check_occurences_helper test_list (make-hash)))\n",
    "  (define (check_occurences_iter test_list acc)\n    (cond\n      [(empty? test_list) acc]\n      [(assoc (first test_list) acc)\n       (check_occurences_iter (rest test_list)\n                              (cons (cons (first test_list)\n                                          (+ 1 (cdr (assoc (first test_list) acc))))\n                                    (remove (assoc (first test_list) acc) acc)))]\n      [else (check_occurences_iter (rest test_list)\n                                   (cons (cons (first test_list) 1) acc))]))\n  (check_occurences_iter test_list '()))\n",
    "  (define (check_occurences_helper test_list result)\n    (cond\n      [(empty? test_list) result]\n      [else (check_occurences_helper (rest test_list) (add-to-dict result (first test_list)))]))\n  (check_occurences_helper test_list empty))\n",
    "  (let ((dict (make-hash)))\n    (for ([i test_list])\n      (hash-set! dict i (add1 (hash-ref dict i 0))))\n    dict))\n",
    "  (define (helper lst acc)\n    (cond\n      [(empty? lst) acc]\n      [else (helper (rest lst) (add-to-dict acc (first lst)))]))\n  (helper test_list empty-dict))\n",
    "  (define (check_occurences_helper test_list dict)\n    (cond ((null? test_list) dict)\n          (else (let ((current_tuple (car test_list))\n                       (current_dict (check_occurences_helper (cdr test_list) dict)))\n                  (cond ((assoc current_tuple current_dict)\n                         (let ((current_count (cdr (assoc current_tuple current_dict))))\n                           (set! current_dict (assoc current_tuple current_dict (add1 current_count)))\n                           current_dict))\n                        (else (cons (cons current_tuple 1) current_dict)))))))\n  (check_occurences_helper test_list '()))\n",
    "  (define (check_occurences_helper test_list result_list)\n    (cond\n      [(empty? test_list) result_list]\n      [else\n       (define current_tuple (car test_list))\n       (define current_tuple_count (count current_tuple result_list))\n       (check_occurences_helper (cdr test_list) (cons (cons current_tuple current_tuple_count) result_list))]))\n  (check_occurences_helper test_list '()))\n",
    "  (define (check_occurences_helper test_list result)\n    (cond\n      [(empty? test_list) result]\n      [else\n       (let* ([current_tuple (first test_list)]\n              [current_tuple_count (hash-ref result current_tuple 0)])\n         (hash-set! result current_tuple (+ 1 current_tuple_count))\n         (check_occurences_helper (rest test_list) result))]))\n  (check_occurences_helper test_list (make-hash)))\n",
    "  (define (check_occurences_helper test_list result_dict)\n    (cond\n      [(empty? test_list) result_dict]\n      [else\n       (define current_tuple (first test_list))\n       (define current_dict (hash))\n       (define current_dict (hash-set! current_dict current_tuple 1))\n       (define current_dict (hash-union result_dict current_dict))\n       (check_occurences_helper (rest test_list) current_dict)]))\n  (check_occurences_helper test_list (hash)))\n",
    "  (let ([occurences (make-hash)])\n    (for ([i test_list])\n      (hash-update occurences i add1 0))\n    occurences))\n",
    "  (let ([occurences (make-hash)])\n    (for ([elem test_list])\n      (hash-update! occurences elem add1 0))\n    occurences))\n",
    "  (let ([dict (make-hash)])\n    (for ([tuple test_list])\n      (hash-update! dict tuple add1 0))\n    dict))\n",
    "  (define (check_occurences_helper test_list result)\n    (if (null? test_list)\n        result\n        (let* ([current_tuple (car test_list)]\n               [current_tuple_count (hash-ref result current_tuple 0)])\n          (hash-set! result current_tuple (+ current_tuple_count 1))\n          (check_occurences_helper (cdr test_list) result))))\n  (check_occurences_helper test_list (make-hash)))\n",
    "  (letrec ([occurences (make-hash)])\n    (for ([tuple test_list])\n      (hash-update occurences tuple add1 0))\n    occurences))\n",
    "  (let ([occurences (make-hash)])\n    (for ([tuple test_list])\n      (hash-update! occurences tuple add1 0))\n    occurences))\n",
    "  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update occurences item add1 0))\n    occurences))\n",
    "  (let ((occurences (make-hash)))\n    (for ([item test_list])\n      (hash-update! occurences item add1 0))\n    occurences))\n",
    "  (letrec ([occurences (make-hash)])\n    (for ([tuple test_list])\n      (hash-update! occurences tuple add1 0))\n    occurences))\n",
    "  (let ([dict (make-hash)])\n    (for ([item test_list])\n      (hash-update! dict item add1 0))\n    dict))\n"
  ]
}