{
  "name": "mbpp_237_check_occurences",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_237_check_occurences.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (let ([key (hash item)])\n        (if (hash-has-key? occurences key)\n            (hash-set! occurences key (+ 1 (hash-ref occurences key)))\n            (hash-set! occurences key 1))))\n    occurences))\n",
    "  (define (check_occurences_helper test_list result_dict)\n    (if (null? test_list)\n        result_dict\n        (let* ([current_tuple (car test_list)]\n               [current_tuple_count (hash-ref result_dict current_tuple 0)])\n          (hash-set! result_dict current_tuple (+ current_tuple_count 1))\n          (check_occurences_helper (cdr test_list) result_dict))))\n  (check_occurences_helper test_list (make-hash)))\n",
    "  (define (check_occurences_iter test_list acc)\n    (cond\n      [(empty? test_list) acc]\n      [(assoc (first test_list) acc)\n       (check_occurences_iter (rest test_list)\n                              (cons (cons (first test_list)\n                                          (+ 1 (cdr (assoc (first test_list) acc))))\n                                    (remove (assoc (first test_list) acc) acc)))]\n      [else (check_occurences_iter (rest test_list)\n                                   (cons (cons (first test_list) 1) acc))]))\n  (check_occurences_iter test_list '()))\n",
    "  (define (check_occurences_helper test_list result)\n    (cond\n      [(empty? test_list) result]\n      [else (check_occurences_helper (rest test_list) (add-to-dict result (first test_list)))]))\n  (check_occurences_helper test_list empty))\n",
    "  (let ((dict (make-hash)))\n    (for ([i test_list])\n      (hash-set! dict i (add1 (hash-ref dict i 0))))\n    dict))\n",
    "  (define (helper lst acc)\n    (cond\n      [(empty? lst) acc]\n      [else (helper (rest lst) (add-to-dict acc (first lst)))]))\n  (helper test_list empty-dict))\n",
    "  (define (check_occurences_helper test_list dict)\n    (cond ((null? test_list) dict)\n          (else (let ((current_tuple (car test_list))\n                       (current_dict (check_occurences_helper (cdr test_list) dict)))\n                  (cond ((assoc current_tuple current_dict)\n                         (let ((current_count (cdr (assoc current_tuple current_dict))))\n                           (set! current_dict (assoc current_tuple current_dict (add1 current_count)))\n                           current_dict))\n                        (else (cons (cons current_tuple 1) current_dict)))))))\n  (check_occurences_helper test_list '()))\n",
    "  (define (check_occurences_helper test_list result_list)\n    (cond\n      [(empty? test_list) result_list]\n      [else\n       (define current_tuple (car test_list))\n       (define current_tuple_count (count current_tuple result_list))\n       (check_occurences_helper (cdr test_list) (cons (cons current_tuple current_tuple_count) result_list))]))\n  (check_occurences_helper test_list '()))\n",
    "  (define (check_occurences_helper test_list result)\n    (cond\n      [(empty? test_list) result]\n      [else\n       (let* ([current_tuple (first test_list)]\n              [current_tuple_count (hash-ref result current_tuple 0)])\n         (hash-set! result current_tuple (+ 1 current_tuple_count))\n         (check_occurences_helper (rest test_list) result))]))\n  (check_occurences_helper test_list (make-hash)))\n",
    "  (define (check_occurences_helper test_list result_dict)\n    (cond\n      [(empty? test_list) result_dict]\n      [else\n       (define current_tuple (first test_list))\n       (define current_dict (hash))\n       (define current_dict (hash-set! current_dict current_tuple 1))\n       (define current_dict (hash-union result_dict current_dict))\n       (check_occurences_helper (rest test_list) current_dict)]))\n  (check_occurences_helper test_list (hash)))\n",
    "  (let ([occurences (make-hash)])\n    (for ([i test_list])\n      (hash-update occurences i add1 0))\n    occurences))\n",
    "  (let ([occurences (make-hash)])\n    (for ([elem test_list])\n      (hash-update! occurences elem add1 0))\n    occurences))\n",
    "  (let ([dict (make-hash)])\n    (for ([tuple test_list])\n      (hash-update! dict tuple add1 0))\n    dict))\n",
    "  (define (check_occurences_helper test_list result)\n    (if (null? test_list)\n        result\n        (let* ([current_tuple (car test_list)]\n               [current_tuple_count (hash-ref result current_tuple 0)])\n          (hash-set! result current_tuple (+ current_tuple_count 1))\n          (check_occurences_helper (cdr test_list) result))))\n  (check_occurences_helper test_list (make-hash)))\n",
    "  (letrec ([occurences (make-hash)])\n    (for ([tuple test_list])\n      (hash-update occurences tuple add1 0))\n    occurences))\n",
    "  (let ([occurences (make-hash)])\n    (for ([tuple test_list])\n      (hash-update! occurences tuple add1 0))\n    occurences))\n",
    "  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update occurences item add1 0))\n    occurences))\n",
    "  (let ((occurences (make-hash)))\n    (for ([item test_list])\n      (hash-update! occurences item add1 0))\n    occurences))\n",
    "  (letrec ([occurences (make-hash)])\n    (for ([tuple test_list])\n      (hash-update! occurences tuple add1 0))\n    occurences))\n",
    "  (let ([dict (make-hash)])\n    (for ([item test_list])\n      (hash-update! dict item add1 0))\n    dict))\n",
    "  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update occurences item add1 0))\n    occurences))\n",
    "  (define (check_occurences_helper test_list acc)\n    (if (null? test_list)\n        acc\n        (let ((tuple (car test_list)))\n          (if (assoc tuple acc)\n              (let ((new_acc (assoc-replace acc tuple (add1 (cdr (assoc tuple acc))))))\n                (check_occurences_helper (cdr test_list) new_acc))\n              (let ((new_acc (cons (cons tuple 1) acc)))\n                (check_occurences_helper (cdr test_list) new_acc))))))\n  (check_occurences_helper test_list '()))\n",
    "  (define (check_occurences_iter test_list acc)\n    (cond\n      [(empty? test_list) acc]\n      [else (check_occurences_iter (rest test_list) (add_to_dict (first test_list) acc))]))\n  (check_occurences_iter test_list (make-hash)))\n",
    "  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update occurences item add1 0))\n    occurences))\n",
    "  (define (check_occurences_helper test_list acc)\n    (cond\n      [(empty? test_list) acc]\n      [else (check_occurences_helper (rest test_list) (cons (cons (first test_list) (add1 (get (first test_list) acc 0))) acc))]))\n  (check_occurences_helper test_list '()))\n",
    "  (let ((occurences (make-hash)))\n    (for ([item test_list])\n      (hash-update! occurences item add1 0))\n    occurences))\n",
    "  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update occurences item add1 0))\n    occurences))\n",
    "  (let ([dict (make-hash)])\n    (for ([item test_list])\n      (hash-set! dict item (add1 (hash-ref dict item 0))))\n    dict))\n",
    "  (define (helper test_list result)\n    (cond\n      [(empty? test_list) result]\n      [else (define current_tuple (first test_list))\n            (define current_tuple_count (hash-ref result current_tuple 0))\n            (define new_result (hash-set result current_tuple (+ 1 current_tuple_count)))\n            (helper (rest test_list) new_result)]))\n  (helper test_list (make-hash)))\n",
    "  (define (check_occurences_iter test_list dict)\n    (cond\n      [(empty? test_list) dict]\n      [else (define current_tuple (car test_list))\n            (define new_dict (if (dict-has-key? dict current_tuple)\n                                 (dict-set dict current_tuple (+ 1 (dict-ref dict current_tuple)))\n                                 (dict-set dict current_tuple 1)))\n            (check_occurences_iter (cdr test_list) new_dict)]))\n  (check_occurences_iter test_list (make-dict)))\n",
    "  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update occurences item add1 0))\n    occurences))\n",
    "  (let ([dict (make-hash)])\n    (for ([i test_list])\n      (hash-update dict i add1 0))\n    dict))\n",
    "  (let ((occurences (make-hash)))\n    (for ([tuple test_list])\n      (hash-update! occurences tuple add1 0))\n    occurences))\n",
    "  (define (helper test_list result)\n    (cond\n      [(empty? test_list) result]\n      [else (define current (first test_list))\n            (define rest (rest test_list))\n            (define current_result (assoc current result))\n            (cond\n              [(empty? current_result) (helper rest (cons (list current 1) result))]\n              [else (define current_count (second current_result))\n                    (define new_count (+ current_count 1))\n                    (define new_result (cons (list current new_count) (remove current_result result)))\n                    (helper rest new_result)])]))\n  (helper test_list '()))\n</code>\n",
    "  (define (helper lst acc)\n    (if (null? lst)\n        acc\n        (let* ([tuple (car lst)]\n               [occurences (assoc tuple acc)])\n          (if occurences\n              (helper (cdr lst) (cons (cons tuple (+ 1 (cdr occurences))) (remove occurences acc)))\n              (helper (cdr lst) (cons (cons tuple 1) acc))))))\n  (helper test_list '()))\n",
    "  (define (check_occurences_helper test_list result_dict)\n    (cond\n      [(empty? test_list) result_dict]\n      [else\n       (define current_tuple (first test_list))\n       (define current_tuple_count (hash-ref result_dict current_tuple 0))\n       (define new_tuple_count (+ current_tuple_count 1))\n       (hash-set! result_dict current_tuple new_tuple_count)\n       (check_occurences_helper (rest test_list) result_dict)]))\n  (check_occurences_helper test_list (make-hash)))\n</code>\n",
    "  (define (check_occurences_helper test_list result)\n    (if (null? test_list)\n        result\n        (let* ([current_tuple (car test_list)]\n               [current_tuple_count (hash-ref result current_tuple 0)])\n          (hash-set! result current_tuple (+ current_tuple_count 1))\n          (check_occurences_helper (cdr test_list) result))))\n  (check_occurences_helper test_list (make-hash)))\n",
    "  (define (check_occurences_helper test_list result)\n    (if (null? test_list)\n        result\n        (let* ([tuple (car test_list)]\n               [tuple_count (hash-ref result tuple 0)])\n          (hash-set! result tuple (+ 1 tuple_count))\n          (check_occurences_helper (cdr test_list) result))))\n  (check_occurences_helper test_list (make-hash)))\n",
    "  (let ([occurences (make-hash)])\n    (for ([i test_list])\n      (hash-update occurences i add1 0))\n    occurences))\n",
    "  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update occurences item add1 0))\n    occurences))\n",
    "  (define (helper test_list acc)\n    (cond\n      [(empty? test_list) acc]\n      [else (helper (rest test_list)\n                    (cond\n                      [(assoc (first test_list) acc) (cons (cons (first test_list) (+ 1 (cdr (assoc (first test_list) acc)))) (remove (assoc (first test_list) acc) acc))]\n                      [else (cons (cons (first test_list) 1) acc)]))]))\n  (helper test_list '()))\n",
    "  (define (check_occurences_iter test_list acc)\n    (if (null? test_list)\n        acc\n        (let* ([current_tuple (car test_list)]\n               [current_tuple_count (hash-ref acc current_tuple 0)])\n          (hash-set! acc current_tuple (+ current_tuple_count 1))\n          (check_occurences_iter (cdr test_list) acc))))\n  (check_occurences_iter test_list (make-hash)))\n",
    "  (define (check_occurences_helper test_list result_list)\n    (if (null? test_list)\n        result_list\n        (let ([current_tuple (car test_list)]\n              [current_tuple_occurences (assoc current_tuple result_list)])\n          (if (null? current_tuple_occurences)\n              (check_occurences_helper (cdr test_list)\n                                       (cons (cons current_tuple 1) result_list))\n              (check_occurences_helper (cdr test_list)\n                                       (cons (cons current_tuple (+ 1 (cdr current_tuple_occurences)))\n                                             (remove current_tuple_occurences result_list)))))))\n  (check_occurences_helper test_list '()))\n",
    "  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update occurences item add1 0))\n    occurences))\n",
    "  (define (helper test_list result)\n    (cond\n      [(empty? test_list) result]\n      [(assoc (first test_list) result) (helper (rest test_list) (cons (cons (first test_list) (+ 1 (cdr (assoc (first test_list) result)))) (remove (assoc (first test_list) result) result)))]\n      [else (helper (rest test_list) (cons (cons (first test_list) 1) result))]))\n  (helper test_list '()))\n",
    "  (define (check_occurences_iter test_list acc)\n    (cond\n      [(empty? test_list) acc]\n      [else\n       (define current_tuple (first test_list))\n       (define current_tuple_count (hash-ref acc current_tuple 0))\n       (check_occurences_iter (rest test_list) (hash-set acc current_tuple (+ 1 current_tuple_count)))]))\n  (check_occurences_iter test_list (make-hash)))\n",
    "  (let ([occurences (make-hash)])\n    (for ([tuple test_list])\n      (hash-update! occurences tuple add1 0))\n    occurences))\n",
    "  (define (helper test_list acc)\n    (cond [(empty? test_list) acc]\n          [else (helper (rest test_list) (add-to-dict acc (first test_list)))]))\n  (helper test_list (make-dict)))\n",
    "  (define (check_occurences_helper test_list acc)\n    (cond\n      [(empty? test_list) acc]\n      [else (check_occurences_helper (rest test_list) (add_to_dict (first test_list) acc))]))\n  (check_occurences_helper test_list (make-hash)))\n",
    "  (let ([dict (make-hash)])\n    (for ([i test_list])\n      (hash-set! dict i (add1 (hash-ref dict i 0))))\n    dict))\n",
    "  (let ([dictionary (make-hash)])\n    (for ([tuple test_list])\n      (hash-update dictionary tuple add1 0))\n    dictionary))\n",
    "  (define (helper test_list acc)\n    (cond\n      [(empty? test_list) acc]\n      [else\n       (helper (rest test_list)\n               (cond\n                 [(assoc (first test_list) acc)\n                  (cons (cons (first test_list) (+ 1 (cdr (assoc (first test_list) acc))))\n                        (remove (assoc (first test_list) acc) acc))]\n                 [else (cons (cons (first test_list) 1) acc)]))]))\n  (helper test_list '()))\n",
    "  (define (check_occurences_helper test_list acc)\n    (cond ((null? test_list) acc)\n          (else (check_occurences_helper (cdr test_list) (cons (cons (car test_list) (add1 (or (assoc (car test_list) acc) 0))) acc)))))\n  (check_occurences_helper test_list '()))\n",
    "  (define (check_occurences_helper test_list acc)\n    (if (null? test_list)\n        acc\n        (let ((tuple (car test_list)))\n          (if (assoc tuple acc)\n              (check_occurences_helper (cdr test_list) (cons (cons tuple (+ (cdr (assoc tuple acc)) 1)) (remove (assoc tuple acc) acc)))\n              (check_occurences_helper (cdr test_list) (cons (cons tuple 1) acc))))))\n  (check_occurences_helper test_list '()))\n",
    "  (let ((occurences (make-hash)))\n    (for ([item test_list])\n      (hash-update! occurences item add1 0))\n    occurences))\n",
    "  (let ([occurences (make-hash)])\n    (for ([i test_list])\n      (hash-update occurences i add1 0))\n    occurences))\n",
    "  (define (check_occurences_helper test_list counter)\n    (if (null? test_list)\n        counter\n        (let ([current_tuple (car test_list)]\n              [current_counter (assoc current_tuple counter)])\n          (if (null? current_counter)\n              (check_occurences_helper (cdr test_list) (cons (list current_tuple 1) counter))\n              (check_occurences_helper (cdr test_list) (cons (list current_tuple (+ 1 (cadr current_counter))) (remove current_counter counter)))))))\n  (check_occurences_helper test_list '()))\n",
    "  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update occurences item add1 0))\n    occurences))\n",
    "  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update occurences item add1 0))\n    occurences))\n",
    "  (let ([dict (make-hash)])\n    (for ([i test_list])\n      (hash-set! dict i (add1 (hash-ref dict i 0))))\n    dict))\n",
    "  (define (check_occurences_iter test_list result)\n    (cond\n      [(empty? test_list) result]\n      [else\n       (let* ([current_tuple (car test_list)]\n              [current_tuple_count (hash-ref result current_tuple 0)])\n         (hash-set! result current_tuple (+ 1 current_tuple_count))\n         (check_occurences_iter (cdr test_list) result))]))\n  (check_occurences_iter test_list (make-hash)))\n",
    "  (let ([occurences (make-hash)])\n    (for ([elem test_list])\n      (hash-update! occurences elem add1 0))\n    occurences))\n",
    "  (define (check_occurences_helper test_list result_list)\n    (if (null? test_list)\n        result_list\n        (let* ([current_tuple (car test_list)]\n               [current_tuple_count (if (assoc current_tuple result_list)\n                                        (cdr (assoc current_tuple result_list))\n                                        0)])\n          (check_occurences_helper (cdr test_list) (cons (cons current_tuple (+ current_tuple_count 1)) result_list)))))\n  (check_occurences_helper test_list '()))\n",
    "  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update occurences item add1 0))\n    occurences))\n",
    "  (define (check_occurences_helper test_list dict)\n    (if (null? test_list)\n        dict\n        (let ([current_tuple (car test_list)])\n          (if (dict-has-key? dict current_tuple)\n              (check_occurences_helper (cdr test_list) (dict-set dict current_tuple (+ 1 (dict-ref dict current_tuple))))\n              (check_occurences_helper (cdr test_list) (dict-set dict current_tuple 1))))))\n  (check_occurences_helper test_list (make-dict)))\n",
    "  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update occurences item add1 0))\n    occurences))\n",
    "  (define (check_occurences_helper test_list result_list)\n    (cond\n      [(empty? test_list) result_list]\n      [else (check_occurences_helper (rest test_list) (cons (cons (first test_list) (count (first test_list) test_list)) result_list))]))\n  (check_occurences_helper test_list '()))\n",
    "  (define (check_occurences_helper test_list acc)\n    (if (null? test_list)\n        acc\n        (let* ([current_tuple (car test_list)]\n               [current_tuple_count (hash-ref acc current_tuple 0)])\n          (hash-set! acc current_tuple (+ 1 current_tuple_count))\n          (check_occurences_helper (cdr test_list) acc))))\n  (check_occurences_helper test_list (make-hash)))\n",
    "  (define (check_occurences_iter test_list acc)\n    (if (null? test_list)\n        acc\n        (let ((tuple (car test_list)))\n          (if (assoc tuple acc)\n              (check_occurences_iter (cdr test_list) (cons (cons tuple (+ (cdr (assoc tuple acc)) 1)) (remove (assoc tuple acc) acc)))\n              (check_occurences_iter (cdr test_list) (cons (cons tuple 1) acc))))))\n  (check_occurences_iter test_list '()))\n",
    "  (define (check_occurences_helper test_list acc)\n    (if (null? test_list)\n        acc\n        (let* ((current_item (car test_list))\n               (current_item_count (hash-ref acc current_item 0)))\n          (hash-set! acc current_item (+ current_item_count 1))\n          (check_occurences_helper (cdr test_list) acc))))\n  (check_occurences_helper test_list (make-hash)))\n",
    "  (let ([occurences (make-hash)])\n    (for ([tuple test_list])\n      (hash-update! occurences tuple add1 0))\n    occurences))\n",
    "  (define (check_occurences_helper test_list result_dict)\n    (cond\n      [(empty? test_list) result_dict]\n      [else\n       (let* ([current_tuple (first test_list)]\n              [current_tuple_occurences (dict-ref result_dict current_tuple 0)])\n         (check_occurences_helper (rest test_list)\n                                  (dict-set result_dict current_tuple (+ 1 current_tuple_occurences))))]))\n  (check_occurences_helper test_list (make-dict)))\n",
    "  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update occurences item add1 0))\n    occurences))\n",
    "  (define (helper test_list acc)\n    (if (null? test_list)\n        acc\n        (let* ([first_tuple (car test_list)]\n               [first_tuple_key (car first_tuple)]\n               [first_tuple_value (cdr first_tuple)]\n               [acc_value (assoc first_tuple_key acc)])\n          (if (null? acc_value)\n              (helper (cdr test_list) (cons (cons first_tuple_key first_tuple_value) acc))\n              (helper (cdr test_list) (cons (cons first_tuple_key (+ first_tuple_value (cdr acc_value))) (remove acc_value acc)))))))\n  (helper test_list '()))\n",
    "  (let ([dict (make-hash)])\n    (for ([elem test_list])\n      (hash-update dict elem add1 0))\n    dict))\n",
    "  (define (check_occurences_helper test_list result_list)\n    (cond ((null? test_list) result_list)\n          ((assoc (car test_list) result_list)\n           (check_occurences_helper (cdr test_list)\n                                    (cons (cons (car test_list)\n                                                (+ 1 (cdr (assoc (car test_list) result_list))))\n                                          (remove (assoc (car test_list) result_list) result_list))))\n          (else (check_occurences_helper (cdr test_list)\n                                         (cons (cons (car test_list) 1) result_list)))))\n  (check_occurences_helper test_list '()))\n",
    "  (let ([dict (make-hash)])\n    (for ([i test_list])\n      (hash-set! dict i (add1 (hash-ref dict i 0))))\n    dict))\n",
    "  (define (check_occurences_helper test_list acc)\n    (cond\n      [(empty? test_list) acc]\n      [else (check_occurences_helper (rest test_list) (add_to_dict (first test_list) acc))]))\n  (check_occurences_helper test_list empty))\n",
    "  (define (check_occurences_iter test_list result)\n    (if (null? test_list)\n        result\n        (let* ([current_tuple (car test_list)]\n               [current_tuple_count (hash-ref result current_tuple 0)])\n          (hash-set! result current_tuple (+ 1 current_tuple_count))\n          (check_occurences_iter (cdr test_list) result))))\n  (check_occurences_iter test_list (make-hash)))\n",
    "  (define (helper test_list result)\n    (if (null? test_list)\n        result\n        (let ([current_tuple (car test_list)]\n              [current_tuple_count (hash-ref result current_tuple 0)])\n          (hash-set! result current_tuple (+ current_tuple_count 1))\n          (helper (cdr test_list) result))))\n  (helper test_list (make-hash)))\n",
    "  (let ([occurences (make-hash)])\n    (for ([tuple test_list])\n      (hash-update! occurences tuple add1 0))\n    occurences))\n",
    "  (define (check_occurences_iter test_list result_dict)\n    (cond\n      [(empty? test_list) result_dict]\n      [else (check_occurences_iter (rest test_list) (add_to_dict (first test_list) result_dict))]))\n  (check_occurences_iter test_list (make-hash)))\n",
    "  (define (check_occurences_helper test_list acc)\n    (cond\n      [(empty? test_list) acc]\n      [else (check_occurences_helper (rest test_list) (cons (cons (first test_list) (add1 (or (assoc (first test_list) acc) 0))) acc))]))\n  (check_occurences_helper test_list '()))\n",
    "  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update occurences item add1 0))\n    occurences))\n",
    "  (let ([occurences (make-hash)])\n    (for ([tuple test_list])\n      (hash-update! occurences tuple add1 0))\n    occurences))\n",
    "  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update occurences item add1 0))\n    occurences))\n",
    "  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update occurences item add1 0))\n    occurences))\n",
    "  (let ([occurences (make-hash)])\n    (for ([tuple test_list])\n      (hash-update! occurences tuple add1 0))\n    occurences))\n",
    "  (let ([occurences (make-hash)])\n    (for ([i test_list])\n      (hash-set! occurences i (add1 (hash-ref occurences i 0))))\n    occurences))\n",
    "  (define (check_occurences_helper test_list result_dict)\n    (if (null? test_list)\n        result_dict\n        (let ([current_tuple (car test_list)])\n          (if (dict-has-key? result_dict current_tuple)\n              (check_occurences_helper (cdr test_list) (dict-set result_dict current_tuple (+ 1 (dict-ref result_dict current_tuple))))\n              (check_occurences_helper (cdr test_list) (dict-set result_dict current_tuple 1))))))\n  (check_occurences_helper test_list (make-dict)))\n",
    "  (define (check_occurences_helper test_list result)\n    (cond\n      [(empty? test_list) result]\n      [else\n       (define current_tuple (first test_list))\n       (define current_tuple_occurences (hash-ref result current_tuple 0))\n       (define new_tuple_occurences (+ current_tuple_occurences 1))\n       (define new_result (hash-set result current_tuple new_tuple_occurences))\n       (check_occurences_helper (rest test_list) new_result)]))\n  (check_occurences_helper test_list (make-hash)))\n",
    "  (define (check_occurences_helper test_list acc)\n    (cond\n      [(empty? test_list) acc]\n      [else (check_occurences_helper (rest test_list) (add_to_dict (first test_list) acc))]))\n  (check_occurences_helper test_list (make-hash)))\n",
    "  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update! occurences item (\u03bb (x) (if x (+ x 1) 1))))\n    occurences))\n",
    "  (letrec ([occurences (for/hash ([tuple test_list])\n                          (hash-ref occurences tuple (\u03bb () 0))\n                          (hash-set! occurences tuple (+ 1 (hash-ref occurences tuple))))])\n    occurences))\n",
    "  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update occurences item add1 0))\n    occurences))\n",
    "  (letrec ([occurences (make-hash)])\n    (for ([tuple test_list])\n      (hash-update! occurences tuple add1 0))\n    occurences))\n",
    "  (define (helper test_list result)\n    (cond\n      [(empty? test_list) result]\n      [else (define current_tuple (first test_list))\n            (define current_tuple_count (hash-ref result current_tuple 0))\n            (define new_result (hash-set result current_tuple (+ current_tuple_count 1)))\n            (helper (rest test_list) new_result)]))\n  (helper test_list (make-hash)))\n",
    "  (define (helper test_list acc)\n    (cond\n      [(empty? test_list) acc]\n      [else (helper (rest test_list) (cons (cons (first test_list) (add1 (or (hash-ref acc (first test_list) 0) 0))) acc))]))\n  (helper test_list (make-hash)))\n",
    "  (let ([occurences (make-hash)])\n    (for ([tuple test_list])\n      (hash-update! occurences tuple add1 0))\n    occurences))\n",
    "  (let ([occurences (make-hash)])\n    (for ([tuple test_list])\n      (hash-update! occurences tuple add1 0))\n    occurences))\n",
    "  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update! occurences item add1 0))\n    occurences))\n",
    "  (define (check_occurences_helper test_list dict)\n    (cond\n      [(empty? test_list) dict]\n      [else\n       (let* ([tuple (first test_list)]\n              [dict (if (dict-has-key? dict tuple)\n                        (dict-set dict tuple (+ 1 (dict-ref dict tuple)))\n                        (dict-set dict tuple 1))])\n         (check_occurences_helper (rest test_list) dict))]))\n  (check_occurences_helper test_list (make-dict)))\n",
    "  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update! occurences item add1 0))\n    occurences))\n",
    "  (define (check_occurences_helper test_list result)\n    (if (null? test_list)\n        result\n        (let ((tuple (car test_list)))\n          (if (assoc tuple result)\n              (let ((new_result (cons (cons tuple (+ 1 (cdr (assoc tuple result)))) (remove (assoc tuple result) result))))\n                (check_occurences_helper (cdr test_list) new_result))\n              (check_occurences_helper (cdr test_list) (cons (cons tuple 1) result))))))\n  (check_occurences_helper test_list '()))\n",
    "  (letrec ([helper (lambda (test_list acc)\n                     (cond\n                       [(empty? test_list) acc]\n                       [(member (first test_list) acc) (helper (rest test_list) acc)]\n                       [else (helper (rest test_list) (cons (first test_list) acc))]))])\n    (helper test_list '())))\n",
    "  (let ([occurences (make-hash)])\n    (for ([tuple test_list])\n      (hash-update! occurences tuple add1 0))\n    occurences))\n",
    "  (define (check_occurences_iter test_list dict)\n    (cond\n      [(empty? test_list) dict]\n      [else\n       (define current_tuple (first test_list))\n       (define current_tuple_count (get current_tuple dict 0))\n       (define new_tuple_count (+ current_tuple_count 1))\n       (define new_dict (put current_tuple new_tuple_count dict))\n       (check_occurences_iter (rest test_list) new_dict)]))\n  (check_occurences_iter test_list (make-hash)))\n",
    "  (define (check_occurences_helper test_list result)\n    (cond [(empty? test_list) result]\n          [else (check_occurences_helper (rest test_list) (add_to_dict (first test_list) result))]))\n  (check_occurences_helper test_list (make-hash)))\n",
    "  (define (check_occurences_helper test_list result_dict)\n    (cond\n      [(empty? test_list) result_dict]\n      [else\n       (let* ([current_tuple (first test_list)]\n              [current_tuple_count (dict-ref result_dict current_tuple 0)])\n         (check_occurences_helper (rest test_list)\n                                  (dict-set result_dict current_tuple (+ current_tuple_count 1))))]))\n  (check_occurences_helper test_list (make-dict)))\n",
    "  (let ([occurences (make-hash)])\n    (for ([tuple test_list])\n      (hash-update! occurences tuple add1 0))\n    occurences))\n",
    "  (let ([occurences (make-hash)])\n    (for ([tuple test_list])\n      (hash-update! occurences tuple add1 0))\n    occurences))\n",
    "  (let ([dict (make-hash)])\n    (for ([i test_list])\n      (hash-set! dict i (add1 (hash-ref dict i 0))))\n    dict))\n",
    "  (define (check_occurences_helper test_list acc)\n    (cond\n      [(empty? test_list) acc]\n      [else\n       (define current_tuple (first test_list))\n       (define current_tuple_count (hash-ref acc current_tuple 0))\n       (define new_tuple_count (+ current_tuple_count 1))\n       (define new_acc (hash-set acc current_tuple new_tuple_count))\n       (check_occurences_helper (rest test_list) new_acc)]))\n  (check_occurences_helper test_list (make-hash)))\n",
    "  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update occurences item add1 0))\n    occurences))\n",
    "  (define (check_occurences_helper test_list result)\n    (cond\n      [(empty? test_list) result]\n      [else\n       (check_occurences_helper (rest test_list)\n                                (cond\n                                  [(assoc (first test_list) result)\n                                   (cons (cons (first test_list)\n                                               (+ 1 (cdr (assoc (first test_list) result))))\n                                         (remove (assoc (first test_list) result) result))]\n                                  [else (cons (cons (first test_list) 1) result)]))]))\n  (check_occurences_helper test_list '()))\n",
    "  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update occurences item add1 0))\n    occurences))\n",
    "  (let ([occurences (make-hash)])\n    (for ([i test_list])\n      (hash-update occurences i add1 0))\n    occurences))\n",
    "  (define (check_occurences_helper test_list acc)\n    (cond\n      [(empty? test_list) acc]\n      [(member (first test_list) acc) (check_occurences_helper (rest test_list) acc)]\n      [else (check_occurences_helper (rest test_list) (cons (first test_list) acc))]))\n  (check_occurences_helper test_list '()))\n",
    "  (define (check_occurences_helper test_list acc)\n    (cond [(empty? test_list) acc]\n          [(member (first test_list) acc) (check_occurences_helper (rest test_list) acc)]\n          [else (check_occurences_helper (rest test_list) (cons (first test_list) acc))]))\n  (check_occurences_helper test_list '()))\n",
    "  (let ([occurences (make-hash)])\n    (for ([tuple test_list]\n          #:when (not (hash-has-key? occurences tuple)))\n      (hash-set! occurences tuple (count tuple test_list)))\n    occurences))\n",
    "  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update! occurences item add1 0))\n    occurences))\n",
    "  (let ([occurences (make-hash)])\n    (for ([tuple test_list])\n      (hash-update! occurences tuple add1 0))\n    occurences))\n",
    "  (define (check_occurences_helper test_list result)\n    (cond\n      [(empty? test_list) result]\n      [(assoc (first test_list) result)\n       (check_occurences_helper (rest test_list) (cons (cons (first test_list) (+ (cdr (assoc (first test_list) result)) 1)) (remove (assoc (first test_list) result) result)))\n      [else\n       (check_occurences_helper (rest test_list) (cons (cons (first test_list) 1) result))]))\n  (check_occurences_helper test_list '()))\n",
    "  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update! occurences item add1 0))\n    occurences))\n",
    "  (let ([occurences (make-hash)])\n    (for ([tuple test_list])\n      (hash-update! occurences tuple add1 0))\n    occurences))\n",
    "  (define (check_occurences_helper test_list acc)\n    (cond\n      [(empty? test_list) acc]\n      [(assoc (first test_list) acc) (check_occurences_helper (rest test_list) (cons (cons (first test_list) (+ 1 (cdr (assoc (first test_list) acc)))) (remove (assoc (first test_list) acc) acc))) ]\n      [else (check_occurences_helper (rest test_list) (cons (cons (first test_list) 1) acc))]))\n  (check_occurences_helper test_list '()))\n",
    "  (let ([occurences (make-hash)])\n    (for ([i test_list])\n      (hash-set! occurences i (add1 (hash-ref occurences i 0))))\n    occurences))\n",
    "  (let ([dict (make-hash)])\n    (for ([i test_list])\n      (hash-set! dict i (add1 (hash-ref dict i 0))))\n    dict))\n",
    "  (define (check_occurences_helper test_list acc)\n    (cond\n      [(empty? test_list) acc]\n      [(member (first test_list) acc) (check_occurences_helper (rest test_list) (cons (cons (first test_list) (+ 1 (cdr (assoc (first test_list) acc)))) (remove (first test_list) acc))) ]\n      [else (check_occurences_helper (rest test_list) (cons (cons (first test_list) 1) acc))]))\n  (check_occurences_helper test_list '()))\n",
    "  (let ([occurences (make-hash)])\n    (for ([tuple test_list])\n      (hash-update occurences tuple add1 0))\n    occurences))\n",
    "  (let ([occurences (make-hash)])\n    (for ([tuple test_list])\n      (hash-update! occurences tuple add1 0))\n    occurences))\n",
    "  (define (check_occurences_iter test_list result_dict)\n    (if (null? test_list)\n        result_dict\n        (let ([current_tuple (car test_list)]\n              [current_dict result_dict])\n          (if (dict-has-key? current_dict current_tuple)\n              (check_occurences_iter (cdr test_list) (dict-set current_dict current_tuple (+ 1 (dict-ref current_dict current_tuple))))\n              (check_occurences_iter (cdr test_list) (dict-set current_dict current_tuple 1))))))\n  (check_occurences_iter test_list (make-dict)))\n",
    "  (define (check_occurences_helper test_list acc)\n    (cond\n      [(empty? test_list) acc]\n      [else (check_occurences_helper (rest test_list) (cons (cons (first test_list) (add1 (or (hash-ref acc (first test_list) 0) 0))) acc))]))\n  (check_occurences_helper test_list (make-hash)))\n",
    "  (define (helper test_list)\n    (if (null? test_list)\n        '()\n        (cons (cons (car test_list) (count (car test_list) test_list)) (helper (cdr test_list)))))\n  (helper test_list))\n",
    "  (let ([occurences (make-hash)])\n    (for ([tuple test_list])\n      (hash-update! occurences tuple add1 0))\n    occurences))\n",
    "  (define (helper test_list result)\n    (cond\n      [(empty? test_list) result]\n      [(assoc (first test_list) result) (helper (rest test_list) (cons (cons (first test_list) (+ 1 (cdr (assoc (first test_list) result)))) (remove (assoc (first test_list) result) result))) ]\n      [else (helper (rest test_list) (cons (cons (first test_list) 1) result))]))\n  (helper test_list '()))\n",
    "  (define (check_occurences_helper test_list result)\n    (if (null? test_list)\n        result\n        (let ([current_tuple (car test_list)]\n              [current_tuple_count (hash-ref result current_tuple 0)])\n          (hash-set! result current_tuple (+ 1 current_tuple_count))\n          (check_occurences_helper (cdr test_list) result))))\n  (check_occurences_helper test_list (make-hash)))\n",
    "  (define (check_occurences_helper test_list result_dict)\n    (cond\n      [(empty? test_list) result_dict]\n      [else\n       (define current_tuple (first test_list))\n       (define current_dict (first result_dict))\n       (define current_count (dict-ref current_dict current_tuple 0))\n       (define new_count (+ current_count 1))\n       (define new_dict (dict-set current_dict current_tuple new_count))\n       (check_occurences_helper (rest test_list) (cons new_dict result_dict))]))\n  (check_occurences_helper test_list (list (dict))))\n",
    "  (define (helper test_list result)\n    (if (null? test_list)\n        result\n        (let ((current_tuple (car test_list))\n              (current_dict (car result)))\n          (if (dict-has-key? current_dict current_tuple)\n              (helper (cdr test_list) (cons (dict-set current_dict current_tuple (+ 1 (dict-ref current_dict current_tuple))) (cdr result)))\n              (helper (cdr test_list) (cons (dict-set current_dict current_tuple 1) (cdr result)))))))\n  (helper test_list (list (make-dict))))\n",
    "  (let ([occurences (make-hash)])\n    (for ([elem test_list])\n      (hash-update occurences elem add1 0))\n    occurences))\n",
    "  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update occurences item add1 0))\n    occurences))\n",
    "  (define (check_occurences_helper test_list acc)\n    (if (null? test_list)\n        acc\n        (let* ([current_tuple (car test_list)]\n               [current_tuple_count (if (assoc current_tuple acc)\n                                        (cdr (assoc current_tuple acc))\n                                        0)])\n          (check_occurences_helper (cdr test_list) (cons (cons current_tuple (+ current_tuple_count 1)) acc)))))\n  (check_occurences_helper test_list '()))\n",
    "  (define (check_occurences_helper test_list result_dict)\n    (cond\n      [(empty? test_list) result_dict]\n      [else\n       (define current_tuple (first test_list))\n       (define current_dict (first result_dict))\n       (define current_count (dict-ref current_dict current_tuple 0))\n       (define new_count (+ current_count 1))\n       (define new_dict (dict-set current_dict current_tuple new_count))\n       (check_occurences_helper (rest test_list) (cons new_dict result_dict))]))\n  (check_occurences_helper test_list (list (dict))))\n",
    "  (define (check_occurences_helper test_list result)\n    (cond\n      [(empty? test_list) result]\n      [else\n       (let* ([current_tuple (first test_list)]\n              [current_tuple_count (hash-ref result current_tuple 0)])\n         (hash-set! result current_tuple (+ 1 current_tuple_count))\n         (check_occurences_helper (rest test_list) result))]))\n  (check_occurences_helper test_list (make-hash)))\n",
    "  (let ([occurences (make-hash)])\n    (for ([tuple test_list])\n      (hash-update! occurences tuple add1 0))\n    occurences))\n",
    "  (define (check_occurences_helper test_list acc)\n    (cond\n      [(empty? test_list) acc]\n      [else (check_occurences_helper (rest test_list) (cons (cons (first test_list) (add1 (or (dict-ref acc (first test_list)) 0))) acc))]))\n  (check_occurences_helper test_list '()))\n",
    "  (cond\n    [(empty? test_list) '()]\n    [else (cons (cons (first test_list) (count (first test_list) test_list)) (check_occurences (rest test_list)))]))\n",
    "  (define (check_occurences_helper test_list result)\n    (if (null? test_list)\n        result\n        (let* ([tuple (car test_list)]\n               [new_result (if (dict-has-key? result tuple)\n                               (dict-set result tuple (+ 1 (dict-ref result tuple)))\n                               (dict-set result tuple 1))])\n          (check_occurences_helper (cdr test_list) new_result))))\n  (check_occurences_helper test_list (make-dict)))\n",
    "  (letrec ([occurences (make-hash)])\n    (for ([tuple test_list])\n      (hash-update! occurences tuple add1 0))\n    occurences))\n",
    "  (define (check_occurences_iter test_list acc)\n    (cond\n      [(empty? test_list) acc]\n      [else (check_occurences_iter (rest test_list) (add-to-dict acc (first test_list)))]))\n  (check_occurences_iter test_list (make-dict)))\n",
    "  (define (check_occurences_helper test_list acc)\n    (cond\n      [(empty? test_list) acc]\n      [else (check_occurences_helper (rest test_list) (add_to_dict (first test_list) acc))]))\n  (check_occurences_helper test_list (make-hash)))\n",
    "  (define (check_occurences_helper test_list result_list)\n    (cond\n      [(empty? test_list) result_list]\n      [else\n       (define current_tuple (first test_list))\n       (define current_tuple_occurences (assoc current_tuple result_list))\n       (cond\n         [(empty? current_tuple_occurences)\n          (check_occurences_helper (rest test_list) (cons (list current_tuple 1) result_list))]\n         [else\n          (define new_occurences (+ 1 (second current_tuple_occurences)))\n          (check_occurences_helper (rest test_list) (cons (list current_tuple new_occurences) (remove current_tuple_occurences result_list)))])])\n    )\n  (check_occurences_helper test_list '())\n  )\n",
    "  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update occurences item add1 0))\n    occurences))\n",
    "  (let ([occurences (make-hash)])\n    (for ([i test_list])\n      (hash-update occurences i add1 1))\n    occurences))\n",
    "  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update occurences item add1 0))\n    occurences))\n",
    "  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (let ([key (hash item)])\n        (if (hash-has-key? occurences key)\n            (hash-update! occurences key add1)\n            (hash-set! occurences key 1))))\n    occurences))\n",
    "  (define (check_occurences_helper test_list result)\n    (if (null? test_list)\n        result\n        (let* ([current_tuple (car test_list)]\n               [current_tuple_count (hash-ref result current_tuple 0)])\n          (hash-set! result current_tuple (+ current_tuple_count 1))\n          (check_occurences_helper (cdr test_list) result))))\n  (check_occurences_helper test_list (make-hash)))\n",
    "  (let ([occurences (make-hash)])\n    (for ([tuple test_list])\n      (hash-update! occurences tuple add1 0))\n    occurences))\n",
    "  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update occurences item add1 0))\n    occurences))\n",
    "  (define (check_occurences_helper test_list result)\n    (if (null? test_list)\n        result\n        (let ((current_tuple (car test_list))\n              (current_result (assoc current_tuple result)))\n          (if (null? current_result)\n              (check_occurences_helper (cdr test_list) (cons (list current_tuple 1) result))\n              (check_occurences_helper (cdr test_list) (cons (list current_tuple (+ 1 (cadr current_result))) (remove current_result result)))))))\n  (check_occurences_helper test_list '()))\n",
    "  (define (check_occurences_helper test_list result)\n    (if (null? test_list)\n        result\n        (let* ([current_tuple (car test_list)]\n               [current_tuple_occurences (assoc current_tuple result)])\n          (if (null? current_tuple_occurences)\n              (check_occurences_helper (cdr test_list) (cons (list current_tuple 1) result))\n              (check_occurences_helper (cdr test_list) (cons (list current_tuple (+ 1 (cadr current_tuple_occurences))) (remove current_tuple_occurences result)))))))\n  (check_occurences_helper test_list '()))\n",
    "  (let ((occurences (make-hash)))\n    (for ([item test_list])\n      (hash-set! occurences item (add1 (hash-ref occurences item 0))))\n    occurences))\n",
    "  (define (check_occurences_helper test_list result)\n    (cond\n      [(empty? test_list) result]\n      [else\n        (define current_tuple (first test_list))\n        (define current_tuple_occurences (hash-ref result current_tuple 0))\n        (define new_tuple_occurences (+ current_tuple_occurences 1))\n        (hash-set! result current_tuple new_tuple_occurences)\n        (check_occurences_helper (rest test_list) result)]))\n  (check_occurences_helper test_list (make-hash)))\n",
    "  (define (check_occurences_helper test_list result)\n    (if (null? test_list)\n        result\n        (let ([current_tuple (car test_list)])\n          (if (assoc current_tuple result)\n              (check_occurences_helper (cdr test_list) (cons (cons current_tuple (+ 1 (cdr (assoc current_tuple result)))) (remove current_tuple result)))\n              (check_occurences_helper (cdr test_list) (cons (cons current_tuple 1) result))))))\n  (check_occurences_helper test_list '()))\n",
    "  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update occurences item add1 0))\n    occurences))\n",
    "  (define (check_occurences_helper test_list acc)\n    (if (null? test_list)\n        acc\n        (let* ([current_tuple (car test_list)]\n               [current_tuple_count (hash-ref acc current_tuple 0)])\n          (hash-set! acc current_tuple (+ current_tuple_count 1))\n          (check_occurences_helper (cdr test_list) acc))))\n  (check_occurences_helper test_list (make-hash)))\n",
    "  (let ([occurences (make-hash)])\n    (for ([tuple test_list])\n      (hash-update! occurences tuple add1 0))\n    occurences))\n",
    "  (letrec ([occur (lambda (lst)\n                    (cond [(empty? lst) empty]\n                          [else (cons (cons (first lst) (count (first lst) lst))\n                                      (occur (remove (first lst) lst)))]))])\n    (occur test_list)))\n",
    "  (define (helper test_list acc)\n    (cond [(empty? test_list) acc]\n          [else (define current_tuple (first test_list))\n               (define current_tuple_count (hash-ref acc current_tuple 0))\n               (hash-set! acc current_tuple (+ current_tuple_count 1))\n               (helper (rest test_list) acc)]))\n  (helper test_list (make-hash)))\n",
    "  (define (helper lst)\n    (cond\n      [(empty? lst) empty]\n      [else (cons (list (first lst) (count (first lst) lst)) (helper (remove (first lst) lst)))]))\n  (helper test_list))\n",
    "  (let ([occurences (make-hash)])\n    (for ([i test_list])\n      (hash-update occurences i add1 0))\n    occurences))\n",
    "  (define (helper test_list acc)\n    (cond\n      [(empty? test_list) acc]\n      [(member (first test_list) acc) (helper (rest test_list) acc)]\n      [else (helper (rest test_list) (cons (first test_list) acc))]))\n  (helper test_list (list)))\n",
    "  (define (check_occurences_helper test_list result_list)\n    (cond\n      [(empty? test_list) result_list]\n      [else\n       (define current_tuple (first test_list))\n       (define current_tuple_count (count current_tuple result_list))\n       (define new_result_list (cons (cons current_tuple current_tuple_count) result_list))\n       (check_occurences_helper (rest test_list) new_result_list)]))\n  (check_occurences_helper test_list '()))\n",
    "  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update! occurences item add1 0))\n    occurences))\n",
    "  (define (check_occurences_helper test_list result_list)\n    (if (null? test_list)\n        result_list\n        (let* ([current_tuple (car test_list)]\n               [current_tuple_count (assoc current_tuple result_list)])\n          (if (null? current_tuple_count)\n              (check_occurences_helper (cdr test_list) (cons (list current_tuple 1) result_list))\n              (check_occurences_helper (cdr test_list) (cons (list (car current_tuple_count) (+ 1 (cadr current_tuple_count))) (remove current_tuple_count result_list)))))))\n  (check_occurences_helper test_list '()))\n",
    "  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update occurences item add1 0))\n    occurences))\n",
    "  (define (check_occurences_helper test_list result)\n    (if (null? test_list)\n        result\n        (let* ([current_tuple (car test_list)]\n               [current_tuple_count (hash-ref result current_tuple 0)])\n          (hash-set! result current_tuple (+ 1 current_tuple_count))\n          (check_occurences_helper (cdr test_list) result))))\n  (check_occurences_helper test_list (make-hash)))\n",
    "  (define (check_occurences_helper test_list dict)\n    (cond\n      [(empty? test_list) dict]\n      [else\n       (define current_tuple (first test_list))\n       (define current_dict (first dict))\n       (cond\n         [(assoc current_tuple current_dict)\n          (check_occurences_helper (rest test_list) (cons (cons current_tuple (+ 1 (cdr (assoc current_tuple current_dict)))) (rest dict)))]\n         [else\n          (check_occurences_helper (rest test_list) (cons (cons current_tuple 1) dict))])]))\n  (check_occurences_helper test_list (list (cons (first test_list) 1))))\n",
    "  (let ([occurrences (make-hash)])\n    (for ([i test_list])\n      (hash-set! occurrences i (add1 (hash-ref occurrences i 0))))\n    occurrences))\n",
    "  (define (check_occurences_helper test_list result)\n    (cond\n      [(empty? test_list) result]\n      [else\n       (define current_tuple (first test_list))\n       (define current_tuple_occurences (hash-ref result current_tuple 0))\n       (check_occurences_helper (rest test_list) (hash-set result current_tuple (+ current_tuple_occurences 1)))]))\n  (check_occurences_helper test_list (make-hash)))\n",
    "  (let ([dict (make-hash)])\n    (for ([i test_list])\n      (hash-set! dict i (add1 (hash-ref dict i 0))))\n    dict))\n",
    "  (let ([occurences (make-hash)])\n    (for ([tuple test_list])\n      (hash-update occurences tuple add1 0))\n    occurences))\n",
    "  (define (check_occurences_helper test_list result)\n    (if (null? test_list)\n        result\n        (let ([current_tuple (car test_list)]\n              [current_tuple_count (hash-ref result current_tuple 0)])\n          (hash-set! result current_tuple (+ current_tuple_count 1))\n          (check_occurences_helper (cdr test_list) result))))\n  (check_occurences_helper test_list (make-hash)))\n",
    "  (define (check_occurences_iter test_list acc)\n    (cond\n      [(empty? test_list) acc]\n      [else\n       (define current_tuple (first test_list))\n       (define current_tuple_count (hash-ref acc current_tuple 0))\n       (define new_tuple_count (+ current_tuple_count 1))\n       (define new_acc (hash-set acc current_tuple new_tuple_count))\n       (check_occurences_iter (rest test_list) new_acc)]))\n  (check_occurences_iter test_list (make-hash)))\n",
    "  (define (helper test_list acc)\n    (cond\n      [(empty? test_list) (reverse acc)]\n      [else (helper (rest test_list) (cons (cons (first test_list) (add1 (or (dict-ref acc (first test_list)) 0))) acc))]))\n  (helper test_list empty))\n",
    "  (define (check_occurences_helper test_list result_dict)\n    (if (null? test_list)\n        result_dict\n        (let ([current_tuple (car test_list)]\n              [current_tuple_count (dict-ref result_dict current_tuple 0)])\n          (check_occurences_helper (cdr test_list)\n                                   (dict-set result_dict current_tuple (+ 1 current_tuple_count))))))\n  (check_occurences_helper test_list (make-dict)))\n",
    "  (define (check_occurences_helper test_list acc)\n    (cond\n      [(empty? test_list) (reverse acc)]\n      [else (check_occurences_helper (rest test_list) (cons (cons (first test_list) (add1 (or (hash-ref acc (first test_list) 0) 0))) acc))]))\n  (check_occurences_helper test_list (make-hash)))\n",
    "  (define (helper test_list acc)\n    (cond\n      [(empty? test_list) acc]\n      [(assoc (first test_list) acc) (helper (rest test_list) (assoc (first test_list) acc))]\n      [else (helper (rest test_list) (cons (list (first test_list) 1) acc))]))\n  (helper test_list '()))\n",
    "  (cond\n    [(empty? test_list) empty]\n    [else (cons (cons (first test_list) (count (first test_list) test_list)) (check_occurences (remove (first test_list) test_list)))]))\n",
    "  (define (check_occurences_helper test_list result_dict)\n    (if (null? test_list)\n        result_dict\n        (let* ([current_tuple (car test_list)]\n               [current_tuple_count (dict-ref result_dict current_tuple 0)])\n          (check_occurences_helper (cdr test_list)\n                                   (dict-set result_dict current_tuple (+ current_tuple_count 1))))))\n  (check_occurences_helper test_list (make-dict)))\n",
    "  (define (helper test_list acc)\n    (cond [(empty? test_list) acc]\n          [else (helper (rest test_list) (cons (list (first test_list) (count (first test_list) test_list)) acc))]))\n  (helper test_list '()))\n",
    "  (letrec ([occurences (for/hash ([tuple (in-list test_list)])\n                                 [(hash tuple) (add1 (hash-ref occurences tuple 0))])])\n    occurences))\n",
    "  (define (helper test_list result)\n    (cond\n      [(empty? test_list) result]\n      [else\n       (define current_tuple (first test_list))\n       (define current_count (hash-ref result current_tuple 0))\n       (define new_count (+ current_count 1))\n       (define new_result (hash-set result current_tuple new_count))\n       (helper (rest test_list) new_result)]))\n  (helper test_list (make-hash)))\n",
    "  (define (check_occurences_helper test_list result_dict)\n    (cond\n      [(empty? test_list) result_dict]\n      [else\n       (define current_tuple (first test_list))\n       (define new_result_dict\n         (cond\n           [(dict-has-key? result_dict current_tuple)\n            (dict-set result_dict current_tuple (+ 1 (dict-ref result_dict current_tuple)))]\n           [else (dict-set result_dict current_tuple 1)]))\n       (check_occurences_helper (rest test_list) new_result_dict)]))\n  (check_occurences_helper test_list (make-dict)))\n",
    "  (let ([dictionary (make-hash)])\n    (for ([i test_list])\n      (hash-set! dictionary i (+ 1 (hash-ref dictionary i 0))))\n    dictionary))\n",
    "  (let ([dict (make-hash)])\n    (for ([i test_list])\n      (hash-set! dict i (add1 (hash-ref dict i 0))))\n    dict))\n",
    "  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update occurences item add1 0))\n    occurences))\n",
    "  (let ([occurences (make-hash)])\n    (for ([i test_list])\n      (hash-set! occurences i (add1 (hash-ref occurences i 0))))\n    occurences))\n",
    "  (define (helper test_list acc)\n    (if (empty? test_list)\n        acc\n        (let* ([curr_tuple (car test_list)]\n               [curr_tuple_count (hash-ref acc curr_tuple 0)])\n          (hash-set! acc curr_tuple (+ 1 curr_tuple_count))\n          (helper (cdr test_list) acc))))\n  (helper test_list (make-hash)))\n",
    "  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update occurences item add1 0))\n    occurences))\n"
  ]
}