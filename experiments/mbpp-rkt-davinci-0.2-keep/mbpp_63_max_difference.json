{
  "name": "mbpp_63_max_difference",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the maximum difference between available pairs in the given tuple list.\n(define (max_difference test_list)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_63_max_difference.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_difference))\n    (check-equal? (candidate (list (list 3 5) (list 1 7) (list 10 3) (list 1 2))) 7)\n    (check-equal? (candidate (list (list 4 6) (list 2 17) (list 9 13) (list 11 12))) 15)\n    (check-equal? (candidate (list (list 12 35) (list 21 27) (list 13 23) (list 41 22))) 23)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond\n    [(empty? test_list) 0]\n    [else\n     (let ([max_diff (max_difference (rest test_list))])\n       (max max_diff (- (first test_list) (first (rest test_list)))))\n     ]))\n",
    "  (define (max_difference_helper test_list max_diff)\n    (cond\n      [(empty? test_list) max_diff]\n      [else\n       (let ([first (first test_list)]\n             [second (second test_list)])\n         (max_difference_helper (rest test_list)\n                                (max (abs (- (first first) (first second)))\n                                     (abs (- (second first) (second second)))\n                                     max_diff)))]))\n  (max_difference_helper test_list 0))\n",
    "  (cond\n    [(empty? test_list) 0]\n    [else\n     (let* ([current_pair (first test_list)]\n            [current_difference (abs (- (first current_pair) (second current_pair)))]\n            [rest_of_list (rest test_list)]\n            [rest_of_list_difference (max_difference rest_of_list)])\n       (cond\n         [(> current_difference rest_of_list_difference) current_difference]\n         [else rest_of_list_difference]))]))\n",
    "  (apply max (map (lambda (x y) (- y x)) test_list (cdr test_list))))\n",
    "  (apply max (map (lambda (x y) (- y x)) test_list (cdr test_list))))\n",
    "  (apply max (map (lambda (x y) (- x y)) test_list (cdr test_list))))\n",
    "  (cond\n    [(empty? test_list) 0]\n    [else (max (abs (- (first test_list) (second test_list)))\n               (max_difference (rest test_list)))]))\n",
    "  (cond\n    [(empty? test_list) 0]\n    [else (max (abs (- (first test_list) (second test_list))) (max_difference (rest test_list)))]))\n",
    "  (define (max_difference_helper test_list max_diff)\n    (cond ((null? test_list) max_diff)\n          ((> (abs (- (car (car test_list)) (cadr (car test_list)))) max_diff)\n           (max_difference_helper (cdr test_list)\n                                  (abs (- (car (car test_list)) (cadr (car test_list))))))\n          (else (max_difference_helper (cdr test_list) max_diff))))\n  (max_difference_helper test_list 0))\n",
    "  (apply max (map (lambda (x y) (- y x)) test_list (cdr test_list))))\n",
    "  (apply max (map (lambda (x y) (- y x)) test_list (cdr test_list))))\n",
    "  (define (max_difference_helper test_list max_diff)\n    (if (null? test_list)\n        max_diff\n        (let* ((first_pair (car test_list))\n               (first_pair_diff (abs (- (car first_pair) (cadr first_pair))))\n               (new_max_diff (if (&gt; first_pair_diff max_diff)\n                                 first_pair_diff\n                                 max_diff)))\n          (max_difference_helper (cdr test_list) new_max_diff))))\n  (max_difference_helper test_list 0))\n",
    "  (apply max (map (lambda (x y) (- y x)) test_list (cdr test_list))))\n",
    "  (cond [(empty? test_list) 0]\n        [else (max (- (first test_list) (second test_list))\n                   (max_difference (rest test_list)))]))\n",
    "  (apply max (map (lambda (x) (- (cdr x) (car x))) test_list)))\n",
    "  (let loop ([test_list test_list] [max_difference 0])\n    (cond [(empty? test_list) max_difference]\n          [else (let ([difference (abs (- (first test_list) (second test_list)))])\n                  (if (> difference max_difference)\n                      (loop (rest test_list) difference)\n                      (loop (rest test_list) max_difference)))])))\n",
    "  (cond\n    [(empty? test_list) 0]\n    [else\n     (let* ([first_pair (first test_list)]\n            [second_pair (second test_list)]\n            [first_difference (abs (- (first first_pair) (second first_pair)))]\n            [second_difference (abs (- (first second_pair) (second second_pair)))])\n       (if (> first_difference second_difference)\n           first_difference\n           second_difference))]))\n",
    "  (apply max (map (lambda (x y) (- y x)) test_list (cdr test_list))))\n",
    "  (cond [(empty? test_list) 0]\n        [else (max (- (first test_list) (second test_list))\n                   (max_difference (rest test_list)))]))\n",
    "  (apply max (map (lambda (x y) (- y x)) test_list (cdr test_list))))\n"
  ]
}