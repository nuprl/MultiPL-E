{
  "name": "mbpp_306_max_sum_increasing_subseq",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n(define (max_sum_increasing_subseq a n index k)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_306_max_sum_increasing_subseq.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_increasing_subseq))\n    (check-equal? (candidate (list 1 101 2 3 100 4 5) 7 4 6) 11)\n    (check-equal? (candidate (list 1 101 2 3 100 4 5) 7 2 5) 7)\n    (check-equal? (candidate (list 11 15 19 21 26 28 31) 7 2 4) 71)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (< index k)\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  (max_sum_increasing_subseq a n (+ index 1) (+ index 1)))))))\n",
    "  (if (= index 0)\n      (if (= k 0)\n          (list (list (list (list (list a) 0) 0) 0) 0)\n          (list (list (list (list (list a) 0) 0) 0) (list-ref a 0)))\n      (let ((previous-max (max_sum_including_kth a n (- index 1) k)))\n        (if (= k index)\n            (if (> (list-ref a index) (car previous-max))\n                (list (cons (list-ref a index) (cadr previous-max)) (+ (car previous-max) (list-ref a index)))\n                (list (cadr previous-max) (car previous-max)))\n            (let ((previous-max-without-kth (max_sum_increasing_subseq a n (- index 1) k)))\n              (if (> (list-ref a index) (car previous-max-without-kth))\n                  (list (cons (list-ref a index) (cadr previous-max-without-kth)) (+ (car previous-max-without-kth) (list-ref a index)))\n                  (list (cadr previous-max-without-kth) (car previous-max-without-kth))))))))\n",
    "  (cond\n    [(= index n) 0]\n    [(= k n) (max_sum_increasing_subseq a n (+ index 1) (+ index 1))]\n    [else (max (max_sum_increasing_subseq a n (+ index 1) (+ index 1))\n               (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) k)))]))\n",
    "  (if (= index n)\n      0\n      (let ([max-sum (max (max_sum_increasing_subseq a n (+ index 1) k)\n                         (if (< (vector-ref a index) (vector-ref a k))\n                             (+ (vector-ref a k) (max_sum_increasing_subseq a n (+ index 1) k))\n                             0))])\n        max-sum)))\n",
    "  (cond\n    [(= index n) 0]\n    [(= k n) 0]\n    [else\n     (max (max_sum_increasing_subseq a n (+ index 1) k)\n          (+ (list-ref a index)\n             (max_sum_increasing_subseq a n (+ index 1) (+ k 1))))]))\n",
    "  (if (or (= index n) (= k n))\n      0\n      (let ([aik (vector-ref a index)])\n        (max (+ aik (max_sum_increasing_subseq a n (+ index 1) k))\n             (max_sum_increasing_subseq a n (+ index 1) (+ k 1))))))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (vector-ref a index)\n              (if (< index k)\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  (max_sum_increasing_subseq a n (+ index 1) (+ index 1)))))))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (< (list-ref a index) (list-ref a k))\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  0)))))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (< index k)\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  0)))))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (< index k)\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  (max_sum_increasing_subseq a n (+ index 1) (+ index 1)))))))\n",
    "  (cond\n    [(= index 0) (if (= k 0) (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (< index k)\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  0)))))\n",
    "  (if (= index n)\n      0\n      (max (+ (vector-ref a index) (max_sum_increasing_subseq a n (+ index 1) k))\n           (max_sum_increasing_subseq a n (+ index 1) k))))\n",
    "  (if (= index n)\n      0\n      (let ((max_sum (max_sum_increasing_subseq a n (+ index 1) k)))\n        (if (and (>= k index) (< a (vector-ref a k)))\n            (+ max_sum a)\n            max_sum))))\n",
    "  (define (max_sum_increasing_subseq_iter a n index k sum)\n    (cond\n      [(= index n) sum]\n      [(= k n) sum]\n      [else\n       (let ([sum1 (max_sum_increasing_subseq_iter a n (+ index 1) k sum)]\n             [sum2 (max_sum_increasing_subseq_iter a n (+ index 1) (+ k 1) (+ sum (vector-ref a k))])\n         (max sum1 sum2))]))\n  (max_sum_increasing_subseq_iter a n index k 0))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (<= index k)\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  0)))))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (if (< (vector-ref a index) (vector-ref a k))\n               (+ (vector-ref a k) (max_sum_increasing_subseq a n (+ index 1) k))\n               0))))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (< index k)\n                  0\n                  (max_sum_increasing_subseq a n (+ index 1) k))))))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (< (list-ref a index) (list-ref a k))\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  0)))))\n",
    "  (cond\n    [(= index n) 0]\n    [(= k n) 0]\n    [else\n     (max (max_sum_increasing_subseq a n (+ index 1) k)\n          (+ (list-ref a index)\n             (max_sum_increasing_subseq a n (+ index 1) (+ k 1))))]))\n",
    "  (define (max-sum-increasing-subseq-helper a n index k sum)\n    (cond\n      [(= index n) sum]\n      [(= k n) sum]\n      [else\n       (let ([sum-including-k (if (< (vector-ref a index) (vector-ref a k))\n                                  (+ sum (vector-ref a k))\n                                  sum)])\n         (max (max-sum-increasing-subseq-helper a n (+ index 1) k sum)\n              (max-sum-increasing-subseq-helper a n (+ index 1) (+ k 1) sum-including-k)))]))\n  (max-sum-increasing-subseq-helper a n index k 0))\n",
    "  (cond\n    [(= index n) 0]\n    [else (max (max_sum_increasing_subseq a n (+ index 1) k)\n               (+ (vector-ref a index) (max_sum_increasing_subseq a n (+ index 1) index)))]))\n",
    "  (if (= index 0)\n      (list (list (list (list-ref a index))) (list (list-ref a index)))\n      (let ([prev-max-sum (max_sum_increasing_subseq a n (- index 1) k)])\n        (if (and (< k index) (< (list-ref a k) (list-ref a index)))\n            (let ([prev-max-sum-without-k (max_sum_increasing_subseq a n (- index 1) (- k 1))])\n              (if (> (+ (list-ref prev-max-sum 1) (list-ref a index))\n                     (+ (list-ref prev-max-sum-without-k 1) (list-ref a index)))\n                  (list (list (list-ref prev-max-sum 0)) (list (+ (list-ref prev-max-sum 1) (list-ref a index))))\n                  (list (list (list-ref prev-max-sum-without-k 0) (list-ref a index))\n                        (+ (list-ref prev-max-sum-without-k 1) (list-ref a index)))))\n            (if (> (list-ref prev-max-sum 1) (list-ref a index))\n                (list (list (list-ref prev-max-sum 0)) (list-ref prev-max-sum 1))\n                (list (list (list-ref a index)) (list-ref a index))))))))\n",
    "  (if (= index k)\n      (list (list (list (list-ref a index))) (list (list-ref a index)))\n      (let ([max_sum_so_far (max_sum_increasing_subseq a n (- index 1) k)])\n        (if (< (list-ref a index) (list-ref a k))\n            (let ([max_sum_so_far_with_k (append (list (list-ref a index) (car max_sum_so_far)) (list (+ (list-ref a index) (cadr max_sum_so_far))))])\n              (if (> (cadr max_sum_so_far_with_k) (cadr max_sum_so_far))\n                  max_sum_so_far_with_k\n                  max_sum_so_far))\n            max_sum_so_far))))\n",
    "  (cond\n    [(= index n) 0]\n    [(> k index) (max (max_sum_increasing_subseq a n (+ index 1) k)\n                     (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) index)))]\n    [else (max_sum_increasing_subseq a n (+ index 1) k)]))\n",
    "  (if (= index 0)\n      (list (list (list (list-ref a index))) (list (list-ref a index)))\n      (let ([prev-max-sum (max_sum_increasing_subseq a n (- index 1) k)]\n            [prev-max-sum-list (car prev-max-sum)]\n            [prev-max-sum-value (cadr prev-max-sum)])\n        (if (= k index)\n            (let ([prev-max-sum-list-with-ith-element (map (lambda (l) (append l (list (list-ref a index)))) prev-max-sum-list)])\n              (list (append prev-max-sum-list-with-ith-element prev-max-sum-list)\n                    (append (map (lambda (l) (+ (apply + l) (list-ref a index))) prev-max-sum-list-with-ith-element) prev-max-sum-value)))\n            (list prev-max-sum-list prev-max-sum-value)))))\n",
    "  (if (or (= index n) (= k n))\n      0\n      (let ((max-sum-including-k (max (max_sum_increasing_subseq a n index (+ k 1))\n                                      (+ (vector-ref a index) (max_sum_increasing_subseq a n (+ index 1) (+ k 1))))))\n        (if (< (vector-ref a index) (vector-ref a k))\n            max-sum-including-k\n            (max (max_sum_increasing_subseq a n index (+ k 1))\n                 (max_sum_increasing_subseq a n (+ index 1) (+ k 1)))))))\n",
    "  (cond\n    [(= index n) 0]\n    [else\n     (max (max_sum_increasing_subseq a n (+ index 1) k)\n          (+ (vector-ref a index) (max_sum_increasing_subseq a n (+ index 1) k)))]))\n",
    "  (cond\n    [(= index 0) (list (list (list (list-ref a index))) (list (list-ref a index)))]\n    [(= index k) (list (list (list-ref a index)) (list-ref a index))]\n    [else (let ([prev-max-sum (max_sum_increasing_subseq a n (- index 1) k)])\n            (let ([prev-max-sum-list (car prev-max-sum)]\n                  [prev-max-sum-val (cadr prev-max-sum)])\n              (let ([prev-max-sum-list-last-element (car (car (car prev-max-sum-list)))])\n                (cond\n                  [(< (list-ref a index) prev-max-sum-list-last-element)\n                   (list prev-max-sum-list prev-max-sum-val)]\n                  [(= (list-ref a index) prev-max-sum-list-last-element)\n                   (list (append prev-max-sum-list (list (list (list-ref a index)))) (+ prev-max-sum-val (list-ref a index)))]\n                  [else (list (append prev-max-sum-list (list (list (list-ref a index)))) (+ prev-max-sum-val (list-ref a index)))])))))]))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (vector-ref a index)\n              (if (<= index k)\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  0)))))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (< (list-ref a index) (list-ref a k))\n                  (max_sum_increasing_subseq a n (+ index 1) (+ index 1))\n                  0)))))\n",
    "  (cond\n    [(= index n) 0]\n    [(= k n) 0]\n    [else\n     (max\n      (max_sum_increasing_subseq a n (+ index 1) k)\n      (+ (list-ref a index)\n         (max_sum_increasing_subseq a n (+ index 1) (+ index 1))))]))\n",
    "  (if (= index n)\n      0\n      (let ([max-sum-including-k (if (>= k index)\n                                     (+ (list-ref a index)\n                                        (max_sum_increasing_subseq a n (+ index 1) k))\n                                     0)])\n        (max (max_sum_increasing_subseq a n (+ index 1) k)\n             max-sum-including-k))))\n",
    "  (define (max_sum_increasing_subseq_helper a n index k max)\n    (if (= index n)\n        max\n        (let ([new-max (max max (+ (vector-ref a index) (vector-ref a k)))])\n          (max_sum_increasing_subseq_helper a n (+ index 1) k new-max))))\n  (max_sum_increasing_subseq_helper a n 0 k 0))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (< index k)\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  (max_sum_increasing_subseq a n (+ index 1) (+ index 1)))))))\n",
    "  (cond\n    [(= index 0) (list (list (list (vector-ref a index))) 0)]\n    [(= index k) (list (list (list (vector-ref a index))) (vector-ref a index))]\n    [else\n     (let ([max-sum-subseq-without-k (max_sum_increasing_subseq a n (- index 1) k)]\n           [max-sum-subseq-with-k (max_sum_increasing_subseq a n (- index 1) (- k 1))])\n       (if (> (vector-ref a index) (vector-ref a (- index 1)))\n           (let ([max-sum-subseq-without-k-sum (car max-sum-subseq-without-k)]\n                 [max-sum-subseq-without-k-max-sum (cadr max-sum-subseq-without-k)]\n                 [max-sum-subseq-with-k-sum (car max-sum-subseq-with-k)]\n                 [max-sum-subseq-with-k-max-sum (cadr max-sum-subseq-with-k)])\n             (if (> (+ max-sum-subseq-without-k-max-sum (vector-ref a index))\n                    (+ max-sum-subseq-with-k-max-sum (vector-ref a index)))\n                 (list (append max-sum-subseq-without-k-sum\n                               (list (list (vector-ref a index))))\n                       (+ max-sum-subseq-without-k-max-sum (vector-ref a index)))\n                 (list (append max-sum-subseq-with-k-sum\n                               (list (list (vector-ref a index))))\n                       (+ max-sum-subseq-with-k-max-sum (vector-ref a index)))))\n           (let ([max-sum-subseq-without-k-sum (car max-sum-subseq-without-k)]\n                 [max-sum-subseq-without-k-max-sum (cadr max-sum-subseq-without-k)]\n                 [max-sum-subseq-with-k-sum (car max-sum-sub",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (vector-ref a index)\n              (if (> index k)\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  (max_sum_increasing_subseq a n (+ index 1) index))))))\n",
    "  (if (= index n)\n      0\n      (let ([max-sum (max_sum_increasing_subseq a n (+ index 1) k)])\n        (if (and (< index k) (< (vector-ref a index) (vector-ref a k)))\n            (max max-sum (+ (vector-ref a k) (max_sum_increasing_subseq a n (+ index 1) index)))\n            max-sum))))\n",
    "  (cond\n    [(= index n) 0]\n    [else (max (max_sum_increasing_subseq a n (+ index 1) k)\n               (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) (+ index 1))))]))\n",
    "  (cond\n    [(= index n) 0]\n    [(> k index) (max (max_sum_increasing_subseq a n (+ index 1) k)\n                     (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) index)))]\n    [else (max_sum_increasing_subseq a n (+ index 1) k)]))\n",
    "  (if (= index (- n 1))\n      (list (list (list (list-ref a index))) (list (list-ref a index)))\n      (let ((max-sum-including-k (max (list-ref a k) (+ (list-ref a k) (list-ref (max_sum_increasing_subseq a n index (- k 1)) 1))))\n            (max-sum-excluding-k (max_sum_increasing_subseq a n index (- k 1))))\n        (if (> max-sum-including-k (list-ref max-sum-excluding-k 1))\n            (list (append (list (list-ref a k)) (list-ref max-sum-excluding-k 0)) (list max-sum-including-k))\n            max-sum-excluding-k))))\n",
    "  (if (= index 0)\n      (list (list (list (list-ref a index))) (list (list-ref a index)))\n      (let* ([prev-max-sum (max_sum_increasing_subseq a n (- index 1) k)]\n             [prev-max-sum-list (car prev-max-sum)]\n             [prev-max-sum-value (cadr prev-max-sum)]\n             [prev-max-sum-list-last-element (car (car prev-max-sum-list))])\n        (if (and (< (list-ref a index) (list-ref a k))\n                 (< (list-ref a index) (car prev-max-sum-list-last-element)))\n            (list prev-max-sum-list prev-max-sum-value)\n            (let* ([prev-max-sum-list-last-element-value (cadr prev-max-sum-list-last-element)]\n                   [new-max-sum-list-last-element-value (+ (list-ref a index) prev-max-sum-list-last-element-value)]\n                   [new-max-sum-list-last-element (list (list-ref a index) new-max-sum-list-last-element-value)]\n                   [new-max-sum-list (append prev-max-sum-list (list new-max-sum-list-last-element))]\n                   [new-max-sum-value (if (> new-max-sum-list-last-element-value prev-max-sum-value)\n                                          new-max-sum-list-last-element-value\n                                          prev-max-sum-value)])\n              (list new-max-sum-list new-max-sum-value)))))\n  )\n",
    "  (if (= index 0)\n      (list (list (list (list-ref a index))) (list (list-ref a index)))\n      (let ([max-sum-subseq (max_sum_increasing_subseq a n (- index 1) k)])\n        (if (and (> k index) (< (list-ref a k) (list-ref a index)))\n            (let ([new-sum (+ (list-ref a index) (list-ref (car max-sum-subseq) 0))])\n              (if (> new-sum (list-ref (cdr max-sum-subseq) 0))\n                  (list (list (list-ref a index) (list-ref (car max-sum-subseq) 0))\n                        (list new-sum))\n                  max-sum-subseq))\n            max-sum-subseq)))))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (if (< (vector-ref a index) (vector-ref a k))\n               (+ (vector-ref a k) (max_sum_increasing_subseq a n (+ index 1) k))\n               0))))\n",
    "  (cond\n    [(= index 0) (list (list (list (list-ref a index)) (list-ref a index)) (list (list (list-ref a index)) (list-ref a index)))]\n    [(= index k) (list (list (list-ref a index)) (list-ref a index))]\n    [else\n     (let* ([prev-max-sum-inc-subseq (max_sum_increasing_subseq a n (- index 1) k)]\n            [prev-max-sum-inc-subseq-including-k (max_sum_increasing_subseq a n (- k 1) k)]\n            [prev-max-sum-inc-subseq-including-k-sum (cadr prev-max-sum-inc-subseq-including-k)]\n            [prev-max-sum-inc-subseq-including-k-subseq (car prev-max-sum-inc-subseq-including-k)]\n            [prev-max-sum-inc-subseq-sum (cadr prev-max-sum-inc-subseq)]\n            [prev-max-sum-inc-subseq-subseq (car prev-max-sum-inc-subseq)]\n            [prev-max-sum-inc-subseq-last-element (list-ref (car prev-max-sum-inc-subseq) (- (length (car prev-max-sum-inc-subseq)) 1))])\n       (cond\n         [(> (list-ref a index) prev-max-sum-inc-subseq-last-element)\n          (if (> (+ (list-ref a index) prev-max-sum-inc-subseq-including-k-sum) prev-max-sum-inc-subseq-sum)\n              (list (append prev-max-sum-inc-subseq-including-k-subseq (list (list-ref a index))) (+ (list-ref a index) prev-max-sum-inc-subseq-including-k-sum))\n              (list prev-max-sum-inc-subseq-subseq prev-max-sum-inc-subseq-sum))]\n         [else\n          (if (> (+ (list-ref a index) prev-",
    "  (cond\n    [(= index 0) (list (list (list (vector-ref a 0))) (vector-ref a 0))]\n    [(= index k) (list (list (list (vector-ref a k))) (vector-ref a k))]\n    [else (let ([prev (max_sum_increasing_subseq a n (- index 1) k)])\n            (let ([prev-max (second prev)])\n              (let ([prev-seqs (first prev)])\n                (let ([new-seqs (for/list ([s (in-list prev-seqs)])\n                                  (if (and (< (vector-ref a index) (vector-last s))\n                                           (< (vector-ref a index) (vector-ref a k)))\n                                      (cons (vector-ref a index) s)\n                                      s)))]\n                  (let ([new-max (apply max (map second (cons (list (vector-ref a k)) new-seqs)))]\n                        [new-seq (for/first ([s (in-list new-seqs)])\n                                   (if (= new-max (second s))\n                                       s))])\n                    (list (cons new-seq new-seqs) new-max)))))))]))\n",
    "  (if (= index n)\n      0\n      (let ((max-sum-including-k (if (> k index)\n                                     (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) k))\n                                     0)))\n        (let ((max-sum-excluding-k (max_sum_increasing_subseq a n (+ index 1) k)))\n          (max max-sum-including-k max-sum-excluding-k)))))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (< index k)\n                  0\n                  (max_sum_increasing_subseq a n (+ index 1) k))))))\n",
    "  (cond\n    [(= index n) 0]\n    [(= k n) 0]\n    [(< k index) (max_sum_increasing_subseq a n (+ index 1) k)]\n    [else (max (max_sum_increasing_subseq a n (+ index 1) k)\n               (+ (vector-ref a index)\n                  (max_sum_increasing_subseq a n (+ index 1) (+ k 1))))]))\n",
    "  (cond\n    [(= index n) 0]\n    [(= k n) 0]\n    [else\n     (let ([max-sum (max (max_sum_increasing_subseq a n (+ index 1) k)\n                         (+ (vector-ref a index)\n                            (max_sum_increasing_subseq a n (+ index 1) (+ k 1))))])\n       max-sum)]))\n",
    "  (if (or (= index n) (= k n))\n      0\n      (let ([max-sum (max (max_sum_increasing_subseq a n (+ index 1) k)\n                         (max_sum_increasing_subseq a n (+ index 1) (+ k 1)))])\n        (if (< (vector-ref a index) (vector-ref a k))\n            (+ (vector-ref a k) max-sum)\n            max-sum))))\n",
    "  (cond\n    [(= index 0) (list (list (list (list-ref a index))) (list (list-ref a index)))]\n    [(= index k) (list (list (list (list-ref a index))) (list (list-ref a index)))]\n    [else\n     (let*\n         ([prev-max-sum-inc-subseq (max_sum_increasing_subseq a n (- index 1) k)]\n          [prev-max-sum (cadr prev-max-sum-inc-subseq)]\n          [prev-max-sum-inc-subseq (car prev-max-sum-inc-subseq)]\n          [prev-max-sum-inc-subseq-including-k (filter (lambda (l) (and (not (empty? l)) (< (car l) (list-ref a k)))) prev-max-sum-inc-subseq)]\n          [prev-max-sum-inc-subseq-including-k (map (lambda (l) (append l (list (list-ref a k)))) prev-max-sum-inc-subseq-including-k)]\n          [prev-max-sum-inc-subseq-including-k (filter (lambda (l) (< (apply + l) (list-ref a k))) prev-max-sum-inc-subseq-including-k)]\n          [prev-max-sum-inc-subseq-including-k (map (lambda (l) (append l (list (list-ref a k)))) prev-max-sum-inc-subseq-including-k)]\n          [prev-max-sum-inc-subseq-including-k (map (lambda (l) (apply + l)) prev-max-sum-inc-subseq-including-k)]\n          [prev-max-sum-inc-subseq-including-k (filter (lambda (l) (> l prev-max-sum)) prev-max-sum-inc-subseq-including-k)]\n          [prev-max-sum-inc-subseq-including-k (map (lambda (l) (list (list (list-ref a k)))) prev-max-sum-inc-subseq-including-k)]\n          [prev-max-sum-inc",
    "  (cond\n    [(= index 0)\n     (if (< k 1)\n         (vector 0 0)\n         (vector (list-ref a k) (list-ref a k)))]\n    [(= k index)\n     (vector (list-ref a k) (list-ref a k))]\n    [else\n     (let ([max-sum-before-k (max_sum_increasing_subseq a n (- index 1) (- k 1))]\n           [max-sum-before-k-1 (max_sum_increasing_subseq a n (- index 1) k)])\n       (if (< (vector-ref max-sum-before-k 0) (vector-ref max-sum-before-k-1 0))\n           max-sum-before-k-1\n           (vector (+ (vector-ref max-sum-before-k 0) (list-ref a k))\n                   (vector-ref max-sum-before-k 1))))]))\n",
    "  (cond\n    [(= index -1) 0]\n    [(< index k) (max (max_sum_increasing_subseq a n (- index 1) k)\n                     (+ (list-ref a index) (max_sum_increasing_subseq a n (- index 1) (- k 1))))]\n    [else (max_sum_increasing_subseq a n (- index 1) k)]))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (< index k)\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  (max_sum_increasing_subseq a n (+ index 1) (+ index 1)))))))\n",
    "  (if (= index n)\n      0\n      (let ([max-sum (max_sum_increasing_subseq a n (+ index 1) k)])\n        (if (and (< index k) (< (vector-ref a index) (vector-ref a k)))\n            (max max-sum (+ (vector-ref a index) (max_sum_increasing_subseq a n (+ index 1) index)))\n            max-sum))))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (vector-ref a index)\n              (if (< index k)\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  (max_sum_increasing_subseq a n (+ index 1) (+ index 1)))))))\n",
    "  (cond\n    [(= index n) 0]\n    [(= k n) 0]\n    [else\n     (max (max_sum_increasing_subseq a n (+ index 1) k)\n          (+ (list-ref a index)\n             (max_sum_increasing_subseq a n (+ index 1) (+ k 1))))]))\n",
    "  (cond\n    [(= index n) 0]\n    [(> k index) (max (max_sum_increasing_subseq a n (+ index 1) k)\n                     (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) index)))]\n    [else (max_sum_increasing_subseq a n (+ index 1) k)]))\n",
    "  (if (= index n)\n      0\n      (let ([sum1 (max_sum_increasing_subseq a n (+ index 1) k)])\n        (if (> k index)\n            (let ([sum2 (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) index))])\n              (max sum1 sum2))\n            sum1))))\n",
    "  (cond\n    [(= index 0) (list (list (list (list-ref a index))) (list (list-ref a index)))]\n    [else\n     (let* ([prev (max_sum_increasing_subseq a n (- index 1) k)]\n            [prev-sum (cadr prev)]\n            [prev-subseq (car prev)]\n            [prev-max (apply max prev-sum)])\n       (cond\n         [(= index k)\n          (let* ([new-sum (list prev-max (list-ref a index) (+ prev-max (list-ref a index)))]\n                 [new-subseq (list (append (car (car prev-subseq)) (list (list-ref a index)))\n                                    (list (list-ref a index)))]\n                 [new-max (apply max new-sum)])\n            (list new-subseq new-sum))]\n         [else\n          (let* ([new-sum (list prev-max (+ prev-max (list-ref a index)))]\n                 [new-subseq (list (append (car (car prev-subseq)) (list (list-ref a index)))\n                                    (list (list-ref a index)))]\n                 [new-max (apply max new-sum)])\n            (list new-subseq new-sum))]))]))\n",
    "  (cond\n    [(= index 0) (list (list (list (list-ref a index))) (list (list-ref a index)))]\n    [(= index k) (list (list (list (list-ref a index))) (list (list-ref a index)))]\n    [(= index (- n 1)) (list (list (list (list-ref a index))) (list (list-ref a index)))]\n    [else\n     (let* ([prev (max_sum_increasing_subseq a n (- index 1) k)]\n            [prev_max_sum (car prev)]\n            [prev_max_seq (cadr prev)]\n            [prev_max_sum_including_k (max_sum_increasing_subseq a n (- k 1) k)]\n            [prev_max_sum_including_k_sum (car prev_max_sum_including_k)]\n            [prev_max_sum_including_k_seq (cadr prev_max_sum_including_k)]\n            [prev_max_sum_including_k_sum_including_k (car (car prev_max_sum_including_k_sum))]\n            [prev_max_sum_including_k_sum_including_k_last (car (last prev_max_sum_including_k_sum_including_k))])\n       (cond\n         [(> (list-ref a index) prev_max_sum_including_k_sum_including_k_last)\n          (list (list (append prev_max_sum_including_k_sum_including_k (list (list-ref a index))))\n                (append prev_max_sum_including_k_seq (list (list-ref a index))))]\n         [(> (list-ref a index) (car (last prev_max_seq)))\n          (list (list (append prev_max_seq (list (list-ref a index))))\n                (append prev_max_seq (list (list-ref a index))))]\n         [else\n          (list (list prev_max_sum)\n                (list prev_max_seq))]))]))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (if (< (vector-ref a index) (vector-ref a k))\n               (+ (vector-ref a k) (max_sum_increasing_subseq a n (+ index 1) k))\n               0))))\n",
    "  (if (= index n)\n      0\n      (let ((max_sum_including_ith_element (if (< a (vector-ref a k))\n                                               (+ (vector-ref a index) (max_sum_increasing_subseq a n (+ index 1) (+ index 1)))\n                                               0)))\n        (let ((max_sum_excluding_ith_element (max_sum_increasing_subseq a n (+ index 1) k)))\n          (max max_sum_including_ith_element max_sum_excluding_ith_element)))))\n",
    "  (cond\n    [(= index n) 0]\n    [(= k n) 0]\n    [(= index k) (max (max_sum_increasing_subseq a n (+ index 1) (+ k 1))\n                     (max_sum_increasing_subseq a n (+ index 1) k))]\n    [else (max (max_sum_increasing_subseq a n (+ index 1) (+ k 1))\n               (max_sum_increasing_subseq a n (+ index 1) k)\n               (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) (+ k 1))))]))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (vector-ref a index)\n              (if (< index k)\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  0)))))\n",
    "  (cond\n    [(= index 0) (if (&lt; index k) (vector-ref a index) 0)]\n    [(= index k) (max (max_sum_increasing_subseq a n (- index 1) k)\n                     (+ (max_sum_increasing_subseq a n (- index 1) (- k 1))\n                        (vector-ref a index)))]\n    [else (max (max_sum_increasing_subseq a n (- index 1) k)\n               (max_sum_increasing_subseq a n (- index 1) (- k 1)))]))\n",
    "  (if (= index n)\n      0\n      (let ([sum_without_ith_element (max_sum_increasing_subseq a n (+ index 1) k)])\n        (if (< index k)\n            (let ([sum_with_ith_element (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) (+ index 1)))])\n              (max sum_without_ith_element sum_with_ith_element))\n            sum_without_ith_element))))\n",
    "  (cond\n    [(= index n) 0]\n    [(= k n) 0]\n    [else\n     (let ([max_sum (max (max_sum_increasing_subseq a n (+ index 1) k)\n                        (+ (vector-ref a index) (max_sum_increasing_subseq a n (+ index 1) (+ k 1))))])\n       max_sum)]))\n",
    "  (if (= index n)\n      0\n      (let ([sum (max_sum_increasing_subseq a n (+ index 1) k)])\n        (if (< (vector-ref a index) (vector-ref a k))\n            (max sum (+ (vector-ref a index) (max_sum_increasing_subseq a n (+ index 1) index)))\n            sum))))\n",
    "  (if (= index n)\n      0\n      (let ((max-sum-including-k (if (<= k index)\n                                     0\n                                     (+ (vector-ref a index)\n                                        (max_sum_increasing_subseq a n index (+ k 1)))))\n            (max-sum-excluding-k (max_sum_increasing_subseq a n (+ index 1) k)))\n        (max max-sum-including-k max-sum-excluding-k))))\n",
    "  (if (= index n)\n      0\n      (let ([max (max_sum_increasing_subseq a n (+ index 1) k)])\n        (if (and (< index k) (< (vector-ref a index) (vector-ref a k)))\n            (+ (vector-ref a index) max)\n            max))))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (< index k)\n                  0\n                  (max_sum_increasing_subseq a n (+ index 1) k))))))\n",
    "  (cond\n    [(= index n) 0]\n    [(= k n) (max_sum_increasing_subseq a n (+ index 1) (+ index 1))]\n    [else (max (max_sum_increasing_subseq a n (+ index 1) (+ index 1))\n               (+ (vector-ref a index)\n                  (max_sum_increasing_subseq a n (+ index 1) k)))]))\n",
    "  (if (= index n)\n      0\n      (let ((max-sum-including-k (if (>= k index)\n                                     (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) k))\n                                     0)))\n        (max max-sum-including-k (max_sum_increasing_subseq a n (+ index 1) k)))))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (vector-ref a index)\n              (if (< index k)\n                  0\n                  (max_sum_increasing_subseq a n (+ index 1) k))))))\n",
    "  (cond\n    [(= index n) 0]\n    [(= k n) 0]\n    [else\n     (let ([max (max (max_sum_increasing_subseq a n (+ index 1) k)\n                    (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) (+ index 1))))])\n       (if (= k (+ index 1))\n           (max (list-ref a index) max)\n           max))]))\n",
    "  (cond\n    [(= index 0) (list (list (list (list-ref a index))) (list (list-ref a index)))]\n    [(= index k) (list (list (list (list-ref a index))) (list (list-ref a index)))]\n    [else\n     (let ([max-sum (max_sum_increasing_subseq a n (- index 1) k)])\n       (let ([max-sum-prev (car max-sum)]\n             [max-sum-prev-value (car (cdr max-sum))])\n         (let ([max-sum-prev-value-last (car (car (car max-sum-prev)))])\n           (let ([max-sum-prev-value-last-value (car (car max-sum-prev-value-last))])\n             (if (> max-sum-prev-value-last-value (list-ref a index))\n                 (list max-sum-prev max-sum-prev-value)\n                 (let ([max-sum-prev-value-last-value-new (list (list (list-ref a index)) (list (list-ref a index)))]\n                       [max-sum-prev-value-new (+ max-sum-prev-value-last-value (list-ref a index))])\n                   (list (cons max-sum-prev-value-last-value-new max-sum-prev) max-sum-prev-value-new)))))))]))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (vector-ref a index)\n              (if (<= index k)\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  0)))))\n",
    "  (cond\n    [(= index n) 0]\n    [(= k n) (max_sum_increasing_subseq a n (+ index 1) (+ index 1))]\n    [else\n     (let ([sum1 (max_sum_increasing_subseq a n (+ index 1) (+ index 1))]\n           [sum2 (if (< (list-ref a index) (list-ref a k))\n                     (+ (max_sum_increasing_subseq a n index (+ k 1))\n                        (list-ref a index))\n                     0)])\n       (max sum1 sum2))]))\n",
    "  (cond\n    [(= index n) 0]\n    [(= k n) 0]\n    [else\n     (let ([sum (max_sum_increasing_subseq a n (+ index 1) k)])\n       (if (< (vector-ref a index) (vector-ref a k))\n           (max sum (+ (vector-ref a index) (max_sum_increasing_subseq a n (+ index 1) (+ index 1))))\n           sum))]))\n",
    "  (if (= index n)\n      0\n      (let ([max-sum-including-k (if (< k index)\n                                     0\n                                     (+ (vector-ref a index)\n                                        (max_sum_increasing_subseq a n index (+ k 1))))])\n        (max (max_sum_increasing_subseq a n (+ index 1) k)\n             max-sum-including-k))))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (add1 index) k)\n           (+ (vector-ref a index)\n              (if (&gt; index k)\n                  (max_sum_increasing_subseq a n (add1 index) k)\n                  0)))))\n",
    "  (cond\n    [(= index n) 0]\n    [else\n     (max (max_sum_increasing_subseq a n (+ index 1) k)\n          (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) (+ index 1))))]))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (< index k)\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  0)))))\n",
    "  (cond\n    [(= index n) 0]\n    [(= k n) (max_sum_increasing_subseq a n (+ index 1) (+ index 1))]\n    [else (max (max_sum_increasing_subseq a n (+ index 1) (+ index 1))\n               (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) k)))]))\n",
    "  (if (or (= index n) (= k n))\n      0\n      (let ((max-sum (max_sum_increasing_subseq a n (+ index 1) k)))\n        (if (< (vector-ref a index) (vector-ref a k))\n            (max max-sum (+ (vector-ref a k) (max_sum_increasing_subseq a n (+ index 1) (+ k 1))))\n            max-sum))))\n",
    "  (if (= index n)\n      0\n      (let ([a_i (vector-ref a index)])\n        (max (max_sum_increasing_subseq a n (+ index 1) k)\n             (if (> k index)\n                 (+ a_i (max_sum_increasing_subseq a n (+ index 1) index))\n                 0)))))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (vector-ref a index)\n              (if (> k index)\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  0)))))\n",
    "  (if (or (= index n) (= k n))\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (max_sum_increasing_subseq a n (+ index 1) (+ k 1))))))\n",
    "  (define (max_sum_increasing_subseq_helper a n index k sum)\n    (cond ((= index n) sum)\n          ((= k n) sum)\n          ((< a[index] a[k]) (max_sum_increasing_subseq_helper a n (+ index 1) (+ k 1) (+ sum a[k])))\n          (else (max_sum_increasing_subseq_helper a n (+ index 1) (+ k 1) sum))))\n  (max_sum_increasing_subseq_helper a n index (+ index 1) 0))\n",
    "  (if (= index 0)\n      (list (list (list (list-ref a 0))) (list (list-ref a 0)))\n      (let* ([prev-max-sum (max_sum_increasing_subseq a n (- index 1) k)]\n             [prev-max-sum-list (car prev-max-sum)]\n             [prev-max-sum-value (cadr prev-max-sum)])\n        (if (and (< (list-ref a index) (list-ref a k))\n                 (< k index))\n            (list prev-max-sum-list prev-max-sum-value)\n            (let* ([prev-max-sum-list-len (length prev-max-sum-list)]\n                   [prev-max-sum-list-last-index (- prev-max-sum-list-len 1)]\n                   [prev-max-sum-list-last-subseq (list-ref prev-max-sum-list prev-max-sum-list-last-index)])\n              (if (and (< (list-ref a index) (list-ref prev-max-sum-list-last-subseq 0))\n                       (< k index))\n                  (list prev-max-sum-list prev-max-sum-value)\n                  (let* ([new-max-sum-list (append prev-max-sum-list (list (cons (list-ref a index) prev-max-sum-list-last-subseq)))]\n                         [new-max-sum-value (+ prev-max-sum-value (list-ref a index))])\n                    (list new-max-sum-list new-max-sum-value)))))))))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (< index k)\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  (max_sum_increasing_subseq a n (+ index 1) (+ index 1)))))))\n",
    "  (cond\n    [(= index n) 0]\n    [(= k n) (max_sum_increasing_subseq a n (+ index 1) (+ index 1))]\n    [else (max (max_sum_increasing_subseq a n (+ index 1) (+ index 1))\n               (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) k)))]))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (vector-ref a index)\n              (if (< index k)\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  (max_sum_increasing_subseq a n (+ index 1) (+ index 1)))))))\n",
    "  (if (= index n)\n      0\n      (let ((max-sum (max_sum_increasing_subseq a n (+ index 1) k)))\n        (if (and (< index k) (< (vector-ref a index) (vector-ref a k)))\n            (max max-sum (+ (vector-ref a index) (max_sum_increasing_subseq a n (+ index 1) index)))\n            max-sum))))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (vector-ref a index)\n              (if (< index k)\n                  0\n                  (max_sum_increasing_subseq a n (+ index 1) k))))))\n",
    "  (cond\n    [(= index 0) (list (list (list (list-ref a 0))) 0)]\n    [(= index k) (list (list (list-ref a k)) (list-ref a k))]\n    [else\n     (let ([prev-max-sum-inc-subseq (max_sum_increasing_subseq a n (- index 1) k)]\n           [prev-max-sum (car prev-max-sum-inc-subseq)]\n           [prev-max-sum-last-elem (cadr prev-max-sum-inc-subseq)])\n       (cond\n         [(= prev-max-sum-last-elem (list-ref a index))\n          (list prev-max-sum (+ prev-max-sum-last-elem (list-ref a k)))]\n         [(> prev-max-sum-last-elem (list-ref a index))\n          (list prev-max-sum prev-max-sum-last-elem)]\n         [else\n          (list (+ prev-max-sum (list-ref a index)) (list-ref a index))]))]))\n",
    "  (if (= index (- n 1))\n      (if (= k (- n 1))\n          (list (list (list (vector-ref a index))) (vector-ref a index))\n          (list (list (list)) 0))\n      (let ((max_sum_without_ith_element (max_sum_increasing_subseq a n (- index 1) k))\n            (max_sum_with_ith_element (max_sum_increasing_subseq a n (- index 1) (- k 1))))\n        (if (< (vector-ref a index) (vector-ref a k))\n            (let ((ith_element_sum (+ (vector-ref a index) (cadr max_sum_with_ith_element))))\n              (if (> ith_element_sum (cadr max_sum_without_ith_element))\n                  (list (cons (cons (vector-ref a index) (car (car max_sum_with_ith_element))) (cdr (car max_sum_with_ith_element))) ith_element_sum)\n                  (list (car max_sum_without_ith_element) (cadr max_sum_without_ith_element))))\n            (list (car max_sum_without_ith_element) (cadr max_sum_without_ith_element))))))\n",
    "  (cond [(= index n) 0]\n        [else (max (max_sum_increasing_subseq a n (+ index 1) k)\n                  (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) (+ index 1))))]))\n",
    "  (if (or (= index n) (= k n))\n      0\n      (let ((x (max_sum_increasing_subseq a n (+ index 1) k))\n            (y (if (< (list-ref a index) (list-ref a k))\n                   (+ (list-ref a k) (max_sum_increasing_subseq a n (+ index 1) (+ k 1)))\n                   0)))\n        (max x y))))\n",
    "  (if (= index n)\n      0\n      (let ((max-sum-including-k (if (< index k)\n                                     (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) k))\n                                     0)))\n        (let ((max-sum-excluding-k (max_sum_increasing_subseq a n (+ index 1) k)))\n          (max max-sum-including-k max-sum-excluding-k)))))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (vector-ref a index)\n              (if (< index k)\n                  0\n                  (max_sum_increasing_subseq a n (+ index 1) k))))))\n",
    "  (if (= index 0)\n      (list (list (list (list-ref a index))) (list (list-ref a index)))\n      (let ((prev-max-sum (max_sum_increasing_subseq a n (- index 1) k))\n            (prev-max-sum-including-k (max_sum_increasing_subseq a n (- index 1) (- k 1))))\n        (if (< (list-ref a index) (list-ref a k))\n            (let ((prev-max-sum-including-k-value (car prev-max-sum-including-k))\n                  (prev-max-sum-including-k-subseq (cadr prev-max-sum-including-k)))\n              (if (> prev-max-sum-including-k-value (car prev-max-sum))\n                  (list (+ prev-max-sum-including-k-value (list-ref a index))\n                        (cons (list-ref a index) prev-max-sum-including-k-subseq))\n                  prev-max-sum))\n            prev-max-sum))))\n",
    "  (if (or (= index n) (= k n))\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (max_sum_increasing_subseq a n (+ index 1) (+ k 1))))))\n",
    "  (if (= index n)\n      0\n      (let ([sum (max (max_sum_increasing_subseq a n (+ index 1) k)\n                     (if (< (vector-ref a index) (vector-ref a k))\n                         (+ (vector-ref a index) (max_sum_increasing_subseq a n (+ index 1) index))\n                         0))])\n        sum)))\n",
    "  (cond\n    [(= index n) 0]\n    [(= k n) 0]\n    [else\n     (let ([max-sum (max (max_sum_increasing_subseq a n (+ index 1) k)\n                        (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) (+ k 1))))])\n       max-sum)]))\n",
    "  (if (= index n)\n      0\n      (let ((max-sum (max_sum_increasing_subseq a n (+ index 1) k)))\n        (if (and (< index k) (< (vector-ref a index) (vector-ref a k)))\n            (max max-sum (+ (vector-ref a index) (max_sum_increasing_subseq a n (+ index 1) index)))\n            max-sum))))\n",
    "  (if (= index n)\n      0\n      (let ((max-sum-including-k (if (< k n)\n                                     (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) k))\n                                     0)))\n        (max (max_sum_increasing_subseq a n (+ index 1) index)\n             max-sum-including-k))))\n",
    "  (if (or (= index n) (= k n))\n      0\n      (let ([max-sum (max (max_sum_increasing_subseq a n (+ index 1) k)\n                         (if (< (list-ref a index) (list-ref a k))\n                             (+ (list-ref a k) (max_sum_increasing_subseq a n (+ index 1) (+ k 1)))\n                             0))])\n        max-sum)))\n",
    "  (cond\n    [(= index 0) (list (list (list (vector-ref a 0))) (vector-ref a 0))]\n    [else\n     (let* ([prev (max_sum_increasing_subseq a n (- index 1) k)]\n            [prev-sum (cadr prev)]\n            [prev-subseqs (car prev)]\n            [prev-subseqs-sum (map (lambda (subseq) (apply + subseq)) prev-subseqs)]\n            [max-subseq (apply max prev-subseqs-sum)]\n            [new-subseqs (map (lambda (subseq) (if (and (< (vector-ref a index) (apply max subseq))\n                                                        (< (vector-ref a index) (vector-ref a k)))\n                                                   (append subseq (list (vector-ref a index)))\n                                                   subseq))\n                               prev-subseqs)]\n            [new-sum (if (< (vector-ref a index) (vector-ref a k))\n                         (+ prev-sum (vector-ref a index))\n                         prev-sum)])\n       (list new-subseqs new-sum))]))\n",
    "  (cond\n    [(= index n) 0]\n    [(= k n) (max_sum_increasing_subseq a n (+ index 1) (+ index 1))]\n    [else (max (max_sum_increasing_subseq a n (+ index 1) (+ index 1))\n               (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) k)))]))\n",
    "  (cond\n    [(= index n) 0]\n    [(> k n) 0]\n    [(>= k index) (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) k))]\n    [else (max (max_sum_increasing_subseq a n (+ index 1) k)\n               (max_sum_increasing_subseq a n (+ index 1) (+ index 1)))]))\n",
    "  (if (= index n)\n      0\n      (let ((max-sum-without-k (max_sum_increasing_subseq a n (+ index 1) k))\n            (max-sum-with-k (if (and (< index k) (< (vector-ref a index) (vector-ref a k)))\n                                (+ (vector-ref a k) (max_sum_increasing_subseq a n (+ index 1) k))\n                                0)))\n        (max max-sum-without-k max-sum-with-k))))\n",
    "  (if (= index n)\n      0\n      (max (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) k))\n           (max_sum_increasing_subseq a n (+ index 1) k))))\n",
    "  (if (or (= index n) (= k n))\n      0\n      (let ((max-sum (max_sum_increasing_subseq a n (+ index 1) (+ k 1))))\n        (if (< (vector-ref a index) (vector-ref a k))\n            (+ (vector-ref a k) max-sum)\n            max-sum))))\n",
    "  (cond [(= index 0) (list (list (list (vector-ref a 0))) (vector-ref a 0))]\n        [else (let* ([prev-max (max_sum_increasing_subseq a n (- index 1) k)]\n                     [prev-max-sum (cadr prev-max)]\n                     [prev-max-subseqs (car prev-max)]\n                     [prev-max-subseq (car (car prev-max-subseqs))]\n                     [prev-max-subseq-len (vector-length prev-max-subseq)]\n                     [prev-max-subseq-last-elt (vector-ref prev-max-subseq (- prev-max-subseq-len 1))]\n                     [ith-elt (vector-ref a index)])\n                (cond [(and (< prev-max-subseq-last-elt ith-elt) (< ith-elt k))\n                       (let* ([new-max-subseq (vector-append prev-max-subseq (vector ith-elt))]\n                              [new-max-sum (+ prev-max-sum ith-elt)])\n                         (list (list new-max-subseq) new-max-sum))]\n                      [else (let* ([new-max-subseqs (append prev-max-subseqs (list (list (vector ith-elt))))]\n                                   [new-max-sum (+ prev-max-sum ith-elt)])\n                              (list new-max-subseqs new-max-sum))]))]))\n",
    "  (cond\n    [(= index 0) (list (list (list (list-ref a 0))) (list (list-ref a 0)))]\n    [else\n     (let*\n         ([prev-max-sum-inc-subseq (max_sum_increasing_subseq a n (- index 1) k)]\n          [prev-max-sum (cadr prev-max-sum-inc-subseq)]\n          [prev-max-sum-inc-subseq-list (car prev-max-sum-inc-subseq)]\n          [prev-max-sum-inc-subseq-list-last (car (last prev-max-sum-inc-subseq-list))]\n          [prev-max-sum-inc-subseq-list-last-last (car (last prev-max-sum-inc-subseq-list-last))])\n       (cond\n         [(< k index)\n          (list prev-max-sum-inc-subseq-list prev-max-sum)]\n         [(< (list-ref a index) (list-ref a (- index 1)))\n          (list prev-max-sum-inc-subseq-list prev-max-sum)]\n         [(and (= (list-ref a index) (list-ref a (- index 1)))\n               (= (list-ref a index) (list-ref a (- k 1))))\n          (list (append prev-max-sum-inc-subseq-list (list (append prev-max-sum-inc-subseq-list-last-last (list (list-ref a index))))) (+ prev-max-sum (list-ref a index)))]\n         [(and (= (list-ref a index) (list-ref a (- index 1)))\n               (< (list-ref a index) (list-ref a (- k 1))))\n          (list (append prev-max-sum-inc-subseq-list (list (append prev-max-sum-inc-subseq-list-last-last (list (list-ref a index))))) (+ prev-max-sum (list-ref a index)))]\n         [(and (= (list-ref a index) (list-ref a (- index 1)))\n               (> (list-ref a index) (list-ref a",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (vector-ref a index)\n              (if (< index k)\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  (max_sum_increasing_subseq a n (+ index 1) (+ index 1)))))))\n",
    "  (define (max_sum_increasing_subseq_helper a n index k sum)\n    (if (= index n)\n        sum\n        (let ((sum1 (max_sum_increasing_subseq_helper a n (+ index 1) k sum))\n              (sum2 (if (and (< index k) (< (vector-ref a index) (vector-ref a k)))\n                        (max_sum_increasing_subseq_helper a n (+ index 1) k (+ sum (vector-ref a index)))\n                        0)))\n          (max sum1 sum2))))\n  (max_sum_increasing_subseq_helper a n index k 0))\n",
    "  (cond\n    [(= index 0) (if (= k 0) (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (",
    "  (cond\n    [(= index 0) (list (list (list (list-ref a 0)) (list-ref a 0)) (list (list (list-ref a 0)) (list-ref a 0)))]\n    [(= index k) (list (list (list (list-ref a k)) (list-ref a k)) (list (list (list-ref a k)) (list-ref a k)))]\n    [else (let ([max-sum-including-k (max (list-ref (car (max_sum_increasing_subseq a n (- index 1) k)) 1) (+ (list-ref (car (max_sum_increasing_subseq a n (- index 1) k)) 1) (list-ref a k)))]\n            [max-sum-excluding-k (list-ref (car (max_sum_increasing_subseq a n (- index 1) k)) 1)])\n           (cond\n             [(> max-sum-including-k max-sum-excluding-k) (list (list (append (list-ref (car (max_sum_increasing_subseq a n (- index 1) k)) 0) (list (list-ref a k))) max-sum-including-k) (list (list-ref (cdr (max_sum_increasing_subseq a n (- index 1) k)) 0) max-sum-excluding-k))]\n             [else (list (list (list-ref (cdr (max_sum_increasing_subseq a n (- index 1) k)) 0) max-sum-excluding-k) (list (list-ref (cdr (max_sum_increasing_subseq a n (- index 1) k)) 0) max-sum-excluding-k))]))]))\n",
    "  (if (= index n)\n      0\n      (let ([max-sum (max_sum_increasing_subseq a n (+ index 1) k)])\n        (if (< (vector-ref a index) (vector-ref a k))\n            (max max-sum (+ (vector-ref a index) (max_sum_increasing_subseq a n (+ index 1) index)))\n            max-sum))))\n",
    "  (cond\n    [(= index 0) (if (= k 0) (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (vector-ref a index)\n              (if (<= index k)\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  0)))))\n",
    "  (cond\n    [(= index n) 0]\n    [(= k n) (max_sum_increasing_subseq a n (+ index 1) (+ index 1))]\n    [else (max (max_sum_increasing_subseq a n (+ index 1) (+ index 1))\n               (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) k)))]))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (< index k)\n                  0\n                  (max_sum_increasing_subseq a n (+ index 1) k))))))\n",
    "  (if (= index n)\n      0\n      (let ([max-sum (max_sum_increasing_subseq a n (+ index 1) k)])\n        (if (and (< index k) (< (vector-ref a index) (vector-ref a k)))\n            (max max-sum (+ (vector-ref a k) (max_sum_increasing_subseq a n (+ index 1) index)))\n            max-sum))))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (<= index k)\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  0)))))\n",
    "  (cond\n    [(= index n) 0]\n    [(= index k) (max (max_sum_increasing_subseq a n (+ index 1) k)\n                     (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) k)))]\n    [else (max (max_sum_increasing_subseq a n (+ index 1) k)\n               (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) k)))]))\n",
    "  (cond\n    [(= index 0)\n     (if (&lt; index k)\n         (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (",
    "  (cond\n    [(= index n) 0]\n    [(= index k) (max (max_sum_increasing_subseq a n (+ index 1) k)\n                     (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) k)))]\n    [else (max (max_sum_increasing_subseq a n (+ index 1) k)\n               (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) k)))]))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (>= k index)\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  0)))))\n",
    "  (cond\n    [(= index 0) 0]\n    [(= index k) (max (max_sum_increasing_subseq a n (- index 1) k)\n                     (max_sum_increasing_subseq a n (- index 1) (- k 1)))]\n    [else (max (max_sum_increasing_subseq a n (- index 1) k)\n               (max_sum_increasing_subseq a n (- index 1) (- k 1))\n               (+ (vector-ref a index)\n                  (max_sum_increasing_subseq a n (- index 1) (- k 1))))]))\n",
    "  (cond\n    [(= index n) 0]\n    [else\n     (let ([max-sum (max_sum_increasing_subseq a n (+ index 1) k)])\n       (if (and (< index k) (< (vector-ref a index) (vector-ref a k)))\n           (max max-sum (+ (vector-ref a k) (max_sum_increasing_subseq a n (+ index 1) index)))\n           max-sum))]))\n",
    "  (if (= index n)\n      0\n      (max (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) k))\n           (max_sum_increasing_subseq a n (+ index 1) k))))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (< (list-ref a index) (list-ref a k))\n                  (max_sum_increasing_subseq a n (+ index 1) index)\n                  0)))))\n",
    "  (if (= index n)\n      0\n      (let ((max-sum (max_sum_increasing_subseq a n (+ index 1) k)))\n        (if (< (vector-ref a index) (vector-ref a k))\n            (max max-sum (+ (vector-ref a index) (max_sum_increasing_subseq a n (+ index 1) index)))\n            max-sum))))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (vector-ref a index)\n              (if (< index k)\n                  0\n                  (max_sum_increasing_subseq a n (+ index 1) k))))))\n",
    "  (cond\n    [(= index 0) (if (&lt; index k) (list (list (list (vector-ref a 0))) (vector-ref a 0)) (list (list) 0))]\n    [(= index k) (if (&lt; index k) (list (list (list (vector-ref a 0))) (vector-ref a 0)) (list (list) 0))]\n    [else\n     (let* ([previous (max_sum_increasing_subseq a n (- index 1) k)]\n            [previous-sum (cadr previous)]\n            [previous-seqs (car previous)]\n            [current-sum (vector-ref a index)]\n            [current-seq (list (vector-ref a index))]\n            [current-seqs (list current-seq)]\n            [new-seqs (list current-seq)]\n            [new-sum (+ current-sum previous-sum)])\n       (for ([seq (in-list previous-seqs)])\n         (if (&lt; (car seq) (vector-ref a index))\n             (let* ([new-seq (append seq current-seq)]\n                    [new-sum (+ (apply + seq) current-sum)])\n               (set! new-seqs (append new-seqs (list new-seq)))\n               (set! current-seqs (append current-seqs (list new-seq)))\n               (if (&gt; new-sum current-sum)\n                   (begin\n                     (set! current-sum new-sum)\n                     (set! current-seq new-seq))))))\n       (if (&lt; current-sum previous-sum)\n           (list current-seqs current-sum)\n           (list new-seqs new-sum)))])\n  )\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (if (< (vector-ref a index) (vector-ref a k))\n               (+ (vector-ref a index) (max_sum_increasing_subseq a n (+ index 1) index))\n               0))))\n",
    "  (cond\n    [(= index 0) (list (list (list (list-ref a index)) (list-ref a index)) (list (list (list-ref a index)) (list-ref a index)))]\n    [(= index k) (list (list (list-ref a index)) (list-ref a index))]\n    [else\n     (let ([prev-max-sum-inc-subseq (max_sum_increasing_subseq a n (- index 1) k)])\n       (if (< (list-ref a index) (list-ref (car (car prev-max-sum-inc-subseq)) 0))\n           (list (car prev-max-sum-inc-subseq) (cadr prev-max-sum-inc-subseq))\n           (let ([prev-max-sum-inc-subseq-including-k (max_sum_increasing_subseq a n (- k 1) k)])\n             (if (< (list-ref a index) (list-ref (car (car prev-max-sum-inc-subseq-including-k)) 0))\n                 (list (car prev-max-sum-inc-subseq-including-k) (cadr prev-max-sum-inc-subseq-including-k))\n                 (let ([new-max-sum (+ (list-ref a index) (cadr prev-max-sum-inc-subseq-including-k))])\n                   (if (> new-max-sum (cadr prev-max-sum-inc-subseq))\n                       (list (list (cons (list-ref a index) (car (car prev-max-sum-inc-subseq-including-k)))) new-max-sum)\n                       (list (car prev-max-sum-inc-subseq) (cadr prev-max-sum-inc-subseq)))))))))])\n",
    "  (cond\n    [(= index 0) (vector-ref a k)]\n    [else\n     (let ([max-sum (vector-ref a k)])\n       (for ([i (in-range index)])\n         (when (< (vector-ref a i) (vector-ref a k))\n           (let ([sum (+ (vector-ref a k) (max_sum_increasing_subseq a n i i))])\n             (when (> sum max-sum)\n               (set! max-sum sum)))))\n       max-sum)]))\n",
    "  (cond\n    [(= index n) 0]\n    [(= k n) 0]\n    [(= k (+ index 1)) (max (max_sum_increasing_subseq a n (+ index 1) (+ index 1))\n                            (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) (+ index 1))))]\n    [else (max (max_sum_increasing_subseq a n (+ index 1) (+ index 1))\n               (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) k)))]))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (< index k)\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  (max_sum_increasing_subseq a n (+ index 1) (+ index 1)))))))\n",
    "  (if (= index n)\n      0\n      (let ([max-sum (max (max_sum_increasing_subseq a n (+ index 1) k)\n                         (if (and (< index k) (< (vector-ref a index) (vector-ref a k)))\n                             (+ (max_sum_increasing_subseq a n (+ index 1) index) (vector-ref a index))\n                             0))])\n        max-sum)))\n",
    "  (if (= index n)\n      0\n      (max (if (< (list-ref a index) (list-ref a k))\n             (+ (list-ref a k) (max_sum_increasing_subseq a n (+ index 1) k))\n             0)\n           (max_sum_increasing_subseq a n (+ index 1) k))))\n",
    "  (cond\n    [(= index n) 0]\n    [(= k n) 0]\n    [else\n     (max (max_sum_increasing_subseq a n (+ index 1) k)\n          (+ (list-ref a index)\n             (max_sum_increasing_subseq a n (+ index 1) (+ k 1))))]))\n",
    "  (cond\n    [(= index n) 0]\n    [(= k n) 0]\n    [else\n     (max (max_sum_increasing_subseq a n (+ index 1) k)\n          (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) (+ k 1))))]))\n",
    "  (if (or (= index n) (= k n))\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (max_sum_increasing_subseq a n (+ index 1) (+ k 1))))))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (vector-ref a index)\n              (if (< index k)\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  (max_sum_increasing_subseq a n (+ index 1) (+ index 1)))))))\n",
    "  (cond\n    [(= index 0) (list (list (list (list-ref a 0))) (list (list-ref a 0)))]\n    [else (let* ([previous-max-sum (max_sum_including_kth a n (- index 1) k)]\n                [previous-max-sum-including-kth (list-ref previous-max-sum 0)]\n                [previous-max-sum-including-kth-value (list-ref previous-max-sum 1)])\n            (cond\n              [(= k index) (list (list (list-ref a index)) (list-ref a index))]\n              [(= (list-ref a index) (list-ref a k)) (list previous-max-sum-including-kth (+ previous-max-sum-including-kth-value (list-ref a index)))]\n              [(> (list-ref a index) (list-ref a k)) (list (append previous-max-sum-including-kth (list (list-ref a index))) (+ previous-max-sum-including-kth-value (list-ref a index)))]\n              [else (list previous-max-sum-including-kth previous-max-sum-including-kth-value)]))]))\n",
    "  (if (= index n)\n      0\n      (let ((max-sum-including-k (if (< index k)\n                                     (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) k))\n                                     0)))\n        (max (max_sum_increasing_subseq a n (+ index 1) k)\n             max-sum-including-k))))\n",
    "  (cond\n    [(= index n) 0]\n    [else\n     (let ([max-sum (max_sum_increasing_subseq a n (+ index 1) k)])\n       (if (< (vector-ref a index) (vector-ref a k))\n           (max max-sum (+ (vector-ref a index) (max_sum_increasing_subseq a n (+ index 1) index)))\n           max-sum))]))\n",
    "  (cond\n    [(= index 0) (list (list (list (list-ref a index)) (list-ref a index)) (list (list (list-ref a index)) (list-ref a index)))]\n    [(= index k) (list (list (list-ref a index)) (list-ref a index))]\n    [else\n     (let ([prev_max_sum_inc_subseq (max_sum_increasing_subseq a n (- index 1) k)])\n       (let ([prev_max_sum_inc_subseq_with_ith_element (max_sum_increasing_subseq a n (- index 1) (- k 1))])\n         (let ([ith_element (list-ref a index)])\n           (let ([prev_max_sum_inc_subseq_with_ith_element_value (cadr prev_max_sum_inc_subseq_with_ith_element)])\n             (let ([prev_max_sum_inc_subseq_with_ith_element_subseq (car prev_max_sum_inc_subseq_with_ith_element)])\n               (let ([prev_max_sum_inc_subseq_value (cadr prev_max_sum_inc_subseq)])\n                 (let ([prev_max_sum_inc_subseq_subseq (car prev_max_sum_inc_subseq)])\n                   (let ([prev_max_sum_inc_subseq_with_ith_element_value_plus_ith_element (+ prev_max_sum_inc_subseq_with_ith_element_value ith_element)])\n                     (let ([prev_max_sum_inc_subseq_value_plus_ith_element (+ prev_max_sum_inc_subseq_value ith_element)])\n                       (cond\n                         [(>= prev_max_sum_inc_subseq_with_ith_element_value_plus_ith_element prev_max_sum_inc_subseq_value_plus_ith_element)\n                          (list (append prev_max_sum_inc_subseq_with_ith_element_subseq (list ith_element)) prev_max_sum_inc_sub",
    "  (cond\n    [(= index n) 0]\n    [(= k n) (max_sum_increasing_subseq a n (+ index 1) (+ index 1))]\n    [else (max (max_sum_increasing_subseq a n (+ index 1) (+ index 1))\n               (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) k)))]))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (< (list-ref a index) (list-ref a k))\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  0)))))\n",
    "  (cond\n    [(= index n) 0]\n    [(= k n) (max_sum_increasing_subseq a n (+ index 1) (+ index 1))]\n    [else (max (max_sum_increasing_subseq a n (+ index 1) (+ index 1))\n               (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) k)))]))\n",
    "  (define (max_sum_increasing_subseq_helper a n index k sum)\n    (if (= index n)\n        sum\n        (let ((sum1 (max_sum_increasing_subseq_helper a n (+ index 1) k sum))\n              (sum2 (if (< (vector-ref a index) (vector-ref a k))\n                        (max_sum_increasing_subseq_helper a n (+ index 1) k (+ sum (vector-ref a index)))\n                        sum)))\n          (max sum1 sum2))))\n  (max_sum_increasing_subseq_helper a n index k 0))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (< index k)\n                  0\n                  (max_sum_increasing_subseq a n (+ index 1) k))))))\n",
    "  (if (= index n)\n      0\n      (let ((max-sum (max_sum_increasing_subseq a n (+ index 1) k)))\n        (if (< (vector-ref a index) (vector-ref a k))\n            (max max-sum (+ (vector-ref a index) (max_sum_increasing_subseq a n (+ index 1) index)))\n            max-sum))))\n",
    "  (if (= index n)\n      0\n      (let ([max-sum (max (max_sum_increasing_subseq a n (+ index 1) k)\n                         (if (and (< index k) (< (vector-ref a index) (vector-ref a k)))\n                             (+ (max_sum_increasing_subseq a n (+ index 1) k) (vector-ref a k))\n                             0))])\n        max-sum)))\n",
    "  (if (or (= index n) (= k n))\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (max_sum_increasing_subseq a n (+ index 1) (+ k 1))))))\n",
    "  (cond\n    [(= index 0) (if (= k 0) (list (list (list (vector-ref a 0))) (vector-ref a 0)) (list (list) 0))]\n    [else\n     (let* ([prev-max-sum (max_sum_increasing_subseq a n (- index 1) k)]\n            [prev-max-sum-list (car prev-max-sum)]\n            [prev-max-sum-value (cadr prev-max-sum)]\n            [prev-max-sum-list-with-k (filter (lambda (x) (and (not (empty? x)) (< (vector-ref (last x) 0) (vector-ref a k)))) prev-max-sum-list)]\n            [prev-max-sum-value-with-k (apply max (map (lambda (x) (+ (vector-ref a k) (apply + x))) prev-max-sum-list-with-k))]\n            [prev-max-sum-list-without-k (filter (lambda (x) (and (not (empty? x)) (< (vector-ref (last x) 0) (vector-ref a index)))) prev-max-sum-list)]\n            [prev-max-sum-value-without-k (apply max (map (lambda (x) (+ (vector-ref a index) (apply + x))) prev-max-sum-list-without-k))])\n       (if (< prev-max-sum-value-with-k prev-max-sum-value-without-k)\n           (list (map (lambda (x) (append x (list (vector-ref a index)))) prev-max-sum-list-without-k) prev-max-sum-value-without-k)\n           (list (map (lambda (x) (append x (list (vector-ref a index)))) prev-max-sum-list-with-k) prev-max-sum-value-with-k))))])\n",
    "  (cond\n    [(= index 0) (list (list (list (list-ref a 0))) (list (list-ref a 0)))]\n    [(= index k) (list (list (list-ref a k)) (list (list-ref a k)))]\n    [else\n     (let* ([prev-max-sum-subseq (max_sum_increasing_subseq a n (- index 1) k)]\n            [prev-max-sum (car prev-max-sum-subseq)]\n            [prev-max-sum-last-element (cadr prev-max-sum-subseq)]\n            [prev-max-sum-subseq-including-k (max_sum_increasing_subseq a n (- k 1) k)]\n            [prev-max-sum-including-k (car prev-max-sum-subseq-including-k)]\n            [prev-max-sum-including-k-last-element (cadr prev-max-sum-subseq-including-k)])\n       (cond\n         [(> (list-ref a index) prev-max-sum-last-element)\n          (list (append prev-max-sum (list (list-ref a index))) (list (list-ref a index)))]\n         [(> (list-ref a index) prev-max-sum-including-k-last-element)\n          (list (append prev-max-sum-including-k (list (list-ref a index))) (list (list-ref a index)))]\n         [else\n          (list prev-max-sum prev-max-sum-last-element)]))]))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (> index k)\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  (max_sum_increasing_subseq a n (+ index 1) index))))))\n",
    "  (define (max_sum_increasing_subseq_helper a n index k sum)\n    (cond\n      [(= index n) sum]\n      [(= k n) sum]\n      [(> (vector-ref a k) (vector-ref a index))\n       (max_sum_increasing_subseq_helper a n index (+ k 1) (+ sum (vector-ref a k)))]\n      [else (max_sum_increasing_subseq_helper a n index (+ k 1) sum)]))\n  (max_sum_increasing_subseq_helper a n index (+ index 1) 0))\n",
    "  (cond\n    [(= index 0) (if (&gt; k 0) (list (list (list (list-ref a 0)) (list-ref a 0)) (list (list (list-ref a 0)) (list-ref a 0))) (list (list (list (list-ref a 0))) (list (list (list-ref a 0)))))]\n    [(= index k) (if (&gt; k 0) (list (list (list (list-ref a k)) (list-ref a k)) (list (list (list-ref a k)) (list-ref a k))) (list (list (list (list-ref a k))) (list (list (list-ref a k)))))]\n    [(&gt; k index) (let ([x (max_sum_increasing_subseq a n (- index 1) (- k 1))]\n                      [y (max_sum_increasing_subseq a n (- index 1) k)])\n                    (if (&gt; (car (car x)) (car (car y))) x y))]\n    [(&lt; k index) (let ([x (max_sum_increasing_subseq a n (- index 1) (- k 1))]\n                      [y (max_sum_increasing_subseq a n (- index 1) k)])\n                    (if (&gt; (car (car x)) (car (car y))) x y))]))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (if (< (vector-ref a index) (vector-ref a k))\n               (+ (vector-ref a k) (max_sum_increasing_subseq a n (+ index 1) k))\n               0))))\n",
    "  (if (or (= index -1) (= k n))\n      0\n      (let ((max-sum (max_sum_increasing_subseq a n (- index 1) k)))\n        (if (< (vector-ref a index) (vector-ref a k))\n            (+ max-sum (vector-ref a k))\n            max-sum))))\n",
    "  (define (max_sum_increasing_subseq_helper a n index k sum)\n    (cond\n      [(= index n) sum]\n      [(> index n) sum]\n      [(= k index) (max_sum_increasing_subseq_helper a n (+ index 1) k sum)]\n      [(> k index) (max_sum_increasing_subseq_helper a n (+ index 1) k (max sum (+ sum (vector-ref a k))))]\n      [else (max_sum_increasing_subseq_helper a n (+ index 1) k (max sum (vector-ref a index)))]))\n  (max_sum_increasing_subseq_helper a n index k 0))\n",
    "  (define (max_sum_increasing_subseq_helper a n index k sum)\n    (cond\n      [(= index n) sum]\n      [(< index k) (max_sum_increasing_subseq_helper a n (+ index 1) k (+ sum (vector-ref a index)))]\n      [(> (vector-ref a index) (vector-ref a (- index 1))) (max_sum_increasing_subseq_helper a n (+ index 1) k (+ sum (vector-ref a index)))]\n      [else (max_sum_increasing_subseq_helper a n (+ index 1) k sum)]))\n  (max_sum_increasing_subseq_helper a n index k 0))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (< index k)\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  0)))))\n",
    "  (if (= index n)\n      0\n      (let ((sum (max_sum_increasing_subseq a n (+ index 1) k)))\n        (if (< (list-ref a index) (list-ref a k))\n            (+ (list-ref a index) sum)\n            sum))))\n",
    "  (if (= index n)\n      0\n      (let ([sum (max_sum_increasing_subseq a n (+ index 1) k)])\n        (if (< (vector-ref a index) (vector-ref a k))\n            (max sum (+ (vector-ref a index) (max_sum_increasing_subseq a n (+ index 1) index)))\n            sum))))\n",
    "  (if (= index n)\n      0\n      (let ([max-sum (max (max_sum_increasing_subseq a n (+ index 1) k)\n                         (if (and (< index k) (< (vector-ref a index) (vector-ref a k)))\n                             (+ (max_sum_increasing_subseq a n (+ index 1) index) (vector-ref a index))\n                             0))])\n        max-sum)))\n",
    "  (cond\n    [(= index 0) (list (list (list (list-ref a 0))) (list (list-ref a 0)))]\n    [(= index k) (list (list (list (list-ref a k))) (list (list-ref a k)))]\n    [else\n     (let* ([previous-max-sum-and-subseq (max_sum_increasing_subseq a n (- index 1) k)]\n            [previous-max-sum (cadr previous-max-sum-and-subseq)]\n            [previous-max-sum-subseq (car previous-max-sum-and-subseq)]\n            [previous-max-sum-including-k-and-subseq (max_sum_increasing_subseq a n (- k 1) k)]\n            [previous-max-sum-including-k (cadr previous-max-sum-including-k-and-subseq)]\n            [previous-max-sum-including-k-subseq (car previous-max-sum-including-k-and-subseq)])\n       (cond\n         [(> (list-ref a index) (list-ref a k))\n          (let* ([new-max-sum (+ (list-ref a index) previous-max-sum)]\n                 [new-max-sum-subseq (append previous-max-sum-subseq (list (list-ref a index)))])\n            (list new-max-sum-subseq new-max-sum))]\n         [else\n          (let* ([new-max-sum (+ (list-ref a index) previous-max-sum-including-k)]\n                 [new-max-sum-subseq (append previous-max-sum-including-k-subseq (list (list-ref a index)))])\n            (list new-max-sum-subseq new-max-sum))]))]))\n",
    "  (if (= index n)\n      0\n      (let ((max-sum (max_sum_increasing_subseq a n (+ index 1) k)))\n        (if (< (vector-ref a index) (vector-ref a k))\n            (max max-sum (+ (vector-ref a index) (max_sum_increasing_subseq a n (+ index 1) index)))\n            max-sum))))\n",
    "  (if (or (= index 0) (= k index))\n      (list (list (list (list-ref a index))) (list (list-ref a index)))\n      (let ([previous-max-sum (max_sum_increasing_subseq a n (- index 1) k)]\n            [previous-max-sum-including-k (max_sum_increasing_subseq a n (- index 1) (- k 1))])\n        (if (> (list-ref (cdr previous-max-sum) 0)\n               (+ (list-ref (cdr previous-max-sum-including-k) 0) (list-ref a index)))\n            previous-max-sum\n            (list (append (car previous-max-sum-including-k) (list (list-ref a index)))\n                  (cons (+ (list-ref (cdr previous-max-sum-including-k) 0) (list-ref a index))\n                        (cdr previous-max-sum-including-k)))))))\n",
    "  (define (max_sum_increasing_subseq_helper a n index k sum)\n    (cond\n      [(= index n) sum]\n      [(= k n) sum]\n      [(> a[index] a[k]) (max_sum_increasing_subseq_helper a n (+ index 1) (+ k 1) (+ sum a[k]))]\n      [else (max_sum_increasing_subseq_helper a n (+ index 1) (+ k 1) sum)]))\n  (max_sum_increasing_subseq_helper a n index (+ index 1) 0))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (&lt; index k)\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  (max_sum_increasing_subseq a n (+ index 1) (+ index 1)))))))\n",
    "  (if (= index n)\n      0\n      (let ((max-sum (max_sum_increasing_subseq a n (+ index 1) k)))\n        (if (and (< index k) (< (vector-ref a index) (vector-ref a k)))\n            (max max-sum (+ (vector-ref a index) (max_sum_increasing_subseq a n (+ index 1) index)))\n            max-sum))))\n",
    "  (if (= index n)\n      0\n      (max (+ (vector-ref a index) (max_sum_increasing_subseq a n (+ index 1) k))\n           (max_sum_increasing_subseq a n (+ index 1) k))))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (<= index k)\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  0)))))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (< index k)\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  (max_sum_increasing_subseq a n (+ index 1) (+ index 1)))))))\n",
    "  (cond\n    [(= index 0) (list (list (list (list (vector-ref a 0)))) 0)]\n    [(= index k) (list (list (list (list (vector-ref a k)))) (vector-ref a k))]\n    [else\n     (let ([prev-max-sum-inc-subseq (max_sum_increasing_subseq a n (- index 1) k)])\n       (let ([prev-max-sum (car prev-max-sum-inc-subseq)])\n         (let ([prev-max-sum-inc-subseq-last-element (car (car prev-max-sum))])\n           (let ([prev-max-sum-inc-subseq-last-element-last-element (car prev-max-sum-inc-subseq-last-element))])\n             (let ([prev-max-sum-inc-subseq-last-element-last-element-last-element (car prev-max-sum-inc-subseq-last-element-last-element)])\n               (let ([prev-max-sum-inc-subseq-last-element-last-element-last-element-last-element (car prev-max-sum-inc-subseq-last-element-last-element-last-element)])\n                 (let ([prev-max-sum-inc-subseq-last-element-last-element-last-element-last-element-last-element (car prev-max-sum-inc-subseq-last-element-last-element-last-element-last-element)])\n                   (let ([prev-max-sum-inc-subseq-last-element-last-element-last-element-last-element-last-element-last-element (car prev-max-sum-inc-subseq-last-element-last-element-last-element-last-element-last-element)])\n                     (let ([prev-max-sum-inc-subseq-last-element-last-element-last-element-last-element-last-element-last-element-last-element (car prev-max-sum-inc-subseq-last-element-last-element-last-element-last-element-last-element-last-",
    "  (cond\n    [(= index n) 0]\n    [(> k n) 0]\n    [else (max (max_sum_increasing_subseq a n (+ index 1) k)\n               (+ (vector-ref a index)\n                  (max_sum_increasing_subseq a n (+ index 1) (+ index 1))))]))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (< index k)\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  (max_sum_increasing_subseq a n (+ index 1) (+ index 1)))))))\n",
    "  (if (or (= index n) (= k n))\n      0\n      (let ((max-sum-including-k (max (max_sum_increasing_subseq a n (+ index 1) (+ k 1))\n                                      (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) k)))))\n        (max max-sum-including-k (max_sum_increasing_subseq a n (+ index 1) (+ k 1))))))\n",
    "  (if (= index n)\n      0\n      (let ((max-sum (max_sum_increasing_subseq a n (+ index 1) k)))\n        (if (and (< index k) (< (vector-ref a index) (vector-ref a k)))\n            (max max-sum (+ (vector-ref a k) (max_sum_increasing_subseq a n (+ index 1) index)))\n            max-sum))))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (vector-ref a index)\n              (if (< index k)\n                  0\n                  (max_sum_increasing_subseq a n (+ index 1) k))))))\n",
    "  (if (= index n)\n      0\n      (let ((sum1 (max_sum_increasing_subseq a n (+ index 1) k))\n            (sum2 (if (and (< index k) (< (vector-ref a index) (vector-ref a k)))\n                      (+ (vector-ref a k) (max_sum_increasing_subseq a n (+ index 1) k))\n                      0)))\n        (max sum1 sum2))))\n",
    "  (cond\n    [(= index 0) (if (= k 0) (list (list (list (vector-ref a 0))) (vector-ref a 0)) (list (list) 0))]\n    [(= k 0) (list (list (list (vector-ref a 0))) (vector-ref a 0))]\n    [else\n     (let ([prev-max-sum-inc-subseq (max_sum_increasing_subseq a n (- index 1) k)]\n           [prev-max-sum-inc-subseq-k (max_sum_increasing_subseq a n (- index 1) (- k 1))])\n       (cond\n         [(> (vector-ref a index) (vector-ref a (- k 1)))\n          (let ([prev-max-sum (second prev-max-sum-inc-subseq)]\n                [prev-max-sum-k (second prev-max-sum-inc-subseq-k)])\n            (if (> (+ prev-max-sum (vector-ref a index)) prev-max-sum-k)\n                (list (append (first prev-max-sum-inc-subseq) (list (vector-ref a index))) (+ prev-max-sum (vector-ref a index)))\n                (list (append (first prev-max-sum-inc-subseq-k) (list (vector-ref a index))) (+ prev-max-sum-k (vector-ref a index)))))\n          ]\n         [else\n          (let ([prev-max-sum (second prev-max-sum-inc-subseq)]\n                [prev-max-sum-k (second prev-max-sum-inc-subseq-k)])\n            (if (> prev-max-sum prev-max-sum-k)\n                (list (first prev-max-sum-inc-subseq) prev-max-sum)\n                (list (first prev-max-sum-inc-subseq-k) prev-max-sum-k)))\n          ]\n         )\n       )\n     ]\n    )\n  )\n",
    "  (cond\n    [(= index n) 0]\n    [(= index k) (max (max_sum_increasing_subseq a n (+ index 1) k)\n                     (max_sum_increasing_subseq a n (+ index 1) (+ index 1)))]\n    [(> (vector-ref a index) (vector-ref a k))\n     (max (max_sum_increasing_subseq a n (+ index 1) k)\n          (max_sum_increasing_subseq a n (+ index 1) (+ index 1)))]\n    [else (+ (vector-ref a index)\n             (max_sum_increasing_subseq a n (+ index 1) (+ index 1)))]))\n",
    "  (if (= index n)\n      0\n      (let ([sum (max_sum_increasing_subseq a n (+ index 1) k)])\n        (if (< (vector-ref a index) (vector-ref a k))\n            (max sum (+ (vector-ref a index) (max_sum_increasing_subseq a n (+ index 1) index)))\n            sum))))\n",
    "  (cond\n    [(= index 0) (list (list (list (list-ref a index))) (list (list-ref a index)))]\n    [(= index k) (list (list (list (list-ref a index))) (list (list-ref a index)))]\n    [else\n     (let* ([prev-max-sum (max_sum_increasing_subseq a n (- index 1) k)]\n            [prev-max-subseq (car prev-max-sum)]\n            [prev-max-sum-value (cadr prev-max-sum)]\n            [prev-max-subseq-last-element (car (car prev-max-subseq))])\n       (cond\n         [(> (list-ref a index) (car prev-max-subseq-last-element))\n          (let* ([new-max-subseq (append (list (list (list-ref a index))) prev-max-subseq)]\n                 [new-max-sum-value (+ (list-ref a index) prev-max-sum-value)])\n            (list new-max-subseq new-max-sum-value))]\n         [else\n          (let* ([new-max-subseq (append (list (list (list-ref a index))) (list prev-max-subseq-last-element))]\n                 [new-max-sum-value (+ (list-ref a index) prev-max-sum-value)])\n            (list new-max-subseq new-max-sum-value))]))]))\n",
    "  (cond\n    [(= index 1) (list (list (list (list-ref a 0))) (list (list-ref a 0)))]\n    [else\n     (let* ([prev-max-sum-and-subseq (max_sum_including_kth_element a n (sub1 index) k)]\n            [prev-max-sum (car prev-max-sum-and-subseq)]\n            [prev-max-subseq (cadr prev-max-sum-and-subseq)])\n       (cond\n         [(> (list-ref a index) (list-ref a k))\n          (let* ([prev-max-sum-and-subseq (max_sum_increasing_subseq a n (sub1 index) k)]\n                 [prev-max-sum (car prev-max-sum-and-subseq)]\n                 [prev-max-subseq (cadr prev-max-sum-and-subseq)])\n            (list (list (append prev-max-subseq (list (list-ref a index))))\n                  (append prev-max-subseq (list (list-ref a index)))))\n          ]\n         [else\n          (let* ([prev-max-sum-and-subseq (max_sum_increasing_subseq a n (sub1 index) k)]\n                 [prev-max-sum (car prev-max-sum-and-subseq)]\n                 [prev-max-subseq (cadr prev-max-sum-and-subseq)])\n            (list (list prev-max-subseq)\n                  prev-max-subseq))]\n         )\n       )\n     ]\n    )\n  )\n",
    "  (if (or (= index n) (= k n))\n      0\n      (let ((max-sum (max_sum_increasing_subseq a n (+ index 1) k)))\n        (if (< (vector-ref a index) (vector-ref a k))\n            (max max-sum (+ (vector-ref a k) (max_sum_increasing_subseq a n (+ index 1) (+ k 1))))\n            max-sum))))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (< index k)\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  (max_sum_increasing_subseq a n (+ index 1) (+ index 1)))))))\n",
    "  (if (= index n)\n      0\n      (let ((max-sum-including-k (if (> k index)\n                                     (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) k))\n                                     0)))\n        (max max-sum-including-k (max_sum_increasing_subseq a n (+ index 1) k)))))\n"
  ]
}