{
  "name": "mbpp_306_max_sum_increasing_subseq",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n(define (max_sum_increasing_subseq a n index k)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_306_max_sum_increasing_subseq.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_increasing_subseq))\n    (check-equal? (candidate (list 1 101 2 3 100 4 5) 7 4 6) 11)\n    (check-equal? (candidate (list 1 101 2 3 100 4 5) 7 2 5) 7)\n    (check-equal? (candidate (list 11 15 19 21 26 28 31) 7 2 4) 71)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (< index k)\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  (max_sum_increasing_subseq a n (+ index 1) (+ index 1)))))))\n",
    "  (if (= index 0)\n      (if (= k 0)\n          (list (list (list (list (list a) 0) 0) 0) 0)\n          (list (list (list (list (list a) 0) 0) 0) (list-ref a 0)))\n      (let ((previous-max (max_sum_including_kth a n (- index 1) k)))\n        (if (= k index)\n            (if (> (list-ref a index) (car previous-max))\n                (list (cons (list-ref a index) (cadr previous-max)) (+ (car previous-max) (list-ref a index)))\n                (list (cadr previous-max) (car previous-max)))\n            (let ((previous-max-without-kth (max_sum_increasing_subseq a n (- index 1) k)))\n              (if (> (list-ref a index) (car previous-max-without-kth))\n                  (list (cons (list-ref a index) (cadr previous-max-without-kth)) (+ (car previous-max-without-kth) (list-ref a index)))\n                  (list (cadr previous-max-without-kth) (car previous-max-without-kth))))))))\n",
    "  (cond\n    [(= index n) 0]\n    [(= k n) (max_sum_increasing_subseq a n (+ index 1) (+ index 1))]\n    [else (max (max_sum_increasing_subseq a n (+ index 1) (+ index 1))\n               (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) k)))]))\n",
    "  (if (= index n)\n      0\n      (let ([max-sum (max (max_sum_increasing_subseq a n (+ index 1) k)\n                         (if (< (vector-ref a index) (vector-ref a k))\n                             (+ (vector-ref a k) (max_sum_increasing_subseq a n (+ index 1) k))\n                             0))])\n        max-sum)))\n",
    "  (cond\n    [(= index n) 0]\n    [(= k n) 0]\n    [else\n     (max (max_sum_increasing_subseq a n (+ index 1) k)\n          (+ (list-ref a index)\n             (max_sum_increasing_subseq a n (+ index 1) (+ k 1))))]))\n",
    "  (if (or (= index n) (= k n))\n      0\n      (let ([aik (vector-ref a index)])\n        (max (+ aik (max_sum_increasing_subseq a n (+ index 1) k))\n             (max_sum_increasing_subseq a n (+ index 1) (+ k 1))))))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (vector-ref a index)\n              (if (< index k)\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  (max_sum_increasing_subseq a n (+ index 1) (+ index 1)))))))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (< (list-ref a index) (list-ref a k))\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  0)))))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (< index k)\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  0)))))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (< index k)\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  (max_sum_increasing_subseq a n (+ index 1) (+ index 1)))))))\n",
    "  (cond\n    [(= index 0) (if (= k 0) (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (< index k)\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  0)))))\n",
    "  (if (= index n)\n      0\n      (max (+ (vector-ref a index) (max_sum_increasing_subseq a n (+ index 1) k))\n           (max_sum_increasing_subseq a n (+ index 1) k))))\n",
    "  (if (= index n)\n      0\n      (let ((max_sum (max_sum_increasing_subseq a n (+ index 1) k)))\n        (if (and (>= k index) (< a (vector-ref a k)))\n            (+ max_sum a)\n            max_sum))))\n",
    "  (define (max_sum_increasing_subseq_iter a n index k sum)\n    (cond\n      [(= index n) sum]\n      [(= k n) sum]\n      [else\n       (let ([sum1 (max_sum_increasing_subseq_iter a n (+ index 1) k sum)]\n             [sum2 (max_sum_increasing_subseq_iter a n (+ index 1) (+ k 1) (+ sum (vector-ref a k))])\n         (max sum1 sum2))]))\n  (max_sum_increasing_subseq_iter a n index k 0))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (<= index k)\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  0)))))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (if (< (vector-ref a index) (vector-ref a k))\n               (+ (vector-ref a k) (max_sum_increasing_subseq a n (+ index 1) k))\n               0))))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (< index k)\n                  0\n                  (max_sum_increasing_subseq a n (+ index 1) k))))))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (< (list-ref a index) (list-ref a k))\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  0)))))\n",
    "  (cond\n    [(= index n) 0]\n    [(= k n) 0]\n    [else\n     (max (max_sum_increasing_subseq a n (+ index 1) k)\n          (+ (list-ref a index)\n             (max_sum_increasing_subseq a n (+ index 1) (+ k 1))))]))\n"
  ]
}