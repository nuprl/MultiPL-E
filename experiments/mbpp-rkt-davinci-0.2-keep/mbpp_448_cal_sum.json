{
  "name": "mbpp_448_cal_sum",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to calculate the sum of perrin numbers.\n(define (cal_sum n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_448_cal_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cal_sum))\n    (check-equal? (candidate 9) 49)\n    (check-equal? (candidate 10) 66)\n    (check-equal? (candidate 11) 88)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (if (= n 1)\n      2\n      (if (= n 2)\n          3\n          (if (= n 3)\n              2\n              (+ (cal_sum (- n 1))\n                 (cal_sum (- n 2))\n                 (cal_sum (- n 3)))))))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum-iter n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum-iter (- n 1) (+ sum (perrin n))))))\n  (cal_sum-iter n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_iter (- n 1) (+ (perrin n) sum)))))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (cal_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cal_sum_iter (- n 1) (+ sum (perrin n)))))\n  (cal_sum_iter n 0))\n",
    "  (define (cal_perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (cal_perrin (- n 3))\n                   (cal_perrin (- n 2))\n                   (cal_perrin (- n 1))))))\n  (define (sum_perrin n)\n    (cond ((= n 0) 0)\n          (else (+ (cal_perrin n)\n                   (sum_perrin (- n 1))))))\n  (sum_perrin n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_iter (- n 1) (+ sum (perrin n))))))\n  (cal_sum_iter n 0))\n",
    "  (define (cal_perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3))))))\n  (define (cal_sum_perrin n)\n    (cond ((= n 0) 0)\n          (else (+ (cal_perrin n) (cal_sum_perrin (- n 1))))))\n  (cal_sum_perrin n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_iter (- n 1) (+ (perrin n) sum)))))\n  (cal_sum_iter n 0))\n",
    "  (cond\n    ((= n 0) 0)\n    ((= n 1) 0)\n    ((= n 2) 2)\n    (else (+ (cal_sum (- n 1)) (cal_sum (- n 2)) (cal_sum (- n 3))))))\n",
    "  (define (perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (perrin (- n 2)) (perrin (- n 3)))]))\n  (define (cal_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [else (cal_sum_iter (- n 1) (+ sum (perrin n)))]))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_iter (- n 1) (+ (perrin n) sum)))))\n  (cal_sum_iter n 0))\n",
    "  (define (cal_perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3))))))\n  (define (cal_sum_perrin n)\n    (cond ((= n 0) 0)\n          (else (+ (cal_perrin n) (cal_sum_perrin (- n 1))))))\n  (cal_sum_perrin n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 1) 3)\n          ((= n 2) 0)\n          ((= n 3) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (cond ((= n 1) (+ sum (perrin n)))\n          (else (cal_sum_iter (- n 1) (+ sum (perrin n))))))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (perrin (- n 2)) (perrin (- n 3)))]))\n  (define (sum n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (perrin n) (sum (- n 1)))]))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (cal_perrin n)\n    (cond\n      [(= n 1) 3]\n      [(= n 2) 0]\n      [(= n 3) 2]\n      [else (+ (cal_perrin (- n 3)) (cal_perrin (- n 2)) (cal_perrin (- n 1)))]))\n  (define (cal_sum_helper n sum)\n    (cond\n      [(= n 1) sum]\n      [else (cal_sum_helper (- n 1) (+ sum (cal_perrin n)))]))\n  (cal_sum_helper n 0))\n",
    "  (define (cal_perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (cal_perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (cal_perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3))))))\n  (define (cal_sum_perrin n)\n    (cond ((= n 0) 0)\n          (else (+ (cal_perrin n) (cal_sum_perrin (- n 1))))))\n  (cal_sum_perrin n))\n",
    "  (define (perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (perrin (- n 2)) (perrin (- n 3)))]))\n  (define (cal_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [else (cal_sum_iter (- n 1) (+ sum (perrin n)))]))\n  (cal_sum_iter n 0))\n",
    "  (define (cal_perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3)))]))\n  (define (sum_perrin n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (cal_perrin n) (sum_perrin (- n 1)))]))\n  (sum_perrin n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 3)) (perrin (- n 2)) (perrin (- n 1))))))\n  (define (cal_sum_iter n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_iter (- n 1) (+ sum (perrin n))))))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (iter n sum)\n    (cond ((= n 0) sum)\n          (else (iter (- n 1) (+ sum (perrin n))))))\n  (iter n 0))\n",
    "  (define (perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (perrin (- n 2)) (perrin (- n 3)))]))\n  (define (sum n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (perrin n) (sum (- n 1)))]))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) (perrin n))\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (cal_perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3))))))\n  (define (cal_sum_aux n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_aux (- n 1) (+ (cal_perrin n) sum)))))\n  (cal_sum_aux n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 1) 3)\n          ((= n 2) 0)\n          ((= n 3) 2)\n          (else (+ (perrin (- n 3)) (perrin (- n 2)) (perrin (- n 1))))))\n  (define (cal_sum_iter n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_iter (- n 1) (+ sum (perrin n))))))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (cal_perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_iter (- n 1) (+ sum (cal_perrin n))))))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_iter (- n 1) (+ sum (perrin n))))))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin-iter a b c count)\n    (if (= count n)\n        (+ a b c)\n        (perrin-iter b c (+ a b c) (+ count 1))))\n  (perrin-iter 3 0 2 1))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 3)) (perrin (- n 2)) (perrin (- n 1))))))\n  (let loop ((i 0) (sum 0))\n    (if (= i n)\n        sum\n        (loop (+ i 1) (+ sum (perrin i))))))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 3)) (perrin (- n 2)) (perrin (- n 1))))))\n  (define (cal_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cal_sum_iter (- n 1) (+ sum (perrin n)))))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 1) 3)\n          ((= n 2) 0)\n          ((= n 3) 2)\n          (else (+ (perrin (- n 3)) (perrin (- n 2)) (perrin (- n 1))))))\n  (define (cal_sum_iter n sum)\n    (cond ((= n 1) sum)\n          (else (cal_sum_iter (- n 1) (+ sum (perrin n))))))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond [(= n 0) 3]\n          [(= n 1) 0]\n          [(= n 2) 2]\n          [else (+ (perrin (- n 2)) (perrin (- n 3)))]))\n  (define (sum n)\n    (cond [(= n 0) 0]\n          [else (+ (perrin n) (sum (- n 1)))]))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_iter (- n 1) (+ sum (perrin n))))))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (if (= n 0)\n        0\n        (+ (perrin n) (sum (- n 1)))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (if (= n 0)\n        0\n        (+ (perrin n) (sum (- n 1)))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cal_sum_iter (- n 1) (+ sum (perrin n)))))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_iter (- n 1) (+ sum (perrin n))))))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (cal_perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (cal_perrin (- n 2))\n                   (cal_perrin (- n 3))))))\n  (define (cal_sum_perrin n)\n    (cond ((= n 0) 0)\n          (else (+ (cal_perrin n)\n                   (cal_sum_perrin (- n 1))))))\n  (cal_sum_perrin n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (if (= n 0)\n        0\n        (+ (perrin n) (sum (- n 1)))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (if (= n 0) sum\n        (cal_sum_iter (- n 1) (+ sum (perrin n)))))\n  (cal_sum_iter n 0))\n",
    "  (define (cal_perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3))))))\n  (define (cal_sum_aux n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_aux (- n 1) (+ sum (cal_perrin n))))))\n  (cal_sum_aux n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cal_sum_iter (- n 1) (+ sum (perrin n)))))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (if (= n 0)\n        0\n        (+ (perrin n) (sum (- n 1)))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (perrin (- n 2)) (perrin (- n 3)))]))\n  (define (cal_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cal_sum_iter (- n 1) (+ sum (perrin n)))))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (perrin (- n 2)) (perrin (- n 3)))]))\n  (define (sum n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (perrin n) (sum (- n 1)))]))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (cal_sum (- n 1))))))\n  (cal_sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_iter (- n 1) (+ sum (perrin n))))))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (cal_perrin n)\n    (cond ((= n 1) 3)\n          ((= n 2) 0)\n          ((= n 3) 2)\n          (else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3))))))\n  (define (cal_sum_perrin n)\n    (cond ((= n 1) (cal_perrin 1))\n          (else (+ (cal_perrin n) (cal_sum_perrin (- n 1))))))\n  (cal_sum_perrin n))\n",
    "  (define (cal_perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3)))]))\n  (define (cal_sum_perrin n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (cal_perrin n) (cal_sum_perrin (- n 1)))]))\n  (cal_sum_perrin n))\n",
    "  (if (= n 1)\n      0\n      (if (= n 2)\n          2\n          (if (= n 3)\n              3\n              (+ (cal_sum (- n 1)) (cal_sum (- n 2)) (cal_sum (- n 3)))))))\n",
    "  (define (cal_perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3)))]))\n  (define (cal_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [else (cal_sum_iter (- n 1) (+ sum (cal_perrin n)))]))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_iter (- n 1) (+ (perrin n) sum)))))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (cal_perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3))))))\n  (define (cal_sum_helper n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_helper (- n 1) (+ sum (cal_perrin n))))))\n  (cal_sum_helper n 0))\n",
    "  (define (perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (perrin (- n 2)) (perrin (- n 3)))]))\n  (define (cal_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [else (cal_sum_iter (- n 1) (+ sum (perrin n)))]))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cal_sum_iter (- n 1) (+ sum (perrin n)))))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (cal_perrin n)\n    (cond ((= n 1) 3)\n          ((= n 2) 0)\n          ((= n 3) 2)\n          (else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3))))))\n  (define (cal_sum_perrin n)\n    (cond ((= n 1) (cal_perrin 1))\n          (else (+ (cal_perrin n) (cal_sum_perrin (- n 1))))))\n  (cal_sum_perrin n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (perrin (- n 2)) (perrin (- n 3)))]))\n  (define (sum n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (perrin n) (sum (- n 1)))]))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) (perrin 0))\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (perrin (- n 2)) (perrin (- n 3)))]))\n  (define (cal_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [else (cal_sum_iter (- n 1) (+ (perrin n) sum))]))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond\n      ((= n 0) 3)\n      ((= n 1) 0)\n      ((= n 2) 2)\n      (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond\n      ((= n 0) 0)\n      (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (if (zero? n)\n      0\n      (+ (perrin n) (cal_sum (- n 1)))))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (cal_perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3))))))\n  (define (cal_sum_aux n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_aux (- n 1) (+ sum (cal_perrin n))))))\n  (cal_sum_aux n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_iter (- n 1) (+ (perrin n) sum)))))\n  (cal_sum_iter n 0))\n",
    "  (if (= n 0)\n      0\n      (+ (perrin n) (cal_sum (- n 1)))))\n",
    "  (define (perrin n)\n    (cond ((= n 1) 3)\n          ((= n 2) 0)\n          ((= n 3) 2)\n          (else (+ (perrin (- n 3)) (perrin (- n 2)) (perrin (- n 1))))))\n  (define (cal_sum_aux n i sum)\n    (cond ((= i n) sum)\n          (else (cal_sum_aux n (+ i 1) (+ sum (perrin i))))))\n  (cal_sum_aux n 1 0))\n",
    "  (define (cal_perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3))))))\n  (define (cal_sum_aux n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_aux (- n 1) (+ (cal_perrin n) sum)))))\n  (cal_sum_aux n 0))\n",
    "  (define (cal_perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3))))))\n  (define (cal_sum_aux n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_aux (- n 1) (+ (cal_perrin n) sum)))))\n  (cal_sum_aux n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) (perrin n))\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (perrin (- n 2)) (perrin (- n 3)))]))\n  (define (cal_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [else (cal_sum_iter (- n 1) (+ sum (perrin n)))]))\n  (cal_sum_iter n 0))\n",
    "  (define (cal_perrin n)\n    (cond\n      ((= n 0) 3)\n      ((= n 1) 0)\n      ((= n 2) 2)\n      (else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3))))))\n  (define (cal_sum_perrin n)\n    (cond\n      ((= n 0) 0)\n      (else (+ (cal_perrin n) (cal_sum_perrin (- n 1))))))\n  (cal_sum_perrin n))\n",
    "  (if (= n 1)\n      0\n      (if (= n 2)\n          2\n          (if (= n 3)\n              3\n              (cal_sum (- n 1))\n              (+ (cal_sum (- n 2)) (cal_sum (- n 3)))\n              )\n          )\n      )\n  )\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_iter (- n 1) (+ sum (perrin n))))))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (if (= n 0)\n        0\n        (+ (perrin n) (sum (- n 1)))))\n  (sum n))\n",
    "  (define (cal_perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3))))))\n  (define (cal_sum_aux n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_aux (- n 1) (+ sum (cal_perrin n))))))\n  (cal_sum_aux n 0))\n",
    "  (define (perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (perrin (- n 2)) (perrin (- n 3)))]))\n  (define (cal_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cal_sum_iter (- n 1) (+ sum (perrin n)))))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (perrin (- n 2)) (perrin (- n 3)))]))\n  (define (cal_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [else (cal_sum_iter (- n 1) (+ sum (perrin n)))]))\n  (cal_sum_iter n 0))\n",
    "  (define (cal_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cal_sum_iter (- n 1) (+ sum (perrin n)))))\n  (cal_sum_iter n 0))\n",
    "  (define (cal_perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3))))))\n  (define (cal_sum_perrin n)\n    (cond ((= n 0) 0)\n          (else (+ (cal_perrin n) (cal_sum_perrin (- n 1))))))\n  (cal_sum_perrin n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (if (= n 0)\n      0\n      (+ (cal_sum (- n 1))\n         (perrin n))))\n",
    "  (define (perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (perrin (- n 2)) (perrin (- n 3)))]))\n  (define (sum n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (perrin n) (sum (- n 1)))]))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (if (= n 0)\n        0\n        (+ (perrin n) (sum (- n 1)))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (perrin (- n 2)) (perrin (- n 3)))]))\n  (define (sum n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (perrin n) (sum (- n 1)))]))\n  (sum n))\n",
    "  (define (cal_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cal_sum_iter (- n 1) (+ sum (perrin n)))))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond\n      ((= n 0) 3)\n      ((= n 1) 0)\n      ((= n 2) 2)\n      (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond\n      ((= n 0) 0)\n      (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (perrin (- n 2)) (perrin (- n 3)))]))\n  (define (cal_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [else (cal_sum_iter (- n 1) (+ sum (perrin n)))]))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_iter (- n 1) (+ sum (perrin n))))))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (if (= n 0)\n        0\n        (+ (perrin n) (sum (- n 1)))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (if (= n 0)\n        0\n        (+ (perrin n) (sum (- n 1)))))\n  (sum n))\n",
    "  (define (cal_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cal_sum_iter (- n 1) (+ sum (perrin n)))))\n  (cal_sum_iter n 0))\n",
    "  (define (cal_perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (cal_perrin (- n 2))\n                   (cal_perrin (- n 3))))))\n  (define (cal_sum_perrin n)\n    (cond ((= n 0) 0)\n          (else (+ (cal_perrin n)\n                   (cal_sum_perrin (- n 1))))))\n  (cal_sum_perrin n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum-iter n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum-iter (- n 1) (+ sum (perrin n))))))\n  (cal_sum-iter n 0))\n",
    "  (define (cal_perrin n)\n    (cond ((= n 1) 3)\n          ((= n 2) 0)\n          ((= n 3) 2)\n          (else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3))))))\n  (define (cal_sum_perrin n)\n    (cond ((= n 1) (cal_perrin n))\n          (else (+ (cal_perrin n) (cal_sum_perrin (- n 1))))))\n  (cal_sum_perrin n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (perrin (- n 2)) (perrin (- n 3)))]))\n  (define (cal_sum_helper n sum)\n    (cond\n      [(= n 0) sum]\n      [else (cal_sum_helper (- n 1) (+ sum (perrin n)))]))\n  (cal_sum_helper n 0))\n",
    "  (if (= n 1)\n      3\n      (+ (cal_sum (- n 1))\n         (cal_sum (- n 2))\n         (cal_sum (- n 3)))))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_iter (- n 1) (+ sum (perrin n))))))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (perrin (- n 2)) (perrin (- n 3)))]))\n  (define (cal_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [else (cal_sum_iter (- n 1) (+ sum (perrin n)))]))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (perrin (- n 2)) (perrin (- n 3)))]))\n  (define (sum n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (perrin n) (sum (- n 1)))]))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (perrin (- n 2)) (perrin (- n 3)))]))\n  (define (cal_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [else (cal_sum_iter (- n 1) (+ sum (perrin n)))]))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond\n      [(= n 1) 3]\n      [(= n 2) 0]\n      [(= n 3) 2]\n      [else (+ (perrin (- n 2)) (perrin (- n 3)))]))\n  (define (cal_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [else (cal_sum_iter (- n 1) (+ sum (perrin n)))]))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_iter (- n 1) (+ sum (perrin n))))))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (perrin (- n 2)) (perrin (- n 3)))]))\n  (define (sum n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (perrin n) (sum (- n 1)))]))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cal_sum_iter (- n 1) (+ sum (perrin n)))))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (cal_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cal_sum_iter (- n 1) (+ sum (perrin n)))))\n  (cal_sum_iter n 0))\n",
    "  (define (cal_perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3)))]))\n  (define (sum n)\n    (if (= n 0)\n        0\n        (+ (cal_perrin n) (sum (- n 1)))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (perrin (- n 2)) (perrin (- n 3)))]))\n  (define (cal_sum n sum)\n    (cond\n      [(= n 0) sum]\n      [else (cal_sum (- n 1) (+ sum (perrin n)))]))\n  (cal_sum n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_iter (- n 1) (+ sum (perrin n))))))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (if (= n 0)\n        0\n        (+ (perrin n) (sum (- n 1)))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond [(= n 0) 3]\n          [(= n 1) 0]\n          [(= n 2) 2]\n          [else (+ (perrin (- n 2)) (perrin (- n 3)))]))\n  (define (sum n)\n    (cond [(= n 0) 0]\n          [else (+ (perrin n) (sum (- n 1)))]))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_iter (- n 1) (+ sum (perrin n))))))\n  (cal_sum_iter n 0))\n",
    "  (if (= n 1)\n      2\n      (if (= n 2)\n          3\n          (if (= n 3)\n              2\n              (+ (cal_sum (- n 1)) (cal_sum (- n 2)) (cal_sum (- n 3)))))))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_iter (- n 1) (+ (perrin n) sum)))))\n  (cal_sum_iter n 0))\n",
    "  (define (cal_perrin n)\n    (cond\n      [(= n 1) 3]\n      [(= n 2) 0]\n      [(= n 3) 2]\n      [else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3)))]))\n  (define (cal_sum_aux n sum)\n    (cond\n      [(= n 1) sum]\n      [else (cal_sum_aux (- n 1) (+ sum (cal_perrin n)))]))\n  (cal_sum_aux n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_iter (- n 1) (+ (perrin n) sum)))))\n  (cal_sum_iter n 0))\n",
    "  (define (cal_perrin n)\n    (cond\n      ((= n 0) 3)\n      ((= n 1) 0)\n      ((= n 2) 2)\n      (else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3))))))\n  (define (cal_sum_helper n sum)\n    (cond\n      ((= n 0) sum)\n      (else (cal_sum_helper (- n 1) (+ sum (cal_perrin n))))))\n  (cal_sum_helper n 0))\n",
    "  (define (cal_perrin n)\n    (cond ((= n 1) 3)\n          ((= n 2) 0)\n          ((= n 3) 2)\n          (else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3))))))\n  (define (cal_sum_aux n sum)\n    (cond ((= n 1) sum)\n          (else (cal_sum_aux (- n 1) (+ sum (cal_perrin n))))))\n  (cal_sum_aux n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_iter (- n 1) (+ (perrin n) sum)))))\n  (cal_sum_iter n 0))\n",
    "  (define (cal_perrin n)\n    (cond ((= n 1) 3)\n          ((= n 2) 0)\n          ((= n 3) 2)\n          (else (+ (cal_perrin (- n 3)) (cal_perrin (- n 2)) (cal_perrin (- n 1))))))\n  (define (cal_sum_aux n acc)\n    (cond ((= n 0) acc)\n          (else (cal_sum_aux (- n 1) (+ acc (cal_perrin n))))))\n  (cal_sum_aux n 0))\n",
    "  (define (cal_perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3))))))\n  (define (cal_sum_perrin n)\n    (cond ((= n 0) 0)\n          (else (+ (cal_perrin n) (cal_sum_perrin (- n 1))))))\n  (cal_sum_perrin n))\n",
    "  (define (perrin-seq n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin-seq (- n 2))\n                   (perrin-seq (- n 3))))))\n  (define (cal-sum-iter n sum)\n    (cond ((= n 0) sum)\n          (else (cal-sum-iter (- n 1) (+ sum (perrin-seq n))))))\n  (cal-sum-iter n 0))\n",
    "  (define (perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (perrin (- n 2)) (perrin (- n 3)))]))\n  (define (cal_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [else (cal_sum_iter (- n 1) (+ sum (perrin n)))]))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (perrin (- n 2)) (perrin (- n 3)))]))\n  (define (sum n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (perrin n) (sum (- n 1)))]))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_iter (- n 1) (+ sum (perrin n))))))\n  (cal_sum_iter n 0))\n",
    "  (define (cal_perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3)))]))\n  (define (sum_perrin n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (cal_perrin n) (sum_perrin (- n 1)))]))\n  (sum_perrin n))\n",
    "  (define (perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (perrin (- n 2)) (perrin (- n 3)))]))\n  (define (cal_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [else (cal_sum_iter (- n 1) (+ sum (perrin n)))]))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cal_sum_iter (- n 1) (+ sum (perrin n)))))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (cal_perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (cal_perrin (- n 2))\n                   (cal_perrin (- n 3))))))\n  (define (cal_sum_aux n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_aux (- n 1) (+ sum (cal_perrin n))))))\n  (cal_sum_aux n 0))\n",
    "  (define (cal_perrin n)\n    (cond\n      ((= n 0) 3)\n      ((= n 1) 0)\n      ((= n 2) 2)\n      (else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3))))))\n  (define (cal_sum_aux n sum)\n    (cond\n      ((= n 0) sum)\n      (else (cal_sum_aux (- n 1) (+ sum (cal_perrin n))))))\n  (cal_sum_aux n 0))\n",
    "  (define (cal_perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3))))))\n  (define (cal_sum_aux n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_aux (- n 1) (+ sum (cal_perrin n))))))\n  (cal_sum_aux n 0))\n",
    "  (if (= n 0)\n      0\n      (+ (cal_sum (- n 1))\n         (perrin n))))\n",
    "  (if (= n 0)\n      0\n      (+ (cal_sum (- n 1)) (perrin n))))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (&lt; i n)\n        (loop (+ i 1) (+ sum (perrin i)))\n        sum)))\n</code>\n",
    "  (define (cal_perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3)))]))\n  (define (cal_sum_helper n sum)\n    (cond\n      [(= n 0) sum]\n      [else (cal_sum_helper (- n 1) (+ sum (cal_perrin n)))]))\n  (cal_sum_helper n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (if (= n 0)\n      0\n      (+ (cal_sum (- n 1)) (perrin n))))\n",
    "  (define (perrin-iter n a b c)\n    (if (= n 0)\n        0\n        (if (= n 1)\n            a\n            (if (= n 2)\n                b\n                (perrin-iter (- n 1) b c (+ a b c))))))\n  (perrin-iter n 2 3 1))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 3)) (perrin (- n 2)) (perrin (- n 1))))))\n  (define (cal_sum_iter n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_iter (- n 1) (+ sum (perrin n))))))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (perrin (- n 2)) (perrin (- n 3)))]))\n  (define (sum n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (perrin n) (sum (- n 1)))]))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (if (= n 0)\n        0\n        (+ (perrin n) (sum (- n 1)))))\n  (sum n))\n",
    "  (define (cal_sum-iter n sum)\n    (if (= n 0)\n        sum\n        (cal_sum-iter (- n 1) (+ sum (perrin n)))))\n  (cal_sum-iter n 0))\n",
    "  (define (perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (perrin (- n 2)) (perrin (- n 3)))]))\n  (define (cal_sum-iter n sum)\n    (cond\n      [(= n 0) sum]\n      [else (cal_sum-iter (- n 1) (+ (perrin n) sum))]))\n  (cal_sum-iter n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (perrin-sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (perrin-sum (- n 1))))))\n  (perrin-sum n))\n",
    "  (define (cal_perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (cal_perrin (- n 2))\n                   (cal_perrin (- n 3))))))\n  (define (cal_sum_aux n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_aux (- n 1) (+ sum (cal_perrin n))))))\n  (cal_sum_aux n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (if (= n 1)\n      0\n      (if (= n 2)\n          2\n          (if (= n 3)\n              3\n              (+ (cal_sum (- n 1)) (cal_sum (- n 2)) (cal_sum (- n 3)))))))\n",
    "  (if (= n 0)\n      0\n      (+ (perrin n) (cal_sum (- n 1)))))\n",
    "  (define (perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (perrin (- n 2)) (perrin (- n 3)))]))\n  (define (sum n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (perrin n) (sum (- n 1)))]))\n  (sum n))\n",
    "  (define (cal_perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3))))))\n  (define (cal_sum_aux n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_aux (- n 1) (+ (cal_perrin n) sum)))))\n  (cal_sum_aux n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (perrin (- n 2)) (perrin (- n 3)))]))\n  (define (sum n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (perrin n) (sum (- n 1)))]))\n  (sum n))\n",
    "  (define (cal_perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3))))))\n  (define (sum_perrin n)\n    (if (= n 0)\n        0\n        (+ (cal_perrin n) (sum_perrin (- n 1)))))\n  (sum_perrin n))\n",
    "  (define (perrin n)\n    (cond\n      [(= n 1) 3]\n      [(= n 2) 0]\n      [(= n 3) 2]\n      [else (+ (perrin (- n 2)) (perrin (- n 3)))]))\n  (define (cal_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [else (cal_sum_iter (- n 1) (+ (perrin n) sum))]))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_iter (- n 1) (+ (perrin n) sum)))))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin-iter a b c count)\n    (if (= count n)\n        a\n        (perrin-iter b c (+ a b c) (+ count 1))))\n  (perrin-iter 3 0 2 1))\n",
    "  (define (cal_perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3))))))\n  (define (cal_sum_perrin n)\n    (cond ((= n 0) 0)\n          (else (+ (cal_perrin n) (cal_sum_perrin (- n 1))))))\n  (cal_sum_perrin n))\n",
    "  (define (cal_perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3)))]))\n  (define (cal_sum_helper n sum)\n    (cond\n      [(= n 0) sum]\n      [else (cal_sum_helper (- n 1) (+ sum (cal_perrin n)))]))\n  (cal_sum_helper n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (perrin (- n 2)) (perrin (- n 3)))]))\n  (define (cal_sum_helper n sum)\n    (cond\n      [(= n 0) sum]\n      [else (cal_sum_helper (- n 1) (+ sum (perrin n)))]))\n  (cal_sum_helper n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_iter (- n 1) (+ sum (perrin n))))))\n  (cal_sum_iter n 0))\n",
    "  (if (= n 0)\n      0\n      (+ (perrin n) (cal_sum (- n 1)))))\n",
    "  (define (cal_perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (cal_perrin (- n 3)) (cal_perrin (- n 2)) (cal_perrin (- n 1))))))\n  (define (cal_sum_aux n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_aux (- n 1) (+ sum (cal_perrin n))))))\n  (cal_sum_aux n 0))\n",
    "  (define (cal_perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3))))))\n  (define (sum_perrin n)\n    (cond ((= n 0) 0)\n          (else (+ (cal_perrin n) (sum_perrin (- n 1))))))\n  (sum_perrin n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (if (= n 0)\n        0\n        (+ (perrin n) (sum (- n 1)))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (perrin (- n 2)) (perrin (- n 3)))]))\n  (define (sum n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (perrin n) (sum (- n 1)))]))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_iter (- n 1) (+ sum (perrin n))))))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n"
  ]
}