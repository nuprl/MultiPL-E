{
  "name": "mbpp_291_count_no_of_ways",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n(define (count_no_of_ways n k)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_291_count_no_of_ways.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_no_of_ways))\n    (check-equal? (candidate 2 4) 16)\n    (check-equal? (candidate 3 2) 6)\n    (check-equal? (candidate 4 4) 228)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (count-ways-helper n k)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= n 2) (expt k 2)]\n          [else (+ (* (count-ways-helper (- n 1) k) k) (* (count-ways-helper (- n 2) k) (- k 1)))]))\n  (count-ways-helper n k))\n",
    "  (define (count-no-of-ways-helper n k)\n    (cond [(= n 0) 0]\n          [(= n 1) k]\n          [(= n 2) (* k (+ k 1))]\n          [else (+ (* k (count-no-of-ways-helper (- n 1) k))\n                   (* (- k 1) (count-no-of-ways-helper (- n 2) k)))]))\n  (count-no-of-ways-helper n k))\n",
    "  (define (count-ways-helper n k)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (* k (- k 1))]\n      [else\n       (+ (* k (- k 1)) (* (- k 1) (count-ways-helper (- n 1) k)))]))\n  (count-ways-helper n k))\n",
    "  (define (count_no_of_ways_helper n k prev_color)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= prev_color 0) (* k (count_no_of_ways_helper (- n 1) k 0))]\n          [else (* (count_no_of_ways_helper (- n 1) k 0) (- k 1))]))\n  (count_no_of_ways_helper n k 0))\n",
    "  (define (count_no_of_ways-iter n k prev-color)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2)\n       (if (= prev-color 0)\n           (* k (sub1 k))\n           (* k (sub1 k) 2))]\n      [else\n       (if (= prev-color 0)\n           (+ (* (sub1 k) (count_no_of_ways-iter (sub1 n) k 0))\n              (* (sub1 k) (count_no_of_ways-iter (sub1 n) k 1)))\n           (+ (* (sub1 k) (count_no_of_ways-iter (sub1 n) k 0))\n              (* (sub1 k) (count_no_of_ways-iter (sub1 n) k 1))\n              (* (sub1 k) (count_no_of_ways-iter (sub1 n) k 2))))]))\n  (count_no_of_ways-iter n k 0))\n",
    "  (define (count-ways n k)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (* k (- k 1))]\n      [else\n       (+ (* k (- k 1))\n          (* (- k 1) (count-ways (- n 1) (- k 1))))]))\n  (count-ways n k))\n",
    "  (define (count_no_of_ways_helper n k same-color-count)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= n 2) (+ (* k k) (* k (- k 1)))]\n          [else (+ (* k (count_no_of_ways_helper (- n 1) k (- k 1)))\n                   (* (- k 1) (count_no_of_ways_helper (- n 1) k same-color-count)))]))\n  (count_no_of_ways_helper n k (- k 1)))\n",
    "  (define (count_no_of_ways_helper n k prev-color)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= prev-color 0) (* k (count_no_of_ways_helper (- n 1) k 0))]\n          [else (* (count_no_of_ways_helper (- n 1) k 0) (- k 1))]))\n  (count_no_of_ways_helper n k 0))\n",
    "  (define (count-no-of-ways-helper n k)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (* k k)]\n      [else (+ (* k (count-no-of-ways-helper (- n 1) k))\n              (* (- k 1) (count-no-of-ways-helper (- n 2) k)))]))\n  (count-no-of-ways-helper n k))\n",
    "  (define (count_no_of_ways-iter n k prev-color-count same-color-count)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (+ (* k k) (* k (- k 1)))]\n      [else\n       (+ (* k (- k 1) same-color-count)\n          (* k prev-color-count))]))\n  (count_no_of_ways-iter n k k k))\n",
    "  (define (count_no_of_ways-iter n k prev-color)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2)\n       (cond\n         [(= prev-color 0) (* k k)]\n         [else (* k (sub1 k))])]\n      [else\n       (cond\n         [(= prev-color 0)\n          (+ (* (sub1 k) (count_no_of_ways-iter (sub1 n) k 0))\n             (* k (count_no_of_ways-iter (sub1 n) k 1)))]\n         [else\n          (+ (* (sub1 k) (count_no_of_ways-iter (sub1 n) k 0))\n             (* (sub1 k) (count_no_of_ways-iter (sub1 n) k 1)))])]))\n  (count_no_of_ways-iter n k 0))\n",
    "  (define (count_no_of_ways-iter n k prev-color)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2)\n       (cond\n         [(= prev-color 0) (* k k)]\n         [else (* k (sub1 k))])]\n      [else\n       (cond\n         [(= prev-color 0)\n          (+ (* (sub1 k) (count_no_of_ways-iter (sub1 n) k 0))\n             (* k (count_no_of_ways-iter (sub1 n) k 1)))]\n         [else\n          (+ (* (sub1 k) (count_no_of_ways-iter (sub1 n) k 0))\n             (* (sub1 k) (count_no_of_ways-iter (sub1 n) k 1)))])]))\n  (count_no_of_ways-iter n k 0))\n",
    "  (cond [(= n 0) 0]\n        [(= n 1) k]\n        [(= n 2) (* k (+ k 1))]\n        [else (+ (* k (- (count_no_of_ways (- n 1) k)\n                          (count_no_of_ways (- n 2) k)))\n                  (* (- k 1) (count_no_of_ways (- n 2) k)))]))\n",
    "  (define (count_no_of_ways-iter n k prev-color-count same-color-count)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= n 2) (+ (* k k) (* k (- k 1)))]\n          [else (+ (* k (- k 1)) (* k (- k 1)))]))\n  (count_no_of_ways-iter n k 0 0))\n",
    "  (define (count_no_of_ways-iter n k prev-color-count same-color-count)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (+ (* k k) (* k (- k 1)))]\n      [else\n       (+ (* k (- k 1) same-color-count) (* k prev-color-count))]))\n  (count_no_of_ways-iter n k (- k 1) (- k 2)))\n",
    "  (define (count_no_of_ways-iter n k prev-color-count)\n    (cond ((= n 0) 1)\n          ((= n 1) k)\n          ((= prev-color-count 1)\n           (+ (* (count_no_of_ways-iter (- n 1) k 0) k)\n              (count_no_of_ways-iter (- n 1) k 1)))\n          ((= prev-color-count 0)\n           (+ (* (count_no_of_ways-iter (- n 1) k 0) k)\n              (* (count_no_of_ways-iter (- n 1) k 1) (- k 1))))))\n  (count_no_of_ways-iter n k 0))\n",
    "  (cond\n    [(= n 1) k]\n    [(= n 2) (* k k)]\n    [else\n     (+ (* k (count_no_of_ways (- n 1) k))\n        (* (- k 1) (count_no_of_ways (- n 2) k)))]))\n",
    "  (define (count_no_of_ways-iter n k prev-color)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= n 2)\n           (cond [(= prev-color 0) (* k (add1 k))]\n                 [else (* k k)])]\n          [else\n           (cond [(= prev-color 0)\n                  (+ (* k (count_no_of_ways-iter (- n 1) k 0))\n                     (* (sub1 k) (count_no_of_ways-iter (- n 1) k 1)))]\n                 [else\n                  (+ (* k (count_no_of_ways-iter (- n 1) k 0))\n                     (* (sub1 k) (count_no_of_ways-iter (- n 1) k 1))\n                     (* (sub1 k) (count_no_of_ways-iter (- n 2) k 1)))])]))\n  (count_no_of_ways-iter n k 0))\n",
    "  (define (count_no_of_ways-iter n k prev-color)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (if (= prev-color 0) (* k (add1 k)) k)]\n      [else\n       (if (= prev-color 0)\n           (+ (* (sub1 k) (count_no_of_ways-iter (sub1 n) k 0))\n              (* k (count_no_of_ways-iter (sub1 n) k 1)))\n           (* (sub1 k) (count_no_of_ways-iter (sub1 n) k 0)))]))\n  (count_no_of_ways-iter n k 0))\n",
    "  (define (count_no_of_ways_helper n k)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (* k (+ k 1))]\n      [else\n       (+ (* k (count_no_of_ways_helper (- n 1) k))\n          (* (- k 1) (count_no_of_ways_helper (- n 2) k)))]))\n  (count_no_of_ways_helper n k))\n"
  ]
}