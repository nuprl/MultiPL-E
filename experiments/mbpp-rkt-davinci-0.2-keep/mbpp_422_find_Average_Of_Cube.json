{
  "name": "mbpp_422_find_Average_Of_Cube",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to find the average of cubes of first n natural numbers.\n(define (find_Average_Of_Cube n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_422_find_Average_Of_Cube.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_Average_Of_Cube))\n    (check-equal? (candidate 2) 4.5)\n    (check-equal? (candidate 3) 12)\n    (check-equal? (candidate 1) 1)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (find_Cube x)\n    (* x x x))\n  (/ (apply + (map find_Cube (range 1 (+ n 1)))) n))\n",
    "  (define (cube x) (* x x x))\n  (/ (for/sum ([i (in-range 1 (+ 1 n))]) (cube i)) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n count)\n        (/ sum count)\n        (find_Average_Of_Cube_iter n (+ sum (* count count count)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 1))\n",
    "  (define (find_Cube n)\n    (* n n n))\n  (define (find_Sum n)\n    (if (= n 1)\n        1\n        (+ (find_Cube n) (find_Sum (- n 1)))))\n  (/ (find_Sum n) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_iter n 0))\n",
    "  (define (find_Cube n)\n    (* n n n))\n  (/ (apply + (map find_Cube (range n))) n))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (cond ((= n 0) (/ sum count))\n          (else (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)) (+ count 1)))))\n  (find_Average_Of_Cube_iter n 0 0))\n",
    "  (define (find_Cube x)\n    (* x x x))\n  (/ (apply + (map find_Cube (range 1 (+ n 1)))) n))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_iter n 0))\n",
    "  (define (find_Cube_Of_N n)\n    (if (= n 0)\n        0\n        (+ (* n n n) (find_Cube_Of_N (- n 1)))))\n  (/ (find_Cube_Of_N n) n))\n",
    "  (define (find_Cube_Of_First_n_Natural_Numbers n)\n    (if (= n 0)\n        0\n        (+ (expt n 3) (find_Cube_Of_First_n_Natural_Numbers (- n 1)))))\n  (/ (find_Cube_Of_First_n_Natural_Numbers n) n))\n",
    "  (define (helper i acc)\n    (if (= i n)\n        (/ acc n)\n        (helper (+ i 1) (+ acc (* i i i)))))\n  (helper 1 0))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 n))) n))\n",
    "  (define (find_Average_Of_Cube_Iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_Iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_Iter n 0))\n",
    "  (define (find_Cube n)\n    (* n n n))\n  (/ (apply + (map find_Cube (range 1 (+ n 1)))) n))\n",
    "  (define (find_Cube_Of_First_N_Natural_Numbers n)\n    (if (= n 0)\n        0\n        (+ (expt n 3) (find_Cube_Of_First_N_Natural_Numbers (- n 1)))))\n  (/ (find_Cube_Of_First_N_Natural_Numbers n) n))\n",
    "  (define (find_cube n)\n    (* n n n))\n  (define (find_sum_of_cubes n)\n    (if (= n 0)\n        0\n        (+ (find_cube n)\n           (find_sum_of_cubes (- n 1)))))\n  (/ (find_sum_of_cubes n) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n count)\n        (/ sum count)\n        (find_Average_Of_Cube_iter n (+ sum (expt count 3)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 1))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (cube x) (* x x x))\n  (define (sum_of_cubes x)\n    (if (= x 1)\n        (cube x)\n        (+ (cube x) (sum_of_cubes (- x 1)))))\n  (/ (sum_of_cubes n) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_iter n 0))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (expt n 3)))))\n  (find_Average_Of_Cube_iter n 0))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (find_Cube n)\n    (* n n n))\n  (define (find_Sum n)\n    (if (= n 1)\n        1\n        (+ (find_Cube n) (find_Sum (- n 1)))))\n  (/ (find_Sum n) n))\n",
    "  (define (cube x)\n    (* x x x))\n  (define (sum_of_cubes n)\n    (if (= n 0)\n        0\n        (+ (cube n) (sum_of_cubes (- n 1)))))\n  (/ (sum_of_cubes n) n))\n",
    "  (define (find_Average_Of_Cube_Iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_Iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_Iter n 0))\n",
    "  (define (find_Average_Of_Cube_iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_iter n 0))\n",
    "  (define (cube x)\n    (* x x x))\n  (define (sum_of_cubes n)\n    (if (= n 1)\n        (cube n)\n        (+ (cube n) (sum_of_cubes (- n 1)))))\n  (/ (sum_of_cubes n) n))\n",
    "  (define (find_cube n)\n    (* n n n))\n  (define (find_sum_of_cubes n)\n    (if (= n 0)\n        0\n        (+ (find_cube n) (find_sum_of_cubes (- n 1)))))\n  (/ (find_sum_of_cubes n) n))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (find_Cube n)\n    (* n n n))\n  (define (find_Sum n)\n    (if (= n 0)\n        0\n        (+ (find_Cube n) (find_Sum (- n 1)))))\n  (/ (find_Sum n) n))\n",
    "  (define (find_Average_Of_Cube_Iter n sum count)\n    (if (= n count)\n        (/ sum count)\n        (find_Average_Of_Cube_Iter n (+ sum (* count count count)) (+ count 1))))\n  (find_Average_Of_Cube_Iter n 0 1))\n",
    "  (define (cube_of_n n)\n    (* n n n))\n  (define (sum_of_n n)\n    (if (= n 1)\n        1\n        (+ n (sum_of_n (- n 1)))))\n  (/ (cube_of_n (sum_of_n n)) n))\n",
    "  (define (cube n)\n    (* n n n))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ 1 n)))) n))\n",
    "  (define (find_Cube n)\n    (* n n n))\n  (define (find_Sum_Of_Cubes n)\n    (define (find_Sum_Of_Cubes_Iter n sum)\n      (if (= n 0)\n          sum\n          (find_Sum_Of_Cubes_Iter (- n 1) (+ sum (find_Cube n)))))\n    (find_Sum_Of_Cubes_Iter n 0))\n  (/ (find_Sum_Of_Cubes n) n))\n",
    "  (define (find_Average_Of_Cube_Iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_Iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_Iter n 0))\n",
    "  (define (find_cube n)\n    (* n n n))\n  (/ (apply + (map find_cube (range 1 (+ n 1)))) n))\n",
    "  (define (cube n) (* n n n))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (find_Cube n)\n    (* n n n))\n  (define (find_Sum_Of_Cube n)\n    (if (= n 0)\n        0\n        (+ (find_Cube n) (find_Sum_Of_Cube (- n 1)))))\n  (/ (find_Sum_Of_Cube n) n))\n",
    "  (define (find_Cube_Of_First_N_Natural_Numbers n)\n    (if (= n 0)\n        0\n        (+ (expt n 3) (find_Cube_Of_First_N_Natural_Numbers (- n 1)))))\n  (/ (find_Cube_Of_First_N_Natural_Numbers n) n))\n",
    "  (define (find_Cube x)\n    (* x x x))\n  (define (find_Sum_Of_Cube x)\n    (if (= x 1)\n        (find_Cube x)\n        (+ (find_Cube x) (find_Sum_Of_Cube (- x 1)))))\n  (/ (find_Sum_Of_Cube n) n))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (find_Cube n)\n    (* n n n))\n  (/ (apply + (map find_Cube (range 1 n))) n))\n",
    "  (define (find_Cube x)\n    (* x x x))\n  (define (find_Sum_Of_Cube x)\n    (if (= x 1)\n        (find_Cube x)\n        (+ (find_Cube x) (find_Sum_Of_Cube (- x 1)))))\n  (/ (find_Sum_Of_Cube n) n))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (cube x) (* x x x))\n  (define (sum_of_cubes x)\n    (if (= x 1)\n        (cube x)\n        (+ (cube x) (sum_of_cubes (- x 1)))))\n  (/ (sum_of_cubes n) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n count)\n        (/ sum count)\n        (find_Average_Of_Cube_iter n (+ sum (* count count count)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 1))\n",
    "  (define (cube x) (* x x x))\n  (define (sum_of_cubes x)\n    (if (= x 1)\n        (cube 1)\n        (+ (cube x) (sum_of_cubes (- x 1)))))\n  (/ (sum_of_cubes n) n))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 n))) n))\n",
    "  (define (find_Cube n)\n    (* n n n))\n  (define (find_Sum_Of_Cubes n)\n    (if (= n 1)\n        (find_Cube n)\n        (+ (find_Cube n) (find_Sum_Of_Cubes (- n 1)))))\n  (/ (find_Sum_Of_Cubes n) n))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (find_Average_Of_Cube_Iter n sum count)\n    (if (= n count)\n        (/ sum count)\n        (find_Average_Of_Cube_Iter n (+ sum (expt count 3)) (+ count 1))))\n  (find_Average_Of_Cube_Iter n 0 1))\n",
    "  (define (find_Cube n)\n    (* n n n))\n  (/ (apply + (map find_Cube (range 1 (+ n 1)))) n))",
    "  (define (find_Cube n)\n    (* n n n))\n  (/ (apply + (map find_Cube (range 1 (+ n 1)))) n))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (add1 n)))) n))\n",
    "  (define (find_cube x)\n    (* x x x))\n  (/ (apply + (map find_cube (range 1 n))) n))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (cube x)\n    (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n count)\n        (/ sum count)\n        (find_Average_Of_Cube_iter n (+ sum (* count count count)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 1))\n",
    "  (define (find_Cube x)\n    (* x x x))\n  (define (find_Average_Of_Cube_Iter x sum)\n    (if (= x n)\n        (/ sum n)\n        (find_Average_Of_Cube_Iter (+ x 1) (+ sum (find_Cube x)))))\n  (find_Average_Of_Cube_Iter 1 0))\n",
    "  (define (find_Average_Of_Cube_iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_iter n 0))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_iter n 0))\n",
    "  (define (cube x) (* x x x))\n  (define (sum_of_cubes x)\n    (cond ((= x 1) (cube 1))\n          (else (+ (cube x) (sum_of_cubes (- x 1))))))\n  (/ (sum_of_cubes n) n))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (add1 n)))) n))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n count)\n        (/ sum count)\n        (find_Average_Of_Cube_iter n (+ sum (* count count count)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 1))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_iter n 0))\n",
    "  (define (find_Cube_Of_First_N_Natural_Numbers n)\n    (if (= n 0)\n        0\n        (+ (expt n 3) (find_Cube_Of_First_N_Natural_Numbers (- n 1)))))\n  (/ (find_Cube_Of_First_N_Natural_Numbers n) n))\n",
    "  (define (helper i sum)\n    (if (= i n)\n        (/ sum n)\n        (helper (+ i 1) (+ sum (* i i i)))))\n  (helper 1 0))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (add1 n)))) n))\n",
    "  (define (cube x)\n    (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (add1 n)))) n))\n",
    "  (define (find_Cube x)\n    (* x x x))\n  (/ (apply + (map find_Cube (range 1 (+ 1 n)))) n))\n",
    "  (define (sum_of_cubes n)\n    (if (= n 0)\n        0\n        (+ (* n n n) (sum_of_cubes (- n 1)))))\n  (/ (sum_of_cubes n) n))\n",
    "  (define (find_Cube n)\n    (* n n n))\n  (define (find_Sum_Of_Cube n)\n    (if (= n 1)\n        (find_Cube n)\n        (+ (find_Cube n) (find_Sum_Of_Cube (- n 1)))))\n  (/ (find_Sum_Of_Cube n) n))\n",
    "  (define (cube n) (* n n n))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (find_Cube n)\n    (* n n n))\n  (define (find_Sum_Of_Cube n)\n    (if (= n 1)\n        (find_Cube n)\n        (+ (find_Cube n) (find_Sum_Of_Cube (- n 1)))))\n  (/ (find_Sum_Of_Cube n) n))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_iter n 0))\n",
    "  (define (find_Cube x)\n    (* x x x))\n  (define (find_Sum_Of_Cubes x)\n    (if (= x 1)\n        (find_Cube x)\n        (+ (find_Cube x) (find_Sum_Of_Cubes (- x 1)))))\n  (/ (find_Sum_Of_Cubes n) n))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (find_Cube_Of_Number n)\n    (* n n n))\n  (/ (apply + (map find_Cube_Of_Number (range 1 n))) n))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (find_Average_Of_Cube_iter n acc)\n    (if (= n 0)\n        (/ acc n)\n        (find_Average_Of_Cube_iter (- n 1) (+ acc (* n n n)))))\n  (find_Average_Of_Cube_iter n 0))\n",
    "  (define (cube n) (* n n n))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (find_Average_Of_Cube_Iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_Iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_Iter n 0))\n",
    "  (define (find_Cube x)\n    (* x x x))\n  (/ (apply + (map find_Cube (range 1 n))) n))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_iter n 0))\n",
    "  (define (find_Cube n)\n    (* n n n))\n  (/ (apply + (map find_Cube (range 1 (+ n 1)))) n))\n",
    "  (define (find_Cube_Of_N n)\n    (* n n n))\n  (define (find_Sum_Of_Cubes n)\n    (if (= n 1)\n        (find_Cube_Of_N 1)\n        (+ (find_Cube_Of_N n) (find_Sum_Of_Cubes (- n 1)))))\n  (/ (find_Sum_Of_Cubes n) n))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_iter n 0))\n",
    "  (define (find_Cube x)\n    (* x x x))\n  (define (find_Sum_Of_Cube x)\n    (if (= x 1)\n        (find_Cube x)\n        (+ (find_Cube x) (find_Sum_Of_Cube (- x 1)))))\n  (/ (find_Sum_Of_Cube n) n))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (find_Cube n)\n    (* n n n))\n  (define (find_Average_Of_Cube_Helper n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_Helper (- n 1) (+ sum (find_Cube n)))))\n  (find_Average_Of_Cube_Helper n 0))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n count)\n        (/ sum count)\n        (find_Average_Of_Cube_iter n (+ sum (expt count 3)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 1))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n 0)\n        (/ sum count)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 0))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n count)\n        (/ sum count)\n        (find_Average_Of_Cube_iter n (+ sum (* count count count)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 1))\n",
    "  (define (find_Average_Of_Cube_iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_iter n 0))\n",
    "  (define (find_Cube_Of_First_N_Natural_Numbers n)\n    (if (= n 0)\n        0\n        (+ (* n n n) (find_Cube_Of_First_N_Natural_Numbers (- n 1)))))\n  (/ (find_Cube_Of_First_N_Natural_Numbers n) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n count)\n        (/ sum count)\n        (find_Average_Of_Cube_iter n (+ sum (expt count 3)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 1))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (find_Cube n)\n    (* n n n))\n  (define (find_Sum_Of_Cube n)\n    (if (= n 0)\n        0\n        (+ (find_Cube n) (find_Sum_Of_Cube (- n 1)))))\n  (/ (find_Sum_Of_Cube n) n))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ 1 n)))) n))\n",
    "  (define (find_Cube n)\n    (* n n n))\n  (define (find_Sum_Of_Cube n)\n    (if (= n 1)\n        (find_Cube n)\n        (+ (find_Cube n) (find_Sum_Of_Cube (- n 1)))))\n  (/ (find_Sum_Of_Cube n) n))\n",
    "  (define (find_Average_Of_Cube_Iter n sum count)\n    (if (= n count)\n        (/ sum count)\n        (find_Average_Of_Cube_Iter n (+ sum (* count count count)) (+ count 1))))\n  (find_Average_Of_Cube_Iter n 0 1))\n",
    "  (define (cube n)\n    (* n n n))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (find_Cube_Of_First_N_Natural_Numbers n)\n    (if (= n 0)\n        0\n        (+ (expt n 3) (find_Cube_Of_First_N_Natural_Numbers (- n 1)))))\n  (/ (find_Cube_Of_First_N_Natural_Numbers n) n))\n",
    "  (define (find_Cube n)\n    (* n n n))\n  (define (find_Sum n)\n    (if (= n 1)\n        1\n        (+ (find_Cube n) (find_Sum (- n 1)))))\n  (/ (find_Sum n) n))\n",
    "  (define (cube x)\n    (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (cube x)\n    (* x x x))\n  (/ (apply + (map cube (build-list n add1))) n))\n",
    "  (define (find_Average_Of_Cube_Helper n sum count)\n    (if (= count n)\n        (/ sum n)\n        (find_Average_Of_Cube_Helper n (+ sum (* count count count)) (+ count 1))))\n  (find_Average_Of_Cube_Helper n 0 1))\n",
    "  (define (find_Cube n)\n    (* n n n))\n  (define (find_Sum_Of_Cube n)\n    (if (= n 1)\n        (find_Cube n)\n        (+ (find_Cube n) (find_Sum_Of_Cube (- n 1)))))\n  (/ (find_Sum_Of_Cube n) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_iter n 0))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (find_Average_Of_Cube_iter n acc)\n    (if (= n 0)\n        (/ acc n)\n        (find_Average_Of_Cube_iter (- n 1) (+ acc (* n n n)))))\n  (find_Average_Of_Cube_iter n 0))\n",
    "  (define (find_Cube_Of_First_N_Natural_Numbers n)\n    (if (= n 0)\n        0\n        (+ (expt n 3) (find_Cube_Of_First_N_Natural_Numbers (- n 1)))))\n  (/ (find_Cube_Of_First_N_Natural_Numbers n) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n count)\n        (/ sum count)\n        (find_Average_Of_Cube_iter n (+ sum (* count count count)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 1))\n",
    "  (define (find_Cube n)\n    (* n n n))\n  (define (find_Sum_Of_Cube n)\n    (if (= n 1)\n        (find_Cube n)\n        (+ (find_Cube n) (find_Sum_Of_Cube (- n 1)))))\n  (/ (find_Sum_Of_Cube n) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n count)\n        (/ sum n)\n        (find_Average_Of_Cube_iter n (+ sum (expt count 3)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 1))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n count)\n        (/ sum count)\n        (find_Average_Of_Cube_iter n (+ sum (* count count count)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 1))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n count)\n        (/ sum count)\n        (find_Average_Of_Cube_iter n (+ sum (expt count 3)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 1))\n",
    "  (define (find_Cube n)\n    (* n n n))\n  (define (find_Sum n)\n    (if (= n 0)\n        0\n        (+ (find_Cube n) (find_Sum (- n 1)))))\n  (/ (find_Sum n) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_iter n 0))\n",
    "  (define (find_Cube x)\n    (* x x x))\n  (define (find_Average x y)\n    (/ (+ x y) 2))\n  (if (= n 1)\n      (find_Cube 1)\n      (find_Average (find_Cube n) (find_Average_Of_Cube (- n 1)))))\n",
    "  (define (find_Average_Of_Cube_iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_iter n 0))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n 0)\n        (/ sum count)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 0))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n count)\n        (/ sum n)\n        (find_Average_Of_Cube_iter n (+ sum (expt count 3)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 1))\n",
    "  (define (cube x)\n    (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n 0)\n        (/ sum count)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (expt n 3)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 0))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n count)\n        (/ sum count)\n        (find_Average_Of_Cube_iter n (+ sum (* count count count)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 1))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= count n)\n        (/ sum n)\n        (find_Average_Of_Cube_iter n (+ sum (* count count count)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 1))\n",
    "  (define (cube x)\n    (* x x x))\n  (/ (apply + (map cube (range 1 (add1 n)))) n))\n",
    "  (define (find_Cube n)\n    (define (find_Cube_Helper n acc)\n      (if (= n 0)\n          acc\n          (find_Cube_Helper (- n 1) (+ acc (* n n n)))))\n    (find_Cube_Helper n 0))\n  (/ (find_Cube n) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_iter n 0))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (add1 n)))) n))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (add1 n)))) n))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (cube n)\n    (* n n n))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (find_Cube_Of_First_N_Natural_Numbers n)\n    (if (= n 0)\n        0\n        (+ (expt n 3) (find_Cube_Of_First_N_Natural_Numbers (- n 1)))))\n  (/ (find_Cube_Of_First_N_Natural_Numbers n) n))\n",
    "  (define (find_Cube_Of_First_n_Natural_Numbers n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (find_Cube_Of_First_n_Natural_Numbers (- n 1)))))\n  (/ (find_Cube_Of_First_n_Natural_Numbers n) n))\n",
    "  (define (find_Cube x)\n    (* x x x))\n  (/ (apply + (map find_Cube (range 1 (+ 1 n)))) n))\n",
    "  (define (find_Cube n)\n    (* n n n))\n  (define (find_Average_Of_Cube_Helper n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_Helper (- n 1) (+ sum (find_Cube n)))))\n  (find_Average_Of_Cube_Helper n 0))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n count)\n        (/ sum count)\n        (find_Average_Of_Cube_iter n (+ sum (* count count count)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 1))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (cube x)\n    (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n 0)\n        (/ sum count)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 0))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n count)\n        (/ sum count)\n        (find_Average_Of_Cube_iter n (+ sum (expt count 3)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 1))\n",
    "  (define (cube x)\n    (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (find_Cube n)\n    (* n n n))\n  (/ (apply + (map find_Cube (range 1 (+ n 1)))) n))\n",
    "  (define (find_Cube x)\n    (* x x x))\n  (define (find_Average_Of_Cube_Iter x sum)\n    (if (= x n)\n        (/ sum n)\n        (find_Average_Of_Cube_Iter (+ x 1) (+ sum (find_Cube x)))))\n  (find_Average_Of_Cube_Iter 1 0))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_iter n 0))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (cube x) (* x x x))\n  (define (sum_of_cubes x)\n    (if (= x 1)\n        (cube 1)\n        (+ (cube x) (sum_of_cubes (- x 1)))))\n  (/ (sum_of_cubes n) n))\n",
    "  (define (cube x) (* x x x))\n  (define (sum_of_cubes x)\n    (if (= x 1)\n        (cube 1)\n        (+ (cube x) (sum_of_cubes (- x 1)))))\n  (/ (sum_of_cubes n) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n count)\n        (/ sum n)\n        (find_Average_Of_Cube_iter n (+ sum (expt count 3)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 1))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (find_Cube n)\n    (* n n n))\n  (define (find_Sum_Of_Cube n)\n    (if (= n 0)\n        0\n        (+ (find_Cube n) (find_Sum_Of_Cube (- n 1)))))\n  (/ (find_Sum_Of_Cube n) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_iter n 0))\n",
    "  (define (find_Average_Of_Cube_iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_iter n 0))\n",
    "  (define (find_Cube n)\n    (* n n n))\n  (define (find_Sum n)\n    (if (= n 1)\n        1\n        (+ (find_Cube n) (find_Sum (- n 1)))))\n  (/ (find_Sum n) n))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n count)\n        (/ sum count)\n        (find_Average_Of_Cube_iter n (+ sum (* count count count)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 1))\n",
    "  (define (find_Cube x)\n    (* x x x))\n  (define (find_Average_Of_Cube_Iter n sum count)\n    (if (= count n)\n        (/ sum n)\n        (find_Average_Of_Cube_Iter n (+ sum (find_Cube count)) (+ count 1))))\n  (find_Average_Of_Cube_Iter n 0 1))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (cube x)\n    (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_iter n 0))\n",
    "  (define (find_Cube x)\n    (* x x x))\n  (define (find_Sum_Of_Cube x)\n    (if (= x 0)\n        0\n        (+ (find_Cube x) (find_Sum_Of_Cube (- x 1)))))\n  (/ (find_Sum_Of_Cube n) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n count)\n        (/ sum count)\n        (find_Average_Of_Cube_iter n (+ sum (expt count 3)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 1))\n",
    "  (define (cube x)\n    (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (find_Cube_Of_Number n)\n    (* n n n))\n  (define (find_Average_Of_Cube_Helper n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_Helper (- n 1) (+ sum (find_Cube_Of_Number n)))))\n  (find_Average_Of_Cube_Helper n 0))\n",
    "  (define (find_Average_Of_Cube_iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_iter n 0))\n",
    "  (define (find_Average_Of_Cube_iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_iter n 0))\n",
    "  (define (find_Average_Of_Cube_iter n acc)\n    (if (= n 0)\n        (/ acc n)\n        (find_Average_Of_Cube_iter (- n 1) (+ acc (* n n n)))))\n  (find_Average_Of_Cube_iter n 0))\n"
  ]
}