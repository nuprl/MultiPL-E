{
  "name": "mbpp_444_trim_tuple",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to trim each tuple by k in the given tuple list.\n(define (trim_tuple test_list K)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_444_trim_tuple.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate trim_tuple))\n    (check-equal? (candidate (list (list 5 3 2 1 4) (list 3 4 9 2 1) (list 9 1 2 3 5) (list 4 8 2 1 7)) 2) \"[(2,), (9,), (2,), (2,)]\")\n    (check-equal? (candidate (list (list 5 3 2 1 4) (list 3 4 9 2 1) (list 9 1 2 3 5) (list 4 8 2 1 7)) 1) \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")\n    (check-equal? (candidate (list (list 7 8 4 9) (list 11 8 12 4) (list 4 1 7 8) (list 3 6 9 7)) 1) \"[(8, 4), (8, 12), (1, 7), (6, 9)]\")\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (list-ref x K)) test_list))\n",
    "  (map (lambda (x) (sublist x K (sub1 (length x)))) test_list))\n",
    "  (map (lambda (tuple)\n         (map (lambda (x)\n                (if (&gt; x K)\n                    K\n                    x))\n              tuple))\n       test_list))\n</code>\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (trim_tuple_helper x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (lst) (sublist lst 0 (- (length lst) K))) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (sublist x K (sub1 (length x)))) test_list))\n",
    "  (map (lambda (tuple) (trim_tuple_helper tuple K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (tuple)\n         (map (lambda (x)\n                (if (&lt; x K)\n                    0\n                    x))\n              tuple))\n       test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x)\n         (map (lambda (y) (- y K)) x)) test_list))\n",
    "  (map (lambda (x) (list-trim x K)) test_list))\n",
    "  (map (lambda (x) (list-ref x K)) test_list))\n",
    "  (map (lambda (x) (take x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (take x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (list-ref x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (sublist x K (sub1 (length x)))) test_list))\n",
    "  (map (lambda (x) (take x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (list-ref x K)) test_list))\n",
    "  (map (lambda (tuple)\n         (map (lambda (x)\n                (if (&lt; x K)\n                    0\n                    x))\n              tuple))\n       test_list))\n</code>\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (take x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x)\n         (map (lambda (y)\n                (- y K))\n              x))\n       test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (trim_tuple_helper x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (sublist x 0 (- (length x) K))) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (take x K)) test_list))\n",
    "  (map (lambda (x) (list-trim x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x)\n         (map (lambda (y) (- y K)) x))\n       test_list))\n",
    "  (map (lambda (x) (trim_tuple_helper x K)) test_list))\n",
    "  (map (lambda (x) (sublist x K (sub1 (length x)))) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (map (lambda (y) (- y K)) x)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (list-trim x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (list-ref x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (sublist x 0 (- (length x) K))) test_list))\n",
    "  (map (lambda (x) (take x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (trim_tuple_helper x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (tuple)\n         (map (lambda (x) (- x K)) tuple))\n       test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (take x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (tuple) (list-tail tuple K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (take x K)) test_list))\n",
    "  (map (lambda (x) (list-trim x K)) test_list))\n",
    "  (map (lambda (x) (trim x K)) test_list))\n",
    "  (map (lambda (x) (list-trim x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x)\n         (sublist x 0 (- (length x) K)))\n       test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (sublist x 0 (- (length x) K))) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (tuple)\n         (map (lambda (x)\n                (if (&lt; x K)\n                    0\n                    x))\n              tuple))\n       test_list))\n</code>\n",
    "  (map (lambda (tuple)\n         (map (lambda (x)\n                (- x K))\n              tuple))\n       test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (sublist x 0 (- (length x) K))) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (cond\n    [(empty? test_list) empty]\n    [else (cons (trim_tuple_helper (first test_list) K)\n                (trim_tuple test_list K))]))\n",
    "  (map (lambda (x) (list-ref x K)) test_list))\n",
    "  (map (lambda (tuple)\n         (map (lambda (x)\n                (if (&lt; x K)\n                    0\n                    x))\n              tuple))\n       test_list))\n</code>\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (sublist x 0 (- (length x) K))) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (map (lambda (y) (- y K)) x)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (trim x K)) test_list))\n",
    "  (map (lambda (x) (map (lambda (y) (sub1 y)) x)) test_list))\n",
    "  (map (lambda (x) (list (sub1 (car x)) (sub1 (cadr x)))) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (list-ref x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (list-trim x K)) test_list))\n",
    "  (map (lambda (tuple)\n         (map (lambda (elem)\n                (if (&lt; elem K)\n                    elem\n                    K))\n              tuple))\n       test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (list-ref x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (tuple)\n         (map (lambda (x)\n                (- x K))\n              tuple))\n       test_list))\n",
    "  (map (lambda (x) (trim x K)) test_list))\n",
    "  (map (lambda (x) (list-trim x K)) test_list))\n",
    "  (map (lambda (x) (sublist x 0 (- (length x) K))) test_list))\n",
    "  (map (lambda (tuple)\n         (map (lambda (x)\n                (if (&lt; x K)\n                    0\n                    x))\n              tuple))\n       test_list))\n</code>\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (take x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (map (lambda (y) (- y K)) x)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (list-trim x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (sublist x K (sub1 (length x)))) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (tuple)\n         (map (lambda (x)\n                (if (&lt; x K)\n                    0\n                    x))\n              tuple))\n       test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (take x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (tuple)\n         (map (lambda (x) (- x K))\n              tuple))\n       test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (trim x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n"
  ]
}