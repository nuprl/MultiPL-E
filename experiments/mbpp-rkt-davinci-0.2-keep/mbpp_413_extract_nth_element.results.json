{
  "name": "mbpp_413_extract_nth_element",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_413_extract_nth_element.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of tuples.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}