{
  "name": "mbpp_577_last_Digit_Factorial",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to find the last digit in factorial of a given number.\n(define (last_Digit_Factorial n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_577_last_Digit_Factorial.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate last_Digit_Factorial))\n    (check-equal? (candidate 4) 4)\n    (check-equal? (candidate 21) 0)\n    (check-equal? (candidate 30) 0)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (if (= n 0)\n      1\n      (* n (last_Digit_Factorial (- n 1)))))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (helper n acc)\n    (if (= n 0)\n        acc\n        (helper (- n 1) (* acc n))))\n  (modulo (helper n 1) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (last_Digit_Factorial_iter n acc)\n    (cond ((= n 0) acc)\n          ((= n 1) (* acc 1))\n          (else (last_Digit_Factorial_iter (- n 1) (* acc n)))))\n  (last_Digit_Factorial_iter n 1))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (helper n acc)\n    (cond\n      [(= n 0) acc]\n      [else (helper (- n 1) (* acc n))]))\n  (modulo (helper n 1) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (if (= n 0)\n      1\n      (* n (last_Digit_Factorial (- n 1)))))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (last-digit-factorial-iter n acc)\n    (if (= n 0)\n        acc\n        (last-digit-factorial-iter (- n 1) (* acc n))))\n  (last-digit-factorial-iter n 1))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (let loop ((n n) (acc 1))\n    (if (= n 0)\n        acc\n        (loop (- n 1) (* acc n)))))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (last_Digit_Factorial_iter n acc)\n    (if (= n 0)\n        acc\n        (last_Digit_Factorial_iter (- n 1) (* acc n))))\n  (last_Digit_Factorial_iter n 1))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (if (= n 0)\n      1\n      (* n (last_Digit_Factorial (- n 1)))))\n",
    "  (define (helper n acc)\n    (if (= n 0)\n        acc\n        (helper (- n 1) (* n acc))))\n  (modulo (helper n 1) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (remainder (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (helper n acc)\n    (cond\n      [(= n 0) acc]\n      [else (helper (- n 1) (* acc n))]))\n  (modulo (helper n 1) 10))\n",
    "  (let loop ([n n] [f 1])\n    (if (= n 0)\n        f\n        (loop (- n 1) (* f n)))))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (if (= n 1)\n      1\n      (modulo (* n (last_Digit_Factorial (- n 1))) 10)))\n",
    "  (if (= n 1)\n      1\n      (* n (last_Digit_Factorial (- n 1)))))\n",
    "  (define (last_Digit_Factorial_helper n acc)\n    (cond [(= n 0) acc]\n          [else (last_Digit_Factorial_helper (- n 1) (* acc n))]))\n  (modulo (last_Digit_Factorial_helper n 1) 10))\n",
    "  (define (last-digit-factorial-iter product counter)\n    (cond ((= counter n) product)\n          (else (last-digit-factorial-iter (* product counter) (+ counter 1)))))\n  (last-digit-factorial-iter 1 1))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (let loop ([n n] [acc 1])\n    (cond [(= n 0) acc]\n          [else (loop (- n 1) (* acc n))])))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (if (= n 0)\n      1\n      (modulo (* n (last_Digit_Factorial (- n 1))) 10)))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (cond\n    [(= n 0) 1]\n    [else (* n (last_Digit_Factorial (- n 1)))]))\n",
    "  (define (iter product counter)\n    (cond ((= counter n) product)\n          (else (iter (* product counter) (+ counter 1)))))\n  (modulo (iter 1 1) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (last-digit-factorial-iter product counter)\n    (cond ((= counter n) product)\n          (else (last-digit-factorial-iter (* product counter) (+ counter 1)))))\n  (last-digit-factorial-iter 1 1))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (helper n acc)\n    (if (= n 0)\n        acc\n        (helper (- n 1) (* acc n))))\n  (modulo (helper n 1) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (cond\n    [(= n 0) 1]\n    [(= n 1) 1]\n    [else (modulo (* n (last_Digit_Factorial (- n 1))) 10)]))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (if (= n 0)\n      1\n      (* n (last_Digit_Factorial (- n 1)))))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (if (= n 1)\n      1\n      (* n (last_Digit_Factorial (- n 1)))))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (if (= n 0)\n      1\n      (* n (last_Digit_Factorial (- n 1)))))\n",
    "  (define (helper n acc)\n    (cond\n      [(= n 0) acc]\n      [else (helper (- n 1) (* acc n))]))\n  (modulo (helper n 1) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (let ([factorial (factorial n)])\n    (modulo factorial 10)))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (if (= n 0)\n      1\n      (* n (last_Digit_Factorial (- n 1)))))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (helper n acc)\n    (cond\n      [(= n 0) acc]\n      [else (helper (- n 1) (* acc n))]))\n  (modulo (helper n 1) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n"
  ]
}