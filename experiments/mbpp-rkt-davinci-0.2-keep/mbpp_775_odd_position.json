{
  "name": "mbpp_775_odd_position",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to check whether every odd index contains odd numbers of a given list.\n(define (odd_position nums)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_775_odd_position.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate odd_position))\n    (check-equal? (candidate (list 2 1 4 3 6 7 6 3)) #t)\n    (check-equal? (candidate (list 4 1 2)) #t)\n    (check-equal? (candidate (list 1 2 3)) #f)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (odd_position_iter nums pos)\n    (if (null? nums)\n        #t\n        (if (and (odd? pos) (odd? (car nums)))\n            (odd_position_iter (cdr nums) (+ pos 1))\n            #f)))\n  (odd_position_iter nums 0))\n",
    "  (define (odd-position-helper nums index)\n    (if (null? nums)\n        #t\n        (if (and (odd? index) (odd? (car nums)))\n            (odd-position-helper (cdr nums) (+ index 1))\n            #f)))\n  (odd-position-helper nums 0))\n",
    "  (cond\n    [(empty? nums) #t]\n    [(odd? (first nums)) (odd_position (rest nums))]\n    [else #f]))\n",
    "  (if (null? nums)\n      #t\n      (if (odd? (car nums))\n          (odd_position (cdr nums))\n          #f)))\n",
    "  (for/and ([n (in-list nums)])\n    (odd? n)))\n",
    "  (define (odd_position_iter nums index)\n    (cond\n      [(empty? nums) #t]\n      [(odd? index)\n       (and (odd? (first nums))\n            (odd_position_iter (rest nums) (add1 index)))]\n      [else (odd_position_iter (rest nums) (add1 index))]))\n  (odd_position_iter nums 0))\n",
    "  (cond\n    [(empty? nums) #t]\n    [(odd? (remainder (first nums) 2)) (odd_position (rest nums))]\n    [else #f]))\n",
    "  (define (odd_position_iter nums i)\n    (cond\n      [(empty? nums) true]\n      [(odd? i) (and (odd? (first nums)) (odd_position_iter (rest nums) (+ i 1)))]\n      [else (odd_position_iter (rest nums) (+ i 1))]))\n  (odd_position_iter nums 0))\n",
    "  (cond\n    [(empty? nums) #t]\n    [(odd? (remainder (first nums) 2)) (odd_position (rest nums))]\n    [else #f]))\n",
    "  (define (odd_position_iter nums index)\n    (cond\n      [(empty? nums) true]\n      [(= (remainder index 2) 1)\n       (and (odd? (first nums))\n            (odd_position_iter (rest nums) (+ index 1)))]\n      [else (odd_position_iter (rest nums) (+ index 1))]))\n  (odd_position_iter nums 0))\n",
    "  (cond [(empty? nums) true]\n        [(odd? (first nums)) (odd_position (rest nums))]\n        [else false]))\n",
    "  (define (odd_position-iter nums i)\n    (cond\n      [(empty? nums) #t]\n      [(odd? i) (and (odd? (first nums)) (odd_position-iter (rest nums) (+ i 1)))]\n      [else (odd_position-iter (rest nums) (+ i 1))]))\n  (odd_position-iter nums 0))\n",
    "  (define (odd_position_iter nums i)\n    (cond\n      [(empty? nums) #t]\n      [(odd? i) (and (odd? (first nums)) (odd_position_iter (rest nums) (+ i 1)))]\n      [else (odd_position_iter (rest nums) (+ i 1))]))\n  (odd_position_iter nums 0))\n",
    "  (cond\n    [(empty? nums) #t]\n    [(odd? (first nums)) (odd_position (rest nums))]\n    [else #f]))\n",
    "  (define (odd? num)\n    (and (not (zero? (remainder num 2)))\n         (not (zero? (remainder (add1 num) 2)))))\n  (define (odd-position? nums)\n    (cond [(empty? nums) #t]\n          [(odd? (first nums)) (odd-position? (rest nums))]\n          [else #f]))\n  (odd-position? (rest nums)))\n",
    "  (if (null? nums)\n      #t\n      (if (odd? (car nums))\n          (odd_position (cdr nums))\n          #f)))\n",
    "  (cond\n    [(empty? nums) #t]\n    [(odd? (first nums)) (odd_position (rest nums))]\n    [else #f]))\n",
    "  (define (odd-position-iter nums index)\n    (if (null? nums)\n        #t\n        (if (and (odd? index) (odd? (car nums)))\n            (odd-position-iter (cdr nums) (+ index 1))\n            #f)))\n  (odd-position-iter nums 0))\n",
    "  (cond\n    [(empty? nums) #t]\n    [(odd? (remainder (first nums) 2)) (odd_position (rest nums))]\n    [else #f]))\n",
    "  (cond\n    [(empty? nums) true]\n    [(odd? (first nums)) (odd_position (rest nums))]\n    [else false]))\n"
  ]
}