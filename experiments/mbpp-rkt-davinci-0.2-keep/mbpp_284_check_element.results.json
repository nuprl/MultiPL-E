{
  "name": "mbpp_284_check_element",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_284_check_element.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) true]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) true]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(null? list) #t]\n    [(equal? (car list) element) (check_element (cdr list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond ((null? list) #t)\n        ((equal? (car list) element) (check_element (cdr list) element))\n        (else #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [else (and (= (first list) element) (check_element (rest list) element))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpssuatqds.rkt:14:4\n\n=: contract violation\n  expected: number?\n  given: \"green\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpssuatqds.rkt:16:4\n\n=: contract violation\n  expected: number?\n  given: \"green\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(null? list) #t]\n    [(equal? (car list) element) (check_element (cdr list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) true]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) true]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) true]\n    [(= (first list) element) (check_element (rest list) element)]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwroevxoi.rkt:15:4\n\n=: contract violation\n  expected: number?\n  given: \"green\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwroevxoi.rkt:17:4\n\n=: contract violation\n  expected: number?\n  given: \"green\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) true]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) true]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) true]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(null? list) #t]\n    [(equal? (car list) element) (check_element (cdr list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) true]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) true]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) true]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) true]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) true]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (if (null? list)\n      #t\n      (if (equal? (car list) element)\n          (check_element (cdr list) element)\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) true]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) true]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) true]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond ((null? list) #t)\n        ((equal? (car list) element) (check_element (cdr list) element))\n        (else #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) true]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) true]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) true]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) true]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) true]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) true]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) true]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) true]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) true]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) true]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) true]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(null? list) #t]\n    [(equal? (car list) element) (check_element (cdr list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) true]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) true]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) true]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) true]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) true]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) true]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) true]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (if (null? list)\n      #t\n      (if (equal? (car list) element)\n          (check_element (cdr list) element)\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) true]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond ((null? list) #t)\n        ((equal? (car list) element) (check_element (cdr list) element))\n        (else #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) true]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) true]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) true]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) true]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (if (null? list)\n      #t\n      (if (equal? (car list) element)\n          (check_element (cdr list) element)\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (if (null? list)\n      #t\n      (if (equal? (car list) element)\n          (check_element (cdr list) element)\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) true]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) true]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) true]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond [(empty? list) #t]\n        [(equal? (first list) element) (check_element (rest list) element)]\n        [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(null? list) #t]\n    [(equal? (car list) element) (check_element (cdr list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) true]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) true]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) true]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(null? list) #t]\n    [(equal? (car list) element) (check_element (cdr list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) true]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (if (null? list)\n      #t\n      (if (equal? (car list) element)\n          (check_element (cdr list) element)\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond [(empty? list) #t]\n        [(equal? (first list) element) (check_element (rest list) element)]\n        [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond [(empty? list) true]\n        [(equal? (first list) element) (check_element (rest list) element)]\n        [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(null? list) #t]\n    [(equal? (car list) element) (check_element (cdr list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(null? list) #t]\n    [(equal? (car list) element) (check_element (cdr list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) true]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) true]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) true]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (if (null? list)\n      #t\n      (if (equal? (car list) element)\n          (check_element (cdr list) element)\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) true]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) true]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) true]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond ((null? list) #t)\n        ((equal? (car list) element) (check_element (cdr list) element))\n        (else #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) true]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) true]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [else (and (= (first list) element) (check_element (rest list) element))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpssuatqds.rkt:14:4\n\n=: contract violation\n  expected: number?\n  given: \"green\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpssuatqds.rkt:16:4\n\n=: contract violation\n  expected: number?\n  given: \"green\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (if (null? list)\n      #t\n      (if (equal? (car list) element)\n          (check_element (cdr list) element)\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n  (cond\n    [(empty? list) #t]\n    [(equal? (first list) element) (check_element (rest list) element)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-equal? (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f)\n    (check-equal? (candidate (list 1 2 3 4) 7) #f)\n    (check-equal? (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665509673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}