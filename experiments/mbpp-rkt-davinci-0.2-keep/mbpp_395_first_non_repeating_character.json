{
  "name": "mbpp_395_first_non_repeating_character",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to find the first non-repeated character in a given string.\n(define (first_non_repeating_character str1)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_395_first_non_repeating_character.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_non_repeating_character))\n    (check-equal? (candidate \"abcabc\") #f)\n    (check-equal? (candidate \"abc\") \"a\")\n    (check-equal? (candidate \"ababc\") \"c\")\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let ([char-counts (make-hash)])\n    (for ([char (in-string str1)])\n      (hash-update char-counts char add1 1))\n    (for ([char (in-string str1)])\n      (when (= 1 (hash-ref char-counts char))\n        (return char)))))\n",
    "  (let ([char-counts (make-hash)])\n    (for ([char (in-string str1)])\n      (hash-update char-counts char add1 1))\n    (for ([char (in-string str1)])\n      (when (= 1 (hash-ref char-counts char))\n        (return char)))))\n",
    "  (define (first_non_repeating_character_helper str1)\n    (cond ((null? str1) '())\n          ((null? (cdr str1)) (list (car str1)))\n          (else (cons (car str1) (first_non_repeating_character_helper (cdr str1))))))\n  (define (first_non_repeating_character_helper2 str1 str2)\n    (cond ((null? str1) str2)\n          ((member (car str1) str2) (first_non_repeating_character_helper2 (cdr str1) str2))\n          (else (first_non_repeating_character_helper2 (cdr str1) (cons (car str1) str2)))))\n  (first_non_repeating_character_helper2 (first_non_repeating_character_helper str1) '()))\n",
    "  (let ([char-counts (make-hash)])\n    (for ([c (in-string str1)])\n      (hash-update char-counts c add1 1))\n    (for ([c (in-string str1)])\n      (when (= (hash-ref char-counts c) 1)\n        (return c)))))\n",
    "  (define (helper str1)\n    (if (null? str1)\n        '()\n        (if (member (car str1) (cdr str1))\n            (helper (cdr str1))\n            (cons (car str1) (helper (cdr str1))))))\n  (if (null? (helper str1))\n      '()\n      (car (helper str1))))\n",
    "  (let ([str2 (string->list str1)])\n    (for/first ([x str2] #:when (not (member x (remove x str2))))\n      x)))\n",
    "  (define (helper str1)\n    (cond\n      [(empty? str1) empty]\n      [(member (first str1) (rest str1)) (helper (rest str1))]\n      [else (cons (first str1) (helper (rest str1)))]))\n  (first (helper str1)))\n",
    "  (define (helper str1 str2)\n    (if (empty? str1)\n        str2\n        (if (member (first str1) (rest str1))\n            (helper (rest str1) str2)\n            (helper (rest str1) (cons (first str1) str2)))))\n  (first (helper str1 '())))\n",
    "  (let ([str2 (string->list str1)]\n        [str3 (list->string str2)]\n        [str4 (string-split str3)])\n    (for/first ([x str4])\n      (if (= 1 (count x str4))\n          x))))\n",
    "  (define (first_non_repeating_character_helper str1 str2)\n    (if (empty? str1)\n        str2\n        (if (member (first str1) (rest str1))\n            (first_non_repeating_character_helper (rest str1) str2)\n            (first_non_repeating_character_helper (rest str1) (string-append str2 (string (first str1)))))))\n  (first_non_repeating_character_helper str1 \"\"))\n",
    "  (define (first_non_repeating_character_helper str1)\n    (if (empty? str1)\n        '()\n        (if (member (first str1) (rest str1))\n            (first_non_repeating_character_helper (rest str1))\n            (cons (first str1) (first_non_repeating_character_helper (rest str1))))))\n  (first (first_non_repeating_character_helper str1)))\n",
    "  (let ([str-list (string->list str1)]\n        [str-set (set str-list)]\n        [str-set-list (set->list str-set)])\n    (for/first ([x str-set-list])\n      (if (= 1 (count x str-list))\n          x))))\n",
    "  (let ([str1 (string->list str1)])\n    (let loop ([str1 str1] [char '()])\n      (cond [(null? str1) char]\n            [(member (car str1) (cdr str1)) (loop (cdr str1) char)]\n            [else (loop (cdr str1) (car str1))]))))\n",
    "  (define (first_non_repeating_character_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (string-contains? str2 (string-ref str1 0))\n            (first_non_repeating_character_helper (substring str1 1) str2)\n            (first_non_repeating_character_helper (substring str1 1) (string-append str2 (string-ref str1 0))))))\n  (first_non_repeating_character_helper str1 \"\"))\n",
    "  (let ([char-counts (make-hash)])\n    (for ([char (in-string str1)])\n      (hash-update char-counts char add1 1))\n    (for ([char (in-string str1)])\n      (when (= (hash-ref char-counts char) 1)\n        (return char)))))\n",
    "  (let ([str1 (string-&gt;list str1)])\n    (for/first ([c str1]\n                #:when (not (member c (remove c str1))))\n      c)))\n",
    "  (let ([str2 (string->list str1)])\n    (for/first ([x str2]\n                #:when (not (member x (rest str2))))\n      x)))\n",
    "  (let loop ([str str1] [i 0])\n    (cond [(empty? str) #f]\n          [(= 1 (count (first str) str)) (first str)]\n          [else (loop (rest str) (+ i 1))])))\n",
    "  (let ([str2 (string->list str1)])\n    (for/first ([c (in-list str2)]\n                #:when (not (member c (rest str2))))\n      c)))\n",
    "  (let ([str2 (string->list str1)])\n    (for/first ([ch (in-list str2)]\n                #:when (not (member ch (remove ch str2))))\n      ch)))\n"
  ]
}