{
  "name": "mbpp_99_decimal_to_binary",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n(define (decimal_to_binary n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_99_decimal_to_binary.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate decimal_to_binary))\n    (check-equal? (candidate 8) \"1000\")\n    (check-equal? (candidate 18) \"10010\")\n    (check-equal? (candidate 7) \"111\")\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond\n    [(= n 0) \"\"]\n    [else (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (define (helper n)\n    (cond\n      [(= n 0) '()]\n      [else (cons (remainder n 2) (helper (quotient n 2)))]))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (if (= n 0)\n      \"\"\n      (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))))\n",
    "  (cond [(= n 0) \"\"]\n        [(= n 1) \"1\"]\n        [else (string-append (decimal_to_binary (quotient n 2))\n                             (number->string (remainder n 2)))]))\n",
    "  (cond\n    [(= n 0) \"\"]\n    [(= n 1) \"1\"]\n    [else (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (zero? n)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (cond ((= n 0) acc)\n          ((= (remainder n 2) 0) (decimal_to_binary_iter (/ n 2) (string-append \"0\" acc)))\n          (else (decimal_to_binary_iter (/ n 2) (string-append \"1\" acc)))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (cond [(zero? n) \"\"]\n        [else (append (decimal_to_binary (quotient n 2))\n                      (number->string (remainder n 2)))]))\n",
    "  (define (helper n)\n    (if (= n 0)\n        \"\"\n        (string-append (helper (quotient n 2)) (number->string (remainder n 2)))))\n  (helper n))\n",
    "  (let loop ([n n] [accumulator \"\"])\n    (cond [(zero? n) accumulator]\n          [else (loop (quotient n 2) (string (remainder n 2) accumulator))])))\n",
    "  (define (helper n)\n    (cond\n      [(= n 0) '()]\n      [else (cons (remainder n 2) (helper (quotient n 2)))]))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (define (helper n acc)\n    (if (= n 0)\n        acc\n        (helper (quotient n 2) (string (remainder n 2)))))\n  (helper n \"\"))\n",
    "  (cond\n    [(zero? n) \"\"]\n    [else\n     (string-append\n      (decimal_to_binary (quotient n 2))\n      (number->string (remainder n 2)))]))\n",
    "  (define (decimal_to_binary_helper n)\n    (if (= n 0)\n        '()\n        (cons (remainder n 2) (decimal_to_binary_helper (quotient n 2)))))\n  (list->string (reverse (decimal_to_binary_helper n))))\n",
    "  (define (helper n)\n    (cond [(= n 0) '()]\n          [else (cons (remainder n 2) (helper (quotient n 2)))]))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (/ n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (/ n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (helper n)\n    (cond\n      [(= n 0) '()]\n      [else (cons (remainder n 2) (helper (quotient n 2)))]))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (define (helper n)\n    (if (= n 0)\n        '()\n        (cons (remainder n 2) (helper (quotient n 2)))))\n  (apply string (reverse (helper n))))\n",
    "  (define (helper n)\n    (cond\n      [(zero? n) '()]\n      [else (cons (remainder n 2) (helper (quotient n 2)))]))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (define (helper n acc)\n    (if (= n 0)\n        acc\n        (helper (quotient n 2) (string (remainder n 2)))))\n  (helper n \"\"))\n",
    "  (if (= n 0)\n      \"\"\n      (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))))\n",
    "  (define (decimal_to_binary_iter n result)\n    (if (= n 0)\n        result\n        (decimal_to_binary_iter (quotient n 2) (string-append (number->string (remainder n 2)) result))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (let loop ([n n] [accumulator \"\"])\n    (cond [(zero? n) accumulator]\n          [else (loop (quotient n 2) (string-append (number->string (remainder n 2)) accumulator))])))\n",
    "  (define (helper n acc)\n    (if (= n 0)\n        acc\n        (helper (quotient n 2) (string (remainder n 2)))))\n  (helper n \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (decimal_to_binary_helper n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_helper (quotient n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_helper n \"\"))\n",
    "  (define (helper n acc)\n    (if (= n 0)\n        acc\n        (helper (quotient n 2) (string (remainder n 2)))))\n  (helper n \"\"))\n",
    "  (cond\n    [(= n 0) \"\"]\n    [(= n 1) \"1\"]\n    [else (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (define (helper n)\n    (if (zero? n)\n        '()\n        (cons (remainder n 2) (helper (quotient n 2)))))\n  (string-&gt;number (list-&gt;string (reverse (helper n)))))\n</code>\nI am trying to write a function that converts a decimal number to its binary equivalent. I am using the helper function to convert the decimal number to a list of its binary digits. I then reverse the list, convert it to a string, and then convert it to a number.\nThe problem is that the function returns a number with a leading zero. For example, if I call <code>(decimal_to_binary 5)</code>, it returns <code>01</code>, but I want it to return <code>1</code>.\nHow can I fix this?\n\n\nA:\n\nYou can use <code>string-trim</code> to remove leading and trailing whitespace from a string.\n<code>(string-trim (list-&gt;string (reverse (helper n))))\n</code>\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (/ n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (decimal-to-binary-iter n)\n    (if (= n 0)\n        '()\n        (cons (remainder n 2) (decimal-to-binary-iter (quotient n 2)))))\n  (define (reverse-list lst)\n    (if (null? lst)\n        '()\n        (append (reverse-list (cdr lst)) (list (car lst)))))\n  (define (list-to-string lst)\n    (if (null? lst)\n        \"\"\n        (string-append (list-to-string (cdr lst)) (number->string (car lst)))))\n  (list-to-string (reverse-list (decimal-to-binary-iter n))))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (/ n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (cond [(= n 0) \"\"]\n        [(= n 1) \"1\"]\n        [else (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (define (helper n)\n    (cond\n      [(= n 0) '()]\n      [else (cons (remainder n 2) (helper (quotient n 2)))]))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (define (helper n)\n    (if (= n 0)\n        \"\"\n        (string-append (helper (quotient n 2)) (number->string (remainder n 2)))))\n  (helper n))\n",
    "  (define (helper n)\n    (cond\n      [(= n 0) '()]\n      [(= n 1) '(1)]\n      [else (cons (remainder n 2) (helper (quotient n 2)))]))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (define (decimal_to_binary_iter n result)\n    (if (= n 0)\n        result\n        (decimal_to_binary_iter (/ n 2) (string-append (number->string (remainder n 2)) result))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (helper n)\n    (if (= n 0)\n        '()\n        (cons (remainder n 2) (helper (quotient n 2)))))\n  (apply string (reverse (helper n))))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (cond [(= n 0) acc]\n          [(= (remainder n 2) 0) (decimal_to_binary_iter (/ n 2) (string-append \"0\" acc))]\n          [else (decimal_to_binary_iter (/ n 2) (string-append \"1\" acc))]))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (helper n)\n    (if (= n 0)\n        '()\n        (cons (remainder n 2) (helper (quotient n 2)))))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (define (helper n)\n    (cond\n      [(zero? n) '()]\n      [else (cons (remainder n 2) (helper (quotient n 2)))]))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (define (helper n)\n    (cond\n      [(= n 0) '()]\n      [else (cons (remainder n 2) (helper (quotient n 2)))]))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (define (iter n result)\n    (cond\n      [(zero? n) result]\n      [else (iter (quotient n 2) (string-append (number->string (remainder n 2)) result))]))\n  (iter n \"\"))\n",
    "  (define (helper n)\n    (if (= n 0)\n        '()\n        (cons (remainder n 2) (helper (quotient n 2)))))\n  (string-&gt;number (apply string-append (reverse (map number-&gt;string (helper n))))))\n</code>\n",
    "  (define (helper n acc)\n    (if (= n 0)\n        acc\n        (helper (quotient n 2) (string (remainder n 2) acc))))\n  (helper n \"\"))\n",
    "  (cond\n    [(zero? n) \"\"]\n    [else (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (define (helper n)\n    (if (= n 0)\n        '()\n        (cons (remainder n 2) (helper (quotient n 2)))))\n  (apply string (reverse (helper n))))\n",
    "  (define (helper n)\n    (if (= n 0)\n        \"\"\n        (string-append (helper (quotient n 2)) (number->string (remainder n 2)))))\n  (helper n))\n",
    "  (cond\n    [(zero? n) \"\"]\n    [else (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (cond\n    [(= n 0) \"\"]\n    [(= n 1) \"1\"]\n    [else (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (define (helper n)\n    (if (= n 0)\n        '()\n        (cons (remainder n 2) (helper (quotient n 2)))))\n  (apply string (reverse (helper n))))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (/ n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (helper n)\n    (cond ((= n 0) '())\n          (else (cons (remainder n 2) (helper (quotient n 2))))))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (define (helper n)\n    (cond\n      [(= n 0) '()]\n      [else (cons (remainder n 2) (helper (quotient n 2)))]))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (zero? n)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string (remainder n 2) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (cond\n    [(= n 0) \"\"]\n    [else (append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (cond [(= n 0) \"\"]\n        [(= n 1) \"1\"]\n        [else (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (define (helper n)\n    (if (= n 0)\n        '()\n        (cons (remainder n 2) (helper (quotient n 2)))))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (define (helper n)\n    (cond\n      [(= n 0) '()]\n      [else (cons (remainder n 2) (helper (quotient n 2)))]))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (cond\n    [(zero? n) \"\"]\n    [else (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (cond\n    [(= n 0) \"\"]\n    [else (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (helper n)\n    (if (= n 0)\n        '()\n        (cons (remainder n 2) (helper (quotient n 2)))))\n  (apply string (reverse (helper n))))\n",
    "  (define (helper n acc)\n    (cond\n      [(zero? n) (string-&gt;list acc)]\n      [else (helper (quotient n 2) (string-append (number-&gt;string (remainder n 2)) acc))]))\n  (list-&gt;string (helper n \"\")))\n",
    "  (define (helper n)\n    (cond [(= n 0) '()]\n          [else (cons (remainder n 2) (helper (quotient n 2)))]))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (cond\n    [(= n 0) \"\"]\n    [else (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (define (helper n)\n    (if (= n 0)\n        '()\n        (cons (remainder n 2) (helper (quotient n 2)))))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (define (helper n)\n    (if (= n 0)\n        \"\"\n        (string-append (helper (quotient n 2)) (number->string (remainder n 2)))))\n  (helper n))\n",
    "  (define (helper n)\n    (if (= n 0)\n        '()\n        (cons (remainder n 2) (helper (quotient n 2)))))\n  (list->string (reverse (helper n))))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (cond\n      [(= n 0) acc]\n      [else (decimal_to_binary_iter (/ n 2) (string-append (number->string (remainder n 2)) acc))]))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (cond\n    [(= n 0) \"\"]\n    [(= n 1) \"1\"]\n    [else (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (define (helper n)\n    (if (= n 0)\n        '()\n        (cons (remainder n 2) (helper (quotient n 2)))))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (if (= n 0)\n      \"\"\n      (string-append (decimal_to_binary (quotient n 2))\n                     (number->string (remainder n 2)))))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (cond\n    [(zero? n) \"\"]\n    [else (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (define (helper n)\n    (cond\n      [(= n 0) '()]\n      [else (cons (remainder n 2) (helper (quotient n 2)))]))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (define (helper n)\n    (cond\n      [(zero? n) '()]\n      [else (cons (remainder n 2) (helper (quotient n 2)))]))\n  (apply string (reverse (helper n))))\n",
    "  (cond\n    [(= n 0) \"\"]\n    [else (string-append (decimal_to_binary (quotient n 2))\n                         (number->string (remainder n 2)))]))\n",
    "  (cond\n    [(= n 0) \"\"]\n    [else (append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (/ n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (cond\n    [(= n 0) \"\"]\n    [else (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (if (= n 0)\n      \"\"\n      (string-append (decimal_to_binary (quotient n 2))\n                     (number->string (remainder n 2)))))\n",
    "  (cond [(= n 0) \"\"]\n        [(= n 1) \"1\"]\n        [else (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (define (helper n acc)\n    (if (zero? n)\n        acc\n        (helper (quotient n 2) (string (remainder n 2) acc))))\n  (helper n \"\"))\n",
    "  (define (decimal_to_binary-iter n acc)\n    (cond [(zero? n) acc]\n          [else (decimal_to_binary-iter (/ n 2) (string (remainder n 2) acc))]))\n  (decimal_to_binary-iter n \"\"))\n",
    "  (define (helper n)\n    (if (= n 0)\n        \"\"\n        (string-append (helper (quotient n 2)) (number->string (remainder n 2)))))\n  (helper n))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (/ n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (helper n)\n    (cond\n      [(= n 0) '()]\n      [else (cons (remainder n 2) (helper (quotient n 2)))]))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (define (helper n)\n    (if (= n 0)\n        '()\n        (cons (remainder n 2) (helper (quotient n 2)))))\n  (apply string (reverse (helper n))))\n",
    "  (define (helper n)\n    (cond [(= n 0) '()]\n          [else (append (helper (quotient n 2)) (list (remainder n 2)))]))\n  (string-join (map number->string (reverse (helper n))) \"\"))\n",
    "  (define (helper n)\n    (if (= n 0)\n        '()\n        (cons (remainder n 2) (helper (quotient n 2)))))\n  (list->string (reverse (helper n))))\n",
    "  (define (helper n)\n    (cond [(= n 0) '()]\n          [else (cons (remainder n 2) (helper (quotient n 2)))]))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (helper n)\n    (cond\n      [(= n 0) '()]\n      [else (cons (remainder n 2) (helper (quotient n 2)))]))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (define (helper n)\n    (cond [(zero? n) '()]\n          [else (cons (remainder n 2) (helper (quotient n 2)))]))\n  (apply string (reverse (helper n))))\n",
    "  (cond [(= n 0) \"\"]\n        [(= n 1) \"1\"]\n        [else (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (cond [(= n 0) \"\"]\n        [(= n 1) \"1\"]\n        [else (string-append (decimal_to_binary (quotient n 2))\n                             (number->string (remainder n 2)))]))\n",
    "  (cond\n    [(= n 0) \"\"]\n    [(= n 1) \"1\"]\n    [else (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (cond\n    [(= n 0) \"\"]\n    [else (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string-append acc (number->string (remainder n 2))))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (cond\n    [(zero? n) \"\"]\n    [else (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (define (helper n)\n    (cond [(= n 0) '()]\n          [(= n 1) '(1)]\n          [else (cons (remainder n 2) (helper (quotient n 2)))]))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (define (iter n acc)\n    (if (= n 0)\n        acc\n        (iter (quotient n 2) (string (remainder n 2) acc))))\n  (iter n \"\"))\n",
    "  (cond\n    [(= n 0) \"\"]\n    [else (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (helper n)\n    (if (= n 0)\n        '()\n        (cons (remainder n 2) (helper (quotient n 2)))))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (cond\n    [(= n 0) \"\"]\n    [(= (remainder n 2) 1) (string-append (decimal_to_binary (quotient n 2)) \"1\")]\n    [else (string-append (decimal_to_binary (quotient n 2)) \"0\")]))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (cond\n    [(= n 0) \"\"]\n    [else (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (iter n acc)\n    (if (= n 0)\n        acc\n        (iter (quotient n 2) (string (remainder n 2) acc))))\n  (iter n \"\"))\n",
    "  (cond [(= n 0) \"\"]\n        [(= n 1) \"1\"]\n        [else (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (define (helper n)\n    (cond\n      [(= n 0) '()]\n      [else (append (helper (quotient n 2)) (list (remainder n 2)))]))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (define (decimal_to_binary-iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary-iter (quotient n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary-iter n \"\"))\n",
    "  (define (helper n)\n    (cond\n      [(= n 0) '()]\n      [else (cons (remainder n 2) (helper (quotient n 2)))]))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (define (helper n)\n    (if (= n 0)\n        '()\n        (cons (remainder n 2) (helper (quotient n 2)))))\n  (list->string (reverse (helper n))))\n",
    "  (cond\n    [(zero? n) \"\"]\n    [else (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string (remainder n 2) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (iter n acc)\n    (if (= n 0)\n        acc\n        (iter (quotient n 2) (string (remainder n 2) acc))))\n  (iter n \"\"))\n",
    "  (define (helper n acc)\n    (cond\n      [(zero? n) (reverse acc)]\n      [else (helper (quotient n 2) (cons (remainder n 2) acc))]))\n  (string-join (map number->string (helper n '())) \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (helper n acc)\n    (if (= n 0)\n        acc\n        (helper (quotient n 2) (string (remainder n 2)))))\n  (helper n \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (helper n)\n    (cond\n      [(= n 0) '()]\n      [else (cons (remainder n 2) (helper (quotient n 2)))]))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (define (helper n acc)\n    (cond\n      [(zero? n) acc]\n      [else (helper (quotient n 2) (string (remainder n 2) acc))]))\n  (helper n \"\"))\n",
    "  (define (helper n)\n    (if (= n 0)\n        '()\n        (cons (remainder n 2) (helper (quotient n 2)))))\n  (apply string (reverse (helper n))))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (cond\n      [(= n 0) (string-join (reverse acc) \"\")]\n      [else (decimal_to_binary_iter (quotient n 2) (cons (number->string (remainder n 2)) acc))]))\n  (decimal_to_binary_iter n '()))\n",
    "  (define (helper n)\n    (if (= n 0)\n        '()\n        (cons (remainder n 2) (helper (quotient n 2)))))\n  (string-&gt;number (list-&gt;string (reverse (helper n)))))\n",
    "  (define (helper n acc)\n    (if (= n 0)\n        acc\n        (helper (quotient n 2) (string (remainder n 2) acc))))\n  (helper n \"\"))\n",
    "  (define (helper n acc)\n    (if (= n 0)\n        acc\n        (helper (quotient n 2) (string (remainder n 2)))))\n  (helper n \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (cond\n      [(zero? n) acc]\n      [else (decimal_to_binary_iter (quotient n 2) (string (remainder n 2) acc))]))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (cond ((= n 0) \"\")\n        ((= n 1) \"1\")\n        (else (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2))))))\n",
    "  (define (helper n)\n    (if (= n 0)\n        '()\n        (cons (remainder n 2) (helper (quotient n 2)))))\n  (string-&gt;number (string-join (reverse (helper n)))))\n",
    "  (cond\n    [(= n 0) \"\"]\n    [else (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (define (helper n)\n    (cond [(= n 0) '()]\n          [else (cons (remainder n 2) (helper (quotient n 2)))]))\n  (string-&gt;number (string-join (reverse (helper n)))))\n",
    "  (define (helper n)\n    (if (= n 0)\n        '()\n        (cons (modulo n 2) (helper (quotient n 2)))))\n  (apply string (reverse (helper n))))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (cond\n    [(= n 0) \"\"]\n    [(= n 1) \"1\"]\n    [else (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (cond\n    [(= n 0) \"\"]\n    [(= n 1) \"1\"]\n    [else (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (cond\n    [(= n 0) \"\"]\n    [else (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (if (= n 0)\n      \"\"\n      (string-append (decimal_to_binary (quotient n 2))\n                     (number->string (remainder n 2)))))\n",
    "  (define (helper n)\n    (cond\n      [(= n 0) '()]\n      [(= n 1) '(1)]\n      [(= n 2) '(1 0)]\n      [(= n 3) '(1 1)]\n      [(= n 4) '(1 0 0)]\n      [(= n 5) '(1 0 1)]\n      [(= n 6) '(1 1 0)]\n      [(= n 7) '(1 1 1)]\n      [(= n 8) '(1 0 0 0)]\n      [(= n 9) '(1 0 0 1)]\n      [(= n 10) '(1 0 1 0)]\n      [(= n 11) '(1 0 1 1)]\n      [(= n 12) '(1 1 0 0)]\n      [(= n 13) '(1 1 0 1)]\n      [(= n 14) '(1 1 1 0)]\n      [(= n 15) '(1 1 1 1)]\n      [(= n 16) '(1 0 0 0 0)]\n      [(= n 17) '(1 0 0 0 1)]\n      [(= n 18) '(1 0 0 1 0)]\n      [(= n 19) '(1 0 0 1 1)]\n      [(= n 20) '(1 0 1 0 0)]\n      [(= n 21) '(1 0 1 0 1)]\n      [(= n 22) '(1 0 1 1 0)]\n      [(= n 23) '(1 0 1 1 1)]\n      [(= n 24) '(1 1 0 0 0)]\n      [(= n 25) '(1 1 0 0 1)]\n      [(= n 26) '(1 1 0 1 0)]\n      [(= n 27) '(1 1 0 1 1)]\n      [(= n 28) '(1 1 1 0 0)]\n      [(= n 29) '(1 1 1 0 1)]\n      [(= n 30) '(1 1 1 1 0)]\n      [(= n 31) '(1 1 1 1 1)]\n      [(= n 32) '(1 0 0 0 0 0)]\n      [(= n 33) '(1 0 0 0 0 1)]\n      [(= n 34) '(1 0 0 0 1 0)]\n      [(= n 35) '(1 0 0 0 1 1)]\n      [(= n 36) '(1 0 0 1 0 0)]\n      [(= n 37",
    "  (define (helper n)\n    (if (= n 0)\n        '()\n        (cons (remainder n 2) (helper (quotient n 2)))))\n  (apply string (reverse (helper n))))\n",
    "  (cond [(= n 0) \"\"]\n        [(= n 1) \"1\"]\n        [else (string-append (decimal_to_binary (quotient n 2))\n                             (number->string (remainder n 2)))]))\n",
    "  (define (decimal_to_binary-iter n acc)\n    (if (zero? n)\n        acc\n        (decimal_to_binary-iter (quotient n 2) (string (remainder n 2) acc))))\n  (decimal_to_binary-iter n \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (cond\n      [(zero? n) acc]\n      [else (decimal_to_binary_iter (quotient n 2) (string (remainder n 2) acc))]))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (helper n acc)\n    (if (= n 0)\n        acc\n        (helper (quotient n 2) (string (remainder n 2)))))\n  (helper n \"\"))\n",
    "  (cond\n    [(= n 0) \"\"]\n    [else (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (helper n)\n    (cond\n      [(= n 0) '()]\n      [else (cons (remainder n 2) (helper (quotient n 2)))]))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (define (helper n)\n    (if (zero? n)\n        '()\n        (cons (remainder n 2) (helper (quotient n 2)))))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (define (decimal-to-binary-iter n acc)\n    (if (= n 0)\n        acc\n        (decimal-to-binary-iter (/ n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal-to-binary-iter n \"\"))\n",
    "  (cond\n    [(= n 0) \"\"]\n    [(= (remainder n 2) 0) (string-append (decimal_to_binary (/ n 2)) \"0\")]\n    [else (string-append (decimal_to_binary (/ n 2)) \"1\")]))\n",
    "  (cond [(= n 0) \"\"]\n        [(= n 1) \"1\"]\n        [else (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (define (helper n)\n    (if (= n 0)\n        '()\n        (cons (remainder n 2) (helper (quotient n 2)))))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (define (helper n)\n    (cond\n      [(= n 0) '()]\n      [else (cons (remainder n 2) (helper (quotient n 2)))]))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (define (iter n acc)\n    (if (zero? n)\n        acc\n        (iter (quotient n 2) (string (remainder n 2) acc))))\n  (iter n \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (helper n acc)\n    (cond [(= n 0) acc]\n          [else (helper (quotient n 2) (string (remainder n 2)))]))\n  (helper n \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (cond [(= n 0) acc]\n          [else (decimal_to_binary_iter (quotient n 2) (string-append acc (number->string (remainder n 2))))]))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (helper n)\n    (cond\n      [(zero? n) '()]\n      [else (cons (remainder n 2) (helper (quotient n 2)))]))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string-append acc (number->string (remainder n 2))))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (helper n)\n    (if (= n 0)\n        '()\n        (cons (remainder n 2) (helper (quotient n 2)))))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (cond\n    [(= n 0) \"\"]\n    [else (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string-append acc (number->string (remainder n 2))))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        (string-&gt;list acc)\n        (decimal_to_binary_iter (quotient n 2) (string-append (number-&gt;string (remainder n 2)) acc))))\n  (list-&gt;string (decimal_to_binary_iter n \"\")))\n",
    "  (define (helper n acc)\n    (if (= n 0)\n        acc\n        (helper (quotient n 2) (string (remainder n 2)))))\n  (helper n \"\"))\n",
    "  (cond\n    [(= n 0) \"\"]\n    [else (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (define (decimal_to_binary_iter n)\n    (cond ((= n 0) '())\n          ((= n 1) '(1))\n          (else (cons (remainder n 2) (decimal_to_binary_iter (quotient n 2))))))\n  (list->string (reverse (decimal_to_binary_iter n))))\n",
    "  (cond\n    [(= n 0) \"\"]\n    [(= n 1) \"1\"]\n    [else (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (cond\n    [(= n 0) \"\"]\n    [(= n 1) \"1\"]\n    [else (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (define (iter n acc)\n    (cond [(zero? n) (reverse acc)]\n          [else (iter (quotient n 2) (cons (remainder n 2) acc))]))\n  (define (remove-leading-zeros lst)\n    (cond [(null? lst) lst]\n          [(zero? (car lst)) (remove-leading-zeros (cdr lst))]\n          [else lst]))\n  (list->string (remove-leading-zeros (iter n '()))))\n",
    "  (cond [(= n 0) \"\"]\n        [(= n 1) \"1\"]\n        [else (string-append (decimal_to_binary (quotient n 2))\n                             (number->string (remainder n 2)))]))\n",
    "  (define (helper n acc)\n    (if (= n 0)\n        acc\n        (helper (quotient n 2) (string (remainder n 2)))))\n  (helper n \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string (remainder n 2) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (helper n)\n    (if (= n 0)\n        '()\n        (cons (remainder n 2) (helper (quotient n 2)))))\n  (apply string (reverse (helper n))))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (helper n)\n    (cond [(= n 0) '()]\n          [else (cons (remainder n 2) (helper (quotient n 2)))]))\n  (string-&gt;number (string-join (reverse (helper n)))))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (zero? n)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string (remainder n 2) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (decimal_to_binary-iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary-iter (quotient n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary-iter n \"\"))\n",
    "  (cond [(zero? n) \"\"]\n        [else (append (decimal_to_binary (quotient n 2))\n                      (number->string (remainder n 2)))]))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string (remainder n 2)))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (decimal_to_binary_iter n result)\n    (if (= n 0)\n        result\n        (decimal_to_binary_iter (/ n 2) (string-append (number->string (remainder n 2)) result))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (helper n)\n    (cond [(= n 0) '()]\n          [(= n 1) '(1)]\n          [else (cons (modulo n 2) (helper (quotient n 2)))]))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (cond\n    [(zero? n) \"\"]\n    [else (append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (cond\n    [(= n 0) \"\"]\n    [(= (remainder n 2) 0) (decimal_to_binary (/ n 2))]\n    [else (string-append (decimal_to_binary (/ n 2)) \"1\")]))\n",
    "  (define (helper n)\n    (cond\n      [(= n 0) '()]\n      [else (cons (remainder n 2) (helper (quotient n 2)))]))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (define (helper n acc)\n    (cond\n      [(= n 0) acc]\n      [(= n 1) (string-append \"1\" acc)]\n      [else (helper (quotient n 2) (string-append (number->string (remainder n 2)) acc))]))\n  (helper n \"\"))\n",
    "  (define (helper n)\n    (cond [(= n 0) '()]\n          [else (cons (remainder n 2) (helper (quotient n 2)))]))\n  (string-&gt;number (apply string-append (reverse (helper n)))))\n"
  ]
}