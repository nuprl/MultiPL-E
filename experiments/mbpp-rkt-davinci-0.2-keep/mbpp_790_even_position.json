{
  "name": "mbpp_790_even_position",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_790_even_position.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (even-position-iter nums even-pos)\n    (if (null? nums)\n        even-pos\n        (if (even? (car nums))\n            (even-position-iter (cdr nums) (cons (car nums) even-pos))\n            (even-position-iter (cdr nums) even-pos))))\n  (even-position-iter nums '()))\n",
    "  (if (empty? nums)\n      true\n      (if (even? (remainder (length nums) 2))\n          (if (even? (first nums))\n              (even_position (rest nums))\n              false)\n          (even_position (rest nums)))))\n",
    "  (if (null? nums)\n      #t\n      (if (even? (remainder (car nums) 2))\n          (even_position (cdr nums))\n          #f)))\n",
    "  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2)) (even? (car nums))]\n    [else (even_position (cdr nums))]))\n",
    "  (cond\n    [(empty? nums) true]\n    [(even? (remainder (first nums) 2)) (even_position (rest nums))]\n    [else false]))\n",
    "  (define (even-position-iter nums pos)\n    (if (null? nums)\n        #t\n        (if (even? pos)\n            (if (even? (car nums))\n                (even-position-iter (cdr nums) (+ pos 1))\n                #f)\n            (even-position-iter (cdr nums) (+ pos 1)))))\n  (even-position-iter nums 0))\n",
    "  (define (even_position_iter nums i)\n    (if (null? nums)\n        #t\n        (if (even? i)\n            (if (even? (car nums))\n                (even_position_iter (cdr nums) (+ i 1))\n                #f)\n            (even_position_iter (cdr nums) (+ i 1)))))\n  (even_position_iter nums 0))\n",
    "  (define (even_position_iter nums i)\n    (cond\n      [(empty? nums) true]\n      [(even? i) (and (even? (first nums)) (even_position_iter (rest nums) (+ i 1)))]\n      [else (even_position_iter (rest nums) (+ i 1))]))\n  (even_position_iter nums 0))\n",
    "  (let loop ([nums nums] [i 0])\n    (if (null? nums)\n        #t\n        (if (even? i)\n            (if (even? (car nums))\n                (loop (cdr nums) (+ i 1))\n                #f)\n            (loop (cdr nums) (+ i 1))))))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(even? (remainder (length nums) 2))\n     (cons (first nums) (even_position (rest nums)))]\n    [else (even_position (rest nums))]))\n",
    "  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2)) (even? (first nums))]\n    [else (even_position (rest nums))]))\n",
    "  (if (empty? nums)\n      true\n      (if (even? (remainder (length nums) 2))\n          (if (even? (first nums))\n              (even_position (rest nums))\n              false)\n          (even_position (rest nums)))))\n",
    "  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n",
    "  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2)) (even? (first nums))]\n    [else (even_position (rest nums))]))\n",
    "  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n",
    "  (define (even? num)\n    (= (remainder num 2) 0))\n  (define (even-position? nums)\n    (cond\n      [(empty? nums) true]\n      [(even? (first nums)) (even-position? (rest nums))]\n      [else false]))\n  (even-position? nums))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(even? (remainder (length nums) 2))\n     (cons (first nums) (even_position (rest nums)))]\n    [else (even_position (rest nums))]))\n",
    "  (even? (car nums)))\n",
    "  (define (even-position-iter nums i)\n    (if (empty? nums)\n        #t\n        (if (= (remainder i 2) 0)\n            (if (even? (first nums))\n                (even-position-iter (rest nums) (+ i 1))\n                #f)\n            (even-position-iter (rest nums) (+ i 1)))))\n  (even-position-iter nums 0))\n",
    "  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n"
  ]
}