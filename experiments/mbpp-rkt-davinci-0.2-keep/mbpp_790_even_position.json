{
  "name": "mbpp_790_even_position",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_790_even_position.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (even-position-iter nums even-pos)\n    (if (null? nums)\n        even-pos\n        (if (even? (car nums))\n            (even-position-iter (cdr nums) (cons (car nums) even-pos))\n            (even-position-iter (cdr nums) even-pos))))\n  (even-position-iter nums '()))\n",
    "  (if (empty? nums)\n      true\n      (if (even? (remainder (length nums) 2))\n          (if (even? (first nums))\n              (even_position (rest nums))\n              false)\n          (even_position (rest nums)))))\n",
    "  (if (null? nums)\n      #t\n      (if (even? (remainder (car nums) 2))\n          (even_position (cdr nums))\n          #f)))\n",
    "  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2)) (even? (car nums))]\n    [else (even_position (cdr nums))]))\n",
    "  (cond\n    [(empty? nums) true]\n    [(even? (remainder (first nums) 2)) (even_position (rest nums))]\n    [else false]))\n",
    "  (define (even-position-iter nums pos)\n    (if (null? nums)\n        #t\n        (if (even? pos)\n            (if (even? (car nums))\n                (even-position-iter (cdr nums) (+ pos 1))\n                #f)\n            (even-position-iter (cdr nums) (+ pos 1)))))\n  (even-position-iter nums 0))\n",
    "  (define (even_position_iter nums i)\n    (if (null? nums)\n        #t\n        (if (even? i)\n            (if (even? (car nums))\n                (even_position_iter (cdr nums) (+ i 1))\n                #f)\n            (even_position_iter (cdr nums) (+ i 1)))))\n  (even_position_iter nums 0))\n",
    "  (define (even_position_iter nums i)\n    (cond\n      [(empty? nums) true]\n      [(even? i) (and (even? (first nums)) (even_position_iter (rest nums) (+ i 1)))]\n      [else (even_position_iter (rest nums) (+ i 1))]))\n  (even_position_iter nums 0))\n",
    "  (let loop ([nums nums] [i 0])\n    (if (null? nums)\n        #t\n        (if (even? i)\n            (if (even? (car nums))\n                (loop (cdr nums) (+ i 1))\n                #f)\n            (loop (cdr nums) (+ i 1))))))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(even? (remainder (length nums) 2))\n     (cons (first nums) (even_position (rest nums)))]\n    [else (even_position (rest nums))]))\n",
    "  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2)) (even? (first nums))]\n    [else (even_position (rest nums))]))\n",
    "  (if (empty? nums)\n      true\n      (if (even? (remainder (length nums) 2))\n          (if (even? (first nums))\n              (even_position (rest nums))\n              false)\n          (even_position (rest nums)))))\n",
    "  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n",
    "  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2)) (even? (first nums))]\n    [else (even_position (rest nums))]))\n",
    "  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n",
    "  (define (even? num)\n    (= (remainder num 2) 0))\n  (define (even-position? nums)\n    (cond\n      [(empty? nums) true]\n      [(even? (first nums)) (even-position? (rest nums))]\n      [else false]))\n  (even-position? nums))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(even? (remainder (length nums) 2))\n     (cons (first nums) (even_position (rest nums)))]\n    [else (even_position (rest nums))]))\n",
    "  (even? (car nums)))\n",
    "  (define (even-position-iter nums i)\n    (if (empty? nums)\n        #t\n        (if (= (remainder i 2) 0)\n            (if (even? (first nums))\n                (even-position-iter (rest nums) (+ i 1))\n                #f)\n            (even-position-iter (rest nums) (+ i 1)))))\n  (even-position-iter nums 0))\n",
    "  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n",
    "  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n",
    "  (define (even_position_iter nums i)\n    (cond\n      [(empty? nums) true]\n      [(even? i) (and (even? (first nums)) (even_position_iter (rest nums) (+ i 1)))]\n      [else (even_position_iter (rest nums) (+ i 1))]))\n  (even_position_iter nums 0))\n",
    "  (if (empty? nums)\n      true\n      (if (even? (remainder (length nums) 2))\n          (even? (first nums))\n          (even_position (rest nums)))))\n",
    "  (define (even_position-iter nums i)\n    (if (null? nums)\n        #t\n        (if (= (modulo i 2) 0)\n            (if (even? (car nums))\n                (even_position-iter (cdr nums) (+ i 1))\n                #f)\n            (even_position-iter (cdr nums) (+ i 1)))))\n  (even_position-iter nums 0))\n",
    "  (if (empty? nums)\n      #t\n      (if (even? (remainder (length nums) 2))\n          (if (even? (first nums))\n              (even_position (rest nums))\n              #f)\n          (even_position (rest nums)))))\n",
    "  (cond\n    [(empty? nums) true]\n    [(even? (remainder (first nums) 2)) (even_position (rest nums))]\n    [else false]))\n",
    "  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n",
    "  (even? (car nums)))\n",
    "  (define (even_position_iter nums index)\n    (if (null? nums)\n        #t\n        (if (= (modulo index 2) 0)\n            (if (even? (car nums))\n                (even_position_iter (cdr nums) (+ index 1))\n                #f)\n            (even_position_iter (cdr nums) (+ index 1)))))\n  (even_position_iter nums 0))\n",
    "  (define (even_position-helper nums i)\n    (if (= i (length nums))\n        #t\n        (if (= (remainder (list-ref nums i) 2) 0)\n            (even_position-helper nums (+ i 1))\n            #f)))\n  (even_position-helper nums 0))\n",
    "  (if (empty? nums)\n      #t\n      (if (even? (remainder (length nums) 2))\n          (even? (car nums))\n          (even_position (cdr nums)))))\n",
    "  (let loop ([nums nums] [i 0])\n    (if (null? nums)\n        #t\n        (if (zero? (modulo i 2))\n            (if (even? (car nums))\n                (loop (cdr nums) (+ i 1))\n                #f)\n            (loop (cdr nums) (+ i 1))))))\n",
    "  (if (empty? nums)\n      #t\n      (if (even? (remainder (length nums) 2))\n          (if (even? (first nums))\n              (even_position (rest nums))\n              #f)\n          (even_position (rest nums)))))\n",
    "  (define (even-position-iter nums pos)\n    (cond\n      [(empty? nums) true]\n      [(even? pos) (and (even? (first nums)) (even-position-iter (rest nums) (+ pos 1)))]\n      [else (even-position-iter (rest nums) (+ pos 1))]))\n  (even-position-iter nums 0))\n",
    "  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n",
    "  (if (empty? nums)\n      true\n      (if (even? (remainder (length nums) 2))\n          (even? (first nums))\n          (even_position (rest nums)))))\n",
    "  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2)) (even? (first nums))]\n    [else (even_position (rest nums))]))\n",
    "  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n",
    "  (define (even-position-iter nums index)\n    (if (null? nums)\n        #t\n        (if (= (remainder (car nums) 2) 0)\n            (if (= (remainder index 2) 0)\n                (even-position-iter (cdr nums) (+ index 1))\n                #f)\n            (even-position-iter (cdr nums) (+ index 1)))))\n  (even-position-iter nums 0))\n",
    "  (cond\n    [(empty? nums) #t]\n    [else (and (even? (first nums)) (even_position (rest nums)))]))\n",
    "  (define (even_position_iter nums index)\n    (if (null? nums)\n        #t\n        (if (even? index)\n            (if (even? (car nums))\n                (even_position_iter (cdr nums) (+ index 1))\n                #f)\n            (even_position_iter (cdr nums) (+ index 1)))))\n  (even_position_iter nums 0))\n",
    "  (if (null? nums)\n      #t\n      (if (even? (remainder (car nums) 2))\n          (even_position (cdr nums))\n          #f)))\n",
    "  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n",
    "  (cond\n    [(empty? nums) true]\n    [(even? (remainder (first nums) 2)) (even_position (rest nums))]\n    [else false]))\n",
    "  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n",
    "  (define (even_position_iter nums i)\n    (cond\n      [(empty? nums) true]\n      [(even? i) (and (even? (first nums)) (even_position_iter (rest nums) (+ i 1)))]\n      [else (even_position_iter (rest nums) (+ i 1))]))\n  (even_position_iter nums 0))\n",
    "  (define (even? n)\n    (= (remainder n 2) 0))\n  (define (even-position? nums)\n    (cond\n      [(empty? nums) #t]\n      [(even? (first nums)) (even-position? (rest nums))]\n      [else #f]))\n  (even-position? (rest nums)))\n",
    "  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2)) (even? (first nums))]\n    [else (even_position (rest nums))]))\n",
    "  (define (even? num)\n    (= (remainder num 2) 0))\n  (define (even-position? nums)\n    (if (null? nums)\n        #t\n        (if (even? (car nums))\n            (even-position? (cdr nums))\n            #f)))\n  (even-position? nums))\n",
    "  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n",
    "  (define (even_position_iter nums index)\n    (if (null? nums)\n        #t\n        (if (and (even? index) (even? (car nums)))\n            (even_position_iter (cdr nums) (+ index 1))\n            #f)))\n  (even_position_iter nums 0))\n",
    "  (define (even_position_iter nums index)\n    (cond\n      [(empty? nums) true]\n      [(= (remainder (first nums) 2) 0)\n       (even_position_iter (rest nums) (+ index 1))]\n      [(= (remainder index 2) 0)\n       false]\n      [else\n       (even_position_iter (rest nums) (+ index 1))]))\n  (even_position_iter nums 0))\n",
    "  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2)) (even? (first nums))]\n    [else (even_position (rest nums))]))\n",
    "  (define (even_position_iter nums i)\n    (if (null? nums)\n        #t\n        (if (and (even? i) (even? (car nums)))\n            (even_position_iter (cdr nums) (+ i 1))\n            #f)))\n  (even_position_iter nums 0))\n",
    "  (define (even_position_helper nums index)\n    (cond\n      [(empty? nums) true]\n      [(even? index) (and (even? (first nums)) (even_position_helper (rest nums) (+ index 1)))]\n      [else (even_position_helper (rest nums) (+ index 1))]))\n  (even_position_helper nums 0))\n",
    "  (let loop ([nums nums] [even? #t])\n    (if (null? nums)\n        even?\n        (if (even? (car nums))\n            (loop (cdr nums) even?)\n            (loop (cdr nums) #f)))))\n",
    "  (define (helper nums i)\n    (if (null? nums)\n        #t\n        (if (and (even? i) (even? (car nums)))\n            (helper (cdr nums) (+ i 1))\n            #f)))\n  (helper nums 0))\n",
    "  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n",
    "  (cond\n    [(empty? nums) true]\n    [(even? (remainder (length nums) 2))\n     (and (even? (first nums))\n          (even_position (rest nums)))]\n    [else\n     (and (odd? (first nums))\n          (even_position (rest nums)))]))\n",
    "  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n",
    "  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n",
    "  (cond\n    [(empty? nums) true]\n    [(even? (remainder (length nums) 2))\n     (and (even? (first nums)) (even_position (rest nums)))]\n    [else (even_position (rest nums))]))\n",
    "  (for/and ([num nums]\n            #:when (even? (remainder (index nums num) 2)))\n    (even? num)))\n",
    "  (cond\n    [(empty? nums) true]\n    [(even? (remainder (length nums) 2)) (even? (first nums))]\n    [else (even_position (rest nums))]))\n",
    "  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n",
    "  (define (even-index? nums)\n    (cond\n      [(empty? nums) empty]\n      [(even? (first nums)) (cons (first nums) (even-index? (rest nums)))]\n      [else (even-index? (rest nums))]))\n  (define (even? nums)\n    (cond\n      [(empty? nums) empty]\n      [(even? (first nums)) (cons (first nums) (even? (rest nums)))]\n      [else (even? (rest nums))]))\n  (even? (even-index? nums)))\n",
    "  (define (even-position-iter nums i)\n    (cond ((null? nums) #t)\n          ((= (remainder i 2) 0)\n           (and (even? (car nums))\n                (even-position-iter (cdr nums) (+ i 1))))\n          (else (even-position-iter (cdr nums) (+ i 1)))))\n  (even-position-iter nums 0))\n",
    "  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2)) (even? (first nums))]\n    [else (even_position (rest nums))]))\n",
    "  (define (even_position_iter nums i)\n    (if (empty? nums)\n        #t\n        (if (even? i)\n            (if (even? (first nums))\n                (even_position_iter (rest nums) (+ i 1))\n                #f)\n            (even_position_iter (rest nums) (+ i 1)))))\n  (even_position_iter nums 0))\n",
    "  (for/and ([n nums]\n            #:when (even? n))\n    (even? (remainder (index nums n) 2))))\n",
    "  (cond\n    [(empty? nums) #t]\n    [(even? (first nums)) (even_position (rest nums))]\n    [else #f]))\n",
    "  (define (even_position_iter nums i)\n    (if (null? nums)\n        #t\n        (if (= (remainder i 2) 0)\n            (if (even? (car nums))\n                (even_position_iter (cdr nums) (+ i 1))\n                #f)\n            (even_position_iter (cdr nums) (+ i 1)))))\n  (even_position_iter nums 0))\n",
    "  (cond\n    [(empty? nums) true]\n    [(even? (remainder (length nums) 2))\n     (and (even? (car nums))\n          (even_position (cdr nums)))]\n    [else (and (odd? (car nums))\n               (even_position (cdr nums)))]))\n",
    "  (if (empty? nums)\n      #t\n      (if (even? (remainder (length nums) 2))\n          (even? (first nums))\n          (even_position (rest nums)))))\n",
    "  (cond\n    [(empty? nums) true]\n    [(even? (remainder (length nums) 2))\n     (and (even? (first nums)) (even_position (rest nums)))]\n    [else\n     (and (odd? (first nums)) (even_position (rest nums)))]))\n",
    "  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n",
    "  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2)) (even? (car nums))]\n    [else (even_position (cdr nums))]))\n",
    "  (define (even_position_iter nums i)\n    (cond\n      [(empty? nums) true]\n      [(even? i)\n       (if (even? (first nums))\n           (even_position_iter (rest nums) (+ i 1))\n           false)]\n      [else (even_position_iter (rest nums) (+ i 1))]))\n  (even_position_iter nums 0))\n",
    "  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2)) (even? (car nums))]\n    [else (even_position (cdr nums))]))\n",
    "  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2)) (even? (first nums))]\n    [else (even_position (rest nums))]))\n",
    "  (define (helper nums i)\n    (if (empty? nums)\n        #t\n        (if (even? i)\n            (if (even? (first nums))\n                (helper (rest nums) (+ i 1))\n                #f)\n            (helper (rest nums) (+ i 1)))))\n  (helper nums 0))\n",
    "  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2)) (even? (first nums))]\n    [else (even_position (rest nums))]))\n",
    "  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2)) (even? (first nums))]\n    [else (even_position (rest nums))]))\n",
    "  (define (even_position_iter nums i)\n    (if (empty? nums)\n        true\n        (if (even? i)\n            (if (even? (first nums))\n                (even_position_iter (rest nums) (+ i 1))\n                false)\n            (even_position_iter (rest nums) (+ i 1)))))\n  (even_position_iter nums 0))\n",
    "  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n",
    "  (define (even-position-iter nums pos)\n    (if (null? nums)\n        #t\n        (if (even? pos)\n            (if (even? (car nums))\n                (even-position-iter (cdr nums) (+ pos 1))\n                #f)\n            (even-position-iter (cdr nums) (+ pos 1)))))\n  (even-position-iter nums 0))\n",
    "  (define (even_position_iter nums index)\n    (cond ((null? nums) #t)\n          ((even? index) (and (even? (car nums)) (even_position_iter (cdr nums) (+ index 1))))\n          (else (even_position_iter (cdr nums) (+ index 1)))))\n  (even_position_iter nums 0))\n",
    "  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2)) (even? (first nums))]\n    [else (even_position (rest nums))]))\n",
    "  (define (even_position_iter nums index)\n    (cond ((null? nums) #t)\n          ((= (modulo index 2) 0)\n           (and (even? (car nums))\n                (even_position_iter (cdr nums) (+ index 1))))\n          (else (even_position_iter (cdr nums) (+ index 1)))))\n  (even_position_iter nums 0))\n",
    "  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n",
    "  (define (even? n) (= (remainder n 2) 0))\n  (define (even-index? nums)\n    (cond\n      [(empty? nums) true]\n      [(even? (first nums)) (even-index? (rest nums))]\n      [else false]))\n  (even-index? (rest nums)))\n",
    "  (define (even-index? nums)\n    (if (null? nums)\n        #t\n        (if (even? (car nums))\n            (even-index? (cdr nums))\n            #f)))\n  (even-index? nums))\n",
    "  (for/and ([num (in-list nums)]\n            [i (in-naturals)])\n    (and (even? i) (even? num))))\n",
    "  (define (even_position_iter nums i)\n    (if (null? nums)\n        #t\n        (if (= (modulo i 2) 0)\n            (if (even? (car nums))\n                (even_position_iter (cdr nums) (+ i 1))\n                #f)\n            (even_position_iter (cdr nums) (+ i 1)))))\n  (even_position_iter nums 0))\n",
    "  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n",
    "  (define (even_position_iter nums index)\n    (if (null? nums)\n        #t\n        (if (and (even? index) (even? (car nums)))\n            (even_position_iter (cdr nums) (+ index 1))\n            #f)))\n  (even_position_iter nums 0))\n",
    "  (define (even_position_iter nums index)\n    (cond ((null? nums) #t)\n          ((and (even? index) (even? (car nums)))\n           (even_position_iter (cdr nums) (+ index 1)))\n          ((and (even? index) (odd? (car nums))) #f)\n          (else (even_position_iter (cdr nums) (+ index 1)))))\n  (even_position_iter nums 0))\n",
    "  (define (helper nums index)\n    (cond\n      [(empty? nums) true]\n      [(even? index) (and (even? (first nums)) (helper (rest nums) (+ index 1)))]\n      [else (helper (rest nums) (+ index 1))]))\n  (helper nums 0))\n",
    "  (for/and ([num nums]\n            #:when (even? (remainder num 2)))\n    (even? num)))\n",
    "  (define (even? n) (= (remainder n 2) 0))\n  (define (even-position? nums)\n    (cond ((null? nums) #t)\n          ((even? (car nums)) (even-position? (cdr nums)))\n          (else #f)))\n  (even-position? nums))\n",
    "  (define (even-index? nums)\n    (cond\n      [(empty? nums) #t]\n      [(even? (first nums)) (even-index? (rest nums))]\n      [else #f]))\n  (even-index? (rest nums)))\n",
    "  (define (even_position_iter nums i)\n    (cond\n      [(empty? nums) true]\n      [(even? i) (and (even? (first nums)) (even_position_iter (rest nums) (+ i 1)))]\n      [else (even_position_iter (rest nums) (+ i 1))]))\n  (even_position_iter nums 0))\n",
    "  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n",
    "  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2)) (even? (car nums))]\n    [else (even_position (cdr nums))]))\n",
    "  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2))\n     (and (even? (first nums))\n          (even_position (rest nums)))]\n    [else #f]))\n",
    "  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n",
    "  (andmap (lambda (x) (even? x)) (range 0 (length nums) 2)))\n",
    "  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2))\n     (and (even? (first nums))\n          (even_position (rest nums)))]\n    [else (even_position (rest nums))]))\n",
    "  (define (even_position_iter nums index)\n    (if (null? nums)\n        #t\n        (if (even? index)\n            (if (even? (car nums))\n                (even_position_iter (cdr nums) (+ index 1))\n                #f)\n            (even_position_iter (cdr nums) (+ index 1)))))\n  (even_position_iter nums 0))\n",
    "  (define (even_position_iter nums i)\n    (cond\n      [(empty? nums) true]\n      [(even? i)\n       (and (even? (first nums))\n            (even_position_iter (rest nums) (+ i 1)))]\n      [else (even_position_iter (rest nums) (+ i 1))]))\n  (even_position_iter nums 0))\n",
    "  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2)) (even? (first nums))]\n    [else (even_position (rest nums))]))\n",
    "  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2))\n     (and (even? (first nums))\n          (even_position (rest nums)))]\n    [else #f]))\n",
    "  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n",
    "  (define (even_position_iter nums i)\n    (cond\n      [(empty? nums) true]\n      [(even? i) (and (even? (first nums)) (even_position_iter (rest nums) (+ i 1)))]\n      [else (even_position_iter (rest nums) (+ i 1))]))\n  (even_position_iter nums 0))\n",
    "  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n",
    "  (define (even_position_iter nums i)\n    (if (null? nums)\n        #t\n        (if (even? i)\n            (if (even? (car nums))\n                (even_position_iter (cdr nums) (+ i 1))\n                #f)\n            (even_position_iter (cdr nums) (+ i 1)))))\n  (even_position_iter nums 0))\n",
    "  (define (helper nums index)\n    (if (null? nums)\n        #t\n        (if (= (remainder index 2) 0)\n            (if (even? (car nums))\n                (helper (cdr nums) (+ index 1))\n                #f)\n            (helper (cdr nums) (+ index 1)))))\n  (helper nums 0))\n",
    "  (define (even-index? nums)\n    (if (null? nums)\n        #t\n        (if (even? (car nums))\n            (even-index? (cdr nums))\n            #f)))\n  (even-index? (filter even? nums)))\n",
    "  (define (helper nums index)\n    (if (null? nums)\n        #t\n        (if (= (modulo index 2) 0)\n            (if (even? (car nums))\n                (helper (cdr nums) (+ index 1))\n                #f)\n            (helper (cdr nums) (+ index 1)))))\n  (helper nums 0))\n",
    "  (if (empty? nums)\n      true\n      (if (even? (remainder (length nums) 2))\n          (even? (car nums))\n          (even_position (cdr nums)))))\n",
    "  (let loop ([nums nums] [i 0])\n    (cond [(empty? nums) true]\n          [(even? i) (and (even? (first nums)) (loop (rest nums) (+ i 1)))]\n          [else (loop (rest nums) (+ i 1))])))\n",
    "  (if (empty? nums)\n      '()\n      (if (even? (remainder (length nums) 2))\n          (cons (first nums) (even_position (rest nums)))\n          (even_position (rest nums)))))\n",
    "  (cond\n    [(empty? nums) true]\n    [(even? (remainder (length nums) 2))\n     (and (even? (first nums)) (even_position (rest nums)))]\n    [else (even_position (rest nums))]))\n",
    "  (define (even-position-iter nums pos)\n    (if (null? nums)\n        #t\n        (if (even? pos)\n            (if (even? (car nums))\n                (even-position-iter (cdr nums) (+ pos 1))\n                #f)\n            (even-position-iter (cdr nums) (+ pos 1)))))\n  (even-position-iter nums 0))\n",
    "  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n",
    "  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2))\n     (and (even? (first nums)) (even_position (rest nums)))]\n    [else (even_position (rest nums))]))\n",
    "  (cond\n    [(empty? nums) true]\n    [(even? (remainder (first nums) 2))\n     (even_position (rest nums))]\n    [else false]))\n",
    "  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2)) (even? (first nums))]\n    [else (even_position (rest nums))]))\n",
    "  (define (even-position-iter nums index)\n    (if (null? nums)\n        #t\n        (if (even? index)\n            (if (even? (car nums))\n                (even-position-iter (cdr nums) (+ index 1))\n                #f)\n            (even-position-iter (cdr nums) (+ index 1)))))\n  (even-position-iter nums 0))\n",
    "  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n",
    "  (define (even_position_iter nums i)\n    (if (null? nums)\n        #t\n        (if (and (even? i) (even? (car nums)))\n            (even_position_iter (cdr nums) (+ i 1))\n            #f)))\n  (even_position_iter nums 0))\n",
    "  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n",
    "  (define (even_position_iter nums pos)\n    (cond\n      [(empty? nums) true]\n      [(even? pos) (and (even? (first nums)) (even_position_iter (rest nums) (+ pos 1)))]\n      [else (even_position_iter (rest nums) (+ pos 1))]))\n  (even_position_iter nums 0))\n",
    "  (define (even_position_iter nums index)\n    (cond\n      [(empty? nums) true]\n      [(even? index)\n       (and (even? (first nums)) (even_position_iter (rest nums) (+ index 1)))]\n      [else (even_position_iter (rest nums) (+ index 1))]))\n  (even_position_iter nums 0))\n",
    "  (define (even-position-iter nums index)\n    (if (null? nums)\n        #t\n        (if (and (even? index) (even? (car nums)))\n            (even-position-iter (cdr nums) (+ index 1))\n            #f)))\n  (even-position-iter nums 0))\n",
    "  (for/and ([n (in-list nums)]\n            [i (in-naturals)])\n    (even? n)))\n",
    "  (define (even_position_iter nums i)\n    (if (null? nums)\n        #t\n        (if (= (modulo i 2) 0)\n            (if (even? (car nums))\n                (even_position_iter (cdr nums) (+ i 1))\n                #f)\n            (even_position_iter (cdr nums) (+ i 1)))))\n  (even_position_iter nums 0))\n",
    "  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2)) (even? (first nums))]\n    [else (even_position (rest nums))]))\n",
    "  (define (even? n)\n    (= (remainder n 2) 0))\n  (define (even-position? nums)\n    (cond\n      [(empty? nums) #t]\n      [(even? (first nums)) (even-position? (rest nums))]\n      [else #f]))\n  (even-position? (rest nums)))\n",
    "  (define (helper nums index)\n    (if (empty? nums)\n        #t\n        (if (even? index)\n            (if (even? (first nums))\n                (helper (rest nums) (+ index 1))\n                #f)\n            (helper (rest nums) (+ index 1)))))\n  (helper nums 0))\n",
    "  (define (helper nums pos)\n    (if (null? nums)\n        #t\n        (if (= (remainder pos 2) 0)\n            (if (even? (car nums))\n                (helper (cdr nums) (+ pos 1))\n                #f)\n            (helper (cdr nums) (+ pos 1)))))\n  (helper nums 0))\n",
    "  (define (even? n)\n    (= (remainder n 2) 0))\n  (define (even-position? nums)\n    (if (null? nums)\n        #t\n        (if (even? (car nums))\n            (even-position? (cdr nums))\n            #f)))\n  (even-position? nums))\n",
    "  (define (helper nums i)\n    (if (null? nums)\n        #t\n        (if (even? i)\n            (if (even? (car nums))\n                (helper (cdr nums) (+ i 1))\n                #f)\n            (helper (cdr nums) (+ i 1)))))\n  (helper nums 0))\n",
    "  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n",
    "  (define (even? n)\n    (= (remainder n 2) 0))\n  (define (even-position? nums)\n    (cond\n      [(empty? nums) #t]\n      [(even? (first nums)) (even-position? (rest nums))]\n      [else #f]))\n  (even-position? (rest nums)))\n",
    "  (define (helper nums pos)\n    (if (null? nums)\n        #t\n        (if (= (remainder pos 2) 0)\n            (if (even? (car nums))\n                (helper (cdr nums) (+ pos 1))\n                #f)\n            (helper (cdr nums) (+ pos 1)))))\n  (helper nums 0))\n",
    "  (define (even_position_iter nums index)\n    (if (null? nums)\n        #t\n        (if (= (modulo (car nums) 2) 0)\n            (if (= (modulo index 2) 0)\n                (even_position_iter (cdr nums) (+ index 1))\n                #f)\n            (even_position_iter (cdr nums) (+ index 1)))))\n  (even_position_iter nums 0))\n",
    "  (define (even_position_iter nums i)\n    (cond ((null? nums) #t)\n          ((even? i) (and (even? (car nums)) (even_position_iter (cdr nums) (+ i 1))))\n          (else (even_position_iter (cdr nums) (+ i 1)))))\n  (even_position_iter nums 0))\n",
    "  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n",
    "  (define (even_position_iter nums i)\n    (cond ((null? nums) #t)\n          ((even? i) (and (even? (car nums)) (even_position_iter (cdr nums) (+ i 1))))\n          (else (even_position_iter (cdr nums) (+ i 1)))))\n  (even_position_iter nums 0))\n",
    "  (cond\n    [(null? nums) #t]\n    [(even? (car nums)) (even_position (cdr nums))]\n    [else #f]))\n",
    "  (let loop ([nums nums] [i 0])\n    (if (null? nums)\n        #t\n        (if (and (even? i) (even? (car nums)))\n            (loop (cdr nums) (+ i 1))\n            #f))))\n",
    "  (define (helper nums i)\n    (cond\n      [(empty? nums) true]\n      [(even? i) (and (even? (first nums)) (helper (rest nums) (+ i 1)))]\n      [else (helper (rest nums) (+ i 1))]))\n  (helper nums 0))\n",
    "  (define (even-index? nums)\n    (if (empty? nums)\n        #t\n        (if (even? (remainder (length nums) 2))\n            (if (even? (first nums))\n                (even-index? (rest nums))\n                #f)\n            (even-index? (rest nums)))))\n  (even-index? nums))\n",
    "  (define (even-index? nums)\n    (if (null? nums)\n        #t\n        (if (even? (car nums))\n            (even-index? (cdr nums))\n            #f)))\n  (even-index? (cdr nums)))\n",
    "  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n",
    "  (cond\n    [(empty? nums) true]\n    [(even? (remainder (length nums) 2))\n     (and (even? (first nums))\n          (even_position (rest nums)))]\n    [else\n     (and (odd? (first nums))\n          (even_position (rest nums)))]))\n",
    "  (define (even_position_iter nums i)\n    (if (null? nums)\n        #t\n        (if (= (remainder i 2) 0)\n            (if (even? (car nums))\n                (even_position_iter (cdr nums) (+ i 1))\n                #f)\n            (even_position_iter (cdr nums) (+ i 1)))))\n  (even_position_iter nums 0))\n",
    "  (define (even? n)\n    (= (remainder n 2) 0))\n  (define (even-position? nums)\n    (cond\n      [(empty? nums) #t]\n      [(even? (first nums)) (even-position? (rest nums))]\n      [else #f]))\n  (even-position? (rest nums)))\n",
    "  (define (even-index? nums)\n    (if (null? nums)\n        #t\n        (if (even? (car nums))\n            (even-index? (cdr nums))\n            #f)))\n  (even-index? (cdr nums)))\n",
    "  (cond\n    [(empty? nums) true]\n    [(even? (remainder (first nums) 2)) (even_position (rest nums))]\n    [else false]))\n",
    "  (let loop ([nums nums] [i 0])\n    (if (null? nums)\n        #t\n        (if (= 0 (modulo i 2))\n            (if (even? (car nums))\n                (loop (cdr nums) (+ i 1))\n                #f)\n            (loop (cdr nums) (+ i 1))))))\n",
    "  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2))\n     (and (even? (car nums))\n          (even_position (cdr nums)))]\n    [else (even_position (cdr nums))]))\n",
    "  (define (even? n)\n    (= (remainder n 2) 0))\n  (define (even-position? nums)\n    (cond [(empty? nums) #t]\n          [(even? (first nums)) (even-position? (rest nums))]\n          [else #f]))\n  (even-position? (rest nums)))\n",
    "  (if (empty? nums)\n      true\n      (if (even? (remainder (length nums) 2))\n          (if (even? (first nums))\n              (even_position (rest nums))\n              false)\n          (even_position (rest nums)))))\n",
    "  (if (empty? nums)\n      #t\n      (if (even? (remainder (length nums) 2))\n          (even? (first nums))\n          (even_position (rest nums)))))\n",
    "  (define (even_position_iter nums i)\n    (cond\n      [(empty? nums) true]\n      [(even? i)\n       (and (even? (first nums))\n            (even_position_iter (rest nums) (+ i 1)))]\n      [else (even_position_iter (rest nums) (+ i 1))]))\n  (even_position_iter nums 0))\n",
    "  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2)) (even? (first nums))]\n    [else (even_position (rest nums))]))\n",
    "  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n",
    "  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2))\n     (even? (car nums))]\n    [else\n     (even_position (cdr nums))]))\n",
    "  (for/and ([(n i) (in-indexed nums)])\n    (even? i)\n    (even? n)))\n",
    "  (define (even-index? nums)\n    (cond\n      [(empty? nums) empty]\n      [(even? (first nums)) (cons (first nums) (even-index? (rest nums)))]\n      [else (even-index? (rest nums))]))\n  (define (even-num? nums)\n    (cond\n      [(empty? nums) empty]\n      [(even? (first nums)) (cons (first nums) (even-num? (rest nums)))]\n      [else (even-num? (rest nums))]))\n  (equal? (even-index? nums) (even-num? nums)))\n",
    "  (define (even_position_iter nums i)\n    (if (null? nums)\n        #t\n        (if (= (modulo i 2) 0)\n            (if (even? (car nums))\n                (even_position_iter (cdr nums) (+ i 1))\n                #f)\n            (even_position_iter (cdr nums) (+ i 1)))))\n  (even_position_iter nums 0))\n",
    "  (define (even_position_iter nums i)\n    (cond\n      [(empty? nums) true]\n      [(even? i) (and (even? (first nums)) (even_position_iter (rest nums) (+ i 1)))]\n      [else (even_position_iter (rest nums) (+ i 1))]))\n  (even_position_iter nums 0))\n",
    "  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2)) (even? (first nums))]\n    [else (even_position (rest nums))]))\n",
    "  (define (helper nums i)\n    (if (null? nums)\n        #t\n        (if (= (remainder i 2) 0)\n            (if (even? (car nums))\n                (helper (cdr nums) (+ i 1))\n                #f)\n            (helper (cdr nums) (+ i 1)))))\n  (helper nums 0))\n",
    "  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2))\n     (and (even? (first nums))\n          (even_position (rest nums)))]\n    [else #f]))\n",
    "  (cond\n    [(empty? nums) true]\n    [(even? (remainder (length nums) 2)) (even? (car nums))]\n    [else (even_position (cdr nums))]))\n",
    "  (if (null? nums)\n      true\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          false)))\n",
    "  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n",
    "  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n",
    "  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2)) (even? (car nums))]\n    [else (even_position (cdr nums))]))\n",
    "  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n",
    "  (let loop ((nums nums)\n             (i 0))\n    (cond ((null? nums) #t)\n          ((= (remainder i 2) 0)\n           (and (even? (car nums))\n                (loop (cdr nums) (+ i 1))))\n          (else (loop (cdr nums) (+ i 1))))))\n",
    "  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2)) (even? (car nums))]\n    [else (even_position (cdr nums))]))\n",
    "  (cond\n    [(empty? nums) true]\n    [(even? (remainder (length nums) 2))\n     (and (even? (first nums)) (even_position (rest nums)))]\n    [else (even_position (rest nums))]))\n</code>\n",
    "  (cond\n    [(empty? nums) empty]\n    [else\n     (cons (first nums) (even_position (rest nums)))]))\n",
    "  (let loop ([nums nums] [i 0])\n    (if (null? nums)\n        #t\n        (if (and (even? i) (even? (car nums)))\n            (loop (cdr nums) (+ i 1))\n            #f))))\n",
    "  (define (even_position_iter nums i)\n    (cond\n      [(empty? nums) true]\n      [(even? i) (and (even? (first nums)) (even_position_iter (rest nums) (+ i 1)))]\n      [else (even_position_iter (rest nums) (+ i 1))]))\n  (even_position_iter nums 0))\n",
    "  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n",
    "  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2)) #f]\n    [else (even_position (rest nums))]))\n",
    "  (define (helper nums i)\n    (cond\n      [(empty? nums) #t]\n      [(even? i) (and (even? (first nums)) (helper (rest nums) (+ i 1)))]\n      [else (helper (rest nums) (+ i 1))]))\n  (helper nums 0))\n",
    "  (if (empty? nums)\n      true\n      (if (even? (remainder (length nums) 2))\n          (even? (first nums))\n          (even_position (rest nums)))))\n",
    "  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2)) #f]\n    [else (even_position (rest nums))]))\n",
    "  (define (even_position_iter nums pos)\n    (if (null? nums)\n        #t\n        (if (even? pos)\n            (if (even? (car nums))\n                (even_position_iter (cdr nums) (+ pos 1))\n                #f)\n            (even_position_iter (cdr nums) (+ pos 1)))))\n  (even_position_iter nums 0))\n",
    "  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2)) (even? (car nums))]\n    [else (even_position (cdr nums))]))\n",
    "  (if (empty? nums)\n      #t\n      (if (even? (first nums))\n          (even_position (rest nums))\n          #f)))\n",
    "  (let loop ([nums nums] [i 0])\n    (if (null? nums)\n        #t\n        (if (and (even? i) (even? (car nums)))\n            (loop (cdr nums) (+ i 1))\n            #f))))\n",
    "  (define (even_position-helper nums i)\n    (if (empty? nums)\n        #t\n        (if (= (remainder i 2) 0)\n            (if (even? (first nums))\n                (even_position-helper (rest nums) (+ i 1))\n                #f)\n            (even_position-helper (rest nums) (+ i 1)))))\n  (even_position-helper nums 0))\n",
    "  (define (even? n) (= (remainder n 2) 0))\n  (define (even-position? nums)\n    (cond\n      [(null? nums) #t]\n      [(even? (car nums)) (even-position? (cdr nums))]\n      [else #f]))\n  (even-position? (cdr nums)))\n"
  ]
}