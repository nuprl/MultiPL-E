{
  "name": "mbpp_113_check_integer",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to check if a string represents an integer or not.\n(define (check_integer text)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_113_check_integer.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_integer))\n    (check-equal? (candidate \"python\") #f)\n    (check-equal? (candidate \"1\") #t)\n    (check-equal? (candidate \"12345\") #t)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond\n    [(string=? text \"\") #f]\n    [(string-&gt;number text) #t]\n    [else #f]))\n",
    "  (and (string? text)\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\s))))\n",
    "  (and (not (empty? text))\n       (not (member (string-ref text 0) '(#\\+ #\\-)))\n       (for/and ([c (in-string text)])\n         (char-numeric? c))))\n",
    "  (let ((len (string-length text)))\n    (if (and (not (string=? text \"\"))\n             (not (string=? text \"-\"))\n             (not (string=? text \"+\"))\n             (not (string=? text \".\"))\n             (not (string=? text \"..\"))\n             (not (string=? text \"...\"))\n             (not (string=? text \"....\"))\n             (not (string=? text \".....\"))\n             (not (string=? text \"......\"))\n             (not (string=? text \".......\"))\n             (not (string=? text \"........\"))\n             (not (string=? text \".........\"))\n             (not (string=? text \"..........\"))\n             (not (string=? text \"...........\"))\n             (not (string=? text \"............\"))\n             (not (string=? text \".............\"))\n             (not (string=? text \"..............\"))\n             (not (string=? text \"...............\"))\n             (not (string=? text \"................\"))\n             (not (string=? text \".................\"))\n             (not (string=? text \"..................\"))\n             (not (string=? text \"...................\"))\n             (not (string=? text \"....................\"))\n             (not (string=? text \".....................\"))\n             (not (string=? text \"......................\"))\n             (not (string=? text \".......................\"))\n             (not (string=? text \"........................\"))\n             (not (string=? text \".........................\"))\n             (not (string=? text \".......................\"))\n             (not (string=? text \"..........................\"))\n             (not (string=? text \"...........................\"))\n             (not (string=? text \"............................\"))\n             (not (string=? text \".............................\"))\n             (not (string=? text \"..............................\"))\n             (not (string=? text \"...............................\"))\n             (not (string=? text \"................................\"))\n             (not (string=? text \".................................\"))\n             (not (string=? text \"..................................\"))\n             (not (string=? text",
    "  (let ([n (string->number text)])\n    (and (number? n) (integer? n))))\n",
    "  (and (string? text)\n       (not (string-empty? text))\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\i))\n       (not (string-contains text #\\I))\n       (not (string-contains text #\\j))\n       (not (string-contains text #\\J))\n       (not (string-contains text #\\n))\n       (not (string-contains text #\\N))\n       (not (string-contains text #\\o))\n       (not (string-contains text #\\O))\n       (not (string-contains text #\\s))\n       (not (string-contains text #\\S))\n       (not (string-contains text #\\x))\n       (not (string-contains text #\\X))\n       (not (string-contains text #\\z))\n       (not (string-contains text #\\Z))\n       (not (string-contains text #\\_))\n       (not (string-contains text #\\$))\n       (not (string-contains text #\\!))\n       (not (string-contains text #\\@))\n       (not (string-contains text #\\#))\n       (not (string-contains text #\\%))\n       (not (string-contains text #\\^))\n       (not (string-contains text #\\&))\n       (not (string-contains text #\\*))\n       (not (string-contains text #\\()))\n       (not (string-contains text #\\)))\n",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string-&gt;number text) #t]\n    [else #f]))\n",
    "  (if (string=? text \"\")\n      #f\n      (if (char-numeric? (string-ref text 0))\n          (check_integer (substring text 1))\n          #f)))\n",
    "  (and (not (string=? text \"\"))\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\newline))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\rubout))\n       (not (string-contains text #\\page))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\nul))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\linefeed))\n       (not (string-contains text #\\vtab))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\esc))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\rubout))\n       (not (string-contains text #\\nul))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\linefeed))\n       (not (string-contains text #\\vtab))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\esc))\n       (not (string-contains text #\\space))\n       (not (string-contains text",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (- (string-length text) 1))))))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (- (string-length text) 1))))))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (- (string-length text) 1))))\n       (for/and ([char (in-string text)])\n         (char-numeric? char))))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (sub1 (string-length text)))))))\n",
    "  (if (string-&gt;number text)\n      (display \"It's an integer\")\n      (display \"It's not an integer\")))\n",
    "  (let ((len (string-length text)))\n    (cond\n      ((= len 0) #f)\n      ((= len 1) (char-numeric? (string-ref text 0)))\n      ((char-numeric? (string-ref text 0))\n       (check_integer (substring text 1 len)))\n      (else #f))))\n",
    "  (cond\n    [(string=? text \"\") #t]\n    [(string-contains text #\\.) #f]\n    [(string-contains text #\\e) #f]\n    [(string-contains text #\\E) #f]\n    [(string-contains text #\\+) #f]\n    [(string-contains text #\\-) #f]\n    [else #t]))\n",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string=? (substring text 0 1) \"-\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"+\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"0\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"1\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"2\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"3\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"4\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"5\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"6\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"7\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"8\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"9\") (check_integer (substring text 1))]\n    [else #f]))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (- (string-length text) 1))))))\n",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string-ref text 0) (check_integer (substring text 1))]\n    [else #t]))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (- (string-length text) 1))))))\n",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string=? (substring text 0 1) \"-\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"+\")\n     (check_integer (substring text 1))]\n    [(string-contains text #\\.) #f]\n    [(string-contains text #\\e) #f]\n    [(string-contains text #\\E) #f]\n    [(string-contains text #\\+) #f]\n    [(string-contains text #\\-) #f]\n    [else #t]))\n",
    "  (cond\n    [(string=? text \"\") #t]\n    [(string-contains text #\\0) #f]\n    [(string-contains text #\\1) #f]\n    [(string-contains text #\\2) #f]\n    [(string-contains text #\\3) #f]\n    [(string-contains text #\\4) #f]\n    [(string-contains text #\\5) #f]\n    [(string-contains text #\\6) #f]\n    [(string-contains text #\\7) #f]\n    [(string-contains text #\\8) #f]\n    [(string-contains text #\\9) #f]\n    [else #t]))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (sub1 (string-length text)))))))\n",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string=? (substring text 0 1) \"-\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"+\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"0\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"1\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"2\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"3\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"4\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"5\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"6\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"7\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"8\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"9\") (check_integer (substring text 1))]\n    [else #f]))\n",
    "  (and (not (empty? text))\n       (andmap char-numeric? text)))\n",
    "  (and (string? text)\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\x))\n       (not (string-contains text #\\X))\n       (not (string-contains text #\\o))\n       (not (string-contains text #\\O))\n       (not (string-contains text #\\b))\n       (not (string-contains text #\\B))\n       (not (string-contains text #\\a))\n       (not (string-contains text #\\A))\n       (not (string-contains text #\\f))\n       (not (string-contains text #\\F))\n       (not (string-contains text #\\d))\n       (not (string-contains text #\\D))\n       (not (string-contains text #\\s))\n       (not (string-contains text #\\S))\n       (not (string-contains text #\\w))\n       (not (string-contains text #\\W))\n       (not (string-contains text #\\p))\n       (not (string-contains text #\\P))\n       (not (string-contains text #\\h))\n       (not (string-contains text #\\H))\n       (not (string-contains text #\\v))\n       (not (string-contains text #\\V))\n       (not (string-contains text #\\n))\n       (not (string-contains text #\\r))\n       (not (string-contains text #\\t))\n       (not (string-contains text #\\f))\n       (not (string-contains text #\\a))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\c))\n       (not (string-contains text #\\x))\n       (not (string-contains text #\\u))))",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (- (string-length text) 1))))))\n",
    "  (and (string? text)\n       (not (empty? text))\n       (not (regexp-match #rx\"^[-+]?[0-9]+$\" text))))\n",
    "  (let ([text (string-&gt;number text)])\n    (if (integer? text)\n        text\n        #f)))\n",
    "  (and (string? text)\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\newline))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\rubout))\n       (not (string-contains text #\\page))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\nul))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\linefeed))\n       (not (string-contains text #\\vtab))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\esc))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\delete))))\n</code>\nI'm not sure if I'm missing any characters, but I think this covers most of the bases.  I'm also not sure if there's a better way to do this.  I'm not sure if there's a way to check if a string contains any characters other than the ones I want.  I'm also not sure if there's a way to check if a string contains any characters in a list.\nI'm also not sure if there's a way to check if a string contains any characters other than the ones I want.  I'm also not sure if there's a way to check if a string contains any characters in a list.\nI'm also not sure if there's a way to check if a string contains any characters other than",
    "  (define (check-integer-helper text)\n    (cond\n      [(empty? text) true]\n      [(char-numeric? (first text)) (check-integer-helper (rest text))]\n      [else false]))\n  (check-integer-helper text))\n",
    "  (and (not (empty? text))\n       (every (lambda (c) (char-numeric? c)) text)))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (for/and ([c (in-string text)])\n         (char-numeric? c))))\n",
    "  (if (string-&gt;number text)\n      (display \"True\")\n      (display \"False\")))\n",
    "  (and (string? text)\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\x))\n       (not (string-contains text #\\X))\n       (not (string-contains text #\\o))\n       (not (string-contains text #\\O))\n       (not (string-contains text #\\b))\n       (not (string-contains text #\\B))\n       (not (string-contains text #\\a))\n       (not (string-contains text #\\A))\n       (not (string-contains text #\\f))\n       (not (string-contains text #\\F))\n       (not (string-contains text #\\d))\n       (not (string-contains text #\\D))\n       (not (string-contains text #\\s))\n       (not (string-contains text #\\S))\n       (not (string-contains text #\\w))\n       (not (string-contains text #\\W))\n       (not (string-contains text #\\p))\n       (not (string-contains text #\\P))\n       (not (string-contains text #\\h))\n       (not (string-contains text #\\H))\n       (not (string-contains text #\\v))\n       (not (string-contains text #\\V))\n       (not (string-contains text #\\n))\n       (not (string-contains text #\\r))\n       (not (string-contains text #\\t))\n       (not (string-contains text #\\f))\n       (not (string-contains text #\\a))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\c))\n       (not (string-contains text #\\C))\n       (not (string-contains text #\\\\))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (sub1 (string-length text)))))))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (- (string-length text) 1))))))\n",
    "  (and (string? text)\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\_))\n       (not (string-contains text #\\,))\n       (not (string-contains text #\\:))\n       (not (string-contains text #\\;))\n       (not (string-contains text #\\!))\n       (not (string-contains text #\\@))\n       (not (string-contains text #\\#))\n       (not (string-contains text #\\$))\n       (not (string-contains text #\\%))\n       (not (string-contains text #\\^))\n       (not (string-contains text #\\&))\n       (not (string-contains text #\\*))\n       (not (string-contains text #\\( ))\n       (not (string-contains text #\\)))\n       (not (string-contains text #\\[))\n       (not (string-contains text #\\]))\n       (not (string-contains text #\\{))\n       (not (string-contains text #\\}))\n       (not (string-contains text #\\|))\n       (not (string-contains text #\\\\))\n       (not (string-contains text #\\/))\n       (not (string-contains text #\\?))\n       (not (string-contains text #\\<))\n       (not (string-contains text #\\>))\n       (not (string-contains text #\\`))\n       (not (string-contains text #\\'))\n       (not (string-contains text #\\\"))\n       (not (string-contains text #\\~))\n       (not (string-contains text #\\ ))\n       (not (string-contains text #\\ ))\n       (not (string-contains text #\\ ))\n       (not (string-contains",
    "  (if (string=? text \"\")\n      #f\n      (let ((first-char (string-ref text 0)))\n        (if (or (char=? first-char #\\+)\n                (char=? first-char #\\-))\n            (check_integer (substring text 1))\n            (if (char-numeric? first-char)\n                (check_integer (substring text 1))\n                #f)))))\n",
    "  (and (not (null? text))\n       (not (member (string-&gt;symbol (string-&gt;list text)) '(+ -)))\n       (not (member (string-&gt;symbol (string-&gt;list text)) '(+ - .)))\n       (not (member (string-&gt;symbol (string-&gt;list text)) '(+ - . 0)))\n       (not (member (string-&gt;symbol (string-&gt;list text)) '(+ - . 0 1)))\n       (not (member (string-&gt;symbol (string-&gt;list text)) '(+ - . 0 1 2)))\n       (not (member (string-&gt;symbol (string-&gt;list text)) '(+ - . 0 1 2 3)))\n       (not (member (string-&gt;symbol (string-&gt;list text)) '(+ - . 0 1 2 3 4)))\n       (not (member (string-&gt;symbol (string-&gt;list text)) '(+ - . 0 1 2 3 4 5)))\n       (not (member (string-&gt;symbol (string-&gt;list text)) '(+ - . 0 1 2 3 4 5 6)))\n       (not (member (string-&gt;symbol (string-&gt;list text)) '(+ - . 0 1 2 3 4 5 6 7)))\n       (not (member (string-&gt;symbol (string-&gt;list text)) '(+ - . 0 1 2 3 4 5 6 7 8)))\n       (not (member (string-&gt;symbol (string-&gt;list text)) '(+ - . 0 1 2 3 4 5 6 7 8 9)))\n       (not (member (string-&gt;symbol (string-&gt;list text)) '(+ - . 0 1 2 3 4 5 6 7 8 9 .)))\n       (not (member (string-&gt;symbol (string-&gt;list text)) '(+ - . 0 1 2 3 4 5 6 7 8 9 . 0)))\n       (not (member (string-&gt;symbol (string-&gt;list text)) '(+ - . 0 1 2 3 4",
    "  (if (string-&gt;number text)\n      (display \"It is an integer\")\n      (display \"It is not an integer\")))\n",
    "  (let ((n (string->number text)))\n    (and (not (nan? n)) (integer? n))))\n",
    "  (regexp-match? #rx\"^[-+]?[0-9]+$\" text))\n",
    "  (and (string? text)\n       (not (empty? text))\n       (not (member (string-ref text 0) '(#\\+ #\\-)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #",
    "  (regexp-match? #rx\"^[-+]?[0-9]+$\" text))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (- (string-length text) 1))))))\n",
    "  (and (string? text)\n       (not (string-empty? text))\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\x))\n       (not (string-contains text #\\X))\n       (not (string-contains text #\\o))\n       (not (string-contains text #\\O))\n       (not (string-contains text #\\b))\n       (not (string-contains text #\\B))))\n",
    "  (cond\n    [(string=? text \"\") #t]\n    [(string=? (substring text 0 1) \"-\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"+\") (check_integer (substring text 1))]\n    [(string-ci=? (substring text 0 1) \"0\") (check_integer (substring text 1))]\n    [(string-ci=? (substring text 0 1) \"1\") (check_integer (substring text 1))]\n    [(string-ci=? (substring text 0 1) \"2\") (check_integer (substring text 1))]\n    [(string-ci=? (substring text 0 1) \"3\") (check_integer (substring text 1))]\n    [(string-ci=? (substring text 0 1) \"4\") (check_integer (substring text 1))]\n    [(string-ci=? (substring text 0 1) \"5\") (check_integer (substring text 1))]\n    [(string-ci=? (substring text 0 1) \"6\") (check_integer (substring text 1))]\n    [(string-ci=? (substring text 0 1) \"7\") (check_integer (substring text 1))]\n    [(string-ci=? (substring text 0 1) \"8\") (check_integer (substring text 1))]\n    [(string-ci=? (substring text 0 1) \"9\") (check_integer (substring text 1))]\n    [else #f]))\n",
    "  (if (string=? text \"\")\n      #f\n      (if (char-numeric? (string-ref text 0))\n          (check_integer (substring text 1))\n          #f)))\n",
    "  (if (string-&gt;number text)\n      (display \"It is an integer.\")\n      (display \"It is not an integer.\")))\n</code>\nI'm getting the following error:\n<code>check_integer: expects argument of type &lt;string&gt;; given \"123\"\n</code>\nI'm not sure what's wrong with my code.\n\n\nA:\n\nYou're using the wrong function. <code>string-&gt;number</code> returns a number, not a boolean. You want <code>string-&gt;integer</code> instead.\n<code>(define (check_integer text)\n  (if (string-&gt;integer text)\n      (display \"It is an integer.\")\n      (display \"It is not an integer.\")))\n</code>\n",
    "  (and (string? text)\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\x))\n       (not (string-contains text #\\X))\n       (not (string-contains text #\\o))\n       (not (string-contains text #\\O))\n       (not (string-contains text #\\b))\n       (not (string-contains text #\\B))\n       (not (string-contains text #\\a))\n       (not (string-contains text #\\A))\n       (not (string-contains text #\\f))\n       (not (string-contains text #\\F))\n       (not (string-contains text #\\d))\n       (not (string-contains text #\\D))\n       (not (string-contains text #\\s))\n       (not (string-contains text #\\S))\n       (not (string-contains text #\\w))\n       (not (string-contains text #\\W))\n       (not (string-contains text #\\p))\n       (not (string-contains text #\\P))\n       (not (string-contains text #\\h))\n       (not (string-contains text #\\H))\n       (not (string-contains text #\\v))\n       (not (string-contains text #\\V))\n       (not (string-contains text #\\n))\n       (not (string-contains text #\\r))\n       (not (string-contains text #\\t))\n       (not (string-contains text #\\f))\n       (not (string-contains text #\\a))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\0))\n       (not (string-contains text #\\1))\n       (not (string-contains text #\\2))",
    "  (cond\n    [(string=? text \"\") #t]\n    [(string=? (substring text 0 1) \"-\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"+\")\n     (check_integer (substring text 1))]\n    [(string-ci=? (substring text 0 1) \"0\")\n     (check_integer (substring text 1))]\n    [(string-ci=? (substring text 0 1) \"1\")\n     (check_integer (substring text 1))]\n    [(string-ci=? (substring text 0 1) \"2\")\n     (check_integer (substring text 1))]\n    [(string-ci=? (substring text 0 1) \"3\")\n     (check_integer (substring text 1))]\n    [(string-ci=? (substring text 0 1) \"4\")\n     (check_integer (substring text 1))]\n    [(string-ci=? (substring text 0 1) \"5\")\n     (check_integer (substring text 1))]\n    [(string-ci=? (substring text 0 1) \"6\")\n     (check_integer (substring text 1))]\n    [(string-ci=? (substring text 0 1) \"7\")\n     (check_integer (substring text 1))]\n    [(string-ci=? (substring text 0 1) \"8\")\n     (check_integer (substring text 1))]\n    [(string-ci=? (substring text 0 1) \"9\")\n     (check_integer (substring text 1))]\n    [else #f]))\n",
    "  (and (not (null? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (- (string-length text) 1))))))\n",
    "  (and (string? text)\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\)))))\n",
    "  (and (string? text)\n       (not (empty? text))\n       (not (member (string-ref text 0) '(#\\+ #\\-)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #",
    "  (define (check-integer-helper text)\n    (cond ((null? text) #t)\n          ((char-numeric? (car text)) (check-integer-helper (cdr text)))\n          (else #f)))\n  (check-integer-helper (string->list text)))\n",
    "  (define (check-integer-helper text)\n    (cond\n      [(empty? text) true]\n      [(char-numeric? (first text)) (check-integer-helper (rest text))]\n      [else false]))\n  (check-integer-helper text))\n",
    "  (and (string? text)\n       (not (empty? text))\n       (not (member (string-ref text 0) '(#\\+ #\\-)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (for/and ([c (in-string text)])\n         (char-numeric? c))))\n",
    "  (define (check-integer-helper text)\n    (if (null? text)\n        #t\n        (if (or (char=? (car text) #\\0)\n                (char=? (car text) #\\1)\n                (char=? (car text) #\\2)\n                (char=? (car text) #\\3)\n                (char=? (car text) #\\4)\n                (char=? (car text) #\\5)\n                (char=? (car text) #\\6)\n                (char=? (car text) #\\7)\n                (char=? (car text) #\\8)\n                (char=? (car text) #\\9))\n            (check-integer-helper (cdr text))\n            #f)))\n  (if (or (char=? (car text) #\\-)\n          (char=? (car text) #\\+))\n      (check-integer-helper (cdr text))\n      (check-integer-helper text)))\n",
    "  (if (string=? text \"\")\n      #f\n      (if (char-numeric? (string-ref text 0))\n          (check_integer (substring text 1))\n          #f)))\n",
    "  (define (check-integer-helper text)\n    (cond\n      ((null? text) #t)\n      ((char-numeric? (car text)) (check-integer-helper (cdr text)))\n      (else #f)))\n  (check-integer-helper (string->list text)))\n",
    "  (and (string? text)\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\x))\n       (not (string-contains text #\\X))\n       (not (string-contains text #\\o))\n       (not (string-contains text #\\O))\n       (not (string-contains text #\\b))\n       (not (string-contains text #\\B))\n       (not (string-contains text #\\a))\n       (not (string-contains text #\\A))\n       (not (string-contains text #\\d))\n       (not (string-contains text #\\D))\n       (not (string-contains text #\\i))\n       (not (string-contains text #\\I))\n       (not (string-contains text #\\f))\n       (not (string-contains text #\\F))\n       (not (string-contains text #\\l))\n       (not (string-contains text #\\L))))\n",
    "  (and (string? text)\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\x))\n       (not (string-contains text #\\X))\n       (not (string-contains text #\\o))\n       (not (string-contains text #\\O))\n       (not (string-contains text #\\b))\n       (not (string-contains text #\\B))))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (sub1 (string-length text)))))))\n",
    "  (if (string=? text \"\")\n      #f\n      (if (string-contains text #\\.)\n          #f\n          (if (string-contains text #\\e)\n              #f\n              (if (string-contains text #\\E)\n                  #f\n                  #t)))))\n",
    "  (and (not (string-null? text))\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\newline))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\linefeed))\n       (not (string-contains text #\\page))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\rubout))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\nul))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\vtab))\n       (not (string-contains text #\\formfeed))))\n",
    "  (and (string? text)\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\newline))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\linefeed))\n       (not (string-contains text #\\page))\n       (not (string-contains text #\\formfeed))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\rubout))\n       (not (string-contains text #\\vtab))\n       (not (string-contains text #\\esc))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\nul))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\linefeed))\n       (not (string-contains text #\\vtab))\n       (not (string-contains text #\\page))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\esc))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\rubout))\n       (not (string-contains text #\\nul))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\linefeed))\n       (not (string-contains text #\\",
    "  (and (string? text)\n       (not (string-empty? text))\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\,))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\newline))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\rubout))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\null))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\rubout))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\null))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\rubout))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\null))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\rubout))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\null))\n       (not (string-contains text #\\alarm))\n       (not",
    "  (let ([text (string-&gt;number text)])\n    (and (number? text) (integer? text))))\n",
    "  (if (string-&gt;number text)\n      (display \"It is an integer\")\n      (display \"It is not an integer\")))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (- (string-length text) 1))))\n       (for/and ([c (in-string text)])\n         (char-numeric? c))))\n",
    "  (and (string? text)\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\,))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\newline))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\rubout))\n       (not (string-contains text #\\page))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\nul))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\linefeed))\n       (not (string-contains text #\\vtab))\n       (not (string-contains text #\\page))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\esc))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\del))))\n",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string=? (substring text 0 1) \"-\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"+\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"0\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"1\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"2\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"3\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"4\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"5\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"6\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"7\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"8\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"9\") (check_integer (substring text 1))]\n    [else #f]))\n</code>\nI'm not sure if this is the best way to do it, but it works.\n\n\nA:\n\nYou can use <code>string-&gt;number</code> to check if a string represents an integer.\n<code>(string-&gt;number \"123\")\n=&gt; 123",
    "  (and (string? text)\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\x))\n       (not (string-contains text #\\X))\n       (not (string-contains text #\\o))\n       (not (string-contains text #\\O))))\n",
    "  (if (string-&gt;number text)\n      (display \"It's an integer\")\n      (display \"It's not an integer\")))\n",
    "  (if (string-&gt;number text)\n      (display \"It's an integer\")\n      (display \"It's not an integer\")))\n",
    "  (and (not (string=? text \"\"))\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\x))\n       (not (string-contains text #\\X))\n       (not (string-contains text #\\o))\n       (not (string-contains text #\\O))\n       (not (string-contains text #\\b))\n       (not (string-contains text #\\B))\n       (not (string-contains text #\\i))\n       (not (string-contains text #\\I))\n       (not (string-contains text #\\a))\n       (not (string-contains text #\\A))\n       (not (string-contains text #\\n))\n       (not (string-contains text #\\N))\n       (not (string-contains text #\\r))\n       (not (string-contains text #\\R))\n       (not (string-contains text #\\f))\n       (not (string-contains text #\\F))\n       (not (string-contains text #\\t))\n       (not (string-contains text #\\T))\n       (not (string-contains text #\\v))\n       (not (string-contains text #\\V))\n       (not (string-contains text #\\c))\n       (not (string-contains text #\\C))\n       (not (string-contains text #\\d))\n       (not (string-contains text #\\D))\n       (not (string-contains text #\\s))\n       (not (string-contains text #\\S))\n       (not (string-contains text #\\w))\n       (not (string-contains text #\\W))\n       (not (string-contains text #\\p))\n       (not (string-contains text #\\P))\n       (not (string-contains text",
    "  (and (string? text)\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\,))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\newline))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\linefeed))\n       (not (string-contains text #\\page))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\rubout))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\null))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\vtab))\n       (not (string-contains text #\\formfeed))\n       (not (string-contains text #\\nul))\n       (not (string-contains text #\\soh))\n       (not (string-contains text #\\stx))\n       (not (string-contains text #\\etx))\n       (not (string-contains text #\\eot))\n       (not (string-contains text #\\enq))\n       (not (string-contains text #\\ack))\n       (not (string-contains text #\\bel))\n       (not (string-contains text #\\bs))\n       (not (string-contains text #\\ht))\n       (not (string-contains text #\\lf))\n       (not (string-contains text #\\vt))\n       (not (string-contains text #\\ff))\n       (not (string-contains text #\\cr))",
    "  (regexp-match? #rx\"^[0-9]+$\" text))\n",
    "  (cond\n    [(string=? text \"\") #t]\n    [(char-numeric? (string-ref text 0)) (check_integer (substring text 1))]\n    [else #f]))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (andmap char-numeric? text)))\n",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string=? (substring text 0 1) \"-\")\n     (check_integer (substring text 1 (string-length text)))]\n    [(string=? (substring text 0 1) \"+\")\n     (check_integer (substring text 1 (string-length text)))]\n    [(string-contains text #\\.) #f]\n    [(string-contains text #\\e) #f]\n    [(string-contains text #\\E) #f]\n    [else (andmap (lambda (c) (char-numeric? c)) text)]))\n",
    "  (define (check_integer_helper text)\n    (cond\n      [(empty? text) #t]\n      [(char-numeric? (first text)) (check_integer_helper (rest text))]\n      [else #f]))\n  (check_integer_helper text))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (sub1 (string-length text)))))))\n",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string=? (substring text 0 1) \"-\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"+\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"0\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"1\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"2\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"3\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"4\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"5\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"6\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"7\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"8\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"9\") (check_integer (substring text 1))]\n    [else #f]))\n",
    "  (and (string? text)\n       (not (string=? text \"\"))\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\,))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\newline))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\rubout))\n       (not (string-contains text #\\linefeed))\n       (not (string-contains text #\\page))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\null))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\linefeed))\n       (not (string-contains text #\\vtab))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\esc))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\rubout))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\nul))\n       (not (string-contains text #\\soh))\n       (not (string-contains text #\\stx))\n       (not (string-contains text #\\etx))\n       (not (string-contains text #\\eot))\n       (not (string-contains text #\\enq))\n       (not (string-contains text #\\ack))\n      ",
    "  (and (not (empty? text))\n       (not (member (string-ref text 0) '(#\\+ #\\-)))\n       (every (lambda (c) (char-numeric? c)) text)))\n",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string=? (substring text 0 1) \"-\")\n     (check_integer (substring text 1 (string-length text)))]\n    [(string=? (substring text 0 1) \"+\")\n     (check_integer (substring text 1 (string-length text)))]\n    [(string-contains text #\\.) #f]\n    [(string-contains text #\\e) #f]\n    [(string-contains text #\\E) #f]\n    [else (string-&gt;number text)]))\n</code>\nThe code works fine for the following cases:\n<code>&gt; (check_integer \"123\")\n123\n&gt; (check_integer \"-123\")\n-123\n&gt; (check_integer \"+123\")\n123\n&gt; (check_integer \"\")\n#f\n&gt; (check_integer \"123.45\")\n#f\n&gt; (check_integer \"123e45\")\n#f\n&gt; (check_integer \"123E45\")\n#f\n</code>\nBut it fails for the following case:\n<code>&gt; (check_integer \"123.45e67\")\n#f\n</code>\nI'm not sure how to fix this. I tried using <code>string-split</code> to split the string into a list of strings, but I'm not sure how to check if the list contains a <code>.</code> or <code>e</code> or <code>E</code>.\n\n\nA:\n\nYou can use <code>regexp-match</code> to check if the string matches a regular expression.\n<code>(define (check-integer s)\n  (and (regexp-match #rx\"^[-+]?[0-9]+$\" s)\n       (string-&gt;number s)))\n</code>\n",
    "  (let ([text (string-&gt;number text)])\n    (if (integer? text)\n        (displayln \"It's an integer\")\n        (displayln \"It's not an integer\"))))\n",
    "  (define (check-integer-helper text)\n    (if (string-empty? text)\n        #t\n        (if (char-numeric? (string-ref text 0))\n            (check-integer-helper (substring text 1))\n            #f)))\n  (if (string-empty? text)\n      #f\n      (if (char-numeric? (string-ref text 0))\n          (check-integer-helper (substring text 1))\n          #f)))\n",
    "  (and (string? text)\n       (not (empty? text))\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\newline))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\linefeed))\n       (not (string-contains text #\\page))\n       (not (string-contains text #\\formfeed))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\rubout))\n       (not (string-contains text #\\vtab))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\nul))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\esc))\n       (not (string-contains text #\\null))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\vtab))\n       (not (string-contains text #\\x0))\n       (not (string-contains text #\\x1))\n       (not (string-contains text #\\x2))\n       (not (string-contains text #\\x3))\n       (not (string-contains text #\\x4))\n       (not (string-contains text #\\x5))\n       (not (string-contains text #\\x6))\n       (not (string-contains text #\\x7))\n",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string=? (substring text 0 1) \"-\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"+\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"0\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"1\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"2\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"3\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"4\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"5\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"6\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"7\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"8\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"9\") (check_integer (substring text 1))]\n    [else #f]))\n",
    "  (and (string? text)\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\x))\n       (not (string-contains text #\\X))\n       (not (string-contains text #\\o))\n       (not (string-contains text #\\O))\n       (not (string-contains text #\\b))\n       (not (string-contains text #\\B))\n       (not (string-contains text #\\a))\n       (not (string-contains text #\\A))\n       (not (string-contains text #\\f))\n       (not (string-contains text #\\F))\n       (not (string-contains text #\\d))\n       (not (string-contains text #\\D))\n       (not (string-contains text #\\c))\n       (not (string-contains text #\\C))\n       (not (string-contains text #\\s))\n       (not (string-contains text #\\S))\n       (not (string-contains text #\\w))\n       (not (string-contains text #\\W))\n       (not (string-contains text #\\p))\n       (not (string-contains text #\\P))\n       (not (string-contains text #\\h))\n       (not (string-contains text #\\H))\n       (not (string-contains text #\\v))\n       (not (string-contains text #\\V))\n       (not (string-contains text #\\n))\n       (not (string-contains text #\\t))\n       (not (string-contains text #\\r))\n       (not (string-contains text #\\f))\n       (not (string-contains text #\\a))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))",
    "  (and (string? text)\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\,))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\newline))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\linefeed))\n       (not (string-contains text #\\page))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\rubout))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\nul))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\vtab))\n       (not (string-contains text #\\formfeed))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\null))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\vtab))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\linefeed))\n       (not (string-contains text #\\page))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\rubout))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\nul))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\",
    "  (if (string-&gt;number text)\n      (display \"It is an integer.\")\n      (display \"It is not an integer.\")))\n",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string=? (substring text 0 1) \"-\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"+\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"0\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"1\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"2\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"3\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"4\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"5\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"6\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"7\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"8\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"9\")\n     (check_integer (substring text 1))]\n    [else #f]))\n",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string-contains text #\\.) #f]\n    [(string-contains text #\\e) #f]\n    [(string-contains text #\\E) #f]\n    [else (string-&gt;number text)]))\n",
    "  (if (string=? text \"\")\n      #f\n      (if (string-contains text #\\.)\n          #f\n          (if (string-contains text #\\e)\n              #f\n              (if (string-contains text #\\E)\n                  #f\n                  (if (string-contains text #\\+)\n                      #f\n                      (if (string-contains text #\\-)\n                          #f\n                          #t)))))))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (first text)))\n       (check-integer (rest text))))\n",
    "  (and (not (empty? text))\n       (not (member (string-ref text 0) '(#\\+ #\\-)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))))\n",
    "  (and (string? text)\n       (not (string-empty? text))\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\,))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\newline))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\rubout))\n       (not (string-contains text #\\page))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\nul))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace2))\n       (not (string-contains text #\\tab2))\n       (not (string-contains text #\\linefeed))\n       (not (string-contains text #\\vtab))\n       (not (string-contains text #\\formfeed))\n       (not (string-contains text #\\return2))\n       (not (string-contains text #\\esc))\n       (not (string-contains text #\\space2))\n       (not (string-contains text #\\delete2))\n       (not (string-contains text #\\rubout2))\n       (not (string-contains text #\\altmode))\n       (not (string-contains text #\\up))\n       (not (string-contains text #\\down))\n       (not (string-contains text #\\left))\n       (not (string-contains text #\\right))\n       (not (string-contains text #\\f1))\n       (not (string-contains text #\\f",
    "  (if (string-&gt;number text)\n      (display \"It's an integer\")\n      (display \"It's not an integer\")))\n</code>\nI'm getting the following error:\n<code>check_integer: expects type &lt;number&gt; as 1st argument, given: \"123\"; other arguments were:\n</code>\nI'm not sure what I'm doing wrong.\n\n\nA:\n\nThe problem is that <code>string-&gt;number</code> returns a number when it succeeds, and <code>#f</code> when it fails. So you need to check for that:\n<code>(define (check-integer text)\n  (if (string-&gt;number text)\n      (display \"It's an integer\")\n      (display \"It's not an integer\")))\n</code>\n",
    "  (and (string? text)\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\x))\n       (not (string-contains text #\\X))\n       (not (string-contains text #\\o))\n       (not (string-contains text #\\O))\n       (not (string-contains text #\\b))\n       (not (string-contains text #\\B))\n       (not (string-contains text #\\a))\n       (not (string-contains text #\\A))\n       (not (string-contains text #\\f))\n       (not (string-contains text #\\F))\n       (not (string-contains text #\\d))\n       (not (string-contains text #\\D))\n       (not (string-contains text #\\s))\n       (not (string-contains text #\\S))\n       (not (string-contains text #\\p))\n       (not (string-contains text #\\P))\n       (not (string-contains text #\\w))\n       (not (string-contains text #\\W))\n       (not (string-contains text #\\c))\n       (not (string-contains text #\\C))\n       (not (string-contains text #\\l))\n       (not (string-contains text #\\L))\n       (not (string-contains text #\\u))\n       (not (string-contains text #\\U))\n       (not (string-contains text #\\t))\n       (not (string-contains text #\\T))\n       (not (string-contains text #\\r))\n       (not (string-contains text #\\R))\n       (not (string-contains text #\\n))\n       (not (string-contains text #\\N))\n       (not (string-contains text #\\v))",
    "  (and (string? text)\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\x))\n       (not (string-contains text #\\X))\n       (not (string-contains text #\\o))\n       (not (string-contains text #\\O))\n       (not (string-contains text #\\b))\n       (not (string-contains text #\\B))))\n",
    "  (cond\n    [(string=? text \"\") #t]\n    [(string-contains text #\\-) #t]\n    [(string-contains text #\\+) #t]\n    [(string-contains text #\\.) #f]\n    [else #t]))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (sub1 (string-length text)))))))\n",
    "  (and (not (string=? text \"\"))\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\,))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\newline))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\linefeed))\n       (not (string-contains text #\\page))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\rubout))\n       (not (string-contains text #\\vtab))\n       (not (string-contains text #\\formfeed))\n       (not (string-contains text #\\esc))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\nul))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\linefeed))\n       (not (string-contains text #\\vtab))\n       (not (string-contains text #\\page))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\esc))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\nul))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\linefeed))\n       (not (string-contains",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (- (string-length text) 1))))))\n",
    "  (and (string? text)\n       (not (string-empty? text))\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\_))\n       (not (string-contains text #\\,))\n       (not (string-contains text #\\$))\n       (not (string-contains text #\\#))\n       (not (string-contains text #\\@))\n       (not (string-contains text #\\!))\n       (not (string-contains text #\\%))\n       (not (string-contains text #\\^))\n       (not (string-contains text #\\&))\n       (not (string-contains text #\\*))\n       (not (string-contains text #\\( ))\n       (not (string-contains text #\\)))\n       (not (string-contains text #\\[))\n       (not (string-contains text #\\]))\n       (not (string-contains text #\\{))\n       (not (string-contains text #\\}))\n       (not (string-contains text #\\|))\n       (not (string-contains text #\\\\))\n       (not (string-contains text #\\/))\n       (not (string-contains text #\\?))\n       (not (string-contains text #\\>))\n       (not (string-contains text #\\<))\n       (not (string-contains text #\\`))\n       (not (string-contains text #\\'))\n       (not (string-contains text #\\~))\n       (not (string-contains text #\\:))\n       (not (string-contains text #\\;))\n       (not (string-contains text #\\\"))\n       (not (string-contains text #\\ ))\n       (not (string-contains text #\\0))\n       (not (string-contains text",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string-contains text #\\.) #f]\n    [(string-contains text #\\e) #f]\n    [(string-contains text #\\E) #f]\n    [else #t]))\n",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string=? (string-ref text 0) #\\-) (check_integer (substring text 1))]\n    [(string=? (string-ref text 0) #\\+) (check_integer (substring text 1))]\n    [(string=? (string-ref text 0) #\\0) (check_integer (substring text 1))]\n    [(string=? (string-ref text 0) #\\1) (check_integer (substring text 1))]\n    [(string=? (string-ref text 0) #\\2) (check_integer (substring text 1))]\n    [(string=? (string-ref text 0) #\\3) (check_integer (substring text 1))]\n    [(string=? (string-ref text 0) #\\4) (check_integer (substring text 1))]\n    [(string=? (string-ref text 0) #\\5) (check_integer (substring text 1))]\n    [(string=? (string-ref text 0) #\\6) (check_integer (substring text 1))]\n    [(string=? (string-ref text 0) #\\7) (check_integer (substring text 1))]\n    [(string=? (string-ref text 0) #\\8) (check_integer (substring text 1))]\n    [(string=? (string-ref text 0) #\\9) (check_integer (substring text 1))]\n    [else #f]))\n",
    "  (let ([text (string-&gt;number text)])\n    (if (number? text)\n        (if (integer? text)\n            (display \"It is an integer\")\n            (display \"It is not an integer\"))\n        (display \"It is not a number\"))))\n",
    "  (and (string? text)\n       (not (empty? text))\n       (not (member (string-ref text 0) '(#\\+ #\\-)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (- (string-length text) 1))))\n       (for/and ([c (in-string text)])\n         (char-numeric? c))))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (- (string-length text) 1))))))\n",
    "  (let ([n (string->number text)])\n    (and (number? n)\n         (integer? n))))\n",
    "  (let ((text-length (string-length text)))\n    (if (or (= text-length 0)\n            (not (char-numeric? (string-ref text 0))))\n        #f\n        (let loop ((i 1))\n          (if (= i text-length)\n              #t\n              (if (char-numeric? (string-ref text i))\n                  (loop (+ i 1))\n                  #f))))))\n",
    "  (and (string? text)\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\s))\n       (not (string-contains text #\\n))\n       (not (string-contains text #\\t))\n       (not (string-contains text #\\r))\n       (not (string-contains text #\\f))\n       (not (string-contains text #\\v))\n       (not (string-contains text #\\b))\n       (not (string-contains text #\\a))\n       (not (string-contains text #\\0))\n       (not (string-contains text #\\1))\n       (not (string-contains text #\\2))\n       (not (string-contains text #\\3))\n       (not (string-contains text #\\4))\n       (not (string-contains text #\\5))\n       (not (string-contains text #\\6))\n       (not (string-contains text #\\7))\n       (not (string-contains text #\\8))\n       (not (string-contains text #\\9))\n       (not (string-contains text #\\x))\n       (not (string-contains text #\\X))\n       (not (string-contains text #\\o))\n       (not (string-contains text #\\O))\n       (not (string-contains text #\\b))\n       (not (string-contains text #\\B))\n       (not (string-contains text #\\d))\n       (not (string-contains text #\\D))\n       (not (string-contains text #\\c))\n       (not (string-contains text #\\C))\n       (not (string-contains text #\\p))\n       (not (string-contains text #\\P))\n       (not (string-contains text #\\u))))",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string=? (substring text 0 1) \"-\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"+\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"0\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"1\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"2\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"3\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"4\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"5\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"6\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"7\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"8\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"9\") (check_integer (substring text 1))]\n    [else #f]))\n",
    "  (and (not (null? text))\n       (or (char=? (string-ref text 0) #\\+)\n           (char=? (string-ref text 0) #\\-))\n       (andmap char-numeric? (string-&gt;list (substring text 1)))))\n",
    "  (and (string? text)\n       (not (empty? text))\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\newline))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\rubout))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\nul))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\nul))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\nul))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\nul))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\nul))\n       (",
    "  (if (string=? text \"\")\n      #f\n      (if (string-contains text #\\.)\n          #f\n          (if (string-contains text #\\e)\n              #f\n              (if (string-contains text #\\E)\n                  #f\n                  (if (string-contains text #\\+)\n                      #f\n                      (if (string-contains text #\\-)\n                          #f\n                          (if (string-contains text #\\ )\n                              #f\n                              (if (string-contains text #\\,)\n                                  #f\n                                  #t)))))))))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (- (string-length text) 1))))))\n",
    "  (and (string? text)\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\x))\n       (not (string-contains text #\\X))\n       (not (string-contains text #\\o))\n       (not (string-contains text #\\O))\n       (not (string-contains text #\\b))\n       (not (string-contains text #\\B))))\n",
    "  (and (not (string=? text \"\"))\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\newline))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\rubout))\n       (not (string-contains text #\\page))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\nul))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\linefeed))\n       (not (string-contains text #\\vtab))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\esc))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\rubout))\n       (not (string-contains text #\\nul))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\linefeed))\n       (not (string-contains text #\\vtab))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\esc))\n       (not (string-contains text #\\space))\n       (not (string-contains text",
    "  (define (check-integer-helper text)\n    (if (empty? text)\n        #t\n        (if (char-numeric? (first text))\n            (check-integer-helper (rest text))\n            #f)))\n  (if (empty? text)\n      #f\n      (check-integer-helper text)))\n",
    "  (and (string? text)\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\x))\n       (not (string-contains text #\\X))\n       (not (string-contains text #\\o))\n       (not (string-contains text #\\O))\n       (not (string-contains text #\\b))\n       (not (string-contains text #\\B))\n       (not (string-contains text #\\a))\n       (not (string-contains text #\\A))\n       (not (string-contains text #\\f))\n       (not (string-contains text #\\F))\n       (not (string-contains text #\\d))\n       (not (string-contains text #\\D))\n       (not (string-contains text #\\s))\n       (not (string-contains text #\\S))\n       (not (string-contains text #\\w))\n       (not (string-contains text #\\W))\n       (not (string-contains text #\\p))\n       (not (string-contains text #\\P))\n       (not (string-contains text #\\h))\n       (not (string-contains text #\\H))\n       (not (string-contains text #\\v))\n       (not (string-contains text #\\V))\n       (not (string-contains text #\\n))\n       (not (string-contains text #\\r))\n       (not (string-contains text #\\t))\n       (not (string-contains text #\\f))\n       (not (string-contains text #\\a))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\c))\n       (not (string-contains text #\\C))\n       (not (string-contains text #\\M))",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (- (string-length text) 1))))\n       (not (string-contains text #\\.))))\n",
    "  (and (not (empty? text))\n       (string-&gt;number text)\n       (not (string=? text (number-&gt;string (string-&gt;number text))))))\n",
    "  (and (string? text)\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\,))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\newline))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\rubout))\n       (not (string-contains text #\\linefeed))\n       (not (string-contains text #\\page))\n       (not (string-contains text #\\vtab))\n       (not (string-contains text #\\esc))\n       (not (string-contains text #\\delete))))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (- (string-length text) 1))))))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (- (string-length text) 1))))\n       (for/and ([c (in-string text)])\n         (char-numeric? c))))\n",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string-contains text #\\.) #f]\n    [(string-contains text #\\e) #f]\n    [(string-contains text #\\E) #f]\n    [else (number? (string->number text))]))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (- (string-length text) 1))))))\n",
    "  (and (not (null? text))\n       (char-numeric? (string-ref text 0))\n       (check-integer (substring text 1))))\n</code>\nI get the following error:\n<code>check-integer: unbound identifier in module in: check-integer\n</code>\nI don't understand why this is happening. I'm using DrRacket.\n\n\nA:\n\nYou have a typo in your code. You have <code>check-integer</code> instead of <code>check_integer</code>.\n",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string=? (substring text 0 1) \"-\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"+\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"0\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"1\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"2\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"3\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"4\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"5\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"6\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"7\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"8\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"9\") (check_integer (substring text 1))]\n    [else #f]))\n",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string=? (substring text 0 1) \"-\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"+\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"0\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"1\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"2\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"3\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"4\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"5\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"6\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"7\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"8\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"9\") (check_integer (substring text 1))]\n    [else #f]))\n",
    "  (and (not (empty? text))\n       (or (char=? (string-ref text 0) #\\-)\n           (char=? (string-ref text 0) #\\+))\n       (string-&gt;number text)))\n</code>\n",
    "  (and (string? text)\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\x))\n       (not (string-contains text #\\X))\n       (not (string-contains text #\\o))\n       (not (string-contains text #\\O))\n       (not (string-contains text #\\b))\n       (not (string-contains text #\\B))\n       (not (string-contains text #\\a))\n       (not (string-contains text #\\A))\n       (not (string-contains text #\\f))\n       (not (string-contains text #\\F))\n       (not (string-contains text #\\d))\n       (not (string-contains text #\\D))\n       (not (string-contains text #\\s))\n       (not (string-contains text #\\S))\n       (not (string-contains text #\\w))\n       (not (string-contains text #\\W))\n       (not (string-contains text #\\p))\n       (not (string-contains text #\\P))\n       (not (string-contains text #\\h))\n       (not (string-contains text #\\H))\n       (not (string-contains text #\\v))\n       (not (string-contains text #\\V))\n       (not (string-contains text #\\n))\n       (not (string-contains text #\\r))\n       (not (string-contains text #\\t))\n       (not (string-contains text #\\f))\n       (not (string-contains text #\\a))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\c))\n       (not (string-contains text #\\C))\n       (not (string-contains text #\\\\))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (- (string-length text) 1))))))\n",
    "  (and (string? text)\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\x))\n       (not (string-contains text #\\X))\n       (not (string-contains text #\\o))\n       (not (string-contains text #\\O))\n       (not (string-contains text #\\b))\n       (not (string-contains text #\\B))\n       (not (string-contains text #\\a))\n       (not (string-contains text #\\A))\n       (not (string-contains text #\\f))\n       (not (string-contains text #\\F))\n       (not (string-contains text #\\d))\n       (not (string-contains text #\\D))\n       (not (string-contains text #\\s))\n       (not (string-contains text #\\S))\n       (not (string-contains text #\\w))\n       (not (string-contains text #\\W))\n       (not (string-contains text #\\p))\n       (not (string-contains text #\\P))\n       (not (string-contains text #\\h))\n       (not (string-contains text #\\H))\n       (not (string-contains text #\\v))\n       (not (string-contains text #\\V))\n       (not (string-contains text #\\n))\n       (not (string-contains text #\\t))\n       (not (string-contains text #\\r))\n       (not (string-contains text #\\f))\n       (not (string-contains text #\\a))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\\\))\n       (not (string-contains text #\\\"))\n       (not (string-contains text #\\'))\n       (",
    "  (if (string-&gt;number text)\n      \"It's an integer\"\n      \"It's not an integer\"))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (- (string-length text) 1))))))\n",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string-contains text #\\.) #f]\n    [(string-contains text #\\e) #f]\n    [(string-contains text #\\E) #f]\n    [else (string-&gt;number text)]))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (sub1 (string-length text)))))))\n",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string=? (string-ref text 0) #\\- ) (check_integer (substring text 1))]\n    [(string=? (string-ref text 0) #\\+ ) (check_integer (substring text 1))]\n    [(string=? (string-ref text 0) #\\0 ) (check_integer (substring text 1))]\n    [(string=? (string-ref text 0) #\\1 ) (check_integer (substring text 1))]\n    [(string=? (string-ref text 0) #\\2 ) (check_integer (substring text 1))]\n    [(string=? (string-ref text 0) #\\3 ) (check_integer (substring text 1))]\n    [(string=? (string-ref text 0) #\\4 ) (check_integer (substring text 1))]\n    [(string=? (string-ref text 0) #\\5 ) (check_integer (substring text 1))]\n    [(string=? (string-ref text 0) #\\6 ) (check_integer (substring text 1))]\n    [(string=? (string-ref text 0) #\\7 ) (check_integer (substring text 1))]\n    [(string=? (string-ref text 0) #\\8 ) (check_integer (substring text 1))]\n    [(string=? (string-ref text 0) #\\9 ) (check_integer (substring text 1))]\n    [else #f]))\n",
    "  (and (not (string-empty? text))\n       (string-every (lambda (c) (char-numeric? c)) text)))\n",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string=? text \"0\") #t]\n    [(string=? text \"-0\") #t]\n    [(string=? (substring text 0 1) \"-\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"0\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"+\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"1\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"2\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"3\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"4\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"5\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"6\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"7\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"8\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"9\")\n     (check_integer (substring text 1))]\n    [else #f]))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (sub1 (string-length text)))))))\n",
    "  (if (string=? text \"\")\n      #f\n      (if (string-contains text #\\.)\n          #f\n          (if (string-contains text #\\e)\n              #f\n              (if (string-contains text #\\E)\n                  #f\n                  (if (string-contains text #\\+)\n                      #f\n                      (if (string-contains text #\\-)\n                          #f\n                          #t)))))))\n",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string=? (substring text 0 1) \"-\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"+\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"0\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"1\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"2\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"3\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"4\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"5\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"6\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"7\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"8\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"9\") (check_integer (substring text 1))]\n    [else #f]))\n",
    "  (and (string? text)\n       (not (string-empty? text))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\*))\n       (not (string-contains text #\\/))\n       (not (string-contains text #\\^))\n       (not (string-contains text #\\%))\n       (not (string-contains text #\\$))\n       (not (string-contains text #\\#))\n       (not (string-contains text #\\@))\n       (not (string-contains text #\\!))\n       (not (string-contains text #\\&))\n       (not (string-contains text #\\?))\n       (not (string-contains text #\\~))\n       (not (string-contains text #\\`))\n       (not (string-contains text #\\|))\n       (not (string-contains text #\\_))\n       (not (string-contains text #\\=))\n       (not (string-contains text #\\[))\n       (not (string-contains text #\\]))\n       (not (string-contains text #\\{))\n       (not (string-contains text #\\}))\n       (not (string-contains text #\\:))\n       (not (string-contains text #\\;))\n       (not (string-contains text #\\\"))\n       (not (string-contains text #\\'))\n       (not (string-contains text #\\,))\n       (not (string-contains text #\\<))\n       (not (string-contains text #\\>))\n       (not (string-contains text #\\\\))\n       (not (string-contains text #\\()))\n  (define (check_integer_helper text)\n    (if (string-empty? text)\n        #t\n        (and (char-n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (- (string-length text) 1))))\n       (not (string-contains text #\\.))))\n",
    "  (and (string? text)\n       (not (string-contains text \".\"))\n       (not (string-contains text \",\"))\n       (not (string-contains text \" \"))\n       (not (string-contains text \"-\"))\n       (not (string-contains text \"+\"))\n       (not (string-contains text \"e\"))\n       (not (string-contains text \"E\"))\n       (not (string-contains text \"x\"))\n       (not (string-contains text \"X\"))\n       (not (string-contains text \"b\"))\n       (not (string-contains text \"B\"))\n       (not (string-contains text \"o\"))\n       (not (string-contains text \"O\"))\n       (not (string-contains text \"d\"))\n       (not (string-contains text \"D\"))))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (- (string-length text) 1))))))\n",
    "  (and (not (null? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (- (string-length text) 1))))\n       (not (string=? text \"-\"))\n       (not (string=? text \"+\"))))\n",
    "  (and (string? text)\n       (not (empty? text))\n       (not (regexp-match #rx\"^[-+]?[0-9]+$\" text))))\n",
    "  (define (check-integer-helper text)\n    (cond\n      [(empty? text) #t]\n      [(char=? (first text) #\\0) (check-integer-helper (rest text))]\n      [(char=? (first text) #\\1) (check-integer-helper (rest text))]\n      [(char=? (first text) #\\2) (check-integer-helper (rest text))]\n      [(char=? (first text) #\\3) (check-integer-helper (rest text))]\n      [(char=? (first text) #\\4) (check-integer-helper (rest text))]\n      [(char=? (first text) #\\5) (check-integer-helper (rest text))]\n      [(char=? (first text) #\\6) (check-integer-helper (rest text))]\n      [(char=? (first text) #\\7) (check-integer-helper (rest text))]\n      [(char=? (first text) #\\8) (check-integer-helper (rest text))]\n      [(char=? (first text) #\\9) (check-integer-helper (rest text))]\n      [else #f]))\n  (check-integer-helper text))\n",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string=? (substring text 0 1) \"-\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"+\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"0\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"1\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"2\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"3\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"4\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"5\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"6\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"7\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"8\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"9\") (check_integer (substring text 1))]\n    [else #f]))\n",
    "  (and (string? text)\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\x))\n       (not (string-contains text #\\X))\n       (not (string-contains text #\\o))\n       (not (string-contains text #\\O))\n       (not (string-contains text #\\b))\n       (not (string-contains text #\\B))\n       (not (string-contains text #\\a))\n       (not (string-contains text #\\A))\n       (not (string-contains text #\\f))\n       (not (string-contains text #\\F))\n       (not (string-contains text #\\d))\n       (not (string-contains text #\\D))\n       (not (string-contains text #\\s))\n       (not (string-contains text #\\S))\n       (not (string-contains text #\\w))\n       (not (string-contains text #\\W))))\n",
    "  (if (string=? text \"\")\n      #f\n      (if (char-numeric? (string-ref text 0))\n          (check_integer (substring text 1))\n          #f)))\n</code>\n",
    "  (and (string? text)\n       (not (empty? text))\n       (not (member (string-ref text 0) '(#\\+ #\\-)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #",
    "  (let ([int-regexp #rx\"^-?[0-9]+$\"])\n    (regexp-match? int-regexp text)))\n",
    "  (cond\n    [(string=? text \"\") #t]\n    [(string=? (substring text 0 1) \"-\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"+\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"0\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"1\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"2\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"3\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"4\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"5\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"6\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"7\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"8\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"9\") (check_integer (substring text 1))]\n    [else #f]))\n",
    "  (cond\n    [(string=? text \"\") false]\n    [(string=? text \"0\") true]\n    [(string=? text \"-0\") true]\n    [(string=? text \"+0\") true]\n    [(string=? text \"1\") true]\n    [(string=? text \"-1\") true]\n    [(string=? text \"+1\") true]\n    [(string=? text \"2\") true]\n    [(string=? text \"-2\") true]\n    [(string=? text \"+2\") true]\n    [(string=? text \"3\") true]\n    [(string=? text \"-3\") true]\n    [(string=? text \"+3\") true]\n    [(string=? text \"4\") true]\n    [(string=? text \"-4\") true]\n    [(string=? text \"+4\") true]\n    [(string=? text \"5\") true]\n    [(string=? text \"-5\") true]\n    [(string=? text \"+5\") true]\n    [(string=? text \"6\") true]\n    [(string=? text \"-6\") true]\n    [(string=? text \"+6\") true]\n    [(string=? text \"7\") true]\n    [(string=? text \"-7\") true]\n    [(string=? text \"+7\") true]\n    [(string=? text \"8\") true]\n    [(string=? text \"-8\") true]\n    [(string=? text \"+8\") true]\n    [(string=? text \"9\") true]\n    [(string=? text \"-9\") true]\n    [(string=? text \"+9\") true]\n    [(string=? text \"10\") true]\n    [(string=? text \"-10\") true]\n    [(string=? text \"+10\") true]\n    [(string=? text \"11\") true]\n    [(string=? text \"-11\") true]\n    [(string=? text \"+11\") true]\n    [(string=? text \"12\") true]\n    [(string=? text \"-12\") true]\n    [(string=? text \"+12\") true]\n    [(string=? text \"13\") true]\n    [(string=? text \"-13\") true]\n    [(string=",
    "  (if (string-&gt;number text)\n      (display \"It's an integer!\")\n      (display \"It's not an integer!\")))\n",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string=? (substring text 0 1) \"-\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"+\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"0\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"1\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"2\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"3\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"4\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"5\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"6\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"7\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"8\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"9\") (check_integer (substring text 1))]\n    [else #f]))\n",
    "  (let ([n (string->number text)])\n    (and (integer? n)\n         (equal? text (number->string n)))))\n",
    "  (if (string-&gt;number text)\n      #t\n      #f))\n",
    "  (and (string? text)\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\,))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\newline))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\rubout))\n       (not (string-contains text #\\page))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\nul))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace2))\n       (not (string-contains text #\\tab2))\n       (not (string-contains text #\\linefeed))\n       (not (string-contains text #\\vtab))\n       (not (string-contains text #\\formfeed))\n       (not (string-contains text #\\return2))\n       (not (string-contains text #\\esc2))\n       (not (string-contains text #\\space2))\n       (not (string-contains text #\\delete2))\n       (not (string-contains text #\\rubout2))\n       (not (string-contains text #\\esc3))\n       (not (string-contains text #\\esc4))\n       (not (string-contains text #\\esc5))\n       (not (string-contains text #\\esc6))\n       (not (string-contains text #\\esc7))\n       (not (string-contains text #\\esc8))\n       (not (string-contains text #\\esc9))\n       (not",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (sub1 (string-length text)))))))\n",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string=? (substring text 0 1) \"-\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"+\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"0\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"1\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"2\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"3\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"4\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"5\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"6\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"7\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"8\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"9\") (check_integer (substring text 1))]\n    [else #f]))\n",
    "  (and (string? text)\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\x))\n       (not (string-contains text #\\X))))\n",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string=? (substring text 0 1) \"-\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"+\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"0\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"1\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"2\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"3\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"4\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"5\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"6\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"7\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"8\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"9\") (check_integer (substring text 1))]\n    [else #f]))\n",
    "  (and (string? text)\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\x))\n       (not (string-contains text #\\X))\n       (not (string-contains text #\\o))\n       (not (string-contains text #\\O))\n       (not (string-contains text #\\b))\n       (not (string-contains text #\\B))\n       (not (string-contains text #\\a))\n       (not (string-contains text #\\A))\n       (not (string-contains text #\\f))\n       (not (string-contains text #\\F))\n       (not (string-contains text #\\d))\n       (not (string-contains text #\\D))\n       (not (string-contains text #\\s))\n       (not (string-contains text #\\S))\n       (not (string-contains text #\\w))\n       (not (string-contains text #\\W))\n       (not (string-contains text #\\p))\n       (not (string-contains text #\\P))\n       (not (string-contains text #\\h))\n       (not (string-contains text #\\H))\n       (not (string-contains text #\\v))\n       (not (string-contains text #\\V))\n       (not (string-contains text #\\n))\n       (not (string-contains text #\\r))\n       (not (string-contains text #\\t))\n       (not (string-contains text #\\\\))\n       (not (string-contains text #\\\"))\n       (not (string-contains text #\\'))\n       (not (string-contains text #\\`))\n       (not (string-contains text #\\;))\n       (not (string-contains text #\\,))\n       (",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string=? (substring text 0 1) \"-\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"+\") (check_integer (substring text 1))]\n    [(string-&gt;number text) #t]\n    [else #f]))\n",
    "  (and (string? text)\n       (not (string-empty? text))\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\newline))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\linefeed))\n       (not (string-contains text #\\page))\n       (not (string-contains text #\\formfeed))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\rubout))\n       (not (string-contains text #\\vtab))\n       (not (string-contains text #\\esc))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\null))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\linefeed))\n       (not (string-contains text #\\newline))\n       (not (string-contains text #\\vtab))\n       (not (string-contains text #\\page))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\esc))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\rubout))\n       (not (string-contains text #\\null))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\tab))\n       (",
    "  (and (string? text)\n       (not (empty? text))\n       (not (member (string-ref text 0) '(#\\+ #\\-)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (- (string-length text) 1))))))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (first text)))\n       (check_integer (rest text))))\n",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string-&gt;number text) #t]\n    [else #f]))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (- (string-length text) 1))))\n       (not (char-numeric? (string-ref text (- (string-length text) 2))))\n       (not (char-numeric? (string-ref text (- (string-length text) 3))))\n       (not (char-numeric? (string-ref text (- (string-length text) 4))))\n       (not (char-numeric? (string-ref text (- (string-length text) 5))))\n       (not (char-numeric? (string-ref text (- (string-length text) 6))))\n       (not (char-numeric? (string-ref text (- (string-length text) 7))))\n       (not (char-numeric? (string-ref text (- (string-length text) 8))))\n       (not (char-numeric? (string-ref text (- (string-length text) 9))))\n       (not (char-numeric? (string-ref text (- (string-length text) 10))))\n       (not (char-numeric? (string-ref text (- (string-length text) 11))))\n       (not (char-numeric? (string-ref text (- (string-length text) 12))))\n       (not (char-numeric? (string-ref text (- (string-length text) 13))))\n       (not (char-numeric? (string-ref text (- (string-length text) 14))))\n       (not (char-numeric? (string-ref text (- (string-length text) 15))))\n       (not (char-numeric? (string-ref text (- (string-length text) 16))))\n       (not (char-numeric? (string-ref text (- (string-length text) 17))))\n       (not (char-numeric? (string-ref text (- (string-length text) 18))))\n       (not (char-numeric? (string-ref text (- (string-length text) 19))))\n       (not (char-numeric? (string-ref text (- (string-length text) 20))))\n       (not",
    "  (if (string=? text \"\")\n      #f\n      (if (string-contains text #\\.)\n          #f\n          (if (string-contains text #\\e)\n              #f\n              (if (string-contains text #\\E)\n                  #f\n                  (if (string-contains text #\\+)\n                      #f\n                      (if (string-contains text #\\-)\n                          #f\n                          #t)))))))\n",
    "  (and (string? text)\n       (not (string-empty? text))\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\,))))\n",
    "  (cond\n    [(string=? text \"\") #t]\n    [(string-contains text #\\-) #t]\n    [(string-contains text #\\+) #t]\n    [(string-contains text #\\.) #f]\n    [else (string-contains text #\\.)]))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (- (string-length text) 1))))\n       (for/and ([ch (in-string text)])\n         (char-numeric? ch))))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (sub1 (string-length text)))))))\n",
    "  (define (check-integer-helper text)\n    (if (string-empty? text)\n        #t\n        (if (char-numeric? (string-ref text 0))\n            (check-integer-helper (substring text 1))\n            #f)))\n  (if (string-empty? text)\n      #f\n      (if (char-numeric? (string-ref text 0))\n          (check-integer-helper (substring text 1))\n          #f)))\n",
    "  (and (string? text)\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\,))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\newline))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\rubout))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\nul))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\nul))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\nul))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\nul))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (first text)))\n       (check-integer (rest text))))\n</code>\nI'm not sure what I'm doing wrong here. I'm trying to check if the first character is a number, and if it is, then I want to check the rest of the string. If it's not, then I want to return false.\n\n\nA:\n\n<code>char-numeric?</code> is not the right function to use here. It returns true if the character is a digit, but you want to check if the character is a sign.\nYou can use <code>char-whitespace?</code> to check if the character is a space, and <code>char-alphabetic?</code> to check if the character is a letter.\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (sub1 (string-length text)))))))\n",
    "  (let ((n (string->number text)))\n    (and (number? n) (integer? n))))\n",
    "  (and (string? text)\n       (string-integer? text)))\n",
    "  (if (string-&gt;number text)\n      (display \"true\")\n      (display \"false\")))\n",
    "  (and (string? text)\n       (not (string-empty? text))\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (sub1 (string-length text)))))))\n",
    "  (and (string? text)\n       (not (empty? text))\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\i))\n       (not (string-contains text #\\I))\n       (not (string-contains text #\\j))\n       (not (string-contains text #\\J))\n       (not (string-contains text #\\x))\n       (not (string-contains text #\\X))\n       (not (string-contains text #\\o))\n       (not (string-contains text #\\O))\n       (not (string-contains text #\\b))\n       (not (string-contains text #\\B))\n       (not (string-contains text #\\d))\n       (not (string-contains text #\\D))\n       (not (string-contains text #\\a))\n       (not (string-contains text #\\A))\n       (not (string-contains text #\\f))\n       (not (string-contains text #\\F))\n       (not (string-contains text #\\c))\n       (not (string-contains text #\\C))\n       (not (string-contains text #\\s))\n       (not (string-contains text #\\S))\n       (not (string-contains text #\\p))\n       (not (string-contains text #\\P))\n       (not (string-contains text #\\n))\n       (not (string-contains text #\\r))\n       (not (string-contains text #\\t))\n       (not (string-contains text #\\v))\n       (not (string-contains text #\\0))\n       (not (string-contains text #\\1))\n       (not (string-contains text #\\2))\n       (not (string-contains text #\\3))\n       (not (",
    "  (and (string? text)\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\x))\n       (not (string-contains text #\\X))\n       (not (string-contains text #\\o))\n       (not (string-contains text #\\O))))\n",
    "  (cond\n    [(string=? text \"\") #t]\n    [(string-contains text #\\-) #t]\n    [(string-contains text #\\+) #t]\n    [(string-contains text #\\.) #f]\n    [(string-contains text #\\e) #f]\n    [(string-contains text #\\E) #f]\n    [else #t]))\n"
  ]
}