{
  "name": "mbpp_113_check_integer",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to check if a string represents an integer or not.\n(define (check_integer text)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_113_check_integer.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_integer))\n    (check-equal? (candidate \"python\") #f)\n    (check-equal? (candidate \"1\") #t)\n    (check-equal? (candidate \"12345\") #t)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond\n    [(string=? text \"\") #f]\n    [(string-&gt;number text) #t]\n    [else #f]))\n",
    "  (and (string? text)\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\s))))\n",
    "  (and (not (empty? text))\n       (not (member (string-ref text 0) '(#\\+ #\\-)))\n       (for/and ([c (in-string text)])\n         (char-numeric? c))))\n",
    "  (let ((len (string-length text)))\n    (if (and (not (string=? text \"\"))\n             (not (string=? text \"-\"))\n             (not (string=? text \"+\"))\n             (not (string=? text \".\"))\n             (not (string=? text \"..\"))\n             (not (string=? text \"...\"))\n             (not (string=? text \"....\"))\n             (not (string=? text \".....\"))\n             (not (string=? text \"......\"))\n             (not (string=? text \".......\"))\n             (not (string=? text \"........\"))\n             (not (string=? text \".........\"))\n             (not (string=? text \"..........\"))\n             (not (string=? text \"...........\"))\n             (not (string=? text \"............\"))\n             (not (string=? text \".............\"))\n             (not (string=? text \"..............\"))\n             (not (string=? text \"...............\"))\n             (not (string=? text \"................\"))\n             (not (string=? text \".................\"))\n             (not (string=? text \"..................\"))\n             (not (string=? text \"...................\"))\n             (not (string=? text \"....................\"))\n             (not (string=? text \".....................\"))\n             (not (string=? text \"......................\"))\n             (not (string=? text \".......................\"))\n             (not (string=? text \"........................\"))\n             (not (string=? text \".........................\"))\n             (not (string=? text \".......................\"))\n             (not (string=? text \"..........................\"))\n             (not (string=? text \"...........................\"))\n             (not (string=? text \"............................\"))\n             (not (string=? text \".............................\"))\n             (not (string=? text \"..............................\"))\n             (not (string=? text \"...............................\"))\n             (not (string=? text \"................................\"))\n             (not (string=? text \".................................\"))\n             (not (string=? text \"..................................\"))\n             (not (string=? text",
    "  (let ([n (string->number text)])\n    (and (number? n) (integer? n))))\n",
    "  (and (string? text)\n       (not (string-empty? text))\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\i))\n       (not (string-contains text #\\I))\n       (not (string-contains text #\\j))\n       (not (string-contains text #\\J))\n       (not (string-contains text #\\n))\n       (not (string-contains text #\\N))\n       (not (string-contains text #\\o))\n       (not (string-contains text #\\O))\n       (not (string-contains text #\\s))\n       (not (string-contains text #\\S))\n       (not (string-contains text #\\x))\n       (not (string-contains text #\\X))\n       (not (string-contains text #\\z))\n       (not (string-contains text #\\Z))\n       (not (string-contains text #\\_))\n       (not (string-contains text #\\$))\n       (not (string-contains text #\\!))\n       (not (string-contains text #\\@))\n       (not (string-contains text #\\#))\n       (not (string-contains text #\\%))\n       (not (string-contains text #\\^))\n       (not (string-contains text #\\&))\n       (not (string-contains text #\\*))\n       (not (string-contains text #\\()))\n       (not (string-contains text #\\)))\n",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string-&gt;number text) #t]\n    [else #f]))\n",
    "  (if (string=? text \"\")\n      #f\n      (if (char-numeric? (string-ref text 0))\n          (check_integer (substring text 1))\n          #f)))\n",
    "  (and (not (string=? text \"\"))\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\newline))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\rubout))\n       (not (string-contains text #\\page))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\nul))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\linefeed))\n       (not (string-contains text #\\vtab))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\esc))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\rubout))\n       (not (string-contains text #\\nul))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\linefeed))\n       (not (string-contains text #\\vtab))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\esc))\n       (not (string-contains text #\\space))\n       (not (string-contains text",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (- (string-length text) 1))))))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (- (string-length text) 1))))))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (- (string-length text) 1))))\n       (for/and ([char (in-string text)])\n         (char-numeric? char))))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (sub1 (string-length text)))))))\n",
    "  (if (string-&gt;number text)\n      (display \"It's an integer\")\n      (display \"It's not an integer\")))\n",
    "  (let ((len (string-length text)))\n    (cond\n      ((= len 0) #f)\n      ((= len 1) (char-numeric? (string-ref text 0)))\n      ((char-numeric? (string-ref text 0))\n       (check_integer (substring text 1 len)))\n      (else #f))))\n",
    "  (cond\n    [(string=? text \"\") #t]\n    [(string-contains text #\\.) #f]\n    [(string-contains text #\\e) #f]\n    [(string-contains text #\\E) #f]\n    [(string-contains text #\\+) #f]\n    [(string-contains text #\\-) #f]\n    [else #t]))\n",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string=? (substring text 0 1) \"-\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"+\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"0\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"1\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"2\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"3\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"4\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"5\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"6\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"7\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"8\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"9\") (check_integer (substring text 1))]\n    [else #f]))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (- (string-length text) 1))))))\n",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string-ref text 0) (check_integer (substring text 1))]\n    [else #t]))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (- (string-length text) 1))))))\n"
  ]
}