{
  "name": "mbpp_475_sort_counter",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_475_sort_counter.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (sort (map (lambda (x) (list (cdr x) (car x))) dict1)\n        <))\n",
    "  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        < #:key car))\n",
    "  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n",
    "  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n",
    "  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        (lambda (x y) (&lt; (cdr x) (cdr y)))))\n",
    "  (sort (map (lambda (x) (list (car x) (cdr x))) dict1)\n        (lambda (x y) (< (cadr x) (cadr y)))))\n",
    "  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n",
    "  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n",
    "  (sort (for/list ([(k v) dict1])\n          (list v k))\n        <))\n",
    "  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        <))\n",
    "  (sort (map (lambda (x) (list (car x) (cdr x))) dict1)\n        (lambda (x y) (&lt; (cadr x) (cadr y)))))\n",
    "  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n",
    "  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        (lambda (x y) (&lt; (cdr x) (cdr y)))))\n",
    "  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n",
    "  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        (lambda (x y) (< (cdr x) (cdr y)))))\n",
    "  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n",
    "  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        <))\n",
    "  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n",
    "  (sort (for/list ([(k v) dict1])\n          (list v k))\n        <))\n",
    "  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n",
    "  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        <))\n",
    "  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n",
    "  (sort (for/list ([(k v) dict1])\n          (list v k))\n        <))\n",
    "  (sort (map (lambda (x) (cons (cdr x) (car x))) (dict-keys dict1)) <))\n",
    "  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n",
    "  (sort (map (lambda (x) (list (car x) (cdr x))) dict1)\n        (lambda (x y) (&lt; (cadr x) (cadr y)))))\n",
    "  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        (lambda (x y) (&lt; (cdr x) (cdr y)))))\n",
    "  (sort (for/list ([(k v) dict1])\n          (list v k))\n        <))\n",
    "  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        < #:key first))\n",
    "  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        (lambda (x y) (&gt; (cdr x) (cdr y)))))\n",
    "  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n",
    "  (sort (for/list ([(k v) dict1])\n          (list v k))\n        <))\n",
    "  (sort (for/list ([(k v) dict1])\n          (list v k))\n        <))\n",
    "  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n",
    "  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        (lambda (x y) (< (cdr x) (cdr y)))))\n",
    "  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        < #:key first))\n",
    "  (sort (for/list ([(k v) (in-list dict1)])\n         (list v k))\n        <))\n",
    "  (sort (map (lambda (k v) (list v k)) dict1) <))\n",
    "  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n",
    "  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        (lambda (x y) (< (cdr x) (cdr y)))))\n",
    "  (sort (for/list ([(key value) dict1])\n          (list value key))\n        <))\n",
    "  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        < #:key first))\n",
    "  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n",
    "  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        (lambda (x y) (&lt; (cdr x) (cdr y)))))\n",
    "  (define (sort_helper dict1)\n    (cond\n      [(empty? dict1) empty]\n      [else\n       (let* ([min (min-key dict1)]\n              [min-val (dict-ref dict1 min)]\n              [rest (remove min dict1)])\n         (cons (cons min min-val) (sort_helper rest)))]))\n  (sort_helper dict1))\n",
    "  (sort (hash-map->list dict1)\n        (lambda (x y) (< (cdr x) (cdr y)))))\n",
    "  (sort (for/list ([(k v) dict1])\n          (list v k))\n        <))\n",
    "  (sort (for/list ([(k v) dict1])\n          (list v k))\n        <))\n",
    "  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        (lambda (x y) (&lt; (cdr x) (cdr y)))))\n",
    "  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        (lambda (x y) (&lt; (cdr x) (cdr y)))))\n",
    "  (sort (for/list ([(k v) dict1])\n          (cons k v))\n        < #:key cdr))\n",
    "  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        (lambda (x y) (< (cdr x) (cdr y)))))\n",
    "  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        <))\n",
    "  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        < #:key first))\n",
    "  (sort (for/list ([(k v) dict1])\n         (list v k))\n        <))\n",
    "  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        <))\n",
    "  (sort (for/list ([(key value) dict1])\n          (list value key))\n        <))\n",
    "  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        (lambda (x y) (&lt; (cdr x) (cdr y)))))\n</code>\n",
    "  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        < #:key first))\n",
    "  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        <))\n",
    "  (sort (map (lambda (k v) (list k v)) dict1)\n        (lambda (a b) (&lt; (second a) (second b)))))\n",
    "  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        (lambda (x y) (< (cdr x) (cdr y)))))\n",
    "  (sort (for/list ([(key val) dict1])\n          (list val key))\n        <))\n",
    "  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        <))\n",
    "  (sort (for/list ([(k v) dict1])\n          (list v k))\n        < #:key first))\n",
    "  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n",
    "  (sort (map (lambda (x) (list (car x) (cdr x))) dict1)\n        (lambda (x y) (< (cadr x) (cadr y)))))\n",
    "  (sort (for/list ([(key val) dict1])\n          (list val key))\n        <))\n",
    "  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        <))\n",
    "  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        < #:key first))\n",
    "  (sort (map (lambda (x) (list (car x) (cdr x))) dict1)\n        (lambda (x y) (< (cadr x) (cadr y)))))\n",
    "  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        <\n        :key cdr))\n",
    "  (sort (map (lambda (k v) (list v k)) dict1)\n        <))\n",
    "  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        < #:key first))\n",
    "  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        < #:key first))\n",
    "  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        (lambda (x y) (< (cdr x) (cdr y)))))\n",
    "  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n",
    "  (sort (for/list ([(k v) dict1])\n          (cons v k))\n        <))\n",
    "  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n",
    "  (sort (for/list ((k (in-list (hash-keys dict1)))\n                   #:when (not (eq? (hash-ref dict1 k) 0)))\n        (list (hash-ref dict1 k) k))\n        <))\n",
    "  (sort (hash-map->list dict1)\n        (lambda (x y) (< (cdr x) (cdr y)))))\n",
    "  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        <))\n",
    "  (sort (map (lambda (k v) (list v k)) dict1)\n        <\n        #:key first))\n",
    "  (sort (for/list ([(k v) dict1])\n         (list v k))\n        < #:key first))\n",
    "  (sort (map (lambda (x) (cons (cdr x) (car x))) dict1)\n        (lambda (x y) (< (car x) (car y)))))\n",
    "  (sort (map (lambda (x) (list (car x) (cdr x))) dict1)\n        (lambda (x y) (&lt; (cadr x) (cadr y)))))\n</code>\n",
    "  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n",
    "  (sort (map (lambda (x) (cons (cdr x) (car x))) dict1)\n        <\n        #:key cdr))\n",
    "  (sort (map (lambda (x) (list (car x) (cdr x))) dict1)\n        (lambda (x y) (&lt; (cadr x) (cadr y)))))\n</code>\n",
    "  (sort (map (lambda (x) (cons (cdr x) (car x))) dict1)\n        < #:key (lambda (x) (car x))))\n",
    "  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        <))\n",
    "  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n",
    "  (sort (map (lambda (k v) (list v k)) dict1)\n        <\n        #:key first))\n",
    "  (sort (map (lambda (k v) (list v k)) dict1)\n        (lambda (x y) (&lt; (car x) (car y)))))\n",
    "  (sort (for/list ([(key val) dict1])\n          (list val key))\n        <))\n",
    "  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        <))\n",
    "  (sort (for/list ([(k v) (in-dict dict1)])\n         (cons k v))\n        < #:key cdr))\n",
    "  (sort (hash-map->list dict1)\n        (lambda (a b)\n          (< (cdr a) (cdr b)))))\n",
    "  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n",
    "  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        (lambda (x y) (< (cdr x) (cdr y)))))\n",
    "  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        <))\n",
    "  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        (lambda (x y) (< (cdr x) (cdr y)))))\n",
    "  (sort (for/list ([(key val) dict1])\n          (list val key))\n        <))\n",
    "  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n",
    "  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n",
    "  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        (lambda (x y) (&lt; (cdr x) (cdr y)))))\n",
    "  (sort (for/list ([(key value) dict1])\n          (list value key))\n        < #:key first))\n",
    "  (sort (for/list ([(key value) (in-dict dict1)])\n         (list value key))\n        <))\n",
    "  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        < #:key first))\n",
    "  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n",
    "  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        < #:key first))\n",
    "  (sort (for/list ([(key value) dict1])\n          (list value key))\n        <))\n",
    "  (sort (map (lambda (k v) (list v k)) dict1)\n        <))\n",
    "  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n",
    "  (sort (for/list ([(k v) dict1])\n          (list v k))\n        <))\n",
    "  (sort (for/list ([(key value) (in-dict dict1)])\n         (list value key))\n        <))\n",
    "  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        <\n        #:key cdr))\n",
    "  (sort (map (lambda (k v) (cons v k)) dict1) <))\n",
    "  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        < #:key first))\n",
    "  (sort (for/list ([(key value) dict1])\n          (list value key))\n        <))\n",
    "  (sort (for/list ([(key value) (in-dict dict1)])\n         (list value key))\n        <))\n",
    "  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n",
    "  (sort (map (lambda (x) (list (car x) (cdr x))) dict1)\n        (lambda (x y) (&lt; (cadr x) (cadr y)))))\n",
    "  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n",
    "  (define (sort-helper dict1)\n    (let loop ((dict1 dict1) (result '()))\n      (if (null? dict1)\n          result\n          (let ((key (car (car dict1)))\n                (value (cdr (car dict1))))\n            (loop (cdr dict1) (cons (cons key value) result))))))\n  (let ((sorted-dict (sort-helper dict1)))\n    (reverse sorted-dict)))\n",
    "  (sort (for/list ([(k v) dict1])\n          (list v k))\n        <))\n",
    "  (sort (map (lambda (x) (list (car x) (cdr x))) dict1)\n        (lambda (x y) (&lt; (cadr x) (cadr y)))))\n</code>\n",
    "  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n",
    "  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        < #:key first))\n",
    "  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n",
    "  (sort (map (lambda (x) (list (cdr x) (car x))) dict1)\n        <\n        :key (lambda (x) (car x))))\n",
    "  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n",
    "  (sort (map (lambda (x) (list (car x) (cdr x))) dict1)\n        (lambda (x y) (&lt; (cadr x) (cadr y)))))\n",
    "  (sort (for/list ([(k v) dict1])\n          (list v k))\n        <))\n",
    "  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n",
    "  (sort (map (\u03bb (x) (list (car x) (cdr x))) dict1)\n        (\u03bb (x y) (&lt; (cadr x) (cadr y)))))\n",
    "  (sort (for/list ([(key value) dict1])\n          (list value key))\n        <))\n",
    "  (sort (map (lambda (k v) (list v k)) dict1)\n        <))\n",
    "  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n",
    "  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n",
    "  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        <))\n",
    "  (sort (for/list ([(k v) dict1])\n          (list v k))\n        <))\n",
    "  (sort (for/list ([(k v) dict1])\n          (list v k))\n        <))\n",
    "  (sort (for/list ([(k v) dict1])\n          (list v k))\n        <))\n",
    "  (sort (for/list ([(k v) dict1])\n          (list v k))\n        <))\n",
    "  (sort (map (lambda (x) (list (car x) (cdr x))) dict1)\n        (lambda (x y) (&lt; (cadr x) (cadr y)))))\n",
    "  (sort (map (lambda (x) (list (car x) (cdr x))) dict1)\n        (lambda (x y) (&lt; (cadr x) (cadr y)))))\n</code>\n",
    "  (sort (hash-map->list dict1)\n        (lambda (x y) (< (cdr x) (cdr y)))))\n",
    "  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        (lambda (x y) (&lt; (cdr x) (cdr y)))))\n",
    "  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n",
    "  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        (lambda (x y) (< (cdr x) (cdr y)))))\n",
    "  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        < #:key first))\n",
    "  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n",
    "  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n",
    "  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        (lambda (x y) (< (cdr x) (cdr y)))))\n",
    "  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n",
    "  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n",
    "  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        <))\n",
    "  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n",
    "  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n",
    "  (sort (for/list ([(k v) dict1])\n         (list v k))\n        <))\n",
    "  (sort (map (lambda (k v) (list v k)) dict1) <))\n",
    "  (sort (map (lambda (x) (list (car x) (cdr x))) dict1)\n        (lambda (x y) (&lt; (cadr x) (cadr y)))))\n",
    "  (sort (for/list ([(key val) dict1])\n          (list val key))\n        <))\n",
    "  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        < #:key first))\n",
    "  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n",
    "  (sort (map (lambda (x) (list (cdr x) (car x))) dict1)\n        (lambda (x y) (&gt; (car x) (car y)))))\n</code>\n",
    "  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n",
    "  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        <))\n",
    "  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n",
    "  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        (lambda (x y) (&lt; (cdr x) (cdr y)))))\n</code>\n",
    "  (sort (map (lambda (x) (cons (car x) (cdr x)))\n             (hash-map->list dict1))\n        (lambda (x y) (< (cdr x) (cdr y)))))\n",
    "  (sort (for/list ([(key value) dict1])\n          (list value key))\n        <))\n",
    "  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n",
    "  (sort (map (lambda (x) (cons (cdr x) (car x))) dict1)\n        <))\n",
    "  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        < #:key first))\n",
    "  (sort (for/list ([(k v) dict1])\n          (list v k))\n        <))\n",
    "  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n",
    "  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        < #:key first))\n",
    "  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n",
    "  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        < #:key first))\n",
    "  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        (lambda (x y) (&lt; (cdr x) (cdr y)))))\n",
    "  (sort (for/list ([(key value) dict1])\n          (list value key))\n        <))\n",
    "  (sort (for/list ([(k v) dict1])\n          (list v k))\n        <))\n",
    "  (sort (map (lambda (x) (list (car x) (cdr x))) dict1)\n        (lambda (x y) (< (cadr x) (cadr y)))))\n",
    "  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        < #:key first))\n",
    "  (sort (for/list ([(k v) dict1]) (cons v k))\n        <\n        #:key car))\n",
    "  (sort (map (lambda (k v) (list v k)) dict1)\n        <))\n",
    "  (sort (hash-map->list dict1)\n        (lambda (a b)\n          (< (cdr a) (cdr b)))))\n",
    "  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        (lambda (x y) (< (cdr x) (cdr y)))))\n",
    "  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n",
    "  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        (lambda (x y) (< (cdr x) (cdr y)))))\n",
    "  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        (lambda (x y) (< (cdr x) (cdr y)))))\n",
    "  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        (lambda (x y) (< (cdr x) (cdr y)))))\n",
    "  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        < #:key car))\n",
    "  (sort (map (lambda (x) (list (car x) (cdr x))) dict1)\n        (lambda (x y) (&lt; (cadr x) (cadr y)))))\n",
    "  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        (lambda (x y) (< (cdr x) (cdr y)))))\n",
    "  (sort (for/list ([(key value) dict1])\n          (list value key))\n        <))\n",
    "  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        (lambda (x y) (&lt; (cdr x) (cdr y)))))\n</code>\n",
    "  (sort (map (lambda (k v) (list v k)) dict1)\n        <))\n"
  ]
}