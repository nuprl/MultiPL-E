{
  "name": "mbpp_475_sort_counter",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to sort a dictionary by value.\n(define (sort_counter dict1)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_475_sort_counter.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (sort (map (lambda (x) (list (cdr x) (car x))) dict1)\n        <))\n",
    "  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        < #:key car))\n",
    "  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n",
    "  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n",
    "  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        (lambda (x y) (&lt; (cdr x) (cdr y)))))\n",
    "  (sort (map (lambda (x) (list (car x) (cdr x))) dict1)\n        (lambda (x y) (< (cadr x) (cadr y)))))\n",
    "  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n",
    "  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n",
    "  (sort (for/list ([(k v) dict1])\n          (list v k))\n        <))\n",
    "  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        <))\n",
    "  (sort (map (lambda (x) (list (car x) (cdr x))) dict1)\n        (lambda (x y) (&lt; (cadr x) (cadr y)))))\n",
    "  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n",
    "  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        (lambda (x y) (&lt; (cdr x) (cdr y)))))\n",
    "  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n",
    "  (sort (map (lambda (x) (cons (car x) (cdr x))) dict1)\n        (lambda (x y) (< (cdr x) (cdr y)))))\n",
    "  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n",
    "  (sort (for/list ([(k v) (in-dict dict1)])\n         (list v k))\n        <))\n",
    "  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n",
    "  (sort (for/list ([(k v) dict1])\n          (list v k))\n        <))\n",
    "  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n"
  ]
}