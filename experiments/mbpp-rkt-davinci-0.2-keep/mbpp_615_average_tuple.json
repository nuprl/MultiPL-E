{
  "name": "mbpp_615_average_tuple",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n(define (average_tuple nums)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_615_average_tuple.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (tuple) (/ (apply + tuple) (length tuple))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (tup) (/ (apply + tup) (length tup))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (\u03bb (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (n) (/ (apply + n) (length n))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (n) (/ (apply + n) (length n))) nums))\n",
    "  (map (\u03bb (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (n) (/ (apply + n) (length n))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (n) (/ (apply + n) (length n))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (n) (/ (apply + n) (length n))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (n) (/ (apply + n) (length n))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (tup)\n         (/ (apply + tup)\n            (length tup)))\n       nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (n) (/ (apply + n) (length n))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (\u03bb (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n"
  ]
}