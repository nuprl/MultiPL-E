{
  "name": "mbpp_272_rear_extract",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n(define (rear_extract test_list)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_272_rear_extract.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-equal? (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19))\n    (check-equal? (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45))\n    (check-equal? (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (map (lambda (x) (cdr x)) test_list))\n",
    "  (map (lambda (x) (cdr x)) test_list))\n",
    "  (map (lambda (x) (cdr x)) test_list))\n",
    "  (map (lambda (x) (cdr x)) test_list))\n",
    "  (map (lambda (x) (cdr x)) test_list))\n",
    "  (map (lambda (x) (cdr x)) test_list))\n",
    "  (map (lambda (x) (cdr x)) test_list))\n",
    "  (map (lambda (x) (cdr x)) test_list))\n",
    "  (map (lambda (x) (cdr x)) test_list))\n",
    "  (map (lambda (x) (cdr x)) test_list))\n",
    "  (map (lambda (x) (cdr x)) test_list))\n",
    "  (map (lambda (x) (cdr x)) test_list))\n",
    "  (map (lambda (x) (cdr x)) test_list))\n",
    "  (map (lambda (x) (cdr x)) test_list))\n",
    "  (map (lambda (x) (car (reverse x))) test_list))\n",
    "  (map (lambda (x) (cdr x)) test_list))\n",
    "  (map (lambda (x) (cdr x)) test_list))\n",
    "  (map (lambda (x) (cdr x)) test_list))\n",
    "  (map (lambda (x) (cdr x)) test_list))\n",
    "  (map (lambda (x) (car (cdr x))) test_list))\n"
  ]
}