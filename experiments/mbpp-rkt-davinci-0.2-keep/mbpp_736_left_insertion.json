{
  "name": "mbpp_736_left_insertion",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n(define (left_insertion a x)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_736_left_insertion.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate left_insertion))\n    (check-equal? (candidate (list 1 2 4 5) 6) 4)\n    (check-equal? (candidate (list 1 2 4 5) 3) 2)\n    (check-equal? (candidate (list 1 2 4 5) 7) 4)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let loop ((i 0) (j (vector-length a)) (k (/ (+ i j) 2)))\n    (cond ((= i j) i)\n          ((< (vector-ref a k) x) (loop (+ k 1) j (+ (/ (+ k j) 2) 1)))\n          (else (loop i k (/ (+ i k) 2))))))\n",
    "  (define (left_insertion_iter a x i)\n    (cond\n      [(> i (sub1 (length a))) (length a)]\n      [(< x (vector-ref a i)) i]\n      [else (left_insertion_iter a x (add1 i))]))\n  (left_insertion_iter a x 0))\n",
    "  (define (left_insertion_iter a x i)\n    (cond\n      [(= i (length a)) i]\n      [(< x (vector-ref a i)) i]\n      [else (left_insertion_iter a x (+ i 1))]))\n  (left_insertion_iter a x 0))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (define (left_insertion_iter a x i)\n    (cond\n      [(= i (length a)) i]\n      [(>= x (list-ref a i)) (left_insertion_iter a x (+ i 1))]\n      [else i]))\n  (left_insertion_iter a x 0))\n",
    "  (let loop ((i 0) (j (length a)))\n    (if (= i j)\n        i\n        (let ((mid (quotient (+ i j) 2)))\n          (if (< x (vector-ref a mid))\n              (loop i mid)\n              (loop mid j))))))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (let loop ((i 0) (j (length a)))\n    (if (= i j)\n        i\n        (let ((mid (quotient (+ i j) 2)))\n          (if (<= x (vector-ref a mid))\n              (loop i mid)\n              (loop mid j))))))\n",
    "  (define (left_insertion_iter a x i)\n    (cond\n      [(empty? a) i]\n      [(>= (first a) x) i]\n      [else (left_insertion_iter (rest a) x (+ i 1))]))\n  (left_insertion_iter a x 0))\n",
    "  (define (left_insertion-iter a x i)\n    (cond\n      [(= i 0) 0]\n      [(< x (vector-ref a i)) i]\n      [else (left_insertion-iter a x (- i 1))]))\n  (left_insertion-iter a x (- (vector-length a) 1)))\n",
    "  (cond [(empty? a) empty]\n        [(< (first a) x) (cons (first a) (left_insertion (rest a) x))]\n        [else empty]))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (< (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (cond\n    [(empty? a) empty]\n    [(< x (first a)) empty]\n    [(= x (first a)) a]\n    [else (left_insertion (rest a) x)]))\n",
    "  (let loop ([i 0])\n    (cond\n      [(= i (length a)) i]\n      [(>= (vector-ref a i) x) i]\n      [else (loop (+ i 1))])))\n",
    "  (define (left_insertion_iter a x lo hi)\n    (cond ((> lo hi) lo)\n          ((< x (vector-ref a lo)) lo)\n          ((> x (vector-ref a hi)) (+ hi 1))\n          (else (left_insertion_iter a x (+ lo 1) (- hi 1)))))\n  (left_insertion_iter a x 0 (- (vector-length a) 1)))\n",
    "  (define (left_insertion_iter a x i)\n    (cond\n      [(>= i (length a)) i]\n      [(>= (vector-ref a i) x) i]\n      [else (left_insertion_iter a x (+ i 1))]))\n  (left_insertion_iter a x 0))\n",
    "  (let loop ((i 0) (j (length a)))\n    (if (&lt; i j)\n        (let ((k (quotient (+ i j) 2)))\n          (cond ((&lt; x (vector-ref a k)) (loop i k))\n                ((&gt; x (vector-ref a k)) (loop (+ k 1) j))\n                (else k)))\n        i)))\n</code>\n",
    "  (cond [(empty? a) empty]\n        [(<= x (first a)) 0]\n        [(left_insertion (rest a) x) (+ 1 (left_insertion (rest a) x))]))\n",
    "  (cond\n    [(empty? a) empty]\n    [(< (first a) x) (cons (first a) (left_insertion (rest a) x))]\n    [else empty]))\n",
    "  (define (left_insertion_iter a x i)\n    (cond\n      [(= i 0) 0]\n      [(< x (vector-ref a i)) (left_insertion_iter a x (- i 1))]\n      [else i]))\n  (left_insertion_iter a x (- (vector-length a) 1)))\n",
    "  (cond\n    [(empty? a) empty]\n    [(< x (first a)) empty]\n    [(= x (first a)) a]\n    [else (cons (first a) (left_insertion (rest a) x))]))\n",
    "  (define (left_insertion_iter a x i)\n    (if (= i (length a))\n        i\n        (if (< x (list-ref a i))\n            i\n            (left_insertion_iter a x (+ i 1)))))\n  (left_insertion_iter a x 0))\n",
    "  (define (left_insertion_iter a x i)\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (left_insertion_iter a x (+ i 1))\n            i)))\n  (left_insertion_iter a x 0))\n",
    "  (cond\n    [(empty? a) 0]\n    [(< x (first a)) 0]\n    [(> x (last a)) (length a)]\n    [else\n     (let loop ([i 0] [j (length a)])\n       (let ([m (quotient (+ i j) 2)])\n         (cond\n           [(= i m) m]\n           [(< x (list-ref a m)) (loop i m)]\n           [else (loop m j)])))]))\n",
    "  (define (left_insertion_iter a x i)\n    (cond\n      [(= i (length a)) i]\n      [(< x (vector-ref a i)) i]\n      [else (left_insertion_iter a x (+ i 1))]))\n  (left_insertion_iter a x 0))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (define (left_insertion_iter a x i)\n    (cond ((= i 0) 0)\n          ((&gt; (vector-ref a i) x) i)\n          (else (left_insertion_iter a x (- i 1)))))\n  (left_insertion_iter a x (- (vector-length a) 1)))\n",
    "  (define (left_insertion_iter a x i)\n    (cond\n      [(= i (length a)) i]\n      [(>= x (list-ref a i)) (left_insertion_iter a x (+ i 1))]\n      [else i]))\n  (left_insertion_iter a x 0))\n",
    "  (define (left_insertion_iter a x i)\n    (if (= i (length a))\n        i\n        (if (< x (list-ref a i))\n            i\n            (left_insertion_iter a x (+ i 1)))))\n  (left_insertion_iter a x 0))\n",
    "  (define (left_insertion_iter a x i)\n    (if (= i (length a))\n        i\n        (if (< (list-ref a i) x)\n            (left_insertion_iter a x (+ i 1))\n            i)))\n  (left_insertion_iter a x 0))\n",
    "  (let loop ([i 0] [j (length a)])\n    (if (= i j)\n        i\n        (let ([mid (quotient (+ i j) 2)])\n          (if (< x (vector-ref a mid))\n              (loop i mid)\n              (loop (+ mid 1) j))))))\n",
    "  (let loop ([i 0] [j (length a)])\n    (if (= i j)\n        i\n        (let ([mid (quotient (+ i j) 2)])\n          (cond [(< x (vector-ref a mid)) (loop i mid)]\n                [(> x (vector-ref a mid)) (loop (+ mid 1) j)]\n                [else mid])))))\n",
    "  (define (left_insertion_iter a x i)\n    (cond ((= i 0) i)\n          ((>= (vector-ref a i) x) i)\n          (else (left_insertion_iter a x (- i 1)))))\n  (left_insertion_iter a x (- (vector-length a) 1)))\n",
    "  (cond\n    [(empty? a) empty]\n    [(< (first a) x) (cons (first a) (left_insertion (rest a) x))]\n    [else empty]))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (cond\n    [(empty? a) empty]\n    [(< (first a) x) (cons (first a) (left_insertion (rest a) x))]\n    [else empty]))\n",
    "  (define (left_insertion-iter a x i)\n    (cond\n      [(empty? a) i]\n      [(> (first a) x) i]\n      [else (left_insertion-iter (rest a) x (+ i 1))]))\n  (left_insertion-iter a x 0))\n",
    "  (cond\n    [(empty? a) (error 'left_insertion \"empty array\")]\n    [(= (first a) x) 0]\n    [(< (first a) x) (add1 (left_insertion (rest a) x))]\n    [else 0]))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= x (list-ref a i))\n            i\n            (loop (+ i 1))))))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (define (left_insertion_iter a x i)\n    (cond\n      [(= i (length a)) i]\n      [(>= x (list-ref a i)) (left_insertion_iter a x (+ i 1))]\n      [else i]))\n  (left_insertion_iter a x 0))\n",
    "  (define (left_insertion_iter a x i)\n    (cond\n      [(= i (length a)) i]\n      [(< x (vector-ref a i)) i]\n      [else (left_insertion_iter a x (+ i 1))]))\n  (left_insertion_iter a x 0))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (define (left_insertion_iter a x i)\n    (if (or (= i (length a))\n            (< x (vector-ref a i)))\n        i\n        (left_insertion_iter a x (+ i 1))))\n  (left_insertion_iter a x 0))\n",
    "  (define (left_insertion_iter a x i)\n    (if (< i (vector-length a))\n        (if (< x (vector-ref a i))\n            i\n            (left_insertion_iter a x (+ i 1)))\n        (vector-length a)))\n  (left_insertion_iter a x 0))\n",
    "  (define (left_insertion_iter a x i)\n    (if (= i (length a))\n        i\n        (if (<= x (list-ref a i))\n            i\n            (left_insertion_iter a x (+ i 1)))))\n  (left_insertion_iter a x 0))\n",
    "  (let loop ([i 0])\n    (if (= i (vector-length a))\n        i\n        (if (<= (vector-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (define (left_insertion_iter a x i)\n    (cond\n      [(empty? a) i]\n      [(= x (first a)) i]\n      [(< x (first a)) i]\n      [else (left_insertion_iter (rest a) x (+ i 1))]))\n  (left_insertion_iter a x 0))\n",
    "  (let loop ([i 0])\n    (if (or (= i (length a))\n            (&lt; x (vector-ref a i)))\n        i\n        (loop (add1 i)))))\n",
    "  (cond\n    [(empty? a) 0]\n    [(= x (first a)) 0]\n    [(< x (first a)) 0]\n    [(> x (first a)) (+ 1 (left_insertion (rest a) x))]))\n",
    "  (cond\n    [(empty? a) empty]\n    [(< (first a) x) (cons (first a) (left_insertion (rest a) x))]\n    [else empty]))\n",
    "  (cond\n    [(empty? a) empty]\n    [(< (first a) x) (cons (first a) (left_insertion (rest a) x))]\n    [else empty]))\n",
    "  (define (left_insertion_iter a x i)\n    (cond [(empty? a) i]\n          [(> (first a) x) i]\n          [else (left_insertion_iter (rest a) x (+ i 1))]))\n  (left_insertion_iter a x 0))\n",
    "  (define (left_insertion_iter a x i)\n    (cond\n      [(empty? a) i]\n      [(< x (first a)) i]\n      [else (left_insertion_iter (rest a) x (+ i 1))]))\n  (left_insertion_iter a x 0))\n",
    "  (define (left_insertion_iter a x i)\n    (if (or (= i 0) (&lt; x (vector-ref a i)))\n        i\n        (left_insertion_iter a x (- i 1))))\n  (left_insertion_iter a x (- (vector-length a) 1)))\n",
    "  (let loop ([i 0] [j (length a)])\n    (if (= i j)\n        i\n        (let ([mid (quotient (+ i j) 2)])\n          (cond [(< x (vector-ref a mid)) (loop i mid)]\n                [(> x (vector-ref a mid)) (loop (+ mid 1) j)]\n                [else mid])))))\n",
    "  (let loop ((i 0))\n    (if (= i (length a))\n        i\n        (if (<= (vector-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (let loop ([i 0])\n    (cond [(>= i (vector-length a)) i]\n          [(> (vector-ref a i) x) i]\n          [else (loop (+ i 1))])))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (define (left_insertion_iter a x i)\n    (cond\n      [(= i 0) 0]\n      [(< x (vector-ref a i)) (left_insertion_iter a x (- i 1))]\n      [else i]))\n  (left_insertion_iter a x (- (vector-length a) 1)))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (define (iter a x i)\n    (cond\n      [(empty? a) i]\n      [(= x (first a)) i]\n      [(< x (first a)) i]\n      [else (iter (rest a) x (+ i 1))]))\n  (iter a x 0))\n",
    "  (let loop ([i 0] [j (vector-length a)])\n    (if (= i j)\n        i\n        (let ([mid (quotient (+ i j) 2)])\n          (cond\n            [(> x (vector-ref a mid)) (loop (+ mid 1) j)]\n            [(< x (vector-ref a mid)) (loop i mid)]\n            [else mid])))))\n",
    "  (cond\n    [(empty? a) empty]\n    [(= (first a) x) 0]\n    [(< (first a) x) (add1 (left_insertion (rest a) x))]\n    [else 0]))\n",
    "  (define (go a x i)\n    (cond\n      [(empty? a) i]\n      [(< x (first a)) i]\n      [else (go (rest a) x (+ i 1))]))\n  (go a x 0))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (let loop ([i 0] [j (length a)])\n    (cond [(= i j) i]\n          [(<= (vector-ref a i) x) (loop (+ i 1) j)]\n          [else i])))\n",
    "  (let loop ([i 0])\n    (cond\n      [(>= i (vector-length a)) i]\n      [(>= (vector-ref a i) x) i]\n      [else (loop (+ i 1))])))\n",
    "  (let loop ([i 0])\n    (cond\n      [(= i (length a)) i]\n      [(>= (list-ref a i) x) i]\n      [else (loop (+ i 1))])))\n",
    "  (let loop ([i 0])\n    (cond\n      [(>= i (vector-length a)) i]\n      [(< (vector-ref a i) x) (loop (+ i 1))]\n      [else i])))\n",
    "  (cond\n    [(empty? a) empty]\n    [(<= x (first a)) empty]\n    [else (cons (first a) (left_insertion (rest a) x))]))\n",
    "  (define (loop i)\n    (if (= i (length a))\n        i\n        (if (< (list-ref a i) x)\n            (loop (+ i 1))\n            i)))\n  (loop 0))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (define (left_insertion_iter a x i)\n    (if (= i (length a))\n        i\n        (if (< x (list-ref a i))\n            i\n            (left_insertion_iter a x (+ i 1)))))\n  (left_insertion_iter a x 0))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (let loop ((i 0) (j (length a)))\n    (if (&lt; i j)\n        (let ((k (quotient (+ i j) 2)))\n          (cond ((&lt; x (vector-ref a k))\n                 (loop i k))\n                ((&gt; x (vector-ref a k))\n                 (loop (+ k 1) j))\n                (else k)))\n        i)))\n",
    "  (let loop ((i 0) (j (length a)))\n    (if (< i j)\n        (let ((k (quotient (+ i j) 2)))\n          (cond ((< x (vector-ref a k)) (loop i k))\n                ((> x (vector-ref a k)) (loop (+ k 1) j))\n                (else k)))\n        i)))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (let loop ((i 0))\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (let loop ([i 0] [j (length a)])\n    (if (&lt; i j)\n        (let ([k (quotient (+ i j) 2)])\n          (cond [(&lt; x (vector-ref a k)) (loop i k)]\n                [(&gt; x (vector-ref a k)) (loop (+ k 1) j)]\n                [else k]))\n        i)))\n",
    "  (define (left_insertion_iter a x i)\n    (cond\n      [(= i (length a)) i]\n      [(< x (vector-ref a i)) i]\n      [else (left_insertion_iter a x (+ i 1))]))\n  (left_insertion_iter a x 0))\n",
    "  (define (left_insertion_iter a x i)\n    (if (or (= i (length a)) (< x (vector-ref a i)))\n        i\n        (left_insertion_iter a x (+ i 1))))\n  (left_insertion_iter a x 0))\n",
    "  (if (null? a)\n      0\n      (if (<= x (car a))\n          0\n          (+ 1 (left_insertion (cdr a) x)))))\n",
    "  (let loop ([i 0])\n    (cond\n      [(= i (length a)) i]\n      [(>= x (list-ref a i)) (loop (+ i 1))]\n      [else i])))\n",
    "  (let loop ((i 0))\n    (cond ((= i (vector-length a)) i)\n          ((< x (vector-ref a i)) i)\n          (else (loop (+ i 1))))))\n",
    "  (cond\n    [(empty? a) empty]\n    [else\n     (cond\n       [(< (first a) x) (cons (first a) (left_insertion (rest a) x))]\n       [else (cons x a)])]))\n",
    "  (define (left_insertion_iter a x i)\n    (cond ((= i (length a)) i)\n          ((< x (vector-ref a i)) i)\n          (else (left_insertion_iter a x (+ i 1)))))\n  (left_insertion_iter a x 0))\n",
    "  (define (left_insertion_iter a x i)\n    (cond\n      [(>= i (vector-length a)) i]\n      [(>= (vector-ref a i) x) i]\n      [else (left_insertion_iter a x (+ i 1))]))\n  (left_insertion_iter a x 0))\n",
    "  (let loop ([i 0])\n    (cond\n      [(= i (length a)) i]\n      [(> (list-ref a i) x) i]\n      [else (loop (+ i 1))])))\n",
    "  (define (left_insertion_iter a x i)\n    (cond\n      [(= i (length a)) i]\n      [(< x (vector-ref a i)) i]\n      [else (left_insertion_iter a x (+ i 1))]))\n  (left_insertion_iter a x 0))\n",
    "  (define (left_insertion_iter a x i)\n    (cond\n      [(= i (length a)) i]\n      [(< x (vector-ref a i)) i]\n      [else (left_insertion_iter a x (+ i 1))]))\n  (left_insertion_iter a x 0))\n",
    "  (cond ((null? a) 0)\n        ((< x (car a)) 0)\n        ((> x (car a)) (+ 1 (left_insertion (cdr a) x)))))\n",
    "  (define (left_insertion_iter a x i)\n    (cond\n      [(= i 0) 0]\n      [(>= (vector-ref a i) x) i]\n      [else (left_insertion_iter a x (- i 1))]))\n  (left_insertion_iter a x (- (vector-length a) 1)))\n",
    "  (cond\n    [(empty? a) empty]\n    [(< (first a) x) (cons (first a) (left_insertion (rest a) x))]\n    [else empty]))\n",
    "  (let loop ([i 0])\n    (cond\n      [(= i (length a)) i]\n      [(>= x (vector-ref a i)) (loop (+ i 1))]\n      [else i])))\n",
    "  (let loop ((i 0) (j (sub1 (vector-length a))))\n    (cond ((&gt; i j) i)\n          ((&lt; x (vector-ref a i)) i)\n          (else (loop (add1 i) j)))))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (vector-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (let loop ((i 0))\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (let loop ([i 0])\n    (cond\n      [(= i (length a)) i]\n      [(< x (vector-ref a i)) i]\n      [else (loop (+ i 1))])))\n",
    "  (cond\n    [(empty? a) empty]\n    [(= (first a) x) 0]\n    [(< (first a) x) (+ 1 (left_insertion (rest a) x))]\n    [else 0]))\n",
    "  (let loop ([i 0] [j (length a)])\n    (if (= i j)\n        i\n        (let ([mid (quotient (+ i j) 2)])\n          (cond [(= (vector-ref a mid) x) mid]\n                [(< (vector-ref a mid) x) (loop (+ mid 1) j)]\n                [else (loop i mid)])))))\n",
    "  (cond\n    [(empty? a) empty]\n    [(< x (first a)) empty]\n    [else (cons (first a) (left_insertion (rest a) x))]))\n",
    "  (cond\n    [(empty? a) empty]\n    [(< x (first a)) empty]\n    [else (cons (first a) (left_insertion (rest a) x))]))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (< x (list-ref a i))\n            i\n            (loop (+ i 1))))))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (define (left_insertion_iter a x i)\n    (cond\n      [(= i 0) 0]\n      [(> (vector-ref a i) x) i]\n      [else (left_insertion_iter a x (- i 1))]))\n  (left_insertion_iter a x (- (vector-length a) 1)))\n",
    "  (let loop ((i 0) (j (length a)))\n    (if (&lt; i j)\n        (let ((k (quotient (+ i j) 2)))\n          (cond ((&lt; x (vector-ref a k)) (loop i k))\n                ((&gt; x (vector-ref a k)) (loop (+ k 1) j))\n                (else k)))\n        i)))\n",
    "  (let loop ([i 0])\n    (cond [(= i (length a)) i]\n          [(>= (vector-ref a i) x) i]\n          [else (loop (+ i 1))])))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (let loop ((i 0) (j (length a)))\n    (if (&lt; i j)\n        (let ((k (quotient (+ i j) 2)))\n          (cond ((&lt; x (vector-ref a k)) (loop i k))\n                ((&gt; x (vector-ref a k)) (loop (+ k 1) j))\n                (else k)))\n        i)))\n",
    "  (cond\n    [(empty? a) empty]\n    [(= x (first a)) 0]\n    [(< x (first a)) 0]\n    [(> x (first a)) (+ 1 (left_insertion (rest a) x))]))\n",
    "  (cond\n    [(empty? a) empty]\n    [(= x (first a)) 0]\n    [(< x (first a)) 0]\n    [(> x (first a)) (+ 1 (left_insertion (rest a) x))]))\n",
    "  (define (left_insertion_iter a x i)\n    (cond\n      [(= i (length a)) i]\n      [(< x (list-ref a i)) i]\n      [else (left_insertion_iter a x (+ i 1))]))\n  (left_insertion_iter a x 0))\n",
    "  (let loop ([i 0] [j (length a)])\n    (if (= i j)\n        i\n        (let ([mid (quotient (+ i j) 2)])\n          (if (< x (vector-ref a mid))\n              (loop i mid)\n              (loop (+ mid 1) j))))))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (< (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (cond [(empty? a) empty]\n        [(< x (first a)) empty]\n        [else (cons (first a) (left_insertion (rest a) x))]))\n",
    "  (cond\n    [(empty? a) empty]\n    [(= x (first a)) (cons x a)]\n    [(< x (first a)) (cons x a)]\n    [else (cons (first a) (left_insertion (rest a) x))]))\n",
    "  (cond\n    [(empty? a) empty]\n    [(= x (first a)) empty]\n    [(< x (first a)) (cons x a)]\n    [else (cons (first a) (left_insertion (rest a) x))]))\n",
    "  (let loop ((i 0))\n    (cond ((= i (length a)) i)\n          ((< x (vector-ref a i)) i)\n          (else (loop (+ i 1))))))\n",
    "  (let loop ([i 0] [j (length a)])\n    (if (&lt; i j)\n        (let ([m (quotient (+ i j) 2)])\n          (cond [(= x (vector-ref a m)) m]\n                [(&gt; x (vector-ref a m)) (loop (+ m 1) j)]\n                [else (loop i m)]))\n        i)))\n",
    "  (let loop ([i 0])\n    (cond\n      [(= i (length a)) i]\n      [(<= x (vector-ref a i)) i]\n      [else (loop (+ i 1))])))\n",
    "  (cond\n    [(empty? a) 0]\n    [(< x (first a)) 0]\n    [(> x (last a)) (length a)]\n    [(>= x (first a)) (left_insertion (rest a) x)]))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (vector-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (define (left_insertion_iter a x i)\n    (if (= i (length a))\n        i\n        (if (< (vector-ref a i) x)\n            (left_insertion_iter a x (+ i 1))\n            i)))\n  (left_insertion_iter a x 0))\n",
    "  (cond\n    [(empty? a) empty]\n    [(< x (first a)) empty]\n    [else (cons (first a) (left_insertion (rest a) x))]))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (vector-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (cond [(empty? a) empty]\n        [(< x (first a)) empty]\n        [else (cons (first a) (left_insertion (rest a) x))]))\n",
    "  (define (left_insertion_iter a x i)\n    (if (= i (length a))\n        i\n        (if (< x (list-ref a i))\n            i\n            (left_insertion_iter a x (+ i 1)))))\n  (left_insertion_iter a x 0))\n",
    "  (cond\n    [(empty? a) empty]\n    [(= (first a) x) empty]\n    [(< (first a) x) (cons (first a) (left_insertion (rest a) x))]\n    [else empty]))\n",
    "  (cond\n    [(empty? a) empty]\n    [(< x (first a)) empty]\n    [else (cons (first a) (left_insertion (rest a) x))]))\n",
    "  (define (left_insertion_iter a x i)\n    (cond\n      [(>= i (length a)) i]\n      [(>= (vector-ref a i) x) i]\n      [else (left_insertion_iter a x (+ i 1))]))\n  (left_insertion_iter a x 0))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (define (left_insertion_iter a x i)\n    (cond ((= i (length a)) i)\n          ((&lt; x (list-ref a i)) i)\n          (else (left_insertion_iter a x (+ i 1)))))\n  (left_insertion_iter a x 0))\n",
    "  (let loop ((i 0))\n    (if (= i (length a))\n        i\n        (if (< (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (define (left_insertion_iter a x i)\n    (cond ((= i 0) i)\n          ((< x (vector-ref a i)) (left_insertion_iter a x (- i 1)))\n          (else i)))\n  (left_insertion_iter a x (- (vector-length a) 1)))\n",
    "  (define (left_insertion_iter a x i)\n    (cond [(= i (length a)) i]\n          [(< x (vector-ref a i)) i]\n          [else (left_insertion_iter a x (+ i 1))]))\n  (left_insertion_iter a x 0))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (vector-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (cond\n    [(empty? a) empty]\n    [(< x (first a)) empty]\n    [else (cons (first a) (left_insertion (rest a) x))]))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (define (left_insertion_iter a x i)\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (left_insertion_iter a x (+ i 1))\n            i)))\n  (left_insertion_iter a x 0))\n",
    "  (cond\n    [(empty? a) empty]\n    [(< x (first a)) empty]\n    [else (cons (first a) (left_insertion (rest a) x))]))\n",
    "  (let loop ([i 0])\n    (cond\n      [(= i (length a)) i]\n      [(>= (list-ref a i) x) i]\n      [else (loop (+ i 1))])))\n",
    "  (define (left_insertion_iter a x i)\n    (cond ((= i (length a)) i)\n          ((< x (vector-ref a i)) i)\n          (else (left_insertion_iter a x (+ i 1)))))\n  (left_insertion_iter a x 0))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (define (left_insertion_iter a x i)\n    (cond\n      [(= i 0) 0]\n      [(< x (vector-ref a i)) i]\n      [else (left_insertion_iter a x (- i 1))]))\n  (left_insertion_iter a x (- (vector-length a) 1)))\n",
    "  (cond [(empty? a) empty]\n        [(< x (first a)) empty]\n        [else (cons (first a) (left_insertion (rest a) x))]))\n",
    "  (cond\n    [(empty? a) 0]\n    [(< x (first a)) 0]\n    [(> x (first a)) (+ 1 (left_insertion (rest a) x))]\n    [else 0]))\n",
    "  (define (left_insertion-iter a i)\n    (cond\n      [(= i 0) 0]\n      [(>= (vector-ref a i) x) i]\n      [else (left_insertion-iter a (- i 1))]))\n  (left_insertion-iter a (- (vector-length a) 1)))\n",
    "  (define (left_insertion_iter a x i)\n    (if (or (= i (length a))\n            (&lt; x (vector-ref a i)))\n        i\n        (left_insertion_iter a x (+ i 1))))\n  (left_insertion_iter a x 0))\n",
    "  (cond\n    [(empty? a) 0]\n    [(>= (first a) x) 0]\n    [(> (left_insertion (rest a) x) 0) (+ (left_insertion (rest a) x) 1)]\n    [else 0]))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (vector-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (let loop ((i 0))\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (define (left_insertion_iter a x i)\n    (if (= i (length a))\n        i\n        (if (<= x (list-ref a i))\n            i\n            (left_insertion_iter a x (+ i 1)))))\n  (left_insertion_iter a x 0))\n",
    "  (let loop ((i 0))\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (define (left_insertion_iter a x i)\n    (if (= i (length a))\n        i\n        (if (< x (list-ref a i))\n            i\n            (left_insertion_iter a x (+ i 1)))))\n  (left_insertion_iter a x 0))\n",
    "  (define (left_insertion_iter a x i)\n    (cond\n      [(= i (length a)) i]\n      [(< x (vector-ref a i)) i]\n      [else (left_insertion_iter a x (+ i 1))]))\n  (left_insertion_iter a x 0))\n",
    "  (define (left_insertion-iter a x i)\n    (cond\n      [(empty? a) i]\n      [(< x (first a)) i]\n      [else (left_insertion-iter (rest a) x (+ i 1))]))\n  (left_insertion-iter a x 0))\n",
    "  (define (left_insertion_iter a x i)\n    (cond ((= i (length a)) i)\n          ((&lt; x (list-ref a i)) i)\n          (else (left_insertion_iter a x (+ i 1)))))\n  (left_insertion_iter a x 0))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (define (left_insertion_iter a x i)\n    (cond\n      [(empty? a) i]\n      [(> (first a) x) i]\n      [else (left_insertion_iter (rest a) x (+ i 1))]))\n  (left_insertion_iter a x 0))\n",
    "  (cond\n    [(empty? a) empty]\n    [(= (first a) x) (cons x a)]\n    [(< (first a) x) (cons (first a) (left_insertion (rest a) x))]\n    [else (cons x a)]))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (vector-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (define (left_insertion_iter a x i)\n    (cond ((< i (length a))\n           (if (< x (list-ref a i))\n               i\n               (left_insertion_iter a x (+ i 1))))\n          (else (length a))))\n  (left_insertion_iter a x 0))\n",
    "  (define (left_insertion_iter a x i)\n    (cond\n      [(empty? a) i]\n      [(< x (first a)) i]\n      [else (left_insertion_iter (rest a) x (+ i 1))]))\n  (left_insertion_iter a x 0))\n",
    "  (cond\n    [(empty? a) empty]\n    [(< x (first a)) empty]\n    [else (cons (first a) (left_insertion (rest a) x))]))\n",
    "  (let loop ((i 0) (j (vector-length a)))\n    (if (= i j)\n        i\n        (if (<= (vector-ref a i) x)\n            (loop (+ i 1) j)\n            i))))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (cond\n    [(empty? a) empty]\n    [(<= (first a) x) (cons (first a) (left_insertion (rest a) x))]\n    [else empty]))\n",
    "  (define (left_insertion-iter a x i)\n    (cond\n      [(= i (length a)) i]\n      [(< x (vector-ref a i)) i]\n      [else (left_insertion-iter a x (+ i 1))]))\n  (left_insertion-iter a x 0))\n",
    "  (define (left_insertion_iter a x i)\n    (cond\n      [(null? a) i]\n      [(> x (car a)) (left_insertion_iter (cdr a) x (+ i 1))]\n      [else i]))\n  (left_insertion_iter a x 0))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (let loop ([i 0])\n    (cond [(= i (vector-length a)) i]\n          [(< x (vector-ref a i)) i]\n          [else (loop (+ i 1))])))\n",
    "  (cond\n    [(empty? a) empty]\n    [(< x (first a)) empty]\n    [else (cons (first a) (left_insertion (rest a) x))]))\n",
    "  (define (left_insertion_iter a x i)\n    (cond ((= i 0) 0)\n          ((> (vector-ref a i) x) i)\n          (else (left_insertion_iter a x (- i 1)))))\n  (left_insertion_iter a x (- (vector-length a) 1)))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (vector-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (cond\n    [(empty? a) empty]\n    [(<= x (first a)) empty]\n    [else (cons (first a) (left_insertion (rest a) x))]))\n",
    "  (cond\n    [(empty? a) empty]\n    [(< (first a) x) (cons (first a) (left_insertion (rest a) x))]\n    [else empty]))\n",
    "  (cond\n    [(empty? a) empty]\n    [(< x (first a)) empty]\n    [else (cons (first a) (left_insertion (rest a) x))]))\n",
    "  (cond\n    [(empty? a) 0]\n    [(< x (first a)) 0]\n    [(> x (last a)) (length a)]\n    [else (left_insertion (rest a) x)]))\n",
    "  (let loop ((i 0) (j (length a)))\n    (if (&lt; i j)\n        (let ((k (quotient (+ i j) 2)))\n          (cond ((&gt; x (vector-ref a k)) (loop (+ k 1) j))\n                ((&lt; x (vector-ref a k)) (loop i k))\n                (else k)))\n        i)))\n",
    "  (define (left_insertion_iter a x i)\n    (cond [(empty? a) i]\n          [(< x (first a)) i]\n          [else (left_insertion_iter (rest a) x (+ i 1))]))\n  (left_insertion_iter a x 0))\n",
    "  (cond\n    [(empty? a) 0]\n    [(< x (first a)) 0]\n    [(> x (last a)) (length a)]\n    [else (left_insertion (rest a) x)]))\n",
    "  (cond [(empty? a) empty]\n        [(< x (first a)) empty]\n        [else (cons (first a) (left_insertion (rest a) x))]))\n",
    "  (let loop ((i 0) (j (length a)))\n    (if (= i j)\n        i\n        (let ((mid (quotient (+ i j) 2)))\n          (cond ((< x (vector-ref a mid)) (loop i mid))\n                ((> x (vector-ref a mid)) (loop (+ mid 1) j))\n                (else mid))))))\n",
    "  (let loop ((i 0) (j (length a)))\n    (if (&lt; i j)\n        (let ((k (quotient (+ i j) 2)))\n          (cond ((&lt; x (vector-ref a k)) (loop i k))\n                ((&gt; x (vector-ref a k)) (loop (+ k 1) j))\n                (else k)))\n        i)))\n",
    "  (cond\n    [(empty? a) empty]\n    [(= x (first a)) a]\n    [(&gt; x (first a)) (cons (first a) (left_insertion (rest a) x))]\n    [else (cons x a)]))\n",
    "  (define (left_insertion_iter a x i)\n    (cond\n      [(= i (length a)) i]\n      [(<= (list-ref a i) x) (left_insertion_iter a x (+ i 1))]\n      [else i]))\n  (left_insertion_iter a x 0))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (define (left_insertion_iter a x i)\n    (if (= i (length a))\n        (length a)\n        (if (<= x (list-ref a i))\n            i\n            (left_insertion_iter a x (+ i 1)))))\n  (left_insertion_iter a x 0))\n",
    "  (define (left_insertion-iter a x i)\n    (cond\n      [(empty? a) i]\n      [(< x (first a)) i]\n      [else (left_insertion-iter (rest a) x (+ i 1))]))\n  (left_insertion-iter a x 0))\n",
    "  (define (left_insertion-iter a x i)\n    (cond\n      [(empty? a) i]\n      [(< x (first a)) i]\n      [else (left_insertion-iter (rest a) x (+ i 1))]))\n  (left_insertion-iter a x 0))\n",
    "  (let loop ([i 0])\n    (cond [(= i (length a)) i]\n          [(>= (vector-ref a i) x) i]\n          [else (loop (+ i 1))])))\n"
  ]
}