{
  "name": "mbpp_57_find_Max_Num",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to find the largest number that can be formed with the given list of digits.\n(define (find_Max_Num arr)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_57_find_Max_Num.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_Max_Num))\n    (check-equal? (candidate (list 1 2 3)) 321)\n    (check-equal? (candidate (list 4 5 6 1)) 6541)\n    (check-equal? (candidate (list 1 2 3 9)) 9321)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (find_Max_Num_helper arr acc)\n    (cond\n      [(null? arr) (number->string acc)]\n      [(> (string->number (number->string (car arr))) (string->number (number->string acc)))\n       (find_Max_Num_helper (cdr arr) (car arr))]\n      [else (find_Max_Num_helper (cdr arr) acc)]))\n  (find_Max_Num_helper arr 0))\n",
    "  (define (find_Max_Num_helper arr max-num)\n    (cond\n      [(null? arr) max-num]\n      [(> (car arr) max-num) (find_Max_Num_helper (cdr arr) (car arr))]\n      [else (find_Max_Num_helper (cdr arr) max-num)]))\n  (find_Max_Num_helper arr 0))\n",
    "  (define (helper arr)\n    (cond\n      [(empty? arr) empty]\n      [(empty? (rest arr)) (list (first arr))]\n      [(> (first arr) (first (rest arr))) (cons (first arr) (helper (rest arr)))]\n      [else (cons (first (rest arr)) (helper (cons (first arr) (rest (rest arr)))))]))\n  (apply string->number (list->string (helper arr))))\n",
    "  (define (helper arr)\n    (cond\n      [(empty? arr) '()]\n      [(empty? (rest arr)) (list (first arr))]\n      [else (append (helper (rest arr)) (list (first arr)))]))\n  (define (helper2 arr)\n    (cond\n      [(empty? arr) '()]\n      [(empty? (rest arr)) (list (first arr))]\n      [else (append (helper2 (rest arr)) (list (first arr)))]))\n  (define (helper3 arr)\n    (cond\n      [(empty? arr) '()]\n      [(empty? (rest arr)) (list (first arr))]\n      [else (append (helper3 (rest arr)) (list (first arr)))]))\n  (define (helper4 arr)\n    (cond\n      [(empty? arr) '()]\n      [(empty? (rest arr)) (list (first arr))]\n      [else (append (helper4 (rest arr)) (list (first arr)))]))\n  (define (helper5 arr)\n    (cond\n      [(empty? arr) '()]\n      [(empty? (rest arr)) (list (first arr))]\n      [else (append (helper5 (rest arr)) (list (first arr)))]))\n  (define (helper6 arr)\n    (cond\n      [(empty? arr) '()]\n      [(empty? (rest arr)) (list (first arr))]\n      [else (append (helper6 (rest arr)) (list (first arr)))]))\n  (define (helper7 arr)\n    (cond\n      [(empty? arr) '()]\n      [(empty? (rest arr)) (list (first arr))]\n      [else (append (helper7 (rest arr)) (list (first arr)))]))\n  (define (helper8 arr)\n    (cond\n      [(empty? arr) '()]\n      [(empty? (rest arr)) (list (first arr))]\n      [else (append (helper8 (rest arr)) (list (first arr)))]))\n  (define (helper9 arr)\n    (cond\n      [(empty",
    "  (define (sort_arr arr)\n    (sort arr (lambda (x y) (&gt; x y))))\n  (apply string (sort_arr arr)))\n",
    "  (define (find_Max_Num_helper arr acc)\n    (cond\n      [(null? arr) acc]\n      [(> (car arr) (car acc)) (find_Max_Num_helper (cdr arr) (car arr))]\n      [else (find_Max_Num_helper (cdr arr) acc)]))\n  (find_Max_Num_helper arr (list (car arr))))\n",
    "  (define (sort-by-first-digit lst)\n    (sort lst (lambda (x y) (> (car x) (car y)))))\n  (define (sort-by-last-digit lst)\n    (sort lst (lambda (x y) (< (car x) (car y)))))\n  (define (sort-by-second-digit lst)\n    (sort lst (lambda (x y) (> (cadr x) (cadr y)))))\n  (define (sort-by-third-digit lst)\n    (sort lst (lambda (x y) (< (cadr x) (cadr y)))))\n  (define (sort-by-fourth-digit lst)\n    (sort lst (lambda (x y) (> (caddr x) (caddr y)))))\n  (define (sort-by-fifth-digit lst)\n    (sort lst (lambda (x y) (< (caddr x) (caddr y)))))\n  (define (sort-by-sixth-digit lst)\n    (sort lst (lambda (x y) (> (cadddr x) (cadddr y)))))\n  (define (sort-by-seventh-digit lst)\n    (sort lst (lambda (x y) (< (cadddr x) (cadddr y)))))\n  (define (sort-by-eighth-digit lst)\n    (sort lst (lambda (x y) (> (caddddr x) (caddddr y)))))\n  (define (sort-by-ninth-digit lst)\n    (sort lst (lambda (x y) (< (caddddr x) (caddddr y)))))\n  (define (sort-by-tenth-digit lst)\n    (sort lst (lambda (x y) (> (cadddddr x) (cadddddr y)))))\n  (define (sort-by-eleventh-digit lst)\n    (sort lst (lambda (x y) (< (cadddddr x) (cadddddr y)))))\n  (define (sort-by-twelfth-digit l",
    "  (sort arr >))\n",
    "  (define (sort_arr arr)\n    (sort arr (lambda (x y) (&gt; x y))))\n  (apply string (sort_arr arr)))\n",
    "  (define (sort_arr arr)\n    (cond\n      [(null? arr) '()]\n      [else (append (sort_arr (filter (lambda (x) (&lt; x (car arr))) arr))\n                   (list (car arr))\n                   (sort_arr (filter (lambda (x) (&gt; x (car arr))) arr)))]))\n  (apply string (sort_arr arr)))\n",
    "  (define (sort-by-first-digit lst)\n    (sort lst (lambda (x y)\n                (> (first x) (first y)))))\n  (define (sort-by-last-digit lst)\n    (sort lst (lambda (x y)\n                (> (last x) (last y)))))\n  (define (sort-by-length lst)\n    (sort lst (lambda (x y)\n                (> (length x) (length y)))))\n  (define (sort-by-first-and-last lst)\n    (sort lst (lambda (x y)\n                (and (> (first x) (first y))\n                     (> (last x) (last y))))))\n  (define (sort-by-first-and-length lst)\n    (sort lst (lambda (x y)\n                (and (> (first x) (first y))\n                     (> (length x) (length y))))))\n  (define (sort-by-last-and-length lst)\n    (sort lst (lambda (x y)\n                (and (> (last x) (last y))\n                     (> (length x) (length y))))))\n  (define (sort-by-first-last-and-length lst)\n    (sort lst (lambda (x y)\n                (and (> (first x) (first y))\n                     (> (last x) (last y))\n                     (> (length x) (length y))))))\n  (define (sort-by-length-first-and-last lst)\n    (sort lst (lambda (x y)\n                (and (> (length x) (length y))\n                     (> (first x) (first y))\n                     (> (last x) (last y))))))\n  (define (sort-by-length-first-and-last-reverse lst)\n    (sort lst (lambda (x y)\n                (and (> (length x) (length y))\n                     (> (first x) (first y))\n                     (> (last x) (last y))))\n            #:key reverse))\n  (define (sort-by-length-first-and-last-reverse-reverse lst)\n    (",
    "  (define (find_Max_Num_helper arr acc)\n    (if (null? arr)\n        acc\n        (let ([max (max (car arr) (car acc))])\n          (if (equal? max (car arr))\n              (find_Max_Num_helper (cdr arr) (cons (car arr) (cdr acc)))\n              (find_Max_Num_helper (cdr arr) (cons max (cdr acc)))))))\n  (apply string (reverse (find_Max_Num_helper arr (list (car arr))))))\n",
    "  (sort arr >))\n",
    "  (sort arr (lambda (a b) (&gt; a b))))\n",
    "  (sort arr (lambda (x y) (> (number->string x) (number->string y)))))\n",
    "  (define (sort_arr arr)\n    (cond\n      [(empty? arr) empty]\n      [else\n       (append\n        (sort_arr (filter (lambda (x) (&lt; x (first arr))) (rest arr)))\n        (list (first arr))\n        (sort_arr (filter (lambda (x) (&gt; x (first arr))) (rest arr))))]))\n  (apply string (sort_arr arr)))\n",
    "  (define (find_Max_Num_helper arr acc)\n    (if (null? arr)\n        acc\n        (let ((new-acc (string-append (number->string (car arr)) acc)))\n          (find_Max_Num_helper (cdr arr) (if (> (string->number new-acc) (string->number acc))\n                                             new-acc\n                                             acc)))))\n  (find_Max_Num_helper arr \"\"))\n",
    "  (sort arr (lambda (x y) (&gt; (number-&gt;string x) (number-&gt;string y)))))\n",
    "  (sort arr >))\n",
    "  (define (sort_arr arr)\n    (sort arr (\u03bb (x y) (&gt; x y))))\n  (define (to_Num arr)\n    (apply string-&gt;number (list-&gt;string arr)))\n  (to_Num (sort_arr arr)))\n",
    "  (define (find_Max_Num_Helper arr acc)\n    (cond\n      [(empty? arr) acc]\n      [(> (first arr) (first acc)) (find_Max_Num_Helper (rest arr) (cons (first arr) (rest acc)))]\n      [else (find_Max_Num_Helper (rest arr) acc)]))\n  (find_Max_Num_Helper arr (list (first arr))))\n",
    "  (define (helper arr)\n    (if (null? arr)\n        '()\n        (cons (max (car arr) (car (helper (cdr arr))))\n              (helper (cdr arr)))))\n  (apply string (helper arr)))\n",
    "  (define (helper arr acc)\n    (if (null? arr)\n        acc\n        (let ([num (string->number (string-append acc (number->string (car arr))))])\n          (if (&gt; num (string->number acc))\n              (helper (cdr arr) (number->string num))\n              (helper (cdr arr) acc)))))\n  (helper arr \"\"))\n",
    "  (define (find_Max_Num_helper arr max)\n    (cond\n      [(empty? arr) max]\n      [(> (first arr) max) (find_Max_Num_helper (rest arr) (first arr))]\n      [else (find_Max_Num_helper (rest arr) max)]))\n  (find_Max_Num_helper arr 0))\n",
    "  (define (helper arr)\n    (if (null? arr)\n        '()\n        (cons (max (car arr) (helper (cdr arr))) '())))\n  (apply string->number (list->string (reverse (helper (reverse arr))))))\n",
    "  (sort arr (lambda (x y) (&gt; x y))))\n",
    "  (define (find_Max_Num_helper arr max)\n    (if (null? arr)\n        max\n        (if (&gt; (car arr) max)\n            (find_Max_Num_helper (cdr arr) (car arr))\n            (find_Max_Num_helper (cdr arr) max))))\n  (find_Max_Num_helper arr 0))\n",
    "  (define (find_Max_Num_helper arr max)\n    (if (null? arr)\n        max\n        (if (&gt; (car arr) max)\n            (find_Max_Num_helper (cdr arr) (car arr))\n            (find_Max_Num_helper (cdr arr) max))))\n  (find_Max_Num_helper arr 0))\n",
    "  (apply string->number (sort (map number->string arr) >)))\n",
    "  (define (find_Max_Num_helper arr max)\n    (cond\n      [(empty? arr) max]\n      [(> (first arr) max) (find_Max_Num_helper (rest arr) (first arr))]\n      [else (find_Max_Num_helper (rest arr) max)]))\n  (find_Max_Num_helper arr 0))\n",
    "  (define (find_Max_Num_helper arr max_num)\n    (cond\n      [(empty? arr) max_num]\n      [(> (first arr) (first max_num)) (find_Max_Num_helper (rest arr) (first arr))]\n      [else (find_Max_Num_helper (rest arr) max_num)]))\n  (find_Max_Num_helper arr (first arr)))\n",
    "  (define (sort_arr arr)\n    (sort arr (lambda (x y) (&gt; x y))))\n  (define (convert_arr arr)\n    (string-&gt;number (apply string-append (map number-&gt;string arr))))\n  (convert_arr (sort_arr arr)))\n",
    "  (define (helper arr)\n    (if (null? arr)\n        '()\n        (cons (max (car arr) (car (helper (cdr arr))))\n              (helper (cdr arr)))))\n  (apply string (helper arr)))\n",
    "  (define (find_Max_Num_Helper arr result)\n    (cond\n      [(empty? arr) result]\n      [(> (car arr) (car result)) (find_Max_Num_Helper (cdr arr) (car arr))]\n      [else (find_Max_Num_Helper (cdr arr) result)]))\n  (find_Max_Num_Helper arr (list (car arr))))\n",
    "  (define (sort_arr arr)\n    (sort arr (lambda (x y) (&gt; x y))))\n  (define (convert_arr arr)\n    (string-&gt;number (apply string-append (map number-&gt;string arr))))\n  (convert_arr (sort_arr arr)))\n",
    "  (define (find_Max_Num_helper arr max)\n    (if (null? arr)\n        max\n        (if (&gt; (car arr) max)\n            (find_Max_Num_helper (cdr arr) (car arr))\n            (find_Max_Num_helper (cdr arr) max))))\n  (find_Max_Num_helper arr 0))\n",
    "  (define (helper arr acc)\n    (if (null? arr)\n        acc\n        (let ([max (max (car arr) acc)])\n          (helper (cdr arr) max))))\n  (helper arr 0))\n",
    "  (define (find_Max_Num_helper arr max)\n    (cond\n      [(empty? arr) max]\n      [(> (first arr) max) (find_Max_Num_helper (rest arr) (first arr))]\n      [else (find_Max_Num_helper (rest arr) max)]))\n  (find_Max_Num_helper arr 0))\n",
    "  (define (find_Max_Num_Helper arr max_num)\n    (cond\n      [(empty? arr) max_num]\n      [(> (first arr) max_num) (find_Max_Num_Helper (rest arr) (first arr))]\n      [else (find_Max_Num_Helper (rest arr) max_num)]))\n  (find_Max_Num_Helper arr 0))\n",
    "  (apply string->number (sort arr >)))\n",
    "  (define (find_Max_Num_helper arr max)\n    (cond [(empty? arr) max]\n          [(> (first arr) max) (find_Max_Num_helper (rest arr) (first arr))]\n          [else (find_Max_Num_helper (rest arr) max)]))\n  (find_Max_Num_helper arr 0))\n",
    "  (sort arr >))\n",
    "  (apply string->number (sort (map number->string arr) >)))\n",
    "  (define (find_Max_Num_helper arr max)\n    (if (null? arr)\n        max\n        (if (&gt; (car arr) max)\n            (find_Max_Num_helper (cdr arr) (car arr))\n            (find_Max_Num_helper (cdr arr) max))))\n  (find_Max_Num_helper arr 0))\n",
    "  (define (find_Max_Num_helper arr max)\n    (cond\n      [(empty? arr) max]\n      [(> (first arr) max) (find_Max_Num_helper (rest arr) (first arr))]\n      [else (find_Max_Num_helper (rest arr) max)]))\n  (find_Max_Num_helper arr 0))\n",
    "  (define (find_Max_Num_helper arr acc)\n    (if (null? arr)\n        acc\n        (let ([max (max (car arr) (car acc))])\n          (if (equal? max (car arr))\n              (find_Max_Num_helper (cdr arr) (cons max acc))\n              (find_Max_Num_helper (cdr arr) (cons (car arr) acc))))))\n  (apply string->number (list->string (reverse (find_Max_Num_helper arr (list (car arr)))))))\n",
    "  (define (helper arr)\n    (if (null? arr)\n        '()\n        (cons (max (car arr) (helper (cdr arr)))\n              (helper (cdr arr)))))\n  (string->number (list->string (helper arr))))\n",
    "  (define (helper arr)\n    (cond\n      [(empty? arr) empty]\n      [(< (first arr) (second arr)) (cons (second arr) (helper (rest arr)))]\n      [else (cons (first arr) (helper (rest arr)))]))\n  (apply string->number (list->string (helper arr))))\n",
    "  (define (find_Max_Num_Helper arr)\n    (if (empty? arr)\n        '()\n        (cons (max (first arr) (apply max (rest arr)))\n              (find_Max_Num_Helper (remove (first arr) arr)))))\n  (apply string->number (list->string (find_Max_Num_Helper arr))))\n",
    "  (sort arr >))\n",
    "  (define (find_Max_Num_helper arr max_num)\n    (if (null? arr)\n        max_num\n        (let ([num (string->number (list->string (sort arr >)))])\n          (if (> num max_num)\n              (find_Max_Num_helper (cdr arr) num)\n              (find_Max_Num_helper (cdr arr) max_num)))))\n  (find_Max_Num_helper arr 0))\n",
    "  (define (find_Max_Num_helper arr acc)\n    (if (null? arr)\n        acc\n        (let* ([curr (car arr)]\n               [acc (if (&gt; curr acc) curr acc)])\n          (find_Max_Num_helper (cdr arr) acc))))\n  (find_Max_Num_helper arr 0))\n",
    "  (sort arr >))\n",
    "  (apply string->number (sort (map number->string arr) >)))\n",
    "  (define (find_Max_Num_helper arr max)\n    (if (null? arr)\n        max\n        (let ([num (string->number (list->string arr))])\n          (if (> num max)\n              (find_Max_Num_helper (cdr arr) num)\n              (find_Max_Num_helper (cdr arr) max)))))\n  (find_Max_Num_helper arr 0))\n",
    "  (define (sort_arr arr)\n    (sort arr >))\n  (apply string (sort_arr arr)))\n",
    "  (define (helper arr)\n    (cond\n      [(null? arr) '()]\n      [(= (length arr) 1) arr]\n      [else (append (helper (cdr arr)) (list (car arr)))]))\n  (define (helper2 arr)\n    (cond\n      [(null? arr) '()]\n      [(= (length arr) 1) arr]\n      [else (append (helper2 (cdr arr)) (list (car arr)))]))\n  (define (helper3 arr)\n    (cond\n      [(null? arr) '()]\n      [(= (length arr) 1) arr]\n      [else (append (helper3 (cdr arr)) (list (car arr)))]))\n  (define (helper4 arr)\n    (cond\n      [(null? arr) '()]\n      [(= (length arr) 1) arr]\n      [else (append (helper4 (cdr arr)) (list (car arr)))]))\n  (define (helper5 arr)\n    (cond\n      [(null? arr) '()]\n      [(= (length arr) 1) arr]\n      [else (append (helper5 (cdr arr)) (list (car arr)))]))\n  (define (helper6 arr)\n    (cond\n      [(null? arr) '()]\n      [(= (length arr) 1) arr]\n      [else (append (helper6 (cdr arr)) (list (car arr)))]))\n  (define (helper7 arr)\n    (cond\n      [(null? arr) '()]\n      [(= (length arr) 1) arr]\n      [else (append (helper7 (cdr arr)) (list (car arr)))]))\n  (define (helper8 arr)\n    (cond\n      [(null? arr) '()]\n      [(= (length arr) 1) arr]\n      [else (append (helper8 (cdr arr)) (list (car arr)))]))\n  (define (helper9 arr)\n    (cond\n      [(null? arr) '()]\n      [(= (length arr) 1) arr]\n      [else (append",
    "  (define (find_Max_Num_Helper arr max)\n    (if (null? arr)\n        max\n        (let* ([curr (car arr)]\n               [new-max (if (&gt; curr max) curr max)])\n          (find_Max_Num_Helper (cdr arr) new-max))))\n  (find_Max_Num_Helper arr 0))\n",
    "  (define (find_Max_Num_Helper arr acc)\n    (if (null? arr)\n        acc\n        (find_Max_Num_Helper (cdr arr) (string-append acc (number->string (car arr))))))\n  (string->number (find_Max_Num_Helper arr \"\")))\n",
    "  (define (sort-by-first-digit lst)\n    (sort lst (lambda (x y) (> (first x) (first y)))))\n  (define (concat-list lst)\n    (string-append (map number->string lst)))\n  (concat-list (sort-by-first-digit arr)))\n",
    "  (sort arr (lambda (a b) (&gt; a b))))\n",
    "  (cond\n    [(null? arr) \"\"]\n    [(= (length arr) 1) (number->string (car arr))]\n    [else\n     (let* ([sorted (sort arr <)]\n            [max (car sorted)]\n            [rest (cdr sorted)]\n            [max-str (number->string max)]\n            [rest-str (find_Max_Num rest)])\n       (string-append max-str rest-str))]))\n",
    "  (define (helper arr)\n    (cond [(empty? arr) '()]\n          [(empty? (rest arr)) arr]\n          [else (cons (max (first arr) (second arr)) (helper (rest arr)))]))\n  (define (helper2 arr)\n    (cond [(empty? arr) '()]\n          [(empty? (rest arr)) arr]\n          [else (cons (min (first arr) (second arr)) (helper2 (rest arr)))]))\n  (define (helper3 arr)\n    (cond [(empty? arr) '()]\n          [(empty? (rest arr)) arr]\n          [else (cons (min (first arr) (second arr)) (helper3 (rest arr)))]))\n  (define (helper4 arr)\n    (cond [(empty? arr) '()]\n          [(empty? (rest arr)) arr]\n          [else (cons (min (first arr) (second arr)) (helper4 (rest arr)))]))\n  (define (helper5 arr)\n    (cond [(empty? arr) '()]\n          [(empty? (rest arr)) arr]\n          [else (cons (min (first arr) (second arr)) (helper5 (rest arr)))]))\n  (define (helper6 arr)\n    (cond [(empty? arr) '()]\n          [(empty? (rest arr)) arr]\n          [else (cons (min (first arr) (second arr)) (helper6 (rest arr)))]))\n  (define (helper7 arr)\n    (cond [(empty? arr) '()]\n          [(empty? (rest arr)) arr]\n          [else (cons (min (first arr) (second arr)) (helper7 (rest arr)))]))\n  (define (helper8 arr)\n    (cond [(empty? arr) '()]\n          [(empty? (rest arr)) arr]\n          [else (cons (min (first arr) (second arr)) (helper8 (rest arr)))]))\n  (define (helper9 arr)\n    (cond [(empty? arr) '()]\n          [(empty? (rest arr)) arr]\n          [else (cons (min (",
    "  (define (find_Max_Num_helper arr max)\n    (if (null? arr)\n        max\n        (let ([curr (car arr)])\n          (if (&gt; curr max)\n              (find_Max_Num_helper (cdr arr) curr)\n              (find_Max_Num_helper (cdr arr) max)))))\n  (find_Max_Num_helper arr 0))\n",
    "  (string->number (apply string-append (sort (map number->string arr) >))))\n",
    "  (define (find_Max_Num_helper arr max)\n    (if (null? arr)\n        max\n        (if (&gt; (car arr) max)\n            (find_Max_Num_helper (cdr arr) (car arr))\n            (find_Max_Num_helper (cdr arr) max))))\n  (find_Max_Num_helper arr 0))\n",
    "  (define (find_Max_Num_Helper arr)\n    (if (null? arr)\n        '()\n        (append (list (max (car arr) (car (cdr arr))))\n                (find_Max_Num_Helper (cdr (cdr arr))))))\n  (apply string (find_Max_Num_Helper (sort arr string<?))))\n",
    "  (apply string->number (sort (map number->string arr) >)))\n",
    "  (define (helper arr acc)\n    (cond\n      [(empty? arr) (list->number (reverse acc))]\n      [else (helper (cdr arr) (cons (max (car arr) (car acc)) (cdr acc)))]))\n  (helper arr (list (car arr))))\n",
    "  (sort arr >))\n",
    "  (define (find_Max_Num_helper arr max)\n    (if (null? arr)\n        max\n        (if (&gt; (car arr) max)\n            (find_Max_Num_helper (cdr arr) (car arr))\n            (find_Max_Num_helper (cdr arr) max))))\n  (find_Max_Num_helper arr 0))\n",
    "  (define (find_Max_Num_helper arr)\n    (if (null? arr)\n        '()\n        (append (list (max (car arr) (car (cdr arr))))\n                (find_Max_Num_helper (cdr (cdr arr))))))\n  (string->number (list->string (find_Max_Num_helper (string->list (number->string (apply * arr)))))))\n",
    "  (sort arr >))\n",
    "  (define (helper arr)\n    (if (null? arr)\n        '()\n        (cons (max (car arr) (car (helper (cdr arr))))\n              (helper (cdr arr)))))\n  (apply string (helper arr)))\n",
    "  (apply string->number (sort (map number->string arr) >)))\n",
    "  (apply string->number (sort (map number->string arr) >)))\n",
    "  (define (find_Max_Num_Helper arr acc)\n    (cond\n      [(empty? arr) acc]\n      [(> (first arr) (first acc)) (find_Max_Num_Helper (rest arr) (cons (first arr) (rest acc)))]\n      [(< (first arr) (first acc)) (find_Max_Num_Helper (rest arr) acc)]\n      [else (find_Max_Num_Helper (rest arr) acc)]))\n  (find_Max_Num_Helper arr (list (first arr))))\n",
    "  (sort arr >))\n",
    "  (define (helper arr acc)\n    (if (null? arr)\n        acc\n        (helper (cdr arr) (string-append acc (number->string (car arr))))))\n  (string->number (helper arr \"\")))\n",
    "  (define (find_Max_Num_Helper arr acc)\n    (if (null? arr)\n        acc\n        (let ([max (max (number->string (car arr)) acc)])\n          (find_Max_Num_Helper (cdr arr) max))))\n  (string->number (find_Max_Num_Helper arr \"0\")))\n",
    "  (define (find_Max_Num_helper arr max)\n    (if (null? arr)\n        max\n        (if (&gt; (car arr) max)\n            (find_Max_Num_helper (cdr arr) (car arr))\n            (find_Max_Num_helper (cdr arr) max))))\n  (find_Max_Num_helper arr 0))\n",
    "  (define (find_Max_Num_Helper arr result)\n    (cond\n      [(empty? arr) result]\n      [(> (first arr) (first result)) (find_Max_Num_Helper (rest arr) (first arr))]\n      [else (find_Max_Num_Helper (rest arr) result)]))\n  (find_Max_Num_Helper arr (list (first arr))))\n",
    "  (define (helper arr)\n    (cond\n      [(empty? arr) empty]\n      [(< (first arr) (second arr)) (cons (second arr) (helper (rest arr)))]\n      [else (cons (first arr) (helper (rest arr)))]))\n  (apply string->number (list->string (helper (sort arr <)))))\n",
    "  (apply string->number (sort (map number->string arr) >)))\n",
    "  (define (helper arr acc)\n    (cond [(null? arr) acc]\n          [else (helper (cdr arr) (string-append acc (number->string (car arr))))]))\n  (string->number (helper arr \"\")))\n",
    "  (define (find_Max_Num_helper arr acc)\n    (cond\n      [(null? arr) acc]\n      [(> (car arr) (car acc)) (find_Max_Num_helper (cdr arr) (car arr))]\n      [else (find_Max_Num_helper (cdr arr) (car acc))]))\n  (find_Max_Num_helper arr (list (car arr))))\n",
    "  (sort arr (lambda (x y) (&gt; x y))))\n",
    "  (define (find_Max_Num_helper arr max)\n    (cond\n      [(null? arr) max]\n      [(> (car arr) max) (find_Max_Num_helper (cdr arr) (car arr))]\n      [else (find_Max_Num_helper (cdr arr) max)]))\n  (find_Max_Num_helper arr 0))\n",
    "  (define (find_Max_Num_helper arr max_num)\n    (cond [(empty? arr) max_num]\n          [else (let* ([curr_num (string->number (list->string (list-ref arr 0)))])\n                  (if (> curr_num max_num)\n                      (find_Max_Num_helper (cdr arr) curr_num)\n                      (find_Max_Num_helper (cdr arr) max_num)))]))\n  (find_Max_Num_helper arr 0))\n",
    "  (apply string->number (sort (map number->string arr) >)))\n",
    "  (define (find_Max_Num_Helper arr max)\n    (cond\n      [(empty? arr) max]\n      [(> (first arr) max) (find_Max_Num_Helper (rest arr) (first arr))]\n      [else (find_Max_Num_Helper (rest arr) max)]))\n  (find_Max_Num_Helper arr 0))\n",
    "  (define (helper arr)\n    (if (null? arr)\n        '()\n        (cons (max (car arr) (helper (cdr arr))) '())))\n  (string->number (list->string (helper arr))))\n",
    "  (define (find_Max_Num_helper arr max)\n    (if (null? arr)\n        max\n        (if (&gt; (car arr) max)\n            (find_Max_Num_helper (cdr arr) (car arr))\n            (find_Max_Num_helper (cdr arr) max))))\n  (find_Max_Num_helper arr 0))\n",
    "  (define (find_Max_Num_helper arr acc)\n    (cond\n      [(empty? arr) acc]\n      [(> (first arr) (first acc)) (find_Max_Num_helper (rest arr) (cons (first arr) (rest acc)))]\n      [else (find_Max_Num_helper (rest arr) acc)]))\n  (find_Max_Num_helper arr (list (first arr))))\n",
    "  (define (find_Max_Num_helper arr acc)\n    (cond\n      [(null? arr) acc]\n      [(> (car arr) (car acc)) (find_Max_Num_helper (cdr arr) (cons (car arr) (cdr acc)))]\n      [else (find_Max_Num_helper (cdr arr) acc)]))\n  (apply string->number (list->string (find_Max_Num_helper arr (list (car arr))))))\n",
    "  (apply string->number (sort > (map number->string arr))))\n",
    "  (define (find_Max_Num_Helper arr result)\n    (if (null? arr)\n        result\n        (let ([max (max (car arr) (car result))])\n          (if (= max (car arr))\n              (find_Max_Num_Helper (cdr arr) (cons max (cdr result)))\n              (find_Max_Num_Helper (cdr arr) (cons (car arr) (cons max (cdr result))))))))\n  (find_Max_Num_Helper arr (list (car arr))))\n",
    "  (sort arr >))\n",
    "  (sort arr >))\n",
    "  (sort arr >))\n",
    "  (define (find_Max_Num_helper arr acc)\n    (cond\n      [(empty? arr) acc]\n      [else (find_Max_Num_helper (rest arr) (max acc (first arr)))]))\n  (find_Max_Num_helper arr 0))\n",
    "  (define (find_Max_Num_helper arr max_num)\n    (cond\n      [(empty? arr) max_num]\n      [(> (first arr) max_num) (find_Max_Num_helper (rest arr) (first arr))]\n      [else (find_Max_Num_helper (rest arr) max_num)]))\n  (find_Max_Num_helper arr 0))\n",
    "  (define (sort_arr arr)\n    (sort arr (lambda (a b) (&gt; a b))))\n  (define (to_string arr)\n    (apply string arr))\n  (to_string (sort_arr arr)))\n",
    "  (define (helper arr acc)\n    (if (null? arr)\n        acc\n        (let ([max (max (first arr) (second arr))])\n          (if (null? (cddr arr))\n              (helper (cdr arr) (cons max acc))\n              (helper (cdr arr) (cons (max (first (cddr arr)) max) acc))))))\n  (apply string->number (reverse (helper arr '()))))\n",
    "  (define (find_Max_Num_helper arr max)\n    (if (null? arr)\n        max\n        (let ([curr (car arr)])\n          (if (&gt; curr max)\n              (find_Max_Num_helper (cdr arr) curr)\n              (find_Max_Num_helper (cdr arr) max)))))\n  (find_Max_Num_helper arr 0))\n",
    "  (sort arr >))\n",
    "  (define (helper arr)\n    (if (null? arr)\n        '()\n        (cons (max (car arr) (car (helper (cdr arr))))\n              (helper (cdr arr)))))\n  (apply string (helper arr)))\n",
    "  (define (find_Max_Num_helper arr max)\n    (cond\n      [(empty? arr) max]\n      [(> (first arr) max) (find_Max_Num_helper (rest arr) (first arr))]\n      [else (find_Max_Num_helper (rest arr) max)]))\n  (find_Max_Num_helper arr 0))\n",
    "  (define (helper arr)\n    (if (null? arr)\n        '()\n        (cons (apply max arr) (helper (remove (apply max arr) arr)))))\n  (apply string (helper arr)))\n",
    "  (define (compare a b)\n    (cond\n      [(< (string->number a) (string->number b)) b]\n      [else a]))\n  (define (find_Max_Num_helper arr acc)\n    (cond\n      [(empty? arr) acc]\n      [else (find_Max_Num_helper (rest arr) (compare (first arr) acc))]))\n  (find_Max_Num_helper arr (first arr)))\n",
    "  (sort arr >))\n",
    "  (define (find_Max_Num_helper arr acc)\n    (if (null? arr)\n        acc\n        (let* ([curr (car arr)]\n               [acc (if (&gt; curr acc) curr acc)])\n          (find_Max_Num_helper (cdr arr) acc))))\n  (find_Max_Num_helper arr 0))\n",
    "  (define (helper arr)\n    (if (null? arr)\n        '()\n        (cons (max (car arr) (helper (cdr arr)))\n              (helper (cdr arr)))))\n  (apply string->number (list->string (helper arr))))\n",
    "  (define (find_Max_Num_Helper arr max)\n    (if (null? arr)\n        max\n        (if (&gt; (car arr) max)\n            (find_Max_Num_Helper (cdr arr) (car arr))\n            (find_Max_Num_Helper (cdr arr) max))))\n  (find_Max_Num_Helper arr 0))\n",
    "  (apply string->number (sort > (map number->string arr))))\n",
    "  (define (helper arr acc)\n    (if (empty? arr)\n        acc\n        (let* ([num (number->string (car arr))]\n               [acc (string-append acc num)])\n          (helper (cdr arr) acc))))\n  (string->number (helper arr \"\")))\n",
    "  (define (sort_arr arr)\n    (sort arr (lambda (x y) (> x y))))\n  (apply string (sort_arr arr)))\n",
    "  (define (helper arr)\n    (cond\n      [(null? arr) '()]\n      [(null? (cdr arr)) (list (car arr))]\n      [else (cons (car arr) (helper (cdr arr)))]))\n  (string->number (list->string (sort (helper arr) >))))\n",
    "  (sort arr >))\n",
    "  (define (find_Max_Num_Helper arr max)\n    (if (null? arr)\n        max\n        (if (&gt; (car arr) max)\n            (find_Max_Num_Helper (cdr arr) (car arr))\n            (find_Max_Num_Helper (cdr arr) max))))\n  (find_Max_Num_Helper arr 0))\n",
    "  (define (sort arr)\n    (if (null? arr)\n        '()\n        (append (sort (filter (lambda (x) (&lt; x (car arr))) arr))\n                (list (car arr))\n                (sort (filter (lambda (x) (&gt; x (car arr))) arr)))))\n  (apply string (sort arr)))\n",
    "  (define (find_Max_Num_helper arr acc)\n    (if (null? arr)\n        acc\n        (let ([max (max (car arr) (car acc))])\n          (if (= max (car arr))\n              (find_Max_Num_helper (cdr arr) (cons max acc))\n              (find_Max_Num_helper (cdr arr) (cons (car arr) acc))))))\n  (apply string (reverse (find_Max_Num_helper arr (list (car arr))))))\n",
    "  (define (find_Max_Num_helper arr max_num)\n    (if (null? arr)\n        max_num\n        (if (&gt; (car arr) max_num)\n            (find_Max_Num_helper (cdr arr) (car arr))\n            (find_Max_Num_helper (cdr arr) max_num))))\n  (find_Max_Num_helper arr 0))\n",
    "  (define (find_Max_Num_Helper arr max)\n    (if (null? arr)\n        max\n        (if (&gt; (car arr) max)\n            (find_Max_Num_Helper (cdr arr) (car arr))\n            (find_Max_Num_Helper (cdr arr) max))))\n  (find_Max_Num_Helper arr 0))\n",
    "  (define (helper arr)\n    (if (null? arr)\n        '()\n        (cons (max (car arr) (helper (cdr arr))) '())))\n  (apply string (reverse (helper arr))))\n",
    "  (define (helper arr)\n    (if (null? arr)\n        '()\n        (cons (max (car arr) (car (helper (cdr arr))))\n              (helper (cdr arr)))))\n  (apply string (helper arr)))\n",
    "  (define (find_Max_Num_Helper arr max)\n    (if (null? arr)\n        max\n        (let ([current (car arr)])\n          (if (&gt; current max)\n              (find_Max_Num_Helper (cdr arr) current)\n              (find_Max_Num_Helper (cdr arr) max)))))\n  (find_Max_Num_Helper arr 0))\n",
    "  (define (helper arr acc)\n    (if (null? arr)\n        acc\n        (let ((curr (car arr)))\n          (if (> curr (car acc))\n              (helper (cdr arr) (cons curr acc))\n              (helper (cdr arr) acc)))))\n  (apply string (reverse (helper arr (list (car arr))))))\n",
    "  (sort arr >))\n",
    "  (sort arr >))\n",
    "  (define (find_Max_Num_helper arr max_num)\n    (if (null? arr)\n        max_num\n        (let ([num (string->number (list->string (sort arr >)))])\n          (if (> num max_num)\n              (find_Max_Num_helper (cdr arr) num)\n              (find_Max_Num_helper (cdr arr) max_num)))))\n  (find_Max_Num_helper arr 0))\n",
    "  (define (helper arr)\n    (cond\n      [(empty? arr) empty]\n      [(empty? (rest arr)) (list (first arr))]\n      [else (append (helper (rest arr)) (list (first arr)))]))\n  (define (helper2 arr)\n    (cond\n      [(empty? arr) empty]\n      [(empty? (rest arr)) (list (first arr))]\n      [else (append (helper2 (rest arr)) (list (first arr)))]))\n  (define (helper3 arr)\n    (cond\n      [(empty? arr) empty]\n      [(empty? (rest arr)) (list (first arr))]\n      [else (append (helper3 (rest arr)) (list (first arr)))]))\n  (define (helper4 arr)\n    (cond\n      [(empty? arr) empty]\n      [(empty? (rest arr)) (list (first arr))]\n      [else (append (helper4 (rest arr)) (list (first arr)))]))\n  (define (helper5 arr)\n    (cond\n      [(empty? arr) empty]\n      [(empty? (rest arr)) (list (first arr))]\n      [else (append (helper5 (rest arr)) (list (first arr)))]))\n  (define (helper6 arr)\n    (cond\n      [(empty? arr) empty]\n      [(empty? (rest arr)) (list (first arr))]\n      [else (append (helper6 (rest arr)) (list (first arr)))]))\n  (define (helper7 arr)\n    (cond\n      [(empty? arr) empty]\n      [(empty? (rest arr)) (list (first arr))]\n      [else (append (helper7 (rest arr)) (list (first arr)))]))\n  (define (helper8 arr)\n    (cond\n      [(empty? arr) empty]\n      [(empty? (rest arr)) (list (first arr))]\n      [else (append (helper8 (rest arr)) (list (first arr)))]))\n  (define (helper9 arr)\n    (cond\n      [(empty? arr) empty]\n      [(",
    "  (define (find_Max_Num_helper arr max)\n    (if (null? arr)\n        max\n        (if (&gt; (car arr) max)\n            (find_Max_Num_helper (cdr arr) (car arr))\n            (find_Max_Num_helper (cdr arr) max))))\n  (find_Max_Num_helper arr 0))\n",
    "  (define (find_Max_Num_helper arr max)\n    (cond\n      [(empty? arr) max]\n      [(> (first arr) max) (find_Max_Num_helper (rest arr) (first arr))]\n      [else (find_Max_Num_helper (rest arr) max)]))\n  (find_Max_Num_helper arr 0))\n",
    "  (define (find_Max_Num_helper arr max)\n    (if (null? arr)\n        max\n        (if (&gt; (car arr) max)\n            (find_Max_Num_helper (cdr arr) (car arr))\n            (find_Max_Num_helper (cdr arr) max))))\n  (find_Max_Num_helper arr 0))\n",
    "  (define (helper arr)\n    (if (null? arr)\n        '()\n        (cons (max (car arr) (car (helper (cdr arr))))\n              (helper (cdr arr)))))\n  (apply string (helper arr)))\n",
    "  (sort arr (lambda (x y) (&gt; x y))))\n",
    "  (sort arr (lambda (x y) (&gt; x y))))\n",
    "  (define (find_Max_Num_helper arr max)\n    (if (null? arr)\n        max\n        (if (&gt; (car arr) max)\n            (find_Max_Num_helper (cdr arr) (car arr))\n            (find_Max_Num_helper (cdr arr) max))))\n  (find_Max_Num_helper arr 0))\n",
    "  (sort arr >))\n",
    "  (sort arr >))\n",
    "  (apply string->number (sort (map number->string arr) >)))\n",
    "  (define (find_Max_Num_Helper arr max)\n    (if (null? arr)\n        max\n        (let ([curr (car arr)])\n          (if (> curr max)\n              (find_Max_Num_Helper (cdr arr) curr)\n              (find_Max_Num_Helper (cdr arr) max)))))\n  (find_Max_Num_Helper arr 0))\n",
    "  (sort arr (lambda (x y) (&gt; x y))))\n",
    "  (define (find_Max_Num_helper arr max)\n    (cond\n      [(empty? arr) max]\n      [(> (first arr) max) (find_Max_Num_helper (rest arr) (first arr))]\n      [else (find_Max_Num_helper (rest arr) max)]))\n  (find_Max_Num_helper arr 0))\n",
    "  (define (helper arr)\n    (if (null? arr)\n        '()\n        (cons (max (car arr) (car (helper (cdr arr))))\n              (helper (cdr arr)))))\n  (string->number (list->string (helper arr))))\n",
    "  (sort arr >))\n",
    "  (define (find_Max_Num_Helper arr max)\n    (if (null? arr)\n        max\n        (let ([curr (car arr)])\n          (if (&gt; curr max)\n              (find_Max_Num_Helper (cdr arr) curr)\n              (find_Max_Num_Helper (cdr arr) max)))))\n  (find_Max_Num_Helper arr 0))\n",
    "  (define (helper arr)\n    (cond [(empty? arr) empty]\n          [else (cons (max (first arr) (first (helper (rest arr))))\n                      (helper (rest arr)))]))\n  (apply string (helper arr)))\n",
    "  (define (find_Max_Num_helper arr max)\n    (cond\n      [(empty? arr) max]\n      [(> (first arr) max) (find_Max_Num_helper (rest arr) (first arr))]\n      [else (find_Max_Num_helper (rest arr) max)]))\n  (find_Max_Num_helper arr 0))\n",
    "  (apply string->number (sort (map number->string arr) >)))\n",
    "  (define (helper arr acc)\n    (cond [(empty? arr) acc]\n          [(< (first arr) (first acc)) (helper (rest arr) acc)]\n          [else (helper (rest arr) (cons (first arr) acc))]))\n  (apply string (helper arr '())))\n",
    "  (define (find_Max_Num_helper arr max)\n    (if (null? arr)\n        max\n        (if (> (car arr) max)\n            (find_Max_Num_helper (cdr arr) (car arr))\n            (find_Max_Num_helper (cdr arr) max))))\n  (find_Max_Num_helper arr 0))\n",
    "  (define (find_Max_Num_helper arr max)\n    (cond\n      [(empty? arr) max]\n      [(> (first arr) max) (find_Max_Num_helper (rest arr) (first arr))]\n      [else (find_Max_Num_helper (rest arr) max)]))\n  (find_Max_Num_helper arr 0))\n",
    "  (define (find_Max_Num_Helper arr acc)\n    (cond\n      [(empty? arr) acc]\n      [(> (first arr) (first acc)) (find_Max_Num_Helper (rest arr) (first arr))]\n      [else (find_Max_Num_Helper (rest arr) acc)]))\n  (find_Max_Num_Helper arr (list 0)))\n",
    "  (define (find_Max_Num_helper arr max)\n    (cond\n      [(empty? arr) max]\n      [else (if (> (first arr) max)\n                (find_Max_Num_helper (rest arr) (first arr))\n                (find_Max_Num_helper (rest arr) max))]))\n  (find_Max_Num_helper arr 0))\n",
    "  (sort arr >))\n",
    "  (define (helper arr)\n    (if (empty? arr)\n        '()\n        (cons (max (car arr) (helper (cdr arr)))\n              (helper (cdr arr)))))\n  (apply string->number (list->string (reverse (helper (reverse arr))))))\n",
    "  (define (find_Max_Num_Helper arr max)\n    (if (null? arr)\n        max\n        (if (&gt; (car arr) max)\n            (find_Max_Num_Helper (cdr arr) (car arr))\n            (find_Max_Num_Helper (cdr arr) max))))\n  (find_Max_Num_Helper arr 0))\n",
    "  (sort arr >))\n",
    "  (sort arr >))\n",
    "  (define (find_Max_Num_helper arr max_num)\n    (if (null? arr)\n        max_num\n        (let ((num (string->number (list->string (sort arr >)))))\n          (if (> num max_num)\n              (find_Max_Num_helper (cdr arr) num)\n              (find_Max_Num_helper (cdr arr) max_num)))))\n  (find_Max_Num_helper arr 0))\n",
    "  (define (sort-by-first-digit lst)\n    (sort lst (lambda (x y) (> (first x) (first y)))))\n  (define (concat-digits lst)\n    (apply string-append (map number->string lst)))\n  (concat-digits (sort-by-first-digit arr)))\n",
    "  (apply string->number (sort > (map number->string arr))))\n",
    "  (define (find_Max_Num_helper arr max)\n    (if (null? arr)\n        max\n        (if (> (car arr) max)\n            (find_Max_Num_helper (cdr arr) (car arr))\n            (find_Max_Num_helper (cdr arr) max))))\n  (find_Max_Num_helper arr 0))\n",
    "  (define (find_Max_Num_helper arr acc)\n    (cond\n      [(empty? arr) acc]\n      [(> (first arr) (first acc)) (find_Max_Num_helper (rest arr) (cons (first arr) (rest acc)))]\n      [else (find_Max_Num_helper (rest arr) acc)]))\n  (find_Max_Num_helper arr (list (first arr))))\n",
    "  (sort arr >))\n",
    "  (sort arr (lambda (a b) (> (number->string a) (number->string b)))))\n",
    "  (sort arr >))\n",
    "  (define (helper arr)\n    (if (null? arr)\n        '()\n        (cons (max (car arr) (car (helper (cdr arr))))\n              (helper (cdr arr)))))\n  (apply string (helper arr)))\n",
    "  (define (helper arr)\n    (if (empty? arr)\n        '()\n        (cons (max (first arr) (apply max (rest arr)))\n              (helper (rest arr)))))\n  (apply string->number (list->string (helper arr))))\n",
    "  (sort arr (lambda (x y) (&gt; x y))))\n",
    "  (cond\n    [(null? arr) 0]\n    [else (max (find_Max_Num (cdr arr)) (car arr))]))\n",
    "  (define (find_Max_Num_helper arr max)\n    (cond\n      [(empty? arr) max]\n      [(> (first arr) max) (find_Max_Num_helper (rest arr) (first arr))]\n      [else (find_Max_Num_helper (rest arr) max)]))\n  (find_Max_Num_helper arr 0))\n",
    "  (sort arr >))\n",
    "  (define (find_Max_Num_helper arr max)\n    (if (null? arr)\n        max\n        (if (&gt; (car arr) max)\n            (find_Max_Num_helper (cdr arr) (car arr))\n            (find_Max_Num_helper (cdr arr) max))))\n  (find_Max_Num_helper arr 0))\n</code>\n",
    "  (define (find_Max_Num_helper arr max)\n    (if (null? arr)\n        max\n        (let ([new-max (if (&gt; (car arr) max) (car arr) max)])\n          (find_Max_Num_helper (cdr arr) new-max))))\n  (find_Max_Num_helper arr 0))\n",
    "  (sort arr >))\n",
    "  (apply string->number (sort (map number->string arr) >)))\n",
    "  (sort arr >))\n",
    "  (define (helper arr)\n    (cond\n      [(null? arr) '()]\n      [(null? (cdr arr)) (list (car arr))]\n      [else (cons (car arr) (helper (cdr arr)))]))\n  (string->number (list->string (sort (helper arr) >))))\n",
    "  (apply string->number (sort > (map number->string arr))))\n",
    "  (define (helper arr acc)\n    (cond\n      [(empty? arr) acc]\n      [(> (first arr) (first acc)) (helper (rest arr) (cons (first arr) (rest acc)))]\n      [else (helper (rest arr) acc)]))\n  (helper arr (list (first arr))))\n",
    "  (define (find_Max_Num_helper arr max)\n    (if (null? arr)\n        max\n        (let ((curr (car arr)))\n          (if (&gt; curr max)\n              (find_Max_Num_helper (cdr arr) curr)\n              (find_Max_Num_helper (cdr arr) max)))))\n  (find_Max_Num_helper arr 0))\n",
    "  (define (helper arr)\n    (if (null? arr)\n        '()\n        (cons (max (car arr) (helper (cdr arr)))\n              (helper (cdr arr)))))\n  (apply string (reverse (helper arr))))\n",
    "  (define (find_Max_Num_Helper arr acc)\n    (cond\n      [(empty? arr) (number->string acc)]\n      [else (find_Max_Num_Helper (cdr arr) (string-append (number->string (car arr)) acc))]))\n  (find_Max_Num_Helper arr \"\"))\n",
    "  (sort arr >))\n",
    "  (sort arr >))\n",
    "  (define (helper arr)\n    (if (null? arr)\n        '()\n        (cons (max (car arr) (car (helper (cdr arr))))\n              (helper (cdr arr)))))\n  (apply string (helper arr)))\n",
    "  (define (find_Max_Num_Helper arr max_num)\n    (cond\n      [(empty? arr) max_num]\n      [(> (first arr) max_num) (find_Max_Num_Helper (rest arr) (first arr))]\n      [else (find_Max_Num_Helper (rest arr) max_num)]))\n  (find_Max_Num_Helper arr 0))\n",
    "  (define (helper arr)\n    (if (null? arr)\n        '()\n        (cons (max (car arr) (car (helper (cdr arr))))\n              (helper (cdr arr)))))\n  (apply string (helper arr)))\n",
    "  (sort arr >))\n",
    "  (sort arr >))\n",
    "  (define (helper arr)\n    (cond\n      [(empty? arr) '()]\n      [(empty? (rest arr)) (list (first arr))]\n      [else\n       (let ([max (first arr)])\n         (for ([i (in-list (rest arr))])\n           (if (> i max)\n               (set! max i)))\n         (cons max (helper (remove max arr))))]))\n  (string->number (list->string (helper arr))))\n",
    "  (define (helper arr acc)\n    (if (null? arr)\n        (list->string (reverse acc))\n        (helper (cdr arr) (cons (max (car arr) (car acc)) (cdr acc)))))\n  (helper arr (list (car arr))))\n",
    "  (define (find_Max_Num_helper arr max)\n    (if (null? arr)\n        max\n        (if (&gt; (car arr) max)\n            (find_Max_Num_helper (cdr arr) (car arr))\n            (find_Max_Num_helper (cdr arr) max))))\n  (find_Max_Num_helper arr 0))\n",
    "  (sort arr (lambda (x y) (string>? (number->string x) (number->string y)))))\n",
    "  (sort arr >))\n",
    "  (define (find_Max_Num_Helper arr max)\n    (if (null? arr)\n        max\n        (if (&gt; (car arr) max)\n            (find_Max_Num_Helper (cdr arr) (car arr))\n            (find_Max_Num_Helper (cdr arr) max))))\n  (find_Max_Num_Helper arr 0))\n",
    "  (define (find_Max_Num_helper arr max)\n    (cond\n      [(empty? arr) max]\n      [else\n       (define new_max (string->number (string-append (number->string (first arr)) (number->string max))))\n       (find_Max_Num_helper (rest arr) (if (> new_max max) new_max max))]))\n  (find_Max_Num_helper arr 0))\n"
  ]
}