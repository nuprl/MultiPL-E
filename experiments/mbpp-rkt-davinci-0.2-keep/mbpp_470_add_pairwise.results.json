{
  "name": "mbpp_470_add_pairwise",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_470_add_pairwise.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(= (length test_tup) 1) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwxgsh5cn.rkt:15:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwxgsh5cn.rkt:16:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwxgsh5cn.rkt:17:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (first (rest test_tup))) (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqnm1wo95.rkt:15:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqnm1wo95.rkt:16:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqnm1wo95.rkt:17:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond [(empty? test_tup) empty]\n        [(= (length test_tup) 1) empty]\n        [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpph_bbe6_.rkt:14:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpph_bbe6_.rkt:15:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpph_bbe6_.rkt:16:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (if (empty? test_tup)\n      empty\n      (cons (+ (first test_tup) (second test_tup))\n            (add_pairwise (rest (rest test_tup))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpukpgfs6g.rkt:15:4\n\nsecond: list contains too few elements\n  list: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpukpgfs6g.rkt:16:4\n\nsecond: list contains too few elements\n  list: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpukpgfs6g.rkt:17:4\n\nsecond: list contains too few elements\n  list: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7wyog4j.rkt:15:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7wyog4j.rkt:16:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7wyog4j.rkt:17:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else\n     (cons (+ (first test_tup) (second test_tup))\n           (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv2ahp810.rkt:17:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv2ahp810.rkt:18:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv2ahp810.rkt:19:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7wyog4j.rkt:15:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7wyog4j.rkt:16:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7wyog4j.rkt:17:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) '()]\n    [(empty? (rest test_tup)) '()]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124263,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup))\n                 (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124263,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7wyog4j.rkt:15:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7wyog4j.rkt:16:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7wyog4j.rkt:17:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124263,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1i3ymdq4.rkt:14:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1i3ymdq4.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1i3ymdq4.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7wyog4j.rkt:15:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7wyog4j.rkt:16:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7wyog4j.rkt:17:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup))\n                 (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124263,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpznryr0d7.rkt:16:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpznryr0d7.rkt:17:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpznryr0d7.rkt:18:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(= (length test_tup) 1) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwxgsh5cn.rkt:15:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwxgsh5cn.rkt:16:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwxgsh5cn.rkt:17:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124263,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1i3ymdq4.rkt:14:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1i3ymdq4.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1i3ymdq4.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7wyog4j.rkt:15:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7wyog4j.rkt:16:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7wyog4j.rkt:17:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7wyog4j.rkt:15:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7wyog4j.rkt:16:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7wyog4j.rkt:17:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7wyog4j.rkt:15:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7wyog4j.rkt:16:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7wyog4j.rkt:17:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (if (empty? test_tup)\n      empty\n      (cons (+ (first test_tup) (second test_tup))\n            (add_pairwise (rest (rest test_tup))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpukpgfs6g.rkt:15:4\n\nsecond: list contains too few elements\n  list: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpukpgfs6g.rkt:16:4\n\nsecond: list contains too few elements\n  list: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpukpgfs6g.rkt:17:4\n\nsecond: list contains too few elements\n  list: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7wyog4j.rkt:15:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7wyog4j.rkt:16:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7wyog4j.rkt:17:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124263,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1i3ymdq4.rkt:14:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1i3ymdq4.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1i3ymdq4.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup))\n                 (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124263,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(= (length test_tup) 1) test_tup]\n    [else\n     (cons (+ (first test_tup) (second test_tup))\n           (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124263,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpslciisar.rkt:17:4\nactual:     '(6 15 10)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpslciisar.rkt:18:4\nactual:     '(8 17 11)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpslciisar.rkt:19:4\nactual:     '(10 19 12)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7wyog4j.rkt:15:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7wyog4j.rkt:16:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7wyog4j.rkt:17:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond ((null? test_tup) '())\n        ((null? (cdr test_tup)) (list (car test_tup)))\n        (else (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124263,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjw4aiolc.rkt:14:4\nactual:     '(6 12 15 18 10)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjw4aiolc.rkt:15:4\nactual:     '(8 14 17 20 11)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjw4aiolc.rkt:16:4\nactual:     '(10 16 19 22 12)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124263,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1i3ymdq4.rkt:14:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1i3ymdq4.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1i3ymdq4.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124263,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1i3ymdq4.rkt:14:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1i3ymdq4.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1i3ymdq4.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup))\n                 (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124263,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpznryr0d7.rkt:16:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpznryr0d7.rkt:17:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpznryr0d7.rkt:18:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(= (length test_tup) 1) test_tup]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124263,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpozlzvdrg.rkt:15:4\nactual:     '(6 15 10)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpozlzvdrg.rkt:16:4\nactual:     '(8 17 11)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpozlzvdrg.rkt:17:4\nactual:     '(10 19 12)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup))\n                 (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124263,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124263,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1i3ymdq4.rkt:14:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1i3ymdq4.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1i3ymdq4.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7wyog4j.rkt:15:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7wyog4j.rkt:16:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7wyog4j.rkt:17:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(= (length test_tup) 1) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwxgsh5cn.rkt:15:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwxgsh5cn.rkt:16:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwxgsh5cn.rkt:17:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup))\n                (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124263,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup))\n                 (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124263,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup))\n                 (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124263,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup))\n                 (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124263,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124263,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1i3ymdq4.rkt:14:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1i3ymdq4.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1i3ymdq4.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(null? test_tup) '()]\n    [(null? (cdr test_tup)) '()]\n    [else (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124263,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124263,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1i3ymdq4.rkt:14:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1i3ymdq4.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1i3ymdq4.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup))\n                 (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124263,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpznryr0d7.rkt:16:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpznryr0d7.rkt:17:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpznryr0d7.rkt:18:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond ((null? test_tup) '())\n        ((null? (cdr test_tup)) '())\n        (else (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124263,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup))\n                 (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124263,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup))\n                 (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124263,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7wyog4j.rkt:15:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7wyog4j.rkt:16:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7wyog4j.rkt:17:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124263,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1i3ymdq4.rkt:14:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1i3ymdq4.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1i3ymdq4.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124263,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1i3ymdq4.rkt:14:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1i3ymdq4.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1i3ymdq4.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond ((null? test_tup) '())\n        ((null? (cdr test_tup)) '())\n        (else (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124263,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup))\n                 (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124263,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124263,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1i3ymdq4.rkt:14:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1i3ymdq4.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1i3ymdq4.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup))\n                 (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124263,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7wyog4j.rkt:15:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7wyog4j.rkt:16:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7wyog4j.rkt:17:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124263,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3qxi1me1.rkt:14:4\n\nsecond: list contains too few elements\n  list: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3qxi1me1.rkt:15:4\n\nsecond: list contains too few elements\n  list: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3qxi1me1.rkt:16:4\n\nsecond: list contains too few elements\n  list: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124263,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1i3ymdq4.rkt:14:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1i3ymdq4.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1i3ymdq4.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7wyog4j.rkt:15:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7wyog4j.rkt:16:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7wyog4j.rkt:17:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7wyog4j.rkt:15:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7wyog4j.rkt:16:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7wyog4j.rkt:17:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7wyog4j.rkt:15:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7wyog4j.rkt:16:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7wyog4j.rkt:17:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124263,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1i3ymdq4.rkt:14:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1i3ymdq4.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1i3ymdq4.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124263,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1i3ymdq4.rkt:14:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1i3ymdq4.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1i3ymdq4.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7wyog4j.rkt:15:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7wyog4j.rkt:16:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7wyog4j.rkt:17:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond [(empty? test_tup) empty]\n        [(empty? (rest test_tup)) empty]\n        [else (cons (+ (first test_tup) (second test_tup))\n                    (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124263,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb5c5tpjq.rkt:15:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb5c5tpjq.rkt:16:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb5c5tpjq.rkt:17:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124263,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1i3ymdq4.rkt:14:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1i3ymdq4.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1i3ymdq4.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup))\n                 (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124263,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (first (rest test_tup))) (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqnm1wo95.rkt:15:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqnm1wo95.rkt:16:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqnm1wo95.rkt:17:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124263,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1i3ymdq4.rkt:14:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1i3ymdq4.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1i3ymdq4.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup))\n                 (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124263,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpznryr0d7.rkt:16:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpznryr0d7.rkt:17:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpznryr0d7.rkt:18:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124263,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1i3ymdq4.rkt:14:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1i3ymdq4.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1i3ymdq4.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7wyog4j.rkt:15:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7wyog4j.rkt:16:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7wyog4j.rkt:17:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7wyog4j.rkt:15:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7wyog4j.rkt:16:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7wyog4j.rkt:17:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup))\n                 (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124263,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup))\n                 (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124263,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolo_k17l.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7wyog4j.rkt:15:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7wyog4j.rkt:16:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7wyog4j.rkt:17:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124263,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1i3ymdq4.rkt:14:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1i3ymdq4.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1i3ymdq4.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124263,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1i3ymdq4.rkt:14:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1i3ymdq4.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1i3ymdq4.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    }
  ]
}