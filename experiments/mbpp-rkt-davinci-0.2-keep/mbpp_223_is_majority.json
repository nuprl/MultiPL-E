{
  "name": "mbpp_223_is_majority",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_223_is_majority.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (helper arr n x)\n    (if (= n 0)\n        #f\n        (if (= (first arr) x)\n            (if (>= n (/ (length arr) 2))\n                #t\n                (helper (rest arr) (- n 1) x))\n            (helper (rest arr) n x))))\n  (helper arr n x))\n",
    "  (define (is_majority-helper arr n x count)\n    (if (zero? n)\n        (if (> count (/ n 2))\n            #t\n            #f)\n        (if (equal? (car arr) x)\n            (is_majority-helper (cdr arr) (- n 1) x (+ count 1))\n            (is_majority-helper (cdr arr) (- n 1) x count))))\n  (is_majority-helper arr n x 0))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x)\n       (if (&gt;= (/ n 2) (count x arr))\n           #t\n           #f)]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n",
    "  (define (helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (vector-ref arr i) x) #t]\n      [else (helper arr n x (+ i 1))]))\n  (helper arr n x 0))\n",
    "  (define (helper arr n x count)\n    (cond\n      [(empty? arr) (if (> count (/ n 2)) #t #f)]\n      [(= (first arr) x) (helper (rest arr) n x (+ count 1))]\n      [else (helper (rest arr) n x count)]))\n  (helper arr n x 0))\n",
    "  (define (helper arr n x)\n    (cond\n      [(= n 0) #f]\n      [(= (car arr) x)\n       (if (>= n (/ (length arr) 2))\n           #t\n           (helper (cdr arr) (- n 1) x))]\n      [else (helper (cdr arr) n x)]))\n  (helper arr n x))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= x (first arr)) #t]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (if (> n (/ (length arr) 2)) #t (helper (rest arr) n x))]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond [(= i n) #f]\n          [(= x (array-ref arr i)) #t]\n          [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (helper arr n x)\n    (if (= n 0)\n        #f\n        (if (= (first arr) x)\n            (if (>= n (/ (length arr) 2))\n                #t\n                (helper (rest arr) (- n 1) x))\n            (helper (rest arr) n x))))\n  (helper arr n x))\n",
    "  (define (helper arr n x)\n    (if (= n 0)\n        #f\n        (if (= (car arr) x)\n            (if (>= n (/ (length arr) 2))\n                #t\n                (helper (cdr arr) (- n 1) x))\n            (helper (cdr arr) (- n 1) x))))\n  (helper arr n x))\n",
    "  (define (helper arr x)\n    (if (empty? arr)\n        #f\n        (if (= (first arr) x)\n            (helper (rest arr) x)\n            #f)))\n  (if (empty? arr)\n      #f\n      (if (= (first arr) x)\n          (if (> (helper arr x) (/ n 2))\n              #t\n              #f)\n          #f)))\n",
    "  (let ([mid (quotient n 2)])\n    (if (= x (vector-ref arr mid))\n        (if (= x (vector-ref arr (- mid 1)))\n            (is_majority arr mid x)\n            #t)\n        (if (&lt; x (vector-ref arr mid))\n            (is_majority (subvector arr 0 mid) mid x)\n            (is_majority (subvector arr mid) mid x)))))\n</code>\nThis is my solution, but it is not working. I am not sure what I am doing wrong.\n\n\nA:\n\nYou have a few problems in your code.\nFirst, you're using <code>subvector</code> incorrectly. The first argument is the vector, the second is the start index, and the third is the end index. So, for example, <code>(subvector v 0 3)</code> will return a vector containing the first three elements of <code>v</code>.\nSecond, you're not checking for the base case. If <code>n</code> is 1, then you should just return whether <code>x</code> is equal to the only element in the vector.\nThird, you're not handling the case where <code>x</code> is not in the vector.\nHere's a working version of your code:\n<code>(define (is_majority arr n x)\n  (let ([mid (quotient n 2)])\n    (cond\n      [(= 1 n) (= x (vector-ref arr 0))]\n      [(= x (vector-ref arr mid))\n       (if (= x (vector-ref arr (- mid 1)))\n           (is_majority (subvector arr 0 mid) mid x)\n           #t)]\n      [(&lt; x (vector-ref arr mid))\n       (is_majority (subvector arr 0 mid) mid x)]\n      [else\n       (is_majority (subvector arr mid) mid x)])))\n</code>\n",
    "  (define (helper arr n x)\n    (cond\n      [(= n 0) #f]\n      [(= (car arr) x) #t]\n      [else (helper (cdr arr) (- n 1) x)]))\n  (helper arr n x))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= n 1) (equal? (first arr) x)]\n      [(= n 2) (and (equal? (first arr) x) (equal? (second arr) x))]\n      [else (and (equal? (first arr) x) (helper (rest arr) (- n 1) x))]))\n  (helper arr n x))\n",
    "  (define (helper arr n x)\n    (cond\n      [(= n 0) #f]\n      [(= (first arr) x) (if (&gt; n (/ (length arr) 2)) #t (helper (rest arr) (- n 1) x))]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (array-ref arr i) x)\n       (if (>= (+ i (/ n 2)) n)\n           #t\n           (is_majority-helper arr n x (+ i (/ n 2))))]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (helper arr n x)\n    (cond [(= n 0) #f]\n          [(= x (car arr)) #t]\n          [else (helper (cdr arr) (- n 1) x)]))\n  (helper arr n x))\n",
    "  (define (helper arr n x count)\n    (cond\n      [(empty? arr) (if (> count (/ n 2)) #t #f)]\n      [(= (first arr) x) (helper (rest arr) n x (+ count 1))]\n      [else (helper (rest arr) n x count)]))\n  (helper arr n x 0))\n",
    "  (define (helper arr n x count)\n    (if (= n 0)\n        (if (> count (/ n 2))\n            #t\n            #f)\n        (if (= (car arr) x)\n            (helper (cdr arr) (- n 1) x (+ count 1))\n            (helper (cdr arr) (- n 1) x count))))\n  (helper arr n x 0))\n",
    "  (define (is_majority-helper arr n x)\n    (cond\n      [(= n 0) #f]\n      [(= (car arr) x)\n       (if (> n 1)\n           (is_majority-helper (cdr arr) (- n 1) x)\n           #t)]\n      [else (is_majority-helper (cdr arr) (- n 1) x)]))\n  (is_majority-helper arr n x))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (vector-ref arr i) x)\n       (if (>= (+ i (/ n 2)) n)\n           #t\n           (is_majority-helper arr n x (+ i (/ n 2))))]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (vector-ref arr i) x)\n       (if (>= (+ i (/ n 2)) n)\n           #t\n           (helper arr n x (+ i (/ n 2))))]\n      [else (helper arr n x (+ i 1))]))\n  (helper arr n x 0))\n",
    "  (define (is_majority-helper arr n x count)\n    (cond\n      [(= n 0) (if (> count (/ n 2)) #t #f)]\n      [(= x (car arr)) (is_majority-helper (cdr arr) (- n 1) x (+ count 1))]\n      [else (is_majority-helper (cdr arr) (- n 1) x count)]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) false]\n      [(= x (first arr)) (if (>= (/ n 2) (count x arr)) true false)]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (array-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (find_first_occurrence arr n x)\n    (cond\n      [(= n 0) -1]\n      [(= (car arr) x) 0]\n      [else (+ 1 (find_first_occurrence (cdr arr) (- n 1) x))]))\n  (define (find_last_occurrence arr n x)\n    (cond\n      [(= n 0) -1]\n      [(= (car arr) x) n]\n      [else (find_last_occurrence (cdr arr) (- n 1) x)]))\n  (define (find_occurrence arr n x)\n    (define (find_occurrence_helper arr n x)\n      (cond\n        [(= n 0) -1]\n        [(= (car arr) x) 0]\n        [else (+ 1 (find_occurrence_helper (cdr arr) (- n 1) x))]))\n    (find_occurrence_helper arr n x))\n  (define (find_occurrence_2 arr n x)\n    (define (find_occurrence_helper arr n x)\n      (cond\n        [(= n 0) -1]\n        [(= (car arr) x) n]\n        [else (find_occurrence_helper (cdr arr) (- n 1) x)]))\n    (find_occurrence_helper arr n x))\n  (define (find_occurrence_3 arr n x)\n    (define (find_occurrence_helper arr n x)\n      (cond\n        [(= n 0) -1]\n        [(= (car arr) x) 0]\n        [else (+ 1 (find_occurrence_helper (cdr arr) (- n 1) x))]))\n    (find_occurrence_helper arr n x))\n  (define (find_occurrence_4 arr n x)\n    (define (find_occurrence_helper arr n x)\n      (cond\n        [(= n 0) -1]\n        [(= (car arr) x) n]\n        [else (find_occurrence_helper (cdr arr) (- n 1) x)]))\n    (find_occurrence_helper arr",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (array-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (helper arr n x)\n    (cond\n      [(= n 0) #f]\n      [(= (car arr) x) (helper (cdr arr) (- n 1) x)]\n      [else (helper (cdr arr) (- n 1) x)]))\n  (helper arr n x))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (array-ref arr i) x)\n       (if (>= (* i 2) n)\n           #t\n           (is_majority-helper arr n x (+ i 1)))]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (if (= n 0)\n      #f\n      (if (= (first arr) x)\n          (if (>= n (/ (length arr) 2))\n              #t\n              (is_majority (rest arr) (- n 1) x))\n          (is_majority (rest arr) n x))))\n",
    "  (define (helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (vector-ref arr i) x) #t]\n      [else (helper arr n x (+ i 1))]))\n  (helper arr n x 0))\n",
    "  (define (helper arr n x)\n    (cond\n      [(= n 0) #f]\n      [(= x (car arr)) (helper (cdr arr) (- n 1) x)]\n      [else (helper (cdr arr) (- n 1) x)]))\n  (helper arr n x))\n",
    "  (let ([mid (quotient n 2)])\n    (if (= x (vector-ref arr mid))\n        (if (= x (vector-ref arr (- mid 1)))\n            (is_majority (vector-copy arr 0 mid) mid x)\n            (if (= x (vector-ref arr (+ mid 1)))\n                (is_majority (vector-copy arr (+ mid 1) n) (- n mid 1) x)\n                #t))\n        (if (< x (vector-ref arr mid))\n            (is_majority (vector-copy arr 0 mid) mid x)\n            (is_majority (vector-copy arr (+ mid 1) n) (- n mid 1) x)))))\n",
    "  (define (helper arr n x)\n    (if (= n 0)\n        #f\n        (if (= (car arr) x)\n            (if (>= n (/ (length arr) 2))\n                #t\n                (helper (cdr arr) (- n 1) x))\n            (helper (cdr arr) (- n 1) x))))\n  (helper arr n x))\n",
    "  (define (helper arr n x count)\n    (cond\n      [(empty? arr) (if (> count (/ n 2)) #t #f)]\n      [(= (first arr) x) (helper (rest arr) n x (+ count 1))]\n      [else (helper (rest arr) n x count)]))\n  (helper arr n x 0))\n",
    "  (let ([mid (quotient n 2)])\n    (if (= x (vector-ref arr mid))\n        (if (= x (vector-ref arr (- mid 1)))\n            (is_majority (subvector arr 0 mid) mid x)\n            (if (= x (vector-ref arr (+ mid 1)))\n                (is_majority (subvector arr (+ mid 1) (- n 1)) (- n mid 1) x)\n                #t))\n        #f)))\n",
    "  (define (is_majority_helper arr n x count)\n    (cond\n      [(empty? arr) (if (> count (/ n 2)) #t #f)]\n      [(= (first arr) x) (is_majority_helper (rest arr) n x (+ count 1))]\n      [else (is_majority_helper (rest arr) n x count)]))\n  (is_majority_helper arr n x 0))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (if (>= (/ n 2) (count x arr)) #t #f)]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) false]\n      [(= (first arr) x) (if (>= (/ n 2) (count-occurrences arr x)) true false)]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n",
    "  (define (is_majority_helper arr n x)\n    (cond\n      [(= n 0) #f]\n      [(= x (car arr)) (is_majority_helper (cdr arr) (- n 1) x)]\n      [else (is_majority_helper (cdr arr) (- n 1) x)]))\n  (is_majority_helper arr n x))\n",
    "  (define (helper arr n x)\n    (if (zero? n)\n        #f\n        (if (= x (car arr))\n            (if (>= (/ n 2) (count x arr))\n                #t\n                #f)\n            (helper (cdr arr) (- n 1) x))))\n  (helper arr n x))\n",
    "  (define (helper arr n x)\n    (cond\n      [(= n 0) #f]\n      [(= (car arr) x) (helper (cdr arr) (- n 1) x)]\n      [else (helper (cdr arr) (- n 1) x)]))\n  (helper arr n x))\n",
    "  (define (helper arr n x)\n    (cond ((= n 0) #f)\n          ((= (car arr) x)\n           (if (&gt; n (/ (length arr) 2))\n               #t\n               (helper (cdr arr) (- n 1) x)))\n          (else (helper (cdr arr) n x))))\n  (helper arr n x))\n",
    "  (define (helper arr n x)\n    (cond [(empty? arr) #f]\n          [(= (first arr) x) (if (>= (/ n 2) (count x arr)) #t #f)]\n          [else (helper (rest arr) n x)]))\n  (helper arr n x))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (array-ref arr i) x)\n       (if (>= (* i 2) n)\n           #t\n           (is_majority-helper arr n x (+ i 1)))]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (is_majority-helper arr n x start end)\n    (cond\n      [(= start end) #f]\n      [(= (array-ref arr start) x)\n       (if (>= (/ (+ start end) 2) end)\n           #t\n           (is_majority-helper arr n x (+ start 1) end))]\n      [else (is_majority-helper arr n x (+ start 1) end)]))\n  (is_majority-helper arr n x 0 n))\n",
    "  (let ([mid (quotient n 2)])\n    (if (= (vector-ref arr mid) x)\n        (if (= (vector-ref arr (- n 1)) x)\n            #t\n            (is_majority (vector-copy arr 0 mid) mid x))\n        (if (&lt; (vector-ref arr mid) x)\n            (is_majority (vector-copy arr mid n) (- n mid) x)\n            #f))))\n",
    "  (define (is_majority_helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (array-ref arr i) x) #t]\n      [else (is_majority_helper arr n x (+ i 1))]))\n  (is_majority_helper arr n x 0))\n",
    "  (define (helper arr n x)\n    (cond [(empty? arr) #f]\n          [(= (first arr) x) (if (&gt;= (/ n 2) (count x arr)) #t #f)]\n          [else (helper (rest arr) n x)]))\n  (helper arr n x))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (array-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (helper arr n x)\n    (cond\n      [(= n 0) #f]\n      [(= (car arr) x) (helper (cdr arr) (- n 1) x)]\n      [else (helper (cdr arr) (- n 1) x)]))\n  (helper arr n x))\n",
    "  (define (is_majority-helper arr n x count)\n    (cond\n      [(= n 0) (if (> count (/ (length arr) 2)) #t #f)]\n      [(= (car arr) x) (is_majority-helper (cdr arr) (- n 1) x (+ count 1))]\n      [else (is_majority-helper (cdr arr) (- n 1) x count)]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= x (first arr)) (helper (rest arr) (- n 1) x)]\n      [else (helper (rest arr) (- n 1) x)]))\n  (if (= (helper arr n x) (/ n 2))\n      #t\n      #f))\n",
    "  (define (helper arr n x)\n    (cond [(= n 0) #f]\n          [(= x (car arr)) #t]\n          [else (helper (cdr arr) (- n 1) x)]))\n  (helper arr n x))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (vector-ref arr i) x)\n       (if (>= (* i 2) n)\n           #t\n           (is_majority-helper arr n x (+ i 1)))]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= x (vector-ref arr i)) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (helper arr n x)\n    (if (= n 0)\n        #f\n        (if (= (car arr) x)\n            (if (>= n (/ (length arr) 2))\n                #t\n                (helper (cdr arr) (- n 1) x))\n            (helper (cdr arr) (- n 1) x))))\n  (helper arr n x))\n",
    "  (define (helper arr n x)\n    (cond\n      [(= n 0) #f]\n      [(= (car arr) x) #t]\n      [else (helper (cdr arr) (- n 1) x)]))\n  (helper arr n x))\n",
    "  (cond\n    [(= n 0) #f]\n    [(= x (car arr)) (is_majority (cdr arr) (- n 1) x)]\n    [else (is_majority (cdr arr) (- n 1) x)]))\n",
    "  (define (helper arr n x)\n    (cond ((= n 0) #f)\n          ((= (car arr) x) #t)\n          (else (helper (cdr arr) (- n 1) x))))\n  (helper arr n x))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond ((= i n) #f)\n          ((= (array-ref arr i) x) #t)\n          (else (is_majority-helper arr n x (+ i 1)))))\n  (is_majority-helper arr n x 0))\n",
    "  (let ((mid (/ n 2))\n        (count 0))\n    (for ([i (in-range n)])\n      (if (= x (vector-ref arr i))\n          (set! count (+ count 1))))\n    (if (> count mid)\n        #t\n        #f)))\n",
    "  (define (helper arr n x)\n    (cond\n      [(= n 0) #f]\n      [(= x (car arr)) #t]\n      [else (helper (cdr arr) (- n 1) x)]))\n  (helper arr n x))\n",
    "  (define (helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (vector-ref arr i) x) #t]\n      [else (helper arr n x (+ i 1))]))\n  (helper arr n x 0))\n",
    "  (define (helper arr n x)\n    (cond [(= n 0) #f]\n          [(= x (car arr)) #t]\n          [else (helper (cdr arr) (- n 1) x)]))\n  (helper arr n x))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= x (first arr)) (if (>= (/ n 2) (count x arr)) #t #f)]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n",
    "  (define (is_majority-iter arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= x (vector-ref arr i)) #t]\n      [else (is_majority-iter arr n x (+ i 1))]))\n  (is_majority-iter arr n x 0))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= x (first arr)) #t]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n",
    "  (define (helper arr n x count)\n    (cond\n      [(empty? arr) (if (> count (/ n 2)) #t #f)]\n      [(= (first arr) x) (helper (rest arr) n x (+ count 1))]\n      [else (helper (rest arr) n x count)]))\n  (helper arr n x 0))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (array-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (array-ref arr i) x) #t]\n      [else (helper arr n x (+ i 1))]))\n  (helper arr n x 0))\n",
    "  (define (helper arr n x)\n    (cond\n      [(= n 0) #f]\n      [(= (car arr) x) (if (> n (/ (length arr) 2)) #t (helper (cdr arr) (- n 1) x))]\n      [else (helper (cdr arr) n x)]))\n  (helper arr n x))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (helper (rest arr) (- n 1) x)]\n      [else (helper (rest arr) (- n 1) x)]))\n  (if (= (helper arr n x) (/ n 2))\n      #t\n      #f))\n",
    "  (define (helper arr n x count)\n    (cond\n      [(= n 0) false]\n      [(= (car arr) x) (helper (cdr arr) (- n 1) x (+ count 1))]\n      [else (helper (cdr arr) (- n 1) x count)]))\n  (if (> (/ n 2) (helper arr n x 0)) true false))\n",
    "  (define (helper arr n x)\n    (cond [(empty? arr) #f]\n          [(= x (first arr)) (if (>= (/ n 2) (count arr x)) #t #f)]\n          [else (helper (rest arr) n x)]))\n  (helper arr n x))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (array-ref arr i) x)\n       (if (>= i (/ n 2))\n           #t\n           (is_majority-helper arr n x (+ i 1)))]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= x (first arr)) #t]\n      [else (helper (rest arr) (- n 1) x)]))\n  (helper arr n x))\n",
    "  (define (helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (array-ref arr i) x) #t]\n      [else (helper arr n x (+ i 1))]))\n  (helper arr n x 0))\n",
    "  (define (is_majority_helper arr n x count)\n    (cond\n      [(= n 0) (= count (/ n 2))]\n      [(= (car arr) x) (is_majority_helper (cdr arr) (- n 1) x (+ count 1))]\n      [else (is_majority_helper (cdr arr) (- n 1) x count)]))\n  (is_majority_helper arr n x 0))\n",
    "  (cond\n    [(= n 0) false]\n    [(= (first arr) x) (is_majority (rest arr) (- n 1) x)]\n    [else (is_majority (rest arr) (- n 1) x)]))\n",
    "  (let ([mid (quotient n 2)])\n    (if (= x (vector-ref arr mid))\n        (if (= (vector-ref arr (- mid 1)) x)\n            (is_majority (vector-copy arr 0 mid) mid x)\n            #t)\n        (if (&lt; x (vector-ref arr mid))\n            (is_majority (vector-copy arr 0 mid) mid x)\n            (is_majority (vector-copy arr mid n) (- n mid) x)))))\n",
    "  (cond [(empty? arr) #f]\n        [(= x (first arr))\n         (if (>= (/ n 2) (count-occurrences arr x))\n             #t\n             #f)]\n        [else (is_majority (rest arr) n x)]))\n",
    "  (define (is_majority-helper arr n x start end)\n    (cond [(= start end) #f]\n          [(= x (array-ref arr start))\n           (if (&gt;= (+ start end) n)\n               #t\n               (is_majority-helper arr n x (+ start 1) end))]\n          [else (is_majority-helper arr n x start (+ end 1))]))\n  (is_majority-helper arr n x 0 n))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (if (> n (/ (length arr) 2)) #t (helper (rest arr) n x))]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n",
    "  (define (helper arr n x count)\n    (cond\n      [(empty? arr) (= count (/ n 2))]\n      [(= (first arr) x) (helper (rest arr) n x (+ count 1))]\n      [else (helper (rest arr) n x count)]))\n  (helper arr n x 0))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (if (>= (/ n 2) (add1 (helper (rest arr) n x))) #t #f)]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n",
    "  (define (is_majority-helper arr n x count)\n    (cond [(= n 0) false]\n          [(= x (car arr)) (is_majority-helper (cdr arr) (- n 1) x (+ count 1))]\n          [else (is_majority-helper (cdr arr) (- n 1) x count)]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (helper arr n x)\n    (cond [(empty? arr) #f]\n          [(= x (first arr))\n           (if (&gt;= (/ n 2) (length (filter (lambda (y) (= x y)) arr)))\n               #t\n               #f)]\n          [else (helper (rest arr) n x)]))\n  (helper arr n x))\n",
    "  (let ([mid (quotient n 2)])\n    (if (= x (vector-ref arr mid))\n        (if (= x (vector-ref arr (- mid 1)))\n            (is_majority (vector-copy arr 0 mid) mid x)\n            (if (= x (vector-ref arr (+ mid 1)))\n                (is_majority (vector-copy arr (+ mid 1) (- n 1)) (- n 1 mid) x)\n                #t))\n        (if (< x (vector-ref arr mid))\n            (is_majority (vector-copy arr 0 mid) mid x)\n            (is_majority (vector-copy arr (+ mid 1) (- n 1)) (- n 1 mid) x)))))\n",
    "  (define (helper arr n x)\n    (if (= n 0)\n        #f\n        (if (= (car arr) x)\n            (if (>= n (/ (length arr) 2))\n                #t\n                (helper (cdr arr) (- n 1) x))\n            (helper (cdr arr) n x))))\n  (helper arr n x))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (if (&gt; (/ n 2) (count-occurrences arr x)) #t #f)]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (vector-ref arr i) x)\n       (if (>= i (/ n 2))\n           #t\n           (is_majority-helper arr n x (+ i 1)))]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= x (vector-ref arr i)) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (helper arr n x)\n    (if (= n 0)\n        #f\n        (if (= (car arr) x)\n            (if (>= n (/ (length arr) 2))\n                #t\n                (helper (cdr arr) (- n 1) x))\n            (helper (cdr arr) (- n 1) x))))\n  (helper arr n x))\n",
    "  (define (helper arr n x)\n    (if (= n 0)\n        #f\n        (if (= (car arr) x)\n            (if (>= n (/ (length arr) 2))\n                #t\n                (helper (cdr arr) (- n 1) x))\n            (helper (cdr arr) n x))))\n  (helper arr n x))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (if (>= (/ n 2) (count (first arr) arr)) #t #f)]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (array-ref arr i) x)\n       (if (>= (+ i (/ n 2)) n)\n           #t\n           (is_majority-helper arr n x (+ i (/ n 2))))]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (vector-ref arr i) x) #t]\n      [else (helper arr n x (+ i 1))]))\n  (helper arr n x 0))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (array-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (helper arr n x)\n    (cond\n      [(= n 0) #f]\n      [(= (car arr) x) #t]\n      [else (helper (cdr arr) (- n 1) x)]))\n  (helper arr n x))\n",
    "  (let loop ([i 0])\n    (cond [(= i n) #f]\n          [(= (array-ref arr i) x)\n           (if (>= (* i 2) n)\n               #t\n               (loop (+ i 1)))]\n          [else (loop (+ i 1))])))\n",
    "  (let ([mid (quotient n 2)])\n    (if (= x (vector-ref arr mid))\n        (if (= x (vector-ref arr (- mid 1)))\n            (is_majority (subvector arr 0 mid) mid x)\n            (if (= x (vector-ref arr (+ mid 1)))\n                (is_majority (subvector arr (+ mid 1) (- n 1)) (- n 1 mid) x)\n                #t))\n        #f)))\n",
    "  (define (is_majority-helper arr n x)\n    (cond\n      [(= n 0) #f]\n      [(= (car arr) x) (is_majority-helper (cdr arr) (- n 1) x)]\n      [else (is_majority-helper (cdr arr) (- n 1) x)]))\n  (is_majority-helper arr n x))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (if (>= (/ n 2) (count arr x)) #t #f)]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n",
    "  (define (is_majority_helper arr n x i)\n    (cond ((= i n) #f)\n          ((= x (array-ref arr i)) #t)\n          (else (is_majority_helper arr n x (+ i 1)))))\n  (is_majority_helper arr n x 0))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (if (>= (/ n 2) (count arr x)) #t #f)]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= x (first arr)) (if (&gt; n (/ (length arr) 2)) #t (helper (rest arr) n x))]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n",
    "  (define (is_majority-helper arr n x count)\n    (cond\n      [(= n 0) (if (> count (/ (length arr) 2)) #t #f)]\n      [(= (car arr) x) (is_majority-helper (cdr arr) (- n 1) x (+ count 1))]\n      [else (is_majority-helper (cdr arr) (- n 1) x count)]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (is_majority-helper arr n x)\n    (cond\n      [(= n 0) #f]\n      [(= x (car arr)) (is_majority-helper (cdr arr) (- n 1) x)]\n      [else #f]))\n  (is_majority-helper arr n x))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (helper (rest arr) (- n 1) x)]\n      [else (helper (rest arr) (- n 1) x)]))\n  (if (helper arr n x)\n      (if (> n (/ (length arr) 2))\n          #t\n          #f)\n      #f))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond ((= i n) #f)\n          ((= x (array-ref arr i)) #t)\n          (else (is_majority-helper arr n x (+ i 1)))))\n  (is_majority-helper arr n x 0))\n",
    "  (define (is_majority-iter arr n x i)\n    (cond ((= i n) #f)\n          ((= (array-ref arr i) x)\n           (if (&gt;= (- n i) (/ n 2))\n               #t\n               (is_majority-iter arr n x (+ i 1))))\n          (else (is_majority-iter arr n x (+ i 1)))))\n  (is_majority-iter arr n x 0))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= x (array-ref arr i)) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (helper arr n x)\n    (cond\n      [(= n 0) #f]\n      [(= (car arr) x) (helper (cdr arr) (- n 1) x)]\n      [else (helper (cdr arr) (- n 1) x)]))\n  (helper arr n x))\n",
    "  (define (helper arr n x)\n    (if (null? arr)\n        #f\n        (if (= x (car arr))\n            (if (>= n 2)\n                (helper (cdr arr) (- n 1) x)\n                #t)\n            (helper (cdr arr) n x))))\n  (helper arr n x))\n",
    "  (define (helper arr n x count)\n    (cond\n      [(= n 0) false]\n      [(= x (car arr)) (helper (cdr arr) (- n 1) x (+ count 1))]\n      [else (helper (cdr arr) (- n 1) x count)]))\n  (if (&gt; (helper arr n x 0) (/ n 2)) true false))\n",
    "  (define (helper arr n x)\n    (if (or (= n 0) (= n 1))\n        #f\n        (if (= (first arr) x)\n            (if (>= n 2)\n                (if (= (second arr) x)\n                    (helper (rest (rest arr)) (- n 2) x)\n                    #t)\n                #t)\n            (helper (rest arr) (- n 1) x))))\n  (helper arr n x))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (if (>= (/ n 2) (count-occurrences arr x)) #t #f)]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n",
    "  (define (helper arr n x)\n    (cond\n      [(= n 0) #f]\n      [(= (car arr) x) (if (> n 1) (helper (cdr arr) (- n 1) x) #t)]\n      [else (helper (cdr arr) (- n 1) x)]))\n  (helper arr n x))\n",
    "  (define (helper arr n x)\n    (cond\n      [(= n 0) #f]\n      [(= (car arr) x) (helper (cdr arr) (- n 1) x)]\n      [else (helper (cdr arr) (- n 1) x)]))\n  (helper arr n x))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) #t]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n",
    "  (define (helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= x (array-ref arr i)) (if (>= i (/ n 2)) #t (helper arr n x (+ i 1)))]\n      [else (helper arr n x (+ i 1))]))\n  (helper arr n x 0))\n",
    "  (let ([mid (quotient n 2)])\n    (if (= (vector-ref arr mid) x)\n        (if (= (vector-ref arr (- mid 1)) x)\n            (is_majority (vector-copy arr 0 mid) mid x)\n            #t)\n        (if (&gt; x (vector-ref arr mid))\n            (is_majority (vector-copy arr (+ mid 1) (- n 1)) (- n 1 mid) x)\n            (is_majority (vector-copy arr 0 mid) mid x)))))\n</code>\n",
    "  (let ([mid (quotient n 2)])\n    (if (= x (vector-ref arr mid))\n        (if (= (vector-ref arr (- mid 1)) x)\n            (is_majority (vector-subseq arr 0 mid) mid x)\n            #t)\n        (if (&gt; x (vector-ref arr mid))\n            (is_majority (vector-subseq arr (+ mid 1) n) (- n mid 1) x)\n            #f))))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (vector-ref arr i) x)\n       (if (>= i (/ n 2))\n           #t\n           (is_majority-helper arr n x (+ i 1)))]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (helper arr n x)\n    (cond [(= n 0) #f]\n          [(= (car arr) x) (helper (cdr arr) (- n 1) x)]\n          [else (helper (cdr arr) (- n 1) x)]))\n  (helper arr n x))\n",
    "  (define (helper arr n x)\n    (cond\n      [(= n 0) #f]\n      [(= (car arr) x) (helper (cdr arr) (- n 1) x)]\n      [else (helper (cdr arr) (- n 1) x)]))\n  (helper arr n x))\n",
    "  (define (helper arr n x)\n    (if (zero? n)\n        #f\n        (if (= x (car arr))\n            (if (> n (/ (length arr) 2))\n                #t\n                #f)\n            (helper (cdr arr) (- n 1) x))))\n  (helper arr n x))\n",
    "  (define (helper arr n x)\n    (if (= n 0)\n        #f\n        (if (= (car arr) x)\n            (if (>= n (/ (length arr) 2))\n                #t\n                (helper (cdr arr) (- n 1) x))\n            (helper (cdr arr) (- n 1) x))))\n  (helper arr n x))\n",
    "  (define (helper arr n x)\n    (cond\n      [(= n 0) #f]\n      [(= (car arr) x) (helper (cdr arr) (- n 1) x)]\n      [else (helper (cdr arr) (- n 1) x)]))\n  (helper arr n x))\n",
    "  (let ([mid (quotient n 2)])\n    (if (= x (vector-ref arr mid))\n        (if (= x (vector-ref arr (- mid 1)))\n            (is_majority (vector-copy arr 0 mid) mid x)\n            #t)\n        (if (< x (vector-ref arr mid))\n            (is_majority (vector-copy arr 0 mid) mid x)\n            (is_majority (vector-copy arr mid n) (- n mid) x)))))\n",
    "  (define (is_majority-helper arr n x count)\n    (cond\n      [(empty? arr) (if (> count (/ n 2)) #t #f)]\n      [(= (first arr) x) (is_majority-helper (rest arr) n x (+ count 1))]\n      [else (is_majority-helper (rest arr) n x count)]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (helper arr n x)\n    (if (= n 0)\n        #f\n        (if (= (first arr) x)\n            (if (>= n (/ (length arr) 2))\n                #t\n                (helper (rest arr) (- n 1) x))\n            (helper (rest arr) (- n 1) x))))\n  (helper arr n x))\n",
    "  (define (helper arr n x)\n    (if (= n 0)\n        #f\n        (if (= (car arr) x)\n            (if (>= n (/ (length arr) 2))\n                #t\n                (helper (cdr arr) (- n 1) x))\n            (helper (cdr arr) (- n 1) x))))\n  (helper arr n x))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (array-ref arr i) x)\n       (if (>= i (/ n 2))\n           #t\n           (is_majority-helper arr n x (+ i 1)))]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (helper arr n x count)\n    (cond ((= n 0) #f)\n          ((= x (car arr)) (helper (cdr arr) (- n 1) x (+ count 1)))\n          ((&gt; count (/ n 2)) #t)\n          (else (helper (cdr arr) (- n 1) x 0))))\n  (helper arr n x 0))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (helper (rest arr) (- n 1) x)]\n      [else (helper (rest arr) (- n 1) x)]))\n  (if (= (helper arr n x) n)\n      #t\n      #f))\n",
    "  (define (helper arr n x)\n    (cond [(empty? arr) #f]\n          [(= x (first arr)) (if (&gt; n (/ (length arr) 2)) #t (helper (rest arr) n x))]\n          [else (helper (rest arr) n x)]))\n  (helper arr n x))\n",
    "  (define (is_majority-helper arr n x i)\n    (if (= i n)\n        #f\n        (if (= x (array-ref arr i))\n            (if (>= i (/ n 2))\n                #t\n                (is_majority-helper arr n x (+ i 1)))\n            (is_majority-helper arr n x (+ i 1)))))\n  (is_majority-helper arr n x 0))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond ((= i n) #f)\n          ((= x (vector-ref arr i)) #t)\n          (else (is_majority-helper arr n x (+ i 1)))))\n  (is_majority-helper arr n x 0))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= x (vector-ref arr i)) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) false]\n      [(= (first arr) x) true]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n",
    "  (define (helper arr n x)\n    (cond\n      [(= n 0) #f]\n      [(= x (car arr)) #t]\n      [else (helper (cdr arr) (- n 1) x)]))\n  (helper arr n x))\n",
    "  (let ([mid (quotient n 2)])\n    (if (= x (vector-ref arr mid))\n        (if (= x (vector-ref arr (- mid 1)))\n            (is_majority (subvector arr 0 mid) mid x)\n            (if (= x (vector-ref arr (+ mid 1)))\n                (is_majority (subvector arr (+ mid 1) (- n 1)) (- n 1 mid) x)\n                #t))\n        #f)))\n",
    "  (define (is_majority_helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (vector-ref arr i) x) #t]\n      [else (is_majority_helper arr n x (+ i 1))]))\n  (is_majority_helper arr n x 0))\n",
    "  (define (helper arr n x)\n    (cond [(empty? arr) #f]\n          [(= (first arr) x) (if (>= n (/ n 2)) #t (helper (rest arr) (- n 1) x))]\n          [else (helper (rest arr) n x)]))\n  (helper arr n x))\n",
    "  (define (is_majority-helper arr n x)\n    (cond [(= n 0) #f]\n          [(= (car arr) x) #t]\n          [else (is_majority-helper (cdr arr) (- n 1) x)]))\n  (is_majority-helper arr n x))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) #t]\n      [else (helper (rest arr) (- n 1) x)]))\n  (helper arr n x))\n",
    "  (define (is_majority-helper arr n x count)\n    (cond\n      [(= n 0) (if (> count (/ n 2)) #t #f)]\n      [(= x (car arr)) (is_majority-helper (cdr arr) (- n 1) x (+ count 1))]\n      [else (is_majority-helper (cdr arr) (- n 1) x count)]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond [(= i n) #f]\n          [(= x (array-ref arr i)) #t]\n          [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (is_majority-helper arr n x count)\n    (cond\n      [(empty? arr) (if (> count (/ n 2)) #t #f)]\n      [(= (first arr) x) (is_majority-helper (rest arr) n x (+ count 1))]\n      [else (is_majority-helper (rest arr) n x count)]))\n  (is_majority-helper arr n x 0))\n",
    "  (cond\n    [(= n 0) #f]\n    [(= x (car arr))\n     (if (&gt;= (/ n 2) (count x arr))\n         #t\n         #f)]\n    [else (is_majority (cdr arr) (- n 1) x)]))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= x (array-ref arr i)) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (is_majority-helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (is_majority-helper (rest arr) (- n 1) x)]\n      [else (is_majority-helper (rest arr) (- n 1) x)]))\n  (is_majority-helper arr n x))\n",
    "  (define (helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (array-ref arr i) x) #t]\n      [else (helper arr n x (+ i 1))]))\n  (helper arr n x 0))\n",
    "  (define (helper arr n x i)\n    (cond [(= i n) #f]\n          [(= x (array-ref arr i)) #t]\n          [else (helper arr n x (+ i 1))]))\n  (helper arr n x 0))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= x (vector-ref arr i)) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (vector-ref arr i) x)\n       (if (>= i (/ n 2))\n           #t\n           (is_majority-helper arr n x (+ i 1)))]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= x (vector-ref arr i)) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (vector-ref arr i) x)\n       (if (>= (* i 2) n)\n           #t\n           (helper arr n x (+ i 1)))]\n      [else (helper arr n x (+ i 1))]))\n  (helper arr n x 0))\n",
    "  (define (is_majority-helper arr n x)\n    (cond\n      [(= n 0) #f]\n      [(= (car arr) x)\n       (if (>= n (/ (length arr) 2))\n           #t\n           (is_majority-helper (cdr arr) (- n 1) x))]\n      [else (is_majority-helper (cdr arr) n x)]))\n  (is_majority-helper arr n x))\n",
    "  (define (helper i)\n    (if (&lt; i n)\n        (if (= x (vector-ref arr i))\n            (if (&gt;= (+ i (quotient n 2)) n)\n                #t\n                (helper (+ i 1)))\n            (helper (+ i 1)))\n        #f))\n  (helper 0))\n",
    "  (define (is_majority-helper arr n x count)\n    (cond ((= n 0) #f)\n          ((= x (car arr)) (is_majority-helper (cdr arr) (- n 1) x (+ count 1)))\n          ((&gt; count (/ n 2)) #t)\n          (else (is_majority-helper (cdr arr) (- n 1) x count))))\n  (is_majority-helper arr n x 0))\n</code>\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (if (>= n (/ (length arr) 2)) #t (helper (rest arr) n x))]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= x (vector-ref arr i)) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (helper arr n x count)\n    (cond [(= n 0) false]\n          [(= (first arr) x) (helper (rest arr) (- n 1) x (+ count 1))]\n          [else (helper (rest arr) (- n 1) x count)]))\n  (if (&gt; (helper arr n x 0) (/ n 2)) true false))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= x (first arr)) (if (> n (/ (length arr) 2)) #t (helper (rest arr) (+ n 1) x))]\n      [else (helper (rest arr) 0 x)]))\n  (helper arr 0 x))\n",
    "  (define (helper arr n x)\n    (if (or (= n 0) (= x 0))\n        #f\n        (if (= (car arr) x)\n            (helper (cdr arr) (- n 1) (- x 1))\n            (helper (cdr arr) (- n 1) x))))\n  (helper arr n (/ n 2)))\n",
    "  (define (is_majority-helper arr n x count)\n    (cond [(= n 0) #f]\n          [(= (car arr) x) (is_majority-helper (cdr arr) (- n 1) x (+ count 1))]\n          [else (is_majority-helper (cdr arr) (- n 1) x count)]))\n  (if (>= (is_majority-helper arr n x 0) (/ n 2)) #t #f))\n",
    "  (define (is_majority_helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (vector-ref arr i) x) #t]\n      [else (is_majority_helper arr n x (+ i 1))]))\n  (is_majority_helper arr n x 0))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (if (>= (/ n 2) (count arr x)) #t #f)]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (array-ref arr i) x)\n       (if (>= (* i 2) n)\n           #t\n           (is_majority-helper arr n x (+ i 1)))]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= x (vector-ref arr i)) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= n 0) #f]\n      [(= (first arr) x) (helper (rest arr) (- n 1) x)]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n",
    "  (define (is_majority-helper arr n x count)\n    (cond ((= n 0) #f)\n          ((= (car arr) x) (is_majority-helper (cdr arr) (- n 1) x (+ count 1)))\n          ((&gt; count (/ n 2)) #t)\n          (else (is_majority-helper (cdr arr) (- n 1) x count))))\n  (is_majority-helper arr n x 0))\n",
    "  (let ([half (quotient n 2)])\n    (if (= (count x arr) half)\n        #t\n        #f)))\n",
    "  (define (helper arr n x)\n    (cond [(empty? arr) false]\n          [(= (first arr) x) (if (>= (/ n 2) (count x arr)) true false)]\n          [else (helper (rest arr) n x)]))\n  (helper arr n x))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (if (>= (/ n 2) (count arr x)) #t #f)]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (if (&gt;= (/ n 2) (count x arr)) #t #f)]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n",
    "  (define (helper arr n x count)\n    (cond [(empty? arr) false]\n          [(= (first arr) x) (helper (rest arr) (- n 1) x (+ count 1))]\n          [else (helper (rest arr) (- n 1) x count)]))\n  (if (>= (helper arr n x 0) (/ n 2)) true false))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= x (vector-ref arr i)) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (if (= (count x arr) (/ n 2))\n      #t\n      #f))\n",
    "  (define (recur arr n x)\n    (cond\n      [(= n 0) #f]\n      [(= (car arr) x) (recur (cdr arr) (- n 1) x)]\n      [else (recur (cdr arr) (- n 1) x)]))\n  (recur arr n x))\n",
    "  (define (helper arr n x)\n    (cond ((= n 0) #f)\n          ((= x (car arr)) #t)\n          (else (helper (cdr arr) (- n 1) x))))\n  (helper arr n x))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond ((= i n) #f)\n          ((= x (vector-ref arr i)) #t)\n          (else (is_majority-helper arr n x (+ i 1)))))\n  (is_majority-helper arr n x 0))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (array-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (array-ref arr i) x)\n       (if (>= (* i 2) n)\n           #t\n           (helper arr n x (+ i 1)))]\n      [else (helper arr n x (+ i 1))]))\n  (helper arr n x 0))\n",
    "  (define (helper arr n x)\n    (cond\n      [(= n 0) #f]\n      [(= (car arr) x) (helper (cdr arr) (- n 1) x)]\n      [else (helper (cdr arr) (- n 1) x)]))\n  (helper arr n x))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x)\n       (if (&gt;= (/ n 2) (count x arr))\n           #t\n           #f)]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n",
    "  (define (is_majority-helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) #t]\n      [else (is_majority-helper (rest arr) n x)]))\n  (is_majority-helper arr n x))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= x (vector-ref arr i)) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond [(= i n) #f]\n          [(= x (array-ref arr i)) #t]\n          [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= x (first arr)) (if (>= (/ n 2) (count x arr)) #t #f)]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n",
    "  (define (helper arr n x)\n    (cond\n      [(= n 0) #f]\n      [(= (car arr) x) (helper (cdr arr) (- n 1) x)]\n      [else #f]))\n  (helper arr n x))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) #t]\n      [else (helper (rest arr) (- n 1) x)]))\n  (helper arr n x))\n",
    "  (define (is_majority-helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (is_majority-helper (rest arr) (- n 1) x)]\n      [else (is_majority-helper (rest arr) (- n 1) x)]))\n  (is_majority-helper arr n x))\n",
    "  (define (helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (array-ref arr i) x) #t]\n      [else (helper arr n x (+ i 1))]))\n  (helper arr n x 0))\n",
    "  (define (is_majority-helper arr n x i)\n    (if (= i n)\n        #f\n        (if (= x (array-ref arr i))\n            (if (>= (- i (quotient n 2)) 0)\n                #t\n                (is_majority-helper arr n x (+ i 1)))\n            (is_majority-helper arr n x (+ i 1)))))\n  (is_majority-helper arr n x 0))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (array-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n"
  ]
}