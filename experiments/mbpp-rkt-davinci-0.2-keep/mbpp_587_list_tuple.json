{
  "name": "mbpp_587_list_tuple",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to convert a list to a tuple.\n(define (list_tuple listx)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_587_list_tuple.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate list_tuple))\n    (check-equal? (candidate (list 5 10 7 4 15 3)) (list 5 10 7 4 15 3))\n    (check-equal? (candidate (list 2 4 5 6 2 3 4 4 7)) (list 2 4 5 6 2 3 4 4 7))\n    (check-equal? (candidate (list 58 44 56)) (list 58 44 56))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cons (car listx) (cdr listx)))\n",
    "  (cond [(empty? listx) empty]\n        [else (cons (car listx) (list_tuple (cdr listx)))]))\n",
    "  (apply vector listx))\n",
    "  (cond\n    [(empty? listx) empty]\n    [else (cons (first listx) (list_tuple (rest listx)))]))\n",
    "  (if (null? listx)\n      '()\n      (cons (car listx) (list_tuple (cdr listx)))))\n",
    "  (if (null? listx)\n      '()\n      (cons (car listx) (list_tuple (cdr listx)))))\n",
    "  (cond [(null? listx) '()]\n        [else (cons (car listx) (list_tuple (cdr listx)))]))\n",
    "  (cons (car listx) (cdr listx)))\n",
    "  (apply vector listx))\n",
    "  (tuple (car listx) (cadr listx)))\n",
    "  (if (null? listx)\n      '()\n      (cons (car listx) (list_tuple (cdr listx)))))\n",
    "  (apply vector listx))\n",
    "  (cond\n    [(empty? listx) empty]\n    [else (cons (first listx) (list_tuple (rest listx)))]))\n",
    "  (cons (car listx) (cdr listx)))\n",
    "  (if (null? listx)\n      '()\n      (cons (car listx) (list_tuple (cdr listx)))))\n",
    "  (list->vector listx))\n",
    "  (tuple (car listx) (cadr listx)))\n",
    "  (cond\n    [(empty? listx) empty]\n    [else (cons (car listx) (list_tuple (cdr listx)))]))\n",
    "  (define (list_tuple_iter listx tuplex)\n    (if (null? listx)\n        tuplex\n        (list_tuple_iter (cdr listx) (cons (car listx) tuplex))))\n  (list_tuple_iter listx '()))\n",
    "  (if (null? listx)\n      '()\n      (cons (car listx) (list_tuple (cdr listx)))))\n",
    "  (define (list_tuple_iter listx tuple)\n    (if (null? listx)\n        tuple\n        (list_tuple_iter (cdr listx) (cons (car listx) tuple))))\n  (list_tuple_iter listx '()))\n",
    "  (apply vector listx))\n",
    "  (cond [(null? listx) '()]\n        [else (cons (car listx) (list_tuple (cdr listx)))]))\n",
    "  (cond [(empty? listx) empty]\n        [else (cons (car listx) (list_tuple (cdr listx)))]))\n",
    "  (cond [(empty? listx) empty]\n        [else (cons (car listx) (cdr listx))]))\n",
    "  (cond [(empty? listx) empty]\n        [else (cons (car listx) (list_tuple (cdr listx)))]))\n",
    "  (cond [(empty? listx) empty]\n        [else (cons (car listx) (list_tuple (cdr listx)))]))\n",
    "  (apply vector listx))\n",
    "  (apply vector listx))\n",
    "  (apply values listx))\n",
    "  (cond\n    [(empty? listx) empty]\n    [else (cons (car listx) (list_tuple (cdr listx)))]))\n",
    "  (define (list_tuple_iter listx tuplex)\n    (if (null? listx)\n        tuplex\n        (list_tuple_iter (cdr listx) (cons (car listx) tuplex))))\n  (list_tuple_iter listx '()))\n",
    "  (cond\n    [(empty? listx) empty]\n    [else (cons (car listx) (list_tuple (cdr listx)))]))\n",
    "  (list->vector listx))\n",
    "  (apply vector listx))\n",
    "  (cond [(empty? listx) empty]\n        [else (cons (car listx) (list_tuple (cdr listx)))]))\n",
    "  (apply vector listx))\n",
    "  (cond\n    [(empty? listx) empty]\n    [else\n     (cons (car listx) (list_tuple (cdr listx)))]))\n",
    "  (cond\n    [(empty? listx) empty]\n    [else (cons (first listx) (list_tuple (rest listx)))]))\n",
    "  (if (null? listx)\n      '()\n      (cons (car listx) (list_tuple (cdr listx)))))\n",
    "  (cond [(empty? listx) empty]\n        [else (cons (car listx) (list_tuple (cdr listx)))]))\n",
    "  (cond\n    [(empty? listx) empty]\n    [else (cons (car listx) (list_tuple (cdr listx)))]))\n",
    "  (cond\n    [(null? listx) '()]\n    [else (cons (car listx) (list_tuple (cdr listx)))]))\n",
    "  (tuple (car listx) (cadr listx)))\n",
    "  (cond\n    [(null? listx) '()]\n    [else (cons (car listx) (list_tuple (cdr listx)))]))\n",
    "  (cond\n    [(empty? listx) empty]\n    [else (cons (first listx) (list_tuple (rest listx)))]))\n",
    "  (cons (car listx) (cdr listx)))\n",
    "  (cond\n    [(empty? listx) empty]\n    [else (cons (first listx) (list_tuple (rest listx)))]))\n",
    "  (apply vector listx))\n",
    "  (define (list_tuple_iter listx tuple)\n    (if (null? listx)\n        tuple\n        (list_tuple_iter (cdr listx)\n                         (cons (car listx) tuple))))\n  (list_tuple_iter listx '()))\n",
    "  (cons (car listx) (cdr listx)))\n",
    "  (cons (car listx) (cdr listx)))\n",
    "  (cond [(empty? listx) empty]\n        [(cons? listx) (cons (car listx) (list_tuple (cdr listx)))]))\n",
    "  (if (null? listx)\n      '()\n      (cons (car listx) (list_tuple (cdr listx)))))\n",
    "  (cond\n    [(null? listx) '()]\n    [else (cons (car listx) (list_tuple (cdr listx)))]))\n",
    "  (cond [(empty? listx) empty]\n        [else (cons (first listx) (cons (second listx) empty))]))\n",
    "  (apply vector listx))\n",
    "  (cond [(null? listx) '()]\n        [else (cons (car listx) (list_tuple (cdr listx)))]))\n",
    "  (if (null? listx)\n      '()\n      (cons (car listx) (list_tuple (cdr listx)))))\n",
    "  (if (null? listx)\n      '()\n      (cons (car listx) (list_tuple (cdr listx)))))\n",
    "  (cond [(empty? listx) empty]\n        [else (cons (car listx) (list_tuple (cdr listx)))]))\n",
    "  (if (null? listx)\n      '()\n      (cons (car listx) (list_tuple (cdr listx)))))\n",
    "  (cond\n    [(empty? listx) empty]\n    [else (cons (car listx) (list_tuple (cdr listx)))]))\n",
    "  (list->vector listx))\n",
    "  (cond [(empty? listx) empty]\n        [(cons? listx) (cons (car listx) (list_tuple (cdr listx)))]))\n",
    "  (cons (car listx) (cdr listx)))\n",
    "  (if (null? listx)\n      '()\n      (cons (car listx) (list_tuple (cdr listx)))))\n",
    "  (if (null? listx)\n      '()\n      (cons (car listx) (list_tuple (cdr listx)))))\n",
    "  (cond [(empty? listx) empty]\n        [else (cons (car listx) (cdr listx))]))\n",
    "  (cons (car listx) (cdr listx)))\n",
    "  (if (null? listx)\n      '()\n      (cons (car listx) (list_tuple (cdr listx)))))\n",
    "  (cond [(empty? listx) empty]\n        [else (cons (car listx) (list_tuple (cdr listx)))]))\n",
    "  (cond\n    [(null? listx) '()]\n    [else (cons (car listx) (list_tuple (cdr listx)))]))\n",
    "  (apply vector listx))\n",
    "  (cons (car listx)\n        (cons (cadr listx)\n              (cons (caddr listx)\n                    (cons (cadddr listx)\n                          (cons (caddddr listx)\n                                (cons (cadddddr listx)\n                                      (cons (caddddddr listx)\n                                            (cons (cadddddddr listx)\n                                                  (cons (caddddddddr listx)\n                                                        (cons (cadddddddddr listx)\n                                                              (cons (caddddddddddr listx)\n                                                                    (cons (cadddddddddddr listx)\n                                                                          (cons (caddddddddddddr listx)\n                                                                                (cons (cadddddddddddddr listx)\n                                                                                      (cons (caddddddddddddddr listx)\n                                                                                            (cons (cadddddddddddddddr listx)\n                                                                                                  (cons (caddddddddddddddddr listx)\n                                                                                                        (cons (cadddddddddddddddddr listx)\n                                                                                                              (cons (caddddddddddddddddddr listx)\n                                                                                                                    (cons (cadddddddddddddddddddr listx)\n                                                                                                                          (cons (caddddddddddddddddddddr listx)\n                                                                                                                                (cons (cadddddddddddddddddddddr listx)\n                                                                                                                                      (cons (caddddddddddddddddddddddr listx)\n                                                                                                                                            (cons (cadddddddddddddddddddddddr listx)\n                                                                                                                                                  (cons (caddddddddddddddddddddddddr listx)\n                                                                                                                                                        (cons (caddddddd",
    "  (apply vector listx))\n",
    "  (cond\n    [(empty? listx) empty]\n    [else (cons (first listx) (list_tuple (rest listx)))]))\n",
    "  (tuple (car listx) (cadr listx)))\n",
    "  (match listx\n    [(list x y) (cons x y)]\n    [_ (error 'list_tuple \"not a list of length 2\")]))\n",
    "  (list->vector listx))\n",
    "  (if (null? listx)\n      '()\n      (cons (car listx) (list_tuple (cdr listx)))))\n",
    "  (apply tuple listx))\n",
    "  (cons (car listx) (cdr listx)))\n",
    "  (tuple (car listx) (cadr listx)))\n",
    "  (cond [(empty? listx) empty]\n        [(cons? listx) (cons (car listx) (list_tuple (cdr listx)))]\n        [else (error \"Not a list\")]))\n",
    "  (cons (car listx) (cdr listx)))\n",
    "  (cond [(empty? listx) empty]\n        [else (cons (car listx) (cdr listx))]))\n",
    "  (list->vector listx))\n",
    "  (apply values listx))\n",
    "  (apply vector listx))\n",
    "  (define (list_tuple_iter listx tuplex)\n    (if (null? listx)\n        tuplex\n        (list_tuple_iter (cdr listx) (cons (car listx) tuplex))))\n  (list_tuple_iter listx '()))\n",
    "  (cons (car listx) (cdr listx)))\n",
    "  (cond\n    [(empty? listx) empty]\n    [else (cons (first listx) (list_tuple (rest listx)))]))\n",
    "  (apply vector listx))\n",
    "  (cond\n    [(empty? listx) empty]\n    [else (cons (first listx) (list_tuple (rest listx)))]))\n",
    "  (cons (car listx) (cdr listx)))\n",
    "  (cond\n    [(empty? listx) empty]\n    [else (cons (first listx) (list_tuple (rest listx)))]))\n",
    "  (if (null? listx)\n      '()\n      (cons (car listx) (list_tuple (cdr listx)))))\n",
    "  (apply vector listx))\n",
    "  (cond\n    [(empty? listx) empty]\n    [else (cons (first listx) (list_tuple (rest listx)))]))\n",
    "  (cond\n    [(empty? listx) empty]\n    [else (cons (first listx) (list_tuple (rest listx)))]))\n",
    "  (if (null? listx)\n      '()\n      (cons (car listx) (list_tuple (cdr listx)))))\n",
    "  (if (null? listx)\n      '()\n      (cons (car listx) (list_tuple (cdr listx)))))\n",
    "  (cond [(empty? listx) empty]\n        [else (cons (first listx) (list_tuple (rest listx)))]))\n",
    "  (if (null? listx)\n      '()\n      (cons (car listx) (list_tuple (cdr listx)))))\n",
    "  (if (null? listx)\n      '()\n      (cons (car listx) (list_tuple (cdr listx)))))\n",
    "  (cons (car listx) (cdr listx)))\n",
    "  (cond ((null? listx) '())\n        (else (cons (car listx) (list_tuple (cdr listx))))))\n",
    "  (tuple (car listx) (cadr listx)))\n",
    "  (apply values listx))\n",
    "  (cons (car listx) (cdr listx)))\n",
    "  (apply values listx))\n",
    "  (apply vector listx))\n",
    "  (cond\n    [(empty? listx) '()]\n    [else (cons (car listx) (list_tuple (cdr listx)))]))\n",
    "  (cond [(empty? listx) empty]\n        [else (cons (first listx) (list_tuple (rest listx)))]))\n",
    "  (tuple (car listx) (cadr listx)))\n",
    "  (cond\n    [(empty? listx) empty]\n    [else (cons (first listx) (list_tuple (rest listx)))]))\n",
    "  (if (null? listx)\n      '()\n      (cons (car listx) (list_tuple (cdr listx)))))\n",
    "  (cond [(empty? listx) empty]\n        [else (cons (car listx) (list_tuple (cdr listx)))]))\n",
    "  (cond [(empty? listx) empty]\n        [else (cons (first listx) (list_tuple (rest listx)))]))\n",
    "  (apply vector listx))\n",
    "  (cond\n    [(empty? listx) empty]\n    [else (cons (first listx) (list_tuple (rest listx)))]))\n",
    "  (cond [(empty? listx) empty]\n        [else (cons (car listx) (list_tuple (cdr listx)))]))\n",
    "  (cond [(empty? listx) empty]\n        [(cons? listx) (cons (car listx) (list_tuple (cdr listx)))]))\n",
    "  (apply vector listx))\n",
    "  (cond\n    [(empty? listx) empty]\n    [else (cons (first listx) (list_tuple (rest listx)))]))\n",
    "  (tuple (car listx) (cadr listx) (caddr listx)))\n",
    "  (cond [(empty? listx) empty]\n        [else (cons (car listx) (list_tuple (cdr listx)))]))\n",
    "  (apply values listx))\n",
    "  (if (null? listx)\n      '()\n      (cons (car listx) (list_tuple (cdr listx)))))\n",
    "  (list->vector listx))\n",
    "  (cons (car listx) (cdr listx)))\n",
    "  (define (iter listx acc)\n    (if (null? listx)\n        acc\n        (iter (cdr listx) (cons (car listx) acc))))\n  (iter listx '()))\n",
    "  (if (null? listx)\n      '()\n      (cons (car listx) (list_tuple (cdr listx)))))\n",
    "  (cons (car listx) (cdr listx)))\n",
    "  (cond\n    [(empty? listx) empty]\n    [else (cons (car listx) (list_tuple (cdr listx)))]))\n",
    "  (cons (car listx) (cdr listx)))\n",
    "  (define (list_tuple_iter listx tuplex)\n    (if (null? listx)\n        tuplex\n        (list_tuple_iter (cdr listx) (cons (car listx) tuplex))))\n  (list_tuple_iter listx '()))\n",
    "  (cond [(empty? listx) empty]\n        [(cons? listx) (cons (car listx) (list_tuple (cdr listx)))]))\n",
    "  (cons (car listx) (cdr listx)))\n",
    "  (if (null? listx)\n      '()\n      (cons (car listx) (list_tuple (cdr listx)))))\n",
    "  (cond\n    [(null? listx) '()]\n    [else (cons (car listx) (list_tuple (cdr listx)))]))\n",
    "  (if (null? listx)\n      '()\n      (cons (car listx) (list_tuple (cdr listx)))))\n",
    "  (apply vector listx))\n",
    "  (if (null? listx)\n      '()\n      (cons (car listx) (list_tuple (cdr listx)))))\n",
    "  (tuple (car listx) (cadr listx) (caddr listx)))\n",
    "  (define (list_tuple_iter listx tuplex)\n    (if (null? listx)\n        tuplex\n        (list_tuple_iter (cdr listx) (cons (car listx) tuplex))))\n  (list_tuple_iter listx '()))\n",
    "  (cond [(empty? listx) '()]\n        [else (cons (car listx) (list_tuple (cdr listx)))]))\n",
    "  (list->vector listx))\n",
    "  (cond [(empty? listx) empty]\n        [else (cons (car listx) (list_tuple (cdr listx)))]))\n",
    "  (if (null? listx)\n      '()\n      (cons (car listx) (list_tuple (cdr listx)))))\n",
    "  (apply vector listx))\n",
    "  (cond [(empty? listx) empty]\n        [else (cons (first listx) (cons (second listx) empty))]))\n",
    "  (cond\n    [(empty? listx) empty]\n    [(cons? listx) (cons (car listx) (list_tuple (cdr listx)))]\n    [else (error \"Not a list!\")]))\n",
    "  (apply vector listx))\n",
    "  (if (null? listx)\n      '()\n      (cons (car listx) (list_tuple (cdr listx)))))\n",
    "  (if (null? listx)\n      '()\n      (cons (car listx) (list_tuple (cdr listx)))))\n",
    "  (tuple (car listx) (cadr listx)))\n",
    "  (cons (car listx) (cdr listx)))\n",
    "  (cond [(empty? listx) empty]\n        [else (cons (car listx) (list_tuple (cdr listx)))]))\n",
    "  (cons (car listx) (cdr listx)))\n",
    "  (cons (car listx) (cdr listx)))\n",
    "  (cons (car listx) (cdr listx)))\n",
    "  (cons (car listx) (cdr listx)))\n",
    "  (cond\n    [(empty? listx) empty]\n    [else (cons (car listx) (cdr listx))]))\n",
    "  (cons (car listx) (cdr listx)))\n",
    "  (cond\n    [(empty? listx) empty]\n    [else (cons (car listx) (list_tuple (cdr listx)))]))\n",
    "  (cond [(empty? listx) empty]\n        [else (cons (first listx) (list_tuple (rest listx)))]))\n",
    "  (if (null? listx)\n      '()\n      (cons (car listx) (list_tuple (cdr listx)))))\n",
    "  (cond\n    [(empty? listx) empty]\n    [else (cons (first listx) (list_tuple (rest listx)))]))\n",
    "  (cond [(empty? listx) empty]\n        [else (cons (car listx) (list_tuple (cdr listx)))]))\n",
    "  (if (null? listx)\n      '()\n      (cons (car listx) (list_tuple (cdr listx)))))\n",
    "  (apply vector listx))\n",
    "  (cond [(empty? listx) empty]\n        [else (cons (car listx) (list_tuple (cdr listx)))]))\n",
    "  (cons (car listx) (cdr listx)))\n",
    "  (if (null? listx)\n      '()\n      (cons (car listx) (list_tuple (cdr listx)))))\n",
    "  (apply vector listx))\n",
    "  (cond\n    [(null? listx) '()]\n    [else (cons (car listx) (cdr listx))]))\n",
    "  (cons 'tuple listx))\n",
    "  (if (null? listx)\n      '()\n      (cons (car listx) (list_tuple (cdr listx)))))\n",
    "  (cond\n    [(empty? listx) '()]\n    [else (cons (car listx) (cdr listx))]))\n",
    "  (apply values listx))\n",
    "  (apply vector listx))\n",
    "  (cond [(empty? listx) empty]\n        [else (cons (car listx) (list_tuple (cdr listx)))]))\n",
    "  (apply vector listx))\n",
    "  (cond\n    [(empty? listx) empty]\n    [else (cons (first listx) (list_tuple (rest listx)))]))\n",
    "  (cond\n    [(empty? listx) empty]\n    [(cons? listx) (cons (car listx) (list_tuple (cdr listx)))]\n    [else (error \"Not a list\")]))\n",
    "  (list->vector listx))\n",
    "  (cond [(empty? listx) empty]\n        [else (cons (car listx) (list_tuple (cdr listx)))]))\n",
    "  (cons (car listx) (cdr listx)))\n",
    "  (if (null? listx)\n      '()\n      (cons (car listx) (list_tuple (cdr listx)))))\n",
    "  (apply vector listx))\n",
    "  (cond [(empty? listx) '()]\n        [else (cons (car listx) (list_tuple (cdr listx)))]))\n",
    "  (cond [(empty? listx) empty]\n        [else (cons (first listx) (list_tuple (rest listx)))]))\n",
    "  (if (null? listx)\n      '()\n      (cons (car listx) (list_tuple (cdr listx)))))\n",
    "  (cond ((null? listx) '())\n        ((null? (cdr listx)) (list (car listx)))\n        (else (cons (car listx) (list_tuple (cdr listx))))))\n",
    "  (if (null? listx)\n      '()\n      (cons (car listx) (list_tuple (cdr listx)))))\n",
    "  (if (null? listx)\n      '()\n      (cons (car listx) (list_tuple (cdr listx)))))\n",
    "  (cond [(empty? listx) empty]\n        [else (cons (first listx) (list_tuple (rest listx)))]))\n",
    "  (cond [(empty? listx) empty]\n        [else (cons (car listx) (list_tuple (cdr listx)))]))\n"
  ]
}