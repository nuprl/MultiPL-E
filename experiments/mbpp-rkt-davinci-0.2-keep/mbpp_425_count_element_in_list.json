{
  "name": "mbpp_425_count_element_in_list",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to count the number of sublists containing a particular element.\n(define (count_element_in_list list1 x)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_425_count_element_in_list.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_element_in_list))\n    (check-equal? (candidate (list (list 1 3) (list 5 7) (list 1 11) (list 1 15 7)) 1) 3)\n    (check-equal? (candidate (list (list \"A\" \"B\") (list \"A\" \"C\") (list \"A\" \"D\" \"E\") (list \"B\" \"C\" \"D\")) \"A\") 3)\n    (check-equal? (candidate (list (list \"A\" \"B\") (list \"A\" \"C\") (list \"A\" \"D\" \"E\") (list \"B\" \"C\" \"D\")) \"E\") 1)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond\n    [(empty? list1) 0]\n    [(equal? (first list1) x) (+ 1 (count_element_in_list (rest list1) x))]\n    [(list? (first list1)) (+ (count_element_in_list (first list1) x) (count_element_in_list (rest list1) x))]\n    [else (count_element_in_list (rest list1) x)]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(equal? (first list1) x) (+ 1 (count_element_in_list (rest list1) x))]\n    [else (count_element_in_list (rest list1) x)]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(member x (first list1)) (+ 1 (count_element_in_list (rest list1) x))]\n    [else (count_element_in_list (rest list1) x)]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(equal? (first list1) x) (+ 1 (count_element_in_list (rest list1) x))]\n    [else (count_element_in_list (rest list1) x)]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(equal? (first list1) x) (+ 1 (count_element_in_list (rest list1) x))]\n    [else (count_element_in_list (rest list1) x)]))\n",
    "  (cond\n    [(null? list1) 0]\n    [(equal? (car list1) x) (+ 1 (count_element_in_list (cdr list1) x))]\n    [else (count_element_in_list (cdr list1) x)]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(equal? (first list1) x) (+ 1 (count_element_in_list (rest list1) x))]\n    [else (count_element_in_list (rest list1) x)]))\n",
    "  (cond ((null? list1) 0)\n        ((equal? (car list1) x) (+ 1 (count_element_in_list (cdr list1) x)))\n        (else (count_element_in_list (cdr list1) x))))\n",
    "  (cond\n    [(null? list1) 0]\n    [(equal? (car list1) x) (+ 1 (count_element_in_list (cdr list1) x))]\n    [else (count_element_in_list (cdr list1) x)]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(equal? (first list1) x) (+ 1 (count_element_in_list (rest list1) x))]\n    [else (count_element_in_list (rest list1) x)]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(equal? (first list1) x) (+ 1 (count_element_in_list (rest list1) x))]\n    [else (count_element_in_list (rest list1) x)]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(equal? (first list1) x) (+ 1 (count_element_in_list (rest list1) x))]\n    [else (count_element_in_list (rest list1) x)]))\n",
    "  (cond\n    [(null? list1) 0]\n    [(equal? (car list1) x) (+ 1 (count_element_in_list (cdr list1) x))]\n    [(list? (car list1)) (+ (count_element_in_list (car list1) x) (count_element_in_list (cdr list1) x))]\n    [else (count_element_in_list (cdr list1) x)]))\n",
    "  (cond\n    [(null? list1) 0]\n    [(equal? (car list1) x) (+ 1 (count_element_in_list (cdr list1) x))]\n    [else (count_element_in_list (cdr list1) x)]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(equal? (first list1) x) (+ 1 (count_element_in_list (rest list1) x))]\n    [else (count_element_in_list (rest list1) x)]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [else\n     (cond\n       [(equal? (first list1) x) (+ 1 (count_element_in_list (rest list1) x))]\n       [(list? (first list1)) (+ (count_element_in_list (first list1) x) (count_element_in_list (rest list1) x))]\n       [else (count_element_in_list (rest list1) x)])]))\n",
    "  (cond\n    [(null? list1) 0]\n    [(list? (car list1))\n     (+ (count_element_in_list (car list1) x)\n        (count_element_in_list (cdr list1) x))]\n    [(equal? (car list1) x)\n     (+ 1 (count_element_in_list (cdr list1) x))]\n    [else (count_element_in_list (cdr list1) x)]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(equal? (first list1) x) (+ 1 (count_element_in_list (rest list1) x))]\n    [else (count_element_in_list (rest list1) x)]))\n",
    "  (cond\n    [(null? list1) 0]\n    [(equal? (car list1) x) (+ 1 (count_element_in_list (cdr list1) x))]\n    [else (count_element_in_list (cdr list1) x)]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(equal? (first list1) x) (+ 1 (count_element_in_list (rest list1) x))]\n    [else (count_element_in_list (rest list1) x)]))\n"
  ]
}