{
  "name": "mbpp_125_find_length",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_125_find_length.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (find_length_helper string count)\n    (cond\n      [(empty? string) count]\n      [(equal? (first string) #\\0) (find_length_helper (rest string) (+ count 1))]\n      [(equal? (first string) #\\1) (find_length_helper (rest string) (- count 1))]))\n  (find_length_helper string 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxn85aepf.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxn85aepf.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxn85aepf.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (helper string count)\n    (if (null? string)\n        count\n        (if (equal? (car string) #\\0)\n            (helper (cdr string) (+ count 1))\n            (helper (cdr string) (- count 1)))))\n  (helper string 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfwwpjeea.rkt:18:4\n\ncar: contract violation\n  expected: pair?\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfwwpjeea.rkt:19:4\n\ncar: contract violation\n  expected: pair?\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfwwpjeea.rkt:20:4\n\ncar: contract violation\n  expected: pair?\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [count 0])\n      (cond\n        [(= i len) count]\n        [(= j len) (loop (+ i 1) i count)]\n        [(= (string-ref string i) #\\0) (loop i (+ j 1) (+ count 1))]\n        [(= (string-ref string i) #\\1) (loop i (+ j 1) (- count 1))]))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpni0qdo4a.rkt:18:4\n\n=: contract violation\n  expected: number?\n  given: #\\1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpni0qdo4a.rkt:19:4\n\n=: contract violation\n  expected: number?\n  given: #\\1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpni0qdo4a.rkt:20:4\n\n=: contract violation\n  expected: number?\n  given: #\\1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ([string string] [count 0])\n    (cond [(empty? string) count]\n          [(equal? (first string) #\\1) (loop (rest string) (+ count 1))]\n          [else (loop (rest string) (- count 1))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz0jrzvno.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz0jrzvno.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz0jrzvno.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ([string string]\n             [count 0])\n    (if (null? string)\n        count\n        (if (equal? (car string) #\\1)\n            (loop (cdr string) (+ count 1))\n            (loop (cdr string) (- count 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvflyl99g.rkt:18:4\n\ncar: contract violation\n  expected: pair?\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvflyl99g.rkt:19:4\n\ncar: contract violation\n  expected: pair?\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvflyl99g.rkt:20:4\n\ncar: contract violation\n  expected: pair?\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ([string string] [count 0])\n    (if (empty? string)\n        count\n        (loop (rest string) (add1 count)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510004,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcplf56e3.rkt:15:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcplf56e3.rkt:16:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcplf56e3.rkt:17:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ([string string]\n             [count 0]\n             [max 0])\n    (cond [(empty? string) max]\n          [(char=? (first string) #\\1) (loop (rest string) (+ count 1) max)]\n          [(char=? (first string) #\\0) (loop (rest string) (- count 1) (max max (- count)))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510004,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphuv_w51t.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphuv_w51t.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphuv_w51t.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (helper string count)\n    (cond\n      [(empty? string) count]\n      [(equal? (first string) #\\0) (helper (rest string) (+ count 1))]\n      [(equal? (first string) #\\1) (helper (rest string) (- count 1))]))\n  (helper string 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510004,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_rdd8znj.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_rdd8znj.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_rdd8znj.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ([i 0] [j 0] [max 0])\n    (cond [(= i (string-length string)) max]\n          [(= (string-ref string i) #\\0) (loop (+ i 1) (+ j 1) (max max (- j i)))]\n          [else (loop (+ i 1) j (max max (- j i)))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510004,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnnruk_2k.rkt:15:4\n\n=: contract violation\n  expected: number?\n  given: #\\1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnnruk_2k.rkt:16:4\n\n=: contract violation\n  expected: number?\n  given: #\\1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnnruk_2k.rkt:17:4\n\n=: contract violation\n  expected: number?\n  given: #\\1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [max 0])\n      (cond\n        [(= i len) max]\n        [else\n         (let ([zero-count (count (string-ref string i) #\\0)]\n               [one-count (count (string-ref string i) #\\1)])\n           (loop (+ i 1) (+ j 1) (max max (- zero-count one-count))))]))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510004,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcdtg45sz.rkt:19:4\n\ncount: contract violation\n  expected: procedure?\n  given: #\\1\n  argument position: 1st\n  other arguments...:\n   #\\0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcdtg45sz.rkt:20:4\n\ncount: contract violation\n  expected: procedure?\n  given: #\\1\n  argument position: 1st\n  other arguments...:\n   #\\0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcdtg45sz.rkt:21:4\n\ncount: contract violation\n  expected: procedure?\n  given: #\\1\n  argument position: 1st\n  other arguments...:\n   #\\0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ([string string] [count 0] [max 0])\n    (cond [(empty? string) max]\n          [else\n           (if (equal? (first string) #\\0)\n               (loop (rest string) (add1 count) (max max count))\n               (loop (rest string) (sub1 count) (max max (- count))))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510004,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx1q254k2.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx1q254k2.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx1q254k2.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (find_length_iter string count max)\n    (cond\n      [(empty? string) max]\n      [(= (first string) #\\0) (find_length_iter (rest string) (- count 1) (max max (- count)))]\n      [(= (first string) #\\1) (find_length_iter (rest string) (+ count 1) (max max count))]))\n  (find_length_iter string 0 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510004,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmroftkis.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmroftkis.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmroftkis.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [max-diff 0])\n      (cond\n        [(= i len) max-diff]\n        [(= j len) (loop (+ i 1) i max-diff)]\n        [else\n         (let ([diff (abs (- (count-char #\\1 (substring string i j))\n                             (count-char #\\0 (substring string i j))))])\n           (if (&gt; diff max-diff)\n               (loop i (+ j 1) diff)\n               (loop i (+ j 1) max-diff)))]))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "/tmp/tmpkjjl91d5.rkt:15:42: read-syntax: missing `)` to close `(` on line 11, found instead `]`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ((string string) (count 0))\n    (if (null? string)\n        count\n        (loop (cdr string) (+ count 1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510004,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9lanczwu.rkt:15:4\n\ncdr: contract violation\n  expected: pair?\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9lanczwu.rkt:16:4\n\ncdr: contract violation\n  expected: pair?\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9lanczwu.rkt:17:4\n\ncdr: contract violation\n  expected: pair?\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ([string string] [count 0])\n    (cond [(empty? string) count]\n          [(char=? (first string) #\\0) (loop (rest string) (+ count 1))]\n          [else (loop (rest string) (- count 1))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510004,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfxs9fl5c.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfxs9fl5c.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfxs9fl5c.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ((string string)\n             (count 0)\n             (max-count 0))\n    (cond ((null? string) max-count)\n          ((equal? (car string) #\\0)\n           (loop (cdr string)\n                 (add1 count)\n                 (if (&gt; count max-count) count max-count)))\n          (else (loop (cdr string)\n                      (sub1 count)\n                      (if (&gt; (- count) max-count) (- count) max-count))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "/tmp/tmpt2pg85yi.rkt:15:26: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 17\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ([string string] [count 0] [max 0])\n    (cond [(empty? string) max]\n          [(char=? (first string) #\\0) (loop (rest string) (add1 count) (if (> count max) count max))]\n          [else (loop (rest string) (sub1 count) (if (> (- count) max) (- count) max))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510004,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptkhtyzj5.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptkhtyzj5.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptkhtyzj5.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (find_length_iter string count)\n    (cond\n      [(empty? string) count]\n      [(equal? (first string) #\\0) (find_length_iter (rest string) (+ count 1))]\n      [(equal? (first string) #\\1) (find_length_iter (rest string) (- count 1))]))\n  (find_length_iter string 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510004,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7htadb7w.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7htadb7w.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7htadb7w.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (find_length_helper string count)\n    (cond\n      [(empty? string) count]\n      [(char=? (first string) #\\0) (find_length_helper (rest string) (add1 count))]\n      [(char=? (first string) #\\1) (find_length_helper (rest string) (sub1 count))]\n      [else (find_length_helper (rest string) count)]))\n  (find_length_helper string 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510004,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpna5p2rgj.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpna5p2rgj.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpna5p2rgj.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [count 0])\n      (cond\n        [(= i len) count]\n        [(= j len) (loop (+ i 1) i count)]\n        [(= (string-ref string i) #\\1) (loop i (+ j 1) (+ count 1))]\n        [(= (string-ref string i) #\\0) (loop i (+ j 1) (- count 1))]))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510004,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp93ovvujw.rkt:18:4\n\n=: contract violation\n  expected: number?\n  given: #\\1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp93ovvujw.rkt:19:4\n\n=: contract violation\n  expected: number?\n  given: #\\1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp93ovvujw.rkt:20:4\n\n=: contract violation\n  expected: number?\n  given: #\\1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (string-length string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122975,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo_owisqb.rkt:12:4\nactual:     11\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo_owisqb.rkt:13:4\nactual:     5\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo_owisqb.rkt:14:4\nactual:     14\nexpected:   2\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ([string string] [count 0])\n    (if (empty? string)\n        count\n        (loop (rest string) (+ count (if (equal? (first string) #\\0) 1 -1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122979,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx8tsjkh9.rkt:15:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx8tsjkh9.rkt:16:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx8tsjkh9.rkt:17:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [max-len 0])\n      (cond\n        [(= i len) max-len]\n        [(= j len) (loop (+ i 1) i max-len)]\n        [else\n         (let ([zero-count (count (string-ref string j) #\\0)]\n               [one-count (count (string-ref string j) #\\1)])\n           (loop i (+ j 1) (max max-len (- zero-count one-count))))]))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122979,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu_9otdmy.rkt:20:4\n\ncount: contract violation\n  expected: procedure?\n  given: #\\1\n  argument position: 1st\n  other arguments...:\n   #\\0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu_9otdmy.rkt:21:4\n\ncount: contract violation\n  expected: procedure?\n  given: #\\1\n  argument position: 1st\n  other arguments...:\n   #\\0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu_9otdmy.rkt:22:4\n\ncount: contract violation\n  expected: procedure?\n  given: #\\1\n  argument position: 1st\n  other arguments...:\n   #\\0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [count 0])\n      (cond\n        [(= i len) count]\n        [(= (string-ref string i) #\\1) (loop (+ i 1) j (+ count 1))]\n        [else (loop (+ i 1) j (- count 1))]))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122974,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqwvrqcf7.rkt:17:4\n\n=: contract violation\n  expected: number?\n  given: #\\1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqwvrqcf7.rkt:18:4\n\n=: contract violation\n  expected: number?\n  given: #\\1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqwvrqcf7.rkt:19:4\n\n=: contract violation\n  expected: number?\n  given: #\\1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let ([len (string-length string)])\n    (let loop ([i 0] [j len])\n      (if (= i j)\n          0\n          (let ([sub (substring string i j)])\n            (let ([diff (abs (- (count-matches #\\0 sub) (count-matches #\\1 sub)))])\n              (max diff (loop (+ i 1) j))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122979,
      "stdout": "",
      "stderr": "/tmp/tmpnrzyemmw.rkt:10:33: count-matches: unbound identifier\n  in: count-matches\n  location...:\n   /tmp/tmpnrzyemmw.rkt:10:33\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (cond\n    [(empty? string) 0]\n    [else (add1 (find_length (rest string)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122976,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps7he0wt4.rkt:14:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps7he0wt4.rkt:15:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps7he0wt4.rkt:16:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (find_length-iter string count max)\n    (cond\n      [(empty? string) max]\n      [(equal? (first string) #\\0) (find_length-iter (rest string) (- count 1) (max count max))]\n      [else (find_length-iter (rest string) (+ count 1) (max count max))]))\n  (find_length-iter string 0 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122979,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkbi92eyi.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkbi92eyi.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkbi92eyi.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (find_length_iter string count max)\n    (cond\n      [(empty? string) max]\n      [(equal? (first string) #\\0) (find_length_iter (rest string) (- count 1) (max max (- count)))]\n      [(equal? (first string) #\\1) (find_length_iter (rest string) (+ count 1) (max max count))]))\n  (find_length_iter string 0 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkncs2k_2.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkncs2k_2.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkncs2k_2.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [count 0])\n      (cond [(= i len) count]\n            [(= (string-ref string i) #\\0)\n             (loop (+ i 1) j (+ count 1))]\n            [(= (string-ref string i) #\\1)\n             (loop (+ i 1) j (- count 1))]\n            [else (loop (+ i 1) j count)]))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122979,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpawlv52gj.rkt:19:4\n\n=: contract violation\n  expected: number?\n  given: #\\1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpawlv52gj.rkt:20:4\n\n=: contract violation\n  expected: number?\n  given: #\\1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpawlv52gj.rkt:21:4\n\n=: contract violation\n  expected: number?\n  given: #\\1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [max-diff 0])\n      (cond\n        [(= i len) max-diff]\n        [(= j len) (loop (+ i 1) i max-diff)]\n        [(= (string-ref string i) #\\0)\n         (loop i (+ j 1) (max max-diff (- j i)))]\n        [else (loop i (+ j 1) max-diff)]))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122979,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmporba7svx.rkt:19:4\n\n=: contract violation\n  expected: number?\n  given: #\\1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmporba7svx.rkt:20:4\n\n=: contract violation\n  expected: number?\n  given: #\\1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmporba7svx.rkt:21:4\n\n=: contract violation\n  expected: number?\n  given: #\\1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [max-diff 0])\n      (cond\n        [(= i len) max-diff]\n        [(= j len) (loop (+ i 1) i max-diff)]\n        [else\n         (let ([diff (- (count-substrings string #\\1 i j)\n                        (count-substrings string #\\0 i j))])\n           (if (&gt; diff max-diff)\n               (loop i (+ j 1) diff)\n               (loop i (+ j 1) max-diff)))]))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122978,
      "stdout": "",
      "stderr": "/tmp/tmp8dm27nxl.rkt:15:42: read-syntax: missing `)` to close `(` on line 11, found instead `]`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let ((len (string-length string)))\n    (if (= len 1)\n        0\n        (let ((first (substring string 0 1))\n              (rest (substring string 1)))\n          (if (string=? first \"0\")\n              (find_length rest)\n              (+ 1 (find_length rest)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122979,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_il2ywc1.rkt:19:4\nactual:     3\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_il2ywc1.rkt:20:4\nactual:     3\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_il2ywc1.rkt:21:4\nactual:     8\nexpected:   2\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (cond [(empty? string) 0]\n        [else (add1 (find_length (rest string)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv8qq2bha.rkt:13:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv8qq2bha.rkt:14:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv8qq2bha.rkt:15:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (find_length_helper string count max)\n    (cond\n      [(empty? string) max]\n      [(string=? (first string) \"0\") (find_length_helper (rest string) (- count 1) (max max (- count)))]\n      [(string=? (first string) \"1\") (find_length_helper (rest string) (+ count 1) (max max count))]))\n  (find_length_helper string 0 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122979,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdghkngj7.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdghkngj7.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdghkngj7.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ([string string] [count 0])\n    (cond [(empty? string) count]\n          [(equal? (first string) #\\1) (loop (rest string) (+ count 1))]\n          [else (loop (rest string) (- count 1))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz0jrzvno.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz0jrzvno.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz0jrzvno.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (find_length_iter string count max)\n    (cond\n      [(empty? string) max]\n      [(equal? (first string) #\\0) (find_length_iter (rest string) (- count 1) (max max (- count)))]\n      [(equal? (first string) #\\1) (find_length_iter (rest string) (+ count 1) (max max count))]))\n  (find_length_iter string 0 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkncs2k_2.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkncs2k_2.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkncs2k_2.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ((string string) (count 0) (max 0))\n    (cond ((null? string) max)\n          ((char=? (car string) #\\0) (loop (cdr string) (- count 1) (max count)))\n          ((char=? (car string) #\\1) (loop (cdr string) (+ count 1) (max count)))\n          (else (loop (cdr string) count max)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122979,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprisu5170.rkt:16:4\n\ncar: contract violation\n  expected: pair?\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprisu5170.rkt:17:4\n\ncar: contract violation\n  expected: pair?\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprisu5170.rkt:18:4\n\ncar: contract violation\n  expected: pair?\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [count 0] [max 0])\n      (cond\n        [(= i len) max]\n        [(= (string-ref string i) #\\0)\n         (loop (+ i 1) j (+ count 1) (max max (- count j)))]\n        [else\n         (loop (+ i 1) (+ j 1) count (max max (- count j)))]))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122979,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0wq2c01a.rkt:19:4\n\n=: contract violation\n  expected: number?\n  given: #\\1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0wq2c01a.rkt:20:4\n\n=: contract violation\n  expected: number?\n  given: #\\1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0wq2c01a.rkt:21:4\n\n=: contract violation\n  expected: number?\n  given: #\\1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (find_length_iter string length)\n    (cond ((null? string) length)\n          ((= (car string) #\\0) (find_length_iter (cdr string) (+ length 1)))\n          ((= (car string) #\\1) (find_length_iter (cdr string) (- length 1)))\n          (else (find_length_iter (cdr string) length))))\n  (find_length_iter string 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122979,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6pa5g5ep.rkt:17:4\n\ncar: contract violation\n  expected: pair?\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6pa5g5ep.rkt:18:4\n\ncar: contract violation\n  expected: pair?\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6pa5g5ep.rkt:19:4\n\ncar: contract violation\n  expected: pair?\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (find_length_iter string count max)\n    (cond\n      [(empty? string) max]\n      [(equal? (first string) #\\0) (find_length_iter (rest string) (- count 1) (max max (- count)))]\n      [(equal? (first string) #\\1) (find_length_iter (rest string) (+ count 1) (max max count))]))\n  (find_length_iter string 0 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkncs2k_2.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkncs2k_2.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkncs2k_2.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (helper string count)\n    (cond\n      [(empty? string) count]\n      [(equal? (first string) #\\0) (helper (rest string) (- count 1))]\n      [(equal? (first string) #\\1) (helper (rest string) (+ count 1))]))\n  (helper string 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122977,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpep3vachy.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpep3vachy.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpep3vachy.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [max 0])\n      (if (= i len)\n          max\n          (let ([c (string-ref string i)])\n            (if (or (= c #\\0) (= c #\\1))\n                (let ([diff (- j i)])\n                  (if (&gt; diff max)\n                      (loop (+ i 1) j diff)\n                      (loop (+ i 1) j max)))\n                (loop (+ i 1) (+ i 1) max)))))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122978,
      "stdout": "",
      "stderr": "/tmp/tmp7sju43gt.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 16\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ([string string]\n             [max-length 0]\n             [length 0])\n    (cond [(empty? string) max-length]\n          [(equal? (first string) #\\0)\n           (loop (rest string)\n                 (max max-length length)\n                 (add1 length))]\n          [else\n           (loop (rest string)\n                 (max max-length length)\n                 (sub1 length))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122976,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7pp3tjry.rkt:23:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7pp3tjry.rkt:24:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7pp3tjry.rkt:25:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (helper string count)\n    (cond\n      [(empty? string) count]\n      [(equal? (first string) #\\0) (helper (rest string) (- count 1))]\n      [(equal? (first string) #\\1) (helper (rest string) (+ count 1))]))\n  (helper string 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122977,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpep3vachy.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpep3vachy.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpep3vachy.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (find_length_helper string length)\n    (if (null? string)\n        length\n        (if (equal? (car string) #\\0)\n            (find_length_helper (cdr string) (+ length 1))\n            (find_length_helper (cdr string) (- length 1)))))\n  (find_length_helper string 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122979,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpngy46tga.rkt:18:4\n\ncar: contract violation\n  expected: pair?\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpngy46tga.rkt:19:4\n\ncar: contract violation\n  expected: pair?\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpngy46tga.rkt:20:4\n\ncar: contract violation\n  expected: pair?\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ([string string] [count 0] [max_count 0])\n    (cond [(empty? string) max_count]\n          [(= (first string) #\\0) (loop (rest string) (add1 count) (max max_count count))]\n          [else (loop (rest string) (sub1 count) (max max_count (abs count)))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122979,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps_4lm0qd.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps_4lm0qd.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps_4lm0qd.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (find_length-iter string count max)\n    (cond [(empty? string) max]\n          [(char=? (first string) #\\0) (find_length-iter (rest string) (add1 count) max)]\n          [(char=? (first string) #\\1) (find_length-iter (rest string) (sub1 count) (max max count))]))\n  (find_length-iter string 0 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122979,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgayabxx4.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgayabxx4.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgayabxx4.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ([string string] [count 0])\n    (if (null? string)\n        count\n        (if (equal? (car string) #\\1)\n            (loop (cdr string) (+ count 1))\n            (loop (cdr string) (- count 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122979,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplm4j23mn.rkt:17:4\n\ncar: contract violation\n  expected: pair?\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplm4j23mn.rkt:18:4\n\ncar: contract violation\n  expected: pair?\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplm4j23mn.rkt:19:4\n\ncar: contract violation\n  expected: pair?\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ([string string] [count 0])\n    (if (null? string)\n        count\n        (if (equal? (car string) #\\1)\n            (loop (cdr string) (+ count 1))\n            (loop (cdr string) (- count 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122979,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplm4j23mn.rkt:17:4\n\ncar: contract violation\n  expected: pair?\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplm4j23mn.rkt:18:4\n\ncar: contract violation\n  expected: pair?\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplm4j23mn.rkt:19:4\n\ncar: contract violation\n  expected: pair?\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let ([zero-count (count-zeros string)]\n        [one-count (count-ones string)])\n    (max zero-count one-count)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122979,
      "stdout": "",
      "stderr": "/tmp/tmp68uksn7q.rkt:5:21: count-zeros: unbound identifier\n  in: count-zeros\n  location...:\n   /tmp/tmp68uksn7q.rkt:5:21\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (find_length-iter string count max)\n    (cond\n      [(empty? string) max]\n      [(equal? (first string) #\\0) (find_length-iter (rest string) (add1 count) max)]\n      [(equal? (first string) #\\1) (find_length-iter (rest string) (sub1 count) (max max (abs count)))]))\n  (find_length-iter string 0 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122979,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptrfj5i5g.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptrfj5i5g.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptrfj5i5g.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ([string string] [count 0])\n    (if (null? string)\n        count\n        (loop (cdr string) (+ count 1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoil3mwgw.rkt:15:4\n\ncdr: contract violation\n  expected: pair?\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoil3mwgw.rkt:16:4\n\ncdr: contract violation\n  expected: pair?\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoil3mwgw.rkt:17:4\n\ncdr: contract violation\n  expected: pair?\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (find_length_iter string count)\n    (cond\n      [(empty? string) count]\n      [(equal? (first string) #\\0) (find_length_iter (rest string) (add1 count))]\n      [else (find_length_iter (rest string) (sub1 count))]))\n  (find_length_iter string 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122979,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp44ucagbo.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp44ucagbo.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp44ucagbo.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (find_length_iter string count max)\n    (cond [(empty? string) max]\n          [(equal? (first string) #\\0) (find_length_iter (rest string) (add1 count) max)]\n          [(equal? (first string) #\\1) (find_length_iter (rest string) (sub1 count) (max max (abs count)))]))\n  (find_length_iter string 0 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122979,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo65wptby.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo65wptby.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo65wptby.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (find_length_iter string count)\n    (cond\n      [(empty? string) count]\n      [(char=? (first string) #\\0) (find_length_iter (rest string) (+ count 1))]\n      [else (find_length_iter (rest string) (- count 1))]))\n  (find_length_iter string 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122979,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv64cr_re.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv64cr_re.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv64cr_re.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (find_length_helper string count max)\n    (cond\n      [(empty? string) max]\n      [(string-ref string 0) (find_length_helper (substring string 1) (add1 count) max)]\n      [else (find_length_helper (substring string 1) (sub1 count) (max (abs count) max))]))\n  (find_length_helper string 0 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122979,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5l8n7gnk.rkt:17:4\n\nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5l8n7gnk.rkt:18:4\n\nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5l8n7gnk.rkt:19:4\n\nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [max-diff 0] [zero-count 0] [one-count 0])\n      (cond [(= i len) max-diff]\n            [else\n             (let ([char (string-ref string i)])\n               (cond [(= char #\\0)\n                      (loop (+ i 1) j (max max-diff (- j i)) (+ zero-count 1) one-count)]\n                     [(= char #\\1)\n                      (loop (+ i 1) j (max max-diff (- j i)) zero-count (+ one-count 1))]\n                     [else\n                      (loop (+ i 1) j max-diff zero-count one-count)]))]))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122979,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx0xtu26t.rkt:22:4\n\n=: contract violation\n  expected: number?\n  given: #\\1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx0xtu26t.rkt:23:4\n\n=: contract violation\n  expected: number?\n  given: #\\1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx0xtu26t.rkt:24:4\n\n=: contract violation\n  expected: number?\n  given: #\\1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ([string string] [count 0])\n    (cond [(empty? string) count]\n          [(equal? (first string) #\\1) (loop (rest string) (+ count 1))]\n          [else (loop (rest string) (- count 1))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz0jrzvno.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz0jrzvno.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz0jrzvno.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ([string string] [count 0] [max 0])\n    (cond [(empty? string) max]\n          [(char=? (first string) #\\0) (loop (rest string) (add1 count) (max max (- count)))]\n          [(char=? (first string) #\\1) (loop (rest string) (sub1 count) (max max (- count)))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122979,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz03t4mnq.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz03t4mnq.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz03t4mnq.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ((string string) (count 0) (max 0))\n    (cond ((null? string) max)\n          ((equal? (car string) #\\0) (loop (cdr string) (add1 count) (max count)))\n          ((equal? (car string) #\\1) (loop (cdr string) (sub1 count) (max (abs count)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122980,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp26zculh5.rkt:15:4\n\ncar: contract violation\n  expected: pair?\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp26zculh5.rkt:16:4\n\ncar: contract violation\n  expected: pair?\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp26zculh5.rkt:17:4\n\ncar: contract violation\n  expected: pair?\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ((string string) (count 0) (max 0))\n    (cond ((null? string) max)\n          ((equal? (car string) #\\0) (loop (cdr string) (- count 1) (max count)))\n          ((equal? (car string) #\\1) (loop (cdr string) (+ count 1) (max count)))\n          (else (error \"Invalid character\")))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122980,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkms9fm8m.rkt:16:4\n\ncar: contract violation\n  expected: pair?\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkms9fm8m.rkt:17:4\n\ncar: contract violation\n  expected: pair?\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkms9fm8m.rkt:18:4\n\ncar: contract violation\n  expected: pair?\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (find_length_helper string count)\n    (if (null? string)\n        count\n        (if (equal? (car string) #\\1)\n            (find_length_helper (cdr string) (+ count 1))\n            (find_length_helper (cdr string) (- count 1)))))\n  (find_length_helper string 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122980,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp7_sdva8.rkt:18:4\n\ncar: contract violation\n  expected: pair?\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp7_sdva8.rkt:19:4\n\ncar: contract violation\n  expected: pair?\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp7_sdva8.rkt:20:4\n\ncar: contract violation\n  expected: pair?\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ([string string]\n             [count 0])\n    (cond [(empty? string) count]\n          [(equal? (first string) #\\0) (loop (rest string) (+ count 1))]\n          [else (loop (rest string) (- count 1))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122977,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoku1s1l3.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoku1s1l3.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoku1s1l3.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (find_length-iter string count max)\n    (cond\n      [(empty? string) max]\n      [(equal? (first string) #\\0) (find_length-iter (rest string) (add1 count) max)]\n      [(equal? (first string) #\\1) (find_length-iter (rest string) (sub1 count) (max max (abs count)))]))\n  (find_length-iter string 0 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122979,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptrfj5i5g.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptrfj5i5g.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptrfj5i5g.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let ((max-diff 0)\n        (count 0))\n    (for ([i (in-range (string-length string))])\n      (cond\n        [(string=? (string-ref string i) #\\0)\n         (set! count (add1 count))]\n        [(string=? (string-ref string i) #\\1)\n         (set! count (sub1 count))]))\n      (cond\n        [(> count max-diff)\n         (set! max-diff count)]\n        [(< count 0)\n         (set! count 0)]))\n    max-diff))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122979,
      "stdout": "",
      "stderr": "/tmp/tmpgmpv6bhv.rkt:18:13: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [count 0])\n      (cond\n        [(= i len) count]\n        [(= (string-ref string i) #\\0)\n         (loop (+ i 1) j (+ count 1))]\n        [else\n         (loop (+ i 1) j (- count 1))]))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122980,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq88xbig7.rkt:19:4\n\n=: contract violation\n  expected: number?\n  given: #\\1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq88xbig7.rkt:20:4\n\n=: contract violation\n  expected: number?\n  given: #\\1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq88xbig7.rkt:21:4\n\n=: contract violation\n  expected: number?\n  given: #\\1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ((string string)\n             (max-diff 0)\n             (diff 0))\n    (cond\n      [(null? string) max-diff]\n      [(equal? (car string) #\\0)\n       (loop (cdr string)\n             (max max-diff (abs (add1 diff)))\n             (add1 diff))]\n      [else\n       (loop (cdr string)\n             (max max-diff (abs (sub1 diff)))\n             (sub1 diff))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122980,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ejfig8p.rkt:24:4\n\ncar: contract violation\n  expected: pair?\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ejfig8p.rkt:25:4\n\ncar: contract violation\n  expected: pair?\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ejfig8p.rkt:26:4\n\ncar: contract violation\n  expected: pair?\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (find_length_helper string count length)\n    (cond\n      [(empty? string) length]\n      [(= (first string) #\\0) (find_length_helper (rest string) (- count 1) (max length (- count)))]\n      [(= (first string) #\\1) (find_length_helper (rest string) (+ count 1) (max length count))]))\n  (find_length_helper string 0 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122980,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwpwxzu7f.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwpwxzu7f.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwpwxzu7f.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (helper string count)\n    (cond ((null? string) count)\n          ((equal? (car string) #\\0) (helper (cdr string) (add1 count)))\n          ((equal? (car string) #\\1) (helper (cdr string) (sub1 count)))\n          (else (error \"Not a binary string\"))))\n  (helper string 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122980,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmrl7ltas.rkt:17:4\n\ncar: contract violation\n  expected: pair?\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmrl7ltas.rkt:18:4\n\ncar: contract violation\n  expected: pair?\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmrl7ltas.rkt:19:4\n\ncar: contract violation\n  expected: pair?\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ((string string) (count 0))\n    (cond\n      [(null? string) count]\n      [(equal? (car string) #\\1) (loop (cdr string) (+ count 1))]\n      [else (loop (cdr string) (- count 1))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122980,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq7dvmbfk.rkt:16:4\n\ncar: contract violation\n  expected: pair?\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq7dvmbfk.rkt:17:4\n\ncar: contract violation\n  expected: pair?\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq7dvmbfk.rkt:18:4\n\ncar: contract violation\n  expected: pair?\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [max 0])\n      (cond\n        [(= i len) max]\n        [(= j len) (loop (+ i 1) i max)]\n        [(= (string-ref string i) #\\0)\n         (loop i (+ j 1) (max max (- j i)))]\n        [else (loop i (+ j 1) max)]))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "/tmp/tmpqn6nhhza.rkt:13:0: </code>: unbound identifier\n  in: </code>\n  location...:\n   /tmp/tmpqn6nhhza.rkt:13:0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ([string string]\n             [count 0]\n             [max-count 0])\n    (cond [(empty? string) max-count]\n          [(char=? (first string) #\\0)\n           (loop (rest string)\n                 (add1 count)\n                 (if (&gt; count max-count) count max-count))]\n          [(char=? (first string) #\\1)\n           (loop (rest string)\n                 (sub1 count)\n                 (if (&gt; (abs count) max-count) (abs count) max-count))])))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122979,
      "stdout": "",
      "stderr": "/tmp/tmp1oogs440.rkt:16:21: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 17\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (find_length_iter string count max)\n    (cond\n      [(empty? string) max]\n      [(= (first string) #\\0) (find_length_iter (rest string) (add1 count) max)]\n      [(= (first string) #\\1) (find_length_iter (rest string) (sub1 count) (max max (abs count)))]))\n  (find_length_iter string 0 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122980,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxl65z90i.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxl65z90i.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxl65z90i.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let ((count 0))\n    (for ([i (in-range (string-length string))])\n      (if (equal? (string-ref string i) #\\1)\n          (set! count (+ count 1))\n          (set! count (- count 1))))\n    count))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122974,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp11i7wsqq.rkt:17:4\nactual:     -3\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp11i7wsqq.rkt:18:4\nactual:     3\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp11i7wsqq.rkt:19:4\nactual:     4\nexpected:   2\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (string-length string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122975,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo_owisqb.rkt:12:4\nactual:     11\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo_owisqb.rkt:13:4\nactual:     5\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo_owisqb.rkt:14:4\nactual:     14\nexpected:   2\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ((string string) (count 0))\n    (cond ((null? string) count)\n          ((char=? (car string) #\\0) (loop (cdr string) (+ count 1)))\n          (else (loop (cdr string) (- count 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122980,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4pf8flw2.rkt:15:4\n\ncar: contract violation\n  expected: pair?\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4pf8flw2.rkt:16:4\n\ncar: contract violation\n  expected: pair?\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4pf8flw2.rkt:17:4\n\ncar: contract violation\n  expected: pair?\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ([string string] [count 0])\n    (if (null? string)\n        count\n        (loop (cdr string) (+ count 1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoil3mwgw.rkt:15:4\n\ncdr: contract violation\n  expected: pair?\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoil3mwgw.rkt:16:4\n\ncdr: contract violation\n  expected: pair?\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoil3mwgw.rkt:17:4\n\ncdr: contract violation\n  expected: pair?\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (find_length_helper string count)\n    (if (null? string)\n        count\n        (if (equal? (car string) #\\0)\n            (find_length_helper (cdr string) (- count 1))\n            (find_length_helper (cdr string) (+ count 1)))))\n  (find_length_helper string 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122980,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuhp2zorv.rkt:18:4\n\ncar: contract violation\n  expected: pair?\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuhp2zorv.rkt:19:4\n\ncar: contract violation\n  expected: pair?\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuhp2zorv.rkt:20:4\n\ncar: contract violation\n  expected: pair?\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (find_length_helper string count max)\n    (cond\n      [(empty? string) max]\n      [(= (first string) #\\0) (find_length_helper (rest string) (- count 1) (max max (- count)))]\n      [(= (first string) #\\1) (find_length_helper (rest string) (+ count 1) (max max count))]))\n  (find_length_helper string 0 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122980,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm32iurx7.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm32iurx7.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm32iurx7.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (find_length_iter string count max-count)\n    (cond\n      [(empty? string) max-count]\n      [(equal? (first string) #\\0) (find_length_iter (rest string) (add1 count) max-count)]\n      [(equal? (first string) #\\1) (find_length_iter (rest string) (sub1 count) (max max-count (abs count)))]))\n  (find_length_iter string 0 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122980,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzh5y46dg.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzh5y46dg.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzh5y46dg.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (helper string count)\n    (cond [(empty? string) count]\n          [(equal? (first string) #\\0) (helper (rest string) (+ count 1))]\n          [(equal? (first string) #\\1) (helper (rest string) (- count 1))]))\n  (helper string 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122976,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0uaqo66j.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0uaqo66j.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0uaqo66j.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [max-diff 0])\n      (cond\n        [(= i len) max-diff]\n        [(= j len) (loop (+ i 1) i max-diff)]\n        [else\n         (let ([diff (abs (- (count-char #\\0 string i j)\n                            (count-char #\\1 string i j)))]\n               [max-diff (if (&gt; diff max-diff) diff max-diff)])\n           (loop i (+ j 1) max-diff))]))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122980,
      "stdout": "",
      "stderr": "/tmp/tmpqc7npzdf.rkt:14:37: read-syntax: missing `)` to close preceding `(`, found instead `]`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ([string string] [count 0] [max 0])\n    (cond [(empty? string) max]\n          [(equal? (first string) #\\0) (loop (rest string) (add1 count) (max max count))]\n          [(equal? (first string) #\\1) (loop (rest string) (sub1 count) (max max (abs count)))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122980,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeir2rhwi.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeir2rhwi.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeir2rhwi.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (find_length_iter string count)\n    (cond\n      [(empty? string) count]\n      [(equal? (first string) #\\0) (find_length_iter (rest string) (+ count 1))]\n      [(equal? (first string) #\\1) (find_length_iter (rest string) (- count 1))]))\n  (find_length_iter string 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510004,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7htadb7w.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7htadb7w.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7htadb7w.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ([string string] [count 0])\n    (cond [(empty? string) count]\n          [(equal? (first string) #\\0) (loop (rest string) (+ count 1))]\n          [else (loop (rest string) (- count 1))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122975,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpotn4gzxn.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpotn4gzxn.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpotn4gzxn.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let ((zeros 0)\n        (ones 0)\n        (diff 0))\n    (for ([i (in-range (string-length string))])\n      (if (string=? (string-ref string i) #\\0)\n          (set! zeros (+ zeros 1))\n          (set! ones (+ ones 1)))\n      (set! diff (max diff (- zeros ones))))\n    diff))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122980,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_iqv8e_p.rkt:20:4\n\nstring=?: contract violation\n  expected: string?\n  given: #\\1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_iqv8e_p.rkt:21:4\n\nstring=?: contract violation\n  expected: string?\n  given: #\\1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_iqv8e_p.rkt:22:4\n\nstring=?: contract violation\n  expected: string?\n  given: #\\1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ([string string] [count 0])\n    (if (null? string)\n        count\n        (loop (cdr string) (+ count 1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoil3mwgw.rkt:15:4\n\ncdr: contract violation\n  expected: pair?\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoil3mwgw.rkt:16:4\n\ncdr: contract violation\n  expected: pair?\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoil3mwgw.rkt:17:4\n\ncdr: contract violation\n  expected: pair?\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let ([len (string-length string)])\n    (let loop ([i 0] [j len] [max-diff 0])\n      (if (= i j)\n          max-diff\n          (let ([diff (- (count-char #\\1 (substring string i j))\n                         (count-char #\\0 (substring string i j)))])\n            (loop (+ i 1) j (max max-diff (abs diff))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122980,
      "stdout": "",
      "stderr": "/tmp/tmptydexl8y.rkt:9:26: count-char: unbound identifier\n  in: count-char\n  location...:\n   /tmp/tmptydexl8y.rkt:9:26\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (find_length_helper string count max)\n    (cond\n      [(empty? string) max]\n      [(char=? (first string) #\\0) (find_length_helper (rest string) (add1 count) max)]\n      [(char=? (first string) #\\1) (find_length_helper (rest string) (sub1 count) (max max (abs count)))]))\n  (find_length_helper string 0 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122980,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvjzb6kxq.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvjzb6kxq.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvjzb6kxq.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (find_length_iter string count max)\n    (if (null? string)\n        max\n        (if (equal? (car string) #\\0)\n            (find_length_iter (cdr string) (- count 1) (max max (- count)))\n            (find_length_iter (cdr string) (+ count 1) (max max count)))))\n  (find_length_iter string 0 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122980,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8npkkk3q.rkt:18:4\n\ncar: contract violation\n  expected: pair?\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8npkkk3q.rkt:19:4\n\ncar: contract violation\n  expected: pair?\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8npkkk3q.rkt:20:4\n\ncar: contract violation\n  expected: pair?\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let ([len (string-length string)])\n    (let ([zeros (count-zeros string)]\n          [ones (count-ones string)])\n      (let ([diff (- zeros ones)])\n        (if (= diff 0)\n            len\n            (let ([sub-string (substring string 1 len)])\n              (find_length sub-string)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122980,
      "stdout": "",
      "stderr": "/tmp/tmpgskwqv6e.rkt:6:18: count-zeros: unbound identifier\n  in: count-zeros\n  location...:\n   /tmp/tmpgskwqv6e.rkt:6:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ([string string]\n             [zeros 0]\n             [ones 0]\n             [max 0])\n    (if (null? string)\n        max\n        (let ([char (string-ref string 0)])\n          (cond\n            [(char=? char #\\0)\n             (loop (substring string 1)\n                   (+ zeros 1)\n                   ones\n                   (max max (- zeros ones)))]\n            [(char=? char #\\1)\n             (loop (substring string 1)\n                   zeros\n                   (+ ones 1)\n                   (max max (- zeros ones)))])))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122980,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptbl4qo2w.rkt:29:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptbl4qo2w.rkt:30:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptbl4qo2w.rkt:31:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ((string string) (count 0) (max 0))\n    (cond ((null? string) max)\n          ((char=? (car string) #\\0) (loop (cdr string) (add1 count) (max count max)))\n          ((char=? (car string) #\\1) (loop (cdr string) (sub1 count) (max count max)))\n          (else (error \"Invalid character\")))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122980,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy47jtu4s.rkt:16:4\n\ncar: contract violation\n  expected: pair?\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy47jtu4s.rkt:17:4\n\ncar: contract violation\n  expected: pair?\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy47jtu4s.rkt:18:4\n\ncar: contract violation\n  expected: pair?\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [count 0])\n      (cond\n        [(= i len) count]\n        [(= (string-ref string i) #\\1) (loop (+ i 1) j (+ count 1))]\n        [else (loop (+ i 1) j (- count 1))]))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122974,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqwvrqcf7.rkt:17:4\n\n=: contract violation\n  expected: number?\n  given: #\\1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqwvrqcf7.rkt:18:4\n\n=: contract violation\n  expected: number?\n  given: #\\1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqwvrqcf7.rkt:19:4\n\n=: contract violation\n  expected: number?\n  given: #\\1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [max 0])\n      (cond\n        [(= i len) max]\n        [(= j len) (loop (+ i 1) i max)]\n        [else\n         (let ([diff (- (count-matches #\\1 (substring string i j))\n                        (count-matches #\\0 (substring string i j)))])\n           (loop i (+ j 1) (max max diff)))]))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122980,
      "stdout": "",
      "stderr": "/tmp/tmpuxzna4j3.rkt:11:25: count-matches: unbound identifier\n  in: count-matches\n  location...:\n   /tmp/tmpuxzna4j3.rkt:11:25\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let ([diff (abs (- (count-substrings \"0\" string) (count-substrings \"1\" string)))])\n    (if (empty? (cdr string))\n        diff\n        (max diff (find_length (cdr string))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122980,
      "stdout": "",
      "stderr": "/tmp/tmpa6w5js_k.rkt:5:23: count-substrings: unbound identifier\n  in: count-substrings\n  location...:\n   /tmp/tmpa6w5js_k.rkt:5:23\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ([string string] [count 0])\n    (if (string-null? string)\n        count\n        (loop (substring string 1) (+ count 1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122980,
      "stdout": "",
      "stderr": "/tmp/tmppsg639wq.rkt:6:9: string-null?: unbound identifier\n  in: string-null?\n  location...:\n   /tmp/tmppsg639wq.rkt:6:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (find_length_helper string count)\n    (cond\n      [(empty? string) count]\n      [(equal? (first string) #\\0) (find_length_helper (rest string) (add1 count))]\n      [else (find_length_helper (rest string) (sub1 count))]))\n  (find_length_helper string 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122981,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm0vsdsqa.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm0vsdsqa.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm0vsdsqa.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (helper string count)\n    (if (empty? string)\n        count\n        (if (equal? (first string) #\\0)\n            (helper (rest string) (- count 1))\n            (helper (rest string) (+ count 1)))))\n  (helper string 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122981,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsj3q2h7q.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsj3q2h7q.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsj3q2h7q.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (find_length_iter string count max)\n    (cond\n      [(empty? string) max]\n      [(equal? (first string) #\\0) (find_length_iter (rest string) (- count 1) (max max (- count)))]\n      [(equal? (first string) #\\1) (find_length_iter (rest string) (+ count 1) (max max count))]))\n  (find_length_iter string 0 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkncs2k_2.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkncs2k_2.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkncs2k_2.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ([string string] [count 0])\n    (cond [(empty? string) count]\n          [(equal? (first string) #\\0) (loop (rest string) (+ count 1))]\n          [else (loop (rest string) (- count 1))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122975,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpotn4gzxn.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpotn4gzxn.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpotn4gzxn.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (helper string count)\n    (cond\n      [(empty? string) count]\n      [(equal? (first string) #\\0) (helper (rest string) (add1 count))]\n      [(equal? (first string) #\\1) (helper (rest string) (sub1 count))]))\n  (define (find_max string count)\n    (cond\n      [(empty? string) count]\n      [(> (helper string 0) count) (find_max (rest string) (helper string 0))]\n      [else (find_max (rest string) count)]))\n  (find_max string 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122980,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyi3cn7kf.rkt:22:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyi3cn7kf.rkt:23:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyi3cn7kf.rkt:24:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ([string string]\n             [count 0]\n             [max_count 0])\n    (cond [(empty? string) max_count]\n          [(char=? (first string) #\\0)\n           (loop (rest string)\n                 (add1 count)\n                 (if (&gt; count max_count) count max_count))]\n          [else\n           (loop (rest string)\n                 (sub1 count)\n                 (if (&gt; (- count) max_count) (- count) max_count))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122980,
      "stdout": "",
      "stderr": "/tmp/tmpg8pc74wj.rkt:16:21: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 18\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (find_length-iter string count max)\n    (cond\n      [(empty? string) max]\n      [(equal? (first string) #\\0) (find_length-iter (rest string) (- count 1) (max max (- count)))]\n      [(equal? (first string) #\\1) (find_length-iter (rest string) (+ count 1) (max max count))]))\n  (find_length-iter string 0 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122981,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpluykb_gi.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpluykb_gi.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpluykb_gi.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (helper string)\n    (if (empty? string)\n        0\n        (if (equal? (first string) #\\0)\n            (- 1 (helper (rest string)))\n            (+ 1 (helper (rest string))))))\n  (define (find_max string)\n    (if (empty? string)\n        0\n        (max (helper string) (find_max (rest string)))))\n  (find_max string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122981,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf6zwisem.rkt:22:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf6zwisem.rkt:23:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf6zwisem.rkt:24:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [max-diff 0])\n      (cond\n        [(= i len) max-diff]\n        [(= j len) (loop (+ i 1) i max-diff)]\n        [else\n         (let ([diff (- (count-char #\\1 string i j) (count-char #\\0 string i j))])\n           (loop i (+ j 1) (max max-diff (abs diff))))]))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122981,
      "stdout": "",
      "stderr": "/tmp/tmpwjeawrat.rkt:11:25: count-char: unbound identifier\n  in: count-char\n  location...:\n   /tmp/tmpwjeawrat.rkt:11:25\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [max 0])\n      (cond\n        [(= i len) max]\n        [(= j len) (loop (+ i 1) i max)]\n        [else\n         (let ([count0 (count (string-ref string j) #\\0)]\n               [count1 (count (string-ref string j) #\\1)])\n           (loop i (+ j 1) (max max (- count0 count1))))]))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122981,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmple4ygu0w.rkt:20:4\n\ncount: contract violation\n  expected: procedure?\n  given: #\\1\n  argument position: 1st\n  other arguments...:\n   #\\0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmple4ygu0w.rkt:21:4\n\ncount: contract violation\n  expected: procedure?\n  given: #\\1\n  argument position: 1st\n  other arguments...:\n   #\\0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmple4ygu0w.rkt:22:4\n\ncount: contract violation\n  expected: procedure?\n  given: #\\1\n  argument position: 1st\n  other arguments...:\n   #\\0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (find_length-iter string count max)\n    (cond ((null? string) max)\n          ((= (car string) #\\0) (find_length-iter (cdr string) (- count 1) (max max (- count))))\n          ((= (car string) #\\1) (find_length-iter (cdr string) (+ count 1) (max max count)))))\n  (find_length-iter string 0 0))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122981,
      "stdout": "",
      "stderr": "/tmp/tmpnstet8qu.rkt:10:0: </code>: unbound identifier\n  in: </code>\n  location...:\n   /tmp/tmpnstet8qu.rkt:10:0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ([string string]\n             [count 0])\n    (cond\n      [(empty? string) count]\n      [(equal? (first string) #\\1) (loop (rest string) (+ count 1))]\n      [else (loop (rest string) (- count 1))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122981,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2l21kc7.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2l21kc7.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2l21kc7.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let ((count 0)\n        (max_count 0))\n    (for ([i (in-range (string-length string))])\n      (cond\n        [(string=? (string-ref string i) #\\0) (set! count (add1 count))]\n        [(string=? (string-ref string i) #\\1) (set! count (sub1 count))]))\n      (if (&gt; count max_count)\n          (set! max_count count)))\n    max_count))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122981,
      "stdout": "",
      "stderr": "/tmp/tmpaukam9aj.rkt:11:6: if: bad syntax\n  in: (if (&gt (set! max_count count)))\n  location...:\n   /tmp/tmpaukam9aj.rkt:11:6\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let ([length (string-length string)])\n    (if (string=? string \"\")\n        0\n        (if (string=? (substring string 0 1) \"0\")\n            (add1 (find_length (substring string 1 length)))\n            (sub1 (find_length (substring string 1 length)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122981,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9ktr43j4.rkt:17:4\nactual:     3\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9ktr43j4.rkt:18:4\nactual:     -3\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9ktr43j4.rkt:19:4\nactual:     -4\nexpected:   2\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ([string string] [count 0] [max 0])\n    (cond [(empty? string) max]\n          [(char=? (first string) #\\0)\n           (loop (rest string) (add1 count) (if (&gt; count max) count max))]\n          [else (loop (rest string) (sub1 count) (if (&gt; count max) count max))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122980,
      "stdout": "",
      "stderr": "/tmp/tmp_zbdxogc.rkt:9:53: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 11\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (find_length_helper string count)\n    (if (empty? string)\n        count\n        (if (= (first string) #\\0)\n            (find_length_helper (rest string) (+ count 1))\n            (find_length_helper (rest string) (- count 1)))))\n  (find_length_helper string 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122981,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc4cek6_o.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc4cek6_o.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc4cek6_o.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (helper string count)\n    (cond\n      [(empty? string) count]\n      [(equal? (first string) #\\0) (helper (rest string) (add1 count))]\n      [(equal? (first string) #\\1) (helper (rest string) (sub1 count))]))\n  (define (helper2 string count max)\n    (cond\n      [(empty? string) max]\n      [(> (abs (helper string count)) max) (helper2 (rest string) count (abs (helper string count)))]\n      [else (helper2 (rest string) count max)]))\n  (helper2 string 0 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122981,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp6s2_hqu.rkt:22:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp6s2_hqu.rkt:23:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp6s2_hqu.rkt:24:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (find_length_iter string count max)\n    (cond [(empty? string) max]\n          [(equal? (first string) #\\0) (find_length_iter (rest string) (- count 1) (max max (- count)))]\n          [(equal? (first string) #\\1) (find_length_iter (rest string) (+ count 1) (max max count))]))\n  (find_length_iter string 0 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122978,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxi2nzseq.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxi2nzseq.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxi2nzseq.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (helper string count)\n    (if (null? string)\n        count\n        (if (equal? (car string) #\\0)\n            (helper (cdr string) (+ count 1))\n            (helper (cdr string) (- count 1)))))\n  (helper string 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfwwpjeea.rkt:18:4\n\ncar: contract violation\n  expected: pair?\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfwwpjeea.rkt:19:4\n\ncar: contract violation\n  expected: pair?\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfwwpjeea.rkt:20:4\n\ncar: contract violation\n  expected: pair?\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (find_length_iter string count max)\n    (cond\n      [(empty? string) max]\n      [(equal? (first string) #\\0) (find_length_iter (rest string) (- count 1) (max max (- count)))]\n      [(equal? (first string) #\\1) (find_length_iter (rest string) (+ count 1) (max max count))]))\n  (find_length_iter string 0 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkncs2k_2.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkncs2k_2.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkncs2k_2.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (helper string count)\n    (cond ((null? string) count)\n          ((equal? (car string) #\\0) (helper (cdr string) (- count 1)))\n          ((equal? (car string) #\\1) (helper (cdr string) (+ count 1)))\n          (else (error \"Invalid character\"))))\n  (helper string 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122981,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbt2z0qsi.rkt:17:4\n\ncar: contract violation\n  expected: pair?\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbt2z0qsi.rkt:18:4\n\ncar: contract violation\n  expected: pair?\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbt2z0qsi.rkt:19:4\n\ncar: contract violation\n  expected: pair?\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (sub-string string)\n    (if (null? string)\n        '()\n        (append (sub-string (cdr string))\n                (map (lambda (x) (append (car x) (cdr string)))\n                     (sub-string (cdr string))))))\n  (define (count-0s string)\n    (if (null? string)\n        0\n        (+ (if (= (car string) #\\0) 1 0)\n           (count-0s (cdr string)))))\n  (define (count-1s string)\n    (if (null? string)\n        0\n        (+ (if (= (car string) #\\1) 1 0)\n           (count-1s (cdr string)))))\n  (define (max-diff sub-strings)\n    (if (null? sub-strings)\n        0\n        (max (abs (- (count-0s (car sub-strings))\n                     (count-1s (car sub-strings))))\n             (max-diff (cdr sub-strings)))))\n  (max-diff (sub-string string)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122981,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4to2xj2t.rkt:34:4\n\ncdr: contract violation\n  expected: pair?\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4to2xj2t.rkt:35:4\n\ncdr: contract violation\n  expected: pair?\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4to2xj2t.rkt:36:4\n\ncdr: contract violation\n  expected: pair?\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [max-diff 0])\n      (cond\n        [(= i len) max-diff]\n        [(= j len) (loop (+ i 1) i max-diff)]\n        [(char=? (string-ref string i) #\\1) (loop i (+ j 1) (max max-diff (- j i)))]\n        [else (loop i (+ j 1) max-diff)]))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122981,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpaj6wdemm.rkt:18:4\nactual:     10\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpaj6wdemm.rkt:19:4\nactual:     4\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpaj6wdemm.rkt:20:4\nactual:     13\nexpected:   2\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [count 0])\n      (cond\n        [(= i len) count]\n        [(= j len) (loop (+ i 1) i count)]\n        [(= (string-ref string i) #\\1) (loop i (+ j 1) (max count (- j i)))]\n        [else (loop i (+ j 1) count)]))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122981,
      "stdout": "",
      "stderr": "/tmp/tmpvd33_12d.rkt:12:0: </code>: unbound identifier\n  in: </code>\n  location...:\n   /tmp/tmpvd33_12d.rkt:12:0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ((string string)\n             (count 0)\n             (max-count 0))\n    (cond ((null? string) max-count)\n          ((eq? (car string) #\\0) (loop (cdr string) (add1 count) max-count))\n          ((eq? (car string) #\\1) (loop (cdr string) (sub1 count) (max max-count (abs count)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122981,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1ru82owk.rkt:17:4\n\ncar: contract violation\n  expected: pair?\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1ru82owk.rkt:18:4\n\ncar: contract violation\n  expected: pair?\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1ru82owk.rkt:19:4\n\ncar: contract violation\n  expected: pair?\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [count 0])\n      (if (= i len)\n          count\n          (if (string=? (substring string i (+ i 1)) \"0\")\n              (loop (+ i 1) j (- count 1))\n              (loop (+ i 1) j (+ count 1)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122981,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_8za59ai.rkt:18:4\nactual:     -3\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_8za59ai.rkt:19:4\nactual:     3\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_8za59ai.rkt:20:4\nactual:     4\nexpected:   2\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ([string string] [count 0])\n    (cond [(empty? string) count]\n          [(equal? (first string) #\\0) (loop (rest string) (+ count 1))]\n          [else (loop (rest string) (- count 1))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122975,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpotn4gzxn.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpotn4gzxn.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpotn4gzxn.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ([string string] [count 0] [max 0])\n    (cond\n      [(empty? string) max]\n      [(equal? (first string) #\\0) (loop (rest string) (add1 count) (if (&gt; count max) count max))]\n      [else (loop (rest string) (sub1 count) (if (&gt; count max) count max))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122981,
      "stdout": "",
      "stderr": "/tmp/tmp78mpg6q1.rkt:9:49: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 11\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ([string string] [count 0])\n    (cond [(empty? string) count]\n          [(equal? (first string) #\\0) (loop (rest string) (+ count 1))]\n          [else (loop (rest string) (- count 1))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122975,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpotn4gzxn.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpotn4gzxn.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpotn4gzxn.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (helper string count)\n    (cond\n      [(empty? string) count]\n      [(equal? (first string) #\\0) (helper (rest string) (- count 1))]\n      [(equal? (first string) #\\1) (helper (rest string) (+ count 1))]))\n  (helper string 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122977,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpep3vachy.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpep3vachy.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpep3vachy.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [max-diff 0])\n      (cond\n        [(= i len) max-diff]\n        [else\n         (let ([diff (- j i)])\n           (cond\n             [(= (string-ref string i) #\\0)\n              (loop (+ i 1) (+ j 1) (max max-diff diff))]\n             [else\n              (loop (+ i 1) (- j 1) (max max-diff diff))]))]))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122981,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy96dm4vg.rkt:22:4\n\n=: contract violation\n  expected: number?\n  given: #\\1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy96dm4vg.rkt:23:4\n\n=: contract violation\n  expected: number?\n  given: #\\1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy96dm4vg.rkt:24:4\n\n=: contract violation\n  expected: number?\n  given: #\\1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ([string string] [count 0])\n    (cond [(empty? string) count]\n          [(equal? (first string) #\\0) (loop (rest string) (+ count 1))]\n          [else (loop (rest string) (- count 1))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122975,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpotn4gzxn.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpotn4gzxn.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpotn4gzxn.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ((string string) (count 0))\n    (cond ((null? string) count)\n          ((char=? (car string) #\\0) (loop (cdr string) (+ count 1)))\n          ((char=? (car string) #\\1) (loop (cdr string) (- count 1)))\n          (else (error \"Invalid character\")))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122981,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc81jkqo2.rkt:16:4\n\ncar: contract violation\n  expected: pair?\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc81jkqo2.rkt:17:4\n\ncar: contract violation\n  expected: pair?\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc81jkqo2.rkt:18:4\n\ncar: contract violation\n  expected: pair?\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (string-length string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122975,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo_owisqb.rkt:12:4\nactual:     11\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo_owisqb.rkt:13:4\nactual:     5\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo_owisqb.rkt:14:4\nactual:     14\nexpected:   2\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (cond\n    [(empty? string) 0]\n    [else (+ 1 (find_length (rest string)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcnvz_41s.rkt:14:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcnvz_41s.rkt:15:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcnvz_41s.rkt:16:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ([string string] [count 0])\n    (if (empty? string)\n        count\n        (loop (rest string) (+ count (if (char=? (first string) #\\1) 1 0))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122981,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0rqzbhvt.rkt:15:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0rqzbhvt.rkt:16:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0rqzbhvt.rkt:17:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ([string string] [count 0])\n    (cond [(empty? string) count]\n          [(equal? (first string) #\\0) (loop (rest string) (add1 count))]\n          [else (loop (rest string) (sub1 count))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122975,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc19tpls_.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc19tpls_.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc19tpls_.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ([string string] [count 0])\n    (cond\n      [(empty? string) count]\n      [(char=? (first string) #\\1) (loop (rest string) (+ count 1))]\n      [else (loop (rest string) (- count 1))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122981,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqerb_rrr.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqerb_rrr.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqerb_rrr.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (find_length_iter string count)\n    (cond ((null? string) count)\n          ((equal? (car string) #\\0) (find_length_iter (cdr string) (+ count 1)))\n          ((equal? (car string) #\\1) (find_length_iter (cdr string) (- count 1)))\n          (else (error \"Invalid character\"))))\n  (find_length_iter string 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122981,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptr_6uw2b.rkt:17:4\n\ncar: contract violation\n  expected: pair?\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptr_6uw2b.rkt:18:4\n\ncar: contract violation\n  expected: pair?\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptr_6uw2b.rkt:19:4\n\ncar: contract violation\n  expected: pair?\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (find_length_iter string count max)\n    (cond ((null? string) max)\n          ((= (car string) 0) (find_length_iter (cdr string) (- count 1) (max max count)))\n          ((= (car string) 1) (find_length_iter (cdr string) (+ count 1) (max max count)))))\n  (find_length_iter string 0 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122981,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpycchz96i.rkt:16:4\n\ncar: contract violation\n  expected: pair?\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpycchz96i.rkt:17:4\n\ncar: contract violation\n  expected: pair?\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpycchz96i.rkt:18:4\n\ncar: contract violation\n  expected: pair?\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (find_length_iter string count max)\n    (cond\n      [(empty? string) max]\n      [(equal? (first string) #\\0) (find_length_iter (rest string) (add1 count) max)]\n      [(equal? (first string) #\\1) (find_length_iter (rest string) (sub1 count) (max max (abs count)))]))\n  (find_length_iter string 0 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122977,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvb30guw4.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvb30guw4.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvb30guw4.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ([string string] [length 0])\n    (if (null? string)\n        length\n        (loop (cdr string) (+ length 1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122977,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph_ge_2yw.rkt:15:4\n\ncdr: contract violation\n  expected: pair?\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph_ge_2yw.rkt:16:4\n\ncdr: contract violation\n  expected: pair?\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph_ge_2yw.rkt:17:4\n\ncdr: contract violation\n  expected: pair?\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ([string string]\n             [zeros 0]\n             [ones 0]\n             [max 0])\n    (cond [(empty? string) max]\n          [else\n           (let ([char (first string)])\n             (cond [(equal? char #\\0)\n                    (loop (rest string) (+ zeros 1) ones (max max (- zeros ones)))]\n                   [(equal? char #\\1)\n                    (loop (rest string) zeros (+ ones 1) (max max (- zeros ones)))]))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122982,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3h_nc_el.rkt:22:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3h_nc_el.rkt:23:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3h_nc_el.rkt:24:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ([string string] [count 0])\n    (cond [(empty? string) count]\n          [(equal? (first string) #\\0) (loop (rest string) (add1 count))]\n          [else (loop (rest string) (sub1 count))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122975,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc19tpls_.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc19tpls_.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc19tpls_.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (cond\n    [(empty? string) 0]\n    [else (+ 1 (find_length (rest string)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcnvz_41s.rkt:14:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcnvz_41s.rkt:15:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcnvz_41s.rkt:16:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ([string string] [count 0])\n    (if (null? string)\n        count\n        (loop (cdr string) (+ count 1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoil3mwgw.rkt:15:4\n\ncdr: contract violation\n  expected: pair?\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoil3mwgw.rkt:16:4\n\ncdr: contract violation\n  expected: pair?\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoil3mwgw.rkt:17:4\n\ncdr: contract violation\n  expected: pair?\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [max-diff 0])\n      (cond\n        [(= i len) max-diff]\n        [else\n         (let ([diff (- j i)])\n           (cond\n             [(= (string-ref string i) #\\0)\n              (loop (+ i 1) (+ j 1) (max max-diff diff))]\n             [else\n              (loop (+ i 1) j (max max-diff diff))]))]))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122982,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplqiltlx4.rkt:22:4\n\n=: contract violation\n  expected: number?\n  given: #\\1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplqiltlx4.rkt:23:4\n\n=: contract violation\n  expected: number?\n  given: #\\1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplqiltlx4.rkt:24:4\n\n=: contract violation\n  expected: number?\n  given: #\\1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (helper string acc)\n    (cond\n      [(empty? string) acc]\n      [(equal? (first string) #\\0) (helper (rest string) (add1 acc))]\n      [else (helper (rest string) (sub1 acc))]))\n  (helper string 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122982,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwoxuerep.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwoxuerep.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwoxuerep.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ((string string)\n             (count 0)\n             (max-count 0))\n    (cond ((null? string) max-count)\n          ((equal? (car string) #\\0)\n           (loop (cdr string) (add1 count) max-count))\n          ((equal? (car string) #\\1)\n           (loop (cdr string) (sub1 count) (max max-count (abs count)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122982,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpig5i0pey.rkt:19:4\n\ncar: contract violation\n  expected: pair?\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpig5i0pey.rkt:20:4\n\ncar: contract violation\n  expected: pair?\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpig5i0pey.rkt:21:4\n\ncar: contract violation\n  expected: pair?\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let ([len (string-length string)])\n    (define (helper start end)\n      (if (= start end)\n          0\n          (let ([sub (substring string start end)])\n            (max (helper (+ start 1) end)\n                 (if (string=? sub \"0\")\n                     (count-ones sub)\n                     (count-zeros sub))))))\n    (helper 0 len)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122982,
      "stdout": "",
      "stderr": "/tmp/tmpd18xfjs3.rkt:12:22: count-ones: unbound identifier\n  in: count-ones\n  location...:\n   /tmp/tmpd18xfjs3.rkt:12:22\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let ((count 0)\n        (max_count 0))\n    (for ([i (in-range (string-length string))])\n      (cond\n        [(string=? (string-ref string i) #\\0) (set! count (add1 count))]\n        [(string=? (string-ref string i) #\\1) (set! count (sub1 count))]\n        [else (error \"Invalid character\")]))\n      (cond\n        [(> count max_count) (set! max_count count)]\n        [(< count 0) (set! count 0)]))\n    max_count))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122981,
      "stdout": "",
      "stderr": "/tmp/tmpl1uu6tbu.rkt:15:14: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ((string string) (count 0) (max 0))\n    (cond\n      [(empty? string) max]\n      [(char=? (first string) #\\0)\n       (loop (rest string) (add1 count) (max count (- count max)))]\n      [else\n       (loop (rest string) (sub1 count) (max count (- count max)))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122982,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdebcloyh.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdebcloyh.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdebcloyh.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (find_length_iter string count max)\n    (cond\n      [(empty? string) max]\n      [(string-contains? string #\\0) (find_length_iter (cdr string) (+ count 1) max)]\n      [(string-contains? string #\\1) (find_length_iter (cdr string) (- count 1) max)]\n      [else (find_length_iter (cdr string) count (max count max))]))\n  (find_length_iter string 0 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122982,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvw4h1wli.rkt:18:4\n\nstring-contains?: contract violation\n  expected: string?\n  given: #\\0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvw4h1wli.rkt:19:4\n\nstring-contains?: contract violation\n  expected: string?\n  given: #\\0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvw4h1wli.rkt:20:4\n\nstring-contains?: contract violation\n  expected: string?\n  given: #\\0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ((string string) (count 0) (max-count 0))\n    (cond ((null? string) max-count)\n          ((equal? (car string) #\\0) (loop (cdr string) (add1 count) max-count))\n          ((equal? (car string) #\\1) (loop (cdr string) (sub1 count) (max max-count (abs count)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122982,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9m_ta_sc.rkt:15:4\n\ncar: contract violation\n  expected: pair?\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9m_ta_sc.rkt:16:4\n\ncar: contract violation\n  expected: pair?\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9m_ta_sc.rkt:17:4\n\ncar: contract violation\n  expected: pair?\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (find_length_helper string count)\n    (cond\n      [(empty? string) count]\n      [(= (first string) #\\0) (find_length_helper (rest string) (+ count 1))]\n      [else (find_length_helper (rest string) (- count 1))]))\n  (find_length_helper string 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122982,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfa6pjz1_.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfa6pjz1_.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfa6pjz1_.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ((string string)\n             (length 0)\n             (max-length 0))\n    (cond\n      [(null? string) max-length]\n      [(equal? (car string) #\\0)\n       (loop (cdr string)\n             (add1 length)\n             (if (&gt; length max-length) length max-length))]\n      [else\n       (loop (cdr string)\n             (sub1 length)\n             (if (&gt; (abs length) max-length) (abs length) max-length))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122981,
      "stdout": "",
      "stderr": "/tmp/tmpj_l1opn9.rkt:17:17: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 19\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ([string string] [count 0])\n    (cond [(empty? string) count]\n          [(char=? (first string) #\\1) (loop (rest string) (+ count 1))]\n          [else (loop (rest string) (- count 1))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122975,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpht98z5w2.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpht98z5w2.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpht98z5w2.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ((string string)\n             (count 0)\n             (max-count 0))\n    (cond ((null? string) max-count)\n          ((equal? (car string) #\\0)\n           (loop (cdr string)\n                 (add1 count)\n                 (if (&gt; count max-count) count max-count)))\n          ((equal? (car string) #\\1)\n           (loop (cdr string)\n                 (sub1 count)\n                 (if (&gt; count max-count) count max-count)))\n          (else (loop (cdr string) count max-count)))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122981,
      "stdout": "",
      "stderr": "/tmp/tmpzak7ilz7.rkt:13:10: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 14\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (cond\n    [(empty? string) 0]\n    [else (+ (find_length (rest string)) 1)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122982,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu43i3yzd.rkt:14:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu43i3yzd.rkt:15:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu43i3yzd.rkt:16:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ([string string] [count 0])\n    (cond [(empty? string) count]\n          [(equal? (first string) #\\1) (loop (rest string) (+ count 1))]\n          [else (loop (rest string) (- count 1))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz0jrzvno.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz0jrzvno.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz0jrzvno.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [max-diff 0] [count-0 0] [count-1 0])\n      (cond [(= i len) max-diff]\n            [else\n             (cond [(= (string-ref string i) #\\0)\n                    (loop (+ i 1) j (max max-diff (- count-0 count-1)) (+ count-0 1) count-1)]\n                   [else\n                    (loop (+ i 1) j (max max-diff (- count-0 count-1)) count-0 (+ count-1 1))])]))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122982,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3kinkm_7.rkt:19:4\n\n=: contract violation\n  expected: number?\n  given: #\\1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3kinkm_7.rkt:20:4\n\n=: contract violation\n  expected: number?\n  given: #\\1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3kinkm_7.rkt:21:4\n\n=: contract violation\n  expected: number?\n  given: #\\1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let ((count 0))\n    (for ([i (in-range (string-length string))])\n      (if (equal? (string-ref string i) #\\0)\n          (set! count (+ count 1))\n          (set! count (- count 1))))\n    count))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122982,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpazz7y0zf.rkt:17:4\nactual:     3\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpazz7y0zf.rkt:18:4\nactual:     -3\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpazz7y0zf.rkt:19:4\nactual:     -4\nexpected:   2\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [max 0])\n      (if (= i len)\n          max\n          (let ([zero-count (count (lambda (x) (= x #\\0)) (substring string i j))]\n                [one-count (count (lambda (x) (= x #\\1)) (substring string i j))])\n            (let ([diff (- zero-count one-count)])\n              (if (&lt; diff 0)\n                  (loop (+ i 1) (+ j 1) max)\n                  (loop i (+ j 1) (max max diff)))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122981,
      "stdout": "",
      "stderr": "/tmp/tmpx8ygwa3l.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 16\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ([string string] [length 0])\n    (cond [(empty? string) length]\n          [else (loop (rest string) (+ length 1))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122982,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9eegto33.rkt:14:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9eegto33.rkt:15:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9eegto33.rkt:16:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ([string string] [count 0] [max 0])\n    (cond [(empty? string) max]\n          [(equal? (first string) #\\0) (loop (rest string) (add1 count) (max count max))]\n          [else (loop (rest string) (sub1 count) (max count max))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122974,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppdw_4nv1.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppdw_4nv1.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppdw_4nv1.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ([string string] [zeros 0] [ones 0] [max-diff 0])\n    (cond [(empty? string) max-diff]\n          [else\n           (let ([char (first string)])\n             (cond [(equal? char #\\0)\n                    (loop (rest string) (+ zeros 1) ones (max max-diff (- zeros ones)))]\n                   [(equal? char #\\1)\n                    (loop (rest string) zeros (+ ones 1) (max max-diff (- zeros ones)))]))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122982,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8r1xo0lj.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8r1xo0lj.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8r1xo0lj.rkt:21:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ([string string]\n             [count 0]\n             [max-count 0])\n    (cond [(empty? string) max-count]\n          [(char=? (first string) #\\0) (loop (rest string) (add1 count) max-count)]\n          [(char=? (first string) #\\1) (loop (rest string) (sub1 count) (max max-count (abs count)))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510002,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3026jqdh.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3026jqdh.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3026jqdh.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ([i 0] [j 0] [max 0])\n    (cond [(= i (string-length string)) max]\n          [(= (string-ref string i) #\\0) (loop (+ i 1) (+ j 1) (max max (- j i)))]\n          [else (loop (+ i 1) (- j 1) (max max (- j i)))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122982,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdnm7nd7j.rkt:15:4\n\n=: contract violation\n  expected: number?\n  given: #\\1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdnm7nd7j.rkt:16:4\n\n=: contract violation\n  expected: number?\n  given: #\\1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdnm7nd7j.rkt:17:4\n\n=: contract violation\n  expected: number?\n  given: #\\1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (find_length_iter string count max)\n    (cond\n      [(empty? string) max]\n      [(char=? (first string) #\\0) (find_length_iter (rest string) (- count 1) (max max (- count)))]\n      [(char=? (first string) #\\1) (find_length_iter (rest string) (+ count 1) (max max count))]))\n  (find_length_iter string 0 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122974,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7eokihr9.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7eokihr9.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7eokihr9.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ([string string] [count 0])\n    (if (string-empty? string)\n        count\n        (loop (substring string 1) (+ count (string-length (regexp-match #rx\"^0*\" string)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122982,
      "stdout": "",
      "stderr": "/tmp/tmpjt8tpbir.rkt:6:9: string-empty?: unbound identifier\n  in: string-empty?\n  location...:\n   /tmp/tmpjt8tpbir.rkt:6:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ([string string]\n             [count 0])\n    (if (null? string)\n        count\n        (loop (cdr string)\n              (+ count (if (equal? (car string) #\\1) 1 0))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122982,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcdbizkkc.rkt:17:4\n\ncdr: contract violation\n  expected: pair?\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcdbizkkc.rkt:18:4\n\ncdr: contract violation\n  expected: pair?\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcdbizkkc.rkt:19:4\n\ncdr: contract violation\n  expected: pair?\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ([string string] [count 0])\n    (cond\n      [(empty? string) count]\n      [(equal? (first string) #\\1) (loop (rest string) (+ count 1))]\n      [else (loop (rest string) (- count 1))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa3doe05f.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa3doe05f.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa3doe05f.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (find_length_iter string count max)\n    (cond\n      [(empty? string) max]\n      [(string-contains? string \"0\")\n       (find_length_iter (string-drop string 1) (- count 1) (max max count))]\n      [else\n       (find_length_iter (string-drop string 1) (+ count 1) (max max count))]))\n  (find_length_iter string 0 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122982,
      "stdout": "",
      "stderr": "/tmp/tmpey8stxaw.rkt:9:26: string-drop: unbound identifier\n  in: string-drop\n  location...:\n   /tmp/tmpey8stxaw.rkt:9:26\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ((string string)\n             (count 0)\n             (max-count 0))\n    (cond ((null? string) max-count)\n          ((equal? (car string) #\\0)\n           (loop (cdr string)\n                 (add1 count)\n                 (if (&gt; count max-count) count max-count)))\n          ((equal? (car string) #\\1)\n           (loop (cdr string)\n                 (sub1 count)\n                 (if (&gt; (abs count) max-count) (abs count) max-count)))\n          (else (error \"Invalid character\")))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122982,
      "stdout": "",
      "stderr": "/tmp/tmpfw2ry8nh.rkt:13:10: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 14\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ([string string] [count 0])\n    (if (empty? string)\n        count\n        (loop (rest string) (+ count (string-length (regexp-match #rx\"^0*\" string)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122982,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptl8wuo6h.rkt:15:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptl8wuo6h.rkt:16:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptl8wuo6h.rkt:17:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (find_length_iter string count max)\n    (cond [(empty? string) max]\n          [(= (first string) #\\0) (find_length_iter (rest string) (add1 count) max)]\n          [(= (first string) #\\1) (find_length_iter (rest string) (sub1 count) (max max count))]))\n  (find_length_iter string 0 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122982,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4g64j5k6.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4g64j5k6.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4g64j5k6.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [max-diff 0] [zeros 0] [ones 0])\n      (cond\n        [(= i len) max-diff]\n        [(= j len) (loop (+ i 1) (+ i 1) max-diff 0 0)]\n        [else\n         (let ([char (string-ref string j)])\n           (cond\n             [(= char #\\0) (loop i (+ j 1) (max max-diff (- j i)) (+ zeros 1) ones)]\n             [(= char #\\1) (loop i (+ j 1) (max max-diff (- j i)) zeros (+ ones 1))]))]))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122982,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8o6e5kso.rkt:21:4\n\n=: contract violation\n  expected: number?\n  given: #\\1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8o6e5kso.rkt:22:4\n\n=: contract violation\n  expected: number?\n  given: #\\1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8o6e5kso.rkt:23:4\n\n=: contract violation\n  expected: number?\n  given: #\\1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ([string string] [count 0])\n    (cond [(empty? string) count]\n          [(char=? (first string) #\\1) (loop (rest string) (+ count 1))]\n          [else (loop (rest string) (- count 1))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122975,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpht98z5w2.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpht98z5w2.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpht98z5w2.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (find_length_iter string count)\n    (cond\n      [(empty? string) count]\n      [(= (first string) #\\0) (find_length_iter (rest string) (+ count 1))]\n      [else (find_length_iter (rest string) (- count 1))]))\n  (find_length_iter string 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122982,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjc0icvuk.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjc0icvuk.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjc0icvuk.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (find_length_helper string count)\n    (cond\n      [(empty? string) count]\n      [(equal? (first string) #\\0) (find_length_helper (rest string) (+ count 1))]\n      [else (find_length_helper (rest string) (- count 1))]))\n  (find_length_helper string 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122982,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxdvj1s9v.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxdvj1s9v.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxdvj1s9v.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ([string string] [count 0])\n    (cond [(empty? string) count]\n          [(equal? (first string) #\\0) (loop (rest string) (+ count 1))]\n          [else (loop (rest string) (- count 1))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122975,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpotn4gzxn.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpotn4gzxn.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpotn4gzxn.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let ([len (string-length string)])\n    (let loop ([i 0] [j len] [max-diff 0])\n      (if (= i j)\n          max-diff\n          (let ([diff (- (count-char #\\1 (substring string i j))\n                         (count-char #\\0 (substring string i j)))])\n            (loop (+ i 1) j (max max-diff (abs diff))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122980,
      "stdout": "",
      "stderr": "/tmp/tmptydexl8y.rkt:9:26: count-char: unbound identifier\n  in: count-char\n  location...:\n   /tmp/tmptydexl8y.rkt:9:26\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ([string string] [count 0])\n    (if (null? string)\n        count\n        (loop (cdr string) (+ count 1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoil3mwgw.rkt:15:4\n\ncdr: contract violation\n  expected: pair?\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoil3mwgw.rkt:16:4\n\ncdr: contract violation\n  expected: pair?\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoil3mwgw.rkt:17:4\n\ncdr: contract violation\n  expected: pair?\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (find_length_iter string count max)\n    (cond ((null? string) max)\n          ((= (car string) #\\0) (find_length_iter (cdr string) (- count 1) (max max (- count))))\n          ((= (car string) #\\1) (find_length_iter (cdr string) (+ count 1) (max max count)))))\n  (find_length_iter string 0 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122982,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_pswftrq.rkt:16:4\n\ncar: contract violation\n  expected: pair?\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_pswftrq.rkt:17:4\n\ncar: contract violation\n  expected: pair?\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_pswftrq.rkt:18:4\n\ncar: contract violation\n  expected: pair?\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ([string string] [count 0])\n    (cond [(empty? string) count]\n          [(equal? (first string) #\\0) (loop (rest string) (+ count 1))]\n          [(equal? (first string) #\\1) (loop (rest string) (- count 1))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122982,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4e1wkx5j.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4e1wkx5j.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4e1wkx5j.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let ((len (string-length string)))\n    (if (= len 0)\n        0\n        (+ 1 (find_length (substring string 1 len))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122983,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0833bez8.rkt:15:4\nactual:     11\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0833bez8.rkt:16:4\nactual:     5\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0833bez8.rkt:17:4\nactual:     14\nexpected:   2\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ([string string] [count 0])\n    (cond [(empty? string) count]\n          [(equal? (first string) #\\0) (loop (rest string) (add1 count))]\n          [else (loop (rest string) (sub1 count))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122975,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc19tpls_.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc19tpls_.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc19tpls_.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ([string string] [count 0])\n    (if (string-empty? string)\n        count\n        (loop (substring string 1) (+ count (string-length (regexp-match #rx\"1\" string)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122982,
      "stdout": "",
      "stderr": "/tmp/tmpnwfohah3.rkt:6:9: string-empty?: unbound identifier\n  in: string-empty?\n  location...:\n   /tmp/tmpnwfohah3.rkt:6:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ([string string] [count 0])\n    (if (null? string)\n        count\n        (loop (cdr string) (+ count 1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoil3mwgw.rkt:15:4\n\ncdr: contract violation\n  expected: pair?\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoil3mwgw.rkt:16:4\n\ncdr: contract violation\n  expected: pair?\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoil3mwgw.rkt:17:4\n\ncdr: contract violation\n  expected: pair?\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (helper string count)\n    (cond\n      [(empty? string) count]\n      [(equal? (first string) #\\0) (helper (rest string) (add1 count))]\n      [else (helper (rest string) (sub1 count))]))\n  (helper string 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122974,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps2o4jzkk.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps2o4jzkk.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps2o4jzkk.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (find_length_helper string count max)\n    (if (null? string)\n        max\n        (let ((next-count (if (equal? (car string) #\\0) (- count 1) (+ count 1))))\n          (find_length_helper (cdr string) next-count (max max (abs next-count))))))\n  (find_length_helper string 0 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122983,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa4nzxs3x.rkt:17:4\n\ncar: contract violation\n  expected: pair?\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa4nzxs3x.rkt:18:4\n\ncar: contract violation\n  expected: pair?\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa4nzxs3x.rkt:19:4\n\ncar: contract violation\n  expected: pair?\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (helper string count)\n    (cond\n      [(empty? string) count]\n      [(equal? (first string) #\\0) (helper (rest string) (+ count 1))]\n      [else (helper (rest string) (- count 1))]))\n  (helper string 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122983,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbuqtytqe.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbuqtytqe.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbuqtytqe.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (find_length_iter string count max)\n    (cond\n      [(empty? string) max]\n      [(equal? (first string) #\\0) (find_length_iter (rest string) (add1 count) max)]\n      [(equal? (first string) #\\1) (find_length_iter (rest string) (sub1 count) (max max (abs count)))]))\n  (find_length_iter string 0 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122977,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvb30guw4.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvb30guw4.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvb30guw4.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (find_length-iter string count max-count)\n    (cond\n      [(empty? string) max-count]\n      [(equal? (first string) #\\0) (find_length-iter (rest string) (add1 count) max-count)]\n      [(equal? (first string) #\\1) (find_length-iter (rest string) (sub1 count) (max max-count (abs count)))]))\n  (find_length-iter string 0 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122983,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpix979og9.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpix979og9.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpix979og9.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ([string string] [count 0] [max 0])\n    (cond\n      [(empty? string) max]\n      [(char=? (first string) #\\0) (loop (rest string) (+ count 1) max)]\n      [(char=? (first string) #\\1) (loop (rest string) (- count 1) (max (abs count) max))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122983,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8ck26k0i.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8ck26k0i.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8ck26k0i.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ([string string]\n             [count 0]\n             [max-count 0])\n    (cond [(empty? string) max-count]\n          [(char=? (first string) #\\0)\n           (loop (rest string)\n                 (add1 count)\n                 (if (&gt; count max-count) count max-count))]\n          [else (loop (rest string)\n                      (sub1 count)\n                      (if (&gt; count max-count) count max-count))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122982,
      "stdout": "",
      "stderr": "/tmp/tmp8y8wvfk2.rkt:15:26: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 17\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ((string string)\n             (count 0)\n             (max 0))\n    (cond ((null? string) max)\n          ((= (car string) #\\0) (loop (cdr string) (add1 count) (max count (- count max))))\n          ((= (car string) #\\1) (loop (cdr string) (sub1 count) (max count (- count max)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122983,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphj80qalg.rkt:17:4\n\ncar: contract violation\n  expected: pair?\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphj80qalg.rkt:18:4\n\ncar: contract violation\n  expected: pair?\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphj80qalg.rkt:19:4\n\ncar: contract violation\n  expected: pair?\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (define (find_length_helper string count)\n    (cond\n      [(empty? string) count]\n      [(equal? (first string) #\\0) (find_length_helper (rest string) (+ count 1))]\n      [(equal? (first string) #\\1) (find_length_helper (rest string) (- count 1))]))\n  (find_length_helper string 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxn85aepf.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxn85aepf.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxn85aepf.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ((string string)\n             (count 0)\n             (max-count 0))\n    (cond ((null? string) max-count)\n          ((equal? (car string) #\\0)\n           (loop (cdr string)\n                 (add1 count)\n                 (if (&gt; count max-count) count max-count)))\n          (else\n           (loop (cdr string)\n                 (sub1 count)\n                 (if (&gt; count max-count) count max-count))))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122982,
      "stdout": "",
      "stderr": "/tmp/tmp3eht6g19.rkt:16:21: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 17\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ([string string]\n             [count 0])\n    (if (string-empty? string)\n        count\n        (if (equal? (string-ref string 0) #\\1)\n            (loop (substring string 1) (+ count 1))\n            (loop (substring string 1) (- count 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122983,
      "stdout": "",
      "stderr": "/tmp/tmp7s4ffxh8.rkt:7:9: string-empty?: unbound identifier\n  in: string-empty?\n  location...:\n   /tmp/tmp7s4ffxh8.rkt:7:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let loop ([string string] [count 0])\n    (cond [(empty? string) count]\n          [else (loop (rest string) (+ count (if (equal? (first string) #\\1) 1 0)))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122983,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq0_83wx0.rkt:14:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11000010001\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq0_83wx0.rkt:15:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"10111\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq0_83wx0.rkt:16:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"11011101100101\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let* ([length (string-length string)]\n         [zeros (count (lambda (c) (char=? c #\\0)) string)]\n         [ones (count (lambda (c) (char=? c #\\1)) string)])\n    (if (zero? length)\n        0\n        (max (abs (- zeros ones))\n             (find_length (substring string 1 length))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122983,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbfrzhv6o.rkt:18:4\n\ncount: contract violation\n  expected: list?\n  given: \"11000010001\"\n  argument position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpbfrzhv6o.rkt:6:23>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbfrzhv6o.rkt:19:4\n\ncount: contract violation\n  expected: list?\n  given: \"10111\"\n  argument position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpbfrzhv6o.rkt:6:23>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbfrzhv6o.rkt:20:4\n\ncount: contract violation\n  expected: list?\n  given: \"11011101100101\"\n  argument position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpbfrzhv6o.rkt:6:23>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n  (let ([len (string-length string)])\n    (let loop ([i 0] [j len] [max-diff 0])\n      (if (= i j)\n          max-diff\n          (let ([diff (abs (- (count-char #\\1 string i j)\n                              (count-char #\\0 string i j)))])\n            (loop (+ i 1) j (max diff max-diff)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666122983,
      "stdout": "",
      "stderr": "/tmp/tmppa1x7gzu.rkt:9:31: count-char: unbound identifier\n  in: count-char\n  location...:\n   /tmp/tmppa1x7gzu.rkt:9:31\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}