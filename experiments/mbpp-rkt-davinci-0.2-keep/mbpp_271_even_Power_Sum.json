{
  "name": "mbpp_271_even_Power_Sum",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n(define (even_Power_Sum n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_271_even_Power_Sum.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_Power_Sum))\n    (check-equal? (candidate 2) 1056)\n    (check-equal? (candidate 3) 8832)\n    (check-equal? (candidate 1) 32)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* n 2) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter i sum)\n    (if (= i n)\n        sum\n        (even_Power_Sum_iter (+ i 1) (+ sum (expt (* 2 i) 5)))))\n  (even_Power_Sum_iter 0 0))\n",
    "  (sum (map (lambda (x) (expt x 5))\n            (filter even? (range 1 n)))))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter i sum)\n    (cond\n      [(= i n) sum]\n      [(= (remainder i 2) 0) (even_Power_Sum_iter (+ i 1) (+ sum (expt i 5)))]\n      [else (even_Power_Sum_iter (+ i 1) sum)]))\n  (even_Power_Sum_iter 0 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* n 2) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even? n)\n    (= (remainder n 2) 0))\n  (define (power n)\n    (expt n 5))\n  (define (sum n)\n    (if (= n 0)\n        0\n        (+ (power n) (sum (- n 1)))))\n  (if (even? n)\n      (sum n)\n      (sum (- n 1))))\n",
    "  (define (even? n)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #f]\n      [else (even? (- n 2))]))\n  (define (sum_even_power n)\n    (cond\n      [(= n 0) 0]\n      [(even? n) (+ (expt n 5) (sum_even_power (- n 1)))]\n      [else (sum_even_power (- n 1))]))\n  (sum_even_power n))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even? n)\n    (if (= (remainder n 2) 0)\n        #t\n        #f))\n  (define (power n)\n    (expt n 5))\n  (define (sum n)\n    (if (= n 0)\n        0\n        (+ (power n) (sum (- n 1)))))\n  (define (even_sum n)\n    (if (= n 0)\n        0\n        (+ (power n) (even_sum (- n 1)))))\n  (if (even? n)\n      (even_sum n)\n      (sum n)))\n",
    "  (define (even_Power_Sum_helper n sum)\n    (cond\n      [(= n 0) sum]\n      [(even? n) (even_Power_Sum_helper (- n 1) (+ sum (expt n 5)))]\n      [else (even_Power_Sum_helper (- n 1) sum)]))\n  (even_Power_Sum_helper n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even? n)\n    (if (zero? (remainder n 2))\n        #t\n        #f))\n  (define (sum n)\n    (if (= n 0)\n        0\n        (+ (expt (if (even? n) n (+ n 1)) 5) (sum (- n 1)))))\n  (sum n))\n",
    "  (define (even_Power_Sum_iter i sum)\n    (if (= i n)\n        sum\n        (even_Power_Sum_iter (+ i 1) (+ sum (expt (* 2 i) 5)))))\n  (even_Power_Sum_iter 0 0))\n",
    "  (define (even? n)\n    (if (= (remainder n 2) 0)\n        #t\n        #f))\n  (define (sum_even_power n)\n    (if (= n 1)\n        (if (even? n)\n            (expt n 5)\n            0)\n        (if (even? n)\n            (+ (expt n 5) (sum_even_power (- n 1)))\n            (sum_even_power (- n 1)))))\n  (sum_even_power n))\n",
    "  (define (even_Power_Sum_iter i sum)\n    (if (= i n)\n        sum\n        (even_Power_Sum_iter (+ i 1) (+ sum (expt (* 2 i) 5)))))\n  (even_Power_Sum_iter 0 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n"
  ]
}