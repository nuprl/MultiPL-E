{
  "name": "mbpp_271_even_Power_Sum",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n(define (even_Power_Sum n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_271_even_Power_Sum.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_Power_Sum))\n    (check-equal? (candidate 2) 1056)\n    (check-equal? (candidate 3) 8832)\n    (check-equal? (candidate 1) 32)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* n 2) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter i sum)\n    (if (= i n)\n        sum\n        (even_Power_Sum_iter (+ i 1) (+ sum (expt (* 2 i) 5)))))\n  (even_Power_Sum_iter 0 0))\n",
    "  (sum (map (lambda (x) (expt x 5))\n            (filter even? (range 1 n)))))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter i sum)\n    (cond\n      [(= i n) sum]\n      [(= (remainder i 2) 0) (even_Power_Sum_iter (+ i 1) (+ sum (expt i 5)))]\n      [else (even_Power_Sum_iter (+ i 1) sum)]))\n  (even_Power_Sum_iter 0 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* n 2) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even? n)\n    (= (remainder n 2) 0))\n  (define (power n)\n    (expt n 5))\n  (define (sum n)\n    (if (= n 0)\n        0\n        (+ (power n) (sum (- n 1)))))\n  (if (even? n)\n      (sum n)\n      (sum (- n 1))))\n",
    "  (define (even? n)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #f]\n      [else (even? (- n 2))]))\n  (define (sum_even_power n)\n    (cond\n      [(= n 0) 0]\n      [(even? n) (+ (expt n 5) (sum_even_power (- n 1)))]\n      [else (sum_even_power (- n 1))]))\n  (sum_even_power n))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even? n)\n    (if (= (remainder n 2) 0)\n        #t\n        #f))\n  (define (power n)\n    (expt n 5))\n  (define (sum n)\n    (if (= n 0)\n        0\n        (+ (power n) (sum (- n 1)))))\n  (define (even_sum n)\n    (if (= n 0)\n        0\n        (+ (power n) (even_sum (- n 1)))))\n  (if (even? n)\n      (even_sum n)\n      (sum n)))\n",
    "  (define (even_Power_Sum_helper n sum)\n    (cond\n      [(= n 0) sum]\n      [(even? n) (even_Power_Sum_helper (- n 1) (+ sum (expt n 5)))]\n      [else (even_Power_Sum_helper (- n 1) sum)]))\n  (even_Power_Sum_helper n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even? n)\n    (if (zero? (remainder n 2))\n        #t\n        #f))\n  (define (sum n)\n    (if (= n 0)\n        0\n        (+ (expt (if (even? n) n (+ n 1)) 5) (sum (- n 1)))))\n  (sum n))\n",
    "  (define (even_Power_Sum_iter i sum)\n    (if (= i n)\n        sum\n        (even_Power_Sum_iter (+ i 1) (+ sum (expt (* 2 i) 5)))))\n  (even_Power_Sum_iter 0 0))\n",
    "  (define (even? n)\n    (if (= (remainder n 2) 0)\n        #t\n        #f))\n  (define (sum_even_power n)\n    (if (= n 1)\n        (if (even? n)\n            (expt n 5)\n            0)\n        (if (even? n)\n            (+ (expt n 5) (sum_even_power (- n 1)))\n            (sum_even_power (- n 1)))))\n  (sum_even_power n))\n",
    "  (define (even_Power_Sum_iter i sum)\n    (if (= i n)\n        sum\n        (even_Power_Sum_iter (+ i 1) (+ sum (expt (* 2 i) 5)))))\n  (even_Power_Sum_iter 0 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (cond ((= n 0) sum)\n          ((even? n) (even_Power_Sum_iter (- n 1) (+ sum (expt n 5))))\n          (else (even_Power_Sum_iter (- n 1) sum))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* n 2) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (if (= n 0)\n      0\n      (+ (expt (* 2 n) 5)\n         (even_Power_Sum (- n 1)))))\n",
    "  (define (even_Power_Sum_helper n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_helper (- n 1) (+ sum (expt (* n 2) 5)))))\n  (even_Power_Sum_helper n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (+ n 1) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* n 2) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even? n)\n    (if (zero? n)\n        #t\n        (odd? (- n 1))))\n  (define (odd? n)\n    (if (zero? n)\n        #f\n        (even? (- n 1))))\n  (define (sum n)\n    (if (zero? n)\n        0\n        (+ (expt (even? n) 5) (sum (- n 1)))))\n  (sum n))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (expt (* 2 n) 5) (even_Power_Sum (- n 1)))]))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* n 2) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (cond ((= n 0) sum)\n          ((even? n) (even_Power_Sum_iter (- n 1) (+ sum (expt n 5))))\n          (else (even_Power_Sum_iter (- n 1) sum))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* n 2) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [else (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))]))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* n 2) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n acc)\n    (if (= n 0)\n        acc\n        (even_Power_Sum_iter (- n 1) (+ acc (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter i sum)\n    (if (= i n)\n        sum\n        (even_Power_Sum_iter (+ i 1) (+ sum (expt (* i 2) 5)))))\n  (even_Power_Sum_iter 0 0))\n",
    "  (define (even? n)\n    (if (= (remainder n 2) 0)\n        #t\n        #f))\n  (define (power n)\n    (expt n 5))\n  (define (sum n)\n    (if (= n 0)\n        0\n        (+ (power n) (sum (- n 1)))))\n  (define (even_sum n)\n    (if (= n 0)\n        0\n        (+ (if (even? n)\n               (power n)\n               0)\n           (even_sum (- n 1)))))\n  (even_sum n))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* n 2) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 (- n 1)) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n acc)\n    (if (= n 0)\n        acc\n        (even_Power_Sum_iter (- n 1) (+ acc (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter i sum)\n    (cond\n      [(= i n) sum]\n      [(even? i) (even_Power_Sum_iter (+ i 1) (+ sum (expt i 5)))]\n      [else (even_Power_Sum_iter (+ i 1) sum)]))\n  (even_Power_Sum_iter 0 0))\n",
    "  (define (even_Power_Sum_iter n i sum)\n    (cond\n      [(= i n) sum]\n      [else (even_Power_Sum_iter n (+ i 1) (+ sum (expt (* 2 i) 5)))]))\n  (even_Power_Sum_iter n 0 0))\n",
    "  (define (even? x) (= (remainder x 2) 0))\n  (define (power x) (* x x x x x))\n  (define (even_power_sum_iter n sum)\n    (cond ((= n 0) sum)\n          ((even? n) (even_power_sum_iter (- n 1) (+ (power n) sum)))\n          (else (even_power_sum_iter (- n 1) sum))))\n  (even_power_sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 (- n 1)) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n</code>\nI am trying to write a Racket function that does the same thing. I am having trouble with the base case of the recursion. I am not sure how to make the base case check if the number is even. I am also not sure how to make the recursive call add the sum of the even numbers raised to the fifth power.\n\n\nA:\n\nI think you're overthinking this. You don't need to check if the number is even, because you're already doing that in the recursive call.\n<code>(define (even-power-sum n)\n  (define (even-power-sum-iter n sum)\n    (if (= n 0)\n        sum\n        (even-power-sum-iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even-power-sum-iter n 0))\n</code>\n",
    "  (define (even? n)\n    (if (zero? (modulo n 2))\n        #t\n        #f))\n  (define (sum_of_evens n)\n    (if (zero? n)\n        0\n        (+ (expt (if (even? n) n 0) 5) (sum_of_evens (- n 1)))))\n  (sum_of_evens n))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter i sum)\n    (if (= i n)\n        sum\n        (even_Power_Sum_iter (+ i 1) (+ sum (expt (* 2 i) 5)))))\n  (even_Power_Sum_iter 0 0))\n",
    "  (define (even_Power_Sum_iter count sum)\n    (cond\n      [(= count n) sum]\n      [else (even_Power_Sum_iter (+ count 1) (+ sum (expt (* count 2) 5)))]))\n  (even_Power_Sum_iter 0 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* n 2) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (cond ((= n 0) sum)\n          ((even? n) (even_Power_Sum_iter (- n 1) (+ sum (expt n 5))))\n          (else (even_Power_Sum_iter (- n 1) sum))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* n 2) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 (- n 1)) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter i sum)\n    (cond\n      [(= i n) sum]\n      [(even? i) (even_Power_Sum_iter (+ i 1) (+ sum (expt i 5)))]\n      [else (even_Power_Sum_iter (+ i 1) sum)]))\n  (even_Power_Sum_iter 0 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even? x)\n    (if (= (remainder x 2) 0)\n        #t\n        #f))\n  (define (sum n)\n    (if (= n 1)\n        (if (even? n)\n            (expt n 5)\n            0)\n        (+ (if (even? n)\n               (expt n 5)\n               0)\n           (sum (- n 1)))))\n  (sum n))\n",
    "  (define (even_Power_Sum_iter i sum)\n    (cond ((= i n) sum)\n          ((even? i) (even_Power_Sum_iter (+ i 1) (+ sum (expt i 5))))\n          (else (even_Power_Sum_iter (+ i 1) sum))))\n  (even_Power_Sum_iter 0 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* n 2) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even? n)\n    (= (remainder n 2) 0))\n  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (if (even? n)\n            (even_Power_Sum_iter (- n 1) (+ sum (expt n 5)))\n            (even_Power_Sum_iter (- n 1) sum))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_helper n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_helper (- n 1) (+ sum (expt (+ n 1) 5)))))\n  (even_Power_Sum_helper (- n 1) 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [else (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))]))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* n 2) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n i sum)\n    (cond\n      [(= i n) sum]\n      [else (even_Power_Sum_iter n (+ i 1) (+ sum (expt (* 2 i) 5)))]))\n  (even_Power_Sum_iter n 1 0))\n",
    "  (define (even? n)\n    (if (= (remainder n 2) 0)\n        #t\n        #f))\n  (define (power_sum n)\n    (if (= n 0)\n        0\n        (+ (expt n 5) (power_sum (- n 1)))))\n  (define (even_power_sum n)\n    (if (= n 0)\n        0\n        (+ (expt n 5) (even_power_sum (- n 1)))))\n  (if (even? n)\n      (even_power_sum n)\n      (power_sum n)))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even? n)\n    (if (zero? (remainder n 2))\n        #t\n        #f))\n  (define (power n)\n    (if (even? n)\n        (expt n 5)\n        0))\n  (define (sum_even_power n)\n    (if (= n 0)\n        0\n        (+ (power n) (sum_even_power (- n 1)))))\n  (sum_even_power n))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* n 2) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* n 2) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* n 2) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* n 2) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even? n)\n    (if (= (remainder n 2) 0)\n        #t\n        #f))\n  (define (sum_even_Power_Sum n)\n    (if (= n 0)\n        0\n        (+ (expt (if (even? n) n 0) 5) (sum_even_Power_Sum (- n 1)))))\n  (sum_even_Power_Sum n))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter i sum)\n    (cond\n      [(= i n) sum]\n      [(even? i) (even_Power_Sum_iter (+ i 1) (+ sum (expt i 5)))]\n      [else (even_Power_Sum_iter (+ i 1) sum)]))\n  (even_Power_Sum_iter 0 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* n 2) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* n 2) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 (- n 1)) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_helper n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_helper (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_helper n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(even? n) (even_Power_Sum_iter (- n 1) (+ sum (expt n 5)))]\n      [else (even_Power_Sum_iter (- n 1) sum)]))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (cond ((= n 0) sum)\n          ((even? n) (even_Power_Sum_iter (- n 1) (+ sum (expt n 5))))\n          (else (even_Power_Sum_iter (- n 1) sum))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (cond ((= n 0) sum)\n          ((even? n) (even_Power_Sum_iter (- n 1) (+ sum (expt n 5))))\n          (else (even_Power_Sum_iter (- n 1) sum))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (+ n 1) 5)))))\n  (even_Power_Sum_iter (- n 1) 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [else (even_Power_Sum_iter (- n 1) (+ sum (expt (* n 2) 5)))]))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter i sum)\n    (if (= i n)\n        sum\n        (even_Power_Sum_iter (+ i 1) (+ sum (expt (* 2 i) 5)))))\n  (even_Power_Sum_iter 0 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even? n)\n    (if (zero? (modulo n 2))\n        #t\n        #f))\n  (define (power n)\n    (if (even? n)\n        (expt n 5)\n        0))\n  (define (sum n)\n    (if (zero? n)\n        0\n        (+ (power n) (sum (- n 1)))))\n  (sum n))\n",
    "  (define (even_Power_Sum_iter i sum)\n    (if (= i n)\n        sum\n        (even_Power_Sum_iter (+ i 1) (+ sum (expt (* 2 i) 5)))))\n  (even_Power_Sum_iter 0 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter i sum)\n    (if (= i n)\n        sum\n        (even_Power_Sum_iter (+ i 1) (+ sum (expt (* 2 i) 5)))))\n  (even_Power_Sum_iter 0 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 (- n 1)) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* n 2) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (cond ((= n 0) sum)\n          ((even? n) (even_Power_Sum_iter (- n 1) (+ sum (expt n 5))))\n          (else (even_Power_Sum_iter (- n 1) sum))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* n 2) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even? n)\n    (if (= (remainder n 2) 0)\n        #t\n        #f))\n  (define (sum_even_Power n)\n    (if (= n 0)\n        0\n        (+ (expt n 5) (sum_even_Power (- n 1)))))\n  (define (sum_even_Power_even n)\n    (if (= n 0)\n        0\n        (+ (expt n 5) (sum_even_Power_even (- n 1)))))\n  (if (even? n)\n      (sum_even_Power_even n)\n      (sum_even_Power n)))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 (- n 1)) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n i sum)\n    (if (= i n)\n        sum\n        (even_Power_Sum_iter n (+ i 1) (+ sum (expt (* 2 i) 5)))))\n  (even_Power_Sum_iter n 0 0))\n",
    "  (define (sum_even_power_helper n sum)\n    (if (= n 0)\n        sum\n        (sum_even_power_helper (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (sum_even_power_helper n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1)\n                             (+ sum\n                                (expt (+ n 1) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* n 2) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* n 2) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* n 2) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter i sum)\n    (if (= i n)\n        sum\n        (even_Power_Sum_iter (+ i 1)\n                             (+ sum (expt (* 2 i) 5)))))\n  (even_Power_Sum_iter 0 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter i sum)\n    (cond ((= i n) sum)\n          (else (even_Power_Sum_iter (+ i 1) (+ sum (expt (* 2 i) 5))))))\n  (even_Power_Sum_iter 0 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* n 2) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* n 2) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* n 2) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (cond ((= n 0) sum)\n          ((even? n) (even_Power_Sum_iter (- n 1) (+ sum (expt n 5))))\n          (else (even_Power_Sum_iter (- n 1) sum))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ (expt (2*n) 5) (sum (- n 1)))))\n  (sum n))\n",
    "  (define (even? n)\n    (if (= n 0)\n        #t\n        (odd? (- n 1))))\n  (define (odd? n)\n    (if (= n 0)\n        #f\n        (even? (- n 1))))\n  (define (sum n)\n    (if (= n 0)\n        0\n        (+ (expt (even? n) 5) (sum (- n 1)))))\n  (sum n))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (cond ((= n 0) sum)\n          ((even? n) (even_Power_Sum_iter (- n 1) (+ sum (expt n 5))))\n          (else (even_Power_Sum_iter (- n 1) sum))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even? n)\n    (if (zero? (remainder n 2))\n        #t\n        #f))\n  (define (sum n)\n    (if (zero? n)\n        0\n        (+ (expt n 5) (sum (- n 1)))))\n  (define (even_sum n)\n    (if (even? n)\n        (sum n)\n        0))\n  (define (loop n)\n    (if (zero? n)\n        0\n        (+ (even_sum n) (loop (- n 1)))))\n  (loop n))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even? n)\n    (if (= (remainder n 2) 0)\n        #t\n        #f))\n  (define (power n)\n    (if (= n 0)\n        1\n        (* n (power (- n 1)))))\n  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (if (even? n)\n            (even_Power_Sum_iter (- n 1) (+ (power 5 n) sum))\n            (even_Power_Sum_iter (- n 1) sum))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (sum_of_even_powers n)\n    (if (= n 0)\n        0\n        (+ (expt (* 2 n) 5)\n           (sum_of_even_powers (- n 1)))))\n  (sum_of_even_powers n))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (cond ((= n 0) sum)\n          ((= (remainder n 2) 0) (even_Power_Sum_iter (- n 1) (+ sum (expt n 5))))\n          (else (even_Power_Sum_iter (- n 1) sum))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even? n)\n    (= (remainder n 2) 0))\n  (define (sum n)\n    (if (= n 0)\n        0\n        (+ (expt n 5) (sum (- n 1)))))\n  (define (even_sum n)\n    (if (= n 0)\n        0\n        (if (even? n)\n            (+ (expt n 5) (even_sum (- n 1)))\n            (even_sum (- n 1)))))\n  (even_sum n))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 (- n 1)) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even? x)\n    (= (remainder x 2) 0))\n  (define (power x)\n    (expt x 5))\n  (define (sum_of_even_power x)\n    (if (= x 0)\n        0\n        (+ (power x) (sum_of_even_power (- x 1)))))\n  (sum_of_even_power n))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter i sum)\n    (if (= i n)\n        sum\n        (even_Power_Sum_iter (+ i 1) (+ sum (expt (* i 2) 5)))))\n  (even_Power_Sum_iter 0 0))\n",
    "  (define (even_Power_Sum_iter i sum)\n    (if (= i n)\n        sum\n        (even_Power_Sum_iter (+ i 1) (+ sum (expt (* 2 i) 5)))))\n  (even_Power_Sum_iter 0 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 (- n 1)) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter i sum)\n    (if (= i n)\n        sum\n        (even_Power_Sum_iter (+ i 1) (+ sum (expt (* 2 i) 5)))))\n  (even_Power_Sum_iter 0 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(even? n) (even_Power_Sum_iter (- n 1) (+ sum (expt n 5)))]\n      [else (even_Power_Sum_iter (- n 1) sum)]))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* n 2) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* n 2) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even? n)\n    (if (= (remainder n 2) 0)\n        #t\n        #f))\n  (define (sum_of_even_powers n)\n    (if (= n 0)\n        0\n        (if (even? n)\n            (+ (expt n 5) (sum_of_even_powers (- n 1)))\n            (sum_of_even_powers (- n 1)))))\n  (sum_of_even_powers n))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (cond ((= n 0) sum)\n          ((even? n) (even_Power_Sum_iter (- n 1) (+ sum (expt n 5))))\n          (else (even_Power_Sum_iter (- n 1) sum))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter i sum)\n    (if (= i n)\n        sum\n        (even_Power_Sum_iter (+ i 1) (+ sum (expt (* 2 i) 5)))))\n  (even_Power_Sum_iter 0 0))\n",
    "  (define (even_Power_Sum_iter i sum)\n    (if (= i n)\n        sum\n        (even_Power_Sum_iter (+ i 1) (+ sum (expt (* i 2) 5)))))\n  (even_Power_Sum_iter 0 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 (- n 1)) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even? n)\n    (if (= (remainder n 2) 0)\n        #t\n        #f))\n  (define (power n)\n    (expt n 5))\n  (define (sum n)\n    (if (= n 0)\n        0\n        (+ (power n) (sum (- n 1)))))\n  (define (even_sum n)\n    (if (= n 0)\n        0\n        (+ (power n) (even_sum (- n 1)))))\n  (if (even? n)\n      (even_sum n)\n      (sum n)))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* n 2) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter i sum)\n    (if (= i n)\n        sum\n        (even_Power_Sum_iter (+ i 1) (+ sum (expt (* 2 i) 5)))))\n  (even_Power_Sum_iter 0 0))\n",
    "  (define (even_Power_Sum_iter i sum)\n    (cond ((= i n) sum)\n          (else (even_Power_Sum_iter (+ i 1) (+ sum (expt (* 2 i) 5))))))\n  (even_Power_Sum_iter 0 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 (- n 1)) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n acc)\n    (if (= n 0)\n        acc\n        (even_Power_Sum_iter (- n 1) (+ acc (expt (* 2 (- n 1)) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* n 2) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 (- n 1)) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [else (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))]))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(even? n) (even_Power_Sum_iter (- n 1) (+ sum (expt n 5)))]\n      [else (even_Power_Sum_iter (- n 1) sum)]))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter i sum)\n    (cond\n      [(= i n) sum]\n      [else (even_Power_Sum_iter (+ i 1) (+ sum (expt (* i 2) 5)))]))\n  (even_Power_Sum_iter 0 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter i sum)\n    (if (= i n)\n        sum\n        (even_Power_Sum_iter (+ i 1) (+ sum (expt (* 2 i) 5)))))\n  (even_Power_Sum_iter 0 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 (- n 1)) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even? n)\n    (if (= (remainder n 2) 0)\n        #t\n        #f))\n  (define (power n)\n    (expt n 5))\n  (define (sum n)\n    (if (= n 0)\n        0\n        (+ (power n) (sum (- n 1)))))\n  (define (even_sum n)\n    (if (= n 0)\n        0\n        (+ (power n) (even_sum (- n 1)))))\n  (if (even? n)\n      (even_sum n)\n      (sum n)))\n",
    "  (define (even_Power_Sum_iter i sum)\n    (cond\n      [(= i n) sum]\n      [else (even_Power_Sum_iter (+ i 1) (+ sum (expt (* 2 i) 5)))]))\n  (even_Power_Sum_iter 0 0))\n",
    "  (define (even? n)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #f]\n      [else (even? (- n 2))]))\n  (define (power_sum n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (expt n 5) (power_sum (- n 1)))]))\n  (define (even_power_sum n)\n    (cond\n      [(= n 0) 0]\n      [(even? n) (+ (expt n 5) (even_power_sum (- n 1)))]\n      [else (even_power_sum (- n 1))]))\n  (even_power_sum n))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n"
  ]
}