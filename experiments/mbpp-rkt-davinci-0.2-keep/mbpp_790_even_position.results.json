{
  "name": "mbpp_790_even_position",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_790_even_position.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even-position-iter nums even-pos)\n    (if (null? nums)\n        even-pos\n        (if (even? (car nums))\n            (even-position-iter (cdr nums) (cons (car nums) even-pos))\n            (even-position-iter (cdr nums) even-pos))))\n  (even-position-iter nums '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpubzc1eet.rkt:18:4\nactual:     '(2)\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpubzc1eet.rkt:19:4\nactual:     '(2)\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpubzc1eet.rkt:20:4\nactual:     '(4 2)\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (if (empty? nums)\n      true\n      (if (even? (remainder (length nums) 2))\n          (if (even? (first nums))\n              (even_position (rest nums))\n              false)\n          (even_position (rest nums)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpitr4lqsa.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpitr4lqsa.rkt:19:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpitr4lqsa.rkt:20:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (if (null? nums)\n      #t\n      (if (even? (remainder (car nums) 2))\n          (even_position (cdr nums))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpup0sbfqs.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2)) (even? (car nums))]\n    [else (even_position (cdr nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4r98qebt.rkt:15:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4r98qebt.rkt:16:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4r98qebt.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (cond\n    [(empty? nums) true]\n    [(even? (remainder (first nums) 2)) (even_position (rest nums))]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp75oteb2t.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even-position-iter nums pos)\n    (if (null? nums)\n        #t\n        (if (even? pos)\n            (if (even? (car nums))\n                (even-position-iter (cdr nums) (+ pos 1))\n                #f)\n            (even-position-iter (cdr nums) (+ pos 1)))))\n  (even-position-iter nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even_position_iter nums i)\n    (if (null? nums)\n        #t\n        (if (even? i)\n            (if (even? (car nums))\n                (even_position_iter (cdr nums) (+ i 1))\n                #f)\n            (even_position_iter (cdr nums) (+ i 1)))))\n  (even_position_iter nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even_position_iter nums i)\n    (cond\n      [(empty? nums) true]\n      [(even? i) (and (even? (first nums)) (even_position_iter (rest nums) (+ i 1)))]\n      [else (even_position_iter (rest nums) (+ i 1))]))\n  (even_position_iter nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (let loop ([nums nums] [i 0])\n    (if (null? nums)\n        #t\n        (if (even? i)\n            (if (even? (car nums))\n                (loop (cdr nums) (+ i 1))\n                #f)\n            (loop (cdr nums) (+ i 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (cond\n    [(empty? nums) empty]\n    [(even? (remainder (length nums) 2))\n     (cons (first nums) (even_position (rest nums)))]\n    [else (even_position (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjwf41guq.rkt:16:4\nactual:     '(2)\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjwf41guq.rkt:17:4\nactual:     '(2)\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjwf41guq.rkt:18:4\nactual:     '(1)\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2)) (even? (first nums))]\n    [else (even_position (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv97a_cl5.rkt:15:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv97a_cl5.rkt:16:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv97a_cl5.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (if (empty? nums)\n      true\n      (if (even? (remainder (length nums) 2))\n          (if (even? (first nums))\n              (even_position (rest nums))\n              false)\n          (even_position (rest nums)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpitr4lqsa.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpitr4lqsa.rkt:19:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpitr4lqsa.rkt:20:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvx6mu1wv.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2)) (even? (first nums))]\n    [else (even_position (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv97a_cl5.rkt:15:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv97a_cl5.rkt:16:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv97a_cl5.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvx6mu1wv.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even? num)\n    (= (remainder num 2) 0))\n  (define (even-position? nums)\n    (cond\n      [(empty? nums) true]\n      [(even? (first nums)) (even-position? (rest nums))]\n      [else false]))\n  (even-position? nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp42wj2mfk.rkt:21:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (cond\n    [(empty? nums) empty]\n    [(even? (remainder (length nums) 2))\n     (cons (first nums) (even_position (rest nums)))]\n    [else (even_position (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjwf41guq.rkt:16:4\nactual:     '(2)\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjwf41guq.rkt:17:4\nactual:     '(2)\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjwf41guq.rkt:18:4\nactual:     '(1)\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (even? (car nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even-position-iter nums i)\n    (if (empty? nums)\n        #t\n        (if (= (remainder i 2) 0)\n            (if (even? (first nums))\n                (even-position-iter (rest nums) (+ i 1))\n                #f)\n            (even-position-iter (rest nums) (+ i 1)))))\n  (even-position-iter nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvx6mu1wv.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvx6mu1wv.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even_position_iter nums i)\n    (cond\n      [(empty? nums) true]\n      [(even? i) (and (even? (first nums)) (even_position_iter (rest nums) (+ i 1)))]\n      [else (even_position_iter (rest nums) (+ i 1))]))\n  (even_position_iter nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (if (empty? nums)\n      true\n      (if (even? (remainder (length nums) 2))\n          (even? (first nums))\n          (even_position (rest nums)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp0lpa5ig.rkt:16:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp0lpa5ig.rkt:17:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp0lpa5ig.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even_position-iter nums i)\n    (if (null? nums)\n        #t\n        (if (= (modulo i 2) 0)\n            (if (even? (car nums))\n                (even_position-iter (cdr nums) (+ i 1))\n                #f)\n            (even_position-iter (cdr nums) (+ i 1)))))\n  (even_position-iter nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (if (empty? nums)\n      #t\n      (if (even? (remainder (length nums) 2))\n          (if (even? (first nums))\n              (even_position (rest nums))\n              #f)\n          (even_position (rest nums)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122943,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbrxksm0b.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbrxksm0b.rkt:19:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbrxksm0b.rkt:20:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (cond\n    [(empty? nums) true]\n    [(even? (remainder (first nums) 2)) (even_position (rest nums))]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp75oteb2t.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvx6mu1wv.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (even? (car nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even_position_iter nums index)\n    (if (null? nums)\n        #t\n        (if (= (modulo index 2) 0)\n            (if (even? (car nums))\n                (even_position_iter (cdr nums) (+ index 1))\n                #f)\n            (even_position_iter (cdr nums) (+ index 1)))))\n  (even_position_iter nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even_position-helper nums i)\n    (if (= i (length nums))\n        #t\n        (if (= (remainder (list-ref nums i) 2) 0)\n            (even_position-helper nums (+ i 1))\n            #f)))\n  (even_position-helper nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0no5a33_.rkt:20:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (if (empty? nums)\n      #t\n      (if (even? (remainder (length nums) 2))\n          (even? (car nums))\n          (even_position (cdr nums)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6_uwsr_b.rkt:16:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6_uwsr_b.rkt:17:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6_uwsr_b.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (let loop ([nums nums] [i 0])\n    (if (null? nums)\n        #t\n        (if (zero? (modulo i 2))\n            (if (even? (car nums))\n                (loop (cdr nums) (+ i 1))\n                #f)\n            (loop (cdr nums) (+ i 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (if (empty? nums)\n      #t\n      (if (even? (remainder (length nums) 2))\n          (if (even? (first nums))\n              (even_position (rest nums))\n              #f)\n          (even_position (rest nums)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122943,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbrxksm0b.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbrxksm0b.rkt:19:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbrxksm0b.rkt:20:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even-position-iter nums pos)\n    (cond\n      [(empty? nums) true]\n      [(even? pos) (and (even? (first nums)) (even-position-iter (rest nums) (+ pos 1)))]\n      [else (even-position-iter (rest nums) (+ pos 1))]))\n  (even-position-iter nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvx6mu1wv.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (if (empty? nums)\n      true\n      (if (even? (remainder (length nums) 2))\n          (even? (first nums))\n          (even_position (rest nums)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp0lpa5ig.rkt:16:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp0lpa5ig.rkt:17:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp0lpa5ig.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2)) (even? (first nums))]\n    [else (even_position (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv97a_cl5.rkt:15:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv97a_cl5.rkt:16:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv97a_cl5.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvx6mu1wv.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even-position-iter nums index)\n    (if (null? nums)\n        #t\n        (if (= (remainder (car nums) 2) 0)\n            (if (= (remainder index 2) 0)\n                (even-position-iter (cdr nums) (+ index 1))\n                #f)\n            (even-position-iter (cdr nums) (+ index 1)))))\n  (even-position-iter nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (cond\n    [(empty? nums) #t]\n    [else (and (even? (first nums)) (even_position (rest nums)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu56mog38.rkt:16:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even_position_iter nums index)\n    (if (null? nums)\n        #t\n        (if (even? index)\n            (if (even? (car nums))\n                (even_position_iter (cdr nums) (+ index 1))\n                #f)\n            (even_position_iter (cdr nums) (+ index 1)))))\n  (even_position_iter nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (if (null? nums)\n      #t\n      (if (even? (remainder (car nums) 2))\n          (even_position (cdr nums))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpup0sbfqs.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvx6mu1wv.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (cond\n    [(empty? nums) true]\n    [(even? (remainder (first nums) 2)) (even_position (rest nums))]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp75oteb2t.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvx6mu1wv.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even_position_iter nums i)\n    (cond\n      [(empty? nums) true]\n      [(even? i) (and (even? (first nums)) (even_position_iter (rest nums) (+ i 1)))]\n      [else (even_position_iter (rest nums) (+ i 1))]))\n  (even_position_iter nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even? n)\n    (= (remainder n 2) 0))\n  (define (even-position? nums)\n    (cond\n      [(empty? nums) #t]\n      [(even? (first nums)) (even-position? (rest nums))]\n      [else #f]))\n  (even-position? (rest nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwezt0bgt.rkt:21:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2)) (even? (first nums))]\n    [else (even_position (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv97a_cl5.rkt:15:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv97a_cl5.rkt:16:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv97a_cl5.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even? num)\n    (= (remainder num 2) 0))\n  (define (even-position? nums)\n    (if (null? nums)\n        #t\n        (if (even? (car nums))\n            (even-position? (cdr nums))\n            #f)))\n  (even-position? nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcfrsg47r.rkt:22:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvx6mu1wv.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even_position_iter nums index)\n    (if (null? nums)\n        #t\n        (if (and (even? index) (even? (car nums)))\n            (even_position_iter (cdr nums) (+ index 1))\n            #f)))\n  (even_position_iter nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpppp8sue3.rkt:20:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even_position_iter nums index)\n    (cond\n      [(empty? nums) true]\n      [(= (remainder (first nums) 2) 0)\n       (even_position_iter (rest nums) (+ index 1))]\n      [(= (remainder index 2) 0)\n       false]\n      [else\n       (even_position_iter (rest nums) (+ index 1))]))\n  (even_position_iter nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2)) (even? (first nums))]\n    [else (even_position (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv97a_cl5.rkt:15:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv97a_cl5.rkt:16:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv97a_cl5.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even_position_iter nums i)\n    (if (null? nums)\n        #t\n        (if (and (even? i) (even? (car nums)))\n            (even_position_iter (cdr nums) (+ i 1))\n            #f)))\n  (even_position_iter nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn30jqdb0.rkt:20:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even_position_helper nums index)\n    (cond\n      [(empty? nums) true]\n      [(even? index) (and (even? (first nums)) (even_position_helper (rest nums) (+ index 1)))]\n      [else (even_position_helper (rest nums) (+ index 1))]))\n  (even_position_helper nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (let loop ([nums nums] [even? #t])\n    (if (null? nums)\n        even?\n        (if (even? (car nums))\n            (loop (cdr nums) even?)\n            (loop (cdr nums) #f)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbwh7f64g.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: #t\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbwh7f64g.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: #t\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbwh7f64g.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (helper nums i)\n    (if (null? nums)\n        #t\n        (if (and (even? i) (even? (car nums)))\n            (helper (cdr nums) (+ i 1))\n            #f)))\n  (helper nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplwu7i_xk.rkt:20:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvx6mu1wv.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (cond\n    [(empty? nums) true]\n    [(even? (remainder (length nums) 2))\n     (and (even? (first nums))\n          (even_position (rest nums)))]\n    [else\n     (and (odd? (first nums))\n          (even_position (rest nums)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplph4w62y.rkt:19:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplph4w62y.rkt:20:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplph4w62y.rkt:21:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvx6mu1wv.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvx6mu1wv.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (cond\n    [(empty? nums) true]\n    [(even? (remainder (length nums) 2))\n     (and (even? (first nums)) (even_position (rest nums)))]\n    [else (even_position (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgrfs2j2z.rkt:16:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgrfs2j2z.rkt:17:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgrfs2j2z.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (for/and ([num nums]\n            #:when (even? (remainder (index nums num) 2)))\n    (even? num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "/tmp/tmpnrgrfi46.rkt:6:38: index: unbound identifier\n  in: index\n  location...:\n   /tmp/tmpnrgrfi46.rkt:6:38\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (cond\n    [(empty? nums) true]\n    [(even? (remainder (length nums) 2)) (even? (first nums))]\n    [else (even_position (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplu2qp21c.rkt:15:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplu2qp21c.rkt:16:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplu2qp21c.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvx6mu1wv.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even-index? nums)\n    (cond\n      [(empty? nums) empty]\n      [(even? (first nums)) (cons (first nums) (even-index? (rest nums)))]\n      [else (even-index? (rest nums))]))\n  (define (even? nums)\n    (cond\n      [(empty? nums) empty]\n      [(even? (first nums)) (cons (first nums) (even? (rest nums)))]\n      [else (even? (rest nums))]))\n  (even? (even-index? nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmxg5v59n.rkt:22:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmxg5v59n.rkt:23:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmxg5v59n.rkt:24:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 2\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even-position-iter nums i)\n    (cond ((null? nums) #t)\n          ((= (remainder i 2) 0)\n           (and (even? (car nums))\n                (even-position-iter (cdr nums) (+ i 1))))\n          (else (even-position-iter (cdr nums) (+ i 1)))))\n  (even-position-iter nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2)) (even? (first nums))]\n    [else (even_position (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv97a_cl5.rkt:15:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv97a_cl5.rkt:16:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv97a_cl5.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even_position_iter nums i)\n    (if (empty? nums)\n        #t\n        (if (even? i)\n            (if (even? (first nums))\n                (even_position_iter (rest nums) (+ i 1))\n                #f)\n            (even_position_iter (rest nums) (+ i 1)))))\n  (even_position_iter nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (for/and ([n nums]\n            #:when (even? n))\n    (even? (remainder (index nums n) 2))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "/tmp/tmp5gpvwgfg.rkt:7:23: index: unbound identifier\n  in: index\n  location...:\n   /tmp/tmp5gpvwgfg.rkt:7:23\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (cond\n    [(empty? nums) #t]\n    [(even? (first nums)) (even_position (rest nums))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptsy_35kr.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even_position_iter nums i)\n    (if (null? nums)\n        #t\n        (if (= (remainder i 2) 0)\n            (if (even? (car nums))\n                (even_position_iter (cdr nums) (+ i 1))\n                #f)\n            (even_position_iter (cdr nums) (+ i 1)))))\n  (even_position_iter nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (cond\n    [(empty? nums) true]\n    [(even? (remainder (length nums) 2))\n     (and (even? (car nums))\n          (even_position (cdr nums)))]\n    [else (and (odd? (car nums))\n               (even_position (cdr nums)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8yimll0k.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8yimll0k.rkt:19:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8yimll0k.rkt:20:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (if (empty? nums)\n      #t\n      (if (even? (remainder (length nums) 2))\n          (even? (first nums))\n          (even_position (rest nums)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptqkv32z8.rkt:16:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptqkv32z8.rkt:17:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptqkv32z8.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (cond\n    [(empty? nums) true]\n    [(even? (remainder (length nums) 2))\n     (and (even? (first nums)) (even_position (rest nums)))]\n    [else\n     (and (odd? (first nums)) (even_position (rest nums)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpadvk85ip.rkt:17:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpadvk85ip.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpadvk85ip.rkt:19:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvx6mu1wv.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2)) (even? (car nums))]\n    [else (even_position (cdr nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4r98qebt.rkt:15:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4r98qebt.rkt:16:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4r98qebt.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even_position_iter nums i)\n    (cond\n      [(empty? nums) true]\n      [(even? i)\n       (if (even? (first nums))\n           (even_position_iter (rest nums) (+ i 1))\n           false)]\n      [else (even_position_iter (rest nums) (+ i 1))]))\n  (even_position_iter nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2)) (even? (car nums))]\n    [else (even_position (cdr nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4r98qebt.rkt:15:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4r98qebt.rkt:16:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4r98qebt.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2)) (even? (first nums))]\n    [else (even_position (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv97a_cl5.rkt:15:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv97a_cl5.rkt:16:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv97a_cl5.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (helper nums i)\n    (if (empty? nums)\n        #t\n        (if (even? i)\n            (if (even? (first nums))\n                (helper (rest nums) (+ i 1))\n                #f)\n            (helper (rest nums) (+ i 1)))))\n  (helper nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2)) (even? (first nums))]\n    [else (even_position (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv97a_cl5.rkt:15:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv97a_cl5.rkt:16:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv97a_cl5.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2)) (even? (first nums))]\n    [else (even_position (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv97a_cl5.rkt:15:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv97a_cl5.rkt:16:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv97a_cl5.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even_position_iter nums i)\n    (if (empty? nums)\n        true\n        (if (even? i)\n            (if (even? (first nums))\n                (even_position_iter (rest nums) (+ i 1))\n                false)\n            (even_position_iter (rest nums) (+ i 1)))))\n  (even_position_iter nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvx6mu1wv.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even-position-iter nums pos)\n    (if (null? nums)\n        #t\n        (if (even? pos)\n            (if (even? (car nums))\n                (even-position-iter (cdr nums) (+ pos 1))\n                #f)\n            (even-position-iter (cdr nums) (+ pos 1)))))\n  (even-position-iter nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even_position_iter nums index)\n    (cond ((null? nums) #t)\n          ((even? index) (and (even? (car nums)) (even_position_iter (cdr nums) (+ index 1))))\n          (else (even_position_iter (cdr nums) (+ index 1)))))\n  (even_position_iter nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2)) (even? (first nums))]\n    [else (even_position (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv97a_cl5.rkt:15:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv97a_cl5.rkt:16:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv97a_cl5.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even_position_iter nums index)\n    (cond ((null? nums) #t)\n          ((= (modulo index 2) 0)\n           (and (even? (car nums))\n                (even_position_iter (cdr nums) (+ index 1))))\n          (else (even_position_iter (cdr nums) (+ index 1)))))\n  (even_position_iter nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvx6mu1wv.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even? n) (= (remainder n 2) 0))\n  (define (even-index? nums)\n    (cond\n      [(empty? nums) true]\n      [(even? (first nums)) (even-index? (rest nums))]\n      [else false]))\n  (even-index? (rest nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt0ae82_5.rkt:20:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even-index? nums)\n    (if (null? nums)\n        #t\n        (if (even? (car nums))\n            (even-index? (cdr nums))\n            #f)))\n  (even-index? nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0w55cxt.rkt:20:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (for/and ([num (in-list nums)]\n            [i (in-naturals)])\n    (and (even? i) (even? num))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_orc52r_.rkt:16:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even_position_iter nums i)\n    (if (null? nums)\n        #t\n        (if (= (modulo i 2) 0)\n            (if (even? (car nums))\n                (even_position_iter (cdr nums) (+ i 1))\n                #f)\n            (even_position_iter (cdr nums) (+ i 1)))))\n  (even_position_iter nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvx6mu1wv.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even_position_iter nums index)\n    (if (null? nums)\n        #t\n        (if (and (even? index) (even? (car nums)))\n            (even_position_iter (cdr nums) (+ index 1))\n            #f)))\n  (even_position_iter nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpppp8sue3.rkt:20:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even_position_iter nums index)\n    (cond ((null? nums) #t)\n          ((and (even? index) (even? (car nums)))\n           (even_position_iter (cdr nums) (+ index 1)))\n          ((and (even? index) (odd? (car nums))) #f)\n          (else (even_position_iter (cdr nums) (+ index 1)))))\n  (even_position_iter nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (helper nums index)\n    (cond\n      [(empty? nums) true]\n      [(even? index) (and (even? (first nums)) (helper (rest nums) (+ index 1)))]\n      [else (helper (rest nums) (+ index 1))]))\n  (helper nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (for/and ([num nums]\n            #:when (even? (remainder num 2)))\n    (even? num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgu43pceu.rkt:14:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgu43pceu.rkt:15:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even? n) (= (remainder n 2) 0))\n  (define (even-position? nums)\n    (cond ((null? nums) #t)\n          ((even? (car nums)) (even-position? (cdr nums)))\n          (else #f)))\n  (even-position? nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqxncmmry.rkt:19:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even-index? nums)\n    (cond\n      [(empty? nums) #t]\n      [(even? (first nums)) (even-index? (rest nums))]\n      [else #f]))\n  (even-index? (rest nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkysf3gt3.rkt:19:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even_position_iter nums i)\n    (cond\n      [(empty? nums) true]\n      [(even? i) (and (even? (first nums)) (even_position_iter (rest nums) (+ i 1)))]\n      [else (even_position_iter (rest nums) (+ i 1))]))\n  (even_position_iter nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvx6mu1wv.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2)) (even? (car nums))]\n    [else (even_position (cdr nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4r98qebt.rkt:15:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4r98qebt.rkt:16:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4r98qebt.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2))\n     (and (even? (first nums))\n          (even_position (rest nums)))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdww5hqj8.rkt:19:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvx6mu1wv.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (andmap (lambda (x) (even? x)) (range 0 (length nums) 2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxrv0tho9.rkt:12:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxrv0tho9.rkt:13:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2))\n     (and (even? (first nums))\n          (even_position (rest nums)))]\n    [else (even_position (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprluf2kli.rkt:17:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprluf2kli.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprluf2kli.rkt:19:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even_position_iter nums index)\n    (if (null? nums)\n        #t\n        (if (even? index)\n            (if (even? (car nums))\n                (even_position_iter (cdr nums) (+ index 1))\n                #f)\n            (even_position_iter (cdr nums) (+ index 1)))))\n  (even_position_iter nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even_position_iter nums i)\n    (cond\n      [(empty? nums) true]\n      [(even? i)\n       (and (even? (first nums))\n            (even_position_iter (rest nums) (+ i 1)))]\n      [else (even_position_iter (rest nums) (+ i 1))]))\n  (even_position_iter nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2)) (even? (first nums))]\n    [else (even_position (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv97a_cl5.rkt:15:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv97a_cl5.rkt:16:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv97a_cl5.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2))\n     (and (even? (first nums))\n          (even_position (rest nums)))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdww5hqj8.rkt:19:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvx6mu1wv.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even_position_iter nums i)\n    (cond\n      [(empty? nums) true]\n      [(even? i) (and (even? (first nums)) (even_position_iter (rest nums) (+ i 1)))]\n      [else (even_position_iter (rest nums) (+ i 1))]))\n  (even_position_iter nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvx6mu1wv.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even_position_iter nums i)\n    (if (null? nums)\n        #t\n        (if (even? i)\n            (if (even? (car nums))\n                (even_position_iter (cdr nums) (+ i 1))\n                #f)\n            (even_position_iter (cdr nums) (+ i 1)))))\n  (even_position_iter nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (helper nums index)\n    (if (null? nums)\n        #t\n        (if (= (remainder index 2) 0)\n            (if (even? (car nums))\n                (helper (cdr nums) (+ index 1))\n                #f)\n            (helper (cdr nums) (+ index 1)))))\n  (helper nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even-index? nums)\n    (if (null? nums)\n        #t\n        (if (even? (car nums))\n            (even-index? (cdr nums))\n            #f)))\n  (even-index? (filter even? nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvec9u6n0.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvec9u6n0.rkt:19:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (helper nums index)\n    (if (null? nums)\n        #t\n        (if (= (modulo index 2) 0)\n            (if (even? (car nums))\n                (helper (cdr nums) (+ index 1))\n                #f)\n            (helper (cdr nums) (+ index 1)))))\n  (helper nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (if (empty? nums)\n      true\n      (if (even? (remainder (length nums) 2))\n          (even? (car nums))\n          (even_position (cdr nums)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprhiudzxf.rkt:16:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprhiudzxf.rkt:17:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprhiudzxf.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (let loop ([nums nums] [i 0])\n    (cond [(empty? nums) true]\n          [(even? i) (and (even? (first nums)) (loop (rest nums) (+ i 1)))]\n          [else (loop (rest nums) (+ i 1))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (if (empty? nums)\n      '()\n      (if (even? (remainder (length nums) 2))\n          (cons (first nums) (even_position (rest nums)))\n          (even_position (rest nums)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpztx8tjmk.rkt:16:4\nactual:     '(2)\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpztx8tjmk.rkt:17:4\nactual:     '(2)\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpztx8tjmk.rkt:18:4\nactual:     '(1)\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (cond\n    [(empty? nums) true]\n    [(even? (remainder (length nums) 2))\n     (and (even? (first nums)) (even_position (rest nums)))]\n    [else (even_position (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgrfs2j2z.rkt:16:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgrfs2j2z.rkt:17:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgrfs2j2z.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even-position-iter nums pos)\n    (if (null? nums)\n        #t\n        (if (even? pos)\n            (if (even? (car nums))\n                (even-position-iter (cdr nums) (+ pos 1))\n                #f)\n            (even-position-iter (cdr nums) (+ pos 1)))))\n  (even-position-iter nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvx6mu1wv.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2))\n     (and (even? (first nums)) (even_position (rest nums)))]\n    [else (even_position (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoc56tf52.rkt:16:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoc56tf52.rkt:17:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoc56tf52.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (cond\n    [(empty? nums) true]\n    [(even? (remainder (first nums) 2))\n     (even_position (rest nums))]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo6nsca1x.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2)) (even? (first nums))]\n    [else (even_position (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv97a_cl5.rkt:15:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv97a_cl5.rkt:16:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv97a_cl5.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even-position-iter nums index)\n    (if (null? nums)\n        #t\n        (if (even? index)\n            (if (even? (car nums))\n                (even-position-iter (cdr nums) (+ index 1))\n                #f)\n            (even-position-iter (cdr nums) (+ index 1)))))\n  (even-position-iter nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvx6mu1wv.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even_position_iter nums i)\n    (if (null? nums)\n        #t\n        (if (and (even? i) (even? (car nums)))\n            (even_position_iter (cdr nums) (+ i 1))\n            #f)))\n  (even_position_iter nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn30jqdb0.rkt:20:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvx6mu1wv.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even_position_iter nums pos)\n    (cond\n      [(empty? nums) true]\n      [(even? pos) (and (even? (first nums)) (even_position_iter (rest nums) (+ pos 1)))]\n      [else (even_position_iter (rest nums) (+ pos 1))]))\n  (even_position_iter nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even_position_iter nums index)\n    (cond\n      [(empty? nums) true]\n      [(even? index)\n       (and (even? (first nums)) (even_position_iter (rest nums) (+ index 1)))]\n      [else (even_position_iter (rest nums) (+ index 1))]))\n  (even_position_iter nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even-position-iter nums index)\n    (if (null? nums)\n        #t\n        (if (and (even? index) (even? (car nums)))\n            (even-position-iter (cdr nums) (+ index 1))\n            #f)))\n  (even-position-iter nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz8wqkpdt.rkt:20:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (for/and ([n (in-list nums)]\n            [i (in-naturals)])\n    (even? n)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptxy3___1.rkt:16:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even_position_iter nums i)\n    (if (null? nums)\n        #t\n        (if (= (modulo i 2) 0)\n            (if (even? (car nums))\n                (even_position_iter (cdr nums) (+ i 1))\n                #f)\n            (even_position_iter (cdr nums) (+ i 1)))))\n  (even_position_iter nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2)) (even? (first nums))]\n    [else (even_position (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv97a_cl5.rkt:15:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv97a_cl5.rkt:16:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv97a_cl5.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even? n)\n    (= (remainder n 2) 0))\n  (define (even-position? nums)\n    (cond\n      [(empty? nums) #t]\n      [(even? (first nums)) (even-position? (rest nums))]\n      [else #f]))\n  (even-position? (rest nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwezt0bgt.rkt:21:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (helper nums index)\n    (if (empty? nums)\n        #t\n        (if (even? index)\n            (if (even? (first nums))\n                (helper (rest nums) (+ index 1))\n                #f)\n            (helper (rest nums) (+ index 1)))))\n  (helper nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (helper nums pos)\n    (if (null? nums)\n        #t\n        (if (= (remainder pos 2) 0)\n            (if (even? (car nums))\n                (helper (cdr nums) (+ pos 1))\n                #f)\n            (helper (cdr nums) (+ pos 1)))))\n  (helper nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even? n)\n    (= (remainder n 2) 0))\n  (define (even-position? nums)\n    (if (null? nums)\n        #t\n        (if (even? (car nums))\n            (even-position? (cdr nums))\n            #f)))\n  (even-position? nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwhras_sg.rkt:22:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (helper nums i)\n    (if (null? nums)\n        #t\n        (if (even? i)\n            (if (even? (car nums))\n                (helper (cdr nums) (+ i 1))\n                #f)\n            (helper (cdr nums) (+ i 1)))))\n  (helper nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvx6mu1wv.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even? n)\n    (= (remainder n 2) 0))\n  (define (even-position? nums)\n    (cond\n      [(empty? nums) #t]\n      [(even? (first nums)) (even-position? (rest nums))]\n      [else #f]))\n  (even-position? (rest nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwezt0bgt.rkt:21:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (helper nums pos)\n    (if (null? nums)\n        #t\n        (if (= (remainder pos 2) 0)\n            (if (even? (car nums))\n                (helper (cdr nums) (+ pos 1))\n                #f)\n            (helper (cdr nums) (+ pos 1)))))\n  (helper nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even_position_iter nums index)\n    (if (null? nums)\n        #t\n        (if (= (modulo (car nums) 2) 0)\n            (if (= (modulo index 2) 0)\n                (even_position_iter (cdr nums) (+ index 1))\n                #f)\n            (even_position_iter (cdr nums) (+ index 1)))))\n  (even_position_iter nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even_position_iter nums i)\n    (cond ((null? nums) #t)\n          ((even? i) (and (even? (car nums)) (even_position_iter (cdr nums) (+ i 1))))\n          (else (even_position_iter (cdr nums) (+ i 1)))))\n  (even_position_iter nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvx6mu1wv.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even_position_iter nums i)\n    (cond ((null? nums) #t)\n          ((even? i) (and (even? (car nums)) (even_position_iter (cdr nums) (+ i 1))))\n          (else (even_position_iter (cdr nums) (+ i 1)))))\n  (even_position_iter nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (cond\n    [(null? nums) #t]\n    [(even? (car nums)) (even_position (cdr nums))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu3ah4jb6.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (let loop ([nums nums] [i 0])\n    (if (null? nums)\n        #t\n        (if (and (even? i) (even? (car nums)))\n            (loop (cdr nums) (+ i 1))\n            #f))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgdve0z6h.rkt:19:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (helper nums i)\n    (cond\n      [(empty? nums) true]\n      [(even? i) (and (even? (first nums)) (helper (rest nums) (+ i 1)))]\n      [else (helper (rest nums) (+ i 1))]))\n  (helper nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even-index? nums)\n    (if (empty? nums)\n        #t\n        (if (even? (remainder (length nums) 2))\n            (if (even? (first nums))\n                (even-index? (rest nums))\n                #f)\n            (even-index? (rest nums)))))\n  (even-index? nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgmq4djwp.rkt:20:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgmq4djwp.rkt:21:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgmq4djwp.rkt:22:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even-index? nums)\n    (if (null? nums)\n        #t\n        (if (even? (car nums))\n            (even-index? (cdr nums))\n            #f)))\n  (even-index? (cdr nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzdlmib4y.rkt:20:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvx6mu1wv.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (cond\n    [(empty? nums) true]\n    [(even? (remainder (length nums) 2))\n     (and (even? (first nums))\n          (even_position (rest nums)))]\n    [else\n     (and (odd? (first nums))\n          (even_position (rest nums)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplph4w62y.rkt:19:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplph4w62y.rkt:20:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplph4w62y.rkt:21:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even_position_iter nums i)\n    (if (null? nums)\n        #t\n        (if (= (remainder i 2) 0)\n            (if (even? (car nums))\n                (even_position_iter (cdr nums) (+ i 1))\n                #f)\n            (even_position_iter (cdr nums) (+ i 1)))))\n  (even_position_iter nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even? n)\n    (= (remainder n 2) 0))\n  (define (even-position? nums)\n    (cond\n      [(empty? nums) #t]\n      [(even? (first nums)) (even-position? (rest nums))]\n      [else #f]))\n  (even-position? (rest nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwezt0bgt.rkt:21:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even-index? nums)\n    (if (null? nums)\n        #t\n        (if (even? (car nums))\n            (even-index? (cdr nums))\n            #f)))\n  (even-index? (cdr nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzdlmib4y.rkt:20:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (cond\n    [(empty? nums) true]\n    [(even? (remainder (first nums) 2)) (even_position (rest nums))]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp75oteb2t.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (let loop ([nums nums] [i 0])\n    (if (null? nums)\n        #t\n        (if (= 0 (modulo i 2))\n            (if (even? (car nums))\n                (loop (cdr nums) (+ i 1))\n                #f)\n            (loop (cdr nums) (+ i 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2))\n     (and (even? (car nums))\n          (even_position (cdr nums)))]\n    [else (even_position (cdr nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk_vqxz97.rkt:17:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk_vqxz97.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk_vqxz97.rkt:19:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even? n)\n    (= (remainder n 2) 0))\n  (define (even-position? nums)\n    (cond [(empty? nums) #t]\n          [(even? (first nums)) (even-position? (rest nums))]\n          [else #f]))\n  (even-position? (rest nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjizumhzo.rkt:20:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (if (empty? nums)\n      true\n      (if (even? (remainder (length nums) 2))\n          (if (even? (first nums))\n              (even_position (rest nums))\n              false)\n          (even_position (rest nums)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpitr4lqsa.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpitr4lqsa.rkt:19:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpitr4lqsa.rkt:20:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (if (empty? nums)\n      #t\n      (if (even? (remainder (length nums) 2))\n          (even? (first nums))\n          (even_position (rest nums)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptqkv32z8.rkt:16:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptqkv32z8.rkt:17:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptqkv32z8.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even_position_iter nums i)\n    (cond\n      [(empty? nums) true]\n      [(even? i)\n       (and (even? (first nums))\n            (even_position_iter (rest nums) (+ i 1)))]\n      [else (even_position_iter (rest nums) (+ i 1))]))\n  (even_position_iter nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2)) (even? (first nums))]\n    [else (even_position (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv97a_cl5.rkt:15:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv97a_cl5.rkt:16:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv97a_cl5.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvx6mu1wv.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2))\n     (even? (car nums))]\n    [else\n     (even_position (cdr nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp29u8tf0s.rkt:17:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp29u8tf0s.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp29u8tf0s.rkt:19:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (for/and ([(n i) (in-indexed nums)])\n    (even? i)\n    (even? n)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpghcyum94.rkt:16:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even-index? nums)\n    (cond\n      [(empty? nums) empty]\n      [(even? (first nums)) (cons (first nums) (even-index? (rest nums)))]\n      [else (even-index? (rest nums))]))\n  (define (even-num? nums)\n    (cond\n      [(empty? nums) empty]\n      [(even? (first nums)) (cons (first nums) (even-num? (rest nums)))]\n      [else (even-num? (rest nums))]))\n  (equal? (even-index? nums) (even-num? nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp61vejkov.rkt:22:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp61vejkov.rkt:23:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even_position_iter nums i)\n    (if (null? nums)\n        #t\n        (if (= (modulo i 2) 0)\n            (if (even? (car nums))\n                (even_position_iter (cdr nums) (+ i 1))\n                #f)\n            (even_position_iter (cdr nums) (+ i 1)))))\n  (even_position_iter nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even_position_iter nums i)\n    (cond\n      [(empty? nums) true]\n      [(even? i) (and (even? (first nums)) (even_position_iter (rest nums) (+ i 1)))]\n      [else (even_position_iter (rest nums) (+ i 1))]))\n  (even_position_iter nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2)) (even? (first nums))]\n    [else (even_position (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv97a_cl5.rkt:15:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv97a_cl5.rkt:16:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv97a_cl5.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (helper nums i)\n    (if (null? nums)\n        #t\n        (if (= (remainder i 2) 0)\n            (if (even? (car nums))\n                (helper (cdr nums) (+ i 1))\n                #f)\n            (helper (cdr nums) (+ i 1)))))\n  (helper nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2))\n     (and (even? (first nums))\n          (even_position (rest nums)))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdww5hqj8.rkt:19:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (cond\n    [(empty? nums) true]\n    [(even? (remainder (length nums) 2)) (even? (car nums))]\n    [else (even_position (cdr nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpusssiepr.rkt:15:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpusssiepr.rkt:16:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpusssiepr.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (if (null? nums)\n      true\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          false)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7or49t38.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvx6mu1wv.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvx6mu1wv.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2)) (even? (car nums))]\n    [else (even_position (cdr nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4r98qebt.rkt:15:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4r98qebt.rkt:16:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4r98qebt.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvx6mu1wv.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (let loop ((nums nums)\n             (i 0))\n    (cond ((null? nums) #t)\n          ((= (remainder i 2) 0)\n           (and (even? (car nums))\n                (loop (cdr nums) (+ i 1))))\n          (else (loop (cdr nums) (+ i 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2)) (even? (car nums))]\n    [else (even_position (cdr nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4r98qebt.rkt:15:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4r98qebt.rkt:16:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4r98qebt.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (cond\n    [(empty? nums) true]\n    [(even? (remainder (length nums) 2))\n     (and (even? (first nums)) (even_position (rest nums)))]\n    [else (even_position (rest nums))]))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "/tmp/tmp51do2a4e.rkt:10:0: </code>: unbound identifier\n  in: </code>\n  location...:\n   /tmp/tmp51do2a4e.rkt:10:0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (cond\n    [(empty? nums) empty]\n    [else\n     (cons (first nums) (even_position (rest nums)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw5r3tp15.rkt:15:4\nactual:     '(3 2 1)\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw5r3tp15.rkt:16:4\nactual:     '(1 2 3)\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw5r3tp15.rkt:17:4\nactual:     '(2 1 4)\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (let loop ([nums nums] [i 0])\n    (if (null? nums)\n        #t\n        (if (and (even? i) (even? (car nums)))\n            (loop (cdr nums) (+ i 1))\n            #f))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgdve0z6h.rkt:19:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even_position_iter nums i)\n    (cond\n      [(empty? nums) true]\n      [(even? i) (and (even? (first nums)) (even_position_iter (rest nums) (+ i 1)))]\n      [else (even_position_iter (rest nums) (+ i 1))]))\n  (even_position_iter nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvx6mu1wv.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2)) #f]\n    [else (even_position (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprlh8voi6.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (helper nums i)\n    (cond\n      [(empty? nums) #t]\n      [(even? i) (and (even? (first nums)) (helper (rest nums) (+ i 1)))]\n      [else (helper (rest nums) (+ i 1))]))\n  (helper nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (if (empty? nums)\n      true\n      (if (even? (remainder (length nums) 2))\n          (even? (first nums))\n          (even_position (rest nums)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp0lpa5ig.rkt:16:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp0lpa5ig.rkt:17:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp0lpa5ig.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2)) #f]\n    [else (even_position (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprlh8voi6.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even_position_iter nums pos)\n    (if (null? nums)\n        #t\n        (if (even? pos)\n            (if (even? (car nums))\n                (even_position_iter (cdr nums) (+ pos 1))\n                #f)\n            (even_position_iter (cdr nums) (+ pos 1)))))\n  (even_position_iter nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (cond\n    [(empty? nums) #t]\n    [(even? (remainder (length nums) 2)) (even? (car nums))]\n    [else (even_position (cdr nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4r98qebt.rkt:15:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4r98qebt.rkt:16:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4r98qebt.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (if (empty? nums)\n      #t\n      (if (even? (first nums))\n          (even_position (rest nums))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpczqii57t.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (let loop ([nums nums] [i 0])\n    (if (null? nums)\n        #t\n        (if (and (even? i) (even? (car nums)))\n            (loop (cdr nums) (+ i 1))\n            #f))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgdve0z6h.rkt:19:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even_position-helper nums i)\n    (if (empty? nums)\n        #t\n        (if (= (remainder i 2) 0)\n            (if (even? (first nums))\n                (even_position-helper (rest nums) (+ i 1))\n                #f)\n            (even_position-helper (rest nums) (+ i 1)))))\n  (even_position-helper nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n  (define (even? n) (= (remainder n 2) 0))\n  (define (even-position? nums)\n    (cond\n      [(null? nums) #t]\n      [(even? (car nums)) (even-position? (cdr nums))]\n      [else #f]))\n  (even-position? (cdr nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_f90bjpl.rkt:20:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    }
  ]
}