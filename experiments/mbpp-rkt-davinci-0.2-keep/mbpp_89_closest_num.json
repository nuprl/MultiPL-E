{
  "name": "mbpp_89_closest_num",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the closest smaller number than n.\n(define (closest_num N)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_89_closest_num.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_num))\n    (check-equal? (candidate 11) 10)\n    (check-equal? (candidate 7) 6)\n    (check-equal? (candidate 12) 11)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (closest_num_iter N i)\n    (if (= N i)\n        (error \"No smaller number\")\n        (if (prime? i)\n            (if (prime? (- N i))\n                i\n                (closest_num_iter N (- i 1)))\n            (closest_num_iter N (- i 1)))))\n  (closest_num_iter N (- N 1)))\n",
    "  (define (closest_num_iter N i)\n    (if (and (integer? (/ N i)) (integer? (/ N (+ i 1))))\n        i\n        (closest_num_iter N (+ i 1))))\n  (closest_num_iter N 1))\n",
    "  (define (closest_num_iter N i)\n    (cond\n      [(= N i) N]\n      [(< N i) (closest_num_iter N (- i 1))]\n      [else i]))\n  (closest_num_iter N N))\n",
    "  (define (closest_num_iter N i)\n    (if (and (not (zero? (remainder N i)))\n             (not (zero? (remainder (sub1 N) i))))\n        (closest_num_iter N (add1 i))\n        i))\n  (closest_num_iter N 2))\n",
    "  (define (closest_num_iter N i)\n    (if (and (not (zero? (remainder N i)))\n             (not (zero? (remainder (+ N 1) i))))\n        (closest_num_iter N (+ i 1))\n        i))\n  (closest_num_iter N 2))\n",
    "  (let loop ([n N])\n    (if (zero? n)\n        0\n        (if (zero? (remainder n 2))\n            (loop (quotient n 2))\n            (loop (sub1 n))))))\n",
    "  (define (closest_num_iter N i)\n    (if (and (not (zero? i))\n             (not (zero? (modulo N i))))\n        (closest_num_iter N (- i 1))\n      i))\n  (closest_num_iter N N))\n",
    "  (cond\n    [(= N 0) 0]\n    [(= N 1) 0]\n    [(= N 2) 1]\n    [(= N 3) 2]\n    [(= N 4) 3]\n    [(= N 5) 4]\n    [(= N 6) 5]\n    [(= N 7) 6]\n    [(= N 8) 7]\n    [(= N 9) 8]\n    [(= N 10) 9]\n    [(= N 11) 10]\n    [(= N 12) 11]\n    [(= N 13) 12]\n    [(= N 14) 13]\n    [(= N 15) 14]\n    [(= N 16) 15]\n    [(= N 17) 16]\n    [(= N 18) 17]\n    [(= N 19) 18]\n    [(= N 20) 19]\n    [(= N 21) 20]\n    [(= N 22) 21]\n    [(= N 23) 22]\n    [(= N 24) 23]\n    [(= N 25) 24]\n    [(= N 26) 25]\n    [(= N 27) 26]\n    [(= N 28) 27]\n    [(= N 29) 28]\n    [(= N 30) 29]\n    [(= N 31) 30]\n    [(= N 32) 31]\n    [(= N 33) 32]\n    [(= N 34) 33]\n    [(= N 35) 34]\n    [(= N 36) 35]\n    [(= N 37) 36]\n    [(= N 38) 37]\n    [(= N 39) 38]\n    [(= N 40) 39]\n    [(= N 41) 40]\n    [(= N 42) 41]\n    [(= N 43) 42]\n    [(= N 44) 43]\n    [(= N 45) 44]\n    [(= N 46) 45]\n    [(= N 47) 46]\n    [(= N 48) 47]\n    [(= N 49) 48]\n    [(= N 50) 49]\n    [(= N 51) 50]\n    [(= N 52) 51]\n    [(= N 53) 52]\n    [(= N 54) 53]\n    [(= N 55) 54]\n    [(=",
    "  (define (closest_num_iter N i)\n    (if (and (integer? (/ N i)) (integer? (/ N (+ i 1))))\n        i\n        (closest_num_iter N (+ i 1))))\n  (closest_num_iter N 1))\n",
    "  (cond\n    [(= N 0) 0]\n    [(= N 1) 0]\n    [(= N 2) 1]\n    [(= N 3) 2]\n    [(= N 4) 3]\n    [(= N 5) 4]\n    [(= N 6) 5]\n    [(= N 7) 6]\n    [(= N 8) 7]\n    [(= N 9) 8]\n    [(= N 10) 9]\n    [(= N 11) 10]\n    [(= N 12) 11]\n    [(= N 13) 12]\n    [(= N 14) 13]\n    [(= N 15) 14]\n    [(= N 16) 15]\n    [(= N 17) 16]\n    [(= N 18) 17]\n    [(= N 19) 18]\n    [(= N 20) 19]\n    [(= N 21) 20]\n    [(= N 22) 21]\n    [(= N 23) 22]\n    [(= N 24) 23]\n    [(= N 25) 24]\n    [(= N 26) 25]\n    [(= N 27) 26]\n    [(= N 28) 27]\n    [(= N 29) 28]\n    [(= N 30) 29]\n    [(= N 31) 30]\n    [(= N 32) 31]\n    [(= N 33) 32]\n    [(= N 34) 33]\n    [(= N 35) 34]\n    [(= N 36) 35]\n    [(= N 37) 36]\n    [(= N 38) 37]\n    [(= N 39) 38]\n    [(= N 40) 39]\n    [(= N 41) 40]\n    [(= N 42) 41]\n    [(= N 43) 42]\n    [(= N 44) 43]\n    [(= N 45) 44]\n    [(= N 46) 45]\n    [(= N 47) 46]\n    [(= N 48) 47]\n    [(= N 49) 48]\n    [(= N 50) 49]\n    [(= N 51) 50]\n    [(= N 52) 51]\n    [(= N 53) 52]\n    [(= N 54) 53]\n    [(= N 55) 54]\n    [(=",
    "  (define (closest_num_iter N i)\n    (if (and (integer? (/ N i)) (integer? (/ N (+ i 1))))\n        i\n        (closest_num_iter N (+ i 1))))\n  (closest_num_iter N 1))\n",
    "  (define (closest_num_iter N i)\n    (if (and (integer? (/ N i)) (integer? (/ N (+ i 1))))\n        i\n        (closest_num_iter N (+ i 1))))\n  (closest_num_iter N 1))\n",
    "  (let loop ([n N] [i 0])\n    (if (and (not (zero? n)) (not (zero? (remainder n 2))))\n        (loop (quotient n 2) (+ i 1))\n        i)))\n",
    "  (let loop ((n N) (i 1))\n    (cond\n      ((= n i) (error \"No smaller number\"))\n      ((< n i) (- i 1))\n      (else (loop n (+ i 1))))))\n",
    "  (let loop ([n N])\n    (if (zero? n)\n        0\n        (if (zero? (remainder n 2))\n            (loop (quotient n 2))\n            (sub1 n)))))\n",
    "  (define (closest_num_iter N acc)\n    (if (zero? N)\n        acc\n        (closest_num_iter (sub1 N) (add1 acc))))\n  (closest_num_iter N 0))\n",
    "  (define (closest_num_iter N i)\n    (cond\n      [(= N i) N]\n      [(< N i) (closest_num_iter N (- i 1))]\n      [else i]))\n  (closest_num_iter N N))\n",
    "  (define (closest_num_iter N i)\n    (cond\n      [(= i 0) 0]\n      [(< (remainder N i) (remainder N (- i 1))) i]\n      [else (closest_num_iter N (- i 1))]))\n  (closest_num_iter N N))\n",
    "  (define (closest_num_iter N i)\n    (if (and (integer? (/ N i)) (integer? (/ N (+ i 1))))\n        i\n        (closest_num_iter N (+ i 1))))\n  (closest_num_iter N 1))\n",
    "  (let loop ([n N])\n    (if (zero? n)\n        0\n        (if (zero? (remainder n 2))\n            (loop (quotient n 2))\n            (loop (sub1 n))))))\n",
    "  (define (closest_num_iter N i)\n    (if (and (integer? (/ N i)) (integer? (/ N (+ i 1))))\n        i\n        (closest_num_iter N (+ i 1))))\n  (closest_num_iter N 1))\n",
    "  (let loop ([n N])\n    (if (zero? n)\n        0\n        (if (zero? (remainder N n))\n            n\n            (loop (sub1 n))))))\n",
    "  (let loop ([i N])\n    (if (zero? i)\n        0\n        (if (positive? (remainder N i))\n            (loop (- i 1))\n            i))))\n",
    "  (let loop ([N N] [i 0])\n    (if (= N 0)\n        i\n        (loop (quotient N 2) (+ i 1)))))\n",
    "  (define (closest_num_iter N i)\n    (if (and (integer? (/ N i)) (integer? (/ N (+ i 1))))\n        i\n        (closest_num_iter N (+ i 1))))\n  (closest_num_iter N 1))\n",
    "  (define (closest_num_iter N acc)\n    (if (zero? N)\n        acc\n        (closest_num_iter (sub1 N) (add1 acc))))\n  (closest_num_iter N 0))\n",
    "  (define (iter n i)\n    (if (= n i)\n        (error \"No smaller number found\")\n        (if (integer? (/ n i))\n            i\n            (iter n (+ i 1)))))\n  (iter N 2))\n",
    "  (let loop ([i 0])\n    (if (= i N)\n        N\n        (if (zero? (remainder N i))\n            i\n            (loop (+ i 1))))))\n",
    "  (if (zero? N)\n      0\n      (if (zero? (remainder N 2))\n          (closest_num (- N 1))\n          (closest_num (/ N 2)))))\n",
    "  (define (closest_num_iter N i)\n    (if (and (not (zero? N)) (not (zero? i)))\n        (if (and (not (zero? (remainder N i))) (not (zero? (remainder (- N 1) i))))\n            (closest_num_iter N (- i 1))\n            (- N 1))\n        N))\n  (closest_num_iter N N))\n",
    "  (let loop ([n N])\n    (if (zero? n)\n        0\n        (if (positive? (remainder N n))\n            (loop (- n 1))\n            n))))\n",
    "  (define (closest_num_iter N i)\n    (cond\n      [(= N i) N]\n      [(< N i) (closest_num_iter N (- i 1))]\n      [else i]))\n  (closest_num_iter N N))\n",
    "  (define (closest_num_iter N i)\n    (if (and (not (zero? (remainder N i)))\n             (not (zero? (remainder (sub1 N) i))))\n        (closest_num_iter N (add1 i))\n        (sub1 N)))\n  (closest_num_iter N 2))\n",
    "  (define (closest_num_iter N i)\n    (if (and (not (= N i))\n             (not (integer? (/ N i))))\n        (closest_num_iter N (+ i 1))\n        i))\n  (closest_num_iter N 1))\n",
    "  (let loop ([n N] [i 0])\n    (if (zero? n)\n        i\n        (loop (quotient n 2) (+ i 1)))))\n",
    "  (define (closest_num_iter N i)\n    (if (and (not (zero? (remainder N i)))\n             (not (zero? (remainder (sub1 N) i))))\n        (closest_num_iter N (add1 i))\n        (sub1 N)))\n  (closest_num_iter N 2))\n",
    "  (define (closest_num_iter N i)\n    (if (= N i)\n        N\n        (if (and (integer? (/ N i)) (integer? (/ N (+ i 1))))\n            (closest_num_iter N (+ i 1))\n            i)))\n  (closest_num_iter N 2))\n",
    "  (define (closest_num_iter N i)\n    (if (and (not (zero? N)) (not (zero? i)))\n        (if (and (not (zero? (remainder N i))) (not (zero? (remainder (sub1 N) i))))\n            (closest_num_iter N (sub1 i))\n            i)\n        0))\n  (closest_num_iter N (sub1 N)))\n",
    "  (cond\n    [(= N 0) 0]\n    [(= N 1) 0]\n    [(= N 2) 1]\n    [(= N 3) 2]\n    [(= N 4) 3]\n    [(= N 5) 4]\n    [(= N 6) 5]\n    [(= N 7) 6]\n    [(= N 8) 7]\n    [(= N 9) 8]\n    [(= N 10) 9]\n    [(= N 11) 10]\n    [(= N 12) 11]\n    [(= N 13) 12]\n    [(= N 14) 13]\n    [(= N 15) 14]\n    [(= N 16) 15]\n    [(= N 17) 16]\n    [(= N 18) 17]\n    [(= N 19) 18]\n    [(= N 20) 19]\n    [(= N 21) 20]\n    [(= N 22) 21]\n    [(= N 23) 22]\n    [(= N 24) 23]\n    [(= N 25) 24]\n    [(= N 26) 25]\n    [(= N 27) 26]\n    [(= N 28) 27]\n    [(= N 29) 28]\n    [(= N 30) 29]\n    [(= N 31) 30]\n    [(= N 32) 31]\n    [(= N 33) 32]\n    [(= N 34) 33]\n    [(= N 35) 34]\n    [(= N 36) 35]\n    [(= N 37) 36]\n    [(= N 38) 37]\n    [(= N 39) 38]\n    [(= N 40) 39]\n    [(= N 41) 40]\n    [(= N 42) 41]\n    [(= N 43) 42]\n    [(= N 44) 43]\n    [(= N 45) 44]\n    [(= N 46) 45]\n    [(= N 47) 46]\n    [(= N 48) 47]\n    [(= N 49) 48]\n    [(= N 50) 49]\n    [(= N 51) 50]\n    [(= N 52) 51]\n    [(= N 53) 52]\n    [(= N 54) 53]\n    [(= N 55) 54]\n    [(=",
    "  (let loop ([n N])\n    (if (zero? n)\n        0\n        (if (zero? (remainder n 2))\n            (loop (quotient n 2))\n            (sub1 n)))))\n",
    "  (let loop ((n N) (i 0))\n    (if (zero? n)\n        i\n        (loop (quotient n 2) (+ i 1)))))\n",
    "  (define (closest_num_iter N i)\n    (if (and (integer? (/ N i)) (integer? (/ N (+ i 1))))\n        i\n        (closest_num_iter N (+ i 1))))\n  (closest_num_iter N 1))\n",
    "  (define (closest_num_iter N i)\n    (if (= N i)\n        (error \"No smaller number\")\n        (if (prime? i)\n            i\n            (closest_num_iter N (- i 1)))))\n  (closest_num_iter N (- N 1)))\n",
    "  (if (= N 0)\n      0\n      (if (= (remainder N 2) 0)\n          (closest_num (- N 1))\n          (- N 1))))\n",
    "  (define (closest_num_iter N i)\n    (if (not (integer? (/ N i)))\n        (closest_num_iter N (+ i 1))\n        i))\n  (closest_num_iter N 2))\n",
    "  (define (closest_num_iter N i)\n    (cond\n      [(= N i) N]\n      [(< N i) (closest_num_iter N (- i 1))]\n      [else i]))\n  (closest_num_iter N N))\n",
    "  (define (closest_num_iter N acc)\n    (if (zero? N)\n        acc\n        (closest_num_iter (quotient N 2) (if (odd? N) (+ acc 1) acc))))\n  (closest_num_iter N 0))\n",
    "  (let loop ([i (sub1 N)] [j N])\n    (if (and (positive? i) (positive? j))\n        (if (and (integer? (/ i j)) (integer? (/ j i)))\n            (loop (sub1 i) (add1 j))\n            (loop (sub1 i) j))\n        (if (and (positive? i) (integer? (/ i j)))\n            i\n            j))))\n",
    "  (define (closest_num_iter N i)\n    (if (= N i)\n        (error \"No smaller number\")\n        (if (prime? i)\n            (if (prime? (- N i))\n                i\n                (closest_num_iter N (- i 1)))\n            (closest_num_iter N (- i 1)))))\n  (closest_num_iter N (- N 1)))\n",
    "  (define (helper N)\n    (if (= N 0)\n        0\n        (if (= (remainder N 2) 0)\n            (helper (/ N 2))\n            (helper (- N 1)))))\n  (helper N))\n",
    "  (define (closest_num_iter N i)\n    (if (and (integer? (/ N i)) (integer? (/ N (+ i 1))))\n        i\n        (closest_num_iter N (+ i 1))))\n  (closest_num_iter N 1))\n",
    "  (define (closest_num_iter N i)\n    (if (and (integer? (/ N i)) (integer? (/ N (+ i 1))))\n        (/ N (+ i 1))\n        (closest_num_iter N (+ i 1))))\n  (closest_num_iter N 1))\n",
    "  (let ([n (integer->char N)])\n    (cond [(char=? n #\\0) #\\0]\n          [(char=? n #\\1) #\\0]\n          [(char=? n #\\2) #\\1]\n          [(char=? n #\\3) #\\2]\n          [(char=? n #\\4) #\\3]\n          [(char=? n #\\5) #\\4]\n          [(char=? n #\\6) #\\5]\n          [(char=? n #\\7) #\\6]\n          [(char=? n #\\8) #\\7]\n          [(char=? n #\\9) #\\8]\n          [(char=? n #\\a) #\\9]\n          [(char=? n #\\b) #\\a]\n          [(char=? n #\\c) #\\b]\n          [(char=? n #\\d) #\\c]\n          [(char=? n #\\e) #\\d]\n          [(char=? n #\\f) #\\e]\n          [(char=? n #\\g) #\\f]\n          [(char=? n #\\h) #\\g]\n          [(char=? n #\\i) #\\h]\n          [(char=? n #\\j) #\\i]\n          [(char=? n #\\k) #\\j]\n          [(char=? n #\\l) #\\k]\n          [(char=? n #\\m) #\\l]\n          [(char=? n #\\n) #\\m]\n          [(char=? n #\\o) #\\n]\n          [(char=? n #\\p) #\\o]\n          [(char=? n #\\q) #\\p]\n          [(char=? n #\\r) #\\q]\n          [(char=? n #\\s) #\\r]\n          [(char=? n #\\t) #\\s]\n          [(char=? n #\\u) #\\t]\n          [(char=? n #\\v) #\\u]\n          [(char=? n #\\w) #\\v]\n         ",
    "  (define (closest_num_iter N i)\n    (cond\n      [(= N i) N]\n      [(= N (+ i 1)) i]\n      [else (closest_num_iter N (+ i 1))]))\n  (closest_num_iter N 0))\n",
    "  (let ([N (exact->inexact N)])\n    (if (zero? N)\n        0\n        (let ([N (floor N)])\n          (if (zero? N)\n              0\n              (let ([N (exact->inexact N)])\n                (if (zero? (modulo N 2))\n                    (exact->inexact (floor (/ N 2)))\n                    (exact->inexact (floor (/ (- N 1) 2)))))))))\n",
    "  (define (closest_num_iter N i)\n    (if (and (integer? (/ N i)) (integer? (/ N (+ i 1))))\n        i\n        (closest_num_iter N (+ i 1))))\n  (closest_num_iter N 1))\n",
    "  (define (closest_num_iter N i)\n    (if (and (integer? (/ N i)) (integer? (/ N (+ i 1))))\n        i\n        (closest_num_iter N (+ i 1))))\n  (closest_num_iter N 1))\n",
    "  (define (closest_num_iter N i)\n    (if (= N i)\n        (error \"No smaller number\")\n        (if (= (remainder N i) 0)\n            i\n            (closest_num_iter N (+ i 1)))))\n  (closest_num_iter N 2))\n",
    "  (if (= N 0)\n      0\n      (if (= (remainder N 2) 0)\n          (closest_num (- N 1))\n          N)))\n",
    "  (define (closest_num_iter N i)\n    (if (and (not (zero? N))\n             (not (zero? i)))\n        (if (and (not (zero? (modulo N i)))\n                 (not (zero? (modulo (sub1 N) i))))\n            (closest_num_iter N (sub1 i))\n            (sub1 N))\n        N))\n  (closest_num_iter N (sub1 N)))\n",
    "  (define (closest_num_iter N i)\n    (if (not (integer? (/ N i)))\n        (closest_num_iter N (+ i 1))\n        i))\n  (closest_num_iter N 2))\n",
    "  (define (closest_num_iter N i)\n    (if (and (not (zero? (remainder N i)))\n             (zero? (remainder (+ N 1) i)))\n        i\n        (closest_num_iter N (+ i 1))))\n  (closest_num_iter N 2))\n",
    "  (define (closest_num_iter N i)\n    (if (and (integer? (/ N i)) (integer? (/ N (+ i 1))))\n        i\n        (closest_num_iter N (+ i 1))))\n  (closest_num_iter N 1))\n",
    "  (define (closest_num_iter N n)\n    (if (= N n)\n        n\n        (if (= (remainder N n) 0)\n            (closest_num_iter N (- n 1))\n            n)))\n  (closest_num_iter N (- N 1)))\n",
    "  (define (closest_num_iter N i)\n    (cond\n      [(= N i) N]\n      [(= N (+ i 1)) i]\n      [else (closest_num_iter N (+ i 1))]))\n  (closest_num_iter N 0))\n",
    "  (let loop ([n N] [i 0])\n    (if (zero? n)\n        i\n        (loop (quotient n 2) (+ i 1)))))\n",
    "  (define (helper N)\n    (if (zero? N)\n        0\n        (if (zero? (remainder N 2))\n            (helper (quotient N 2))\n            (helper (sub1 N)))))\n  (helper N))\n",
    "  (define (closest_num_iter N i)\n    (cond [(= N i) N]\n          [(= N (+ i 1)) i]\n          [else (closest_num_iter N (+ i 1))]))\n  (closest_num_iter N 0))\n",
    "  (let loop ([n N] [i 0])\n    (cond [(= n 0) i]\n          [(= (modulo n 2) 0) (loop (quotient n 2) (+ i 1))]\n          [else (loop (sub1 n) (+ i 1))])))\n",
    "  (cond\n    [(= N 0) 0]\n    [(= N 1) 0]\n    [(= N 2) 1]\n    [(= N 3) 2]\n    [(= N 4) 3]\n    [(= N 5) 4]\n    [(= N 6) 5]\n    [(= N 7) 6]\n    [(= N 8) 7]\n    [(= N 9) 8]\n    [(= N 10) 9]\n    [(= N 11) 10]\n    [(= N 12) 11]\n    [(= N 13) 12]\n    [(= N 14) 13]\n    [(= N 15) 14]\n    [(= N 16) 15]\n    [(= N 17) 16]\n    [(= N 18) 17]\n    [(= N 19) 18]\n    [(= N 20) 19]\n    [(= N 21) 20]\n    [(= N 22) 21]\n    [(= N 23) 22]\n    [(= N 24) 23]\n    [(= N 25) 24]\n    [(= N 26) 25]\n    [(= N 27) 26]\n    [(= N 28) 27]\n    [(= N 29) 28]\n    [(= N 30) 29]\n    [(= N 31) 30]\n    [(= N 32) 31]\n    [(= N 33) 32]\n    [(= N 34) 33]\n    [(= N 35) 34]\n    [(= N 36) 35]\n    [(= N 37) 36]\n    [(= N 38) 37]\n    [(= N 39) 38]\n    [(= N 40) 39]\n    [(= N 41) 40]\n    [(= N 42) 41]\n    [(= N 43) 42]\n    [(= N 44) 43]\n    [(= N 45) 44]\n    [(= N 46) 45]\n    [(= N 47) 46]\n    [(= N 48) 47]\n    [(= N 49) 48]\n    [(= N 50) 49]\n    [(= N 51) 50]\n    [(= N 52) 51]\n    [(= N 53) 52]\n    [(= N 54) 53]\n    [(= N 55) 54]\n    [(=",
    "  (define (closest_num_iter N acc)\n    (if (zero? N)\n        acc\n        (closest_num_iter (quotient N 2)\n                          (if (odd? N)\n                              (quotient N 2)\n                              acc))))\n  (closest_num_iter N 0))\n",
    "  (define (closest_num_iter N i)\n    (cond\n      [(= N i) N]\n      [(< N i) (closest_num_iter N (- i 1))]\n      [(> N i) i]))\n  (closest_num_iter N N))\n",
    "  (let loop ([i N])\n    (if (not (integer? i))\n        (error \"not an integer\")\n        (if (integer? (- i 1))\n            (- i 1)\n            (loop (- i 1))))))\n",
    "  (let loop ((n N) (i 0))\n    (if (zero? n)\n        i\n        (loop (quotient n 2) (+ i 1)))))\n",
    "  (define (closest_num_iter N i)\n    (cond\n      [(= N i) N]\n      [(< N i) (closest_num_iter N (- i 1))]\n      [else i]))\n  (closest_num_iter N N))\n",
    "  (define (closest_num_iter n i)\n    (if (and (not (= n i))\n             (not (integer? (/ n i))))\n        (closest_num_iter n (+ i 1))\n        i))\n  (closest_num_iter N 2))\n",
    "  (define (closest_num_iter N i)\n    (cond ((= N i) N)\n          ((< N i) (- i 1))\n          (else (closest_num_iter N (+ i 1)))))\n  (closest_num_iter N 1))\n",
    "  (let loop ([n N])\n    (cond [(zero? n) N]\n          [(zero? (remainder N n)) n]\n          [else (loop (- n 1))])))\n",
    "  (let loop ([n N])\n    (if (= n 0)\n        0\n        (if (integer? (/ n 2))\n            (/ n 2)\n            (loop (- n 1))))))\n",
    "  (define (closest_num_iter N n)\n    (if (= N n)\n        n\n        (if (= (remainder N n) 0)\n            (closest_num_iter N (- n 1))\n            n)))\n  (closest_num_iter N N))\n",
    "  (define (closest-num-iter n i)\n    (if (= n i)\n        (closest-num-iter n (- i 1))\n      (if (= (modulo n i) 0)\n          i\n          (closest-num-iter n (- i 1)))))\n  (closest-num-iter N N))\n",
    "  (if (= N 0)\n      0\n      (if (= (remainder N 2) 0)\n          (closest_num (- N 1))\n          (- N 1))))\n",
    "  (define (closest-num-iter N i)\n    (cond ((= i 0) 0)\n          ((= (remainder N i) 0) i)\n          (else (closest-num-iter N (- i 1)))))\n  (closest-num-iter N N))\n",
    "  (define (closest_num_iter N n)\n    (if (zero? n)\n        N\n        (if (zero? (modulo N n))\n            (closest_num_iter N (- n 1))\n            N)))\n  (closest_num_iter N (- N 1)))\n",
    "  (define (closest_num_iter N i)\n    (if (and (integer? (/ N i)) (integer? (/ N (+ i 1))))\n        i\n        (closest_num_iter N (+ i 1))))\n  (closest_num_iter N 1))\n",
    "  (define (closest_num_iter N i)\n    (if (and (not (zero? i))\n             (not (zero? (modulo N i))))\n        (closest_num_iter N (- i 1))\n      i))\n  (closest_num_iter N (quotient N 2)))\n",
    "  (define (closest_num_iter N i)\n    (if (zero? (remainder N i))\n        i\n        (closest_num_iter N (- i 1))))\n  (closest_num_iter N N))\n",
    "  (define (helper N i)\n    (if (= N i)\n        (error \"No smaller number\")\n        (if (prime? i)\n            i\n            (helper N (- i 1)))))\n  (helper N (- N 1)))\n",
    "  (let loop ([n N])\n    (if (zero? n)\n        0\n        (if (positive? (remainder n 2))\n            (loop (sub1 n))\n            (loop (sub1 n))\n            )\n        )\n    )\n  )\n",
    "  (define (closest_num_iter N i)\n    (if (and (not (zero? N)) (not (zero? i)))\n        (if (= (remainder N i) 0)\n            (closest_num_iter N (- i 1))\n            (closest_num_iter N (- i 1)))\n        i))\n  (closest_num_iter N (- N 1)))\n",
    "  (define (closest_num_iter N i)\n    (cond ((= (remainder N i) 0) i)\n          ((&lt; i N) (closest_num_iter N (+ i 1)))\n          (else (closest_num_iter N (- i 1)))))\n  (closest_num_iter N 1))\n",
    "  (define (closest_num_iter N i)\n    (cond\n      [(= i N) N]\n      [(= (modulo N i) 0) i]\n      [else (closest_num_iter N (+ i 1))]))\n  (closest_num_iter N 1))\n",
    "  (cond\n    [(= N 0) 0]\n    [(= N 1) 0]\n    [(= N 2) 1]\n    [(= N 3) 2]\n    [(= N 4) 3]\n    [(= N 5) 4]\n    [(= N 6) 5]\n    [(= N 7) 6]\n    [(= N 8) 7]\n    [(= N 9) 8]\n    [(= N 10) 9]\n    [(= N 11) 10]\n    [(= N 12) 11]\n    [(= N 13) 12]\n    [(= N 14) 13]\n    [(= N 15) 14]\n    [(= N 16) 15]\n    [(= N 17) 16]\n    [(= N 18) 17]\n    [(= N 19) 18]\n    [(= N 20) 19]\n    [(= N 21) 20]\n    [(= N 22) 21]\n    [(= N 23) 22]\n    [(= N 24) 23]\n    [(= N 25) 24]\n    [(= N 26) 25]\n    [(= N 27) 26]\n    [(= N 28) 27]\n    [(= N 29) 28]\n    [(= N 30) 29]\n    [(= N 31) 30]\n    [(= N 32) 31]\n    [(= N 33) 32]\n    [(= N 34) 33]\n    [(= N 35) 34]\n    [(= N 36) 35]\n    [(= N 37) 36]\n    [(= N 38) 37]\n    [(= N 39) 38]\n    [(= N 40) 39]\n    [(= N 41) 40]\n    [(= N 42) 41]\n    [(= N 43) 42]\n    [(= N 44) 43]\n    [(= N 45) 44]\n    [(= N 46) 45]\n    [(= N 47) 46]\n    [(= N 48) 47]\n    [(= N 49) 48]\n    [(= N 50) 49]\n    [(= N 51) 50]\n    [(= N 52) 51]\n    [(= N 53) 52]\n    [(= N 54) 53]\n    [(= N 55) 54]\n    [(=",
    "  (define (closest_num-iter N i)\n    (if (and (not (zero? i))\n             (not (zero? (modulo N i))))\n        (closest_num-iter N (- i 1))\n      i))\n  (closest_num-iter N N))\n",
    "  (define (closest_num_iter N i)\n    (if (not (integer? (/ N i)))\n        (closest_num_iter N (+ i 1))\n        i))\n  (closest_num_iter N 2))\n",
    "  (define (closest_num_iter N i)\n    (if (= N i)\n        N\n        (if (and (not (zero? (remainder N i)))\n                 (not (zero? (remainder (sub1 N) i))))\n            (closest_num_iter N (add1 i))\n            i)))\n  (closest_num_iter N 2))\n",
    "  (define (closest_num_iter N i)\n    (if (and (not (zero? (modulo N i)))\n             (not (zero? (modulo (sub1 N) i))))\n        (closest_num_iter N (add1 i))\n        (sub1 N)))\n  (closest_num_iter N 2))\n",
    "  (define (closest_num_iter n i)\n    (if (and (integer? (/ n i)) (integer? (/ i n)))\n        i\n        (closest_num_iter n (+ i 1))))\n  (closest_num_iter N 2))\n",
    "  (define (closest_num_iter N i)\n    (cond [(= i 0) 0]\n          [(= (remainder N i) 0) i]\n          [else (closest_num_iter N (- i 1))]))\n  (closest_num_iter N N))\n",
    "  (cond\n    [(= N 0) 0]\n    [(= N 1) 0]\n    [(= N 2) 1]\n    [(= N 3) 2]\n    [(= N 4) 3]\n    [(= N 5) 4]\n    [(= N 6) 5]\n    [(= N 7) 6]\n    [(= N 8) 7]\n    [(= N 9) 8]\n    [(= N 10) 9]\n    [(= N 11) 10]\n    [(= N 12) 11]\n    [(= N 13) 12]\n    [(= N 14) 13]\n    [(= N 15) 14]\n    [(= N 16) 15]\n    [(= N 17) 16]\n    [(= N 18) 17]\n    [(= N 19) 18]\n    [(= N 20) 19]\n    [(= N 21) 20]\n    [(= N 22) 21]\n    [(= N 23) 22]\n    [(= N 24) 23]\n    [(= N 25) 24]\n    [(= N 26) 25]\n    [(= N 27) 26]\n    [(= N 28) 27]\n    [(= N 29) 28]\n    [(= N 30) 29]\n    [(= N 31) 30]\n    [(= N 32) 31]\n    [(= N 33) 32]\n    [(= N 34) 33]\n    [(= N 35) 34]\n    [(= N 36) 35]\n    [(= N 37) 36]\n    [(= N 38) 37]\n    [(= N 39) 38]\n    [(= N 40) 39]\n    [(= N 41) 40]\n    [(= N 42) 41]\n    [(= N 43) 42]\n    [(= N 44) 43]\n    [(= N 45) 44]\n    [(= N 46) 45]\n    [(= N 47) 46]\n    [(= N 48) 47]\n    [(= N 49) 48]\n    [(= N 50) 49]\n    [(= N 51) 50]\n    [(= N 52) 51]\n    [(= N 53) 52]\n    [(= N 54) 53]\n    [(= N 55) 54]\n    [(=",
    "  (define (closest_num_iter N i)\n    (if (and (integer? (/ N i)) (integer? (/ N (+ i 1))))\n        (closest_num_iter N (+ i 1))\n        i))\n  (closest_num_iter N 1))\n",
    "  (define (closest_num_iter N i)\n    (cond\n      [(= i 0) 0]\n      [(= (remainder N i) 0) i]\n      [else (closest_num_iter N (- i 1))]))\n  (closest_num_iter N N))\n",
    "  (define (closest_num_iter N i)\n    (if (= N i)\n        (error \"No smaller number\")\n        (if (prime? i)\n            (if (prime? (- N i))\n                i\n                (closest_num_iter N (- i 1)))\n            (closest_num_iter N (- i 1)))))\n  (closest_num_iter N (- N 1)))\n",
    "  (define (closest_num_iter N i)\n    (cond\n      [(= i N) N]\n      [(< i N) (closest_num_iter N (+ i 1))]\n      [else i]))\n  (closest_num_iter N 0))\n",
    "  (cond\n    [(= N 0) 0]\n    [(= N 1) 0]\n    [(= N 2) 1]\n    [(= N 3) 2]\n    [(= N 4) 3]\n    [(= N 5) 4]\n    [(= N 6) 5]\n    [(= N 7) 6]\n    [(= N 8) 7]\n    [(= N 9) 8]\n    [(= N 10) 9]\n    [(= N 11) 10]\n    [(= N 12) 11]\n    [(= N 13) 12]\n    [(= N 14) 13]\n    [(= N 15) 14]\n    [(= N 16) 15]\n    [(= N 17) 16]\n    [(= N 18) 17]\n    [(= N 19) 18]\n    [(= N 20) 19]\n    [(= N 21) 20]\n    [(= N 22) 21]\n    [(= N 23) 22]\n    [(= N 24) 23]\n    [(= N 25) 24]\n    [(= N 26) 25]\n    [(= N 27) 26]\n    [(= N 28) 27]\n    [(= N 29) 28]\n    [(= N 30) 29]\n    [(= N 31) 30]\n    [(= N 32) 31]\n    [(= N 33) 32]\n    [(= N 34) 33]\n    [(= N 35) 34]\n    [(= N 36) 35]\n    [(= N 37) 36]\n    [(= N 38) 37]\n    [(= N 39) 38]\n    [(= N 40) 39]\n    [(= N 41) 40]\n    [(= N 42) 41]\n    [(= N 43) 42]\n    [(= N 44) 43]\n    [(= N 45) 44]\n    [(= N 46) 45]\n    [(= N 47) 46]\n    [(= N 48) 47]\n    [(= N 49) 48]\n    [(= N 50) 49]\n    [(= N 51) 50]\n    [(= N 52) 51]\n    [(= N 53) 52]\n    [(= N 54) 53]\n    [(= N 55) 54]\n    [(=",
    "  (define (closest_num_iter N i)\n    (cond\n      [(= i 0) N]\n      [(= (remainder N i) 0) (closest_num_iter N (- i 1))]\n      [else (closest_num_iter N (- i 1))]))\n  (closest_num_iter N (- N 1)))\n",
    "  (define (closest_num_iter N i)\n    (if (and (positive? N) (positive? i))\n        (if (= (remainder N i) 0)\n            (closest_num_iter N (- i 1))\n            i)\n        (error \"N must be a positive number\")))\n  (closest_num_iter N N))\n",
    "  (define (closest_num_iter N acc)\n    (if (zero? N)\n        acc\n        (closest_num_iter (quotient N 2) (if (odd? N) (+ acc 1) acc))))\n  (closest_num_iter N 0))\n",
    "  (define (closest_num_iter N i)\n    (if (= (modulo N i) 0)\n        i\n        (closest_num_iter N (+ i 1))))\n  (closest_num_iter N 2))\n",
    "  (define (closest_num_iter N i)\n    (if (not (integer? (/ N i)))\n        (closest_num_iter N (+ i 1))\n        i))\n  (closest_num_iter N 2))\n",
    "  (let ([n (integer->char N)])\n    (if (char=? n #\\0)\n        (error \"No smaller number\")\n        (char->integer (sub1 n)))))\n",
    "  (define (closest_num_iter N i)\n    (if (= N i)\n        N\n        (if (and (integer? (/ N i)) (integer? (/ N (+ i 1))))\n            (closest_num_iter N (+ i 1))\n            i)))\n  (closest_num_iter N 2))\n",
    "  (define (closest_num_iter N i)\n    (if (and (integer? (/ N i)) (integer? (/ N (+ i 1))))\n        i\n        (closest_num_iter N (+ i 1))))\n  (closest_num_iter N 1))\n",
    "  (define (closest_num_iter N i)\n    (if (and (not (zero? (remainder N i)))\n             (not (zero? (remainder (sub1 N) i))))\n        (closest_num_iter N (add1 i))\n        i))\n  (closest_num_iter N 2))\n",
    "  (cond\n    [(= N 1) N]\n    [(= N 2) N]\n    [(= N 3) N]\n    [(= N 4) N]\n    [(= N 5) N]\n    [(= N 6) N]\n    [(= N 7) N]\n    [(= N 8) N]\n    [(= N 9) N]\n    [(= N 10) N]\n    [(= N 11) N]\n    [(= N 12) N]\n    [(= N 13) N]\n    [(= N 14) N]\n    [(= N 15) N]\n    [(= N 16) N]\n    [(= N 17) N]\n    [(= N 18) N]\n    [(= N 19) N]\n    [(= N 20) N]\n    [(= N 21) N]\n    [(= N 22) N]\n    [(= N 23) N]\n    [(= N 24) N]\n    [(= N 25) N]\n    [(= N 26) N]\n    [(= N 27) N]\n    [(= N 28) N]\n    [(= N 29) N]\n    [(= N 30) N]\n    [(= N 31) N]\n    [(= N 32) N]\n    [(= N 33) N]\n    [(= N 34) N]\n    [(= N 35) N]\n    [(= N 36) N]\n    [(= N 37) N]\n    [(= N 38) N]\n    [(= N 39) N]\n    [(= N 40) N]\n    [(= N 41) N]\n    [(= N 42) N]\n    [(= N 43) N]\n    [(= N 44) N]\n    [(= N 45) N]\n    [(= N 46) N]\n    [(= N 47) N]\n    [(= N 48) N]\n    [(= N 49) N]\n    [(= N 50) N]\n    [(= N 51) N]\n    [(= N 52) N]\n    [(= N 53) N]\n    [(= N 54) N]\n    [(= N 55) N]\n    [(= N 56) N]\n    [(=",
    "  (define (closest_num_iter N i)\n    (if (= N i)\n        N\n        (if (and (integer? (/ N i))\n                 (integer? (/ N (+ i 1))))\n            (closest_num_iter N (+ i 1))\n            i)))\n  (closest_num_iter N 2))\n",
    "  (define (closest_num_iter N i)\n    (cond\n      [(= N i) N]\n      [(= N (+ i 1)) i]\n      [else (closest_num_iter N (+ i 1))]))\n  (closest_num_iter N 0))\n",
    "  (define (closest_num_iter N i)\n    (if (and (integer? (/ N i)) (integer? (/ N (+ i 1))))\n        i\n        (closest_num_iter N (+ i 1))))\n  (closest_num_iter N 1))\n",
    "  (define (iter N i)\n    (if (= N i)\n        N\n        (if (= (remainder N i) 0)\n            (iter N (+ i 1))\n            i)))\n  (iter N 2))\n",
    "  (define (iter N i)\n    (if (zero? (modulo N i))\n        i\n        (iter N (+ i 1))))\n  (iter N 2))\n",
    "  (define (closest_num_iter N i)\n    (if (and (not (zero? (modulo N i))) (= (modulo N i) 1))\n        i\n        (closest_num_iter N (+ i 1))))\n  (closest_num_iter N 1))\n",
    "  (define (closest_num_iter N i)\n    (cond\n      [(= (modulo N i) 0) i]\n      [else (closest_num_iter N (+ i 1))]))\n  (closest_num_iter N 1))\n",
    "  (define (closest_num_iter N i)\n    (if (and (integer? (/ N i)) (integer? (/ N (+ i 1))))\n        i\n        (closest_num_iter N (+ i 1))))\n  (closest_num_iter N 1))\n",
    "  (define (closest_num_iter N n)\n    (if (= N n)\n        n\n        (if (and (not (zero? (modulo N n)))\n                 (not (zero? (modulo N (+ n 1)))))\n            n\n            (closest_num_iter N (+ n 1)))))\n  (closest_num_iter N 1))\n",
    "  (cond\n    [(= N 0) 0]\n    [(= N 1) 0]\n    [(= N 2) 1]\n    [(= N 3) 1]\n    [(= N 4) 3]\n    [(= N 5) 3]\n    [(= N 6) 5]\n    [(= N 7) 5]\n    [(= N 8) 7]\n    [(= N 9) 7]\n    [(= N 10) 9]\n    [(= N 11) 9]\n    [(= N 12) 11]\n    [(= N 13) 11]\n    [(= N 14) 13]\n    [(= N 15) 13]\n    [(= N 16) 15]\n    [(= N 17) 15]\n    [(= N 18) 17]\n    [(= N 19) 17]\n    [(= N 20) 19]\n    [(= N 21) 19]\n    [(= N 22) 21]\n    [(= N 23) 21]\n    [(= N 24) 23]\n    [(= N 25) 23]\n    [(= N 26) 25]\n    [(= N 27) 25]\n    [(= N 28) 27]\n    [(= N 29) 27]\n    [(= N 30) 29]\n    [(= N 31) 29]\n    [(= N 32) 31]\n    [(= N 33) 31]\n    [(= N 34) 33]\n    [(= N 35) 33]\n    [(= N 36) 35]\n    [(= N 37) 35]\n    [(= N 38) 37]\n    [(= N 39) 37]\n    [(= N 40) 39]\n    [(= N 41) 39]\n    [(= N 42) 41]\n    [(= N 43) 41]\n    [(= N 44) 43]\n    [(= N 45) 43]\n    [(= N 46) 45]\n    [(= N 47) 45]\n    [(= N 48) 47]\n    [(= N 49) 47]\n    [(= N 50) 49]\n    [(= N 51) 49]\n    [(= N 52) 51]\n    [(= N 53) 51]\n    [(= N 54) 53]\n    [(= N 55) 53]\n    [(=",
    "  (let loop ([n N])\n    (if (zero? n)\n        0\n        (if (zero? (remainder n 2))\n            (loop (quotient n 2))\n            (sub1 n)))))\n",
    "  (let loop ([n N])\n    (if (zero? n)\n        0\n        (if (zero? (remainder n 2))\n            (loop (quotient n 2))\n            (sub1 n)))))\n",
    "  (let loop ([n N])\n    (if (zero? n)\n        0\n        (if (zero? (remainder n 2))\n            (loop (- n 1))\n            n))))\n",
    "  (define (closest_num_iter N acc)\n    (if (= N 0)\n        acc\n        (closest_num_iter (quotient N 2) (+ acc (remainder N 2)))))\n  (closest_num_iter N 0))\n",
    "  (let loop ([n N])\n    (if (= n 0)\n        0\n        (if (positive? (remainder n 2))\n            (loop (- n 1))\n            n))))\n",
    "  (define (closest_num_iter N i)\n    (cond\n      [(= N i) N]\n      [(< N i) (closest_num_iter N (- i 1))]\n      [else i]))\n  (closest_num_iter N N))\n",
    "  (let loop ([n N])\n    (if (zero? n)\n        0\n        (if (zero? (remainder n 2))\n            (loop (quotient n 2))\n            (loop (sub1 n))))))\n",
    "  (define (closest_num_iter N i)\n    (cond\n      [(= i 0) (error \"No smaller number\")]\n      [(< N (* i i)) (- i 1)]\n      [else (closest_num_iter N (+ i 1))]))\n  (closest_num_iter N 0))\n",
    "  (cond\n    [(zero? N) 0]\n    [(zero? (remainder N 2)) (closest_num (- N 1))]\n    [else (closest_num (/ N 2))]))\n",
    "  (define (closest_num_iter N i)\n    (if (= N i)\n        (closest_num_iter N (- i 1))\n        (if (prime? i)\n            i\n            (closest_num_iter N (- i 1)))))\n  (closest_num_iter N N))\n",
    "  (define (closest_num_iter N i)\n    (cond\n      [(= N i) N]\n      [(< N i) (closest_num_iter N (- i 1))]\n      [else i]))\n  (closest_num_iter N N))\n",
    "  (define (closest_num_iter N i)\n    (if (= N i)\n        (error \"No smaller number\")\n        (if (prime? i)\n            (if (prime? (- N i))\n                i\n                (closest_num_iter N (- i 1)))\n            (closest_num_iter N (- i 1)))))\n  (closest_num_iter N (- N 1)))\n",
    "  (define (closest_num_iter N i)\n    (if (and (integer? (/ N i)) (integer? (/ N (+ i 1))))\n        i\n        (closest_num_iter N (+ i 1))))\n  (closest_num_iter N 1))\n",
    "  (let loop ([n N])\n    (if (zero? n)\n        0\n        (if (zero? (remainder n 2))\n            (loop (quotient n 2))\n            (sub1 n)))))\n",
    "  (define (closest_num_iter N i)\n    (if (and (integer? (/ N i)) (integer? (/ N (+ i 1))))\n        i\n        (closest_num_iter N (+ i 1))))\n  (closest_num_iter N 1))\n",
    "  (let loop ([n N])\n    (if (zero? n)\n        0\n        (if (zero? (remainder n 2))\n            (loop (quotient n 2))\n            (sub1 n)))))\n",
    "  (define (closest_num_iter N i)\n    (if (and (integer? (/ N i)) (integer? (/ N (+ i 1))))\n        i\n        (closest_num_iter N (+ i 1))))\n  (closest_num_iter N 1))\n",
    "  (define (closest_num_iter N i)\n    (if (and (integer? (/ N i)) (integer? (/ N (+ i 1))))\n        i\n        (closest_num_iter N (+ i 1))))\n  (closest_num_iter N 1))\n",
    "  (if (= N 0)\n      0\n      (if (= (remainder N 2) 0)\n          (closest_num (- N 1))\n          N)))\n",
    "  (define (closest_num_iter N i)\n    (cond\n      [(= i N) N]\n      [(= (remainder N i) 0) i]\n      [else (closest_num_iter N (+ i 1))]))\n  (closest_num_iter N 2))\n",
    "  (define (closest_num_iter N i)\n    (if (and (not (zero? (modulo N i)))\n             (not (zero? (modulo (sub1 N) i))))\n        (closest_num_iter N (add1 i))\n        (sub1 N)))\n  (closest_num_iter N 2))\n",
    "  (define (closest_num_iter N i)\n    (if (and (integer? (/ N i)) (integer? (/ N (+ i 1))))\n        i\n        (closest_num_iter N (+ i 1))))\n  (closest_num_iter N 2))\n",
    "  (define (closest_num_iter N i)\n    (if (not (integer? (/ N i)))\n        (closest_num_iter N (+ i 1))\n        i))\n  (closest_num_iter N 1))\n",
    "  (define (closest_num_iter N i)\n    (if (= N i)\n        0\n        (if (= (modulo N i) 0)\n            i\n            (closest_num_iter N (+ i 1)))))\n  (closest_num_iter N 1))\n",
    "  (cond\n    [(= N 0) 0]\n    [(= N 1) 0]\n    [(= N 2) 1]\n    [(= N 3) 2]\n    [(= N 4) 3]\n    [(= N 5) 4]\n    [(= N 6) 5]\n    [(= N 7) 6]\n    [(= N 8) 7]\n    [(= N 9) 8]\n    [(= N 10) 9]\n    [(= N 11) 10]\n    [(= N 12) 11]\n    [(= N 13) 12]\n    [(= N 14) 13]\n    [(= N 15) 14]\n    [(= N 16) 15]\n    [(= N 17) 16]\n    [(= N 18) 17]\n    [(= N 19) 18]\n    [(= N 20) 19]\n    [(= N 21) 20]\n    [(= N 22) 21]\n    [(= N 23) 22]\n    [(= N 24) 23]\n    [(= N 25) 24]\n    [(= N 26) 25]\n    [(= N 27) 26]\n    [(= N 28) 27]\n    [(= N 29) 28]\n    [(= N 30) 29]\n    [(= N 31) 30]\n    [(= N 32) 31]\n    [(= N 33) 32]\n    [(= N 34) 33]\n    [(= N 35) 34]\n    [(= N 36) 35]\n    [(= N 37) 36]\n    [(= N 38) 37]\n    [(= N 39) 38]\n    [(= N 40) 39]\n    [(= N 41) 40]\n    [(= N 42) 41]\n    [(= N 43) 42]\n    [(= N 44) 43]\n    [(= N 45) 44]\n    [(= N 46) 45]\n    [(= N 47) 46]\n    [(= N 48) 47]\n    [(= N 49) 48]\n    [(= N 50) 49]\n    [(= N 51) 50]\n    [(= N 52) 51]\n    [(= N 53) 52]\n    [(= N 54) 53]\n    [(= N 55) 54]\n    [(=",
    "  (define (closest_num_iter N i)\n    (cond\n      [(= N i) N]\n      [(= N (+ i 1)) i]\n      [else (closest_num_iter N (+ i 1))]))\n  (closest_num_iter N 0))\n",
    "  (cond\n    [(= N 1) 0]\n    [(= N 2) 1]\n    [(= N 3) 2]\n    [(= N 4) 3]\n    [(= N 5) 4]\n    [(= N 6) 5]\n    [(= N 7) 6]\n    [(= N 8) 7]\n    [(= N 9) 8]\n    [(= N 10) 9]\n    [(= N 11) 10]\n    [(= N 12) 11]\n    [(= N 13) 12]\n    [(= N 14) 13]\n    [(= N 15) 14]\n    [(= N 16) 15]\n    [(= N 17) 16]\n    [(= N 18) 17]\n    [(= N 19) 18]\n    [(= N 20) 19]\n    [(= N 21) 20]\n    [(= N 22) 21]\n    [(= N 23) 22]\n    [(= N 24) 23]\n    [(= N 25) 24]\n    [(= N 26) 25]\n    [(= N 27) 26]\n    [(= N 28) 27]\n    [(= N 29) 28]\n    [(= N 30) 29]\n    [(= N 31) 30]\n    [(= N 32) 31]\n    [(= N 33) 32]\n    [(= N 34) 33]\n    [(= N 35) 34]\n    [(= N 36) 35]\n    [(= N 37) 36]\n    [(= N 38) 37]\n    [(= N 39) 38]\n    [(= N 40) 39]\n    [(= N 41) 40]\n    [(= N 42) 41]\n    [(= N 43) 42]\n    [(= N 44) 43]\n    [(= N 45) 44]\n    [(= N 46) 45]\n    [(= N 47) 46]\n    [(= N 48) 47]\n    [(= N 49) 48]\n    [(= N 50) 49]\n    [(= N 51) 50]\n    [(= N 52) 51]\n    [(= N 53) 52]\n    [(= N 54) 53]\n    [(= N 55) 54]\n    [(= N 56) 55]\n    [(=",
    "  (define (closest_num_iter N i)\n    (if (and (not (zero? (remainder N i)))\n             (not (zero? (remainder (sub1 N) i))))\n        (closest_num_iter N (add1 i))\n        (sub1 N)))\n  (closest_num_iter N 2))\n",
    "  (define (closest_num_iter N i)\n    (if (= N i)\n        (error \"No smaller number\")\n        (if (prime? i)\n            i\n            (closest_num_iter N (- i 1)))))\n  (closest_num_iter N (- N 1)))\n",
    "  (define (closest_num_iter N i)\n    (if (and (integer? (/ N i)) (integer? (/ N (+ i 1))))\n        i\n        (closest_num_iter N (+ i 1))))\n  (closest_num_iter N 1))\n",
    "  (define (closest_num_iter N i)\n    (cond\n      [(= i 0) (error \"No smaller number\")]\n      [(< N (* i i)) (- i 1)]\n      [else (closest_num_iter N (+ i 1))]))\n  (closest_num_iter N 1))\n",
    "  (if (= N 0)\n      0\n      (if (= (remainder N 2) 0)\n          (closest_num (- N 1))\n          N)))\n",
    "  (let loop ([i 1])\n    (if (= i N)\n        (error \"No smaller number\")\n        (if (prime? i)\n            (if (prime? (- N i))\n                i\n                (loop (+ i 1)))\n            (loop (+ i 1))))))\n",
    "  (define (closest_num_iter N i)\n    (if (and (integer? (/ N i)) (integer? (/ i N)))\n        i\n        (closest_num_iter N (+ i 1))))\n  (closest_num_iter N 1))\n",
    "  (define (closest_num_iter N i)\n    (if (and (integer? (/ N i)) (integer? (/ N (+ i 1))))\n        i\n        (closest_num_iter N (+ i 1))))\n  (closest_num_iter N 1))\n",
    "  (define (closest_num_iter N i)\n    (cond\n      [(= N i) N]\n      [(= N (+ i 1)) i]\n      [else (closest_num_iter N (+ i 1))]))\n  (closest_num_iter N 0))\n",
    "  (define (closest_num_iter N i)\n    (cond\n      [(= i 0) 0]\n      [(= (remainder N i) 0) i]\n      [else (closest_num_iter N (- i 1))]))\n  (closest_num_iter N (quotient N 2)))\n",
    "  (let loop ([i N])\n    (if (not (integer? i))\n        (error \"not an integer\")\n        (if (integer? (- i 1))\n            (- i 1)\n            (loop (- i 1))))))\n",
    "  (cond\n    [(= N 0) 0]\n    [(= N 1) 0]\n    [(= N 2) 1]\n    [(= N 3) 2]\n    [(= N 4) 3]\n    [(= N 5) 4]\n    [(= N 6) 5]\n    [(= N 7) 6]\n    [(= N 8) 7]\n    [(= N 9) 8]\n    [(= N 10) 9]\n    [(= N 11) 10]\n    [(= N 12) 11]\n    [(= N 13) 12]\n    [(= N 14) 13]\n    [(= N 15) 14]\n    [(= N 16) 15]\n    [(= N 17) 16]\n    [(= N 18) 17]\n    [(= N 19) 18]\n    [(= N 20) 19]\n    [(= N 21) 20]\n    [(= N 22) 21]\n    [(= N 23) 22]\n    [(= N 24) 23]\n    [(= N 25) 24]\n    [(= N 26) 25]\n    [(= N 27) 26]\n    [(= N 28) 27]\n    [(= N 29) 28]\n    [(= N 30) 29]\n    [(= N 31) 30]\n    [(= N 32) 31]\n    [(= N 33) 32]\n    [(= N 34) 33]\n    [(= N 35) 34]\n    [(= N 36) 35]\n    [(= N 37) 36]\n    [(= N 38) 37]\n    [(= N 39) 38]\n    [(= N 40) 39]\n    [(= N 41) 40]\n    [(= N 42) 41]\n    [(= N 43) 42]\n    [(= N 44) 43]\n    [(= N 45) 44]\n    [(= N 46) 45]\n    [(= N 47) 46]\n    [(= N 48) 47]\n    [(= N 49) 48]\n    [(= N 50) 49]\n    [(= N 51) 50]\n    [(= N 52) 51]\n    [(= N 53) 52]\n    [(= N 54) 53]\n    [(= N 55) 54]\n    [(=",
    "  (define (closest_num_iter N i)\n    (if (and (integer? (/ N i)) (integer? (/ N (+ i 1))))\n        i\n        (closest_num_iter N (+ i 1))))\n  (closest_num_iter N 1))\n",
    "  (define (helper n)\n    (if (= n 0)\n        0\n        (if (zero? (remainder n 2))\n            (helper (quotient n 2))\n            (quotient n 2))))\n  (helper N))\n",
    "  (define (closest_num_iter N i)\n    (cond\n      [(= N i) N]\n      [(< N i) (closest_num_iter N (- i 1))]\n      [else i]))\n  (closest_num_iter N N))\n",
    "  (let ([n (integer->exact-integer N)])\n    (if (zero? n)\n        0\n        (let ([m (exact-integer->integer (exact-integer-sqrt n))])\n          (if (zero? (modulo n m))\n              (closest_num (- n 1))\n              (exact-integer-sqrt n))))))\n",
    "  (let loop ([n N] [c 0])\n    (if (&lt; n c)\n        c\n        (loop (- n 1) (+ c 1)))))\n",
    "  (define (closest_num_iter n i)\n    (if (= n i)\n        (closest_num_iter n (- i 1))\n      (if (= (modulo n i) 0)\n          i\n          (closest_num_iter n (- i 1)))))\n  (closest_num_iter N N))\n",
    "  (define (closest_num_iter N i)\n    (if (zero? (modulo N i))\n        (closest_num_iter N (- i 1))\n        i))\n  (closest_num_iter N (- N 1)))\n",
    "  (define (helper N i)\n    (cond\n      [(= i N) N]\n      [(= (remainder N i) 0) i]\n      [else (helper N (+ i 1))]))\n  (helper N 1))\n",
    "  (cond\n    [(= N 0) 0]\n    [(= N 1) 0]\n    [(= N 2) 1]\n    [(= N 3) 2]\n    [(= N 4) 3]\n    [(= N 5) 4]\n    [(= N 6) 5]\n    [(= N 7) 6]\n    [(= N 8) 7]\n    [(= N 9) 8]\n    [(= N 10) 9]\n    [(= N 11) 10]\n    [(= N 12) 11]\n    [(= N 13) 12]\n    [(= N 14) 13]\n    [(= N 15) 14]\n    [(= N 16) 15]\n    [(= N 17) 16]\n    [(= N 18) 17]\n    [(= N 19) 18]\n    [(= N 20) 19]\n    [(= N 21) 20]\n    [(= N 22) 21]\n    [(= N 23) 22]\n    [(= N 24) 23]\n    [(= N 25) 24]\n    [(= N 26) 25]\n    [(= N 27) 26]\n    [(= N 28) 27]\n    [(= N 29) 28]\n    [(= N 30) 29]\n    [(= N 31) 30]\n    [(= N 32) 31]\n    [(= N 33) 32]\n    [(= N 34) 33]\n    [(= N 35) 34]\n    [(= N 36) 35]\n    [(= N 37) 36]\n    [(= N 38) 37]\n    [(= N 39) 38]\n    [(= N 40) 39]\n    [(= N 41) 40]\n    [(= N 42) 41]\n    [(= N 43) 42]\n    [(= N 44) 43]\n    [(= N 45) 44]\n    [(= N 46) 45]\n    [(= N 47) 46]\n    [(= N 48) 47]\n    [(= N 49) 48]\n    [(= N 50) 49]\n    [(= N 51) 50]\n    [(= N 52) 51]\n    [(= N 53) 52]\n    [(= N 54) 53]\n    [(= N 55) 54]\n    [(=",
    "  (define (closest_num_iter N i)\n    (if (and (even? N) (even? i))\n        (closest_num_iter N (- i 1))\n        (if (and (odd? N) (odd? i))\n            (closest_num_iter N (- i 1))\n            i)))\n  (closest_num_iter N N))\n",
    "  (define (closest_num_iter n i)\n    (cond\n      [(= n i) n]\n      [(< n i) (closest_num_iter n (+ i 1))]\n      [else (closest_num_iter n (- i 1))]))\n  (closest_num_iter N 1))\n",
    "  (let loop ([n N])\n    (if (zero? n)\n        0\n        (if (zero? (remainder n 2))\n            (loop (quotient n 2))\n            (loop (sub1 n))))))\n",
    "  (define (closest_num_iter N i)\n    (if (and (integer? (/ N i)) (integer? (/ N (+ i 1))))\n        i\n        (closest_num_iter N (+ i 1))))\n  (closest_num_iter N 1))\n",
    "  (define (closest_num_iter N i)\n    (if (and (not (zero? (modulo N i))) (not (zero? (modulo (sub1 N) i))))\n        (closest_num_iter N (add1 i))\n        (sub1 N)))\n  (closest_num_iter N 2))\n",
    "  (define (closest_num_iter N i)\n    (if (and (integer? (/ N i)) (integer? (/ N (+ i 1))))\n        i\n        (closest_num_iter N (+ i 1))))\n  (closest_num_iter N 1))\n",
    "  (define (closest_num_iter N i)\n    (if (and (not (zero? (modulo N i)))\n             (not (zero? (modulo (sub1 N) i))))\n        (closest_num_iter N (add1 i))\n        (sub1 N)))\n  (closest_num_iter N 2))\n",
    "  (define (closest_num_iter N i)\n    (if (not (integer? (/ N i)))\n        (closest_num_iter N (+ i 1))\n        i))\n  (closest_num_iter N 2))\n",
    "  (define (closest_num_iter N n)\n    (if (zero? n)\n        N\n        (if (and (not (zero? (modulo N n)))\n                 (not (zero? (modulo N (+ n 1)))))\n            (closest_num_iter N (+ n 1))\n            n)))\n  (closest_num_iter N 2))\n",
    "  (let loop ([n N])\n    (if (zero? n)\n        0\n        (if (zero? (remainder n 2))\n            (loop (quotient n 2))\n            (loop (sub1 n))))))\n",
    "  (cond [(zero? N) 0]\n        [(= N 1) 0]\n        [else (closest_num (- N 1))]))\n",
    "  (define (closest_num_iter N i)\n    (if (= N i)\n        (closest_num_iter N (- i 1))\n        (if (number? (sqrt i))\n            i\n            (closest_num_iter N (- i 1)))))\n  (closest_num_iter N N))\n",
    "  (define (closest_num_iter N i)\n    (cond ((< N i) i)\n          (else (closest_num_iter N (+ i 1)))))\n  (closest_num_iter N 1))\n",
    "  (define (closest_num_iter N i)\n    (if (and (not (zero? (remainder N i)))\n             (not (zero? (remainder (sub1 N) i))))\n        (closest_num_iter N (add1 i))\n        i))\n  (closest_num_iter N 2))\n",
    "  (define (closest_num_iter N i)\n    (if (and (integer? (/ N i)) (integer? (/ N (+ i 1))))\n        i\n        (closest_num_iter N (+ i 1))))\n  (closest_num_iter N 1))\n",
    "  (define (closest_num_iter N i)\n    (if (and (not (integer? (/ N i)))\n             (integer? (/ N (+ i 1))))\n        i\n        (closest_num_iter N (+ i 1))))\n  (closest_num_iter N 1))\n",
    "  (if (zero? N)\n      0\n      (if (zero? (remainder N 2))\n          (closest_num (- N 1))\n          (- N 1))))\n",
    "  (define (closest_num_iter N i)\n    (if (= N i)\n        N\n        (if (and (integer? (/ N i)) (= (modulo N i) 0))\n            (closest_num_iter N (+ i 1))\n            i)))\n  (closest_num_iter N 1))\n",
    "  (define (closest_num_iter N i)\n    (if (and (integer? (/ N i)) (integer? (/ N (+ i 1))))\n        i\n        (closest_num_iter N (+ i 1))))\n  (closest_num_iter N 1))\n",
    "  (let loop ([i N])\n    (if (integer? (/ i 2))\n        (loop (/ i 2))\n        i)))\n",
    "  (define (closest_num-helper N i)\n    (if (not (integer? N))\n        (error \"N is not an integer\")\n        (if (not (integer? i))\n            (error \"i is not an integer\")\n            (if (= N i)\n                (error \"N is equal to i\")\n                (if (= N 0)\n                    (error \"N is equal to 0\")\n                    (if (= N 1)\n                        (error \"N is equal to 1\")\n                        (if (= N 2)\n                            (error \"N is equal to 2\")\n                            (if (= N 3)\n                                (error \"N is equal to 3\")\n                                (if (= N 4)\n                                    (error \"N is equal to 4\")\n                                    (if (= N 5)\n                                        (error \"N is equal to 5\")\n                                        (if (= N 6)\n                                            (error \"N is equal to 6\")\n                                            (if (= N 7)\n                                                (error \"N is equal to 7\")\n                                                (if (= N 8)\n                                                    (error \"N is equal to 8\")\n                                                    (if (= N 9)\n                                                        (error \"N is equal to 9\")\n                                                        (if (= N 10)\n                                                            (error \"N is equal to 10\")\n                                                            (if (= N 11)\n                                                                (error \"N is equal to 11\")\n                                                                (if (= N 12)\n                                                                    (error \"N is equal to 12\")\n                                                                    (if (= N 13)\n                                                                        (error \"N is equal to 13\")\n                                                                        (if (= N 14)\n                                                                            (error \"N is equal to 14\")\n                                                                            (if (= N 15)\n                                                                                (error \"N is equal to 15\")\n                                                                                (if (= N 16)\n                                                                                    (error \"N is equal to 16\")\n                                                                                    (if (= N 17)\n                                                                                        (error \"N is equal to 17\")\n                                                                                        (if (= N 18)\n                                ",
    "  (define (closest_num_iter N i)\n    (if (and (not (zero? (modulo N i)))\n             (not (zero? (modulo (sub1 N) i))))\n        (closest_num_iter N (add1 i))\n        (sub1 N)))\n  (closest_num_iter N 2))\n",
    "  (let loop ((i 1))\n    (if (= i N)\n        (error \"No smaller number\")\n        (if (integer? (/ N i))\n            i\n            (loop (+ i 1))))))\n",
    "  (define (closest_num_iter n i)\n    (if (= n i)\n        (closest_num_iter n (- i 1))\n        (if (= (remainder n i) 0)\n            i\n            (closest_num_iter n (- i 1)))))\n  (closest_num_iter N N))\n",
    "  (define (closest_num_iter N i)\n    (if (= N i)\n        N\n        (if (and (not (zero? (remainder N i))) (not (zero? (remainder N (+ i 1)))))\n            i\n            (closest_num_iter N (+ i 1)))))\n  (closest_num_iter N 1))\n",
    "  (let loop ([n N])\n    (if (zero? n)\n        0\n        (if (zero? (remainder n 2))\n            (loop (quotient n 2))\n            (loop (sub1 n))))))\n",
    "  (define (closest_num_iter N i)\n    (if (= N i)\n        (closest_num_iter N (- i 1))\n        (if (integer? (/ N i))\n            i\n            (closest_num_iter N (- i 1)))))\n  (closest_num_iter N N))\n"
  ]
}