{
  "name": "mbpp_585_expensive_items",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the n most expensive items in a given dataset.\n(define (expensive_items items n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_585_expensive_items.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate expensive_items))\n    (check-equal? (candidate (list #hash((\"name\" .  \"Item-1\") (\"price\" .  101.1)) #hash((\"name\" .  \"Item-2\") (\"price\" .  555.22))) 1) (list #hash((\"name\" .  \"Item-2\") (\"price\" .  555.22))))\n    (check-equal? (candidate (list #hash((\"name\" .  \"Item-1\") (\"price\" .  101.1)) #hash((\"name\" .  \"Item-2\") (\"price\" .  555.22)) #hash((\"name\" .  \"Item-3\") (\"price\" .  45.09))) 2) (list #hash((\"name\" .  \"Item-2\") (\"price\" .  555.22)) #hash((\"name\" .  \"Item-1\") (\"price\" .  101.1))))\n    (check-equal? (candidate (list #hash((\"name\" .  \"Item-1\") (\"price\" .  101.1)) #hash((\"name\" .  \"Item-2\") (\"price\" .  555.22)) #hash((\"name\" .  \"Item-3\") (\"price\" .  45.09)) #hash((\"name\" .  \"Item-4\") (\"price\" .  22.75))) 1) (list #hash((\"name\" .  \"Item-2\") (\"price\" .  555.22))))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (take (sort items >) n))\n",
    "  (define (expensive_items_helper items n acc)\n    (if (or (null? items) (= n 0))\n        acc\n        (expensive_items_helper (cdr items) (- n 1) (cons (car items) acc))))\n  (expensive_items_helper items n '()))\n",
    "  (take (sort items >) n))\n",
    "  (take (sort (lambda (x y) (&gt; (item-price x) (item-price y))) items) n))\n</code>\n",
    "  (take (sort (lambda (x y) (&gt; (item-price x) (item-price y))) items) n))\n</code>\n",
    "  (take (sort (lambda (x y) (&gt; (item-price x) (item-price y))) items) n))\n",
    "  (take (sort items >) n))\n",
    "  (for/list ([item (in-list items)])\n    (if (and (number? (item 'price))\n             (<= n (length (expensive_items items n))))\n        (list item))))\n",
    "  (sort items > (take n (sort items >))))\n",
    "  (let loop ((items items)\n             (n n)\n             (acc '()))\n    (cond ((or (null? items)\n               (zero? n))\n           acc)\n          (else\n           (loop (cdr items)\n                 (- n 1)\n                 (cons (car items) acc))))))\n",
    "  (sort items\n        (lambda (x y)\n          (&gt; (item-price x) (item-price y)))))\n</code>\n",
    "  (sort (lambda (a b) (&gt; (second a) (second b))) items)\n  (take n items))\n",
    "  (take (sort items >) n))\n",
    "  (take (sort items >) n))\n",
    "  (take (sort items >) n))\n",
    "  (take (sort items >) n))\n",
    "  (take (sort items >) n))\n",
    "  (take (sort items >) n))\n",
    "  (sort (lambda (x y)\n          (if (&gt; (item-price x) (item-price y))\n              #t\n              #f))\n        (take n items)))\n",
    "  (take (sort items >) n))\n"
  ]
}