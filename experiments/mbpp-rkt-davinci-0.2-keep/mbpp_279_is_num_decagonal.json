{
  "name": "mbpp_279_is_num_decagonal",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the nth decagonal number.\n(define (is_num_decagonal n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_279_is_num_decagonal.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_num_decagonal))\n    (check-equal? (candidate 3) 27)\n    (check-equal? (candidate 7) 175)\n    (check-equal? (candidate 10) 370)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let* ([m (sqrt (+ (* 4 (* 3 n)) 1))]\n         [m-int (floor m)])\n    (and (= m m-int)\n         (= (modulo m-int 4) 1))))\n",
    "  (let* ((d (sqrt (+ (* 4 (* 10 n)) (* 9 n n))))))\n    (and (integer? d)\n         (= (modulo d 2) 1)\n         (= (modulo d 5) 2))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 25 (sqr n)))))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 2 n) (* 2 (sqrt 10)) -1)))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))))\n    (and (integer? d)\n         (= (modulo d 2) 1)\n         (= (modulo d 5) 2))))\n",
    "  (let ([d (sqrt (+ (* 10 n) (* 100 (sqr n))))])\n    (and (integer? d)\n         (or (zero? (modulo d 10))\n             (zero? (modulo d 5))))))\n",
    "  (let* ([d (sqrt (+ (* 4 (* 10 n)) (* 9 (* n n))))])\n    (and (integer? d)\n         (= (modulo d 2) 1))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (sqrt 2)) 1)))))\n",
    "  (let ((x (sqrt (+ 1 (* 4 (* 10 n))))))\n    (and (integer? x)\n         (integer? (/ (+ x 1) 2)))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)))))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 25 1))))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))))\n    (and (integer? d)\n         (= (modulo d 2) 1))))\n",
    "  (let ([d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))]\n        [d1 (floor d)]\n        [d2 (ceiling d)])\n    (and (= d1 d2)\n         (= (modulo d1 4) 1))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))))\n    (and (integer? d)\n         (= d (floor d))\n         (or (= (modulo d 4) 1)\n             (= (modulo d 4) 3)))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 25 (sqr n)))))))\n",
    "  (let loop ([i 1])\n    (if (= (nth-decagonal i) n)\n        #t\n        (if (&lt; (nth-decagonal i) n)\n            (loop (+ i 1))\n            #f))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 100 (expt n 2)) 1))))\n    (and (integer? d)\n         (or (= (modulo d 2) 1)\n             (= (modulo d 2) -1)))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)))))\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)))))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))))\n    (and (integer? d)\n         (integer? (+ (* 2 n) (/ d 2)))\n         (integer? (+ (* 2 n) (/ d 2)))\n         (integer? (+ (* 2 n) (/ d 2)))\n         (integer? (+ (* 2 n) (/ d 2)))\n         (integer? (+ (* 2 n) (/ d 2)))\n         (integer? (+ (* 2 n) (/ d 2)))\n         (integer? (+ (* 2 n) (/ d 2)))\n         (integer? (+ (* 2 n) (/ d 2)))\n         (integer? (+ (* 2 n) (/ d 2)))\n         (integer? (+ (* 2 n) (/ d 2)))\n         (integer? (+ (* 2 n) (/ d 2))))))\n",
    "  (let* ((d (sqrt (+ (* 4 (* 10 n)) 100)))\n         (d1 (floor d))\n         (d2 (ceiling d)))\n    (and (= d1 d2)\n         (= (modulo d1 4) 1))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (sqrt 2)) 1)))))\n",
    "  (let* ([d (sqrt (+ (* 4 (* 10 n)) (* 9 (* n n))))])\n    (and (integer? d)\n         (= (modulo d 2) 1))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)))))\n       (not (zero? (modulo n 10)))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 25 (sqr n)) 100)))))\n",
    "  (let* ([d (sqrt (+ (* 4 (* 10 n)) (* 9 (* n n))))]\n         [d1 (floor d)]\n         [d2 (- d1 1)])\n    (or (and (= (mod d1 4) 1) (= (mod d1 10) 5))\n        (and (= (mod d2 4) 1) (= (mod d2 10) 5)))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 2 n) (* 3 (sqr n)))))))\n",
    "  (and (number? n)\n       (integer? n)\n       (not (negative? n))))\n",
    "  (let ([d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))]\n        [d1 (quotient d 2)])\n    (and (integer? d)\n         (integer? d1)\n         (zero? (- d (* 2 d1))))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))))\n    (and (integer? d) (= (modulo d 2) 1))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 4 (sqr n)))))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) 1))))\n    (and (integer? d)\n         (= (modulo d 2) 1))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (sqrt 2)))))))\n",
    "  (let ([d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))]\n        [d1 (floor d)]\n        [d2 (ceiling d)])\n    (cond [(= d1 d2) (exact->inexact (/ (+ d1 d2) 2))]\n          [else #f])))\n",
    "  (let ([d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))]\n        [d- (floor d)])\n    (and (= d d-)\n         (= (modulo d- 4) 3))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)))))\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)) (* -1 1))))))\n",
    "  (let ([d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))]\n        [d1 (floor d)]\n        [d2 (ceiling d)])\n    (or (and (= d1 d2) (= (mod d1 4) 1))\n        (and (= d1 (1+ d2)) (= (mod d1 4) 3)))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 4 (sqr n)))))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))))\n    (and (integer? d)\n         (or (= (modulo d 2) 0)\n             (= (modulo d 5) 0)))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (sqrt 2)) 1)))))\n",
    "  (let* ([d (sqrt (+ (* 4 (* 10 n)) (* 9 (sqr n))))]\n         [d1 (/ (+ d 3) 2)]\n         [d2 (/ (- d 3) 2)])\n    (or (integer? d1) (integer? d2))))\n",
    "  (let ([d (floor (/ (sqrt (+ (* 100 (+ n (* n n))) 400)) 10))])\n    (and (integer? d) (= n (* d (+ d 1) 10)))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) 100))))\n    (and (integer? d)\n         (= d (floor d))\n         (= (modulo d 4) 1))))\n",
    "  (let* ([d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))]\n         [d1 (floor d)]\n         [d2 (ceiling d)])\n    (or (= d1 d2)\n        (= d1 (+ d2 1)))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)))))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (sqrt 2)))))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) 100))))\n    (and (integer? d)\n         (zero? (modulo d 2))\n         (zero? (modulo (- d 2) 10)))))\n",
    "  (let loop ([i 1])\n    (if (= i n)\n        #t\n        (if (= (remainder n i) 0)\n            #f\n            (loop (+ i 1))))))\n",
    "  (let ([d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))]\n        [d1 (floor d)]\n        [d2 (- d1 1)])\n    (or (= d1 d) (= d2 d))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))))\n    (and (integer? d)\n         (= (modulo d 2) 1))))\n",
    "  (let ((n-sqrt (sqrt (+ (* 2 n) (* 3 (expt n 2))))))\n    (and (integer? n-sqrt)\n         (= (mod n-sqrt 2) 1))))\n",
    "  (let ((n-sqrt (sqrt (+ (* 4 n) (* 100 n)))))\n    (and (integer? n-sqrt)\n         (= (modulo n-sqrt 10) 5))))\n",
    "  (define (is_num_decagonal-iter n i)\n    (if (= n (* i 10 (+ i 1) (/ (+ i 1) 2)))\n        #t\n        (if (&lt; n (* i 10 (+ i 1) (/ (+ i 1) 2)))\n            #f\n            (is-num-decagonal-iter n (+ i 1)))))\n  (is-num-decagonal-iter n 1))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))))\n    (and (integer? d)\n         (= (modulo d 2) 1))))\n",
    "  (let* ((delta (- (* n n) (* n (* 2 10))))\n         (delta_sqrt (sqrt delta)))\n    (and (integer? delta_sqrt)\n         (integer? (/ (+ n delta_sqrt) 2)))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)))))\n       (not (zero? (sqrt (+ (* 10 n) (* 100 (expt n 2))))))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 (sqr n))))))\n    (and (integer? d)\n         (= d (round d))\n         (integer? (/ (+ d 3) 5)))))\n",
    "  (and (integer? n)\n       (= (expt 10 (/ (sqrt (+ (* 100 (+ (* 4 n) 1)) 1)) 2))\n          (sqrt (+ (* 100 (+ (* 4 n) 1)) 1)))))\n",
    "  (let ((d (sqrt (+ (* 40 n) (* 9 (expt n 2)))))\n        (d2 (sqrt (+ (* 40 n) (* 9 (expt n 2)) 1))))\n    (and (integer? d) (integer? d2)\n         (= d2 (+ d 1))\n         (= n (/ (+ (* 10 d) (- d 1)) 9)))))\n",
    "  (let ([d (round (sqrt (+ (* 2 n) (* 2 (expt 10 4)))))]\n        [d2 (* d d)])\n    (and (= d2 (+ (* 2 n) (* 2 (expt 10 4))))\n         (= (modulo d 2) 1))))\n",
    "  (let loop ([i 1])\n    (if (= n (* i 10))\n        #t\n        (if (&lt; n (* i 10))\n            #f\n            (loop (+ i 1))))))\n",
    "  (let* ([d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))]\n         [d1 (floor d)]\n         [d2 (ceiling d)])\n    (if (and (= d1 d2)\n             (= (mod d1 4) 1))\n        n\n        0)))\n",
    "  (let ((m (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))))\n    (and (integer? m)\n         (or (= (modulo m 2) 0)\n             (= (modulo m 5) 3)))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))))\n    (and (integer? d)\n         (= (modulo d 2) 1))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 2 n) (* 3 (sqr n)))))))\n",
    "  (let* ([d (sqrt (+ (* 4 (* 10 n)) (* 9 (sqr n))))]\n         [d1 (/ (+ d 3) 2)]\n         [d2 (/ (- d 3) 2)])\n    (or (integer? d1) (integer? d2))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) 100))))\n    (and (integer? d)\n         (= (modulo d 2) 1))))\n",
    "  (and (number? n)\n       (integer? n)\n       (positive? n)))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) 1))))\n    (and (integer? d)\n         (= (modulo d 2) 1))))\n",
    "  (let ([d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))]\n        [d1 (floor d)]\n        [d2 (ceiling d)])\n    (cond\n      [(= d1 d2) (cons (quotient d1 2) (quotient d2 2))]\n      [else #f])))\n",
    "  (let ((n-sqrt (sqrt n)))\n    (and\n     (integer? n-sqrt)\n     (integer? (+ n-sqrt (* 2 n-sqrt) 1)))))\n",
    "  (equal? (sqrt (+ (* 10 n) (* 100 (expt n 2))))\n          (round (sqrt (+ (* 10 n) (* 100 (expt n 2)))))))\n",
    "  (let ((n-sqrt (sqrt (+ (* 2 n) (* 4 n)))))\n    (and (integer? n-sqrt)\n         (= (modulo n-sqrt 2) 1))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))))\n    (and (integer? d)\n         (integer? (/ (+ d 3) 4)))))\n",
    "  (let* ([d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))]\n         [d1 (floor d)]\n         [d2 (ceiling d)])\n    (if (and (= d1 d2) (= (mod d1 4) 1))\n        n\n        0)))\n",
    "  (and (integer? n)\n       (let ([d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))]\n             [d1 (floor d)]\n             [d2 (ceiling d)])\n         (or (= d1 d2)\n             (= d1 (+ d2 1))))))\n",
    "  (and (integer? n)\n       (integer? (/ (+ (sqrt (+ (* 10 (* 3 n)) 1)) 1) 3))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 (sqr n))))))\n    (and (integer? d)\n         (or (= d (floor d))\n             (= d (ceiling d)))\n         (let ((a (/ (+ d 1) 2)))\n           (and (integer? a)\n                (or (= a (floor a))\n                    (= a (ceiling a)))\n                (let ((b (/ (- d 1) 2)))\n                   (and (integer? b)\n                        (or (= b (floor b))\n                            (= b (ceiling b)))\n                        (and (= a b)\n                             (= n (* a (1+ a)))))))))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (sqrt 2)))))))\n",
    "  (and (integer? n)\n       (let* ([d (sqrt (+ (* 4 (* 10 n)) (* 9 (* n n))))])\n         (and (integer? d)\n              (or (= d (+ (* 2 n) 1))\n                  (= d (- (* 2 n) 1)))))))\n",
    "  (let ([d (sqrt (+ (* 10 n) (* 25 1)))])\n    (and (integer? d)\n         (= (modulo d 5) 2))))\n",
    "  (and (integer? n)\n       (integer? (/ (+ (sqrt (+ (* 10 (* n n)) (* 100 n)) 1)) 10))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)))))))\n",
    "  (let* ([n-sqrt (sqrt (+ (* 4 n) (* 3 n) 1))]\n         [n-sqrt-int (inexact->exact (floor n-sqrt))])\n    (and (= n-sqrt-int n-sqrt)\n         (= (modulo n-sqrt-int 10) 3))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 2 n) (* -1 (/ (sqrt 10) 2)))))))\n",
    "  (let ((d (sqrt (+ (* 40 n) (* 9 (sqr n)) 1))))\n    (and (integer? d)\n         (or (= (modulo d 10) 3)\n             (= (modulo d 10) 7)))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))))\n    (and (integer? d)\n         (integer? (/ (+ d 3) 4)))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 (sqrt n)) 1)))))\n",
    "  (let loop ([i 0] [j 0])\n    (if (= n (* 10 i))\n        #t\n        (if (&gt; (* 10 i) n)\n            #f\n            (loop (+ i 1) (+ j 1))))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)))))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 3 n)) 1))))\n    (and (integer? d)\n         (= (modulo d 2) 1))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (sqrt 2)) 1)))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))))\n    (and (integer? d)\n         (= (modulo d 2) 1))))\n",
    "  (let ((d (sqrt (+ (* 40 n) (* 9 (expt n 2)) 100))))\n    (and (integer? d)\n         (= (modulo d 10) 0)\n         (= (modulo d 2) 0))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (sqrt 2)) 1)))))\n",
    "  (let loop ([i 0])\n    (if (= i n)\n        #t\n        (if (= (modulo n 10) 0)\n            #t\n            (loop (+ i 1))))))\n",
    "  (let* ([d (sqrt (+ (* 4 (* 10 n)) (* 9 (sqr n))))])\n    (and (integer? d)\n         (= d (round d))\n         (= n (/ (+ d 1) 2)))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 (* n n))))))\n    (and\n     (integer? d)\n     (integer? (/ (+ d 3) 10)))))\n",
    "  (let ((d (sqrt (+ (* 40 n) (* 9 (expt n 2)))))\n        (n (sqrt n)))\n    (and (integer? d) (integer? n))))\n",
    "  (let* ([d (sqrt (+ (* 4 (* 10 n)) (* 9 (* n n))))])\n    (and (integer? d)\n         (= (modulo d 2) 1)\n         (= (modulo d 5) 2))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)))))\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)) (* -1 10000))))))\n",
    "  (let* ([d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))]\n         [d1 (floor d)]\n         [d2 (ceiling d)])\n    (cond [(= d1 d2) (cons n d1)]\n          [else #f])))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n (* i 10))\n        #t\n        (if (&lt; n (* i 10))\n            #f\n            (loop n (+ i 1))))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)))))\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)) (* -1 100))))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 4 (* 10 n)) (* 100 (sqr n)))))))\n",
    "  (let ((n-sqrt (sqrt (+ (* 2 n) (* 3 (expt n 2))))))\n    (and (integer? n-sqrt)\n         (integer? (/ (- n-sqrt 3) 2)))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n (* i 10))\n        #t\n        (if (&lt; n (* i 10))\n            #f\n            (loop (- n (* i 10)) (+ i 1))))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)))))))\n",
    "  (let ([d (sqrt (+ (* 10 n) (* 25 1)))])\n    (and (integer? d)\n         (= (modulo d 5) 2))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (sqrt 2)))))))\n",
    "  (let ((d (round (sqrt (+ (* 2 n) (* 2 (sqrt 10)))))))\n    (and (= (mod d 2) 1)\n         (= n (* d (+ d 2) 5)))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 (* n n))))))\n    (and (integer? d)\n         (= (* 10 n) (- (* d d) (* 9 n)))\n         d)))\n",
    "  (let loop ([i 1])\n    (if (= n (* i 10))\n        #t\n        (if (&lt; n (* i 10))\n            #f\n            (loop (+ i 1))))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) 1))))\n    (and (integer? d)\n         (= d (floor d))\n         (= (modulo d 4) 1))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)))))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (sqrt 2)))))))\n",
    "  (let* ([d (sqrt (+ (* 4 (* 10 n)) (* 9 (sqr n))))])\n    (and (integer? d)\n         (= d (floor d))\n         (= d (+ 1 (* 4 n))))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (sqrt 2)) 1)))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)))))))\n",
    "  (and (integer? n)\n       (let* ([d (sqrt (+ (* 4 (* 10 n)) (* 9 (sqr n))))]\n              [d1 (/ (+ d 1) 2)]\n              [d2 (/ (- d 1) 2)])\n         (or (and (integer? d1) (= (* 10 d1) (+ (* n n) n)))\n             (and (integer? d2) (= (* 10 d2) (+ (* n n) n)))))))\n",
    "  (define (is_num_decagonal-iter n i)\n    (if (= n (* i 10))\n        #t\n        (if (&lt; n (* i 10))\n            #f\n            (is-num-decagonal-iter n (+ i 1)))))\n  (is_num_decagonal-iter n 1))\n",
    "  (let* ([d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))]\n         [d-int (floor d)])\n    (and (integer? d) (= d-int d))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 100 (expt n 2))))))\n    (and (integer? d)\n         (or (= d (floor d))\n             (= d (ceiling d)))\n         (let ((a (- d 1))\n               (b (+ d 1)))\n           (and (integer? (/ a 10))\n                (integer? (/ b 10)))))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)))))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)))))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)))))))\n",
    "  (let* ([x (sqrt (+ (* 10 (* n n)) (* 2 n)))]\n         [y (sqrt (+ (* 10 (* n n)) (* 2 n) 1))])\n    (and (integer? x) (integer? y))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 100 (expt n 2)) 1))))\n    (and (integer? d)\n         (or (= d (floor d))\n             (= d (ceiling d)))\n         (let ((n (floor (/ (+ d 1) 2))))\n           (and (integer? n)\n                (= n (floor n))\n                (= n (ceiling n))\n                (= (* n (n+ n 1)) (/ (* 2 n) 2))\n                (= (* n (n+ n 1)) (/ (* 2 n) 2))\n                (= (* n (n+ n 1)) (/ (* 2 n) 2))\n                (= (* n (n+ n 1)) (/ (* 2 n) 2))\n                (= (* n (n+ n 1)) (/ (* 2 n) 2))\n                (= (* n (n+ n 1)) (/ (* 2 n) 2))\n                (= (* n (n+ n 1)) (/ (* 2 n) 2))\n                (= (* n (n+ n 1)) (/ (* 2 n) 2))\n                (= (* n (n+ n 1)) (/ (* 2 n) 2))\n                (= (* n (n+ n 1)) (/ (* 2 n) 2))\n                (= (* n (n+ n 1)) (/ (* 2 n) 2))\n                (= (* n (n+ n 1)) (/ (* 2 n) 2))\n                (= (* n (n+ n 1)) (/ (* 2 n) 2))\n                (= (* n (n+ n 1)) (/ (* 2 n) 2))\n                (= (* n (n+ n 1)) (/ (* 2 n) 2))\n                (= (* n (n+ n 1)) (/ (* 2 n) 2))\n                (= (* n (n+ n 1)) (/ (* 2 n) 2))\n                (= (* n (n+ n 1)) (/ (* 2 n) 2))\n                (= (* n (n+ n 1)) (/ (* 2 n) 2))\n                (= (* n (n+ n 1)) (/ (* 2 n) 2))\n                (= (* n (n+ n 1)) (/ (* 2 n) 2))\n                (= (* n (n+ n 1)) (/ (* 2 n) 2))\n                (= (* n (n+ n 1)) (/ (* 2 n) 2))\n                (=",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) 100))))\n    (and (integer? d)\n         (= (modulo d 2) 1)\n         (= (modulo d 5) 0))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)))))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))))\n    (and (integer? d)\n         (= (modulo d 2) 1)\n         (= (modulo d 5) 2))))\n",
    "  (let ([d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))]\n        [d1 (floor d)]\n        [d2 (ceiling d)])\n    (or (= d1 d2)\n        (= d1 (+ d2 1)))))\n",
    "  (let ([d (sqrt (+ (* 4 (* 3 n)) 1))])\n    (and (integer? d)\n         (= (modulo d 2) 1))))\n",
    "  (let ([d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))]\n        [d1 (floor d)]\n        [d2 (ceiling d)])\n    (cond [(= d1 d2) (list d1)]\n          [else '()])))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 2 n) (* 2 (sqrt 2)) 1)))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 2 n) (* 2 (sqrt 2)) 1)))))\n",
    "  (let* ([d (sqrt (+ (* 4 (* 10 n)) (* 9 (* n n))))])\n    (and (integer? d)\n         (= (+ (* 4 d) (* 9 (* n n))) (* 4 (* 10 n)))\n         (= (modulo d 2) 1))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))))\n    (and (integer? d)\n         (= d (floor d))\n         (= (* 10 n) (- (* 3 d) n)))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)) (* 25 (expt n 3)) (* 10 (expt n 4)) (* (expt n 5)))))))\n",
    "  (let* ([n (sqrt (+ (* 4 (* 3 n)) 1))])\n    (and (integer? n)\n         (= n (floor n))\n         (exact-integer? n))))\n",
    "  (let ([d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))]\n        [d1 (floor d)]\n        [d2 (ceiling d)])\n    (and (= d1 d2)\n         (= (modulo d1 4) 1))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))))\n    (and (integer? d)\n         (zero? (modulo d 2)))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))))\n    (and (integer? d)\n         (integer? (/ d 2))\n         (integer? (/ (+ d 1) 5)))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) 1))))\n    (and (integer? d)\n         (= (modulo d 2) 1))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 2 n) (* 3 (sqr n)))))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 (* n n))))))\n    (and (integer? d) (zero? (modulo d 2)))))\n",
    "  (let* ([d (sqrt (+ (* 4 (* 10 n)) (* 9 (sqr n))))])\n    (and (integer? d)\n         (= d (floor d))\n         (= n (+ (* 10 (/ d 4)) (/ (- d 1) 2))))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 (* n n))))))\n    (and (integer? d)\n         (= (+ (* 4 (* 10 n)) (* 9 (* n n))) (* d d)))))\n",
    "  (let ([d (round (sqrt (+ (* 2 n) (* 2 (sqrt 10)))))]\n        [r (modulo n d)])\n    (and (= r 0)\n         (not (zero? (modulo d 10))))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)) (* 25 (expt n 3)) (* 25 (expt n 4)) (* 100 (expt n 5)) (* 10 (expt n 6)) (- 1 (expt n 7)))))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 2 n) (* -1 100))))))\n",
    "  (let* ([s (sqrt (+ (* 4 (* 10 n)) (* 9 (sqr n))))]\n         [s-int (inexact->exact (floor s))])\n    (and (= (modulo s-int 2) 1)\n         (= (modulo s-int 10) 9))))\n",
    "  (let ([d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))]\n        [d1 (floor d)]\n        [d2 (ceiling d)])\n    (cond [(= d1 d2)\n           (and (= (* 3 d1) (+ (* 2 n) 1))\n                (exact->inexact d1))]\n          [else #f])))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (sqrt 2)))))))\n",
    "  (let ((n-sqrt (sqrt n)))\n    (and (integer? n-sqrt)\n         (= (modulo n 10) 0)\n         (= (modulo n-sqrt 10) 0))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))))\n    (and (integer? d)\n         (zero? (modulo d 2))\n         (zero? (modulo (- d 2) 10)))))\n",
    "  (let* ([d (sqrt (+ (* 4 (+ (* 10 n) 1)) 1))])\n    (and (integer? d)\n         (integer? (/ (+ d 1) 4)))))\n",
    "  (and (integer? n)\n       (= n (* 10 (sqrt (+ 1 (* 100 (sqrt (+ 1 (* 100 n))))))))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) 1))))\n    (and (integer? d)\n         (zero? (modulo d 2))\n         (zero? (modulo (+ d 1) 5)))))\n",
    "  (let ([d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))]\n        [d1 (floor d)]\n        [d2 (ceiling d)])\n    (cond [(= d1 d2) (list n d1)]\n          [else #f])))\n",
    "  (let* ([d (sqrt (+ (* 4 (* 3 n)) 1))])\n    (and (integer? d) (= (modulo d 4) 1))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)))))))\n",
    "  (let ([d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))]\n        [d1 (floor d)]\n        [d2 (ceiling d)])\n    (and (= d1 d2)\n         (= (modulo d1 4) 1))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 (* n n))))))\n    (and (integer? d)\n         (= (modulo d 2) 1))))\n",
    "  (let ((delta (- (* n (n ( + 1) (* 3 n))) 2)))\n    (and (integer? delta)\n         (exact? delta)\n         (exact? (sqrt delta)))))\n",
    "  (let loop ((i 1))\n    (if (= (expt i 2) n)\n        #t\n        (if (&gt; (expt i 2) n)\n            #f\n            (loop (+ i 1))))))\n",
    "  (and (integer? n)\n       (zero? (modulo n 10))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))))\n    (and (integer? d)\n         (= (modulo d 2) 1)\n         (= (modulo d 5) 2))))\n",
    "  (let* ([n-sqrt (sqrt (+ (* 4 n) (* 100 n) (* 100 n) (* 25 n) (* 25 n)))])\n    (and (integer? n-sqrt)\n         (= n-sqrt (floor n-sqrt))\n         (= n-sqrt (+ (* 2 n) (* 5 n) (* 5 n) (* 5 n) (* 5 n) 5)))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))))\n    (and (integer? d)\n         (= d (floor d))\n         (= (* 10 n) (floor (* 10 n)))))\n  )\n",
    "  (let* ([d (sqrt (+ (* 4 (* 10 n)) (* 9 (- n 1))))])\n    (and (integer? d)\n         (= (modulo d 2) 1))))\n",
    "  (let* ([n-sqrt (sqrt (+ (* 4 n) (* 3 n) 1))]\n         [n-sqrt-int (inexact->exact (floor n-sqrt))])\n    (and (= n-sqrt n-sqrt-int)\n         (= (modulo n-sqrt-int 2) 1))))\n",
    "  (let ([d (sqrt (+ (* 10 n) (* 100 (expt n 2))))])\n    (and (integer? d)\n         (or (= d (floor d))\n             (= d (ceiling d))))))\n",
    "  (let loop ((i 1))\n    (if (= n (* i 10))\n        #t\n        (if (&lt; n (* i 10))\n            #f\n            (loop (+ i 1))))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)))))))\n",
    "  (let* ([d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))]\n         [d1 (floor d)]\n         [d2 (ceiling d)])\n    (and (= d1 d2)\n         (= (modulo d1 4) 3))))\n",
    "  (let ([d (round (sqrt (+ (* 2 n) (* 4 (expt 10 4)))))]\n        [d2 (* d d)])\n    (and (= d2 (+ (* 2 n) (* 4 (expt 10 4))))\n         (= (modulo d 2) 1))))\n",
    "  (let ([d (sqrt (+ (* 4 (* 10 n)) (* -1 (* 3 n n))))])\n    (and (integer? d)\n         (integer? (/ (+ d 3) 2)))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 25 1)))))\n  )\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 (* n n))))))\n    (and (integer? d)\n         (or (= d (truncate d))\n             (= d (ceiling d))))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))))\n    (and (integer? d)\n         (= (modulo d 2) 1))))\n",
    "  (let ([d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))]\n        [d-floor (floor d)])\n    (and (integer? d)\n         (= d-floor d)\n         (= d-floor (/ (+ 1 d) 2)))))\n",
    "  (let* ([delta (- (* n n) (* n 10) 1)]\n         [root (sqrt delta)])\n    (and (integer? root)\n         (zero? (- (* root root) delta)))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (sqr n)) 1)))))\n",
    "  (and (integer? n)\n       (= (round (sqrt (+ (* 2 (* 10 n)) (* 25 (sqr n)))))\n          (sqrt (+ (* 2 (* 10 n)) (* 25 (sqr n)))))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)))))\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)) (* -1 100))))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))))\n    (and (integer? d) (= (modulo d 2) 1))))\n",
    "  (let ((x (sqrt (+ (* 4 (* 10 n)) 1))))\n    (and (integer? x)\n         (= (modulo x 2) 1))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (sqrt 2)))))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))))\n    (and (integer? d)\n         (integer? (/ (+ d 3) 4)))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)))))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)) (* 25 (expt n 3)) (* 10 (expt n 4)) (- 1 (expt n 5)))))))\n",
    "  (let loop ([n n])\n    (cond\n      [(= n 0) true]\n      [(= (remainder n 10) 0) (loop (quotient n 10))]\n      [else false])))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 2 n) (* 2 (* n n)))))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (sqrt 2)) 1)))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 25 1)))))\n  )\n",
    "  (let* ([d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))]\n         [d1 (floor d)]\n         [d2 (ceiling d)])\n    (or (= d1 d2)\n        (= d1 (+ d2 1)))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))))\n    (and (integer? d)\n         (integer? (/ (+ d 3) 4)))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))))\n    (and (integer? d)\n         (= d (floor d))\n         (= (* 10 n) (- (* 3 d) n)))))\n",
    "  (and (integer? n)\n       (integer? (/ (- (sqrt (+ (* 3 (* n n)) 1)) 1) 10))))\n",
    "  (let* ([d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))]\n         [d1 (floor d)]\n         [d2 (ceiling d)])\n    (cond\n      [(= d1 d2)\n       (let* ([a1 (/ d1 2)]\n              [a2 (/ d2 2)])\n         (cond\n           [(= a1 a2)\n            (cons a1 a2)]\n           [else\n            #f]))]\n      [else\n       #f])))\n"
  ]
}