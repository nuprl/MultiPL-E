{
  "name": "mbpp_279_is_num_decagonal",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the nth decagonal number.\n(define (is_num_decagonal n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_279_is_num_decagonal.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_num_decagonal))\n    (check-equal? (candidate 3) 27)\n    (check-equal? (candidate 7) 175)\n    (check-equal? (candidate 10) 370)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let* ([m (sqrt (+ (* 4 (* 3 n)) 1))]\n         [m-int (floor m)])\n    (and (= m m-int)\n         (= (modulo m-int 4) 1))))\n",
    "  (let* ((d (sqrt (+ (* 4 (* 10 n)) (* 9 n n))))))\n    (and (integer? d)\n         (= (modulo d 2) 1)\n         (= (modulo d 5) 2))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 25 (sqr n)))))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 2 n) (* 2 (sqrt 10)) -1)))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))))\n    (and (integer? d)\n         (= (modulo d 2) 1)\n         (= (modulo d 5) 2))))\n",
    "  (let ([d (sqrt (+ (* 10 n) (* 100 (sqr n))))])\n    (and (integer? d)\n         (or (zero? (modulo d 10))\n             (zero? (modulo d 5))))))\n",
    "  (let* ([d (sqrt (+ (* 4 (* 10 n)) (* 9 (* n n))))])\n    (and (integer? d)\n         (= (modulo d 2) 1))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (sqrt 2)) 1)))))\n",
    "  (let ((x (sqrt (+ 1 (* 4 (* 10 n))))))\n    (and (integer? x)\n         (integer? (/ (+ x 1) 2)))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)))))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 25 1))))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))))\n    (and (integer? d)\n         (= (modulo d 2) 1))))\n",
    "  (let ([d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))]\n        [d1 (floor d)]\n        [d2 (ceiling d)])\n    (and (= d1 d2)\n         (= (modulo d1 4) 1))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))))\n    (and (integer? d)\n         (= d (floor d))\n         (or (= (modulo d 4) 1)\n             (= (modulo d 4) 3)))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 25 (sqr n)))))))\n",
    "  (let loop ([i 1])\n    (if (= (nth-decagonal i) n)\n        #t\n        (if (&lt; (nth-decagonal i) n)\n            (loop (+ i 1))\n            #f))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 100 (expt n 2)) 1))))\n    (and (integer? d)\n         (or (= (modulo d 2) 1)\n             (= (modulo d 2) -1)))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)))))\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)))))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))))\n    (and (integer? d)\n         (integer? (+ (* 2 n) (/ d 2)))\n         (integer? (+ (* 2 n) (/ d 2)))\n         (integer? (+ (* 2 n) (/ d 2)))\n         (integer? (+ (* 2 n) (/ d 2)))\n         (integer? (+ (* 2 n) (/ d 2)))\n         (integer? (+ (* 2 n) (/ d 2)))\n         (integer? (+ (* 2 n) (/ d 2)))\n         (integer? (+ (* 2 n) (/ d 2)))\n         (integer? (+ (* 2 n) (/ d 2)))\n         (integer? (+ (* 2 n) (/ d 2)))\n         (integer? (+ (* 2 n) (/ d 2))))))\n",
    "  (let* ((d (sqrt (+ (* 4 (* 10 n)) 100)))\n         (d1 (floor d))\n         (d2 (ceiling d)))\n    (and (= d1 d2)\n         (= (modulo d1 4) 1))))\n"
  ]
}