{
  "name": "mbpp_125_find_length",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_125_find_length.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (find_length_helper string count)\n    (cond\n      [(empty? string) count]\n      [(equal? (first string) #\\0) (find_length_helper (rest string) (+ count 1))]\n      [(equal? (first string) #\\1) (find_length_helper (rest string) (- count 1))]))\n  (find_length_helper string 0))\n",
    "  (define (helper string count)\n    (if (null? string)\n        count\n        (if (equal? (car string) #\\0)\n            (helper (cdr string) (+ count 1))\n            (helper (cdr string) (- count 1)))))\n  (helper string 0))\n",
    "  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [count 0])\n      (cond\n        [(= i len) count]\n        [(= j len) (loop (+ i 1) i count)]\n        [(= (string-ref string i) #\\0) (loop i (+ j 1) (+ count 1))]\n        [(= (string-ref string i) #\\1) (loop i (+ j 1) (- count 1))]))))\n",
    "  (let loop ([string string] [count 0])\n    (cond [(empty? string) count]\n          [(equal? (first string) #\\1) (loop (rest string) (+ count 1))]\n          [else (loop (rest string) (- count 1))])))\n",
    "  (let loop ([string string]\n             [count 0])\n    (if (null? string)\n        count\n        (if (equal? (car string) #\\1)\n            (loop (cdr string) (+ count 1))\n            (loop (cdr string) (- count 1))))))\n",
    "  (let loop ([string string] [count 0])\n    (if (empty? string)\n        count\n        (loop (rest string) (add1 count)))))\n",
    "  (let loop ([string string]\n             [count 0]\n             [max 0])\n    (cond [(empty? string) max]\n          [(char=? (first string) #\\1) (loop (rest string) (+ count 1) max)]\n          [(char=? (first string) #\\0) (loop (rest string) (- count 1) (max max (- count)))])))\n",
    "  (define (helper string count)\n    (cond\n      [(empty? string) count]\n      [(equal? (first string) #\\0) (helper (rest string) (+ count 1))]\n      [(equal? (first string) #\\1) (helper (rest string) (- count 1))]))\n  (helper string 0))\n",
    "  (let loop ([i 0] [j 0] [max 0])\n    (cond [(= i (string-length string)) max]\n          [(= (string-ref string i) #\\0) (loop (+ i 1) (+ j 1) (max max (- j i)))]\n          [else (loop (+ i 1) j (max max (- j i)))])))\n",
    "  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [max 0])\n      (cond\n        [(= i len) max]\n        [else\n         (let ([zero-count (count (string-ref string i) #\\0)]\n               [one-count (count (string-ref string i) #\\1)])\n           (loop (+ i 1) (+ j 1) (max max (- zero-count one-count))))]))))\n",
    "  (let loop ([string string] [count 0] [max 0])\n    (cond [(empty? string) max]\n          [else\n           (if (equal? (first string) #\\0)\n               (loop (rest string) (add1 count) (max max count))\n               (loop (rest string) (sub1 count) (max max (- count))))])))\n",
    "  (define (find_length_iter string count max)\n    (cond\n      [(empty? string) max]\n      [(= (first string) #\\0) (find_length_iter (rest string) (- count 1) (max max (- count)))]\n      [(= (first string) #\\1) (find_length_iter (rest string) (+ count 1) (max max count))]))\n  (find_length_iter string 0 0))\n",
    "  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [max-diff 0])\n      (cond\n        [(= i len) max-diff]\n        [(= j len) (loop (+ i 1) i max-diff)]\n        [else\n         (let ([diff (abs (- (count-char #\\1 (substring string i j))\n                             (count-char #\\0 (substring string i j))))])\n           (if (&gt; diff max-diff)\n               (loop i (+ j 1) diff)\n               (loop i (+ j 1) max-diff)))]))))\n",
    "  (let loop ((string string) (count 0))\n    (if (null? string)\n        count\n        (loop (cdr string) (+ count 1)))))\n",
    "  (let loop ([string string] [count 0])\n    (cond [(empty? string) count]\n          [(char=? (first string) #\\0) (loop (rest string) (+ count 1))]\n          [else (loop (rest string) (- count 1))])))\n",
    "  (let loop ((string string)\n             (count 0)\n             (max-count 0))\n    (cond ((null? string) max-count)\n          ((equal? (car string) #\\0)\n           (loop (cdr string)\n                 (add1 count)\n                 (if (&gt; count max-count) count max-count)))\n          (else (loop (cdr string)\n                      (sub1 count)\n                      (if (&gt; (- count) max-count) (- count) max-count))))))\n",
    "  (let loop ([string string] [count 0] [max 0])\n    (cond [(empty? string) max]\n          [(char=? (first string) #\\0) (loop (rest string) (add1 count) (if (> count max) count max))]\n          [else (loop (rest string) (sub1 count) (if (> (- count) max) (- count) max))])))\n",
    "  (define (find_length_iter string count)\n    (cond\n      [(empty? string) count]\n      [(equal? (first string) #\\0) (find_length_iter (rest string) (+ count 1))]\n      [(equal? (first string) #\\1) (find_length_iter (rest string) (- count 1))]))\n  (find_length_iter string 0))\n",
    "  (define (find_length_helper string count)\n    (cond\n      [(empty? string) count]\n      [(char=? (first string) #\\0) (find_length_helper (rest string) (add1 count))]\n      [(char=? (first string) #\\1) (find_length_helper (rest string) (sub1 count))]\n      [else (find_length_helper (rest string) count)]))\n  (find_length_helper string 0))\n",
    "  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [count 0])\n      (cond\n        [(= i len) count]\n        [(= j len) (loop (+ i 1) i count)]\n        [(= (string-ref string i) #\\1) (loop i (+ j 1) (+ count 1))]\n        [(= (string-ref string i) #\\0) (loop i (+ j 1) (- count 1))]))))\n",
    "  (string-length string))\n",
    "  (let loop ([string string] [count 0])\n    (if (empty? string)\n        count\n        (loop (rest string) (+ count (if (equal? (first string) #\\0) 1 -1))))))\n",
    "  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [max-len 0])\n      (cond\n        [(= i len) max-len]\n        [(= j len) (loop (+ i 1) i max-len)]\n        [else\n         (let ([zero-count (count (string-ref string j) #\\0)]\n               [one-count (count (string-ref string j) #\\1)])\n           (loop i (+ j 1) (max max-len (- zero-count one-count))))]))))\n",
    "  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [count 0])\n      (cond\n        [(= i len) count]\n        [(= (string-ref string i) #\\1) (loop (+ i 1) j (+ count 1))]\n        [else (loop (+ i 1) j (- count 1))]))))\n",
    "  (let ([len (string-length string)])\n    (let loop ([i 0] [j len])\n      (if (= i j)\n          0\n          (let ([sub (substring string i j)])\n            (let ([diff (abs (- (count-matches #\\0 sub) (count-matches #\\1 sub)))])\n              (max diff (loop (+ i 1) j))))))))\n",
    "  (cond\n    [(empty? string) 0]\n    [else (add1 (find_length (rest string)))]))\n",
    "  (define (find_length-iter string count max)\n    (cond\n      [(empty? string) max]\n      [(equal? (first string) #\\0) (find_length-iter (rest string) (- count 1) (max count max))]\n      [else (find_length-iter (rest string) (+ count 1) (max count max))]))\n  (find_length-iter string 0 0))\n",
    "  (define (find_length_iter string count max)\n    (cond\n      [(empty? string) max]\n      [(equal? (first string) #\\0) (find_length_iter (rest string) (- count 1) (max max (- count)))]\n      [(equal? (first string) #\\1) (find_length_iter (rest string) (+ count 1) (max max count))]))\n  (find_length_iter string 0 0))\n",
    "  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [count 0])\n      (cond [(= i len) count]\n            [(= (string-ref string i) #\\0)\n             (loop (+ i 1) j (+ count 1))]\n            [(= (string-ref string i) #\\1)\n             (loop (+ i 1) j (- count 1))]\n            [else (loop (+ i 1) j count)]))))\n",
    "  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [max-diff 0])\n      (cond\n        [(= i len) max-diff]\n        [(= j len) (loop (+ i 1) i max-diff)]\n        [(= (string-ref string i) #\\0)\n         (loop i (+ j 1) (max max-diff (- j i)))]\n        [else (loop i (+ j 1) max-diff)]))))\n",
    "  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [max-diff 0])\n      (cond\n        [(= i len) max-diff]\n        [(= j len) (loop (+ i 1) i max-diff)]\n        [else\n         (let ([diff (- (count-substrings string #\\1 i j)\n                        (count-substrings string #\\0 i j))])\n           (if (&gt; diff max-diff)\n               (loop i (+ j 1) diff)\n               (loop i (+ j 1) max-diff)))]))))\n",
    "  (let ((len (string-length string)))\n    (if (= len 1)\n        0\n        (let ((first (substring string 0 1))\n              (rest (substring string 1)))\n          (if (string=? first \"0\")\n              (find_length rest)\n              (+ 1 (find_length rest)))))))\n",
    "  (cond [(empty? string) 0]\n        [else (add1 (find_length (rest string)))]))\n",
    "  (define (find_length_helper string count max)\n    (cond\n      [(empty? string) max]\n      [(string=? (first string) \"0\") (find_length_helper (rest string) (- count 1) (max max (- count)))]\n      [(string=? (first string) \"1\") (find_length_helper (rest string) (+ count 1) (max max count))]))\n  (find_length_helper string 0 0))\n",
    "  (let loop ([string string] [count 0])\n    (cond [(empty? string) count]\n          [(equal? (first string) #\\1) (loop (rest string) (+ count 1))]\n          [else (loop (rest string) (- count 1))])))\n",
    "  (define (find_length_iter string count max)\n    (cond\n      [(empty? string) max]\n      [(equal? (first string) #\\0) (find_length_iter (rest string) (- count 1) (max max (- count)))]\n      [(equal? (first string) #\\1) (find_length_iter (rest string) (+ count 1) (max max count))]))\n  (find_length_iter string 0 0))\n",
    "  (let loop ((string string) (count 0) (max 0))\n    (cond ((null? string) max)\n          ((char=? (car string) #\\0) (loop (cdr string) (- count 1) (max count)))\n          ((char=? (car string) #\\1) (loop (cdr string) (+ count 1) (max count)))\n          (else (loop (cdr string) count max)))))\n",
    "  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [count 0] [max 0])\n      (cond\n        [(= i len) max]\n        [(= (string-ref string i) #\\0)\n         (loop (+ i 1) j (+ count 1) (max max (- count j)))]\n        [else\n         (loop (+ i 1) (+ j 1) count (max max (- count j)))]))))\n",
    "  (define (find_length_iter string length)\n    (cond ((null? string) length)\n          ((= (car string) #\\0) (find_length_iter (cdr string) (+ length 1)))\n          ((= (car string) #\\1) (find_length_iter (cdr string) (- length 1)))\n          (else (find_length_iter (cdr string) length))))\n  (find_length_iter string 0))\n",
    "  (define (find_length_iter string count max)\n    (cond\n      [(empty? string) max]\n      [(equal? (first string) #\\0) (find_length_iter (rest string) (- count 1) (max max (- count)))]\n      [(equal? (first string) #\\1) (find_length_iter (rest string) (+ count 1) (max max count))]))\n  (find_length_iter string 0 0))\n",
    "  (define (helper string count)\n    (cond\n      [(empty? string) count]\n      [(equal? (first string) #\\0) (helper (rest string) (- count 1))]\n      [(equal? (first string) #\\1) (helper (rest string) (+ count 1))]))\n  (helper string 0))\n",
    "  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [max 0])\n      (if (= i len)\n          max\n          (let ([c (string-ref string i)])\n            (if (or (= c #\\0) (= c #\\1))\n                (let ([diff (- j i)])\n                  (if (&gt; diff max)\n                      (loop (+ i 1) j diff)\n                      (loop (+ i 1) j max)))\n                (loop (+ i 1) (+ i 1) max)))))))\n</code>\n",
    "  (let loop ([string string]\n             [max-length 0]\n             [length 0])\n    (cond [(empty? string) max-length]\n          [(equal? (first string) #\\0)\n           (loop (rest string)\n                 (max max-length length)\n                 (add1 length))]\n          [else\n           (loop (rest string)\n                 (max max-length length)\n                 (sub1 length))])))\n",
    "  (define (helper string count)\n    (cond\n      [(empty? string) count]\n      [(equal? (first string) #\\0) (helper (rest string) (- count 1))]\n      [(equal? (first string) #\\1) (helper (rest string) (+ count 1))]))\n  (helper string 0))\n",
    "  (define (find_length_helper string length)\n    (if (null? string)\n        length\n        (if (equal? (car string) #\\0)\n            (find_length_helper (cdr string) (+ length 1))\n            (find_length_helper (cdr string) (- length 1)))))\n  (find_length_helper string 0))\n",
    "  (let loop ([string string] [count 0] [max_count 0])\n    (cond [(empty? string) max_count]\n          [(= (first string) #\\0) (loop (rest string) (add1 count) (max max_count count))]\n          [else (loop (rest string) (sub1 count) (max max_count (abs count)))])))\n",
    "  (define (find_length-iter string count max)\n    (cond [(empty? string) max]\n          [(char=? (first string) #\\0) (find_length-iter (rest string) (add1 count) max)]\n          [(char=? (first string) #\\1) (find_length-iter (rest string) (sub1 count) (max max count))]))\n  (find_length-iter string 0 0))\n",
    "  (let loop ([string string] [count 0])\n    (if (null? string)\n        count\n        (if (equal? (car string) #\\1)\n            (loop (cdr string) (+ count 1))\n            (loop (cdr string) (- count 1))))))\n",
    "  (let loop ([string string] [count 0])\n    (if (null? string)\n        count\n        (if (equal? (car string) #\\1)\n            (loop (cdr string) (+ count 1))\n            (loop (cdr string) (- count 1))))))\n",
    "  (let ([zero-count (count-zeros string)]\n        [one-count (count-ones string)])\n    (max zero-count one-count)))\n",
    "  (define (find_length-iter string count max)\n    (cond\n      [(empty? string) max]\n      [(equal? (first string) #\\0) (find_length-iter (rest string) (add1 count) max)]\n      [(equal? (first string) #\\1) (find_length-iter (rest string) (sub1 count) (max max (abs count)))]))\n  (find_length-iter string 0 0))\n",
    "  (let loop ([string string] [count 0])\n    (if (null? string)\n        count\n        (loop (cdr string) (+ count 1)))))\n",
    "  (define (find_length_iter string count)\n    (cond\n      [(empty? string) count]\n      [(equal? (first string) #\\0) (find_length_iter (rest string) (add1 count))]\n      [else (find_length_iter (rest string) (sub1 count))]))\n  (find_length_iter string 0))\n",
    "  (define (find_length_iter string count max)\n    (cond [(empty? string) max]\n          [(equal? (first string) #\\0) (find_length_iter (rest string) (add1 count) max)]\n          [(equal? (first string) #\\1) (find_length_iter (rest string) (sub1 count) (max max (abs count)))]))\n  (find_length_iter string 0 0))\n",
    "  (define (find_length_iter string count)\n    (cond\n      [(empty? string) count]\n      [(char=? (first string) #\\0) (find_length_iter (rest string) (+ count 1))]\n      [else (find_length_iter (rest string) (- count 1))]))\n  (find_length_iter string 0))\n",
    "  (define (find_length_helper string count max)\n    (cond\n      [(empty? string) max]\n      [(string-ref string 0) (find_length_helper (substring string 1) (add1 count) max)]\n      [else (find_length_helper (substring string 1) (sub1 count) (max (abs count) max))]))\n  (find_length_helper string 0 0))\n",
    "  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [max-diff 0] [zero-count 0] [one-count 0])\n      (cond [(= i len) max-diff]\n            [else\n             (let ([char (string-ref string i)])\n               (cond [(= char #\\0)\n                      (loop (+ i 1) j (max max-diff (- j i)) (+ zero-count 1) one-count)]\n                     [(= char #\\1)\n                      (loop (+ i 1) j (max max-diff (- j i)) zero-count (+ one-count 1))]\n                     [else\n                      (loop (+ i 1) j max-diff zero-count one-count)]))]))))\n",
    "  (let loop ([string string] [count 0])\n    (cond [(empty? string) count]\n          [(equal? (first string) #\\1) (loop (rest string) (+ count 1))]\n          [else (loop (rest string) (- count 1))])))\n",
    "  (let loop ([string string] [count 0] [max 0])\n    (cond [(empty? string) max]\n          [(char=? (first string) #\\0) (loop (rest string) (add1 count) (max max (- count)))]\n          [(char=? (first string) #\\1) (loop (rest string) (sub1 count) (max max (- count)))])))\n",
    "  (let loop ((string string) (count 0) (max 0))\n    (cond ((null? string) max)\n          ((equal? (car string) #\\0) (loop (cdr string) (add1 count) (max count)))\n          ((equal? (car string) #\\1) (loop (cdr string) (sub1 count) (max (abs count)))))))\n",
    "  (let loop ((string string) (count 0) (max 0))\n    (cond ((null? string) max)\n          ((equal? (car string) #\\0) (loop (cdr string) (- count 1) (max count)))\n          ((equal? (car string) #\\1) (loop (cdr string) (+ count 1) (max count)))\n          (else (error \"Invalid character\")))))\n",
    "  (define (find_length_helper string count)\n    (if (null? string)\n        count\n        (if (equal? (car string) #\\1)\n            (find_length_helper (cdr string) (+ count 1))\n            (find_length_helper (cdr string) (- count 1)))))\n  (find_length_helper string 0))\n",
    "  (let loop ([string string]\n             [count 0])\n    (cond [(empty? string) count]\n          [(equal? (first string) #\\0) (loop (rest string) (+ count 1))]\n          [else (loop (rest string) (- count 1))])))\n",
    "  (define (find_length-iter string count max)\n    (cond\n      [(empty? string) max]\n      [(equal? (first string) #\\0) (find_length-iter (rest string) (add1 count) max)]\n      [(equal? (first string) #\\1) (find_length-iter (rest string) (sub1 count) (max max (abs count)))]))\n  (find_length-iter string 0 0))\n",
    "  (let ((max-diff 0)\n        (count 0))\n    (for ([i (in-range (string-length string))])\n      (cond\n        [(string=? (string-ref string i) #\\0)\n         (set! count (add1 count))]\n        [(string=? (string-ref string i) #\\1)\n         (set! count (sub1 count))]))\n      (cond\n        [(> count max-diff)\n         (set! max-diff count)]\n        [(< count 0)\n         (set! count 0)]))\n    max-diff))\n",
    "  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [count 0])\n      (cond\n        [(= i len) count]\n        [(= (string-ref string i) #\\0)\n         (loop (+ i 1) j (+ count 1))]\n        [else\n         (loop (+ i 1) j (- count 1))]))))\n",
    "  (let loop ((string string)\n             (max-diff 0)\n             (diff 0))\n    (cond\n      [(null? string) max-diff]\n      [(equal? (car string) #\\0)\n       (loop (cdr string)\n             (max max-diff (abs (add1 diff)))\n             (add1 diff))]\n      [else\n       (loop (cdr string)\n             (max max-diff (abs (sub1 diff)))\n             (sub1 diff))])))\n",
    "  (define (find_length_helper string count length)\n    (cond\n      [(empty? string) length]\n      [(= (first string) #\\0) (find_length_helper (rest string) (- count 1) (max length (- count)))]\n      [(= (first string) #\\1) (find_length_helper (rest string) (+ count 1) (max length count))]))\n  (find_length_helper string 0 0))\n",
    "  (define (helper string count)\n    (cond ((null? string) count)\n          ((equal? (car string) #\\0) (helper (cdr string) (add1 count)))\n          ((equal? (car string) #\\1) (helper (cdr string) (sub1 count)))\n          (else (error \"Not a binary string\"))))\n  (helper string 0))\n",
    "  (let loop ((string string) (count 0))\n    (cond\n      [(null? string) count]\n      [(equal? (car string) #\\1) (loop (cdr string) (+ count 1))]\n      [else (loop (cdr string) (- count 1))])))\n",
    "  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [max 0])\n      (cond\n        [(= i len) max]\n        [(= j len) (loop (+ i 1) i max)]\n        [(= (string-ref string i) #\\0)\n         (loop i (+ j 1) (max max (- j i)))]\n        [else (loop i (+ j 1) max)]))))\n</code>\n",
    "  (let loop ([string string]\n             [count 0]\n             [max-count 0])\n    (cond [(empty? string) max-count]\n          [(char=? (first string) #\\0)\n           (loop (rest string)\n                 (add1 count)\n                 (if (&gt; count max-count) count max-count))]\n          [(char=? (first string) #\\1)\n           (loop (rest string)\n                 (sub1 count)\n                 (if (&gt; (abs count) max-count) (abs count) max-count))])))\n</code>\n",
    "  (define (find_length_iter string count max)\n    (cond\n      [(empty? string) max]\n      [(= (first string) #\\0) (find_length_iter (rest string) (add1 count) max)]\n      [(= (first string) #\\1) (find_length_iter (rest string) (sub1 count) (max max (abs count)))]))\n  (find_length_iter string 0 0))\n",
    "  (let ((count 0))\n    (for ([i (in-range (string-length string))])\n      (if (equal? (string-ref string i) #\\1)\n          (set! count (+ count 1))\n          (set! count (- count 1))))\n    count))\n",
    "  (string-length string))\n",
    "  (let loop ((string string) (count 0))\n    (cond ((null? string) count)\n          ((char=? (car string) #\\0) (loop (cdr string) (+ count 1)))\n          (else (loop (cdr string) (- count 1))))))\n",
    "  (let loop ([string string] [count 0])\n    (if (null? string)\n        count\n        (loop (cdr string) (+ count 1)))))\n",
    "  (define (find_length_helper string count)\n    (if (null? string)\n        count\n        (if (equal? (car string) #\\0)\n            (find_length_helper (cdr string) (- count 1))\n            (find_length_helper (cdr string) (+ count 1)))))\n  (find_length_helper string 0))\n",
    "  (define (find_length_helper string count max)\n    (cond\n      [(empty? string) max]\n      [(= (first string) #\\0) (find_length_helper (rest string) (- count 1) (max max (- count)))]\n      [(= (first string) #\\1) (find_length_helper (rest string) (+ count 1) (max max count))]))\n  (find_length_helper string 0 0))\n",
    "  (define (find_length_iter string count max-count)\n    (cond\n      [(empty? string) max-count]\n      [(equal? (first string) #\\0) (find_length_iter (rest string) (add1 count) max-count)]\n      [(equal? (first string) #\\1) (find_length_iter (rest string) (sub1 count) (max max-count (abs count)))]))\n  (find_length_iter string 0 0))\n",
    "  (define (helper string count)\n    (cond [(empty? string) count]\n          [(equal? (first string) #\\0) (helper (rest string) (+ count 1))]\n          [(equal? (first string) #\\1) (helper (rest string) (- count 1))]))\n  (helper string 0))\n",
    "  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [max-diff 0])\n      (cond\n        [(= i len) max-diff]\n        [(= j len) (loop (+ i 1) i max-diff)]\n        [else\n         (let ([diff (abs (- (count-char #\\0 string i j)\n                            (count-char #\\1 string i j)))]\n               [max-diff (if (&gt; diff max-diff) diff max-diff)])\n           (loop i (+ j 1) max-diff))]))))\n",
    "  (let loop ([string string] [count 0] [max 0])\n    (cond [(empty? string) max]\n          [(equal? (first string) #\\0) (loop (rest string) (add1 count) (max max count))]\n          [(equal? (first string) #\\1) (loop (rest string) (sub1 count) (max max (abs count)))])))\n",
    "  (define (find_length_iter string count)\n    (cond\n      [(empty? string) count]\n      [(equal? (first string) #\\0) (find_length_iter (rest string) (+ count 1))]\n      [(equal? (first string) #\\1) (find_length_iter (rest string) (- count 1))]))\n  (find_length_iter string 0))\n",
    "  (let loop ([string string] [count 0])\n    (cond [(empty? string) count]\n          [(equal? (first string) #\\0) (loop (rest string) (+ count 1))]\n          [else (loop (rest string) (- count 1))])))\n",
    "  (let ((zeros 0)\n        (ones 0)\n        (diff 0))\n    (for ([i (in-range (string-length string))])\n      (if (string=? (string-ref string i) #\\0)\n          (set! zeros (+ zeros 1))\n          (set! ones (+ ones 1)))\n      (set! diff (max diff (- zeros ones))))\n    diff))\n",
    "  (let loop ([string string] [count 0])\n    (if (null? string)\n        count\n        (loop (cdr string) (+ count 1)))))\n",
    "  (let ([len (string-length string)])\n    (let loop ([i 0] [j len] [max-diff 0])\n      (if (= i j)\n          max-diff\n          (let ([diff (- (count-char #\\1 (substring string i j))\n                         (count-char #\\0 (substring string i j)))])\n            (loop (+ i 1) j (max max-diff (abs diff))))))))\n",
    "  (define (find_length_helper string count max)\n    (cond\n      [(empty? string) max]\n      [(char=? (first string) #\\0) (find_length_helper (rest string) (add1 count) max)]\n      [(char=? (first string) #\\1) (find_length_helper (rest string) (sub1 count) (max max (abs count)))]))\n  (find_length_helper string 0 0))\n",
    "  (define (find_length_iter string count max)\n    (if (null? string)\n        max\n        (if (equal? (car string) #\\0)\n            (find_length_iter (cdr string) (- count 1) (max max (- count)))\n            (find_length_iter (cdr string) (+ count 1) (max max count)))))\n  (find_length_iter string 0 0))\n",
    "  (let ([len (string-length string)])\n    (let ([zeros (count-zeros string)]\n          [ones (count-ones string)])\n      (let ([diff (- zeros ones)])\n        (if (= diff 0)\n            len\n            (let ([sub-string (substring string 1 len)])\n              (find_length sub-string)))))))\n",
    "  (let loop ([string string]\n             [zeros 0]\n             [ones 0]\n             [max 0])\n    (if (null? string)\n        max\n        (let ([char (string-ref string 0)])\n          (cond\n            [(char=? char #\\0)\n             (loop (substring string 1)\n                   (+ zeros 1)\n                   ones\n                   (max max (- zeros ones)))]\n            [(char=? char #\\1)\n             (loop (substring string 1)\n                   zeros\n                   (+ ones 1)\n                   (max max (- zeros ones)))])))))\n",
    "  (let loop ((string string) (count 0) (max 0))\n    (cond ((null? string) max)\n          ((char=? (car string) #\\0) (loop (cdr string) (add1 count) (max count max)))\n          ((char=? (car string) #\\1) (loop (cdr string) (sub1 count) (max count max)))\n          (else (error \"Invalid character\")))))\n",
    "  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [count 0])\n      (cond\n        [(= i len) count]\n        [(= (string-ref string i) #\\1) (loop (+ i 1) j (+ count 1))]\n        [else (loop (+ i 1) j (- count 1))]))))\n",
    "  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [max 0])\n      (cond\n        [(= i len) max]\n        [(= j len) (loop (+ i 1) i max)]\n        [else\n         (let ([diff (- (count-matches #\\1 (substring string i j))\n                        (count-matches #\\0 (substring string i j)))])\n           (loop i (+ j 1) (max max diff)))]))))\n",
    "  (let ([diff (abs (- (count-substrings \"0\" string) (count-substrings \"1\" string)))])\n    (if (empty? (cdr string))\n        diff\n        (max diff (find_length (cdr string))))))\n",
    "  (let loop ([string string] [count 0])\n    (if (string-null? string)\n        count\n        (loop (substring string 1) (+ count 1)))))\n",
    "  (define (find_length_helper string count)\n    (cond\n      [(empty? string) count]\n      [(equal? (first string) #\\0) (find_length_helper (rest string) (add1 count))]\n      [else (find_length_helper (rest string) (sub1 count))]))\n  (find_length_helper string 0))\n",
    "  (define (helper string count)\n    (if (empty? string)\n        count\n        (if (equal? (first string) #\\0)\n            (helper (rest string) (- count 1))\n            (helper (rest string) (+ count 1)))))\n  (helper string 0))\n",
    "  (define (find_length_iter string count max)\n    (cond\n      [(empty? string) max]\n      [(equal? (first string) #\\0) (find_length_iter (rest string) (- count 1) (max max (- count)))]\n      [(equal? (first string) #\\1) (find_length_iter (rest string) (+ count 1) (max max count))]))\n  (find_length_iter string 0 0))\n",
    "  (let loop ([string string] [count 0])\n    (cond [(empty? string) count]\n          [(equal? (first string) #\\0) (loop (rest string) (+ count 1))]\n          [else (loop (rest string) (- count 1))])))\n",
    "  (define (helper string count)\n    (cond\n      [(empty? string) count]\n      [(equal? (first string) #\\0) (helper (rest string) (add1 count))]\n      [(equal? (first string) #\\1) (helper (rest string) (sub1 count))]))\n  (define (find_max string count)\n    (cond\n      [(empty? string) count]\n      [(> (helper string 0) count) (find_max (rest string) (helper string 0))]\n      [else (find_max (rest string) count)]))\n  (find_max string 0))\n",
    "  (let loop ([string string]\n             [count 0]\n             [max_count 0])\n    (cond [(empty? string) max_count]\n          [(char=? (first string) #\\0)\n           (loop (rest string)\n                 (add1 count)\n                 (if (&gt; count max_count) count max_count))]\n          [else\n           (loop (rest string)\n                 (sub1 count)\n                 (if (&gt; (- count) max_count) (- count) max_count))])))\n",
    "  (define (find_length-iter string count max)\n    (cond\n      [(empty? string) max]\n      [(equal? (first string) #\\0) (find_length-iter (rest string) (- count 1) (max max (- count)))]\n      [(equal? (first string) #\\1) (find_length-iter (rest string) (+ count 1) (max max count))]))\n  (find_length-iter string 0 0))\n",
    "  (define (helper string)\n    (if (empty? string)\n        0\n        (if (equal? (first string) #\\0)\n            (- 1 (helper (rest string)))\n            (+ 1 (helper (rest string))))))\n  (define (find_max string)\n    (if (empty? string)\n        0\n        (max (helper string) (find_max (rest string)))))\n  (find_max string))\n",
    "  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [max-diff 0])\n      (cond\n        [(= i len) max-diff]\n        [(= j len) (loop (+ i 1) i max-diff)]\n        [else\n         (let ([diff (- (count-char #\\1 string i j) (count-char #\\0 string i j))])\n           (loop i (+ j 1) (max max-diff (abs diff))))]))))\n",
    "  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [max 0])\n      (cond\n        [(= i len) max]\n        [(= j len) (loop (+ i 1) i max)]\n        [else\n         (let ([count0 (count (string-ref string j) #\\0)]\n               [count1 (count (string-ref string j) #\\1)])\n           (loop i (+ j 1) (max max (- count0 count1))))]))))\n",
    "  (define (find_length-iter string count max)\n    (cond ((null? string) max)\n          ((= (car string) #\\0) (find_length-iter (cdr string) (- count 1) (max max (- count))))\n          ((= (car string) #\\1) (find_length-iter (cdr string) (+ count 1) (max max count)))))\n  (find_length-iter string 0 0))\n</code>\n",
    "  (let loop ([string string]\n             [count 0])\n    (cond\n      [(empty? string) count]\n      [(equal? (first string) #\\1) (loop (rest string) (+ count 1))]\n      [else (loop (rest string) (- count 1))])))\n",
    "  (let ((count 0)\n        (max_count 0))\n    (for ([i (in-range (string-length string))])\n      (cond\n        [(string=? (string-ref string i) #\\0) (set! count (add1 count))]\n        [(string=? (string-ref string i) #\\1) (set! count (sub1 count))]))\n      (if (&gt; count max_count)\n          (set! max_count count)))\n    max_count))\n",
    "  (let ([length (string-length string)])\n    (if (string=? string \"\")\n        0\n        (if (string=? (substring string 0 1) \"0\")\n            (add1 (find_length (substring string 1 length)))\n            (sub1 (find_length (substring string 1 length)))))))\n",
    "  (let loop ([string string] [count 0] [max 0])\n    (cond [(empty? string) max]\n          [(char=? (first string) #\\0)\n           (loop (rest string) (add1 count) (if (&gt; count max) count max))]\n          [else (loop (rest string) (sub1 count) (if (&gt; count max) count max))])))\n",
    "  (define (find_length_helper string count)\n    (if (empty? string)\n        count\n        (if (= (first string) #\\0)\n            (find_length_helper (rest string) (+ count 1))\n            (find_length_helper (rest string) (- count 1)))))\n  (find_length_helper string 0))\n",
    "  (define (helper string count)\n    (cond\n      [(empty? string) count]\n      [(equal? (first string) #\\0) (helper (rest string) (add1 count))]\n      [(equal? (first string) #\\1) (helper (rest string) (sub1 count))]))\n  (define (helper2 string count max)\n    (cond\n      [(empty? string) max]\n      [(> (abs (helper string count)) max) (helper2 (rest string) count (abs (helper string count)))]\n      [else (helper2 (rest string) count max)]))\n  (helper2 string 0 0))\n",
    "  (define (find_length_iter string count max)\n    (cond [(empty? string) max]\n          [(equal? (first string) #\\0) (find_length_iter (rest string) (- count 1) (max max (- count)))]\n          [(equal? (first string) #\\1) (find_length_iter (rest string) (+ count 1) (max max count))]))\n  (find_length_iter string 0 0))\n",
    "  (define (helper string count)\n    (if (null? string)\n        count\n        (if (equal? (car string) #\\0)\n            (helper (cdr string) (+ count 1))\n            (helper (cdr string) (- count 1)))))\n  (helper string 0))\n",
    "  (define (find_length_iter string count max)\n    (cond\n      [(empty? string) max]\n      [(equal? (first string) #\\0) (find_length_iter (rest string) (- count 1) (max max (- count)))]\n      [(equal? (first string) #\\1) (find_length_iter (rest string) (+ count 1) (max max count))]))\n  (find_length_iter string 0 0))\n",
    "  (define (helper string count)\n    (cond ((null? string) count)\n          ((equal? (car string) #\\0) (helper (cdr string) (- count 1)))\n          ((equal? (car string) #\\1) (helper (cdr string) (+ count 1)))\n          (else (error \"Invalid character\"))))\n  (helper string 0))\n",
    "  (define (sub-string string)\n    (if (null? string)\n        '()\n        (append (sub-string (cdr string))\n                (map (lambda (x) (append (car x) (cdr string)))\n                     (sub-string (cdr string))))))\n  (define (count-0s string)\n    (if (null? string)\n        0\n        (+ (if (= (car string) #\\0) 1 0)\n           (count-0s (cdr string)))))\n  (define (count-1s string)\n    (if (null? string)\n        0\n        (+ (if (= (car string) #\\1) 1 0)\n           (count-1s (cdr string)))))\n  (define (max-diff sub-strings)\n    (if (null? sub-strings)\n        0\n        (max (abs (- (count-0s (car sub-strings))\n                     (count-1s (car sub-strings))))\n             (max-diff (cdr sub-strings)))))\n  (max-diff (sub-string string)))\n",
    "  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [max-diff 0])\n      (cond\n        [(= i len) max-diff]\n        [(= j len) (loop (+ i 1) i max-diff)]\n        [(char=? (string-ref string i) #\\1) (loop i (+ j 1) (max max-diff (- j i)))]\n        [else (loop i (+ j 1) max-diff)]))))\n",
    "  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [count 0])\n      (cond\n        [(= i len) count]\n        [(= j len) (loop (+ i 1) i count)]\n        [(= (string-ref string i) #\\1) (loop i (+ j 1) (max count (- j i)))]\n        [else (loop i (+ j 1) count)]))))\n</code>\n",
    "  (let loop ((string string)\n             (count 0)\n             (max-count 0))\n    (cond ((null? string) max-count)\n          ((eq? (car string) #\\0) (loop (cdr string) (add1 count) max-count))\n          ((eq? (car string) #\\1) (loop (cdr string) (sub1 count) (max max-count (abs count)))))))\n",
    "  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [count 0])\n      (if (= i len)\n          count\n          (if (string=? (substring string i (+ i 1)) \"0\")\n              (loop (+ i 1) j (- count 1))\n              (loop (+ i 1) j (+ count 1)))))))\n",
    "  (let loop ([string string] [count 0])\n    (cond [(empty? string) count]\n          [(equal? (first string) #\\0) (loop (rest string) (+ count 1))]\n          [else (loop (rest string) (- count 1))])))\n",
    "  (let loop ([string string] [count 0] [max 0])\n    (cond\n      [(empty? string) max]\n      [(equal? (first string) #\\0) (loop (rest string) (add1 count) (if (&gt; count max) count max))]\n      [else (loop (rest string) (sub1 count) (if (&gt; count max) count max))])))\n",
    "  (let loop ([string string] [count 0])\n    (cond [(empty? string) count]\n          [(equal? (first string) #\\0) (loop (rest string) (+ count 1))]\n          [else (loop (rest string) (- count 1))])))\n",
    "  (define (helper string count)\n    (cond\n      [(empty? string) count]\n      [(equal? (first string) #\\0) (helper (rest string) (- count 1))]\n      [(equal? (first string) #\\1) (helper (rest string) (+ count 1))]))\n  (helper string 0))\n",
    "  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [max-diff 0])\n      (cond\n        [(= i len) max-diff]\n        [else\n         (let ([diff (- j i)])\n           (cond\n             [(= (string-ref string i) #\\0)\n              (loop (+ i 1) (+ j 1) (max max-diff diff))]\n             [else\n              (loop (+ i 1) (- j 1) (max max-diff diff))]))]))))\n",
    "  (let loop ([string string] [count 0])\n    (cond [(empty? string) count]\n          [(equal? (first string) #\\0) (loop (rest string) (+ count 1))]\n          [else (loop (rest string) (- count 1))])))\n",
    "  (let loop ((string string) (count 0))\n    (cond ((null? string) count)\n          ((char=? (car string) #\\0) (loop (cdr string) (+ count 1)))\n          ((char=? (car string) #\\1) (loop (cdr string) (- count 1)))\n          (else (error \"Invalid character\")))))\n",
    "  (string-length string))\n",
    "  (cond\n    [(empty? string) 0]\n    [else (+ 1 (find_length (rest string)))]))\n",
    "  (let loop ([string string] [count 0])\n    (if (empty? string)\n        count\n        (loop (rest string) (+ count (if (char=? (first string) #\\1) 1 0))))))\n",
    "  (let loop ([string string] [count 0])\n    (cond [(empty? string) count]\n          [(equal? (first string) #\\0) (loop (rest string) (add1 count))]\n          [else (loop (rest string) (sub1 count))])))\n",
    "  (let loop ([string string] [count 0])\n    (cond\n      [(empty? string) count]\n      [(char=? (first string) #\\1) (loop (rest string) (+ count 1))]\n      [else (loop (rest string) (- count 1))])))\n",
    "  (define (find_length_iter string count)\n    (cond ((null? string) count)\n          ((equal? (car string) #\\0) (find_length_iter (cdr string) (+ count 1)))\n          ((equal? (car string) #\\1) (find_length_iter (cdr string) (- count 1)))\n          (else (error \"Invalid character\"))))\n  (find_length_iter string 0))\n",
    "  (define (find_length_iter string count max)\n    (cond ((null? string) max)\n          ((= (car string) 0) (find_length_iter (cdr string) (- count 1) (max max count)))\n          ((= (car string) 1) (find_length_iter (cdr string) (+ count 1) (max max count)))))\n  (find_length_iter string 0 0))\n",
    "  (define (find_length_iter string count max)\n    (cond\n      [(empty? string) max]\n      [(equal? (first string) #\\0) (find_length_iter (rest string) (add1 count) max)]\n      [(equal? (first string) #\\1) (find_length_iter (rest string) (sub1 count) (max max (abs count)))]))\n  (find_length_iter string 0 0))\n",
    "  (let loop ([string string] [length 0])\n    (if (null? string)\n        length\n        (loop (cdr string) (+ length 1)))))\n",
    "  (let loop ([string string]\n             [zeros 0]\n             [ones 0]\n             [max 0])\n    (cond [(empty? string) max]\n          [else\n           (let ([char (first string)])\n             (cond [(equal? char #\\0)\n                    (loop (rest string) (+ zeros 1) ones (max max (- zeros ones)))]\n                   [(equal? char #\\1)\n                    (loop (rest string) zeros (+ ones 1) (max max (- zeros ones)))]))])))\n",
    "  (let loop ([string string] [count 0])\n    (cond [(empty? string) count]\n          [(equal? (first string) #\\0) (loop (rest string) (add1 count))]\n          [else (loop (rest string) (sub1 count))])))\n",
    "  (cond\n    [(empty? string) 0]\n    [else (+ 1 (find_length (rest string)))]))\n",
    "  (let loop ([string string] [count 0])\n    (if (null? string)\n        count\n        (loop (cdr string) (+ count 1)))))\n",
    "  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [max-diff 0])\n      (cond\n        [(= i len) max-diff]\n        [else\n         (let ([diff (- j i)])\n           (cond\n             [(= (string-ref string i) #\\0)\n              (loop (+ i 1) (+ j 1) (max max-diff diff))]\n             [else\n              (loop (+ i 1) j (max max-diff diff))]))]))))\n",
    "  (define (helper string acc)\n    (cond\n      [(empty? string) acc]\n      [(equal? (first string) #\\0) (helper (rest string) (add1 acc))]\n      [else (helper (rest string) (sub1 acc))]))\n  (helper string 0))\n",
    "  (let loop ((string string)\n             (count 0)\n             (max-count 0))\n    (cond ((null? string) max-count)\n          ((equal? (car string) #\\0)\n           (loop (cdr string) (add1 count) max-count))\n          ((equal? (car string) #\\1)\n           (loop (cdr string) (sub1 count) (max max-count (abs count)))))))\n",
    "  (let ([len (string-length string)])\n    (define (helper start end)\n      (if (= start end)\n          0\n          (let ([sub (substring string start end)])\n            (max (helper (+ start 1) end)\n                 (if (string=? sub \"0\")\n                     (count-ones sub)\n                     (count-zeros sub))))))\n    (helper 0 len)))\n",
    "  (let ((count 0)\n        (max_count 0))\n    (for ([i (in-range (string-length string))])\n      (cond\n        [(string=? (string-ref string i) #\\0) (set! count (add1 count))]\n        [(string=? (string-ref string i) #\\1) (set! count (sub1 count))]\n        [else (error \"Invalid character\")]))\n      (cond\n        [(> count max_count) (set! max_count count)]\n        [(< count 0) (set! count 0)]))\n    max_count))\n",
    "  (let loop ((string string) (count 0) (max 0))\n    (cond\n      [(empty? string) max]\n      [(char=? (first string) #\\0)\n       (loop (rest string) (add1 count) (max count (- count max)))]\n      [else\n       (loop (rest string) (sub1 count) (max count (- count max)))])))\n",
    "  (define (find_length_iter string count max)\n    (cond\n      [(empty? string) max]\n      [(string-contains? string #\\0) (find_length_iter (cdr string) (+ count 1) max)]\n      [(string-contains? string #\\1) (find_length_iter (cdr string) (- count 1) max)]\n      [else (find_length_iter (cdr string) count (max count max))]))\n  (find_length_iter string 0 0))\n",
    "  (let loop ((string string) (count 0) (max-count 0))\n    (cond ((null? string) max-count)\n          ((equal? (car string) #\\0) (loop (cdr string) (add1 count) max-count))\n          ((equal? (car string) #\\1) (loop (cdr string) (sub1 count) (max max-count (abs count)))))))\n",
    "  (define (find_length_helper string count)\n    (cond\n      [(empty? string) count]\n      [(= (first string) #\\0) (find_length_helper (rest string) (+ count 1))]\n      [else (find_length_helper (rest string) (- count 1))]))\n  (find_length_helper string 0))\n",
    "  (let loop ((string string)\n             (length 0)\n             (max-length 0))\n    (cond\n      [(null? string) max-length]\n      [(equal? (car string) #\\0)\n       (loop (cdr string)\n             (add1 length)\n             (if (&gt; length max-length) length max-length))]\n      [else\n       (loop (cdr string)\n             (sub1 length)\n             (if (&gt; (abs length) max-length) (abs length) max-length))])))\n",
    "  (let loop ([string string] [count 0])\n    (cond [(empty? string) count]\n          [(char=? (first string) #\\1) (loop (rest string) (+ count 1))]\n          [else (loop (rest string) (- count 1))])))\n",
    "  (let loop ((string string)\n             (count 0)\n             (max-count 0))\n    (cond ((null? string) max-count)\n          ((equal? (car string) #\\0)\n           (loop (cdr string)\n                 (add1 count)\n                 (if (&gt; count max-count) count max-count)))\n          ((equal? (car string) #\\1)\n           (loop (cdr string)\n                 (sub1 count)\n                 (if (&gt; count max-count) count max-count)))\n          (else (loop (cdr string) count max-count)))))\n</code>\n",
    "  (cond\n    [(empty? string) 0]\n    [else (+ (find_length (rest string)) 1)]))\n",
    "  (let loop ([string string] [count 0])\n    (cond [(empty? string) count]\n          [(equal? (first string) #\\1) (loop (rest string) (+ count 1))]\n          [else (loop (rest string) (- count 1))])))\n",
    "  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [max-diff 0] [count-0 0] [count-1 0])\n      (cond [(= i len) max-diff]\n            [else\n             (cond [(= (string-ref string i) #\\0)\n                    (loop (+ i 1) j (max max-diff (- count-0 count-1)) (+ count-0 1) count-1)]\n                   [else\n                    (loop (+ i 1) j (max max-diff (- count-0 count-1)) count-0 (+ count-1 1))])]))))\n",
    "  (let ((count 0))\n    (for ([i (in-range (string-length string))])\n      (if (equal? (string-ref string i) #\\0)\n          (set! count (+ count 1))\n          (set! count (- count 1))))\n    count))\n",
    "  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [max 0])\n      (if (= i len)\n          max\n          (let ([zero-count (count (lambda (x) (= x #\\0)) (substring string i j))]\n                [one-count (count (lambda (x) (= x #\\1)) (substring string i j))])\n            (let ([diff (- zero-count one-count)])\n              (if (&lt; diff 0)\n                  (loop (+ i 1) (+ j 1) max)\n                  (loop i (+ j 1) (max max diff)))))))))\n",
    "  (let loop ([string string] [length 0])\n    (cond [(empty? string) length]\n          [else (loop (rest string) (+ length 1))])))\n",
    "  (let loop ([string string] [count 0] [max 0])\n    (cond [(empty? string) max]\n          [(equal? (first string) #\\0) (loop (rest string) (add1 count) (max count max))]\n          [else (loop (rest string) (sub1 count) (max count max))])))\n",
    "  (let loop ([string string] [zeros 0] [ones 0] [max-diff 0])\n    (cond [(empty? string) max-diff]\n          [else\n           (let ([char (first string)])\n             (cond [(equal? char #\\0)\n                    (loop (rest string) (+ zeros 1) ones (max max-diff (- zeros ones)))]\n                   [(equal? char #\\1)\n                    (loop (rest string) zeros (+ ones 1) (max max-diff (- zeros ones)))]))])))\n",
    "  (let loop ([string string]\n             [count 0]\n             [max-count 0])\n    (cond [(empty? string) max-count]\n          [(char=? (first string) #\\0) (loop (rest string) (add1 count) max-count)]\n          [(char=? (first string) #\\1) (loop (rest string) (sub1 count) (max max-count (abs count)))])))\n",
    "  (let loop ([i 0] [j 0] [max 0])\n    (cond [(= i (string-length string)) max]\n          [(= (string-ref string i) #\\0) (loop (+ i 1) (+ j 1) (max max (- j i)))]\n          [else (loop (+ i 1) (- j 1) (max max (- j i)))])))\n",
    "  (define (find_length_iter string count max)\n    (cond\n      [(empty? string) max]\n      [(char=? (first string) #\\0) (find_length_iter (rest string) (- count 1) (max max (- count)))]\n      [(char=? (first string) #\\1) (find_length_iter (rest string) (+ count 1) (max max count))]))\n  (find_length_iter string 0 0))\n",
    "  (let loop ([string string] [count 0])\n    (if (string-empty? string)\n        count\n        (loop (substring string 1) (+ count (string-length (regexp-match #rx\"^0*\" string)))))))\n",
    "  (let loop ([string string]\n             [count 0])\n    (if (null? string)\n        count\n        (loop (cdr string)\n              (+ count (if (equal? (car string) #\\1) 1 0))))))\n",
    "  (let loop ([string string] [count 0])\n    (cond\n      [(empty? string) count]\n      [(equal? (first string) #\\1) (loop (rest string) (+ count 1))]\n      [else (loop (rest string) (- count 1))])))\n",
    "  (define (find_length_iter string count max)\n    (cond\n      [(empty? string) max]\n      [(string-contains? string \"0\")\n       (find_length_iter (string-drop string 1) (- count 1) (max max count))]\n      [else\n       (find_length_iter (string-drop string 1) (+ count 1) (max max count))]))\n  (find_length_iter string 0 0))\n",
    "  (let loop ((string string)\n             (count 0)\n             (max-count 0))\n    (cond ((null? string) max-count)\n          ((equal? (car string) #\\0)\n           (loop (cdr string)\n                 (add1 count)\n                 (if (&gt; count max-count) count max-count)))\n          ((equal? (car string) #\\1)\n           (loop (cdr string)\n                 (sub1 count)\n                 (if (&gt; (abs count) max-count) (abs count) max-count)))\n          (else (error \"Invalid character\")))))\n",
    "  (let loop ([string string] [count 0])\n    (if (empty? string)\n        count\n        (loop (rest string) (+ count (string-length (regexp-match #rx\"^0*\" string)))))))\n",
    "  (define (find_length_iter string count max)\n    (cond [(empty? string) max]\n          [(= (first string) #\\0) (find_length_iter (rest string) (add1 count) max)]\n          [(= (first string) #\\1) (find_length_iter (rest string) (sub1 count) (max max count))]))\n  (find_length_iter string 0 0))\n",
    "  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [max-diff 0] [zeros 0] [ones 0])\n      (cond\n        [(= i len) max-diff]\n        [(= j len) (loop (+ i 1) (+ i 1) max-diff 0 0)]\n        [else\n         (let ([char (string-ref string j)])\n           (cond\n             [(= char #\\0) (loop i (+ j 1) (max max-diff (- j i)) (+ zeros 1) ones)]\n             [(= char #\\1) (loop i (+ j 1) (max max-diff (- j i)) zeros (+ ones 1))]))]))))\n",
    "  (let loop ([string string] [count 0])\n    (cond [(empty? string) count]\n          [(char=? (first string) #\\1) (loop (rest string) (+ count 1))]\n          [else (loop (rest string) (- count 1))])))\n",
    "  (define (find_length_iter string count)\n    (cond\n      [(empty? string) count]\n      [(= (first string) #\\0) (find_length_iter (rest string) (+ count 1))]\n      [else (find_length_iter (rest string) (- count 1))]))\n  (find_length_iter string 0))\n",
    "  (define (find_length_helper string count)\n    (cond\n      [(empty? string) count]\n      [(equal? (first string) #\\0) (find_length_helper (rest string) (+ count 1))]\n      [else (find_length_helper (rest string) (- count 1))]))\n  (find_length_helper string 0))\n",
    "  (let loop ([string string] [count 0])\n    (cond [(empty? string) count]\n          [(equal? (first string) #\\0) (loop (rest string) (+ count 1))]\n          [else (loop (rest string) (- count 1))])))\n",
    "  (let ([len (string-length string)])\n    (let loop ([i 0] [j len] [max-diff 0])\n      (if (= i j)\n          max-diff\n          (let ([diff (- (count-char #\\1 (substring string i j))\n                         (count-char #\\0 (substring string i j)))])\n            (loop (+ i 1) j (max max-diff (abs diff))))))))\n",
    "  (let loop ([string string] [count 0])\n    (if (null? string)\n        count\n        (loop (cdr string) (+ count 1)))))\n",
    "  (define (find_length_iter string count max)\n    (cond ((null? string) max)\n          ((= (car string) #\\0) (find_length_iter (cdr string) (- count 1) (max max (- count))))\n          ((= (car string) #\\1) (find_length_iter (cdr string) (+ count 1) (max max count)))))\n  (find_length_iter string 0 0))\n",
    "  (let loop ([string string] [count 0])\n    (cond [(empty? string) count]\n          [(equal? (first string) #\\0) (loop (rest string) (+ count 1))]\n          [(equal? (first string) #\\1) (loop (rest string) (- count 1))])))\n",
    "  (let ((len (string-length string)))\n    (if (= len 0)\n        0\n        (+ 1 (find_length (substring string 1 len))))))\n",
    "  (let loop ([string string] [count 0])\n    (cond [(empty? string) count]\n          [(equal? (first string) #\\0) (loop (rest string) (add1 count))]\n          [else (loop (rest string) (sub1 count))])))\n",
    "  (let loop ([string string] [count 0])\n    (if (string-empty? string)\n        count\n        (loop (substring string 1) (+ count (string-length (regexp-match #rx\"1\" string)))))))\n",
    "  (let loop ([string string] [count 0])\n    (if (null? string)\n        count\n        (loop (cdr string) (+ count 1)))))\n",
    "  (define (helper string count)\n    (cond\n      [(empty? string) count]\n      [(equal? (first string) #\\0) (helper (rest string) (add1 count))]\n      [else (helper (rest string) (sub1 count))]))\n  (helper string 0))\n",
    "  (define (find_length_helper string count max)\n    (if (null? string)\n        max\n        (let ((next-count (if (equal? (car string) #\\0) (- count 1) (+ count 1))))\n          (find_length_helper (cdr string) next-count (max max (abs next-count))))))\n  (find_length_helper string 0 0))\n",
    "  (define (helper string count)\n    (cond\n      [(empty? string) count]\n      [(equal? (first string) #\\0) (helper (rest string) (+ count 1))]\n      [else (helper (rest string) (- count 1))]))\n  (helper string 0))\n",
    "  (define (find_length_iter string count max)\n    (cond\n      [(empty? string) max]\n      [(equal? (first string) #\\0) (find_length_iter (rest string) (add1 count) max)]\n      [(equal? (first string) #\\1) (find_length_iter (rest string) (sub1 count) (max max (abs count)))]))\n  (find_length_iter string 0 0))\n",
    "  (define (find_length-iter string count max-count)\n    (cond\n      [(empty? string) max-count]\n      [(equal? (first string) #\\0) (find_length-iter (rest string) (add1 count) max-count)]\n      [(equal? (first string) #\\1) (find_length-iter (rest string) (sub1 count) (max max-count (abs count)))]))\n  (find_length-iter string 0 0))\n",
    "  (let loop ([string string] [count 0] [max 0])\n    (cond\n      [(empty? string) max]\n      [(char=? (first string) #\\0) (loop (rest string) (+ count 1) max)]\n      [(char=? (first string) #\\1) (loop (rest string) (- count 1) (max (abs count) max))])))\n",
    "  (let loop ([string string]\n             [count 0]\n             [max-count 0])\n    (cond [(empty? string) max-count]\n          [(char=? (first string) #\\0)\n           (loop (rest string)\n                 (add1 count)\n                 (if (&gt; count max-count) count max-count))]\n          [else (loop (rest string)\n                      (sub1 count)\n                      (if (&gt; count max-count) count max-count))])))\n",
    "  (let loop ((string string)\n             (count 0)\n             (max 0))\n    (cond ((null? string) max)\n          ((= (car string) #\\0) (loop (cdr string) (add1 count) (max count (- count max))))\n          ((= (car string) #\\1) (loop (cdr string) (sub1 count) (max count (- count max)))))))\n",
    "  (define (find_length_helper string count)\n    (cond\n      [(empty? string) count]\n      [(equal? (first string) #\\0) (find_length_helper (rest string) (+ count 1))]\n      [(equal? (first string) #\\1) (find_length_helper (rest string) (- count 1))]))\n  (find_length_helper string 0))\n",
    "  (let loop ((string string)\n             (count 0)\n             (max-count 0))\n    (cond ((null? string) max-count)\n          ((equal? (car string) #\\0)\n           (loop (cdr string)\n                 (add1 count)\n                 (if (&gt; count max-count) count max-count)))\n          (else\n           (loop (cdr string)\n                 (sub1 count)\n                 (if (&gt; count max-count) count max-count))))))\n</code>\n",
    "  (let loop ([string string]\n             [count 0])\n    (if (string-empty? string)\n        count\n        (if (equal? (string-ref string 0) #\\1)\n            (loop (substring string 1) (+ count 1))\n            (loop (substring string 1) (- count 1))))))\n",
    "  (let loop ([string string] [count 0])\n    (cond [(empty? string) count]\n          [else (loop (rest string) (+ count (if (equal? (first string) #\\1) 1 0)))])))\n",
    "  (let* ([length (string-length string)]\n         [zeros (count (lambda (c) (char=? c #\\0)) string)]\n         [ones (count (lambda (c) (char=? c #\\1)) string)])\n    (if (zero? length)\n        0\n        (max (abs (- zeros ones))\n             (find_length (substring string 1 length))))))\n",
    "  (let ([len (string-length string)])\n    (let loop ([i 0] [j len] [max-diff 0])\n      (if (= i j)\n          max-diff\n          (let ([diff (abs (- (count-char #\\1 string i j)\n                              (count-char #\\0 string i j)))])\n            (loop (+ i 1) j (max diff max-diff)))))))\n"
  ]
}