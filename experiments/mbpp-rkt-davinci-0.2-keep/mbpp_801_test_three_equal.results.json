{
  "name": "mbpp_801_test_three_equal",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_801_test_three_equal.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= x z)) 3]\n    [(or (= x y) (= x z) (= y z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond ((and (= x y) (= x z)) 3)\n        ((or (= x y) (= x z) (= y z)) 2)\n        (else 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (equal? x y) (equal? x z)) 3]\n    [(or (equal? x y) (equal? x z) (equal? y z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (equal? x y) (equal? x z)) 3]\n    [(or (equal? x y) (equal? x z) (equal? y z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (equal? x y) (equal? y z)) 3]\n    [(or (equal? x y) (equal? y z) (equal? x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (equal? x y) (equal? y z)) 3]\n    [(or (equal? x y) (equal? y z) (equal? x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (equal? x y) (equal? y z)) 3]\n    [(or (equal? x y) (equal? y z) (equal? x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (if (and (= x y) (= y z))\n      3\n      (if (or (= x y) (= y z) (= x z))\n          2\n          0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond ((and (= x y) (= y z)) 3)\n        ((or (= x y) (= y z) (= x z)) 2)\n        (else 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond ((and (= x y) (= y z)) 3)\n        ((or (= x y) (= y z) (= x z)) 2)\n        (else 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond ((and (= x y) (= y z)) 3)\n        ((or (= x y) (= y z) (= x z)) 2)\n        (else 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= x z)) 3]\n    [(or (= x y) (= x z) (= y z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond ((and (= x y) (= y z)) 3)\n        ((or (= x y) (= y z) (= x z)) 2)\n        (else 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (equal? x y) (equal? y z)) 3]\n    [(or (equal? x y) (equal? y z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond ((and (= x y) (= x z)) 3)\n        ((or (= x y) (= x z) (= y z)) 2)\n        (else 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (equal? x y) (equal? y z)) 3]\n    [(or (equal? x y) (equal? y z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond ((and (= x y) (= y z)) 3)\n        ((or (= x y) (= y z) (= x z)) 2)\n        (else 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond ((and (= x y) (= y z)) 3)\n        ((or (= x y) (= y z) (= x z)) 2)\n        (else 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond ((and (= x y) (= y z)) 3)\n        ((or (= x y) (= y z) (= x z)) 2)\n        (else 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond ((and (= x y) (= y z)) 3)\n        ((or (= x y) (= y z) (= x z)) 2)\n        (else 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond ((and (= x y) (= y z)) 3)\n        ((or (= x y) (= y z) (= x z)) 2)\n        (else 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= x z)) 3]\n    [(or (= x y) (= x z) (= y z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= x z)) 3]\n    [(or (= x y) (= x z) (= y z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (equal? x y) (equal? y z)) 3]\n    [(or (equal? x y) (equal? y z) (equal? x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (equal? x y) (equal? y z)) 3]\n    [(or (equal? x y) (equal? y z) (equal? x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond ((and (= x y) (= y z)) 3)\n        ((or (= x y) (= y z) (= x z)) 2)\n        (else 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond ((and (= x y) (= y z)) 3)\n        ((or (= x y) (= y z) (= x z)) 2)\n        (else 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= x z)) 3]\n    [(or (= x y) (= x z) (= y z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (equal? x y) (equal? y z)) 3]\n    [(or (equal? x y) (equal? y z) (equal? x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond ((and (= x y) (= x z)) 3)\n        ((or (= x y) (= x z) (= y z)) 2)\n        (else 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond ((and (= x y) (= y z)) 3)\n        ((or (= x y) (= y z) (= x z)) 2)\n        (else 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond ((and (= x y) (= y z)) 3)\n        ((or (= x y) (= y z) (= x z)) 2)\n        (else 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond ((and (= x y) (= y z)) 3)\n        ((or (= x y) (= x z) (= y z)) 2)\n        (else 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666123445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (if (and (= x y) (= y z))\n      3\n      (if (or (= x y) (= x z) (= y z))\n          2\n          0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666123445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (equal? x y) (equal? y z)) 3]\n    [(or (equal? x y) (equal? y z) (equal? x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (equal? x y) (equal? x z)) 3]\n    [(or (equal? x y) (equal? x z) (equal? y z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond ((and (= x y) (= y z)) 3)\n        ((or (= x y) (= y z) (= x z)) 2)\n        (else 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (if (and (= x y) (= y z))\n      3\n      (if (or (= x y) (= y z) (= x z))\n          2\n          0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (equal? x y) (equal? y z)) 3]\n    [(or (equal? x y) (equal? y z) (equal? x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond ((and (= x y) (= y z)) 3)\n        ((or (= x y) (= y z) (= x z)) 2)\n        (else 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= x z)) 3]\n    [(or (= x y) (= x z) (= y z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond ((and (= x y) (= y z)) 3)\n        ((or (= x y) (= y z) (= x z)) 2)\n        (else 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= x z)) 3]\n    [(or (= x y) (= x z) (= y z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond ((and (= x y) (= y z)) 3)\n        ((or (= x y) (= y z) (= x z)) 2)\n        (else 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (equal? x y) (equal? y z)) 3]\n    [(or (equal? x y) (equal? y z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond ((and (= x y) (= x z)) 3)\n        ((or (= x y) (= x z) (= y z)) 2)\n        (else 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond ((and (= x y) (= y z)) 3)\n        ((or (= x y) (= y z) (= x z)) 2)\n        (else 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (equal? x y) (equal? y z)) 3]\n    [(or (equal? x y) (equal? y z) (equal? x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond ((and (= x y) (= x z)) 3)\n        ((or (= x y) (= x z) (= y z)) 2)\n        (else 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond ((and (= x y) (= y z)) 3)\n        ((or (= x y) (= y z) (= x z)) 2)\n        (else 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    ((and (= x y) (= x z)) 3)\n    ((or (= x y) (= x z) (= y z)) 2)\n    (else 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666123445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond ((and (= x y) (= y z)) 3)\n        ((or (= x y) (= y z) (= x z)) 2)\n        (else 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (equal? x y) (equal? y z)) 3]\n    [(or (equal? x y) (equal? y z) (equal? x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond ((and (= x y) (= y z)) 3)\n        ((or (= x y) (= y z) (= x z)) 2)\n        (else 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (equal? x y) (equal? x z)) 3]\n    [(or (equal? x y) (equal? x z) (equal? y z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond ((and (= x y) (= y z)) 3)\n        ((or (= x y) (= y z) (= x z)) 2)\n        (else 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond ((and (= x y) (= y z)) 3)\n        ((or (= x y) (= y z) (= x z)) 2)\n        (else 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (equal? x y) (equal? y z)) 3]\n    [(or (equal? x y) (equal? y z) (equal? x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond ((and (= x y) (= x z)) 3)\n        ((or (= x y) (= x z) (= y z)) 2)\n        (else 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (equal? x y) (equal? y z)) 3]\n    [(or (equal? x y) (equal? y z) (equal? x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond ((and (= x y) (= y z)) 3)\n        ((or (= x y) (= y z) (= x z)) 2)\n        (else 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond ((and (= x y) (= y z)) 3)\n        ((or (= x y) (= y z) (= x z)) 2)\n        (else 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond ((and (= x y) (= y z)) 3)\n        ((or (= x y) (= y z) (= x z)) 2)\n        (else 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= x z)) 3]\n    [(or (= x y) (= x z) (= y z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond ((and (= x y) (= x z)) 3)\n        ((or (= x y) (= x z) (= y z)) 2)\n        (else 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond ((and (= x y) (= y z)) 3)\n        ((or (= x y) (= y z) (= x z)) 2)\n        (else 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond ((and (= x y) (= y z)) 3)\n        ((or (= x y) (= y z) (= x z)) 2)\n        (else 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond ((and (= x y) (= y z)) 3)\n        ((or (= x y) (= y z) (= x z)) 2)\n        (else 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (if (and (= x y) (= y z))\n      3\n      (if (or (= x y) (= y z) (= x z))\n          2\n          0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (equal? x y) (equal? y z)) 3]\n    [(or (equal? x y) (equal? y z) (equal? x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond ((and (= x y) (= x z)) 3)\n        ((or (= x y) (= x z) (= y z)) 2)\n        (else 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond ((and (= x y) (= y z)) 3)\n        ((or (= x y) (= y z) (= x z)) 2)\n        (else 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond ((and (= x y) (= y z)) 3)\n        ((or (= x y) (= y z) (= x z)) 2)\n        (else 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (equal? x y) (equal? y z)) 3]\n    [(or (equal? x y) (equal? y z) (equal? x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (if (and (= x y) (= y z))\n      3\n      (if (or (= x y) (= y z) (= x z))\n          2\n          0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    ((and (= x y) (= y z)) 3)\n    ((or (= x y) (= y z) (= x z)) 2)\n    (else 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666123445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= x z)) 3]\n    [(or (= x y) (= x z) (= y z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond ((and (= x y) (= y z)) 3)\n        ((or (= x y) (= x z) (= y z)) 2)\n        (else 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666123445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond [(and (= x y) (= x z)) 3]\n        [(or (= x y) (= x z) (= y z)) 2]\n        [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666123445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond ((and (= x y) (= y z)) 3)\n        ((or (= x y) (= y z) (= x z)) 2)\n        (else 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(= x y)\n     (cond\n       [(= y z)\n        (cond\n          [(= x z)\n           (displayln \"All three numbers are equal\")]\n          [else\n           (displayln \"Two numbers are equal\")])]\n       [else\n        (displayln \"Two numbers are equal\")])]\n    [else\n     (displayln \"No numbers are equal\")]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666123445,
      "stdout": "All three numbers are equal\nNo numbers are equal\nNo numbers are equal\n",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjcqn762v.rkt:24:4\nactual:     #<void>\nexpected:   3\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjcqn762v.rkt:25:4\nactual:     #<void>\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjcqn762v.rkt:26:4\nactual:     #<void>\nexpected:   2\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond ((and (= x y) (= x z)) 3)\n        ((or (= x y) (= x z) (= y z)) 2)\n        (else 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= x z)) 3]\n    [(or (= x y) (= x z) (= y z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond ((and (= x y) (= x z)) 3)\n        ((or (= x y) (= x z) (= y z)) 2)\n        (else 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (if (and (= x y) (= y z))\n      3\n      (if (or (= x y) (= y z) (= x z))\n          2\n          0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond ((and (= x y) (= y z)) 3)\n        ((or (= x y) (= y z) (= x z)) 2)\n        (else 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= x z)) 3]\n    [(or (= x y) (= x z) (= y z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(= x y) (if (= x z) 3 2)]\n    [(= x z) 2]\n    [(= y z) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666123445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond ((and (= x y) (= x z)) 3)\n        ((or (= x y) (= x z) (= y z)) 2)\n        (else 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (equal? x y) (equal? y z)) 3]\n    [(or (equal? x y) (equal? y z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (equal? x y) (equal? y z)) 3]\n    [(or (equal? x y) (equal? y z) (equal? x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (equal? x y) (equal? y z)) 3]\n    [(or (equal? x y) (equal? y z) (equal? x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond ((and (= x y) (= y z)) 3)\n        ((or (= x y) (= y z) (= x z)) 2)\n        (else 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond ((and (= x y) (= x z)) 3)\n        ((or (= x y) (= x z) (= y z)) 2)\n        (else 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (if (and (= x y) (= y z))\n      3\n      (if (or (= x y) (= y z) (= x z))\n          2\n          0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (equal? x y) (equal? y z)) 3]\n    [(or (equal? x y) (equal? y z) (equal? x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond ((and (= x y) (= y z)) 3)\n        ((or (= x y) (= y z) (= x z)) 2)\n        (else 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= x z)) 3]\n    [(or (= x y) (= x z) (= y z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= x z)) 3]\n    [(or (= x y) (= x z) (= y z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond ((and (= x y) (= y z)) 3)\n        ((or (= x y) (= y z) (= x z)) 2)\n        (else 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= x z)) 3]\n    [(or (= x y) (= x z) (= y z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (equal? x y) (equal? y z)) 3]\n    [(or (equal? x y) (equal? y z) (equal? x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (equal? x y) (equal? y z)) 3]\n    [(or (equal? x y) (equal? y z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= x z)) 3]\n    [(or (= x y) (= x z) (= y z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    ((and (= x y) (= y z)) 3)\n    ((or (= x y) (= y z) (= x z)) 2)\n    (else 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666123445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (if (and (= x y) (= y z))\n      3\n      (if (or (= x y) (= y z) (= x z))\n          2\n          0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (if (and (= x y) (= y z))\n      3\n      (if (or (= x y) (= y z) (= x z))\n          2\n          0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond ((and (= x y) (= y z)) 3)\n        ((or (= x y) (= y z) (= x z)) 2)\n        (else 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (equal? x y) (equal? y z)) 3]\n    [(or (equal? x y) (equal? y z) (equal? x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond ((and (= x y) (= x z)) 3)\n        ((or (= x y) (= x z) (= y z)) 2)\n        (else 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (equal? x y) (equal? y z)) 3]\n    [(or (equal? x y) (equal? y z) (equal? x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]\n    [(or (= x y) (= y z) (= x z)) 2]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-equal? (candidate 1 1 1) 3)\n    (check-equal? (candidate -1 -2 -3) 0)\n    (check-equal? (candidate 1 2 2) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}