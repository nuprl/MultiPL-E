{
  "name": "mbpp_19_test_duplicate",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find whether a given array of integers contains any duplicate element.\n(define (test_duplicate arraynums)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_19_test_duplicate.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_duplicate))\n    (check-equal? (candidate (list 1 2 3 4 5)) #f)\n    (check-equal? (candidate (list 1 2 3 4 4)) #t)\n    (check-equal? (candidate (list 1 1 2 2 3 3 4 4 5)) #t)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let ([arraynums (sort arraynums <)])\n    (for/or ([i (in-range (sub1 (length arraynums)))])\n      (equal? (list-ref arraynums i) (list-ref arraynums (add1 i))))))\n",
    "  (let ([nums (sort arraynums <)])\n    (for/or ([i (in-range (sub1 (length nums)))]\n             #:when (equal? (list-ref nums i) (list-ref nums (add1 i))))\n      #t)))\n",
    "  (let loop ([arraynums arraynums]\n             [duplicate? #f])\n    (if (null? arraynums)\n        duplicate?\n        (let ([first (car arraynums)]\n              [rest (cdr arraynums)])\n          (if (member first rest)\n              #t\n              (loop rest duplicate?))))))\n",
    "  (let loop ([arraynums arraynums] [duplicate #f])\n    (if (null? arraynums)\n        duplicate\n        (if (member (car arraynums) (cdr arraynums))\n            (loop (cdr arraynums) #t)\n            (loop (cdr arraynums) duplicate)))))\n",
    "  (let ([hash (make-hash)])\n    (for ([i (in-list arraynums)])\n      (hash-set! hash i (add1 (hash-ref hash i 0))))\n    (for ([i (in-list arraynums)])\n      (if (> (hash-ref hash i 0) 1)\n          (return #t)))))\n",
    "  (let ([nums (sort arraynums <)])\n    (for/or ([i (in-range (sub1 (length nums)))])\n      (equal? (list-ref nums i) (list-ref nums (add1 i))))))\n",
    "  (let loop ([arraynums arraynums]\n             [duplicate #f])\n    (cond [(empty? arraynums) duplicate]\n          [(member (first arraynums) (rest arraynums)) (loop (rest arraynums) #t)]\n          [else (loop (rest arraynums) duplicate)])))\n",
    "  (let loop ([arraynums arraynums]\n             [duplicate #f])\n    (cond [(empty? arraynums) duplicate]\n          [(member (first arraynums) (rest arraynums)) #t]\n          [else (loop (rest arraynums) duplicate)])))\n",
    "  (let ([arraynums (sort arraynums <)])\n    (for/or ([i (in-range (sub1 (length arraynums)))]\n             #:when (equal? (list-ref arraynums i) (list-ref arraynums (add1 i))))\n      #t)))\n",
    "  (let ([arraynums (sort arraynums <)])\n    (for/or ([i (in-range (sub1 (vector-length arraynums)))])\n      (equal? (vector-ref arraynums i) (vector-ref arraynums (add1 i))))))\n",
    "  (let ([arraynums (sort arraynums <)])\n    (for/or ([i (in-range (sub1 (length arraynums)))])\n      (equal? (list-ref arraynums i) (list-ref arraynums (add1 i))))))\n",
    "  (let loop ([arraynums arraynums] [duplicate #f])\n    (if (null? arraynums)\n        duplicate\n        (if (member (car arraynums) (cdr arraynums))\n            #t\n            (loop (cdr arraynums) duplicate)))))\n",
    "  (let loop ((arraynums arraynums) (duplicate? #f))\n    (if (null? arraynums)\n        duplicate?\n        (if (member (car arraynums) (cdr arraynums))\n            #t\n            (loop (cdr arraynums) duplicate?)))))\n",
    "  (let ([s (set)])\n    (for ([i (in-list arraynums)])\n      (if (set-member? s i)\n          (return #t)\n          (set-add! s i)))\n    #f))\n",
    "  (let loop ([arraynums arraynums]\n             [duplicate #f])\n    (if (null? arraynums)\n        duplicate\n        (if (member (car arraynums) (cdr arraynums))\n            (loop (cdr arraynums) #t)\n            (loop (cdr arraynums) duplicate)))))\n",
    "  (define (helper arraynums)\n    (cond [(empty? arraynums) #f]\n          [(member (first arraynums) (rest arraynums)) #t]\n          [else (helper (rest arraynums))]))\n  (helper arraynums))\n",
    "  (let ([arraynums (sort arraynums <)])\n    (for/or ([i (in-range (sub1 (length arraynums)))]\n             #:when (equal? (list-ref arraynums i) (list-ref arraynums (add1 i))))\n      #t)))\n",
    "  (let loop ([arraynums arraynums]\n             [duplicate #f])\n    (if (null? arraynums)\n        duplicate\n        (if (member (car arraynums) (cdr arraynums))\n            #t\n            (loop (cdr arraynums) duplicate)))))\n",
    "  (let loop ([arraynums arraynums]\n             [duplicate #f])\n    (if (empty? arraynums)\n        duplicate\n        (if (member (first arraynums) (rest arraynums))\n            #t\n            (loop (rest arraynums) duplicate)))))\n",
    "  (let loop ([arraynums arraynums]\n             [duplicate #f])\n    (if (null? arraynums)\n        duplicate\n        (if (member (car arraynums) (cdr arraynums))\n            (loop (cdr arraynums) #t)\n            (loop (cdr arraynums) duplicate)))))\n"
  ]
}