{
  "name": "mbpp_748_capital_words_spaces",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to put spaces between words starting with capital letters in a given string.\n(define (capital_words_spaces str1)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_748_capital_words_spaces.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate capital_words_spaces))\n    (check-equal? (candidate \"Python\") \"Python\")\n    (check-equal? (candidate \"PythonProgrammingExamples\") \"Python Programming Examples\")\n    (check-equal? (candidate \"GetReadyToBeCodingFreak\") \"Get Ready To Be Coding Freak\")\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (regexp-replace* #rx\"[A-Z][a-z]+\" str1 (lambda (x) (string-append \" \" x))))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z][a-z]+\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (define (capital_words_spaces_iter str1 str2)\n    (if (empty? str1)\n        str2\n        (if (char-upper-case? (string-ref str1 0))\n            (capital_words_spaces_iter (substring str1 1 (string-length str1)) (string-append str2 \" \" (string (string-ref str1 0))))\n            (capital_words_spaces_iter (substring str1 1 (string-length str1)) (string-append str2 (string (string-ref str1 0)))))))\n  (capital_words_spaces_iter str1 \"\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z][a-z]+\" str1 (lambda (match) (string-append \" \" match))))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z][a-z]*)\" str1 #:replace \" \\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z][a-z]+\" str1 (lambda (x) (string-append \" \" x))))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (string-join (map (lambda (x) (if (char-upcase? (string-ref x 0)) (string-append x \" \") x)) (string-split str1 #\\space)) \" \"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"\\\\b[A-Z][a-z]+\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z][a-z]*)\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (let loop ([str str1] [result '()])\n    (cond [(empty? str) (list->string (reverse result))]\n          [(char-upcase? (first str))\n           (loop (rest str) (cons #\\space (cons (first str) result)))]\n          [else (loop (rest str) (cons (first str) result))])))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 #:replace \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 #:replace \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z][a-z]+)\" str1 #:replace \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z][a-z]+\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"\\\\b[A-Z][a-z]+\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n</code>\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"\\\\([A-Z]\\\\)\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z][a-z]+\" str1 (lambda (x) (string-append \" \" x))))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z][a-z]*)\" str1 \" \\\\1\"))\n",
    "  (define (capital_words_spaces_iter str1 i)\n    (if (= i (string-length str1))\n        str1\n        (if (and (char-upper-case? (string-ref str1 i))\n                 (not (char-upper-case? (string-ref str1 (- i 1)))))\n            (string-append (substring str1 0 i) \" \" (capital_words_spaces_iter (substring str1 i) (+ i 1)))\n            (capital_words_spaces_iter str1 (+ i 1)))))\n  (capital_words_spaces_iter str1 0))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (define (capital? c)\n    (char-upcase c))\n  (define (capital_words_spaces_iter str1 str2)\n    (cond ((string=? str1 \"\") str2)\n          ((capital? (string-ref str1 0))\n           (capital_words_spaces_iter (substring str1 1) (string-append str2 \" \" (string (string-ref str1 0)))))\n          (else (capital_words_spaces_iter (substring str1 1) (string-append str2 (string (string-ref str1 0)))))))\n  (capital_words_spaces_iter str1 \"\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (let ([str2 (string-append str1 \" \")])\n    (for/fold ([str3 \"\"]\n               [i 0])\n        ([j (in-range (string-length str2))])\n      (cond\n        [(char-upper-case? (string-ref str2 j))\n         (string-append str3 (string-append (substring str2 i j) \" \"))]\n        [else str3]))))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (let ([str2 (string-append str1 \" \")])\n    (string-join\n     (for/list ([i (in-range (string-length str2))])\n       (if (and (char-upper-case? (string-ref str2 i))\n                (not (char-upper-case? (string-ref str2 (+ i 1)))))\n           (string-append (string-ref str2 i) \" \")\n           (string-ref str2 i)))\n     \"\")))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (char-upper-case? (string-ref x 0))\n          (string-append x \" \")\n          x))\n    (string-split str1 #\\space))\n   \"\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"\\\\([A-Z]\\\\)\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 #:replace \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z][a-z]*)\" str1 #:replace \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (string-join (map (lambda (x) (if (char-upper-case? (string-ref x 0)) (string-append x \" \") x)) (string-split str1)) \"\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (define (capital_words_spaces_helper str1 str2)\n    (cond ((string=? str1 \"\") str2)\n          ((char-upper-case? (string-ref str1 0))\n           (capital_words_spaces_helper (substring str1 1)\n                                        (string-append str2 \" \" (string (string-ref str1 0)))))\n          (else (capital_words_spaces_helper (substring str1 1)\n                                             (string-append str2 (string (string-ref str1 0)))))))\n  (capital_words_spaces_helper str1 \"\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z][a-z]+\" str1 (lambda (x) (string-append \" \" x))))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"\\\\([A-Z]\\\\)\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z][a-z]+\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 #:replace \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 #:replace \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (define (helper str1 result)\n    (cond\n      [(empty? str1) result]\n      [(char-upper-case? (first str1)) (helper (rest str1) (append result (list (first str1) #\\space)))]\n      [else (helper (rest str1) (append result (list (first str1))))]))\n  (helper str1 '()))\n",
    "  (regexp-replace* #rx\"\\\\([A-Z]\\\\)\" str1 #:replace \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (define (capital_words_spaces_helper str1 str2)\n    (if (empty? str1)\n        str2\n        (if (char-upper-case? (string-ref str1 0))\n            (capital_words_spaces_helper (substring str1 1) (string-append str2 \" \" (string (string-ref str1 0))))\n            (capital_words_spaces_helper (substring str1 1) (string-append str2 (string (string-ref str1 0)))))))\n  (capital_words_spaces_helper str1 \"\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z][a-z]+\" str1 (lambda (x) (string-append \" \" x))))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 #:replace \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"\\\\b[A-Z][a-z]*\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"\\\\b[A-Z][a-z]+\" str1 \" \\\\0\"))\n",
    "  (define (helper str1)\n    (cond\n      [(empty? str1) empty]\n      [(char-upcase? (first str1)) (cons (first str1) (cons #\\space (helper (rest str1))))]\n      [else (cons (first str1) (helper (rest str1)))]))\n  (helper str1))\n",
    "  (regexp-replace* #px\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (define (capital_words_spaces_helper str1 str2)\n    (if (empty? str1)\n        str2\n        (if (char-upcase? (first str1))\n            (capital_words_spaces_helper (rest str1) (string-append str2 \" \" (first str1)))\n            (capital_words_spaces_helper (rest str1) (string-append str2 (first str1))))))\n  (capital_words_spaces_helper str1 \"\"))\n",
    "  (regexp-replace* #rx\"([A-Z][a-z]*)\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z][a-z]*)\" str1 #:replace \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"\\\\b[A-Z][a-z]+\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"\\\\b[A-Z]\\\\w*\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z][a-z]+\" str1 (lambda (x) (string-append \" \" x))))\n",
    "  (regexp-replace* #rx\"[A-Z][a-z]+\" str1 (lambda (s) (string-append \" \" s))))\n",
    "  (let loop ([str str1] [result '()])\n    (cond [(empty? str) (string-join (reverse result) \"\")]\n          [(char-upcase? (first str)) (loop (rest str) (cons (first str) (cons #\\space result)))]\n          [else (loop (rest str) (cons (first str) result))])))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 #:replace \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 #:replace \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"\\\\b[A-Z][a-z]*\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z][a-z]*\" str1 (lambda (x) (string-append \" \" x))))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (char-upper-case? (string-ref x 0))\n          (string-append x \" \")\n          x))\n    (string-split str1 #\\space))\n   #\\space))\n",
    "  (regexp-replace* #rx\"[A-Z][a-z]*\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z][a-z]+\" str1 (lambda (x) (string-append \" \" x))))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z][a-z]+\" str1 (lambda (x) (string-append \" \" x))))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n"
  ]
}