{
  "name": "mbpp_249_intersection_array",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the intersection of two arrays.\n(define (intersection_array array_nums1 array_nums2)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_249_intersection_array.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate intersection_array))\n    (check-equal? (candidate (list 1 2 3 5 7 8 9 10) (list 1 2 4 8 9)) (list 1 2 8 9))\n    (check-equal? (candidate (list 1 2 3 5 7 8 9 10) (list 3 5 7 9)) (list 3 5 7 9))\n    (check-equal? (candidate (list 1 2 3 5 7 8 9 10) (list 10 20 30 40)) (list 10))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (filter (lambda (x) (member x array_nums2)) array_nums1))\n",
    "  (define (intersection_array_helper array_nums1 array_nums2)\n    (cond ((null? array_nums1) '())\n          ((member (car array_nums1) array_nums2)\n           (cons (car array_nums1)\n                 (intersection_array_helper (cdr array_nums1) array_nums2)))\n          (else (intersection_array_helper (cdr array_nums1) array_nums2))))\n  (intersection_array_helper array_nums1 array_nums2))\n",
    "  (filter (lambda (x) (member x array_nums2)) array_nums1))\n",
    "  (define (intersection_array_iter array_nums1 array_nums2 result)\n    (cond\n      [(empty? array_nums1) result]\n      [(member (first array_nums1) array_nums2)\n       (intersection_array_iter (rest array_nums1) array_nums2 (cons (first array_nums1) result))]\n      [else (intersection_array_iter (rest array_nums1) array_nums2 result)]))\n  (intersection_array_iter array_nums1 array_nums2 '()))\n",
    "  (cond\n    [(empty? array_nums1) empty]\n    [(member (first array_nums1) array_nums2)\n     (cons (first array_nums1) (intersection_array (rest array_nums1) array_nums2))]\n    [else (intersection_array (rest array_nums1) array_nums2)]))\n",
    "  (filter (lambda (x) (member x array_nums2)) array_nums1))\n",
    "  (define (intersection_array_helper array_nums1 array_nums2)\n    (if (null? array_nums1)\n        '()\n        (if (member (car array_nums1) array_nums2)\n            (cons (car array_nums1) (intersection_array_helper (cdr array_nums1) array_nums2))\n            (intersection_array_helper (cdr array_nums1) array_nums2))))\n  (intersection_array_helper array_nums1 array_nums2))\n",
    "  (filter (lambda (x) (member x array_nums2)) array_nums1))\n",
    "  (filter (lambda (x) (member x array_nums2)) array_nums1))\n",
    "  (cond\n    [(empty? array_nums1) empty]\n    [(member (first array_nums1) array_nums2)\n     (cons (first array_nums1) (intersection_array (rest array_nums1) array_nums2))]\n    [else (intersection_array (rest array_nums1) array_nums2)]))\n",
    "  (filter (lambda (x) (member x array_nums2)) array_nums1))\n",
    "  (define (intersection_array_iter array_nums1 array_nums2 result)\n    (cond\n      [(empty? array_nums1) result]\n      [(member (first array_nums1) array_nums2)\n       (intersection_array_iter (rest array_nums1) array_nums2\n                                (cons (first array_nums1) result))]\n      [else (intersection_array_iter (rest array_nums1) array_nums2 result)]))\n  (intersection_array_iter array_nums1 array_nums2 '()))\n",
    "  (define (intersection_array_iter array_nums1 array_nums2 result)\n    (cond [(empty? array_nums1) result]\n          [(empty? array_nums2) result]\n          [(member (first array_nums1) array_nums2)\n           (intersection_array_iter (rest array_nums1) array_nums2\n                                    (cons (first array_nums1) result))]\n          [else (intersection_array_iter (rest array_nums1) array_nums2 result)]))\n  (reverse (intersection_array_iter array_nums1 array_nums2 '())))\n",
    "  (define (intersection_array_iter array_nums1 array_nums2)\n    (if (null? array_nums1)\n        '()\n        (if (member (car array_nums1) array_nums2)\n            (cons (car array_nums1) (intersection_array_iter (cdr array_nums1) array_nums2))\n            (intersection_array_iter (cdr array_nums1) array_nums2))))\n  (intersection_array_iter array_nums1 array_nums2))\n",
    "  (define (intersection_array_helper array_nums1 array_nums2)\n    (cond\n      [(empty? array_nums1) empty]\n      [(member (first array_nums1) array_nums2)\n       (cons (first array_nums1) (intersection_array_helper (rest array_nums1) array_nums2))]\n      [else (intersection_array_helper (rest array_nums1) array_nums2)]))\n  (intersection_array_helper array_nums1 array_nums2))\n",
    "  (filter (lambda (num) (member num array_nums2)) array_nums1))\n",
    "  (for/list ([n1 array_nums1]\n             [n2 array_nums2])\n    (if (equal? n1 n2)\n        n1)))\n",
    "  (define (intersection_array_helper array_nums1 array_nums2)\n    (cond\n      [(empty? array_nums1) empty]\n      [(member (first array_nums1) array_nums2)\n       (cons (first array_nums1) (intersection_array_helper (rest array_nums1) array_nums2))]\n      [else (intersection_array_helper (rest array_nums1) array_nums2)]))\n  (intersection_array_helper array_nums1 array_nums2))\n",
    "  (define (intersection_array_iter array_nums1 array_nums2)\n    (cond\n      [(empty? array_nums1) empty]\n      [(member (first array_nums1) array_nums2)\n       (cons (first array_nums1)\n             (intersection_array_iter (rest array_nums1) array_nums2))]\n      [else (intersection_array_iter (rest array_nums1) array_nums2)]))\n  (intersection_array_iter array_nums1 array_nums2))\n",
    "  (cond\n    [(empty? array_nums1) empty]\n    [(member (first array_nums1) array_nums2)\n     (cons (first array_nums1)\n           (intersection_array (rest array_nums1) array_nums2))]\n    [else (intersection_array (rest array_nums1) array_nums2)]))\n"
  ]
}