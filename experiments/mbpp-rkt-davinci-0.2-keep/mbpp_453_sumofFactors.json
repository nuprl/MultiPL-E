{
  "name": "mbpp_453_sumofFactors",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to find the sum of even factors of a number.\n(define (sumofFactors n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_453_sumofFactors.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sumofFactors))\n    (check-equal? (candidate 18) 26)\n    (check-equal? (candidate 30) 48)\n    (check-equal? (candidate 6) 8)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond ((&gt; i n) sum)\n          ((= (remainder n i) 0) (sumofFactors-iter n (+ i 1) (+ sum i)))\n          (else (sumofFactors-iter n (+ i 1) sum))))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i)\n    (cond ((&gt; i n) 0)\n          ((= (remainder n i) 0) (+ i (sumofFactors-iter n (+ i 1))))\n          (else (sumofFactors-iter n (+ i 1)))))\n  (sumofFactors-iter n 1))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond ((&gt; i n) sum)\n          ((= (modulo n i) 0) (sumofFactors-iter n (+ i 1) (+ sum i)))\n          (else (sumofFactors-iter n (+ i 1) sum))))\n  (sumofFactors-iter n 2 0))\n",
    "  (define (sumofFactors-iter n i)\n    (cond [(= i n) 0]\n          [(= (modulo n i) 0) (+ i (sumofFactors-iter n (+ i 1)))]\n          [else (sumofFactors-iter n (+ i 1))]))\n  (sumofFactors-iter n 1))\n",
    "  (define (helper n i)\n    (cond\n      [(= i n) 0]\n      [(= (remainder n i) 0) (+ i (helper n (+ i 1)))]\n      [else (helper n (+ i 1))]))\n  (helper n 1))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i)\n    (cond ((&gt; i n) 0)\n          ((= (modulo n i) 0) (+ i (sumofFactors-iter n (+ i 1))))\n          (else (sumofFactors-iter n (+ i 1)))))\n  (sumofFactors-iter n 1))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i)\n    (cond\n      [(= i n) 0]\n      [(= (modulo n i) 0) (+ i (sumofFactors-iter n (+ i 1)))]\n      [else (sumofFactors-iter n (+ i 1))]))\n  (sumofFactors-iter n 1))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond ((= i n) sum)\n          ((= 0 (modulo n i)) (+ sum i))\n          (else (sumofFactors-iter n (+ i 1) sum))))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(even? i) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i)\n    (cond\n      [(= i n) 0]\n      [(= (modulo n i) 0) (+ i (sumofFactors-iter n (+ i 1)))]\n      [else (sumofFactors-iter n (+ i 1))]))\n  (sumofFactors-iter n 1))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= (modulo n i) 0) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i)\n    (cond ((&gt; i n) 0)\n          ((= (modulo n i) 0) (+ i (sumofFactors-iter n (+ i 1))))\n          (else (sumofFactors-iter n (+ i 1)))))\n  (sumofFactors-iter n 1))\n"
  ]
}