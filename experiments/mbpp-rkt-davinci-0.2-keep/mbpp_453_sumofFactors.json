{
  "name": "mbpp_453_sumofFactors",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to find the sum of even factors of a number.\n(define (sumofFactors n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_453_sumofFactors.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sumofFactors))\n    (check-equal? (candidate 18) 26)\n    (check-equal? (candidate 30) 48)\n    (check-equal? (candidate 6) 8)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond ((&gt; i n) sum)\n          ((= (remainder n i) 0) (sumofFactors-iter n (+ i 1) (+ sum i)))\n          (else (sumofFactors-iter n (+ i 1) sum))))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i)\n    (cond ((&gt; i n) 0)\n          ((= (remainder n i) 0) (+ i (sumofFactors-iter n (+ i 1))))\n          (else (sumofFactors-iter n (+ i 1)))))\n  (sumofFactors-iter n 1))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond ((&gt; i n) sum)\n          ((= (modulo n i) 0) (sumofFactors-iter n (+ i 1) (+ sum i)))\n          (else (sumofFactors-iter n (+ i 1) sum))))\n  (sumofFactors-iter n 2 0))\n",
    "  (define (sumofFactors-iter n i)\n    (cond [(= i n) 0]\n          [(= (modulo n i) 0) (+ i (sumofFactors-iter n (+ i 1)))]\n          [else (sumofFactors-iter n (+ i 1))]))\n  (sumofFactors-iter n 1))\n",
    "  (define (helper n i)\n    (cond\n      [(= i n) 0]\n      [(= (remainder n i) 0) (+ i (helper n (+ i 1)))]\n      [else (helper n (+ i 1))]))\n  (helper n 1))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i)\n    (cond ((&gt; i n) 0)\n          ((= (modulo n i) 0) (+ i (sumofFactors-iter n (+ i 1))))\n          (else (sumofFactors-iter n (+ i 1)))))\n  (sumofFactors-iter n 1))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i)\n    (cond\n      [(= i n) 0]\n      [(= (modulo n i) 0) (+ i (sumofFactors-iter n (+ i 1)))]\n      [else (sumofFactors-iter n (+ i 1))]))\n  (sumofFactors-iter n 1))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond ((= i n) sum)\n          ((= 0 (modulo n i)) (+ sum i))\n          (else (sumofFactors-iter n (+ i 1) sum))))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(even? i) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i)\n    (cond\n      [(= i n) 0]\n      [(= (modulo n i) 0) (+ i (sumofFactors-iter n (+ i 1)))]\n      [else (sumofFactors-iter n (+ i 1))]))\n  (sumofFactors-iter n 1))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= (modulo n i) 0) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i)\n    (cond ((&gt; i n) 0)\n          ((= (modulo n i) 0) (+ i (sumofFactors-iter n (+ i 1))))\n          (else (sumofFactors-iter n (+ i 1)))))\n  (sumofFactors-iter n 1))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond ((= i n) sum)\n          ((= 0 (modulo n i)) (+ sum i))\n          (else (sumofFactors-iter n (+ i 1) sum))))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactorsHelper n i)\n    (cond ((&gt; i n) 0)\n          ((= (modulo n i) 0) (+ i (sumofFactorsHelper n (+ i 1))))\n          (else (sumofFactorsHelper n (+ i 1)))))\n  (sumofFactorsHelper n 2))\n",
    "  (define (sumofFactors-iter i sum)\n    (cond\n      [(= i n) sum]\n      [(= (modulo n i) 0) (sumofFactors-iter (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter (+ i 1) sum)]))\n  (sumofFactors-iter 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactorsHelper n i)\n    (if (= i n)\n        0\n        (+ (if (= (modulo n i) 0)\n               i\n               0)\n           (sumofFactorsHelper n (+ i 1)))))\n  (sumofFactorsHelper n 1))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= (modulo n i) 0) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (if (&gt; i n)\n        sum\n        (if (even? i)\n            (sumofFactors-iter n (+ i 1) (+ sum i))\n            (sumofFactors-iter n (+ i 1) sum))))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n sum)\n    (if (= n 1)\n        sum\n        (if (= (remainder n 2) 0)\n            (sumofFactors-iter (/ n 2) (+ n sum))\n            (sumofFactors-iter (/ n 2) sum))))\n  (sumofFactors-iter n 0))\n",
    "  (define (sumofFactorsHelper n i)\n    (if (= i n)\n        0\n        (if (= (modulo n i) 0)\n            (+ i (sumofFactorsHelper n (+ i 1)))\n            (sumofFactorsHelper n (+ i 1)))))\n  (sumofFactorsHelper n 1))\n",
    "  (define (sumofFactors-iter n i)\n    (if (= i n)\n        0\n        (if (= (modulo n i) 0)\n            (+ i (sumofFactors-iter n (+ i 1)))\n            (sumofFactors-iter n (+ i 1)))))\n  (sumofFactors-iter n 1))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond ((= i n) sum)\n          ((even? i) (sumofFactors-iter n (+ i 1) (+ sum i)))\n          (else (sumofFactors-iter n (+ i 1) sum))))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= (modulo n i) 0) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter i sum)\n    (cond\n      [(= i n) sum]\n      [(= (remainder n i) 0) (sumofFactors-iter (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter (+ i 1) sum)]))\n  (sumofFactors-iter 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i)\n    (cond\n      [(= i n) 0]\n      [(= (modulo n i) 0) (+ i (sumofFactors-iter n (+ i 1)))]\n      [else (sumofFactors-iter n (+ i 1))]))\n  (sumofFactors-iter n 1))\n",
    "  (define (isFactor n m)\n    (if (= 0 (modulo n m))\n        #t\n        #f))\n  (define (sumOfEvenFactors n)\n    (if (= n 1)\n        0\n        (if (isFactor n (sub1 n))\n            (if (even? (sub1 n))\n                (+ (sub1 n) (sumOfEvenFactors (sub1 n)))\n                (sumOfEvenFactors (sub1 n)))\n            (sumOfEvenFactors (sub1 n)))))\n  (sumOfEvenFactors n))\n",
    "  (define (sumofFactors-iter n i)\n    (cond ((&gt; i n) 0)\n          ((= (modulo n i) 0) (+ i (sumofFactors-iter n (+ i 1))))\n          (else (sumofFactors-iter n (+ i 1)))))\n  (sumofFactors-iter n 1))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i)\n    (cond\n      [(= i n) 0]\n      [(= 0 (modulo n i)) (+ i (sumofFactors-iter n (+ i 1)))]\n      [else (sumofFactors-iter n (+ i 1))]))\n  (sumofFactors-iter n 1))\n",
    "  (define (sumofFactorsHelper n i)\n    (if (= i n)\n        0\n        (if (= 0 (modulo n i))\n            (+ i (sumofFactorsHelper n (+ i 1)))\n            (sumofFactorsHelper n (+ i 1)))))\n  (sumofFactorsHelper n 1))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond ((= i n) sum)\n          ((= 0 (modulo n i)) (+ sum i))\n          (else sum)))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (for/sum ([i (in-range 1 (quotient n 2))]\n            #:when (even? i))\n    (if (zero? (modulo n i)) i 0)))\n",
    "  (define (sumofFactors-iter n i)\n    (if (= i n)\n        0\n        (if (= (remainder n i) 0)\n            (+ i (sumofFactors-iter n (+ i 1)))\n            (sumofFactors-iter n (+ i 1)))))\n  (sumofFactors-iter n 1))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= (modulo n i) 0) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= n i) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n sum)\n    (cond ((= n 0) sum)\n          ((even? n) (sumofFactors-iter (- n 1) (+ n sum)))\n          (else (sumofFactors-iter (- n 1) sum))))\n  (sumofFactors-iter n 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i)\n    (if (&gt; i n)\n        0\n        (+ (if (even? i)\n               i\n               0)\n           (sumofFactors-iter n (+ i 1)))))\n  (sumofFactors-iter n 1))\n",
    "  (define (sumofFactors-iter n i)\n    (cond\n      [(= i n) 0]\n      [(= (modulo n i) 0) (+ i (sumofFactors-iter n (+ i 1)))]\n      [else (sumofFactors-iter n (+ i 1))]))\n  (sumofFactors-iter n 1))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond ((&gt; i n) sum)\n          ((= (modulo n i) 0) (sumofFactors-iter n (+ i 1) (+ sum i)))\n          (else (sumofFactors-iter n (+ i 1) sum))))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond [(= i n) sum]\n          [(= (modulo n i) 0) (sumofFactors-iter n (+ i 1) (+ sum i))]\n          [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter i sum)\n    (cond\n      [(= i n) sum]\n      [(= (modulo n i) 0) (sumofFactors-iter (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter (+ i 1) sum)]))\n  (sumofFactors-iter 1 0))\n",
    "  (define (sumofFactors-helper n i)\n    (if (= i n)\n        0\n        (+ (if (= (modulo n i) 0)\n               i\n               0)\n           (sumofFactors-helper n (+ i 1)))))\n  (sumofFactors-helper n 1))\n",
    "  (define (sumofFactors-iter n i sum)\n    (if (= i n)\n        sum\n        (if (= (modulo n i) 0)\n            (if (even? i)\n                (sumofFactors-iter n (+ i 1) (+ sum i))\n                (sumofFactors-iter n (+ i 1) sum))\n            (sumofFactors-iter n (+ i 1) sum))))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i)\n    (cond ((= i n) 0)\n          ((= 0 (modulo n i)) (+ i (sumofFactors-iter n (+ i 1))))\n          (else (sumofFactors-iter n (+ i 1)))))\n  (sumofFactors-iter n 1))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond ((&gt; i n) sum)\n          ((= (modulo n i) 0) (sumofFactors-iter n (+ i 1) (+ sum i)))\n          (else (sumofFactors-iter n (+ i 1) sum))))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactorsHelper n i)\n    (cond\n      [(= i n) 0]\n      [(= 0 (modulo n i)) (+ i (sumofFactorsHelper n (+ i 1)))]\n      [else (sumofFactorsHelper n (+ i 1))]))\n  (sumofFactorsHelper n 1))\n",
    "  (define (sumofFactors-iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(= (remainder n 2) 0) (sumofFactors-iter (- n 1) (+ sum n))]\n      [else (sumofFactors-iter (- n 1) sum)]))\n  (sumofFactors-iter n 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond ((&gt; i n) sum)\n          ((even? i) (sumofFactors-iter n (+ i 1) (+ sum i)))\n          (else (sumofFactors-iter n (+ i 1) sum))))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i)\n    (if (= n i)\n        0\n        (if (= 0 (modulo n i))\n            (+ i (sumofFactors-iter n (+ i 1)))\n            (sumofFactors-iter n (+ i 1)))))\n  (sumofFactors-iter n 1))\n",
    "  (define (helper n i)\n    (cond\n      [(= i n) 0]\n      [(= (modulo n i) 0) (+ i (helper n (+ i 1)))]\n      [else (helper n (+ i 1))]))\n  (helper n 1))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= (modulo n i) 0) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i)\n    (cond\n      [(= i n) 0]\n      [(= (remainder n i) 0) (+ i (sumofFactors-iter n (+ i 1)))]\n      [else (sumofFactors-iter n (+ i 1))]))\n  (sumofFactors-iter n 1))\n",
    "  (define (sumofFactors-iter n i)\n    (cond ((= i n) 0)\n          ((= 0 (modulo n i)) (+ i (sumofFactors-iter n (+ i 1))))\n          (else (sumofFactors-iter n (+ i 1)))))\n  (sumofFactors-iter n 1))\n",
    "  (define (sumofFactorsHelper n i)\n    (cond\n      [(= i n) 0]\n      [(= 0 (modulo n i)) (+ i (sumofFactorsHelper n (+ i 1)))]\n      [else (sumofFactorsHelper n (+ i 1))]))\n  (sumofFactorsHelper n 1))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i)\n    (cond ((&gt; i n) 0)\n          ((= (remainder n i) 0)\n           (+ i (sumofFactors-iter n (+ i 1))))\n          (else (sumofFactors-iter n (+ i 1)))))\n  (sumofFactors-iter n 1))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i acc)\n    (cond\n      [(= i n) acc]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ acc i))]\n      [else (sumofFactors-iter n (+ i 1) acc)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i)\n    (cond [(= i n) 0]\n          [(even? i) (+ i (sumofFactors-iter n (+ i 1)))]\n          [else (sumofFactors-iter n (+ i 1))]))\n  (sumofFactors-iter n 1))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n sum)\n    (if (= n 0)\n        sum\n        (if (= (remainder n 2) 0)\n            (sumofFactors-iter (- n 1) (+ sum n))\n            (sumofFactors-iter (- n 1) sum))))\n  (sumofFactors-iter n 0))\n",
    "  (define (sumOfFactorsHelper n sum)\n    (cond\n      [(= n 1) sum]\n      [(= (remainder n 2) 0) (sumOfFactorsHelper (/ n 2) (+ sum n))]\n      [else (sumOfFactorsHelper (/ n 2) sum)]))\n  (sumOfFactorsHelper n 0))\n",
    "  (define (sumofFactorsHelper n i)\n    (cond\n      [(= i n) 0]\n      [(= 0 (modulo n i)) (+ i (sumofFactorsHelper n (+ i 1)))]\n      [else (sumofFactorsHelper n (+ i 1))]))\n  (sumofFactorsHelper n 1))\n",
    "  (define (sumofFactors-iter n acc)\n    (if (= n 1)\n        acc\n        (if (= (modulo n 2) 0)\n            (sumofFactors-iter (/ n 2) (+ acc n))\n            (sumofFactors-iter (/ n 2) acc))))\n  (sumofFactors-iter n 0))\n",
    "  (let loop ((i 1) (sum 0))\n    (cond ((= i n) sum)\n          ((even? i) (loop (+ i 1) (+ sum i)))\n          (else (loop (+ i 1) sum)))))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sum-of-factors-iter n i sum)\n    (cond ((&gt; i n) sum)\n          ((= (remainder n i) 0) (sum-of-factors-iter n (+ i 1) (+ sum i)))\n          (else (sum-of-factors-iter n (+ i 1) sum))))\n  (sum-of-factors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i)\n    (cond ((= i n) 0)\n          ((= 0 (modulo n i)) (+ i (sumofFactors-iter n (+ i 1))))\n          (else (sumofFactors-iter n (+ i 1)))))\n  (sumofFactors-iter n 1))\n",
    "  (define (sumofFactors-iter n i)\n    (cond ((&gt; i n) 0)\n          ((= (modulo n i) 0) (+ i (sumofFactors-iter n (+ i 1))))\n          (else (sumofFactors-iter n (+ i 1)))))\n  (sumofFactors-iter n 1))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond ((= i n) sum)\n          ((= 0 (modulo n i)) (+ sum i))\n          (else (sumofFactors-iter n (+ i 1) sum))))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond [(= i n) sum]\n          [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n          [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i)\n    (cond\n      [(= i n) 0]\n      [(= 0 (modulo n i)) (+ i (sumofFactors-iter n (+ i 1)))]\n      [else (sumofFactors-iter n (+ i 1))]))\n  (sumofFactors-iter n 1))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond ((&gt; i n) sum)\n          ((= (modulo n i) 0) (sumofFactors-iter n (+ i 1) (+ sum i)))\n          (else (sumofFactors-iter n (+ i 1) sum))))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i)\n    (cond ((&gt; i n) 0)\n          ((= (modulo n i) 0) (+ i (sumofFactors-iter n (+ i 1))))\n          (else (sumofFactors-iter n (+ i 1)))))\n  (sumofFactors-iter n 1))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= n i) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (let loop ((i 1) (sum 0))\n    (cond ((= i n) sum)\n          ((even? i) (loop (+ i 1) (+ sum i)))\n          (else (loop (+ i 1) sum)))))\n",
    "  (define (sumofFactors-iter n i sum)\n    (if (= i n)\n        sum\n        (if (= 0 (modulo n i))\n            (sumofFactors-iter n (+ i 1) (+ sum i))\n            (sumofFactors-iter n (+ i 1) sum))))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n sum)\n    (cond ((= n 0) sum)\n          ((even? n) (sumofFactors-iter (- n 1) (+ n sum)))\n          (else (sumofFactors-iter (- n 1) sum))))\n  (sumofFactors-iter n 0))\n",
    "  (define (sumofFactors-iter i sum)\n    (cond ((= i n) sum)\n          ((even? i) (sumofFactors-iter (+ i 1) (+ sum i)))\n          (else (sumofFactors-iter (+ i 1) sum))))\n  (sumofFactors-iter 1 0))\n",
    "  (define (sumofFactors-iter i sum)\n    (cond ((&gt; i n) sum)\n          ((= (modulo n i) 0) (sumofFactors-iter (+ i 1) (+ sum i)))\n          (else (sumofFactors-iter (+ i 1) sum))))\n  (sumofFactors-iter 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= (modulo n i) 0) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= (modulo n i) 0) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond ((= i n) sum)\n          ((even? i) (sumofFactors-iter n (+ i 1) (+ sum i)))\n          (else (sumofFactors-iter n (+ i 1) sum))))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(even? i) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter (+ i 1) sum)]))\n  (sumofFactors-iter 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond ((&gt; i n) sum)\n          ((= (modulo n i) 0) (sumofFactors-iter n (+ i 1) (+ sum i)))\n          (else (sumofFactors-iter n (+ i 1) sum))))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond [(= i n) sum]\n          [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n          [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (if (&lt; i n)\n        (if (= (modulo n i) 0)\n            (sumofFactors-iter n (+ i 1) (+ sum i))\n            (sumofFactors-iter n (+ i 1) sum))\n        sum))\n  (sumofFactors-iter n 2 0))\n",
    "  (define (sumofFactorsHelper n i)\n    (if (= i n)\n        0\n        (+ (if (= (modulo n i) 0)\n               i\n               0)\n           (sumofFactorsHelper n (+ i 1)))))\n  (sumofFactorsHelper n 1))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= (modulo n i) 0) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i)\n    (if (&gt; i n)\n        0\n        (+ (if (zero? (modulo n i))\n               i\n               0)\n           (sumofFactors-iter n (+ i 1)))))\n  (sumofFactors-iter n 1))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i)\n    (cond\n      [(= i n) 0]\n      [(= (remainder n i) 0) (+ i (sumofFactors-iter n (+ i 1)))]\n      [else (sumofFactors-iter n (+ i 1))]))\n  (sumofFactors-iter n 1))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= n i) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i)\n    (cond\n      [(= i n) 0]\n      [(= 0 (modulo n i)) (+ i (sumofFactors-iter n (+ i 1)))]\n      [else (sumofFactors-iter n (+ i 1))]))\n  (sumofFactors-iter n 1))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter (+ i 1) sum)]))\n  (sumofFactors-iter 1 0))\n",
    "  (define (sumofFactorsHelper n i)\n    (if (= i n)\n        0\n        (+ (if (= (modulo n i) 0) i 0)\n           (sumofFactorsHelper n (+ i 1)))))\n  (sumofFactorsHelper n 1))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i))\n       (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else\n       (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumOfEvenFactors n)\n    (define (sumOfEvenFactorsHelper n acc)\n      (cond ((= n 1) acc)\n            ((= (remainder n 2) 0) (sumOfEvenFactorsHelper (/ n 2) (+ n acc)))\n            (else (sumOfEvenFactorsHelper (/ n 2) acc))))\n    (sumOfEvenFactorsHelper n 0))\n  (sumOfEvenFactors n))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond ((= i n) sum)\n          ((even? i) (sumofFactors-iter n (+ i 1) (+ sum i)))\n          (else (sumofFactors-iter n (+ i 1) sum))))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond ((= i n) sum)\n          ((= 0 (modulo n i)) (+ sum i))\n          (else (sumofFactors-iter n (+ i 1) sum))))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i)\n    (cond\n      [(= i n) 0]\n      [(= 0 (modulo n i)) (+ i (sumofFactors-iter n (+ i 1)))]\n      [else (sumofFactors-iter n (+ i 1))]))\n  (sumofFactors-iter n 1))\n",
    "  (define (sumofFactors-iter n i sum)\n    (if (= i n)\n        sum\n        (if (= 0 (modulo n i))\n            (sumofFactors-iter n (+ i 1) (+ sum i))\n            (sumofFactors-iter n (+ i 1) sum))))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(= (remainder n 2) 0) (sumofFactors-iter (- n 1) (+ sum n))]\n      [else (sumofFactors-iter (- n 1) sum)]))\n  (sumofFactors-iter n 0))\n",
    "  (define (sumofFactors-iter i sum)\n    (cond\n      [(= i n) sum]\n      [(= (modulo n i) 0) (sumofFactors-iter (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter (+ i 1) sum)]))\n  (sumofFactors-iter 1 0))\n",
    "  (define (sumofFactorsHelper n i)\n    (if (= i n)\n        0\n        (+ (if (= (modulo n i) 0)\n               i\n               0)\n           (sumofFactorsHelper n (+ i 1)))))\n  (sumofFactorsHelper n 1))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= (modulo n i) 0) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 2 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond ((= i n) sum)\n          ((even? i) (sumofFactors-iter n (+ i 1) (+ sum i)))\n          (else (sumofFactors-iter n (+ i 1) sum))))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (isFactor n m)\n    (if (= (modulo n m) 0)\n        #t\n        #f))\n  (define (isEven n)\n    (if (= (modulo n 2) 0)\n        #t\n        #f))\n  (define (sumofFactorsHelper n m)\n    (if (= m n)\n        0\n        (if (and (isFactor n m) (isEven m))\n            (+ m (sumofFactorsHelper n (+ m 1)))\n            (sumofFactorsHelper n (+ m 1)))))\n  (sumofFactorsHelper n 1))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= (modulo n i) 0) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond ((= i n) sum)\n          ((= 0 (modulo n i)) (+ sum i))\n          (else (sumofFactors-iter n (+ i 1) sum))))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= (modulo n i) 0) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond ((&gt; i n) sum)\n          ((= (modulo n i) 0) (sumofFactors-iter n (+ i 1) (+ sum i)))\n          (else (sumofFactors-iter n (+ i 1) sum))))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumOfEvenFactors n)\n    (define (sumOfEvenFactors n i)\n      (cond ((= i n) 0)\n            ((= 0 (modulo n i)) (+ i (sumOfEvenFactors n (+ i 1))))\n            (else (sumOfEvenFactors n (+ i 1)))))\n    (sumOfEvenFactors n 2))\n  (sumOfEvenFactors n))\n",
    "  (define (sumofFactors-iter n i)\n    (cond ((&gt; i n) 0)\n          ((= (modulo n i) 0) (+ i (sumofFactors-iter n (+ i 1))))\n          (else (sumofFactors-iter n (+ i 1)))))\n  (sumofFactors-iter n 1))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i)\n    (cond ((&gt; i n) 0)\n          ((= (modulo n i) 0) (+ i (sumofFactors-iter n (+ i 1))))\n          (else (sumofFactors-iter n (+ i 1)))))\n  (sumofFactors-iter n 1))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactorsHelper n i)\n    (if (= i n)\n        0\n        (+ (if (= 0 (modulo n i)) i 0)\n           (sumofFactorsHelper n (+ i 1)))))\n  (sumofFactorsHelper n 1))\n",
    "  (define (isFactor n d)\n    (= (modulo n d) 0))\n  (define (sumOfEvenFactors n d)\n    (cond ((&gt; d n) 0)\n          ((and (isFactor n d) (even? d)) (+ d (sumOfEvenFactors n (+ d 1))))\n          (else (sumOfEvenFactors n (+ d 1)))))\n  (sumOfEvenFactors n 1))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond ((= i n) sum)\n          ((= 0 (modulo n i)) (+ sum i))\n          (else (sumofFactors-iter n (+ i 1) sum))))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n acc)\n    (if (= n 1)\n        acc\n        (if (even? n)\n            (sumofFactors-iter (/ n 2) (+ acc n))\n            (sumofFactors-iter (/ n 2) acc))))\n  (sumofFactors-iter n 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofEvenFactors n)\n    (define (sumofEvenFactors-iter n i)\n      (if (&lt; i n)\n          (if (= (modulo n i) 0)\n              (+ i (sumofEvenFactors-iter n (+ i 1)))\n              (sumofEvenFactors-iter n (+ i 1)))\n          0))\n    (sumofEvenFactors-iter n 1))\n  (sumofEvenFactors n))\n</code>\n",
    "  (define (sumofFactorsHelper n i)\n    (if (= i n)\n        0\n        (if (= 0 (modulo n i))\n            (+ i (sumofFactorsHelper n (+ i 1)))\n            (sumofFactorsHelper n (+ i 1)))))\n  (sumofFactorsHelper n 1))\n",
    "  (define (sumofFactors-iter n i sum)\n    (if (= i n)\n        sum\n        (if (= (modulo n i) 0)\n            (if (even? i)\n                (sumofFactors-iter n (+ i 1) (+ sum i))\n                (sumofFactors-iter n (+ i 1) sum))\n            (sumofFactors-iter n (+ i 1) sum))))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond ((&gt; i n) sum)\n          ((= (modulo n i) 0) (sumofFactors-iter n (+ i 1) (+ sum i)))\n          (else (sumofFactors-iter n (+ i 1) sum))))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i)\n    (if (= i n)\n        0\n        (if (= (remainder n i) 0)\n            (+ i (sumofFactors-iter n (+ i 1)))\n            (sumofFactors-iter n (+ i 1)))))\n  (sumofFactors-iter n 1))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i acc)\n    (cond\n      [(= i n) acc]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ acc i))]\n      [else (sumofFactors-iter n (+ i 1) acc)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumOfFactorsHelper n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumOfFactorsHelper n (+ i 1) (+ sum i))]\n      [else (sumOfFactorsHelper n (+ i 1) sum)]))\n  (sumOfFactorsHelper n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond [(= n i) sum]\n          [(even? i) (sumofFactors-iter n (+ i 1) (+ sum i))]\n          [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactorsHelper n i)\n    (cond\n      [(= i n) 0]\n      [(= (modulo n i) 0) (+ i (sumofFactorsHelper n (+ i 1)))]\n      [else (sumofFactorsHelper n (+ i 1))]))\n  (sumofFactorsHelper n 1))\n",
    "  (define (sumofFactors-iter n sum)\n    (cond ((= n 1) sum)\n          ((even? n) (sumofFactors-iter (/ n 2) (+ n sum)))\n          (else (sumofFactors-iter (- n 1) sum))))\n  (sumofFactors-iter n 0))\n",
    "  (define (sumOfFactorsHelper n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumOfFactorsHelper n (+ i 1) (+ sum i))]\n      [else (sumOfFactorsHelper n (+ i 1) sum)]))\n  (sumOfFactorsHelper n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond ((&gt; i n) sum)\n          ((= (modulo n i) 0) (sumofFactors-iter n (+ i 1) (+ sum i)))\n          (else (sumofFactors-iter n (+ i 1) sum))))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond ((= i n) sum)\n          ((even? i) (sumofFactors-iter n (+ i 1) (+ sum i)))\n          (else (sumofFactors-iter n (+ i 1) sum))))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond ((&gt; i n) sum)\n          ((even? i) (sumofFactors-iter n (+ i 1) (+ sum i)))\n          (else (sumofFactors-iter n (+ i 1) sum))))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i)\n    (cond ((&gt; i n) 0)\n          ((= (modulo n i) 0) (+ i (sumofFactors-iter n (+ i 1))))\n          (else (sumofFactors-iter n (+ i 1)))))\n  (sumofFactors-iter n 1))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond ((= i n) sum)\n          ((= 0 (modulo n i)) (+ sum i))\n          (else sum)))\n  (sumofFactors-iter n 1 0))\n</code>\n",
    "  (define (sumofFactorsHelper n i)\n    (if (= i n)\n        0\n        (+ (if (= (modulo n i) 0)\n               i\n               0)\n           (sumofFactorsHelper n (+ i 1)))))\n  (sumofFactorsHelper n 1))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond ((&gt; i n) sum)\n          ((= (modulo n i) 0)\n           (sumofFactors-iter n (+ i 1) (+ sum i)))\n          (else (sumofFactors-iter n (+ i 1) sum))))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond ((= i n) sum)\n          ((even? i) (sumofFactors-iter n (+ i 1) (+ sum i)))\n          (else (sumofFactors-iter n (+ i 1) sum))))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= 0 (modulo n i)) (sumofFactors-iter n (+ i 1) (+ sum i))]\n      [else (sumofFactors-iter n (+ i 1) sum)]))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter n sum)\n    (if (= n 0)\n        sum\n        (if (= (remainder n 2) 0)\n            (sumofFactors-iter (- n 1) (+ sum n))\n            (sumofFactors-iter (- n 1) sum))))\n  (sumofFactors-iter n 0))\n",
    "  (define (sumofFactors-iter n i)\n    (if (= i n)\n        0\n        (if (= (remainder n i) 0)\n            (+ i (sumofFactors-iter n (+ i 1)))\n            (sumofFactors-iter n (+ i 1)))))\n  (sumofFactors-iter n 1))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond ((&gt; i n) sum)\n          ((= (remainder n i) 0)\n           (sumofFactors-iter n (+ i 1) (+ sum i)))\n          (else (sumofFactors-iter n (+ i 1) sum))))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactors-iter i sum)\n    (cond ((&gt; i n) sum)\n          ((= (remainder n i) 0) (sumofFactors-iter (+ i 1) (+ sum i)))\n          (else (sumofFactors-iter (+ i 1) sum))))\n  (sumofFactors-iter 2 0))\n",
    "  (define (sumofFactors-iter n i sum)\n    (cond ((&gt; i n) sum)\n          ((= (modulo n i) 0) (sumofFactors-iter n (+ i 1) (+ sum i)))\n          (else (sumofFactors-iter n (+ i 1) sum))))\n  (sumofFactors-iter n 1 0))\n",
    "  (define (sumofFactorsHelper n i)\n    (if (= i n)\n        0\n        (if (even? i)\n            (+ i (sumofFactorsHelper n (+ i 1)))\n            (sumofFactorsHelper n (+ i 1)))))\n  (sumofFactorsHelper n 1))\n"
  ]
}