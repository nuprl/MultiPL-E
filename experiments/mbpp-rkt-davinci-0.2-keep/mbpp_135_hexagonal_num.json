{
  "name": "mbpp_135_hexagonal_num",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the nth hexagonal number.\n(define (hexagonal_num n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_135_hexagonal_num.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate hexagonal_num))\n    (check-equal? (candidate 10) 190)\n    (check-equal? (candidate 5) 45)\n    (check-equal? (candidate 7) 91)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (* n (+ n 1) (/ 1 2)))\n",
    "  (* n (+ n 1) (/ 2)))\n",
    "  (* n (+ n 1) (/ (+ n 1) 2)))\n",
    "  (define (helper n acc)\n    (if (= n 0)\n        acc\n        (helper (- n 1) (+ acc n))))\n  (helper n 0))\n",
    "  (* n (+ n 1) (/ 1 2)))\n",
    "  (* n (+ n 1) (/ (+ n 1) 2)))\n",
    "  (* n (+ n 1) (/ 2)))\n",
    "  (* n (+ n 1) (/ 2)))\n",
    "  (define (hexagonal-iter n sum)\n    (if (= n 0)\n        sum\n        (hexagonal-iter (- n 1) (+ sum n))))\n  (hexagonal-iter n 0))\n",
    "  (* n (+ n 1) (/ 1 2)))\n",
    "  (define (helper n acc)\n    (if (= n 1)\n        acc\n        (helper (- n 1) (+ acc n))))\n  (helper n 0))\n",
    "  (* n (+ n 1) (/ (+ n 1) 2)))\n",
    "  (/ (* n (+ n 1)) 2))\n",
    "  (* n (+ n 1) (/ (+ n 1) 2)))\n",
    "  (* n (+ n 1) (/ 1 2)))\n",
    "  (* n (+ n 1) (/ 2)))\n",
    "  (* n (+ n 1) (/ 1 2)))\n",
    "  (* n (+ 2 n)))\n",
    "  (* n (+ n 1) (/ 1 2)))\n",
    "  (* n (+ n 1) (/ 2)))\n"
  ]
}