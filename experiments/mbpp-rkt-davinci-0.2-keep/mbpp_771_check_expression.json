{
  "name": "mbpp_771_check_expression",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n(define (check_expression exp)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_771_check_expression.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_expression))\n    (check-equal? (candidate \"{()}[{}]\") #t)\n    (check-equal? (candidate \"{()}[{]\") #f)\n    (check-equal? (candidate \"{()}[{}][]({})\") #t)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons (first exp) stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check_expression_iter exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_iter (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_iter (rest exp) (rest stack)))]\n      [else (check_expression_iter (rest exp) stack)]))\n  (check_expression_iter exp '()))\n",
    "  (define (helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (helper (rest exp) (rest stack)))]\n      [else (helper (rest exp) stack)]))\n  (helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check-exp-helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check-exp-helper (rest exp) (cons (first exp) stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check-exp-helper (rest exp) (rest stack)))]\n      [else (check-exp-helper (rest exp) stack)]))\n  (check-exp-helper exp '()))\n",
    "  (define (check-expression-helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(eq? (first exp) '\\() (check-expression-helper (rest exp) (cons '\\( stack)))]\n      [(eq? (first exp) '\\)) (and (not (empty? stack)) (check-expression-helper (rest exp) (rest stack)))]\n      [else (check-expression-helper (rest exp) stack)]))\n  (check-expression-helper exp '()))\n",
    "  (define (helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (helper (rest exp) (rest stack)))]\n      [else (helper (rest exp) stack)]))\n  (helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (helper exp stack)\n    (cond [(empty? exp) (empty? stack)]\n          [(char=? (first exp) #\\() (helper (rest exp) (cons #\\( stack)))]\n          [(char=? (first exp) #\\)) (and (not (empty? stack)) (helper (rest exp) (rest stack)))]\n          [else (helper (rest exp) stack)]))\n  (helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (let ([stack '()])\n    (for ([c (in-string exp)])\n      (cond\n        [(char=? c #\\() (push c stack)]\n        [(char=? c #\\)) (unless (empty? stack) (pop stack))]))\n    (empty? stack)))\n",
    "  (define (helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (helper (rest exp) (rest stack)))]\n      [else (helper (rest exp) stack)]))\n  (helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (let loop ([exp exp] [stack '()])\n    (cond [(empty? exp) (empty? stack)]\n          [(equal? (first exp) '()) (loop (rest exp) stack)]\n          [(equal? (first exp) ') (and (not (empty? stack)) (equal? (first stack) '()) (loop (rest exp) (rest stack)))]\n          [(equal? (first exp) ') (and (not (empty? stack)) (equal? (first stack) ') (loop (rest exp) (rest stack)))]\n          [else (loop (rest exp) (cons (first exp) stack))])))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check-expression-helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check-expression-helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check-expression-helper (rest exp) (rest stack)))]\n      [else (check-expression-helper (rest exp) stack)]))\n  (check-expression-helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (helper exp stack)\n    (cond [(empty? exp) (empty? stack)]\n          [(char=? (first exp) #\\() (helper (rest exp) (cons #\\( stack)))]\n          [(char=? (first exp) #\\)) (and (not (empty? stack)) (helper (rest exp) (rest stack)))]\n          [else (helper (rest exp) stack)]))\n  (helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(symbol=? (first exp) \")\")\n       (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [(symbol=? (first exp) \"(\") (check_expression_helper (rest exp) (cons \")\" stack))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (helper exp)\n    (cond\n      [(empty? exp) '()]\n      [(equal? (first exp) '()) (helper (rest exp))]\n      [(equal? (first exp) '(') (cons (first exp) (helper (rest exp)))]\n      [(equal? (first exp) ')') (helper (rest exp))]\n      [else (helper (rest exp))]))\n  (if (empty? (helper exp))\n      #t\n      #f))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (helper (rest exp) (rest stack)))]\n      [else (helper (rest exp) stack)]))\n  (helper exp '()))\n",
    "  (define (helper exp stack)\n    (cond [(empty? exp) (empty? stack)]\n          [(char=? (first exp) #\\() (helper (rest exp) (cons #\\( stack)))]\n          [(char=? (first exp) #\\)) (and (not (empty? stack)) (helper (rest exp) (rest stack)))]\n          [else (helper (rest exp) stack)]))\n  (helper exp '()))\n",
    "  (define (helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(eq? (first exp) '\\() (helper (rest exp) (cons (first exp) stack))]\n      [(eq? (first exp) '\\)) (and (not (empty? stack)) (helper (rest exp) (rest stack)))]\n      [else (helper (rest exp) stack)]))\n  (helper exp '()))\n",
    "  (define (helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (helper (rest exp) (cons (first exp) stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (helper (rest exp) (rest stack)))]\n      [else (helper (rest exp) stack)]))\n  (helper exp '()))\n",
    "  (define (check_expression_iter exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_iter (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_iter (rest exp) (rest stack)))]\n      [else (check_expression_iter (rest exp) stack)]))\n  (check_expression_iter exp '()))\n",
    "  (define (is_open? c)\n    (or (char=? c #\\()\n        (char=? c #\\[)\n        (char=? c #\\{)))\n  (define (is_close? c)\n    (or (char=? c #\\))\n        (char=? c #\\])\n        (char=? c #\\})))\n  (define (is_match? c1 c2)\n    (and (is_open? c1)\n         (is_close? c2)\n         (char=? (char-upcase c1) (char-upcase c2))))\n  (define (check-expression-helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(is_open? (first exp)) (check-expression-helper (rest exp) (cons (first exp) stack))]\n      [(is_close? (first exp)) (and (not (empty? stack))\n                                    (is_match? (first stack) (first exp))\n                                    (check-expression-helper (rest exp) (rest stack)))]\n      [else (check-expression-helper (rest exp) stack)]))\n  (check-expression-helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check_expression_iter exp stack)\n    (cond [(empty? exp) (empty? stack)]\n          [(equal? (first exp) \"{\") (check_expression_iter (rest exp) (cons \"{\" stack))]\n          [(equal? (first exp) \"}\") (and (not (empty? stack)) (check_expression_iter (rest exp) (rest stack)))]\n          [else (check_expression_iter (rest exp) stack)]))\n  (check_expression_iter exp '()))\n",
    "  (define (check-expression-helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check-expression-helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check-expression-helper (rest exp) (rest stack)))]\n      [else (check-expression-helper (rest exp) stack)]))\n  (check-expression-helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check-helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check-helper (rest exp) (cons (first exp) stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check-helper (rest exp) (rest stack)))]\n      [else (check-helper (rest exp) stack)]))\n  (check-helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond [(empty? exp) (empty? stack)]\n          [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n          [(char=? (first exp) #\\)) (if (empty? stack) #f (check_expression_helper (rest exp) (rest stack)))]\n          [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (helper (rest exp) (rest stack)))]\n      [else (helper (rest exp) stack)]))\n  (helper exp '()))\n",
    "  (define (check-expression-helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check-expression-helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check-expression-helper (rest exp) (rest stack)))]\n      [else (check-expression-helper (rest exp) stack)]))\n  (check-expression-helper exp '()))\n",
    "  (define (helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (helper (rest exp) (rest stack)))]\n      [else (helper (rest exp) stack)]))\n  (helper exp '()))\n",
    "  (define (helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (helper (rest exp) (cons (first exp) stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (helper (rest exp) (rest stack)))]\n      [else (helper (rest exp) stack)]))\n  (helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (if (empty? stack) #f (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check_expression_iter exp stack)\n    (cond\n      ((empty? exp) (empty? stack))\n      ((char=? (first exp) #\\() (check_expression_iter (rest exp) (cons #\\( stack)))\n      ((char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_iter (rest exp) (rest stack))))\n      (else (check_expression_iter (rest exp) stack))))\n  (check_expression_iter exp '()))\n",
    "  (define (helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (helper (rest exp) (rest stack)))]\n      [else (helper (rest exp) stack)]))\n  (helper exp '()))\n",
    "  (define (helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (helper (rest exp) (rest stack)))]\n      [else (helper (rest exp) stack)]))\n  (helper exp '()))\n",
    "  (define (helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (helper (rest exp) (rest stack)))]\n      [else (helper (rest exp) stack)]))\n  (helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons (first exp) stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check_expression_iter exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_iter (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_iter (rest exp) (rest stack)))]\n      [else (check_expression_iter (rest exp) stack)]))\n  (check_expression_iter exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (helper exp)\n    (cond\n      [(empty? exp) #t]\n      [(equal? (first exp) '()) (helper (rest exp))]\n      [(equal? (first exp) ') (helper (rest exp))]\n      [(equal? (first exp) '] (helper (rest exp))]\n      [(equal? (first exp) '} (helper (rest exp))]\n      [(equal? (first exp) '(') (cons (first exp) (helper (rest exp)))]\n      [(equal? (first exp) '[') (cons (first exp) (helper (rest exp)))]\n      [(equal? (first exp) '{') (cons (first exp) (helper (rest exp)))]\n      [else (helper (rest exp))]))\n  (empty? (helper exp)))\n",
    "  (define (helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (helper (rest exp) (rest stack)))]\n      [else (helper (rest exp) stack)]))\n  (helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (helper (rest exp) (rest stack)))]\n      [else (helper (rest exp) stack)]))\n  (helper exp '()))\n",
    "  (define (helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (helper (rest exp) (rest stack)))]\n      [else (helper (rest exp) stack)]))\n  (helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp empty))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (helper (rest exp) (cons (first exp) stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (helper (rest exp) (rest stack)))]\n      [else (helper (rest exp) stack)]))\n  (helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons (first exp) stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (helper (rest exp) (rest stack)))]\n      [else (helper (rest exp) stack)]))\n  (helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons (first exp) stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (helper exp stack)\n    (cond [(empty? exp) (empty? stack)]\n          [(char=? (first exp) #\\() (helper (rest exp) (cons #\\( stack)))]\n          [(char=? (first exp) #\\)) (and (not (empty? stack)) (helper (rest exp) (rest stack)))]\n          [else (helper (rest exp) stack)]))\n  (helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (helper (rest exp) (rest stack)))]\n      [else (helper (rest exp) stack)]))\n  (helper exp empty))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (helper (rest exp) (rest stack)))]\n      [else (helper (rest exp) stack)]))\n  (helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond [(empty? exp) (empty? stack)]\n          [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n          [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n          [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check_expression_iter exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_iter (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_iter (rest exp) (rest stack)))]\n      [else (check_expression_iter (rest exp) stack)]))\n  (check_expression_iter exp '()))\n",
    "  (define (helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (helper (rest exp) (rest stack)))]\n      [else (helper (rest exp) stack)]))\n  (helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (helper (rest exp) (rest stack)))]\n      [else (helper (rest exp) stack)]))\n  (helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check-expression-helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check-expression-helper (rest exp) (cons (first exp) stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check-expression-helper (rest exp) (rest stack)))]\n      [else (check-expression-helper (rest exp) stack)]))\n  (check-expression-helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons (first exp) stack))]\n      [(char=? (first exp) #\\)) (if (empty? stack) #f (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (if (empty? stack) #f (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons (first exp) stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond [(empty? exp) (empty? stack)]\n          [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n          [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n          [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond [(empty? exp) (empty? stack)]\n          [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n          [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n          [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond [(empty? exp) (empty? stack)]\n          [else (cond [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons (first exp) stack))]\n                      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n                      [else (check_expression_helper (rest exp) stack)])]))\n  (check_expression_helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond [(empty? exp) (empty? stack)]\n          [(equal? (first exp) '\\() (check_expression_helper (rest exp) (cons '\\( stack)))]\n          [(equal? (first exp) '\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n          [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check_expression_iter exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_iter (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_iter (rest exp) (rest stack)))]\n      [else (check_expression_iter (rest exp) stack)]))\n  (check_expression_iter exp '()))\n",
    "  (define (check-expression-helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check-expression-helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check-expression-helper (rest exp) (rest stack)))]\n      [else (check-expression-helper (rest exp) stack)]))\n  (check-expression-helper exp '()))\n",
    "  (define (check-expression-helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check-expression-helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check-expression-helper (rest exp) (rest stack)))]\n      [else (check-expression-helper (rest exp) stack)]))\n  (check-expression-helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (helper (rest exp) (rest stack)))]\n      [else (helper (rest exp) stack)]))\n  (helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check-expression-helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check-expression-helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check-expression-helper (rest exp) (rest stack)))]\n      [else (check-expression-helper (rest exp) stack)]))\n  (check-expression-helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (let loop ([exp exp] [stack '()])\n    (cond [(empty? exp) (empty? stack)]\n          [(char=? (first exp) #\\() (loop (rest exp) (cons (first exp) stack))]\n          [(char=? (first exp) #\\)) (and (not (empty? stack)) (loop (rest exp) (rest stack)))]\n          [else (loop (rest exp) stack)])))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check-expression-helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check-expression-helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check-expression-helper (rest exp) (rest stack)))]\n      [else (check-expression-helper (rest exp) stack)]))\n  (check-expression-helper exp '()))\n",
    "  (define (check_expression_iter exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_iter (rest exp) (cons (first exp) stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_iter (rest exp) (rest stack)))]\n      [else (check_expression_iter (rest exp) stack)]))\n  (check_expression_iter exp '()))\n",
    "  (define (check-expression-helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check-expression-helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check-expression-helper (rest exp) (rest stack)))]\n      [else (check-expression-helper (rest exp) stack)]))\n  (check-expression-helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check-expression-helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check-expression-helper (rest exp) (cons #\\) stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check-expression-helper (rest exp) (rest stack)))]\n      [else (check-expression-helper (rest exp) stack)]))\n  (check-expression-helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\()\n       (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\))\n       (and (not (empty? stack))\n            (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (helper (rest exp) (rest stack)))]\n      [else (helper (rest exp) stack)]))\n  (helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (helper (rest exp) (cons (first exp) stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (helper (rest exp) (rest stack)))]\n      [else (helper (rest exp) stack)]))\n  (helper exp '()))\n",
    "  (define (check_expression_iter exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_iter (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_iter (rest exp) (rest stack)))]\n      [else (check_expression_iter (rest exp) stack)]))\n  (check_expression_iter exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check-helper exp stack)\n    (cond [(empty? exp) (empty? stack)]\n          [(char=? (first exp) #\\() (check-helper (rest exp) (cons (first exp) stack))]\n          [(char=? (first exp) #\\)) (and (not (empty? stack)) (check-helper (rest exp) (rest stack)))]\n          [else (check-helper (rest exp) stack)]))\n  (check-helper exp '()))\n",
    "  (define (check_expression_iter exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_iter (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_iter (rest exp) (rest stack)))]\n      [else (check_expression_iter (rest exp) stack)]))\n  (check_expression_iter exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons (first exp) stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check-helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check-helper (rest exp) (cons (first exp) stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check-helper (rest exp) (rest stack)))]\n      [else (check-helper (rest exp) stack)]))\n  (check-helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(eq? (first exp) '\\() (check_expression_helper (rest exp) (cons '\\( stack))]\n      [(eq? (first exp) '\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check-expression-helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check-expression-helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check-expression-helper (rest exp) (rest stack)))]\n      [else (check-expression-helper (rest exp) stack)]))\n  (check-expression-helper exp '()))\n",
    "  (define (check-exp-helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check-exp-helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check-exp-helper (rest exp) (rest stack)))]\n      [else (check-exp-helper (rest exp) stack)]))\n  (check-exp-helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check-expression-helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(equal? (first exp) \"{\") (check-expression-helper (rest exp) (cons \"{\" stack))]\n      [(equal? (first exp) \"}\") (and (not (empty? stack)) (check-expression-helper (rest exp) (rest stack)))]\n      [else (check-expression-helper (rest exp) stack)]))\n  (check-expression-helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (helper (rest exp) (rest stack)))]\n      [else (helper (rest exp) stack)]))\n  (helper exp '()))\n",
    "  (define (check-expression-helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check-expression-helper (rest exp) (cons #\\) stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check-expression-helper (rest exp) (rest stack)))]\n      [else (check-expression-helper (rest exp) stack)]))\n  (check-expression-helper exp '()))\n",
    "  (define (helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (helper (rest exp) (rest stack)))]\n      [else (helper (rest exp) stack)]))\n  (helper exp '()))\n",
    "  (define (check_expression_iter exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_iter (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_iter (rest exp) (rest stack)))]\n      [else (check_expression_iter (rest exp) stack)]))\n  (check_expression_iter exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons (first exp) stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check_expression-iter exp stack)\n    (cond [(empty? exp) (empty? stack)]\n          [(char=? (first exp) #\\() (check_expression-iter (rest exp) (cons #\\( stack))]\n          [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression-iter (rest exp) (rest stack)))]\n          [else (check_expression-iter (rest exp) stack)]))\n  (check_expression-iter exp '()))\n",
    "  (define (check-expression-helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check-expression-helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check-expression-helper (rest exp) (rest stack)))]\n      [else (check-expression-helper (rest exp) stack)]))\n  (check-expression-helper exp '()))\n",
    "  (define (is_open? c)\n    (or (char=? c #\\() (char=? c #\\[) (char=? c #\\{)))\n  (define (is_close? c)\n    (or (char=? c #\\)) (char=? c #\\]) (char=? c #\\})))\n  (define (is_match? o c)\n    (and (is_open? o) (is_close? c)\n         (or (and (char=? o #\\() (char=? c #\\)))\n             (and (char=? o #\\[) (char=? c #\\]))\n             (and (char=? o #\\{) (char=? c #\\})))))\n  (define (check-expression-helper exp stack)\n    (cond [(empty? exp) (empty? stack)]\n          [(is_open? (first exp))\n           (check-expression-helper (rest exp) (cons (first exp) stack))]\n          [(is_close? (first exp))\n           (and (not (empty? stack))\n                (is_match? (first stack) (first exp))\n                (check-expression-helper (rest exp) (rest stack)))]\n          [else (check-expression-helper (rest exp) stack)]))\n  (check-expression-helper exp '()))\n",
    "  (define (check_expression_iter exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_iter (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_iter (rest exp) (rest stack)))]\n      [else (check_expression_iter (rest exp) stack)]))\n  (check_expression_iter exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp empty))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (helper (rest exp) (rest stack)))]\n      [else (helper (rest exp) stack)]))\n  (helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (let loop ([exp exp] [stack '()])\n    (cond [(empty? exp) (empty? stack)]\n          [(equal? (first exp) '\\() (loop (rest exp) (cons (first exp) stack))]\n          [(equal? (first exp) '\\)) (and (not (empty? stack)) (loop (rest exp) (rest stack)))]\n          [else (loop (rest exp) stack)])))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (helper (rest exp) (rest stack)))]\n      [else (helper (rest exp) stack)]))\n  (helper exp '()))\n",
    "  (define (helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (helper (rest exp) (rest stack)))]\n      [else (helper (rest exp) stack)]))\n  (helper exp '()))\n",
    "  (define (check-expression-helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check-expression-helper (rest exp) (cons #\\) stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check-expression-helper (rest exp) (rest stack)))]\n      [else (check-expression-helper (rest exp) stack)]))\n  (check-expression-helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons (first exp) stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons (first exp) stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(equal? (first exp) \"(\") (check_expression_helper (rest exp) (cons (first exp) stack))]\n      [(equal? (first exp) \")\") (if (empty? stack) #f (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check-expression-helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check-expression-helper (rest exp) (cons #\\) stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check-expression-helper (rest exp) (rest stack)))]\n      [else (check-expression-helper (rest exp) stack)]))\n  (check-expression-helper exp '()))\n",
    "  (define (helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (helper (rest exp) (rest stack)))]\n      [else (helper (rest exp) stack)]))\n  (helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check-helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check-helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check-helper (rest exp) (rest stack)))]\n      [else (check-helper (rest exp) stack)]))\n  (check-helper exp '()))\n",
    "  (define (helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(eq? (first exp) '\\() (helper (rest exp) (cons '\\( stack)))]\n      [(eq? (first exp) '\\)) (and (not (empty? stack)) (helper (rest exp) (rest stack)))]\n      [else (helper (rest exp) stack)]))\n  (helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons (first exp) stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (helper (rest exp) (rest stack)))]\n      [else (helper (rest exp) stack)]))\n  (helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (if (empty? exp)\n        (empty? stack)\n        (let ([c (first exp)])\n          (cond\n            [(equal? c \"(\") (check_expression_helper (rest exp) (cons c stack))]\n            [(equal? c \")\") (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n            [else (check_expression_helper (rest exp) stack)]))))\n  (check_expression_helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (char=? (first stack) #\\() (helper (rest exp) (rest stack)))]\n      [else (helper (rest exp) stack)]))\n  (helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons (first exp) stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons (first exp) stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp empty))\n",
    "  (define (check-expression-helper exp stack)\n    (cond [(empty? exp) (empty? stack)]\n          [(char=? (first exp) #\\() (check-expression-helper (rest exp) (cons #\\( stack))]\n          [(char=? (first exp) #\\)) (and (not (empty? stack)) (check-expression-helper (rest exp) (rest stack)))]\n          [else (check-expression-helper (rest exp) stack)]))\n  (check-expression-helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check-expression-helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check-expression-helper (rest exp) (cons #\\) stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check-expression-helper (rest exp) (rest stack)))]\n      [else (check-expression-helper (rest exp) stack)]))\n  (check-expression-helper exp '()))\n",
    "  (define (check-expression-helper exp stack)\n    (cond [(empty? exp) (empty? stack)]\n          [(equal? (first exp) \"(\") (check-expression-helper (rest exp) (cons (first exp) stack))]\n          [(equal? (first exp) \")\") (and (not (empty? stack)) (check-expression-helper (rest exp) (rest stack)))]\n          [else (check-expression-helper (rest exp) stack)]))\n  (check-expression-helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (helper (rest exp) (rest stack)))]\n      [else (helper (rest exp) stack)]))\n  (helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (helper (rest exp) (rest stack)))]\n      [else (helper (rest exp) stack)]))\n  (helper exp '()))\n",
    "  (define (helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (helper (rest exp) (rest stack)))]\n      [else (helper (rest exp) stack)]))\n  (helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check_expression_iter exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_iter (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_iter (rest exp) (rest stack)))]\n      [else (check_expression_iter (rest exp) stack)]))\n  (check_expression_iter exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check_expression_iter exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_iter (rest exp) (cons (first exp) stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_iter (rest exp) (rest stack)))]\n      [else (check_expression_iter (rest exp) stack)]))\n  (check_expression_iter exp '()))\n",
    "  (define (check_expression_iter exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_iter (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_iter (rest exp) (rest stack)))]\n      [else (check_expression_iter (rest exp) stack)]))\n  (check_expression_iter exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (is_balanced exp)\n    (cond\n      [(empty? exp) #t]\n      [(eq? (first exp) '()) #t]\n      [(eq? (first exp) ')') #f]\n      [(eq? (first exp) '(') (is_balanced (cons (rest exp) (rest (first exp))))]\n      [else (is_balanced (cons (rest exp) (first exp)))]))\n  (is_balanced (list exp)))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons (first exp) stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (helper (rest exp) (rest stack)))]\n      [else (helper (rest exp) stack)]))\n  (helper exp '()))\n",
    "  (define (check-expression-helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\()\n       (check-expression-helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\))\n       (and (not (empty? stack))\n            (check-expression-helper (rest exp) (rest stack)))]\n      [else (check-expression-helper (rest exp) stack)]))\n  (check-expression-helper exp '()))\n",
    "  (define (helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (helper (rest exp) (rest stack)))]\n      [else (helper (rest exp) stack)]))\n  (helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check-expression-helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check-expression-helper (rest exp) (cons (first exp) stack))]\n      [(char=? (first exp) #\\)) (if (empty? stack) #f (check-expression-helper (rest exp) (rest stack)))]\n      [else (check-expression-helper (rest exp) stack)]))\n  (check-expression-helper exp '()))\n"
  ]
}