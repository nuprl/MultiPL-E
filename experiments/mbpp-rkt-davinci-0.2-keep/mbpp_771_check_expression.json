{
  "name": "mbpp_771_check_expression",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n(define (check_expression exp)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_771_check_expression.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_expression))\n    (check-equal? (candidate \"{()}[{}]\") #t)\n    (check-equal? (candidate \"{()}[{]\") #f)\n    (check-equal? (candidate \"{()}[{}][]({})\") #t)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons (first exp) stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check_expression_iter exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_iter (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_iter (rest exp) (rest stack)))]\n      [else (check_expression_iter (rest exp) stack)]))\n  (check_expression_iter exp '()))\n",
    "  (define (helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (helper (rest exp) (rest stack)))]\n      [else (helper (rest exp) stack)]))\n  (helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check-exp-helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check-exp-helper (rest exp) (cons (first exp) stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check-exp-helper (rest exp) (rest stack)))]\n      [else (check-exp-helper (rest exp) stack)]))\n  (check-exp-helper exp '()))\n",
    "  (define (check-expression-helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(eq? (first exp) '\\() (check-expression-helper (rest exp) (cons '\\( stack)))]\n      [(eq? (first exp) '\\)) (and (not (empty? stack)) (check-expression-helper (rest exp) (rest stack)))]\n      [else (check-expression-helper (rest exp) stack)]))\n  (check-expression-helper exp '()))\n",
    "  (define (helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (helper (rest exp) (rest stack)))]\n      [else (helper (rest exp) stack)]))\n  (helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (helper exp stack)\n    (cond [(empty? exp) (empty? stack)]\n          [(char=? (first exp) #\\() (helper (rest exp) (cons #\\( stack)))]\n          [(char=? (first exp) #\\)) (and (not (empty? stack)) (helper (rest exp) (rest stack)))]\n          [else (helper (rest exp) stack)]))\n  (helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (let ([stack '()])\n    (for ([c (in-string exp)])\n      (cond\n        [(char=? c #\\() (push c stack)]\n        [(char=? c #\\)) (unless (empty? stack) (pop stack))]))\n    (empty? stack)))\n",
    "  (define (helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (helper (rest exp) (rest stack)))]\n      [else (helper (rest exp) stack)]))\n  (helper exp '()))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (let loop ([exp exp] [stack '()])\n    (cond [(empty? exp) (empty? stack)]\n          [(equal? (first exp) '()) (loop (rest exp) stack)]\n          [(equal? (first exp) ') (and (not (empty? stack)) (equal? (first stack) '()) (loop (rest exp) (rest stack)))]\n          [(equal? (first exp) ') (and (not (empty? stack)) (equal? (first stack) ') (loop (rest exp) (rest stack)))]\n          [else (loop (rest exp) (cons (first exp) stack))])))\n",
    "  (define (check_expression_helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check_expression_helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check_expression_helper (rest exp) (rest stack)))]\n      [else (check_expression_helper (rest exp) stack)]))\n  (check_expression_helper exp '()))\n",
    "  (define (check-expression-helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(char=? (first exp) #\\() (check-expression-helper (rest exp) (cons #\\( stack))]\n      [(char=? (first exp) #\\)) (and (not (empty? stack)) (check-expression-helper (rest exp) (rest stack)))]\n      [else (check-expression-helper (rest exp) stack)]))\n  (check-expression-helper exp '()))\n"
  ]
}