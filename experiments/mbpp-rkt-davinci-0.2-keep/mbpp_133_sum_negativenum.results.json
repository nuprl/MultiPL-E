{
  "name": "mbpp_133_sum_negativenum",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_133_sum_negativenum.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(positive? (first nums)) (sum_negativenum (rest nums))]\n    [else (+ (first nums) (sum_negativenum (rest nums)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(< (first nums) 0)\n     (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(< (first nums) 0) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [else\n     (if (< (first nums) 0)\n         (+ (first nums) (sum_negativenum (rest nums)))\n         (sum_negativenum (rest nums)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(positive? (first nums)) (sum_negativenum (rest nums))]\n    [else (+ (first nums) (sum_negativenum (rest nums)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(positive? (first nums)) (sum_negativenum (rest nums))]\n    [else (+ (first nums) (sum_negativenum (rest nums)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(< (first nums) 0) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(< (first nums) 0) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(< (first nums) 0) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(null? nums) 0]\n    [(and (number? (car nums)) (< (car nums) 0)) (+ (car nums) (sum_negativenum (cdr nums)))]\n    [else (sum_negativenum (cdr nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1666123976,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(null? nums) 0]\n    [(< (car nums) 0) (+ (car nums) (sum_negativenum (cdr nums)))]\n    [else (sum_negativenum (cdr nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1666123976,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond [(empty? nums) 0]\n        [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n        [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond ((null? nums) 0)\n        ((< (car nums) 0) (+ (car nums) (sum_negativenum (cdr nums))))\n        (else (sum_negativenum (cdr nums)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1666123978,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(null? nums) 0]\n    [(< (car nums) 0) (+ (car nums) (sum_negativenum (cdr nums)))]\n    [else (sum_negativenum (cdr nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1666123976,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(positive? (first nums)) (sum_negativenum (rest nums))]\n    [else (+ (first nums) (sum_negativenum (rest nums)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (foldl + 0 (filter negative? nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1666123978,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (apply + (filter negative? nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(< (first nums) 0) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond [(empty? nums) 0]\n        [(&lt; (first nums) 0) (+ (first nums) (sum_negativenum (rest nums)))]\n        [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1666123978,
      "stdout": "",
      "stderr": "/tmp/tmp75quh9zc.rkt:7:45: read-syntax: missing `]` to close preceding `[`, found instead `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(< (first nums) 0) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(null? nums) 0]\n    [(< (car nums) 0) (+ (car nums) (sum_negativenum (cdr nums)))]\n    [else (sum_negativenum (cdr nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1666123976,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(positive? (first nums)) (sum_negativenum (rest nums))]\n    [else (+ (first nums) (sum_negativenum (rest nums)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond [(empty? nums) 0]\n        [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n        [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(< (first nums) 0) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (apply + (filter negative? nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond ((null? nums) 0)\n        ((< (car nums) 0) (+ (car nums) (sum_negativenum (cdr nums))))\n        (else (sum_negativenum (cdr nums)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1666123978,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (apply + (filter negative? nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond [(empty? nums) 0]\n        [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n        [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(< (first nums) 0) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(< (first nums) 0) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (accumulate + 0 (filter negative? nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1666123976,
      "stdout": "",
      "stderr": "/tmp/tmp8fqjldm8.rkt:5:3: accumulate: unbound identifier\n  in: accumulate\n  location...:\n   /tmp/tmp8fqjldm8.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (accumulate + 0 (filter negative? nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1666123976,
      "stdout": "",
      "stderr": "/tmp/tmp8fqjldm8.rkt:5:3: accumulate: unbound identifier\n  in: accumulate\n  location...:\n   /tmp/tmp8fqjldm8.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(and (number? (first nums)) (negative? (first nums)))\n     (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1666123978,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(positive? (first nums)) (sum_negativenum (rest nums))]\n    [else (+ (first nums) (sum_negativenum (rest nums)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond [(empty? nums) 0]\n        [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n        [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums))\n     (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1666123978,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [else\n     (if (< (first nums) 0)\n         (+ (first nums) (sum_negativenum (rest nums)))\n         (sum_negativenum (rest nums)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(< (first nums) 0) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [else (if (< (first nums) 0)\n             (+ (first nums) (sum_negativenum (rest nums)))\n             (sum_negativenum (rest nums)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1666123978,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(> (first nums) 0) (sum_negativenum (rest nums))]\n    [else (+ (first nums) (sum_negativenum (rest nums)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1666123978,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(< (first nums) 0) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [else\n     (cond\n       [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n       [else (sum_negativenum (rest nums))])]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1666123976,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [else\n     (if (< (first nums) 0)\n         (+ (first nums) (sum_negativenum (rest nums)))\n         (sum_negativenum (rest nums)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(positive? (first nums)) (sum_negativenum (rest nums))]\n    [else (+ (first nums) (sum_negativenum (rest nums)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(< (first nums) 0) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(null? nums) 0]\n    [(< (car nums) 0) (+ (car nums) (sum_negativenum (cdr nums)))]\n    [else (sum_negativenum (cdr nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1666123976,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(< (first nums) 0) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(< (first nums) 0) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond [(empty? nums) 0]\n        [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n        [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(< (first nums) 0) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [else\n     (cond\n       [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n       [else (sum_negativenum (rest nums))])]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1666123976,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(positive? (first nums)) (sum_negativenum (rest nums))]\n    [else (+ (first nums) (sum_negativenum (rest nums)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(and (number? (first nums)) (< (first nums) 0))\n     (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1666123976,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond [(empty? nums) 0]\n        [(< (first nums) 0) (+ (first nums) (sum_negativenum (rest nums)))]\n        [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1666123976,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(< (first nums) 0) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(positive? (first nums)) (sum_negativenum (rest nums))]\n    [else (+ (first nums) (sum_negativenum (rest nums)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [else (if (negative? (first nums))\n             (+ (first nums) (sum_negativenum (rest nums)))\n             (sum_negativenum (rest nums)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1666123978,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (apply + (filter negative? nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(< (first nums) 0) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(< (first nums) 0) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(null? nums) 0]\n    [(< (car nums) 0) (+ (car nums) (sum_negativenum (cdr nums)))]\n    [else (sum_negativenum (cdr nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1666123976,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(< (first nums) 0) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [else\n     (if (< (first nums) 0)\n         (+ (first nums) (sum_negativenum (rest nums)))\n         (sum_negativenum (rest nums)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(null? nums) 0]\n    [(< (car nums) 0) (+ (car nums) (sum_negativenum (cdr nums)))]\n    [else (sum_negativenum (cdr nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1666123976,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(null? nums) 0]\n    [(positive? (car nums)) (sum_negativenum (cdr nums))]\n    [else (+ (car nums) (sum_negativenum (cdr nums)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1666123978,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond [(empty? nums) 0]\n        [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n        [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(null? nums) 0]\n    [(< (car nums) 0) (+ (car nums) (sum_negativenum (cdr nums)))]\n    [else (sum_negativenum (cdr nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1666123976,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(< (first nums) 0) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond [(empty? nums) 0]\n        [(< (first nums) 0) (+ (first nums) (sum_negativenum (rest nums)))]\n        [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1666123976,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond ((null? nums) 0)\n        ((< (car nums) 0) (+ (car nums) (sum_negativenum (cdr nums))))\n        (else (sum_negativenum (cdr nums)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1666123978,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(< (first nums) 0) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(< (first nums) 0) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond [(empty? nums) 0]\n        [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n        [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(> (first nums) 0) (sum_negativenum (rest nums))]\n    [else (+ (first nums) (sum_negativenum (rest nums)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1666123978,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond ((null? nums) 0)\n        ((< (car nums) 0) (+ (car nums) (sum_negativenum (cdr nums))))\n        (else (sum_negativenum (cdr nums)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1666123978,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond [(empty? nums) 0]\n        [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n        [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(positive? (first nums)) (sum_negativenum (rest nums))]\n    [else (+ (first nums) (sum_negativenum (rest nums)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(> (first nums) 0) (sum_negativenum (rest nums))]\n    [else (+ (first nums) (sum_negativenum (rest nums)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1666123978,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(and (number? (first nums)) (< (first nums) 0))\n     (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1666123976,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [else\n     (if (negative? (first nums))\n         (+ (first nums) (sum_negativenum (rest nums)))\n         (sum_negativenum (rest nums)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1666123978,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(positive? (first nums)) (sum_negativenum (rest nums))]\n    [else (+ (first nums) (sum_negativenum (rest nums)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond ((null? nums) 0)\n        ((< (car nums) 0) (+ (car nums) (sum_negativenum (cdr nums))))\n        (else (sum_negativenum (cdr nums)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1666123978,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (cond\n    [(empty? nums) 0]\n    [(negative? (first nums)) (+ (first nums) (sum_negativenum (rest nums)))]\n    [else (sum_negativenum (rest nums))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32)\n    (check-equal? (candidate (list 10 15 -14 13 -18 12 -20)) -52)\n    (check-equal? (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894)\n))\n\n(test-humaneval)",
      "timestamp": 1665509855,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}