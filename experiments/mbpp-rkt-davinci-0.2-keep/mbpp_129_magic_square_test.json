{
  "name": "mbpp_129_magic_square_test",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to calculate whether the matrix is a magic square.\n(define (magic_square_test my_matrix)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_129_magic_square_test.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate magic_square_test))\n    (check-equal? (candidate (list (list 7 12 1 14) (list 2 13 8 11) (list 16 3 10 5) (list 9 6 15 4))) #t)\n    (check-equal? (candidate (list (list 2 7 6) (list 9 5 1) (list 4 3 8))) #t)\n    (check-equal? (candidate (list (list 2 7 6) (list 9 5 1) (list 4 3 7))) #f)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let* ((n (length my_matrix))\n         (m (length (car my_matrix)))\n         (sum (apply + (car my_matrix)))\n         (sum_row (lambda (row) (apply + row)))\n         (sum_col (lambda (col) (apply + (map (lambda (row) (list-ref row col)) my_matrix))))\n         (sum_diag (lambda (diag) (apply + (map (lambda (row) (list-ref row (diag row))) my_matrix)))))\n    (and (= n m)\n         (andmap (lambda (row) (= (sum_row row) sum)) my_matrix)\n         (andmap (lambda (col) (= (sum_col col) sum)) (range 0 n))\n         (= (sum_diag (lambda (row) row)) sum)\n         (= (sum_diag (lambda (row) (- n 1 row))) sum))))\n",
    "  (let ((n (length my_matrix)))\n    (define (sum_row row)\n      (apply + (map (lambda (x) (vector-ref x row)) my_matrix)))\n    (define (sum_col col)\n      (apply + (map (lambda (x) (vector-ref x col)) my_matrix)))\n    (define (sum_diag)\n      (apply + (map (lambda (x) (vector-ref x x)) my_matrix)))\n    (define (sum_diag_rev)\n      (apply + (map (lambda (x) (vector-ref x (- n 1 x))) my_matrix)))\n    (define (sum_row_col row col)\n      (apply + (map (lambda (x) (vector-ref x col)) (map (lambda (x) (vector-ref x row)) my_matrix))))\n    (define (sum_row_col_rev row col)\n      (apply + (map (lambda (x) (vector-ref x (- n 1 col))) (map (lambda (x) (vector-ref x row)) my_matrix))))\n    (define (sum_col_row col row)\n      (apply + (map (lambda (x) (vector-ref x row)) (map (lambda (x) (vector-ref x col)) my_matrix))))\n    (define (sum_col_row_rev col row)\n      (apply + (map (lambda (x) (vector-ref x (- n 1 row))) (map (lambda (x) (vector-ref x col)) my_matrix))))\n    (define (sum_diag_row row)\n      (apply + (map (lambda (x) (vector-ref x x)) (map (lambda (x) (vector-ref x row)) my_matrix))))\n    (define (sum_diag_row_rev row)\n      (apply + (map (lambda (x) (vector-ref x (- n 1 x))) (map (lambda (x) (vector-ref x row)) my_matrix))))\n    (define (sum_diag_col col)\n      (apply + (map (lambda (x) (vector-ref x x)) (map (lambda (",
    "  (let ((n (length my_matrix)))\n    (let ((sum (apply + (list-ref my_matrix 0))))\n      (let ((row_sums (map (lambda (row) (apply + row)) my_matrix)))\n        (let ((col_sums (map (lambda (col) (apply + (map (lambda (row) (list-ref row col)) my_matrix))) (range n))))\n          (let ((diag_sums (list (apply + (map (lambda (i) (list-ref (list-ref my_matrix i) i)) (range n)))\n                                (apply + (map (lambda (i) (list-ref (list-ref my_matrix i) (- n 1 i))) (range n))))))\n            (and (apply = row_sums) (apply = col_sums) (apply = diag_sums)))))))))\n",
    "  (define (magic_square_test_helper my_matrix)\n    (define (magic_square_test_helper_helper my_matrix)\n      (define (magic_square_test_helper_helper_helper my_matrix)\n        (define (magic_square_test_helper_helper_helper_helper my_matrix)\n          (define (magic_square_test_helper_helper_helper_helper_helper my_matrix)\n            (define (magic_square_test_helper_helper_helper_helper_helper_helper my_matrix)\n              (define (magic_square_test_helper_helper_helper_helper_helper_helper_helper my_matrix)\n                (define (magic_square_test_helper_helper_helper_helper_helper_helper_helper_helper my_matrix)\n                  (define (magic_square_test_helper_helper_helper_helper_helper_helper_helper_helper_helper my_matrix)\n                    (define (magic_square_test_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper my_matrix)\n                      (define (magic_square_test_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper my_matrix)\n                        (define (magic_square_test_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper my_matrix)\n                          (define (magic_square_test_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper my_matrix)\n                            (define (magic_square_test_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_hel",
    "  (let ((n (length my_matrix)))\n    (let ((m (length (car my_matrix))))\n      (let ((sum (apply + (car my_matrix))))\n        (and (= n m)\n             (every (lambda (row) (= sum (apply + row))) my_matrix)\n             (every (lambda (col) (= sum (apply + (map (lambda (row) (list-ref row col)) my_matrix)))) (range m)))))))\n",
    "  (let* ([n (length my_matrix)]\n         [m (length (car my_matrix))]\n         [sum (apply + (car my_matrix))])\n    (and (= n m)\n         (every (lambda (row) (= sum (apply + row))) my_matrix)\n         (every (lambda (col) (= sum (apply + col)))\n                (transpose my_matrix))\n         (= sum (apply + (diagonal my_matrix)))\n         (= sum (apply + (diagonal (reverse my_matrix)))))))\n",
    "  (define (magic_square_test_helper my_matrix my_sum)\n    (cond\n      [(empty? my_matrix) #t]\n      [(not (= (sum_row (first my_matrix)) my_sum)) #f]\n      [(not (= (sum_col (first my_matrix)) my_sum)) #f]\n      [(not (= (sum_diag my_matrix) my_sum)) #f]\n      [(not (= (sum_diag (reverse my_matrix)) my_sum)) #f]\n      [else (magic_square_test_helper (rest my_matrix) my_sum)]))\n  (magic_square_test_helper my_matrix (sum_row (first my_matrix))))\n",
    "  (define (sum_of_row row)\n    (apply + (map (lambda (x) (vector-ref x row)) my_matrix)))\n  (define (sum_of_col col)\n    (apply + (map (lambda (x) (vector-ref x col)) my_matrix)))\n  (define (sum_of_diag direction)\n    (apply + (map (lambda (x) (vector-ref x x)) my_matrix)))\n  (define (sum_of_anti_diag direction)\n    (apply + (map (lambda (x) (vector-ref x (- (vector-length my_matrix) x 1))) my_matrix)))\n  (define (sum_of_row_or_col row_or_col)\n    (cond\n      [(eq? row_or_col 'row) (sum_of_row 0)]\n      [(eq? row_or_col 'col) (sum_of_col 0)]))\n  (define (sum_of_diag_or_anti_diag direction)\n    (cond\n      [(eq? direction 'diag) (sum_of_diag 0)]\n      [(eq? direction 'anti_diag) (sum_of_anti_diag 0)]))\n  (define (all_equal? my_list)\n    (cond\n      [(null? my_list) #t]\n      [(null? (cdr my_list)) #t]\n      [(eq? (car my_list) (car (cdr my_list))) (all_equal? (cdr my_list))]\n      [else #f]))\n  (define (all_equal_to_first? my_list)\n    (all_equal? (cons (car my_list) (cdr my_list))))\n  (define (all_equal_to_first_row? my_matrix)\n    (all_equal_to_first? (map sum_of_row (range (vector-length my_matrix)))))\n  (define (all_equal_to_first_col? my_matrix)\n    (all_equal_to_first? (map sum_of_col (range (vector-length my",
    "  (let* ([n (length my_matrix)]\n         [m (length (car my_matrix))]\n         [sum (apply + (car my_matrix))])\n    (and (= n m)\n         (andmap (lambda (x) (= sum (apply + x))) my_matrix)\n         (andmap (lambda (x) (= sum (apply + (map (lambda (y) (list-ref y x)) my_matrix)))) (range n))\n         (= sum (apply + (map (lambda (x) (list-ref (car my_matrix) x)) (range n))))\n         (= sum (apply + (map (lambda (x) (list-ref (car (reverse my_matrix)) x)) (range n)))))))\n",
    "  (let* ([n (length my_matrix)]\n         [m (length (car my_matrix))]\n         [magic_number (+ (* n (/ n 2)) (/ n 6))])\n    (cond\n      [(not (= n m)) #f]\n      [(not (= n (length (car (cdr my_matrix))))) #f]\n      [(not (= (apply + my_matrix) magic_number)) #f]\n      [(not (= (apply + (map sum my_matrix)) magic_number)) #f]\n      [(not (= (apply + (map (lambda (x) (sum (map (lambda (y) (list-ref y x)) my_matrix))) (range n))) magic_number)) #f]\n      [(not (= (sum (map (lambda (x) (list-ref (car my_matrix) x)) (range n))) magic_number)) #f]\n      [(not (= (sum (map (lambda (x) (list-ref (car (reverse my_matrix)) x)) (range n))) magic_number)) #f]\n      [else #t])))\n",
    "  (let ([rows (length my_matrix)]\n        [cols (length (car my_matrix))])\n    (if (and (= rows cols)\n             (= rows (length (cdr my_matrix))))\n        (let ([row_sums (map (lambda (row) (apply + row)) my_matrix)]\n              [col_sums (map (lambda (col) (apply + col)) (transpose my_matrix))]\n              [diag_sum (apply + (map (lambda (i) (list-ref (list-ref my_matrix i) i)) (range rows)))])\n          (and (= (apply + row_sums) (apply + col_sums))\n               (= (apply + row_sums) diag_sum)))\n        #f)))\n",
    "  (let ((n (length my_matrix)))\n    (and\n     (= n (length (car my_matrix)))\n     (andmap\n      (lambda (i) (= (sum (map (lambda (row) (list-ref row i)) my_matrix))\n                     (sum (map (lambda (row) (list-ref row 0)) my_matrix))))\n      (iota n))\n     (andmap\n      (lambda (i) (= (sum (map (lambda (row) (list-ref row i)) my_matrix))\n                     (sum (map (lambda (row) (list-ref row 0)) my_matrix))))\n      (iota n))\n     (andmap\n      (lambda (i) (= (sum (map (lambda (row) (list-ref row i)) my_matrix))\n                     (sum (map (lambda (row) (list-ref row 0)) my_matrix))))\n      (iota n))\n     (andmap\n      (lambda (i) (= (sum (map (lambda (row) (list-ref row i)) my_matrix))\n                     (sum (map (lambda (row) (list-ref row 0)) my_matrix))))\n      (iota n))\n     (andmap\n      (lambda (i) (= (sum (map (lambda (row) (list-ref row i)) my_matrix))\n                     (sum (map (lambda (row) (list-ref row 0)) my_matrix))))\n      (iota n))\n     (andmap\n      (lambda (i) (= (sum (map (lambda (row) (list-ref row i)) my_matrix))\n                     (sum (map (lambda (row) (list-ref row 0)) my_matrix))))\n      (iota n))\n     (andmap\n      (lambda (i) (= (sum (map (lambda (row) (list-ref row i)) my_matrix))\n                     (sum (map (lambda (row) (list-ref row 0)) my_matrix))))\n      (iota n))\n     (andmap\n      (lambda (i) (= (sum (map (lambda (row) (list-ref row i)) my_matrix))",
    "  (define (magic_square_test_helper my_matrix)\n    (define (sum_row my_matrix row)\n      (apply + (map (lambda (x) (vector-ref x row)) my_matrix)))\n    (define (sum_col my_matrix col)\n      (apply + (map (lambda (x) (vector-ref x col)) my_matrix)))\n    (define (sum_diag my_matrix)\n      (apply + (map (lambda (x) (vector-ref x x)) my_matrix)))\n    (define (sum_anti_diag my_matrix)\n      (apply + (map (lambda (x) (vector-ref x (- (vector-length x) 1))) my_matrix)))\n    (define (sum_all_rows my_matrix)\n      (map (lambda (x) (sum_row my_matrix x)) (range (vector-length (vector-ref my_matrix 0)))))\n    (define (sum_all_cols my_matrix)\n      (map (lambda (x) (sum_col my_matrix x)) (range (vector-length (vector-ref my_matrix 0)))))\n    (define (sum_all_diags my_matrix)\n      (list (sum_diag my_matrix) (sum_anti_diag my_matrix)))\n    (define (sum_all my_matrix)\n      (append (sum_all_rows my_matrix) (sum_all_cols my_matrix) (sum_all_diags my_matrix)))\n    (define (all_equal? my_list)\n      (apply = my_list))\n    (all_equal? (sum_all my_matrix)))\n  (if (and (= (vector-length my_matrix) (vector-length (vector-ref my_matrix 0)))\n           (= (vector-length my_matrix) (vector-length (vector-ref my_matrix 1))))\n      (magic_square_test_helper my_matrix)\n      #f))\n",
    "  (let ([n (length my_matrix)])\n    (and (= n (length (car my_matrix)))\n         (= (apply + (map (lambda (x) (apply + x)) my_matrix))\n            (* n (+ n 1) (/ n 2)))\n         (= (apply + (map (lambda (x) (apply + x)) (transpose my_matrix)))\n            (* n (+ n 1) (/ n 2)))\n         (= (apply + (map (lambda (x) (apply + x)) (diagonals my_matrix)))\n            (* n (+ n 1) (/ n 2)))\n         (= (apply + (map (lambda (x) (apply + x)) (diagonals (reverse my_matrix))))\n            (* n (+ n 1) (/ n 2))))))\n",
    "  (let ([n (length my_matrix)])\n    (let ([sum (apply + (map (lambda (x) (apply + x)) my_matrix))])\n      (and\n       (= sum (/ (* n (+ n 1) (* n n)) 2))\n       (let ([sum_rows (map (lambda (x) (apply + x)) my_matrix)])\n         (and\n          (= (apply + sum_rows) sum)\n          (let ([sum_cols (map (lambda (x) (apply + (map (lambda (y) (list-ref y x)) my_matrix))) (range n))])\n            (and\n             (= (apply + sum_cols) sum)\n             (let ([sum_diag1 (apply + (map (lambda (x) (list-ref (list-ref my_matrix x) x)) (range n)))])\n               (and\n                (= sum_diag1 sum)\n                (let ([sum_diag2 (apply + (map (lambda (x) (list-ref (list-ref my_matrix x) (- n 1 x))) (range n)))])\n                  (= sum_diag2 sum))))))))))))\n",
    "  (let* ([n (length my_matrix)]\n         [m (length (car my_matrix))]\n         [sum (apply + (car my_matrix))])\n    (and (= n m)\n         (andmap (lambda (row) (= sum (apply + row)))\n                 my_matrix)\n         (andmap (lambda (col) (= sum (apply + (map (lambda (row) (list-ref row col))\n                                                    my_matrix))))\n                 (range n))\n         (andmap (lambda (diag) (= sum (apply + diag)))\n                 (list (map (lambda (i) (list-ref (list-ref my_matrix i) i))\n                            (range n))\n                       (map (lambda (i) (list-ref (list-ref my_matrix i) (- n 1 i)))\n                            (range n)))))))\n",
    "  (let ([n (length my_matrix)])\n    (and (= n (length (car my_matrix)))\n         (= (apply + (map (lambda (x) (apply + x)) my_matrix))\n            (* n (+ 1 (* n n)))))))\n",
    "  (let* ([n (length my_matrix)]\n         [m (length (car my_matrix))]\n         [sum (apply + (car my_matrix))])\n    (and (= n m)\n         (andmap (lambda (row) (= sum (apply + row))) my_matrix)\n         (andmap (lambda (col) (= sum (apply + (map (lambda (row) (list-ref row col)) my_matrix)))) (range m))\n         (= sum (apply + (map (lambda (i) (list-ref (list-ref my_matrix i) i)) (range n))))\n         (= sum (apply + (map (lambda (i) (list-ref (list-ref my_matrix i) (- n 1 i))) (range n)))))))\n",
    "  (let ((n (length my_matrix)))\n    (let ((magic_sum (apply + (list-ref my_matrix 0 0) (list-ref my_matrix 0 1) (list-ref my_matrix 0 2))))\n      (let ((row_sum 0) (col_sum 0) (diag_sum 0) (diag_sum2 0))\n        (for ((i 0) (j 0))\n             ((= i n) #t)\n             (set! row_sum (+ row_sum (list-ref my_matrix i j)))\n             (set! col_sum (+ col_sum (list-ref my_matrix j i)))\n             (set! diag_sum (+ diag_sum (list-ref my_matrix i i)))\n             (set! diag_sum2 (+ diag_sum2 (list-ref my_matrix i (- n 1 i))))\n             (if (= j (- n 1))\n                 (begin\n                   (if (not (= row_sum magic_sum))\n                       (return #f))\n                   (if (not (= col_sum magic_sum))\n                       (return #f))\n                   (set! row_sum 0)\n                   (set! col_sum 0)\n                   (set! j 0)\n                   (set! i (+ i 1))))\n             (set! j (+ j 1))))\n        (if (not (= diag_sum magic_sum))\n            (return #f))\n        (if (not (= diag_sum2 magic_sum))\n            (return #f))\n        #t))))\n",
    "  (define (magic_square_test_helper my_matrix)\n    (define (magic_square_test_helper_helper my_matrix)\n      (define (magic_square_test_helper_helper_helper my_matrix)\n        (define (magic_square_test_helper_helper_helper_helper my_matrix)\n          (define (magic_square_test_helper_helper_helper_helper_helper my_matrix)\n            (define (magic_square_test_helper_helper_helper_helper_helper_helper my_matrix)\n              (define (magic_square_test_helper_helper_helper_helper_helper_helper_helper my_matrix)\n                (define (magic_square_test_helper_helper_helper_helper_helper_helper_helper_helper my_matrix)\n                  (define (magic_square_test_helper_helper_helper_helper_helper_helper_helper_helper_helper my_matrix)\n                    (define (magic_square_test_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper my_matrix)\n                      (define (magic_square_test_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper my_matrix)\n                        (define (magic_square_test_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper my_matrix)\n                          (define (magic_square_test_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper my_matrix)\n                            (define (magic_square_test_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_hel"
  ]
}