{
  "name": "mbpp_721_maxAverageOfPath",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n(define (maxAverageOfPath cost)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_721_maxAverageOfPath.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maxAverageOfPath))\n    (check-equal? (candidate (list (list 1 2 3) (list 6 5 4) (list 7 3 9))) 5.2)\n    (check-equal? (candidate (list (list 2 3 4) (list 7 6 5) (list 8 4 10))) 6.2)\n    (check-equal? (candidate (list (list 3 4 5) (list 8 7 6) (list 9 5 11))) 7.2)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 7 8 9))) 5.8)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (maxAverageOfPath-helper cost i j)\n    (cond\n      [(= i (length cost)) (list (list (list i j) 0))]\n      [(= j (length (car cost))) (list (list (list i j) 0))]\n      [else\n       (let* ([right (maxAverageOfPath-helper cost i (+ j 1))]\n              [down (maxAverageOfPath-helper cost (+ i 1) j)]\n              [right-max (apply max (map (lambda (x) (/ (+ (cadr x) (list-ref (car x) 0)) (add1 (length (car x))))) right))]\n              [down-max (apply max (map (lambda (x) (/ (+ (cadr x) (list-ref (car x) 0)) (add1 (length (car x))))) down))])\n         (cond\n           [(> right-max down-max) (map (lambda (x) (cons (cons i j) x)) right)]\n           [else (map (lambda (x) (cons (cons i j) x)) down)]))]))\n  (maxAverageOfPath-helper cost 0 0))\n",
    "  (define (maxAverageOfPath-helper cost i j)\n    (if (or (= i 0) (= j 0))\n        (list (list (list i j)) (list (list i j)))\n        (let* ([right (maxAverageOfPath-helper cost i (- j 1))]\n               [down (maxAverageOfPath-helper cost (- i 1) j)]\n               [right-paths (car right)]\n               [right-costs (cadr right)]\n               [down-paths (car down)]\n               [down-costs (cadr down)]\n               [right-cost (apply + (map (lambda (path) (list-ref (list-ref cost i) (car (last path)))) right-paths)))\n          (if (> (average right-costs) (average down-costs))\n              (list (map (lambda (path) (cons (list i j) path)) right-paths)\n                    (map (lambda (cost) (+ cost right-cost)) right-costs))\n              (list (map (lambda (path) (cons (list i j) path)) down-paths)\n                    (map (lambda (cost) (+ cost (list-ref (list-ref cost i) j))) down-costs))))))\n  (maxAverageOfPath-helper cost (- (length cost) 1) (- (length (car cost)) 1)))\n",
    "  (define (maxAverageOfPath-helper cost i j)\n    (cond\n      [(= i (length cost)) (list 0 0)]\n      [(= j (length (car cost))) (list 0 0)]\n      [else\n       (let* ([right (maxAverageOfPath-helper cost i (+ j 1))]\n              [down (maxAverageOfPath-helper cost (+ i 1) j)]\n              [right-cost (+ (car right) (list-ref (list-ref cost i) j))]\n              [right-count (+ (cadr right) 1)]\n              [down-cost (+ (car down) (list-ref (list-ref cost i) j))]\n              [down-count (+ (cadr down) 1)])\n         (if (> (/ right-cost right-count) (/ down-cost down-count))\n             (list right-cost right-count)\n             (list down-cost down-count)))]))\n  (let* ([result (maxAverageOfPath-helper cost 0 0)]\n         [cost (car result)]\n         [count (cadr result)])\n    (/ cost count)))\n",
    "  (define (maxAverageOfPath-helper cost i j)\n    (if (or (= i (length cost)) (= j (length (car cost))))\n        0\n        (let ([down (maxAverageOfPath-helper cost (+ i 1) j)]\n              [right (maxAverageOfPath-helper cost i (+ j 1))])\n          (let ([max (max down right)])\n            (if (zero? max)\n                (list-ref (list-ref cost i) j)\n                (+ (list-ref (list-ref cost i) j) max))))))\n  (maxAverageOfPath-helper cost 0 0))\n",
    "  (define (maxAverageOfPath-helper cost i j)\n    (cond\n      [(= i (- (length cost) 1))\n       (list (list (list i j)) (list (list (list i j)) (/ (list-ref (list-ref cost i) j) (+ i j))))]\n      [(= j (- (length (list-ref cost i)) 1))\n       (list (list (list i j)) (list (list (list i j)) (/ (list-ref (list-ref cost i) j) (+ i j))))]\n      [else\n       (let ([path1 (maxAverageOfPath-helper cost (+ i 1) j)]\n             [path2 (maxAverageOfPath-helper cost i (+ j 1))])\n         (if (> (list-ref (list-ref path1 1) 1) (list-ref (list-ref path2 1) 1))\n             (list (cons (list i j) (list-ref path1 0)) (list (cons (list i j) (list-ref path1 0)) (+ (list-ref (list-ref path1 1) 1) (list-ref (list-ref cost i) j))))\n             (list (cons (list i j) (list-ref path2 0)) (list (cons (list i j) (list-ref path2 0)) (+ (list-ref (list-ref path2 1) 1) (list-ref (list-ref cost i) j))))))]))\n  (maxAverageOfPath-helper cost 0 0))\n",
    "  (define (maxAverageOfPathHelper cost i j)\n    (if (or (= i (length cost)) (= j (length (car cost))))\n        0\n        (let ((right (maxAverageOfPathHelper cost i (+ j 1)))\n              (down (maxAverageOfPathHelper cost (+ i 1) j)))\n          (/ (+ (list-ref (list-ref cost i) j)\n                (if (and (not (= right 0)) (not (= down 0)))\n                    (max right down)\n                    (if (not (= right 0))\n                        right\n                        down)))\n             (+ 1 (if (not (= right 0))\n                      1\n                      0)\n                (if (not (= down 0))\n                    1\n                    0))))))\n  (maxAverageOfPathHelper cost 0 0))\n",
    "  (define (maxAverageOfPath-helper cost i j)\n    (if (or (= i (length cost)) (= j (length (car cost))))\n        0\n        (let ((down (maxAverageOfPath-helper cost (+ i 1) j))\n              (right (maxAverageOfPath-helper cost i (+ j 1))))\n          (max (+ (list-ref (list-ref cost i) j) down) (+ (list-ref (list-ref cost i) j) right)))))\n  (maxAverageOfPath-helper cost 0 0))\n",
    "  (define (maxAverageOfPath-helper cost i j)\n    (cond\n      [(= i (length cost)) (list (list (list i j)) 0)]\n      [(= j (length (car cost))) (list (list (list i j)) 0)]\n      [else\n       (let* ([down (maxAverageOfPath-helper cost (+ i 1) j)]\n              [right (maxAverageOfPath-helper cost i (+ j 1))]\n              [down-cost (apply + (map (lambda (x) (list-ref (list-ref cost i) (cadr x))) (car down)))])\n         (if (> (+ down-cost (cadr down)) (+ (list-ref (list-ref cost i) j) (cadr right)))\n             (cons (cons (list i j) (car down)) (+ down-cost (cadr down)))\n             (cons (cons (list i j) (car right)) (+ (list-ref (list-ref cost i) j) (cadr right)))))]))\n  (maxAverageOfPath-helper cost 0 0))\n",
    "  (define (maxAverageOfPathHelper cost i j)\n    (cond\n      [(= i (length cost)) (list (list (list i j)) 0)]\n      [(= j (length (car cost))) (list (list (list i j)) 0)]\n      [else\n       (let* ([right (maxAverageOfPathHelper cost i (+ j 1))]\n              [down (maxAverageOfPathHelper cost (+ i 1) j)]\n              [right-cost (+ (cadr right) (list-ref (list-ref cost i) j))]\n              [down-cost (+ (cadr down) (list-ref (list-ref cost i) j))])\n         (if (> right-cost down-cost)\n             (list (cons (list i j) (car right)) right-cost)\n             (list (cons (list i j) (car down)) down-cost)))]))\n  (let* ([result (maxAverageOfPathHelper cost 0 0)]\n         [cost (cadr result)]\n         [path (car result)])\n    (list path (/ cost (length path)))))\n",
    "  (define (maxAverageOfPath-helper cost i j)\n    (cond\n      [(= i (length cost)) (list (list (list i j)) (list 0))]\n      [(= j (length (car cost))) (list (list (list i j)) (list 0))]\n      [else\n       (let* ([right (maxAverageOfPath-helper cost i (+ j 1))]\n              [down (maxAverageOfPath-helper cost (+ i 1) j)]\n              [right-average (apply + (map (lambda (x) (list-ref (list-ref cost i) x)) (car right)))\n                             (/ right-average (length (car right)))]\n              [down-average (apply + (map (lambda (x) (list-ref (list-ref cost x) j)) (car down)))\n                            (/ down-average (length (car down)))])\n         (if (> right-average down-average)\n             (list (append (car right) (list (list i j))) (cons (list-ref (list-ref cost i) j) (cdr right)))\n             (list (append (car down) (list (list i j))) (cons (list-ref (list-ref cost i) j) (cdr down)))))]))\n  (maxAverageOfPath-helper cost 0 0))\n",
    "  (define (maxAverageOfPath-helper cost i j)\n    (cond\n      [(= i 0) (list (list i j) (list (list-ref (list-ref cost i) j)))]\n      [(= j 0) (list (list i j) (list (list-ref (list-ref cost i) j)))]\n      [else\n       (let* ([right (maxAverageOfPath-helper cost (- i 1) j)]\n              [down (maxAverageOfPath-helper cost i (- j 1))]\n              [right-cost (list-ref (cdr right) 0)]\n              [down-cost (list-ref (cdr down) 0)]\n              [right-path (car right)]\n              [down-path (car down)])\n         (if (> (+ right-cost (list-ref (list-ref cost i) j))\n                (+ down-cost (list-ref (list-ref cost i) j)))\n             (list (cons (list i j) right-path)\n                   (list (+ right-cost (list-ref (list-ref cost i) j))))\n             (list (cons (list i j) down-path)\n                   (list (+ down-cost (list-ref (list-ref cost i) j))))))]))\n  (let* ([n (length cost)]\n         [path (maxAverageOfPath-helper cost (- n 1) (- n 1))]\n         [cost (car (cdr path))]\n         [path (car path)])\n    (list path (/ cost (length path)))))\n",
    "  (define (maxAverageOfPathHelper cost i j)\n    (cond\n      [(= i (length cost)) 0]\n      [(= j (length (car cost))) 0]\n      [else (+ (list-ref (list-ref cost i) j)\n               (/ (+ (maxAverageOfPathHelper cost (+ i 1) j)\n                     (maxAverageOfPathHelper cost i (+ j 1))) 2))]))\n  (maxAverageOfPathHelper cost 0 0))\n",
    "  (define (helper cost i j)\n    (cond\n      [(= i (length cost)) (list (list i j) 0)]\n      [(= j (length (car cost))) (list (list i j) 0)]\n      [else\n       (let* ([right (helper cost i (+ j 1))]\n              [down (helper cost (+ i 1) j)]\n              [right-cost (+ (cadr right) (list-ref (list-ref cost i) j))]\n              [down-cost (+ (cadr down) (list-ref (list-ref cost i) j))])\n         (if (> right-cost down-cost)\n             (cons (cons i j) right)\n             (cons (cons i j) down)))]))\n  (let* ([path (helper cost 0 0)]\n         [cost (cadr path)])\n    (/ cost (length path))))\n",
    "  (define (maxAverageOfPath-helper cost i j)\n    (cond\n      [(= i (length cost)) (list (list (list i j)) 0)]\n      [(= j (length (car cost))) (list (list (list i j)) 0)]\n      [else\n       (let* ([right (maxAverageOfPath-helper cost i (+ j 1))]\n              [down (maxAverageOfPath-helper cost (+ i 1) j)]\n              [right-cost (+ (cadr right) (list-ref (list-ref cost i) j))]\n              [down-cost (+ (cadr down) (list-ref (list-ref cost i) j))])\n         (if (> right-cost down-cost)\n             (list (cons (list i j) (car right)) right-cost)\n             (list (cons (list i j) (car down)) down-cost)))]))\n  (let* ([path (maxAverageOfPath-helper cost 0 0)]\n         [cost (cadr path)])\n    (/ cost (length (car path)))))\n",
    "  (define (maxAverageOfPath-helper cost i j)\n    (cond\n      [(= i (length cost)) (list (list (list i j)) 0)]\n      [(= j (length (car cost))) (list (list (list i j)) 0)]\n      [else (let* ([right (maxAverageOfPath-helper cost i (+ j 1))]\n                   [down (maxAverageOfPath-helper cost (+ i 1) j)]\n                   [right-average (/ (apply + (map (lambda (x) (list-ref (list-ref cost (car x)) (cadr x))) (car right))) (length (car right)))]\n                   [down-average (/ (apply + (map (lambda (x) (list-ref (list-ref cost (car x)) (cadr x))) (car down))) (length (car down)))])\n              (if (> right-average down-average)\n                  (list (append (car right) (list (list i j))) right-average)\n                  (list (append (car down) (list (list i j))) down-average)))]))\n  (maxAverageOfPath-helper cost 0 0))\n",
    "  (define (maxAverageOfPath-helper cost i j)\n    (if (or (= i (length cost)) (= j (length (car cost))))\n        0\n        (let ([cost-here (list-ref (list-ref cost i) j)])\n          (max (+ cost-here (maxAverageOfPath-helper cost (+ i 1) j))\n               (+ cost-here (maxAverageOfPath-helper cost i (+ j 1)))))))\n  (maxAverageOfPath-helper cost 0 0))\n",
    "  (define (maxAverageOfPathHelper cost i j)\n    (cond ((= i (length cost)) (list 0 0))\n          ((= j (length (car cost))) (list 0 0))\n          (else\n           (let* ((right (maxAverageOfPathHelper cost i (+ j 1)))\n                  (down (maxAverageOfPathHelper cost (+ i 1) j))\n                  (right-cost (+ (car right) (list-ref (list-ref cost i) j)))\n                  (down-cost (+ (car down) (list-ref (list-ref cost i) j)))\n                  (right-count (+ (cadr right) 1))\n                  (down-count (+ (cadr down) 1)))\n             (if (> (/ right-cost right-count) (/ down-cost down-count))\n                 (list right-cost right-count)\n                 (list down-cost down-count))))))\n  (let* ((result (maxAverageOfPathHelper cost 0 0))\n         (cost (car result))\n         (count (cadr result)))\n    (/ cost count)))\n",
    "  (define (maxAverageOfPath-helper cost i j)\n    (cond\n      [(and (= i (- (length cost) 1)) (= j (- (length (car cost)) 1)))\n       (list (list i j) (/ (list-ref (list-ref cost i) j) 2))]\n      [(= i (- (length cost) 1))\n       (let ([path (maxAverageOfPath-helper cost i (+ j 1))])\n         (list (cons (list i j) (car path))\n               (/ (+ (list-ref (list-ref cost i) j) (cadr path)) (+ 1 (caddr path)))))]\n      [(= j (- (length (car cost)) 1))\n       (let ([path (maxAverageOfPath-helper cost (+ i 1) j)])\n         (list (cons (list i j) (car path))\n               (/ (+ (list-ref (list-ref cost i) j) (cadr path)) (+ 1 (caddr path)))))]\n      [else\n       (let ([path-right (maxAverageOfPath-helper cost i (+ j 1))]\n             [path-down (maxAverageOfPath-helper cost (+ i 1) j)])\n         (if (> (cadr path-right) (cadr path-down))\n             (list (cons (list i j) (car path-right))\n                   (/ (+ (list-ref (list-ref cost i) j) (cadr path-right)) (+ 1 (caddr path-right))))\n             (list (cons (list i j) (car path-down))\n                   (/ (+ (list-ref (list-ref cost i) j) (cadr path-down)) (+ 1 (caddr path-down))))))]))\n  (maxAverageOfPath-helper cost 0 0))\n",
    "  (define (maxAverageOfPath-helper cost i j)\n    (cond\n      [(= i (length cost)) (list (list (list i j)) 0)]\n      [(= j (length (car cost))) (list (list (list i j)) 0)]\n      [else\n       (let*\n           ([right (maxAverageOfPath-helper cost i (+ j 1))]\n            [down (maxAverageOfPath-helper cost (+ i 1) j)]\n            [right-cost (apply + (map (lambda (x) (list-ref (list-ref cost i) (car x))) (car right)))])\n         (if (> (+ right-cost (cadr right)) (+ (list-ref (list-ref cost i) j) (cadr down)))\n             (cons (cons (list i j) (car right)) (+ right-cost (cadr right)))\n             (cons (cons (list i j) (car down)) (+ (list-ref (list-ref cost i) j) (cadr down)))))]))\n  (let*\n      ([path (maxAverageOfPath-helper cost 0 0)]\n       [cost (cadr path)])\n    (cons (map (lambda (x) (list-ref cost (car x))) (car path)) (/ cost (length (car path))))))\n",
    "  (define (maxAverageOfPath-helper cost i j)\n    (cond ((= i (length cost))\n           (list (list (list i j)) (/ (list-ref (list-ref cost i) j) (+ i j))))\n          ((= j (length (list-ref cost i)))\n           (list (list (list i j)) (/ (list-ref (list-ref cost i) j) (+ i j))))\n          (else\n           (let* ([right (maxAverageOfPath-helper cost (+ i 1) j)]\n                  [down (maxAverageOfPath-helper cost i (+ j 1))])\n             (if (> (cadr right) (cadr down))\n                 (list (cons (list i j) (car right))\n                       (+ (list-ref (list-ref cost i) j) (cadr right)))\n                 (list (cons (list i j) (car down))\n                       (+ (list-ref (list-ref cost i) j) (cadr down))))))))\n  (car (maxAverageOfPath-helper cost 0 0)))\n"
  ]
}