{
  "name": "mbpp_629_Split",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_629_Split.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list))\n     (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (if (null? list)\n      '()\n      (if (even? (car list))\n          (cons (car list) (Split (cdr list)))\n          (Split (cdr list)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (if (null? list)\n      '()\n      (cons (car list) (Split (cdr list)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1ysn4jk3.rkt:14:4\nactual:     '(1 2 3 4 5)\nexpected:   '(2 4)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1ysn4jk3.rkt:15:4\nactual:     '(4 5 6 7 8 0 1)\nexpected:   '(4 6 8 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1ysn4jk3.rkt:16:4\nactual:     '(8 12 15 19)\nexpected:   '(8 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (if (null? list)\n      '()\n      (if (even? (car list))\n          (cons (car list) (Split (cdr list)))\n          (Split (cdr list)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list))\n     (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (if (null? list)\n      '()\n      (cons (car list) (Split (cdr list)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1ysn4jk3.rkt:14:4\nactual:     '(1 2 3 4 5)\nexpected:   '(2 4)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1ysn4jk3.rkt:15:4\nactual:     '(4 5 6 7 8 0 1)\nexpected:   '(4 6 8 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1ysn4jk3.rkt:16:4\nactual:     '(8 12 15 19)\nexpected:   '(8 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(null? list) '()]\n    [(even? (car list))\n     (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (if (null? list)\n      '()\n      (if (even? (car list))\n          (cons (car list) (Split (cdr list)))\n          (Split (cdr list)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond [(empty? list) empty]\n        [(even? (first list)) (cons (first list) (Split (rest list)))]\n        [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123719,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (if (null? list)\n      '()\n      (if (even? (car list))\n          (cons (car list) (Split (cdr list)))\n          (Split (cdr list)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond ((null? list) '())\n        ((even? (car list)) (cons (car list) (Split (cdr list))))\n        (else (Split (cdr list)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123719,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (filter even? list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123719,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) '()]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123719,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (if (null? list)\n      '()\n      (cons (car list) (Split (cdr list)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1ysn4jk3.rkt:14:4\nactual:     '(1 2 3 4 5)\nexpected:   '(2 4)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1ysn4jk3.rkt:15:4\nactual:     '(4 5 6 7 8 0 1)\nexpected:   '(4 6 8 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1ysn4jk3.rkt:16:4\nactual:     '(8 12 15 19)\nexpected:   '(8 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list))\n     (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (if (null? list)\n      '()\n      (cons (car list)\n            (Split (cdr list)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123719,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc73s68i0.rkt:15:4\nactual:     '(1 2 3 4 5)\nexpected:   '(2 4)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc73s68i0.rkt:16:4\nactual:     '(4 5 6 7 8 0 1)\nexpected:   '(4 6 8 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc73s68i0.rkt:17:4\nactual:     '(8 12 15 19)\nexpected:   '(8 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(null? list) (list '() '())]\n    [(even? (car list))\n     (let ([split (Split (cdr list))])\n       (list (cons (car list) (car split)) (cadr split)))]\n    [else\n     (let ([split (Split (cdr list))])\n       (list (car split) (cons (car list) (cadr split))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123719,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpulqoz43w.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpulqoz43w.rkt:20:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpulqoz43w.rkt:21:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (if (null? list)\n      '()\n      (cons (car list) (Split (cdr list)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1ysn4jk3.rkt:14:4\nactual:     '(1 2 3 4 5)\nexpected:   '(2 4)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1ysn4jk3.rkt:15:4\nactual:     '(4 5 6 7 8 0 1)\nexpected:   '(4 6 8 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1ysn4jk3.rkt:16:4\nactual:     '(8 12 15 19)\nexpected:   '(8 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) '()]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123719,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (if (null? list)\n      '()\n      (cons (car list) (Split (cdr list)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1ysn4jk3.rkt:14:4\nactual:     '(1 2 3 4 5)\nexpected:   '(2 4)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1ysn4jk3.rkt:15:4\nactual:     '(4 5 6 7 8 0 1)\nexpected:   '(4 6 8 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1ysn4jk3.rkt:16:4\nactual:     '(8 12 15 19)\nexpected:   '(8 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (if (null? list)\n      '()\n      (cons (car list) (Split (cdr list)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1ysn4jk3.rkt:14:4\nactual:     '(1 2 3 4 5)\nexpected:   '(2 4)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1ysn4jk3.rkt:15:4\nactual:     '(4 5 6 7 8 0 1)\nexpected:   '(4 6 8 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1ysn4jk3.rkt:16:4\nactual:     '(8 12 15 19)\nexpected:   '(8 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    ((null? list) '())\n    ((even? (car list)) (cons (car list) (Split (cdr list))))\n    (else (Split (cdr list)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123719,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (if (null? list)\n      '()\n      (if (even? (car list))\n          (cons (car list) (Split (cdr list)))\n          (Split (cdr list)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(null? list) '()]\n    [(even? (car list))\n     (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (if (null? list)\n      '()\n      (cons (car list)\n            (Split (cdr list)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123719,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc73s68i0.rkt:15:4\nactual:     '(1 2 3 4 5)\nexpected:   '(2 4)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc73s68i0.rkt:16:4\nactual:     '(4 5 6 7 8 0 1)\nexpected:   '(4 6 8 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc73s68i0.rkt:17:4\nactual:     '(8 12 15 19)\nexpected:   '(8 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (if (null? list)\n      '()\n      (cons (car list) (Split (cdr list)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1ysn4jk3.rkt:14:4\nactual:     '(1 2 3 4 5)\nexpected:   '(2 4)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1ysn4jk3.rkt:15:4\nactual:     '(4 5 6 7 8 0 1)\nexpected:   '(4 6 8 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1ysn4jk3.rkt:16:4\nactual:     '(8 12 15 19)\nexpected:   '(8 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (if (null? list)\n      '()\n      (cons (car list)\n            (Split (cdr list)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123719,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc73s68i0.rkt:15:4\nactual:     '(1 2 3 4 5)\nexpected:   '(2 4)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc73s68i0.rkt:16:4\nactual:     '(4 5 6 7 8 0 1)\nexpected:   '(4 6 8 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc73s68i0.rkt:17:4\nactual:     '(8 12 15 19)\nexpected:   '(8 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (if (null? list)\n      '()\n      (cons (car list)\n            (Split (cdr list)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123719,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc73s68i0.rkt:15:4\nactual:     '(1 2 3 4 5)\nexpected:   '(2 4)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc73s68i0.rkt:16:4\nactual:     '(4 5 6 7 8 0 1)\nexpected:   '(4 6 8 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc73s68i0.rkt:17:4\nactual:     '(8 12 15 19)\nexpected:   '(8 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (if (null? list)\n      '()\n      (if (even? (car list))\n          (cons (car list) (Split (cdr list)))\n          (Split (cdr list)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (if (null? list)\n      '()\n      (cons (car list) (Split (cdr list)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1ysn4jk3.rkt:14:4\nactual:     '(1 2 3 4 5)\nexpected:   '(2 4)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1ysn4jk3.rkt:15:4\nactual:     '(4 5 6 7 8 0 1)\nexpected:   '(4 6 8 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1ysn4jk3.rkt:16:4\nactual:     '(8 12 15 19)\nexpected:   '(8 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [else\n     (cons (first list) (Split (rest list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123719,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3dglsglg.rkt:15:4\nactual:     '(1 2 3 4 5)\nexpected:   '(2 4)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3dglsglg.rkt:16:4\nactual:     '(4 5 6 7 8 0 1)\nexpected:   '(4 6 8 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3dglsglg.rkt:17:4\nactual:     '(8 12 15 19)\nexpected:   '(8 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list))\n     (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list))\n     (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(null? list) '()]\n    [(even? (car list))\n     (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (if (null? list)\n      '()\n      (cons (car list) (Split (cdr list)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1ysn4jk3.rkt:14:4\nactual:     '(1 2 3 4 5)\nexpected:   '(2 4)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1ysn4jk3.rkt:15:4\nactual:     '(4 5 6 7 8 0 1)\nexpected:   '(4 6 8 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1ysn4jk3.rkt:16:4\nactual:     '(8 12 15 19)\nexpected:   '(8 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (if (null? list)\n      '()\n      (cons (car list) (Split (cdr list)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1ysn4jk3.rkt:14:4\nactual:     '(1 2 3 4 5)\nexpected:   '(2 4)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1ysn4jk3.rkt:15:4\nactual:     '(4 5 6 7 8 0 1)\nexpected:   '(4 6 8 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1ysn4jk3.rkt:16:4\nactual:     '(8 12 15 19)\nexpected:   '(8 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (if (null? list)\n      '()\n      (cons (car list)\n            (Split (cdr list)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123719,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc73s68i0.rkt:15:4\nactual:     '(1 2 3 4 5)\nexpected:   '(2 4)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc73s68i0.rkt:16:4\nactual:     '(4 5 6 7 8 0 1)\nexpected:   '(4 6 8 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc73s68i0.rkt:17:4\nactual:     '(8 12 15 19)\nexpected:   '(8 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (if (null? list)\n      '()\n      (cons (car list) (Split (cdr list)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1ysn4jk3.rkt:14:4\nactual:     '(1 2 3 4 5)\nexpected:   '(2 4)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1ysn4jk3.rkt:15:4\nactual:     '(4 5 6 7 8 0 1)\nexpected:   '(4 6 8 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1ysn4jk3.rkt:16:4\nactual:     '(8 12 15 19)\nexpected:   '(8 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond [(empty? list) empty]\n        [(even? (first list)) (cons (first list) (Split (rest list)))]\n        [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123719,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (if (null? list)\n      '()\n      (cons (car list) (Split (cdr list)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1ysn4jk3.rkt:14:4\nactual:     '(1 2 3 4 5)\nexpected:   '(2 4)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1ysn4jk3.rkt:15:4\nactual:     '(4 5 6 7 8 0 1)\nexpected:   '(4 6 8 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1ysn4jk3.rkt:16:4\nactual:     '(8 12 15 19)\nexpected:   '(8 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (if (null? list)\n      '()\n      (cons (car list) (Split (cdr list)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1ysn4jk3.rkt:14:4\nactual:     '(1 2 3 4 5)\nexpected:   '(2 4)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1ysn4jk3.rkt:15:4\nactual:     '(4 5 6 7 8 0 1)\nexpected:   '(4 6 8 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1ysn4jk3.rkt:16:4\nactual:     '(8 12 15 19)\nexpected:   '(8 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list))\n     (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (if (empty? list)\n      '()\n      (cons (car list) (Split (cdr list)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123719,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgttx0l1i.rkt:14:4\nactual:     '(1 2 3 4 5)\nexpected:   '(2 4)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgttx0l1i.rkt:15:4\nactual:     '(4 5 6 7 8 0 1)\nexpected:   '(4 6 8 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgttx0l1i.rkt:16:4\nactual:     '(8 12 15 19)\nexpected:   '(8 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond [(empty? list) empty]\n        [(even? (first list)) (cons (first list) (Split (rest list)))]\n        [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123719,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (if (null? list)\n      '()\n      (if (even? (car list))\n          (cons (car list) (Split (cdr list)))\n          (Split (cdr list)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (if (null? list)\n      '()\n      (if (even? (car list))\n          (cons (car list) (Split (cdr list)))\n          (Split (cdr list)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond ((null? list) '())\n        ((even? (car list)) (cons (car list) (Split (cdr list))))\n        (else (Split (cdr list)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123719,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (if (null? list)\n      '()\n      (cons (car list)\n            (Split (cdr list)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123719,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc73s68i0.rkt:15:4\nactual:     '(1 2 3 4 5)\nexpected:   '(2 4)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc73s68i0.rkt:16:4\nactual:     '(4 5 6 7 8 0 1)\nexpected:   '(4 6 8 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc73s68i0.rkt:17:4\nactual:     '(8 12 15 19)\nexpected:   '(8 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find even numbers from a list of numbers.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665517568,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}