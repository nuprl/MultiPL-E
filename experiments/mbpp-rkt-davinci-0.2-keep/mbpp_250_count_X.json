{
  "name": "mbpp_250_count_X",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n(define (count_X tup x)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_250_count_X.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_X))\n    (check-equal? (candidate (list 10 8 5 2 10 15 10 8 5 8 8 2) 4) 0)\n    (check-equal? (candidate (list 10 8 5 2 10 15 10 8 5 8 8 2) 10) 3)\n    (check-equal? (candidate (list 10 8 5 2 10 15 10 8 5 8 8 2) 8) 4)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (if (null? tup)\n      0\n      (if (equal? (car tup) x)\n          (+ 1 (count_X (cdr tup) x))\n          (count_X (cdr tup) x))))\n",
    "  (cond\n    [(empty? tup) 0]\n    [(= x (first tup)) (+ 1 (count_X (rest tup) x))]\n    [else (count_X (rest tup) x)]))\n",
    "  (cond\n    [(empty? tup) 0]\n    [(equal? x (first tup)) (+ 1 (count_X (rest tup) x))]\n    [else (count_X (rest tup) x)]))\n",
    "  (cond [(empty? tup) 0]\n        [else (if (equal? (first tup) x)\n                 (+ 1 (count_X (rest tup) x))\n                 (count_X (rest tup) x))]))\n",
    "  (cond\n    [(empty? tup) 0]\n    [(equal? (first tup) x) (+ 1 (count_X (rest tup) x))]\n    [else (count_X (rest tup) x)]))\n",
    "  (cond\n    [(empty? tup) 0]\n    [(equal? x (first tup)) (+ 1 (count_X (rest tup) x))]\n    [else (count_X (rest tup) x)]))\n",
    "  (cond\n    [(empty? tup) 0]\n    [(equal? (first tup) x) (+ 1 (count_X (rest tup) x))]\n    [else (count_X (rest tup) x)]))\n",
    "  (cond\n    [(empty? tup) 0]\n    [(equal? (first tup) x) (+ 1 (count_X (rest tup) x))]\n    [else (count_X (rest tup) x)]))\n",
    "  (cond\n    [(empty? tup) 0]\n    [(equal? (first tup) x) (+ 1 (count_X (rest tup) x))]\n    [else (count_X (rest tup) x)]))\n",
    "  (cond [(empty? tup) 0]\n        [(equal? (first tup) x) (+ 1 (count_X (rest tup) x))]\n        [else (count_X (rest tup) x)]))\n",
    "  (cond [(empty? tup) 0]\n        [else (+ (if (equal? (first tup) x) 1 0) (count_X (rest tup) x))]))\n",
    "  (cond\n    [(empty? tup) 0]\n    [(equal? x (first tup)) (+ 1 (count_X (rest tup) x))]\n    [else (count_X (rest tup) x)]))\n",
    "  (cond [(empty? tup) 0]\n        [(equal? (first tup) x) (+ 1 (count_X (rest tup) x))]\n        [else (count_X (rest tup) x)]))\n",
    "  (cond\n    [(empty? tup) 0]\n    [(equal? (first tup) x) (+ 1 (count_X (rest tup) x))]\n    [else (count_X (rest tup) x)]))\n",
    "  (cond [(empty? tup) 0]\n        [else (if (= (first tup) x)\n                 (+ 1 (count_X (rest tup) x))\n                 (count_X (rest tup) x))]))\n",
    "  (cond\n    [(empty? tup) 0]\n    [(equal? (first tup) x) (+ 1 (count_X (rest tup) x))]\n    [else (count_X (rest tup) x)]))\n",
    "  (cond [(empty? tup) 0]\n        [(equal? (first tup) x) (+ 1 (count_X (rest tup) x))]\n        [else (count_X (rest tup) x)]))\n",
    "  (cond [(empty? tup) 0]\n        [(equal? (first tup) x) (+ 1 (count_X (rest tup) x))]\n        [else (count_X (rest tup) x)]))\n",
    "  (cond\n    [(empty? tup) 0]\n    [(equal? (first tup) x) (+ 1 (count_X (rest tup) x))]\n    [else (count_X (rest tup) x)]))\n",
    "  (cond\n    [(empty? tup) 0]\n    [(equal? (first tup) x) (+ 1 (count_X (rest tup) x))]\n    [else (count_X (rest tup) x)]))\n"
  ]
}