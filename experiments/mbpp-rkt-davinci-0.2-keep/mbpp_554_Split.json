{
  "name": "mbpp_554_Split",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_554_Split.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(null? list) '()]\n    [(odd? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond [(empty? list) empty]\n        [(odd? (first list)) (cons (first list) (Split (rest list)))]\n        [else (Split (rest list))]))\n"
  ]
}