{
  "name": "mbpp_282_sub_list",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_282_sub_list.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (if (null? nums1)\n      '()\n      (cons (- (car nums1) (car nums2))\n            (sub_list (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (if (null? nums1)\n      '()\n      (cons (- (car nums1) (car nums2))\n            (sub_list (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (if (null? nums1)\n      '()\n      (cons (- (car nums1) (car nums2))\n            (sub_list (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (if (null? nums1)\n      '()\n      (cons (- (car nums1) (car nums2))\n            (sub_list (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (if (or (null? nums1) (null? nums2))\n      '()\n      (cons (- (car nums1) (car nums2))\n            (sub_list (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (cond [(empty? nums1) empty]\n        [(empty? nums2) empty]\n        [else (cons (- (first nums1) (first nums2))\n                    (sub_list (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (if (or (null? nums1) (null? nums2))\n      '()\n      (cons (- (car nums1) (car nums2))\n            (sub_list (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (cond\n    [(empty? nums1) empty]\n    [(empty? nums2) empty]\n    [else (cons (- (first nums1) (first nums2))\n                (sub_list (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (if (or (null? nums1) (null? nums2))\n      '()\n      (cons (- (car nums1) (car nums2))\n            (sub_list (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (cond\n    [(empty? nums1) empty]\n    [(empty? nums2) empty]\n    [else (cons (- (first nums1) (first nums2))\n                (sub_list (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (if (null? nums1)\n      '()\n      (cons (- (car nums1) (car nums2))\n            (sub_list (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (if (null? nums1)\n      '()\n      (cons (- (car nums1) (car nums2))\n            (sub_list (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (cond\n    [(empty? nums1) empty]\n    [(empty? nums2) empty]\n    [else (cons (- (first nums1) (first nums2))\n                 (sub_list (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (if (null? nums1)\n      '()\n      (cons (- (car nums1) (car nums2))\n            (sub_list (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (n1 n2) (- n1 n2)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1666123387,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (if (null? nums1)\n      '()\n      (cons (- (car nums1) (car nums2))\n            (sub_list (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (if (or (null? nums1) (null? nums2))\n      '()\n      (cons (- (car nums1) (car nums2))\n            (sub_list (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (if (null? nums1)\n      '()\n      (cons (- (car nums1) (car nums2))\n            (sub_list (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (\u03bb (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1666123387,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (if (or (null? nums1) (null? nums2))\n      '()\n      (cons (- (car nums1) (car nums2))\n            (sub_list (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (if (null? nums1)\n      '()\n      (cons (- (car nums1) (car nums2))\n            (sub_list (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (if (null? nums1)\n      '()\n      (cons (- (car nums1) (car nums2))\n            (sub_list (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (if (null? nums1)\n      '()\n      (cons (- (car nums1) (car nums2))\n            (sub_list (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (cond [(empty? nums1) empty]\n        [(empty? nums2) empty]\n        [else (cons (- (first nums1) (first nums2))\n                    (sub_list (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (if (null? nums1)\n      '()\n      (cons (- (car nums1) (car nums2))\n            (sub_list (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (if (null? nums1)\n      '()\n      (cons (- (car nums1) (car nums2))\n            (sub_list (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (cond\n    [(empty? nums1) empty]\n    [(empty? nums2) empty]\n    [else (cons (- (first nums1) (first nums2))\n                (sub_list (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (cond\n    [(empty? nums1) empty]\n    [(empty? nums2) empty]\n    [else (cons (- (first nums1) (first nums2))\n                (sub_list (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (if (or (null? nums1) (null? nums2))\n      '()\n      (cons (- (car nums1) (car nums2))\n            (sub_list (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (if (null? nums1)\n      '()\n      (cons (- (car nums1) (car nums2))\n            (sub_list (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (if (null? nums1)\n      '()\n      (cons (- (car nums1) (car nums2))\n            (sub_list (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (if (null? nums1)\n      '()\n      (cons (- (car nums1) (car nums2))\n            (sub_list (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (cond\n    [(empty? nums1) empty]\n    [(empty? nums2) empty]\n    [else (cons (- (first nums1) (first nums2))\n                (sub_list (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (cond\n    [(empty? nums1) empty]\n    [(empty? nums2) empty]\n    [else (cons (- (first nums1) (first nums2))\n                (sub_list (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (cond\n    [(empty? nums1) empty]\n    [(empty? nums2) empty]\n    [else (cons (- (first nums1) (first nums2))\n                (sub_list (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (if (null? nums1)\n      '()\n      (cons (- (car nums1) (car nums2))\n            (sub_list (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (if (null? nums1)\n      '()\n      (cons (- (car nums1) (car nums2))\n            (sub_list (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (if (or (null? nums1) (null? nums2))\n      '()\n      (cons (- (car nums1) (car nums2))\n            (sub_list (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (cond\n    [(empty? nums1) empty]\n    [(empty? nums2) empty]\n    [else (cons (- (first nums1) (first nums2))\n                (sub_list (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (if (null? nums1)\n      '()\n      (cons (- (car nums1) (car nums2))\n            (sub_list (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (cond\n    [(empty? nums1) empty]\n    [(empty? nums2) empty]\n    [else (cons (- (first nums1) (first nums2))\n                (sub_list (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (if (null? nums1)\n      '()\n      (cons (- (car nums1) (car nums2))\n            (sub_list (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (if (null? nums1)\n      '()\n      (cons (- (car nums1) (car nums2))\n            (sub_list (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (cond\n    [(empty? nums1) empty]\n    [(empty? nums2) empty]\n    [else (cons (- (first nums1) (first nums2))\n                (sub_list (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (if (null? nums1)\n      '()\n      (cons (- (car nums1) (car nums2))\n            (sub_list (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (cond\n    [(empty? nums1) empty]\n    [(empty? nums2) empty]\n    [else (cons (- (first nums1) (first nums2))\n                (sub_list (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (if (null? nums1)\n      '()\n      (cons (- (car nums1) (car nums2))\n            (sub_list (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (cond\n    [(empty? nums1) empty]\n    [(empty? nums2) empty]\n    [else (cons (- (first nums1) (first nums2))\n                (sub_list (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (if (null? nums1)\n      '()\n      (cons (- (car nums1) (car nums2))\n            (sub_list (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (if (null? nums1)\n      '()\n      (cons (- (car nums1) (car nums2))\n            (sub_list (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (if (null? nums1)\n      '()\n      (cons (- (car nums1) (car nums2))\n            (sub_list (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (if (or (null? nums1) (null? nums2))\n      '()\n      (cons (- (car nums1) (car nums2)) (sub_list (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1666123389,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (cond\n    [(empty? nums1) empty]\n    [(empty? nums2) empty]\n    [else (cons (- (first nums1) (first nums2))\n                (sub_list (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (if (null? nums1)\n      '()\n      (cons (- (car nums1) (car nums2))\n            (sub_list (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (if (null? nums1)\n      '()\n      (cons (- (car nums1) (car nums2))\n            (sub_list (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (if (null? nums1)\n      '()\n      (cons (- (car nums1) (car nums2))\n            (sub_list (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (if (null? nums1)\n      '()\n      (cons (- (car nums1) (car nums2))\n            (sub_list (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (if (null? nums1)\n      '()\n      (cons (- (car nums1) (car nums2))\n            (sub_list (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (cond\n    [(empty? nums1) empty]\n    [(empty? nums2) empty]\n    [else (cons (- (first nums1) (first nums2))\n                (sub_list (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (cond\n    [(empty? nums1) empty]\n    [(empty? nums2) empty]\n    [else (cons (- (first nums1) (first nums2))\n                (sub_list (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (if (or (null? nums1) (null? nums2))\n      '()\n      (cons (- (car nums1) (car nums2))\n            (sub_list (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (cond\n    [(empty? nums1) empty]\n    [(empty? nums2) empty]\n    [else (cons (- (first nums1) (first nums2))\n                (sub_list (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (if (null? nums1)\n      '()\n      (cons (- (car nums1) (car nums2))\n            (sub_list (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (cond\n    [(empty? nums1) empty]\n    [(empty? nums2) empty]\n    [else (cons (- (first nums1) (first nums2))\n                (sub_list (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (cond [(empty? nums1) empty]\n        [(empty? nums2) empty]\n        [else (cons (- (first nums1) (first nums2))\n                    (sub_list (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (if (null? nums1)\n      '()\n      (cons (- (car nums1) (car nums2))\n            (sub_list (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (if (null? nums1)\n      '()\n      (cons (- (car nums1) (car nums2))\n            (sub_list (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (if (or (null? nums1) (null? nums2))\n      '()\n      (cons (- (car nums1) (car nums2))\n            (sub_list (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (n1 n2) (- n1 n2)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1666123387,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (if (or (null? nums1) (null? nums2))\n      '()\n      (cons (- (car nums1) (car nums2))\n            (sub_list (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (if (null? nums1)\n      '()\n      (cons (- (car nums1) (car nums2))\n            (sub_list (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map (lambda (x y) (- x y)) nums1 nums2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-equal? (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3))\n    (check-equal? (candidate (list 1 2) (list 3 4)) (list -2 -2))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 40 50))\n))\n\n(test-humaneval)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}