{
  "name": "mbpp_430_parabola_directrix",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_430_parabola_directrix.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let ([x (/ (* -1 b) (* 2 a))])\n    (let ([y (+ (* a (sqr x)) (* b x) c)])\n      (let ([d (- y (/ b (* 2 a)))])\n        d))))\n",
    "  (define (directrix x)\n    (+ (* a x) b))\n  (directrix 0))\n",
    "  (define (parabola_directrix_helper x)\n    (sqrt (+ (* a x) b)))\n  (parabola_directrix_helper (- c)))\n",
    "  (define (directrix x)\n    (/ (- c (* a x)) b))\n  directrix)\n",
    "  (let ((x (- (/ b (* 2 a)))))\n    (if (negative? a)\n        (list x (parabola_y a b c x))\n        (list x (parabola_y a b c x)))))\n",
    "  (define (parabola-directrix-helper x)\n    (sqrt (- (* a x) b)))\n  (parabola-directrix-helper c))\n",
    "  (let ([x (/ (- b) (* 2 a))])\n    (let ([y (- (/ b (* 2 a)) (* x x))])\n      (list x y))))\n",
    "  (/ (+ (* -1 a) (* -1 c)) (* 2 b)))\n",
    "  (define (directrix x)\n    (- (/ b (* 2 a)) (* a x)))\n  directrix)\n",
    "  (define (x) (/ (* -1 b) (* 2 a)))\n  (define (y) (+ (/ (* b b) (* 4 a)) (/ c)))\n  (list x y))\n",
    "  (let ([x (- (/ b (* 2 a)) (/ (sqrt (- (* b b) (* 4 a c))) (* 2 a)))])\n    (if (and (number? x) (not (nan? x)))\n        x\n        (error \"No real solution\"))))\n",
    "  (let ((x-value (/ (* -1 b) (* 2 a))))\n    (let ((y-value (+ (* a (sqr x-value)) (* b x-value) c)))\n      (cons x-value y-value))))\n",
    "  (let ((x (- (/ b (* 2 a)))))\n    (- (/ c (+ (* a (sqr x)) (* b x) c)))))\n",
    "  (define (directrix x)\n    (- (/ b (* 2 a))\n       (/ (+ (* x x) (* b x) c) (* 2 a))))\n  directrix)\n",
    "  (define (directrix x)\n    (sqrt (+ (* a x) b)))\n  (directrix))\n",
    "  (let ((x (/ (- b) (* 2 a))))\n    (if (zero? a)\n        (error \"Not a parabola\")\n        (- (/ c (* 2 a)) (* x x)))))\n",
    "  (define (directrix x)\n    (+ (/ b (* 2 a))\n       (sqrt (- (sqr (- x (/ b (* 2 a))))\n                (/ c a)))))\n  directrix)\n",
    "  (- (/ b (* 2 a))))\n",
    "  (- (/ b (* 2 a))))\n",
    "  (let ([x (/ (- b) (* 2 a))])\n    (if (positive? a)\n        (- (/ c a) (* x x))\n        (+ (/ c a) (* x x)))))\n"
  ]
}