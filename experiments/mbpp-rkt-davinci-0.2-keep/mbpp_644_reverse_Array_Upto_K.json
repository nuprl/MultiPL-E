{
  "name": "mbpp_644_reverse_Array_Upto_K",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to reverse an array upto a given position.\n(define (reverse_Array_Upto_K input k)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_644_reverse_Array_Upto_K.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate reverse_Array_Upto_K))\n    (check-equal? (candidate (list 1 2 3 4 5 6) 4) (list 4 3 2 1 5 6))\n    (check-equal? (candidate (list 4 5 6 7) 2) (list 5 4 6 7))\n    (check-equal? (candidate (list 9 8 7 6 5) 3) (list 7 8 9 6 5))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let loop ([input input] [k k] [output '()])\n    (if (zero? k)\n        output\n        (loop (cdr input) (- k 1) (cons (car input) output)))))\n",
    "  (reverse (append (reverse (take input k)) (drop input k))))\n",
    "  (define (reverse_Array_Upto_K_Helper input k result)\n    (if (or (= k 0) (null? input))\n        result\n        (reverse_Array_Upto_K_Helper (cdr input) (- k 1) (cons (car input) result))))\n  (reverse_Array_Upto_K_Helper input k '()))\n",
    "  (if (null? input)\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1))\n              (if (= k 1)\n                  (list (car input))\n                  '()))))\n",
    "  (define (reverse_Array_Upto_K_iter input k i)\n    (if (= i k)\n        input\n        (reverse_Array_Upto_K_iter (list (list-ref input i) (list-ref input (- i 1))) k (+ i 2))))\n  (reverse_Array_Upto_K_iter input k 0))\n",
    "  (reverse (sublist input 0 k)))\n",
    "  (if (or (null? input) (null? k))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (reverse (sublist input 0 k)))\n",
    "  (reverse (sublist input 0 k)))\n",
    "  (define (reverse_Array_Upto_K_helper input k output)\n    (if (or (= k 0) (null? input))\n        output\n        (reverse_Array_Upto_K_helper (cdr input) (- k 1) (cons (car input) output))))\n  (reverse_Array_Upto_K_helper input k '()))\n",
    "  (reverse (append (reverse (take input k)) (drop input k))))\n",
    "  (if (eq? k 0)\n      input\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (empty? input)\n      '()\n      (append (reverse_Array_Upto_K (rest input) (- k 1))\n              (if (= k 1)\n                  (list (first input))\n                  '()))))\n",
    "  (reverse (take input k)))\n",
    "  (define (reverse_Array_Upto_K_iter input k i)\n    (if (= i k)\n        input\n        (reverse_Array_Upto_K_iter (append (list (list-ref input i)) (sublist input 0 i)) k (+ i 1))))\n  (reverse_Array_Upto_K_iter input k 0))\n",
    "  (define (reverse_Array_Upto_K_Helper input k i)\n    (if (= i k)\n        input\n        (reverse_Array_Upto_K_Helper (append (list (list-ref input i)) (list (list-ref input (- i 1)))) k (+ i 1))))\n  (reverse_Array_Upto_K_Helper input k 0))\n",
    "  (if (equal? k 0)\n      input\n      (reverse_Array_Upto_K (append (list (list-ref input k)) (sublist input 0 k)) (- k 1))))\n",
    "  (if (empty? input)\n      '()\n      (append (reverse_Array_Upto_K (rest input) (- k 1))\n              (if (= k 1)\n                  '()\n                  (list (first input))))))\n",
    "  (define (reverse_Array_Upto_K_Helper input k i)\n    (if (= i k)\n        input\n        (reverse_Array_Upto_K_Helper (append (list (list-ref input (- i 1))) (list-ref input i)) k (+ i 1))))\n  (reverse_Array_Upto_K_Helper input k 0))\n",
    "  (if (or (= k 0) (= k (length input)))\n      input\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (define (reverse_Array_Upto_K_helper input k i)\n    (if (= i k)\n        input\n        (reverse_Array_Upto_K_helper (append (list (list-ref input (- i 1))) (list (list-ref input i))) k (+ i 1))))\n  (reverse_Array_Upto_K_helper input k 0))\n",
    "  (let loop ((input input)\n             (k k)\n             (output '()))\n    (if (zero? k)\n        output\n        (loop (cdr input)\n              (- k 1)\n              (cons (car input) output)))))\n",
    "  (reverse (sublist input 0 k)))\n",
    "  (reverse (append (reverse (take input k)) (drop input k))))\n",
    "  (reverse (sublist input 0 k)))\n",
    "  (reverse (take input k)))\n",
    "  (define (reverse_Array_Upto_K_helper input k output)\n    (if (or (= k 0) (= k (length input)))\n        output\n        (reverse_Array_Upto_K_helper (cdr input) (- k 1) (cons (car input) output))))\n  (reverse_Array_Upto_K_helper input k '()))\n",
    "  (if (zero? k)\n      input\n      (reverse_Array_Upto_K (append (list (list-ref input k)) (sublist input 0 k)) (- k 1))))\n",
    "  (define (reverse_Array_Upto_K_helper input k i)\n    (if (&gt;= i k)\n        input\n        (reverse_Array_Upto_K_helper (cons (list-ref input i) (list-ref input (- i 1))) k (+ i 2))))\n  (reverse_Array_Upto_K_helper input k 0))\n",
    "  (define (reverse_Array_Upto_K_Helper input k i)\n    (if (= i k)\n        input\n        (reverse_Array_Upto_K_Helper (append (list (list-ref input (- i 1))) (list-ref input i)) k (- i 1))))\n  (reverse_Array_Upto_K_Helper input k (- (length input) 1)))\n",
    "  (if (empty? input)\n      empty\n      (append (reverse_Array_Upto_K (cdr input) (- k 1))\n              (if (= k 1)\n                  empty\n                  (list (car input))))))\n",
    "  (define (reverse_Array_Upto_K_helper input k i)\n    (if (= i k)\n        input\n        (reverse_Array_Upto_K_helper (append (list (list-ref input (- i 1))) (list (list-ref input i))) k (+ i 1))))\n  (reverse_Array_Upto_K_helper input k 0))\n",
    "  (if (or (null? input) (= k 0))\n      input\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (equal? k 0)\n      input\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (equal? k 0)\n      input\n      (reverse_Array_Upto_K (append (list (list-ref input k)) (sublist input 0 k)) (- k 1))))\n",
    "  (if (eq? k 0)\n      input\n      (reverse_Array_Upto_K (append (list (list-ref input k)) (sublist input 0 k)) (- k 1))))\n",
    "  (if (zero? k)\n      input\n      (append (reverse_Array_Upto_K (cdr input) (- k 1))\n              (list (car input)))))\n",
    "  (reverse (sublist input 0 k)))\n",
    "  (reverse (sublist input 0 k)))\n",
    "  (define (reverse_Array_Upto_K_helper input k output)\n    (if (or (= k 0) (null? input))\n        output\n        (reverse_Array_Upto_K_helper (cdr input) (- k 1) (cons (car input) output))))\n  (reverse_Array_Upto_K_helper input k '()))\n",
    "  (reverse (take input k)))\n",
    "  (reverse (take input k)))\n",
    "  (reverse (take input k)))\n",
    "  (define (reverse_Array_Upto_K_Iter input k i)\n    (if (= i k)\n        input\n        (reverse_Array_Upto_K_Iter (append (list (list-ref input i)) (list-ref input (- i 1))) k (+ i 1))))\n  (reverse_Array_Upto_K_Iter input k 0))\n",
    "  (let loop ([input input] [k k] [output '()])\n    (if (or (null? input) (zero? k))\n        output\n        (loop (cdr input) (- k 1) (cons (car input) output)))))\n",
    "  (if (empty? input)\n      empty\n      (append (reverse_Array_Upto_K (rest input) (- k 1))\n              (if (= k 1)\n                  empty\n                  (list (first input))))))\n",
    "  (if (equal? k 0)\n      input\n      (reverse_Array_Upto_K (append (list (list-ref input k)) (sublist input 0 k)) (- k 1))))\n",
    "  (let loop ([input input]\n             [k k]\n             [output '()])\n    (if (zero? k)\n        output\n        (loop (cdr input)\n              (- k 1)\n              (cons (car input) output)))))\n",
    "  (if (equal? k 0)\n      input\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (define (reverse_Array_Upto_K_iter input k i)\n    (if (= i k)\n        input\n        (reverse_Array_Upto_K_iter (cons (list-ref input i) (list-ref input (- i 1))) k (+ i 2))))\n  (reverse_Array_Upto_K_iter input k 0))\n",
    "  (if (zero? k)\n      input\n      (reverse_Array_Upto_K (append (list (list-ref input k)) (sublist input 0 k)) (- k 1))))\n",
    "  (reverse (sublist input 0 k)))\n",
    "  (let loop ([i 0] [j (sub1 k)])\n    (cond\n      [(= i j) (list-ref input i)]\n      [(= i (add1 j)) (list-ref input i)]\n      [else (append (list (list-ref input j) (list-ref input i)) (loop (add1 i) (sub1 j)))])))\n",
    "  (reverse (sublist input 0 k)))\n",
    "  (if (or (empty? input) (zero? k))\n      input\n      (append (reverse_Array_Upto_K (rest input) (- k 1)) (list (first input)))))\n",
    "  (if (zero? k)\n      input\n      (reverse_Array_Upto_K (append (list (list-ref input k)) (sublist input 0 k)) (- k 1))))\n",
    "  (if (eq? k 0)\n      input\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (empty? input)\n      empty\n      (append (reverse_Array_Upto_K (rest input) (- k 1))\n              (if (= k 1)\n                  empty\n                  (list (first input))))))\n",
    "  (define (reverse_Array_Upto_K_iter input k i)\n    (if (= i k)\n        input\n        (reverse_Array_Upto_K_iter (append (list (list-ref input (- k i))) (list-ref input (- i 1))) k (+ i 1))))\n  (reverse_Array_Upto_K_iter input k 0))\n",
    "  (reverse (append (reverse (take input k)) (drop input k))))\n",
    "  (reverse (take input k)))\n",
    "  (if (empty? input)\n      '()\n      (append (reverse_Array_Upto_K (rest input) (- k 1))\n              (if (= k 1)\n                  '()\n                  (list (first input))))))\n",
    "  (if (empty? input)\n      '()\n      (append (reverse_Array_Upto_K (rest input) (- k 1))\n              (if (= k 1)\n                  '()\n                  (list (first input))))))\n",
    "  (reverse (sublist input 0 k)))\n",
    "  (reverse (sublist input 0 k)))\n",
    "  (define (reverse_Array_Upto_K_helper input k result)\n    (if (or (= k 0) (null? input))\n        result\n        (reverse_Array_Upto_K_helper (cdr input) (- k 1) (cons (car input) result))))\n  (reverse_Array_Upto_K_helper input k '()))\n",
    "  (if (or (null? input) (null? k))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (define (reverse_Array_Upto_K_helper input k)\n    (if (zero? k)\n        input\n        (reverse_Array_Upto_K_helper (append (list (list-ref input k)) (take input k)) (- k 1))))\n  (reverse_Array_Upto_K_helper input (- (length input) 1)))\n",
    "  (reverse (take input k)))\n",
    "  (reverse (sublist input 0 k)))\n",
    "  (if (empty? input)\n      '()\n      (append (reverse_Array_Upto_K (rest input) (- k 1)) (list (first input)))))\n",
    "  (reverse (sublist input 0 k)))\n",
    "  (if (zero? k)\n      input\n      (reverse_Array_Upto_K (append (list (list-ref input k)) (sublist input 0 k)) (- k 1))))\n",
    "  (if (or (null? input) (null? k))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (zero? k)\n      input\n      (reverse_Array_Upto_K (append (list (list-ref input k)) (sublist input 0 k)) (- k 1))))\n",
    "  (reverse (sublist input 0 k)))\n",
    "  (define (reverse_Array_Upto_K_iter input k output)\n    (if (zero? k)\n        output\n        (reverse_Array_Upto_K_iter (cdr input) (- k 1) (cons (car input) output))))\n  (reverse_Array_Upto_K_iter input k '()))\n",
    "  (if (or (null? input) (null? k))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (define (reverse_Array_Upto_K_helper input k output)\n    (if (or (= k 0) (null? input))\n        output\n        (reverse_Array_Upto_K_helper (cdr input) (- k 1) (cons (car input) output))))\n  (reverse_Array_Upto_K_helper input k '()))\n",
    "  (define (reverse_Array_Upto_K_helper input k output)\n    (if (or (= k 0) (null? input))\n        output\n        (reverse_Array_Upto_K_helper (cdr input) (- k 1) (cons (car input) output))))\n  (reverse_Array_Upto_K_helper input k '()))\n",
    "  (reverse (sublist input 0 k)))\n",
    "  (if (empty? input)\n      empty\n      (append (reverse_Array_Upto_K (rest input) k)\n              (if (&lt; (length input) k)\n                  (list (first input))\n                  empty))))\n",
    "  (define (reverse_Array_Upto_K_iter input k output)\n    (if (or (= k 0) (null? input))\n        output\n        (reverse_Array_Upto_K_iter (cdr input) (- k 1) (cons (car input) output))))\n  (reverse_Array_Upto_K_iter input k '()))\n",
    "  (reverse (take input k)))\n",
    "  (reverse (take input k)))\n",
    "  (if (or (null? input) (null? k))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (define (reverse_Array_Upto_K_iter input k i)\n    (if (= i k)\n        input\n        (reverse_Array_Upto_K_iter (append (list (list-ref input i)) (list-ref input (- i 1))) k (+ i 1))))\n  (reverse_Array_Upto_K_iter input k 0))\n",
    "  (if (zero? k)\n      input\n      (reverse_Array_Upto_K (append (list (list-ref input k)) (sublist input 0 k)) (- k 1))))\n",
    "  (define (reverse_Array_Upto_K_iter input k i)\n    (if (&lt; i k)\n        (reverse_Array_Upto_K_iter (cons (list-ref input i) (reverse (rest input))) k (+ i 1))\n        input))\n  (reverse_Array_Upto_K_iter input k 0))\n",
    "  (if (or (= k 0) (= k (length input)))\n      input\n      (append (reverse_Array_Upto_K (cdr input) (- k 1))\n              (list (car input)))))\n",
    "  (reverse (sublist input 0 k)))\n",
    "  (reverse (append (reverse (take input k)) (drop input k))))\n",
    "  (reverse (append (reverse (take input k)) (drop input k))))\n",
    "  (let ([len (length input)])\n    (for/list ([i (in-range len)])\n      (if (< i k)\n          (list-ref input (- len i 1))\n          (list-ref input i)))))\n",
    "  (if (empty? input)\n      '()\n      (append (reverse_Array_Upto_K (rest input) (- k 1))\n              (if (= k 1)\n                  '()\n                  (list (first input))))))\n",
    "  (reverse (take input k)))\n",
    "  (reverse (take input k)))\n",
    "  (define (reverse_Array_Upto_K_helper input k i)\n    (if (= i k)\n        input\n        (reverse_Array_Upto_K_helper (append (list (list-ref input (- k i))) (list-ref input i)) k (+ i 1))))\n  (reverse_Array_Upto_K_helper input k 0))\n",
    "  (define (reverse_Array_Upto_K_iter input k i)\n    (cond\n      [(= i k) input]\n      [else (reverse_Array_Upto_K_iter (cons (list-ref input i) (remove (list-ref input i) input)) k (+ i 1))]))\n  (reverse_Array_Upto_K_iter input k 0))\n",
    "  (define (reverse_Array_Upto_K_helper input k)\n    (if (zero? k)\n        input\n        (reverse_Array_Upto_K_helper (append (cdr input) (list (car input))) (- k 1))))\n  (reverse_Array_Upto_K_helper input k))\n",
    "  (if (empty? input)\n      '()\n      (append (reverse_Array_Upto_K (rest input) (- k 1))\n              (if (= k 1)\n                  '()\n                  (list (first input))))))\n",
    "  (if (zero? k)\n      input\n      (reverse_Array_Upto_K (append (list (list-ref input (- k 1))) (sublist input 0 (- k 1))) (- k 1))))\n",
    "  (if (empty? input)\n      empty\n      (append (reverse_Array_Upto_K (rest input) (- k 1))\n              (if (= k 1)\n                  empty\n                  (list (first input))))))\n",
    "  (if (empty? input)\n      input\n      (append (reverse_Array_Upto_K (cdr input) (- k 1))\n              (list (car input)))))\n",
    "  (reverse (reverse (take input k))))\n",
    "  (define (reverse_Array_Upto_K_iter input k output)\n    (cond\n      [(empty? input) output]\n      [(= k 0) (append output input)]\n      [else (reverse_Array_Upto_K_iter (rest input) (- k 1) (cons (first input) output))]))\n  (reverse_Array_Upto_K_iter input k '()))\n",
    "  (if (eq? k 0)\n      input\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (empty? input)\n      '()\n      (append (reverse_Array_Upto_K (rest input) (- k 1))\n              (if (= k 1)\n                  '()\n                  (list (first input))))))\n",
    "  (define (reverse_Array_Upto_K_helper input k output)\n    (if (or (= k 0) (null? input))\n        output\n        (reverse_Array_Upto_K_helper (cdr input) (- k 1) (cons (car input) output))))\n  (reverse_Array_Upto_K_helper input k '()))\n",
    "  (reverse (take input k)))\n",
    "  (reverse (sublist input 0 k)))\n",
    "  (if (or (= k 0) (= k (length input)))\n      input\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (reverse (sublist input 0 k)))\n",
    "  (reverse (take input k)))\n",
    "  (reverse (sublist input 0 k)))\n",
    "  (if (or (null? input) (null? k))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (define (reverse_Array_Upto_K_iter input k i)\n    (if (= i k)\n        input\n        (reverse_Array_Upto_K_iter (append (list (list-ref input i)) (list (list-ref input (- k 1)))) k (+ i 1))))\n  (reverse_Array_Upto_K_iter input k 0))\n",
    "  (if (or (= k 0) (= k (length input)))\n      input\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (define (reverse_Array_Upto_K_Helper input k i)\n    (if (= i k)\n        input\n        (reverse_Array_Upto_K_Helper (append (list (list-ref input i))\n                                             (list (list-ref input (- i 1))))\n                                     k\n                                     (+ i 2))))\n  (reverse_Array_Upto_K_Helper input k 0))\n",
    "  (define (reverse_Array_Upto_K_iter input k i)\n    (if (= i k)\n        input\n        (reverse_Array_Upto_K_iter (list-set input i (list-ref input (- k i))) k (+ i 1))))\n  (reverse_Array_Upto_K_iter input k 0))\n",
    "  (define (reverse_Array_Upto_K_iter input k i)\n    (if (= i k)\n        input\n        (reverse_Array_Upto_K_iter (append (list (list-ref input i)) (list-ref input (- i 1))) k (+ i 1))))\n  (reverse_Array_Upto_K_iter input k 0))\n",
    "  (define (reverse_Array_Upto_K_iter input k result)\n    (if (or (= k 0) (null? input))\n        result\n        (reverse_Array_Upto_K_iter (cdr input) (- k 1) (cons (car input) result))))\n  (reverse_Array_Upto_K_iter input k '()))\n",
    "  (define (reverse_Array_Upto_K_iter input k result)\n    (cond\n      [(= k 0) result]\n      [else (reverse_Array_Upto_K_iter (cdr input) (- k 1) (cons (car input) result))]))\n  (reverse_Array_Upto_K_iter input k '()))\n",
    "  (reverse (sublist input 0 k)))\n",
    "  (if (or (= k 0) (= k (length input)))\n      input\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (reverse (sublist input 0 k)))\n",
    "  (if (empty? input)\n      '()\n      (append (reverse_Array_Upto_K (rest input) (- k 1))\n              (list (first input)))))\n",
    "  (if (zero? k)\n      input\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (empty? input)\n      '()\n      (append (reverse_Array_Upto_K (rest input) (- k 1))\n              (if (= k 1)\n                  '()\n                  (list (first input))))))\n",
    "  (reverse (sublist input 0 k)))\n",
    "  (reverse (take input k)))\n",
    "  (define (reverse_Array_Upto_K_helper input k i)\n    (if (= i k)\n        input\n        (reverse_Array_Upto_K_helper (append (list (list-ref input (- i 1))) (list (list-ref input i))) k (+ i 1))))\n  (reverse_Array_Upto_K_helper input k 0))\n",
    "  (reverse (sublist input 0 k)))\n",
    "  (if (zero? k)\n      input\n      (reverse_Array_Upto_K (append (list (list-ref input k)) (sublist input 0 k)) (- k 1))))\n",
    "  (reverse (sublist input 0 k)))\n",
    "  (reverse (sublist input 0 k)))\n",
    "  (reverse (take input k)))\n",
    "  (reverse (sublist input 0 k)))\n",
    "  (reverse (sublist input 0 k)))\n",
    "  (define (reverse_Array_Upto_K_iter input k i)\n    (if (= i k)\n        input\n        (reverse_Array_Upto_K_iter (append (list (list-ref input i)) (list-ref input (- i 1))) k (+ i 1))))\n  (reverse_Array_Upto_K_iter input k 0))\n",
    "  (reverse (sublist input 0 k)))\n",
    "  (define (reverse_Array_Upto_K_iter input k output)\n    (if (or (= k 0) (null? input))\n        output\n        (reverse_Array_Upto_K_iter (cdr input) (- k 1) (cons (car input) output))))\n  (reverse_Array_Upto_K_iter input k '()))\n",
    "  (reverse (append (reverse (take input k)) (drop input k))))\n",
    "  (reverse (sublist input 0 k)))\n",
    "  (define (reverse_Array_Upto_K_iter input k output)\n    (cond\n      [(= k 0) output]\n      [else (reverse_Array_Upto_K_iter (cdr input) (- k 1) (append output (list (car input))))]))\n  (reverse_Array_Upto_K_iter input k '()))\n",
    "  (define (reverse_Array_Upto_K_iter input k result)\n    (if (or (null? input) (= k 0))\n        result\n        (reverse_Array_Upto_K_iter (cdr input) (- k 1) (cons (car input) result))))\n  (reverse_Array_Upto_K_iter input k '()))\n",
    "  (define (reverse_Array_Upto_K_iter input k i)\n    (cond\n      [(= i k) input]\n      [else (reverse_Array_Upto_K_iter (cons (list-ref input i) (list-ref input (- i 1))) k (+ i 1))]))\n  (reverse_Array_Upto_K_iter input k 0))\n",
    "  (if (equal? k 0)\n      input\n      (reverse_Array_Upto_K (append (list (list-ref input k)) (sublist input 0 k)) (- k 1))))\n",
    "  (if (empty? input)\n      empty\n      (append (reverse_Array_Upto_K (rest input) (- k 1))\n              (list (first input)))))\n",
    "  (if (zero? k)\n      input\n      (reverse_Array_Upto_K (append (list (list-ref input (- k 1))) (sublist input 0 (- k 1))) (- k 1))))\n",
    "  (reverse (sublist input 0 k)))\n",
    "  (reverse (take input k)))\n",
    "  (if (or (= k 0) (= k (length input)))\n      input\n      (append (reverse_Array_Upto_K (cdr input) (- k 1))\n              (list (car input)))))\n",
    "  (reverse (sublist input 0 k)))\n",
    "  (reverse (sublist input 0 k)))\n",
    "  (define (reverse_Array_Upto_K_iter input k output)\n    (if (or (null? input) (= k 0))\n        output\n        (reverse_Array_Upto_K_iter (cdr input) (- k 1) (cons (car input) output))))\n  (reverse_Array_Upto_K_iter input k '()))\n",
    "  (define (reverse_Array_Upto_K_Iter input k i)\n    (if (= i k)\n        input\n        (reverse_Array_Upto_K_Iter (append (list (list-ref input i)) (sublist input 0 i)) k (+ i 1))))\n  (reverse_Array_Upto_K_Iter input k 0))\n",
    "  (if (null? input)\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1))\n              (if (= k 1)\n                  '()\n                  (list (car input))))))\n",
    "  (if (zero? k)\n      input\n      (reverse_Array_Upto_K (append (list (list-ref input k)) (sublist input 0 k)) (- k 1))))\n",
    "  (if (empty? input)\n      '()\n      (append (reverse_Array_Upto_K (rest input) (- k 1))\n              (if (= k 1)\n                  '()\n                  (list (first input))))))\n",
    "  (reverse (take input k)))\n",
    "  (reverse (take input k)))\n",
    "  (if (equal? k 0)\n      input\n      (reverse_Array_Upto_K (append (list (list-ref input k)) (sublist input 0 k)) (- k 1))))\n",
    "  (define (reverse_Array_Upto_K_iter input k i)\n    (cond\n      [(= i k) input]\n      [else\n       (reverse_Array_Upto_K_iter\n        (append (list (list-ref input (- i 1))) (list (list-ref input i)))\n        k\n        (+ i 1))]))\n  (reverse_Array_Upto_K_iter input k 0))\n",
    "  (define (reverse_Array_Upto_K_helper input k i)\n    (if (< i k)\n        (reverse_Array_Upto_K_helper (cons (list-ref input (- k i 1)) (remove (list-ref input (- k i 1)) input)) k (+ i 1))\n        input))\n  (reverse_Array_Upto_K_helper input k 0))\n",
    "  (if (zero? k)\n      input\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (reverse (take input k)))\n",
    "  (if (equal? k 0)\n      input\n      (reverse_Array_Upto_K (append (list (list-ref input k)) (sublist input 0 k)) (- k 1))))\n",
    "  (reverse (take input k)))\n",
    "  (define (reverse_Array_Upto_K_helper input k i)\n    (if (= i k)\n        input\n        (reverse_Array_Upto_K_helper (append (list (list-ref input (- k i))) (list-ref input (- i 1))) k (+ i 1))))\n  (reverse_Array_Upto_K_helper input k 0))\n",
    "  (reverse (take input k)))\n",
    "  (define (reverse_Array_Upto_K_Helper input k i)\n    (if (= i k)\n        input\n        (reverse_Array_Upto_K_Helper (append (list (list-ref input i))\n                                             (list-ref input (- i 1)))\n                                     k\n                                     (+ i 1))))\n  (reverse_Array_Upto_K_Helper input k 0))\n",
    "  (if (zero? k)\n      input\n      (reverse_Array_Upto_K (append (list (list-ref input k)) (sublist input 0 k)) (- k 1))))\n",
    "  (if (zero? k)\n      input\n      (reverse_Array_Upto_K (append (list (list-ref input k)) (sublist input 0 k)) (- k 1))))\n",
    "  (reverse (sublist input 0 k)))\n",
    "  (reverse (sublist input 0 k)))\n",
    "  (define (reverse_Array_Upto_K_iter input k i)\n    (cond\n      [(= i k) input]\n      [else (reverse_Array_Upto_K_iter (cons (list-ref input i) (list-ref input (- i 1))) k (+ i 1))]))\n  (reverse_Array_Upto_K_iter input k 0))\n",
    "  (reverse (reverse (take input k))))\n",
    "  (let loop ((input input)\n             (k k)\n             (output '()))\n    (if (zero? k)\n        output\n        (loop (cdr input)\n              (- k 1)\n              (cons (car input) output)))))\n",
    "  (reverse (sublist input 0 k)))\n",
    "  (reverse (reverse (take input k))))\n",
    "  (reverse (sublist input 0 k)))\n",
    "  (reverse (sublist input 0 k)))\n",
    "  (if (null? input)\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1))\n              (if (zero? k)\n                  '()\n                  (list (car input))))))\n",
    "  (reverse (take input k)))\n",
    "  (if (or (null? input)\n          (null? k))\n      '()\n      (if (= k 0)\n          input\n          (append (reverse_Array_Upto_K (cdr input) (- k 1))\n                  (list (car input))))))\n",
    "  (reverse (reverse (take input k))))\n",
    "  (if (empty? input)\n      '()\n      (append (reverse_Array_Upto_K (rest input) (- k 1))\n              (if (= k 1)\n                  '()\n                  (list (first input))))))\n",
    "  (define (reverse_Array_Upto_K_iter input k i)\n    (if (= i k)\n        input\n        (reverse_Array_Upto_K_iter (append (list (list-ref input i)) (list-ref input (- i 1))) k (+ i 1))))\n  (reverse_Array_Upto_K_iter input k 0))\n",
    "  (define (reverse_Array_Upto_K_helper input k i)\n    (if (= i k)\n        input\n        (reverse_Array_Upto_K_helper (append (list (list-ref input (- i 1))) (list (list-ref input i))) k (+ i 1))))\n  (reverse_Array_Upto_K_helper input k 0))\n",
    "  (if (or (= k 0) (= k (length input)))\n      input\n      (append (reverse_Array_Upto_K (rest input) (- k 1)) (list (first input)))))\n",
    "  (if (empty? input)\n      '()\n      (append (reverse_Array_Upto_K (rest input) (- k 1))\n              (if (= k 1)\n                  '()\n                  (list (first input))))))\n",
    "  (if (zero? k)\n      input\n      (reverse_Array_Upto_K (append (list (list-ref input k))\n                                    (sublist input 0 k))\n                            (- k 1))))\n",
    "  (define (reverse_Array_Upto_K_iter input k output)\n    (if (= k 0)\n        output\n        (reverse_Array_Upto_K_iter (cdr input) (- k 1) (cons (car input) output))))\n  (reverse_Array_Upto_K_iter input k '()))\n",
    "  (reverse (sublist input 0 k)))\n",
    "  (reverse (sublist input 0 k)))\n",
    "  (reverse (sublist input 0 k)))\n",
    "  (reverse (sublist input 0 k)))\n",
    "  (reverse (take input k)))\n",
    "  (if (or (= k 0) (= k (length input)))\n      input\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n"
  ]
}