{
  "name": "mbpp_411_snake_to_camel",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_411_snake_to_camel.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (if (empty? word)\n        result\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (string-append result (string-upcase (string (second word)))))\n            (helper (rest word) (string-append result (string (first word)))))))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2i_65xvz.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2i_65xvz.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2i_65xvz.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptbm80_7n.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptbm80_7n.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptbm80_7n.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (cond [(empty? word) result]\n          [(char=? (first word) #\\_)\n           (helper (rest word) (string-append result (string-upcase (first (rest word))))) ]\n          [else (helper (rest word) (string-append result (first word)))]))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb4hukdgt.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb4hukdgt.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb4hukdgt.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (string-upcase x))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqcb1_8f1.rkt:15:4\nactual:     \"ANDROIDTV\"\nexpected:   \"AndroidTv\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqcb1_8f1.rkt:16:4\nactual:     \"GOOGLEPIXEL\"\nexpected:   \"GooglePixel\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqcb1_8f1.rkt:17:4\nactual:     \"APPLEWATCH\"\nexpected:   \"AppleWatch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (equal? (string-length x) 1)\n              (string-upcase x)\n              (string-append\n               (string-upcase (substring x 0 1))\n               (substring x 1))))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (w)\n      (string-upcase (substring w 1)))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo6_a0ova.rkt:17:4\nactual:     \"NDROIDV\"\nexpected:   \"AndroidTv\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo6_a0ova.rkt:18:4\nactual:     \"OOGLEIXEL\"\nexpected:   \"GooglePixel\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo6_a0ova.rkt:19:4\nactual:     \"PPLEATCH\"\nexpected:   \"AppleWatch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (string-upcase x))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqcb1_8f1.rkt:15:4\nactual:     \"ANDROIDTV\"\nexpected:   \"AndroidTv\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqcb1_8f1.rkt:16:4\nactual:     \"GOOGLEPIXEL\"\nexpected:   \"GooglePixel\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqcb1_8f1.rkt:17:4\nactual:     \"APPLEWATCH\"\nexpected:   \"AppleWatch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (w) (string-upcase w))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl406dlqa.rkt:15:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl406dlqa.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl406dlqa.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word acc)\n    (if (empty? word)\n        (string-join (reverse acc))\n        (if (char=? (string-ref word 0) #\\_)\n            (helper (substring word 1) (cons (string-upcase (string-ref word 1)) acc))\n            (helper (substring word 1) (cons (string-ref word 0) acc)))))\n  (helper word '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm11mih_b.rkt:18:4\n\nstring-upcase: contract violation\n  expected: string?\n  given: #\\t\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm11mih_b.rkt:19:4\n\nstring-upcase: contract violation\n  expected: string?\n  given: #\\p\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm11mih_b.rkt:20:4\n\nstring-upcase: contract violation\n  expected: string?\n  given: #\\w\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (if (equal? (string-ref x 0) #\\_)\n                                (string-upcase (string-ref x 1))\n                                x))\n                     (string-split word #\\_))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3yw31af4.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3yw31af4.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3yw31af4.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (cond\n    [(empty? word) empty]\n    [(char=? (first word) #\\_)\n     (cons (char-upcase (second word)) (snake_to_camel (rest (rest word))))]\n    [else (cons (first word) (snake_to_camel (rest word)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvwz7gqms.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvwz7gqms.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvwz7gqms.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpba8g9fe1.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpba8g9fe1.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpba8g9fe1.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (cond\n      [(empty? word) result]\n      [(char=? #\\_ (first word)) (helper (rest word) (string-append result (string-upcase (first (rest word))))) ]\n      [else (helper (rest word) (string-append result (first word)))]))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpd5mql2hu.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpd5mql2hu.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpd5mql2hu.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word acc)\n    (if (empty? word)\n        acc\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (string-append acc (string-upcase (string (second word)))))\n            (helper (rest word) (string-append acc (string (first word)))))))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp591fpn70.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp591fpn70.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp591fpn70.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (let loop ([word word]\n             [result '()])\n    (cond [(empty? word) (string-join (reverse result) \"\")]\n          [(char=? (first word) #\\_) (loop (rest word) (cons (char-upcase (second word)) result))]\n          [else (loop (rest word) (cons (first word) result))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3zw2iidu.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3zw2iidu.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3zw2iidu.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-length x) 1)\n          (string-upcase x)\n          (string-append (string-upcase (substring x 0 1))\n                        (substring x 1))))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7_z2pg2.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7_z2pg2.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7_z2pg2.rkt:22:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (if (empty? word)\n        result\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (string-append result (string-upcase (string (second word)))))\n            (helper (rest word) (string-append result (string (first word)))))))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2i_65xvz.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2i_65xvz.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2i_65xvz.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (word)\n          (string-upcase (substring word 0 1))\n          (substring word 1))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvon79yxi.rkt:17:4\nactual:     \"ndroidv\"\nexpected:   \"AndroidTv\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvon79yxi.rkt:18:4\nactual:     \"oogleixel\"\nexpected:   \"GooglePixel\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvon79yxi.rkt:19:4\nactual:     \"ppleatch\"\nexpected:   \"AppleWatch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (w) (string-upcase w)) (string-split word #\"_\")) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9nbiabkd.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\"_\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9nbiabkd.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\"_\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9nbiabkd.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\"_\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x) (string-upcase x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2l3xahuh.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2l3xahuh.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2l3xahuh.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (let loop ([word word]\n             [result '()])\n    (cond [(empty? word) (string-join (reverse result))]\n          [(char=? (first word) #\\_) (loop (rest word) (cons (string-upcase (second word)) result))]\n          [else (loop (rest word) (cons (first word) result))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122799,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphjwk9cgf.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphjwk9cgf.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphjwk9cgf.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (string-upcase x)) (string-split word #\\_)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgyddh18c.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgyddh18c.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgyddh18c.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (cond\n      [(empty? word) result]\n      [(char=? (first word) #\\_) (helper (rest word) (string-append result (string-upcase (string (second word)))))]\n      [else (helper (rest word) (string-append result (string (first word))))]))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo1slzekl.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo1slzekl.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo1slzekl.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (string=? (substring x 0 1) \"_\")\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg77rhyu1.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg77rhyu1.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg77rhyu1.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (string-upcase x))\n                    (string-split word #\\_))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122799,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3l6urzct.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3l6urzct.rkt:15:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3l6urzct.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (if (equal? (string-ref x 0) #\\_)\n                                    (string-upcase (substring x 1))\n                                    x))\n                     (string-split word #\\_))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkdb6aj3n.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkdb6aj3n.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkdb6aj3n.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (w) (string-upcase (substring w 1)))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppf9ecora.rkt:15:4\nactual:     \"NDROIDV\"\nexpected:   \"AndroidTv\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppf9ecora.rkt:16:4\nactual:     \"OOGLEIXEL\"\nexpected:   \"GooglePixel\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppf9ecora.rkt:17:4\nactual:     \"PPLEATCH\"\nexpected:   \"AppleWatch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (w) (string-upcase (substring w 1))) (string-split word #\\_)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122799,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph0ux72jr.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph0ux72jr.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph0ux72jr.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (equal? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw1zwn9l6.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw1zwn9l6.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw1zwn9l6.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (cond\n      [(empty? word) result]\n      [(char=? (first word) #\\_) (helper (rest word) (string-append result (string-upcase (first (rest word)))))]\n      [else (helper (rest word) (string-append result (string (first word))))]))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvw4u5n8p.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvw4u5n8p.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvw4u5n8p.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-length x) 1)\n          (string-upcase x)\n          (string-append (string-upcase (substring x 0 1)) (substring x 1))))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgissmdki.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgissmdki.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgissmdki.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (string-upcase x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplto0dcgz.rkt:15:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplto0dcgz.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplto0dcgz.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (w) (string-upcase (substring w 1)))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppf9ecora.rkt:15:4\nactual:     \"NDROIDV\"\nexpected:   \"AndroidTv\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppf9ecora.rkt:16:4\nactual:     \"OOGLEIXEL\"\nexpected:   \"GooglePixel\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppf9ecora.rkt:17:4\nactual:     \"PPLEATCH\"\nexpected:   \"AppleWatch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (equal? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw1zwn9l6.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw1zwn9l6.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw1zwn9l6.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (string-upcase x))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqcb1_8f1.rkt:15:4\nactual:     \"ANDROIDTV\"\nexpected:   \"AndroidTv\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqcb1_8f1.rkt:16:4\nactual:     \"GOOGLEPIXEL\"\nexpected:   \"GooglePixel\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqcb1_8f1.rkt:17:4\nactual:     \"APPLEWATCH\"\nexpected:   \"AppleWatch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word acc)\n    (if (empty? word)\n        acc\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (string-append acc (string-upcase (first (rest word)))))\n            (helper (rest word) (string-append acc (string (first word)))))))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122799,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3stgj23t.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3stgj23t.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3stgj23t.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (w) (string-upcase (substring w 1)))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppf9ecora.rkt:15:4\nactual:     \"NDROIDV\"\nexpected:   \"AndroidTv\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppf9ecora.rkt:16:4\nactual:     \"OOGLEIXEL\"\nexpected:   \"GooglePixel\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppf9ecora.rkt:17:4\nactual:     \"PPLEATCH\"\nexpected:   \"AppleWatch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbaqi7hg_.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbaqi7hg_.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbaqi7hg_.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (if (empty? word)\n        result\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (string-append result (string-upcase (string (second word)))))\n            (helper (rest word) (string-append result (string (first word)))))))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2i_65xvz.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2i_65xvz.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2i_65xvz.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (word)\n      (string-upcase (substring word 0 1))\n      (substring word 1))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122794,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc8k47ziq.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc8k47ziq.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc8k47ziq.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptbm80_7n.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptbm80_7n.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptbm80_7n.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                       (string-upcase (substring x 1))\n                       x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpow8f7k3u.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpow8f7k3u.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpow8f7k3u.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (if (string=? (substring x 0 1) \"_\") (string-upcase (substring x 1)) x)) (string-split word #\\_)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122799,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg0gkszzz.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg0gkszzz.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg0gkszzz.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (capitalize-first-letter word)\n    (string-append (string-upcase (substring word 0 1)) (substring word 1)))\n  (define (snake_to_camel-helper word)\n    (if (string-contains word #\\_)\n        (snake_to_camel-helper (string-append (capitalize-first-letter (substring word 0 (string-index word #\\_))) (substring word (+ 1 (string-index word #\\_)))))\n        word))\n  (snake_to_camel-helper word))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122799,
      "stdout": "",
      "stderr": "/tmp/tmprtmestnx.rkt:8:9: string-contains: unbound identifier\n  in: string-contains\n  location...:\n   /tmp/tmprtmestnx.rkt:8:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (string-drop x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122799,
      "stdout": "",
      "stderr": "/tmp/tmpxiax8mb4.rkt:9:26: string-drop: unbound identifier\n  in: string-drop\n  location...:\n   /tmp/tmpxiax8mb4.rkt:9:26\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word acc)\n    (if (empty? word)\n        (string-join (reverse acc))\n        (if (char=? (string-ref word 0) #\\_)\n            (helper (substring word 1) (cons (string-upcase (string-ref word 1)) acc))\n            (helper (substring word 1) (cons (string-ref word 0) acc)))))\n  (helper word '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm11mih_b.rkt:18:4\n\nstring-upcase: contract violation\n  expected: string?\n  given: #\\t\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm11mih_b.rkt:19:4\n\nstring-upcase: contract violation\n  expected: string?\n  given: #\\p\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm11mih_b.rkt:20:4\n\nstring-upcase: contract violation\n  expected: string?\n  given: #\\w\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (string-upcase x))\n                    (string-split word #\\_))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122799,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3l6urzct.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3l6urzct.rkt:15:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3l6urzct.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (w)\n      (string-upcase (substring w 0 1))\n      (substring w 1))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp269teb61.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp269teb61.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp269teb61.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptbm80_7n.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptbm80_7n.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptbm80_7n.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (string-upcase x)) (string-split word #\\_)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgyddh18c.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgyddh18c.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgyddh18c.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (if (equal? (string-length x) 1) x (string-append (string-upcase (substring x 0 1)) (substring x 1)))) (string-split word #\\_)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122799,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8352r0dc.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8352r0dc.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8352r0dc.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (cond\n      [(empty? word) result]\n      [(char=? (first word) #\\_) (helper (rest word) (string-append result (string-upcase (string (second word))))) ]\n      [else (helper (rest word) (string-append result (string (first word))))]))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122794,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_0dz1dv4.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_0dz1dv4.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_0dz1dv4.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (if (empty? word)\n        result\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (string-append result (string-upcase (string (second word)))))\n            (helper (rest word) (string-append result (string (first word)))))))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2i_65xvz.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2i_65xvz.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2i_65xvz.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (w) (string-upcase w))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl406dlqa.rkt:15:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl406dlqa.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl406dlqa.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (cond\n      [(empty? word) result]\n      [(char=? (first word) #\\_) (helper (rest word) (string-append result (string-upcase (string (second word)))))]\n      [else (helper (rest word) (string-append result (string (first word))))]))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo1slzekl.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo1slzekl.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo1slzekl.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptbm80_7n.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptbm80_7n.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptbm80_7n.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (word)\n      (string-upcase (substring word 1)))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1vl8q6ye.rkt:17:4\nactual:     \"NDROIDV\"\nexpected:   \"AndroidTv\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1vl8q6ye.rkt:18:4\nactual:     \"OOGLEIXEL\"\nexpected:   \"GooglePixel\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1vl8q6ye.rkt:19:4\nactual:     \"PPLEATCH\"\nexpected:   \"AppleWatch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptbm80_7n.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptbm80_7n.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptbm80_7n.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (if (string=? (substring x 0 1) \"_\")\n                        (string-upcase (substring x 1))\n                        x))\n        (string-split word #\\_)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122799,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnytccz9h.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnytccz9h.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnytccz9h.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (w)\n          (string-upcase (substring w 1)))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122799,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv5noq9vv.rkt:16:4\nactual:     \"NDROIDV\"\nexpected:   \"AndroidTv\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv5noq9vv.rkt:17:4\nactual:     \"OOGLEIXEL\"\nexpected:   \"GooglePixel\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv5noq9vv.rkt:18:4\nactual:     \"PPLEATCH\"\nexpected:   \"AppleWatch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                       (string-upcase (substring x 1))\n                       x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpow8f7k3u.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpow8f7k3u.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpow8f7k3u.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word acc)\n    (if (empty? word)\n        acc\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (string-append acc (string-upcase (string (second word)))))\n            (helper (rest word) (string-append acc (string (first word)))))))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp591fpn70.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp591fpn70.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp591fpn70.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (snake_to_camel_iter word acc)\n    (cond\n      [(empty? word) (list->string (reverse acc))]\n      [(char=? (first word) #\\_) (snake_to_camel_iter (rest word) (cons (char-upcase (second word)) (rest (rest word))))]\n      [else (snake_to_camel_iter (rest word) (cons (first word) acc))]))\n  (snake_to_camel_iter word '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiupikqex.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiupikqex.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiupikqex.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (if (empty? word)\n        result\n        (if (equal? (first word) #\\_)\n            (helper (rest word) (string-append result (string-upcase (second word))))\n            (helper (rest word) (string-append result (string (first word)))))))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122799,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz3jvnedz.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz3jvnedz.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz3jvnedz.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word acc)\n    (if (empty? word)\n        (string-join (reverse acc))\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (cons (string-upcase (list (second word))) (rest acc)))\n            (helper (rest word) (cons (list (first word)) acc)))))\n  (helper word '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122799,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf3m3k2jm.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf3m3k2jm.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf3m3k2jm.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (string-upcase x))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqcb1_8f1.rkt:15:4\nactual:     \"ANDROIDTV\"\nexpected:   \"AndroidTv\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqcb1_8f1.rkt:16:4\nactual:     \"GOOGLEPIXEL\"\nexpected:   \"GooglePixel\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqcb1_8f1.rkt:17:4\nactual:     \"APPLEWATCH\"\nexpected:   \"AppleWatch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (cond\n      [(empty? word) result]\n      [(char=? (first word) #\\_) (helper (rest word) (string-append result (string-upcase (string (second word)))))]\n      [else (helper (rest word) (string-append result (string (first word))))]))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo1slzekl.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo1slzekl.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo1slzekl.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptbm80_7n.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptbm80_7n.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptbm80_7n.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (if (empty? word)\n        result\n        (if (equal? (first word) #\\_)\n            (helper (rest word) (string-append result (string-upcase (string (second word)))))\n            (helper (rest word) (string-append result (string (first word)))))))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp8gm0g2i.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp8gm0g2i.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp8gm0g2i.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (w)\n      (string-upcase (substring w 1)))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo6_a0ova.rkt:17:4\nactual:     \"NDROIDV\"\nexpected:   \"AndroidTv\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo6_a0ova.rkt:18:4\nactual:     \"OOGLEIXEL\"\nexpected:   \"GooglePixel\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo6_a0ova.rkt:19:4\nactual:     \"PPLEATCH\"\nexpected:   \"AppleWatch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-length x) 1)\n          (string-upcase x)\n          (string-append (string-upcase (substring x 0 1))\n                        (substring x 1))))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (snake_to_camel_iter word acc)\n    (if (empty? word)\n        acc\n        (if (char=? (first word) #\\_)\n            (snake_to_camel_iter (rest word) (string-append acc (string-upcase (string (second word)))))\n            (snake_to_camel_iter (rest word) (string-append acc (string (first word)))))))\n  (snake_to_camel_iter word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122799,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9ruhe8rx.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9ruhe8rx.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9ruhe8rx.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (snake_to_camel_iter word acc)\n    (cond\n      [(empty? word) (list->string (reverse acc))]\n      [(char=? (first word) #\\_) (snake_to_camel_iter (rest word) (cons (char-upcase (second word)) (rest (rest word))))]\n      [else (snake_to_camel_iter (rest word) (cons (first word) acc))]))\n  (snake_to_camel_iter word '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiupikqex.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiupikqex.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiupikqex.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-length x) 1)\n          (string-upcase x)\n          (string-append (string-upcase (substring x 0 1)) (substring x 1))))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (if (empty? word)\n        result\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (string-append result (string-upcase (string (second word)))))\n            (helper (rest word) (string-append result (string (first word)))))))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2i_65xvz.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2i_65xvz.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2i_65xvz.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (string=? (substring x 0 1) \"_\")\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122794,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5q472x_v.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5q472x_v.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5q472x_v.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                       (string-upcase (substring x 1))\n                       x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpow8f7k3u.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpow8f7k3u.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpow8f7k3u.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (string=? (substring x 0 1) \"_\")\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg77rhyu1.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg77rhyu1.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg77rhyu1.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (if (equal? (string-ref x 0) #\\_)\n                       (string-upcase (substring x 1))\n                       x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122797,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu6700ei8.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu6700ei8.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu6700ei8.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                       (string-upcase (substring x 1))\n                       x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpow8f7k3u.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpow8f7k3u.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpow8f7k3u.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word acc)\n    (if (empty? word)\n        acc\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (string-append acc (string-upcase (string (second word)))))\n            (helper (rest word) (string-append acc (string (first word)))))))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp591fpn70.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp591fpn70.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp591fpn70.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpba8g9fe1.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpba8g9fe1.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpba8g9fe1.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                       (string-upcase (substring x 1))\n                       x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpow8f7k3u.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpow8f7k3u.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpow8f7k3u.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpba8g9fe1.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpba8g9fe1.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpba8g9fe1.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-length x) 1)\n          (string-upcase x)\n          (string-append (string-upcase (substring x 0 1)) (substring x 1))))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgissmdki.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgissmdki.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgissmdki.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (word)\n          (string-capitalize word))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "/tmp/tmpu9a02iho.rkt:7:11: string-capitalize: unbound identifier\n  in: string-capitalize\n  location...:\n   /tmp/tmpu9a02iho.rkt:7:11\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (str)\n      (string-capitalize str))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122799,
      "stdout": "",
      "stderr": "/tmp/tmpxiqm_5ye.rkt:8:7: string-capitalize: unbound identifier\n  in: string-capitalize\n  location...:\n   /tmp/tmpxiqm_5ye.rkt:8:7\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (string-upcase x)) (string-split word #\\_)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgyddh18c.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgyddh18c.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgyddh18c.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbaqi7hg_.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbaqi7hg_.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbaqi7hg_.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptbm80_7n.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptbm80_7n.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptbm80_7n.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (string-upcase x)) (string-split word #\\_)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgyddh18c.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgyddh18c.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgyddh18c.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word acc)\n    (if (empty? word)\n        acc\n        (if (equal? (first word) #\\_)\n            (helper (rest word) (string-append acc (string-upcase (string (second word)))))\n            (helper (rest word) (string-append acc (string (first word)))))))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122799,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp47pgyqlj.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp47pgyqlj.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp47pgyqlj.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (w) (string-upcase w))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl406dlqa.rkt:15:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl406dlqa.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl406dlqa.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (w)\n      (string-upcase (substring w 1)))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo6_a0ova.rkt:17:4\nactual:     \"NDROIDV\"\nexpected:   \"AndroidTv\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo6_a0ova.rkt:18:4\nactual:     \"OOGLEIXEL\"\nexpected:   \"GooglePixel\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo6_a0ova.rkt:19:4\nactual:     \"PPLEATCH\"\nexpected:   \"AppleWatch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                                    (string-upcase (substring x 1))\n                                    x))\n                     (string-split word #\\_)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe12276wz.rkt:15:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe12276wz.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe12276wz.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (cond\n      [(empty? word) result]\n      [(char=? #\\_ (first word))\n       (helper (rest word)\n               (string-append result\n                              (string-upcase (first (rest word)))))\n       ]\n      [else (helper (rest word)\n                    (string-append result (string (first word))))]))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122799,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_6xd1p17.rkt:22:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_6xd1p17.rkt:23:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_6xd1p17.rkt:24:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpba8g9fe1.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpba8g9fe1.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpba8g9fe1.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-length x) 1)\n          (string-upcase x)\n          (string-upcase (substring x 0 1))\n          (substring x 1)))\n    (regexp-split #px\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122799,
      "stdout": "",
      "stderr": "/tmp/tmpsgwql9s1.rkt:8:6: if: bad syntax\n  in: (if (equal? (string-length x) 1) (string-upcase x) (string-upcase (substring x 0 1)) (substring x 1))\n  location...:\n   /tmp/tmpsgwql9s1.rkt:8:6\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (convert-word word)\n    (define (convert-word-helper word result)\n      (if (empty? word)\n          result\n          (if (char=? (first word) #\\_)\n              (convert-word-helper (rest word) (string-append result (string-upcase (string (second word)))))\n              (convert-word-helper (rest word) (string-append result (string (first word)))))))\n    (convert-word-helper word \"\"))\n  (convert-word word))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122799,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph0l8tg5y.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph0l8tg5y.rkt:21:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph0l8tg5y.rkt:22:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word acc)\n    (cond\n      [(empty? word) (reverse acc)]\n      [(char=? (first word) #\\_) (helper (rest word) (cons (char-upcase (first (rest word))) (rest (rest word))))]\n      [else (helper (rest word) (cons (first word) acc))]))\n  (helper word '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122799,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1mmn9_gh.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1mmn9_gh.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1mmn9_gh.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (if (equal? (string-ref x 0) #\\_)\n                        (string-upcase (substring x 1))\n                        x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122799,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5mvcq8t6.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5mvcq8t6.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5mvcq8t6.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (if (empty? word)\n        (string-join (reverse result))\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (cons (string-upcase (second word)) (rest result)))\n            (helper (rest word) (cons (first word) result)))))\n  (helper word '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122799,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxxocr3fc.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxxocr3fc.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxxocr3fc.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (w) (string-upcase (substring w 0 1)) (substring w 1))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmponnl9sl0.rkt:15:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmponnl9sl0.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmponnl9sl0.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-ref x 0) #\\_)\n          (string-upcase (string-drop x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122797,
      "stdout": "",
      "stderr": "/tmp/tmpueyqo_9u.rkt:9:26: string-drop: unbound identifier\n  in: string-drop\n  location...:\n   /tmp/tmpueyqo_9u.rkt:9:26\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (string-capitalize x))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122799,
      "stdout": "",
      "stderr": "/tmp/tmp_tki8ro6.rkt:6:21: string-capitalize: unbound identifier\n  in: string-capitalize\n  location...:\n   /tmp/tmp_tki8ro6.rkt:6:21\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word)\n    (if (string-empty? word)\n        \"\"\n        (if (string=? (string-take word 1) \"_\")\n            (string-append (string-upcase (string-take word 2)) (helper (string-drop word 2)))\n            (string-append (string-take word 1) (helper (string-drop word 1))))))\n  (string-downcase (helper word)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122799,
      "stdout": "",
      "stderr": "/tmp/tmp8jtj5hcc.rkt:6:9: string-empty?: unbound identifier\n  in: string-empty?\n  location...:\n   /tmp/tmp8jtj5hcc.rkt:6:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (string=? (substring x 0 1) \"_\")\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg77rhyu1.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg77rhyu1.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg77rhyu1.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (string-contains x #\\_)\n          (string-upcase (string-drop x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122800,
      "stdout": "",
      "stderr": "/tmp/tmpmzrnho_b.rkt:8:11: string-contains: unbound identifier\n  in: string-contains\n  location...:\n   /tmp/tmpmzrnho_b.rkt:8:11\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (s) (string-upcase s))\n        (regexp-split #rx\"_\" word)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122800,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx67ym2_t.rkt:14:4\nactual:     \"ANDROIDTV\"\nexpected:   \"AndroidTv\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx67ym2_t.rkt:15:4\nactual:     \"GOOGLEPIXEL\"\nexpected:   \"GooglePixel\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx67ym2_t.rkt:16:4\nactual:     \"APPLEWATCH\"\nexpected:   \"AppleWatch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (\u03bb (x) (string-upcase x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122800,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqlzync0n.rkt:15:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqlzync0n.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqlzync0n.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbaqi7hg_.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbaqi7hg_.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbaqi7hg_.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (convert word)\n    (cond\n      [(empty? word) empty]\n      [(char=? (first word) #\\_) (cons (char-upcase (second word)) (convert (rest (rest word))))]\n      [else (cons (first word) (convert (rest word)))]))\n  (convert word))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122800,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1h51a5eg.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1h51a5eg.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1h51a5eg.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptbm80_7n.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptbm80_7n.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptbm80_7n.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (w)\n      (string-upcase (substring w 1)))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo6_a0ova.rkt:17:4\nactual:     \"NDROIDV\"\nexpected:   \"AndroidTv\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo6_a0ova.rkt:18:4\nactual:     \"OOGLEIXEL\"\nexpected:   \"GooglePixel\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo6_a0ova.rkt:19:4\nactual:     \"PPLEATCH\"\nexpected:   \"AppleWatch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (w) (string-upcase w))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl406dlqa.rkt:15:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl406dlqa.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl406dlqa.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (cond [(empty? word) result]\n          [(char=? (first word) #\\_)\n           (helper (rest word) (string-append result (string-upcase (first (rest word)))))\n           ]\n          [else (helper (rest word) (string-append result (string (first word))))]))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx1670hhl.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx1670hhl.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx1670hhl.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (string-upcase x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplto0dcgz.rkt:15:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplto0dcgz.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplto0dcgz.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (if (empty? word)\n        result\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (string-append result (string-upcase (string (second word)))))\n            (helper (rest word) (string-append result (string (first word)))))))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2i_65xvz.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2i_65xvz.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2i_65xvz.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (string=? (substring x 0 1) \"_\")\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122794,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5q472x_v.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5q472x_v.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5q472x_v.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (if (string-empty? word)\n        result\n        (if (char=? (string-ref word 0) #\\_)\n            (helper (substring word 1 (string-length word))\n                    (string-append result (string-upcase (string-ref word 1))))\n            (helper (substring word 1 (string-length word))\n                    (string-append result (string-ref word 0))))))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122800,
      "stdout": "",
      "stderr": "/tmp/tmp6xx8hc8q.rkt:6:9: string-empty?: unbound identifier\n  in: string-empty?\n  location...:\n   /tmp/tmp6xx8hc8q.rkt:6:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbaqi7hg_.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbaqi7hg_.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbaqi7hg_.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word)\n    (if (string-empty? word)\n        \"\"\n        (string-append (string-capitalize (string-take word 1))\n                       (string-drop word 1))))\n  (string-join (map helper (string-split word #\\_)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122800,
      "stdout": "",
      "stderr": "/tmp/tmpbx499jxg.rkt:6:9: string-empty?: unbound identifier\n  in: string-empty?\n  location...:\n   /tmp/tmpbx499jxg.rkt:6:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (cond\n      [(empty? word) result]\n      [(char=? (first word) #\\_) (helper (rest word) (string-append result (string-upcase (string (second word)))))]\n      [else (helper (rest word) (string-append result (string (first word))))]))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo1slzekl.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo1slzekl.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo1slzekl.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (equal? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw1zwn9l6.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw1zwn9l6.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw1zwn9l6.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (if (char=? #\\_ (string-ref x 0))\n                                    (string-upcase (substring x 1))\n                                    x))\n                     (string-split word #\\_))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122800,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplp_wy14y.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplp_wy14y.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplp_wy14y.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x) (string-upcase x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2l3xahuh.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2l3xahuh.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2l3xahuh.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptbm80_7n.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptbm80_7n.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptbm80_7n.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (cond [(empty? word) result]\n          [(char=? (first word) #\\_)\n           (helper (rest word) (string-append result (string-upcase (first (rest word)))))\n           ]\n          [else (helper (rest word) (string-append result (string (first word))))]))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx1670hhl.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx1670hhl.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx1670hhl.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (if (equal? (string-ref x 0) #\\_)\n                       (string-upcase (substring x 1))\n                       x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122797,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu6700ei8.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu6700ei8.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu6700ei8.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word)\n    (if (string-contains word #\\_)\n        (string-append (string-upcase (string-take word 1))\n                       (string-drop word 1))\n        word))\n  (define (helper2 word)\n    (if (string-contains word #\\_)\n        (string-append (helper (string-take word (string-index word #\\_)))\n                       (string-drop word (add1 (string-index word #\\_))))\n        word))\n  (helper2 word))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122800,
      "stdout": "",
      "stderr": "/tmp/tmpoqvrrxrq.rkt:6:9: string-contains: unbound identifier\n  in: string-contains\n  location...:\n   /tmp/tmpoqvrrxrq.rkt:6:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (cond\n      [(empty? word) result]\n      [(char=? #\\_ (first word)) (helper (rest word) (string-append result (string-upcase (first (rest word))))) ]\n      [else (helper (rest word) (string-append result (string (first word))))]))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122800,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9q8yjxve.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9q8yjxve.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9q8yjxve.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map string-upcase (string-split word #\"_\")) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122800,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppb5o9_vm.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\"_\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppb5o9_vm.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\"_\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppb5o9_vm.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\"_\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (string-upcase x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplto0dcgz.rkt:15:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplto0dcgz.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplto0dcgz.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (string-upcase x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplto0dcgz.rkt:15:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplto0dcgz.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplto0dcgz.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (word)\n      (string-upcase (substring word 0 1))\n      (substring word 1))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122794,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc8k47ziq.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc8k47ziq.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc8k47ziq.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (w)\n      (string-upcase (substring w 1)))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo6_a0ova.rkt:17:4\nactual:     \"NDROIDV\"\nexpected:   \"AndroidTv\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo6_a0ova.rkt:18:4\nactual:     \"OOGLEIXEL\"\nexpected:   \"GooglePixel\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo6_a0ova.rkt:19:4\nactual:     \"PPLEATCH\"\nexpected:   \"AppleWatch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (w)\n      (string-upcase (substring w 1)))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo6_a0ova.rkt:17:4\nactual:     \"NDROIDV\"\nexpected:   \"AndroidTv\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo6_a0ova.rkt:18:4\nactual:     \"OOGLEIXEL\"\nexpected:   \"GooglePixel\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo6_a0ova.rkt:19:4\nactual:     \"PPLEATCH\"\nexpected:   \"AppleWatch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (word)\n          (string-upcase (substring word 0 1))\n          (substring word 1))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeqlzm3o1.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeqlzm3o1.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeqlzm3o1.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (substring x 0 1) \"_\")\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122794,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbdriww4p.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbdriww4p.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbdriww4p.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (if (equal? #\\_ (string-ref x 0))\n                                    (string-upcase (substring x 1))\n                                    x))\n                     (string-split word #\\_))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122800,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptc8iklw3.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptc8iklw3.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptc8iklw3.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (word)\n      (string-upcase (substring word 1)))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9rd_yswc.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9rd_yswc.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9rd_yswc.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (char-numeric? (string-ref x 0))\n              x\n              (string-titlecase x)))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122800,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgdqcyutp.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgdqcyutp.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgdqcyutp.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (word)\n      (string-upcase (substring word 1)))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1vl8q6ye.rkt:17:4\nactual:     \"NDROIDV\"\nexpected:   \"AndroidTv\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1vl8q6ye.rkt:18:4\nactual:     \"OOGLEIXEL\"\nexpected:   \"GooglePixel\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1vl8q6ye.rkt:19:4\nactual:     \"PPLEATCH\"\nexpected:   \"AppleWatch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (if (empty? word)\n        result\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (string-append result (string-upcase (string (second word)))))\n            (helper (rest word) (string-append result (string (first word)))))))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2i_65xvz.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2i_65xvz.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2i_65xvz.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char-numeric? (string-ref x 0))\n          x\n          (string-upcase x)))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuw8jp3du.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuw8jp3du.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuw8jp3du.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word acc)\n    (cond\n      [(empty? word) (list->string (reverse acc))]\n      [(char=? (first word) #\\_) (helper (rest word) (cons (char-upcase (first (rest word))) (rest (rest word))))]\n      [else (helper (rest word) (cons (first word) acc))]))\n  (helper word '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122800,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqn0975mk.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqn0975mk.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqn0975mk.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char-numeric? (string-ref x 0))\n          x\n          (string-titlecase x)))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122800,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfcbbr__5.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfcbbr__5.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfcbbr__5.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (w)\n      (string-upcase (substring w 1)))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo6_a0ova.rkt:17:4\nactual:     \"NDROIDV\"\nexpected:   \"AndroidTv\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo6_a0ova.rkt:18:4\nactual:     \"OOGLEIXEL\"\nexpected:   \"GooglePixel\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo6_a0ova.rkt:19:4\nactual:     \"PPLEATCH\"\nexpected:   \"AppleWatch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptbm80_7n.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptbm80_7n.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptbm80_7n.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (snake_to_camel_iter word acc)\n    (cond\n      [(empty? word) (list->string (reverse acc))]\n      [(equal? (first word) #\\_)\n       (snake_to_camel_iter (rest word) (cons (char-upcase (second word)) (rest acc)))]\n      [else (snake_to_camel_iter (rest word) (cons (first word) acc))]))\n  (snake_to_camel_iter word '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122800,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_lg3vm71.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_lg3vm71.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_lg3vm71.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbaqi7hg_.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbaqi7hg_.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbaqi7hg_.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (snake_to_camel_iter word result)\n    (if (empty? word)\n        result\n        (if (char=? (first word) #\\_)\n            (snake_to_camel_iter (rest word) (string-append result (string-upcase (string (second word)))))\n            (snake_to_camel_iter (rest word) (string-append result (string (first word)))))))\n  (snake_to_camel_iter word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmjsh0_ly.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmjsh0_ly.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmjsh0_ly.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (string=? (substring x 0 1) \"_\")\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122794,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5q472x_v.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5q472x_v.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5q472x_v.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper w acc)\n    (if (empty? w)\n        (string-join (reverse acc))\n        (if (equal? (first w) #\\_)\n            (helper (rest w) (cons (string-upcase (second w)) (rest acc)))\n            (helper (rest w) (cons (first w) acc)))))\n  (helper (string->list word) '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122800,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpteiy7tn1.rkt:18:4\n\nstring-upcase: contract violation\n  expected: string?\n  given: #\\t\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpteiy7tn1.rkt:19:4\n\nstring-upcase: contract violation\n  expected: string?\n  given: #\\p\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpteiy7tn1.rkt:20:4\n\nstring-upcase: contract violation\n  expected: string?\n  given: #\\w\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (w)\n      (string-upcase (substring w 0 1))\n      (substring w 1))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp269teb61.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp269teb61.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp269teb61.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                                    (string-upcase (substring x 1))\n                                    x))\n                     (string-split word #\\_))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsuq75vbd.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsuq75vbd.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsuq75vbd.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-append (string-upcase (substring word 0 1)) (substring word 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm6r7ja6z.rkt:12:4\nactual:     \"Android_tv\"\nexpected:   \"AndroidTv\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm6r7ja6z.rkt:13:4\nactual:     \"Google_pixel\"\nexpected:   \"GooglePixel\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm6r7ja6z.rkt:14:4\nactual:     \"Apple_watch\"\nexpected:   \"AppleWatch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word acc)\n    (cond\n      [(empty? word) (reverse acc)]\n      [(char=? (first word) #\\_) (helper (rest word) (cons (char-upcase (first (rest word))) (rest (rest word))))]\n      [else (helper (rest word) (cons (first word) acc))]))\n  (helper word '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122799,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1mmn9_gh.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1mmn9_gh.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1mmn9_gh.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (if (equal? (string-ref x 0) #\\_)\n                                    (string-upcase (string-drop x 1))\n                                    x))\n                     (string-split word #\\_)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122800,
      "stdout": "",
      "stderr": "/tmp/tmpbrumgurt.rkt:6:52: string-drop: unbound identifier\n  in: string-drop\n  location...:\n   /tmp/tmpbrumgurt.rkt:6:52\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (w)\n          (string-upcase (substring w 0 1))\n          (substring w 1))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122797,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppeqnki1p.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppeqnki1p.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppeqnki1p.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1 (string-length x)))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122801,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz6v1l5lc.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz6v1l5lc.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz6v1l5lc.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-append (string-upcase (substring word 0 1))\n                 (substring word 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122797,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxgbgmaxj.rkt:13:4\nactual:     \"Android_tv\"\nexpected:   \"AndroidTv\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxgbgmaxj.rkt:14:4\nactual:     \"Google_pixel\"\nexpected:   \"GooglePixel\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxgbgmaxj.rkt:15:4\nactual:     \"Apple_watch\"\nexpected:   \"AppleWatch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (cond\n      [(empty? word) result]\n      [(char=? (first word) #\\_) (helper (rest word) (string-append result (string-upcase (string (second word))))) ]\n      [else (helper (rest word) (string-append result (string (first word))))]))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122794,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_0dz1dv4.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_0dz1dv4.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_0dz1dv4.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (word)\n      (string-upcase (substring word 0 1))\n      (substring word 1))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122794,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc8k47ziq.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc8k47ziq.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc8k47ziq.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpba8g9fe1.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpba8g9fe1.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpba8g9fe1.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (word)\n          (string-upcase (substring word 0 1))\n          (substring word 1))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeqlzm3o1.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeqlzm3o1.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeqlzm3o1.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (let ([word (string-split word #\\_)])\n    (string-join (map (lambda (x) (string-upcase (substring x 0 1)) (substring x 1)) word) \"\")))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122801,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgexqtwg8.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgexqtwg8.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgexqtwg8.rkt:15:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbaqi7hg_.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbaqi7hg_.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbaqi7hg_.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (w) (string-upcase w))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl406dlqa.rkt:15:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl406dlqa.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl406dlqa.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (\u03bb (x) (string-upcase x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122800,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqlzync0n.rkt:15:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqlzync0n.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqlzync0n.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (string-upcase x)) (string-split word #\\_)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgyddh18c.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgyddh18c.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgyddh18c.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word)\n    (if (string-empty? word)\n        \"\"\n        (if (string=? (string-take word 1) \"_\")\n            (string-append (string-upcase (string-take word 2))\n                           (helper (string-drop word 2)))\n            (string-append (string-take word 1)\n                           (helper (string-drop word 1))))))\n  (helper (string-downcase word)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122801,
      "stdout": "",
      "stderr": "/tmp/tmps4pgv24u.rkt:6:9: string-empty?: unbound identifier\n  in: string-empty?\n  location...:\n   /tmp/tmps4pgv24u.rkt:6:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (string-upcase x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplto0dcgz.rkt:15:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplto0dcgz.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplto0dcgz.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (substring x 0 1) \"_\")\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122794,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbdriww4p.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbdriww4p.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbdriww4p.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (if (empty? word)\n        result\n        (if (equal? (first word) #\\_)\n            (helper (rest word) (string-append result (string-upcase (string (second word)))))\n            (helper (rest word) (string-append result (string (first word)))))))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp8gm0g2i.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp8gm0g2i.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp8gm0g2i.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (snake_to_camel_iter word result)\n    (cond [(empty? word) result]\n          [(char=? (first word) #\\_)\n           (snake_to_camel_iter (rest word) (string-append result (string-upcase (string (second word)))))\n           ]\n          [else (snake_to_camel_iter (rest word) (string-append result (string (first word))))]))\n  (snake_to_camel_iter word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfc0chzvq.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfc0chzvq.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfc0chzvq.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (if (empty? word)\n        result\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (string-append result (string-upcase (string (second word)))))\n            (helper (rest word) (string-append result (string (first word)))))))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2i_65xvz.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2i_65xvz.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2i_65xvz.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-length x) 1)\n          (string-upcase x)\n          (string-append (string-upcase (substring x 0 1))\n                        (substring x 1))))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7_z2pg2.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7_z2pg2.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7_z2pg2.rkt:22:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map string-upcase (regexp-split #rx\"_\" word)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6utx6smd.rkt:12:4\nactual:     \"ANDROIDTV\"\nexpected:   \"AndroidTv\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6utx6smd.rkt:13:4\nactual:     \"GOOGLEPIXEL\"\nexpected:   \"GooglePixel\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6utx6smd.rkt:14:4\nactual:     \"APPLEWATCH\"\nexpected:   \"AppleWatch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-append (string-upcase (substring word 0 1))\n                 (substring word 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122797,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxgbgmaxj.rkt:13:4\nactual:     \"Android_tv\"\nexpected:   \"AndroidTv\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxgbgmaxj.rkt:14:4\nactual:     \"Google_pixel\"\nexpected:   \"GooglePixel\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxgbgmaxj.rkt:15:4\nactual:     \"Apple_watch\"\nexpected:   \"AppleWatch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (string-upcase x))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqcb1_8f1.rkt:15:4\nactual:     \"ANDROIDTV\"\nexpected:   \"AndroidTv\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqcb1_8f1.rkt:16:4\nactual:     \"GOOGLEPIXEL\"\nexpected:   \"GooglePixel\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqcb1_8f1.rkt:17:4\nactual:     \"APPLEWATCH\"\nexpected:   \"AppleWatch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (cond\n      [(empty? word) result]\n      [(char=? (first word) #\\_) (helper (rest word) (string-append result (string-upcase (string (second word)))))]\n      [else (helper (rest word) (string-append result (string (first word))))]))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo1slzekl.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo1slzekl.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo1slzekl.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (w)\n      (string-upcase (substring w 0 1))\n      (substring w 1))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp269teb61.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp269teb61.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp269teb61.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (string=? (substring x 0 1) \"_\")\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg77rhyu1.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg77rhyu1.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg77rhyu1.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (cond\n      [(empty? word) result]\n      [(char=? (first word) #\\_) (helper (rest word) (string-append result (string-upcase (string (second word))))) ]\n      [else (helper (rest word) (string-append result (string (first word))))]))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122794,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_0dz1dv4.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_0dz1dv4.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_0dz1dv4.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x) (string-capitalize x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122801,
      "stdout": "",
      "stderr": "/tmp/tmprtil3bts.rkt:7:17: string-capitalize: unbound identifier\n  in: string-capitalize\n  location...:\n   /tmp/tmprtil3bts.rkt:7:17\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (convert-word word)\n    (string-append (string-upcase (substring word 0 1))\n                   (substring word 1)))\n  (define (convert-words words)\n    (if (empty? words)\n        '()\n        (cons (convert-word (first words))\n              (convert-words (rest words)))))\n  (string-join (convert-words (string-split word #\\_)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122801,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2pp9bdkq.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2pp9bdkq.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2pp9bdkq.rkt:22:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (equal? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw1zwn9l6.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw1zwn9l6.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw1zwn9l6.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (word)\n      (string-upcase (substring word 1)))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1vl8q6ye.rkt:17:4\nactual:     \"NDROIDV\"\nexpected:   \"AndroidTv\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1vl8q6ye.rkt:18:4\nactual:     \"OOGLEIXEL\"\nexpected:   \"GooglePixel\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1vl8q6ye.rkt:19:4\nactual:     \"PPLEATCH\"\nexpected:   \"AppleWatch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (w) (string-upcase (substring w 1)))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppf9ecora.rkt:15:4\nactual:     \"NDROIDV\"\nexpected:   \"AndroidTv\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppf9ecora.rkt:16:4\nactual:     \"OOGLEIXEL\"\nexpected:   \"GooglePixel\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppf9ecora.rkt:17:4\nactual:     \"PPLEATCH\"\nexpected:   \"AppleWatch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (string-upcase (substring x 1)))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpce8f5lpx.rkt:15:4\nactual:     \"NDROIDV\"\nexpected:   \"AndroidTv\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpce8f5lpx.rkt:16:4\nactual:     \"OOGLEIXEL\"\nexpected:   \"GooglePixel\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpce8f5lpx.rkt:17:4\nactual:     \"PPLEATCH\"\nexpected:   \"AppleWatch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (let loop ([word word]\n             [result '()])\n    (cond [(empty? word) (string-join (reverse result))]\n          [(char=? (first word) #\\_) (loop (rest word) (cons (char-upcase (second word)) result))]\n          [else (loop (rest word) (cons (first word) result))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122801,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptr2m3s5c.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptr2m3s5c.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptr2m3s5c.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (string-upcase x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplto0dcgz.rkt:15:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplto0dcgz.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplto0dcgz.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (if (empty? word)\n        result\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (string-append result (string-upcase (string (second word)))))\n            (helper (rest word) (string-append result (string (first word)))))))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2i_65xvz.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2i_65xvz.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2i_65xvz.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word acc)\n    (if (empty? word)\n        acc\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (string-append acc (string-upcase (string (second word)))))\n            (helper (rest word) (string-append acc (string (first word)))))))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517262,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp591fpn70.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp591fpn70.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp591fpn70.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (word)\n      (string-capitalize word))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "/tmp/tmp5j5e6g29.rkt:8:7: string-capitalize: unbound identifier\n  in: string-capitalize\n  location...:\n   /tmp/tmp5j5e6g29.rkt:8:7\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (cond\n      [(empty? word) result]\n      [(char=? (first word) #\\_) (helper (rest word) (string-append result (string-upcase (string (second word)))))]\n      [else (helper (rest word) (string-append result (string (first word))))]))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo1slzekl.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo1slzekl.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo1slzekl.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (if (string-empty? word)\n        result\n        (if (string=? (substring word 0 1) \"_\")\n            (helper (substring word 1) (string-append result (string-upcase (substring word 1 1))))\n            (helper (substring word 1) (string-append result (substring word 0 1))))))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122801,
      "stdout": "",
      "stderr": "/tmp/tmp1et9krfx.rkt:6:9: string-empty?: unbound identifier\n  in: string-empty?\n  location...:\n   /tmp/tmp1et9krfx.rkt:6:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-length x) 1)\n          x\n          (string-append (string-upcase (substring x 0 1)) (substring x 1))))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map string-upcase\n        (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122794,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppltjpmhz.rkt:15:4\nactual:     \"ANDROIDTV\"\nexpected:   \"AndroidTv\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppltjpmhz.rkt:16:4\nactual:     \"GOOGLEPIXEL\"\nexpected:   \"GooglePixel\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppltjpmhz.rkt:17:4\nactual:     \"APPLEWATCH\"\nexpected:   \"AppleWatch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    }
  ]
}