{
  "name": "mbpp_391_convert_list_dictionary",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to convert more than one list to nested dictionary.\n(define (convert_list_dictionary l1 l2 l3)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_391_convert_list_dictionary.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate convert_list_dictionary))\n    (check-equal? (candidate (list \"S001\" \"S002\" \"S003\" \"S004\") (list \"Adina Park\" \"Leyton Marsh\" \"Duncan Boyle\" \"Saim Richards\") (list 85 98 89 92)) (list #hash((\"S001\" .  #hash((\"Adina Park\" .  85)))) #hash((\"S002\" .  #hash((\"Leyton Marsh\" .  98)))) #hash((\"S003\" .  #hash((\"Duncan Boyle\" .  89)))) #hash((\"S004\" .  #hash((\"Saim Richards\" .  92))))))\n    (check-equal? (candidate (list \"abc\" \"def\" \"ghi\" \"jkl\") (list \"python\" \"program\" \"language\" \"programs\") (list 100 200 300 400)) (list #hash((\"abc\" .  #hash((\"python\" .  100)))) #hash((\"def\" .  #hash((\"program\" .  200)))) #hash((\"ghi\" .  #hash((\"language\" .  300)))) #hash((\"jkl\" .  #hash((\"programs\" .  400))))))\n    (check-equal? (candidate (list \"A1\" \"A2\" \"A3\" \"A4\") (list \"java\" \"C\" \"C++\" \"DBMS\") (list 10 20 30 40)) (list #hash((\"A1\" .  #hash((\"java\" .  10)))) #hash((\"A2\" .  #hash((\"C\" .  20)))) #hash((\"A3\" .  #hash((\"C++\" .  30)))) #hash((\"A4\" .  #hash((\"DBMS\" .  40))))))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (convert_list_dictionary_iter l1 l2 l3)\n    (cond [(empty? l1) empty]\n          [(empty? l2) empty]\n          [(empty? l3) empty]\n          [else (cons (cons (car l1) (cons (car l2) (cons (car l3) empty)))\n                      (convert_list_dictionary_iter (cdr l1) (cdr l2) (cdr l3)))]))\n  (convert_list_dictionary_iter l1 l2 l3))\n",
    "  (define (convert_list_dictionary_iter l1 l2 l3)\n    (cond\n      [(empty? l1) empty]\n      [(empty? l2) empty]\n      [(empty? l3) empty]\n      [else\n       (cons (cons (car l1) (cons (car l2) (cons (car l3) empty)))\n             (convert_list_dictionary_iter (cdr l1) (cdr l2) (cdr l3)))]))\n  (convert_list_dictionary_iter l1 l2 l3))\n",
    "  (let ([d1 (list->dictionary l1 l2)]\n        [d2 (list->dictionary l1 l3)])\n    (dictionary-map (lambda (k v)\n                      (list k v (dictionary-ref d2 k)))\n                    d1)))\n",
    "  (define (convert_list_dictionary_iter l1 l2 l3)\n    (cond\n      [(empty? l1) '()]\n      [(empty? l2) '()]\n      [(empty? l3) '()]\n      [else (cons (cons (car l1) (cons (car l2) (cons (car l3) '())))\n                  (convert_list_dictionary_iter (cdr l1) (cdr l2) (cdr l3)))]))\n  (convert_list_dictionary_iter l1 l2 l3))\n",
    "  (define (convert_list_dictionary_iter l1 l2 l3)\n    (cond\n      [(empty? l1) '()]\n      [(empty? l2) '()]\n      [(empty? l3) '()]\n      [else (cons (cons (car l1) (cons (car l2) (cons (car l3) '())))\n                  (convert_list_dictionary_iter (cdr l1) (cdr l2) (cdr l3)))]))\n  (convert_list_dictionary_iter l1 l2 l3))\n",
    "  (list (list (list 'key1 l1) (list 'key2 l2) (list 'key3 l3))))\n",
    "  (define (convert_list_dictionary_iter l1 l2 l3)\n    (if (and (null? l1) (null? l2) (null? l3))\n        '()\n        (cons (cons (car l1) (cons (car l2) (cons (car l3) '())))\n              (convert_list_dictionary_iter (cdr l1) (cdr l2) (cdr l3)))))\n  (convert_list_dictionary_iter l1 l2 l3))\n",
    "  (list (list 'first l1)\n        (list 'second l2)\n        (list 'third l3)))\n",
    "  (define (convert_list_dictionary_iter l1 l2 l3)\n    (cond\n      [(empty? l1) empty]\n      [else (cons (cons (first l1) (cons (first l2) (cons (first l3) empty)))\n                   (convert_list_dictionary_iter (rest l1) (rest l2) (rest l3)))]))\n  (convert_list_dictionary_iter l1 l2 l3))\n",
    "  (define (convert_list_dictionary_iter l1 l2 l3 acc)\n    (cond [(empty? l1) acc]\n          [(empty? l2) (convert_list_dictionary_iter (rest l1) l2 l3 acc)]\n          [(empty? l3) (convert_list_dictionary_iter (rest l1) (rest l2) l3 acc)]\n          [else (convert_list_dictionary_iter (rest l1) (rest l2) (rest l3) (cons (cons (first l1) (cons (first l2) (cons (first l3) '()))) acc))]))\n  (reverse (convert_list_dictionary_iter l1 l2 l3 '())))\n",
    "  (define (convert_list_dictionary_iter l1 l2 l3)\n    (cond\n      [(empty? l1) '()]\n      [(empty? l2) '()]\n      [(empty? l3) '()]\n      [else (cons (cons (car l1) (cons (car l2) (car l3)))\n                   (convert_list_dictionary_iter (cdr l1) (cdr l2) (cdr l3)))]))\n  (convert_list_dictionary_iter l1 l2 l3))\n",
    "  (define (convert_list_dictionary_iter l1 l2 l3 d)\n    (cond\n      [(empty? l1) d]\n      [else\n       (convert_list_dictionary_iter (rest l1) (rest l2) (rest l3)\n                                     (hash-set d (first l1)\n                                               (hash 'key1 (first l2)\n                                                     'key2 (first l3))))]))\n  (convert_list_dictionary_iter l1 l2 l3 (hash)))\n",
    "  (define (convert_list_dictionary_iter l1 l2 l3)\n    (cond\n      [(empty? l1) empty]\n      [(empty? l2) empty]\n      [(empty? l3) empty]\n      [else (cons (list (car l1) (car l2) (car l3))\n                  (convert_list_dictionary_iter (cdr l1) (cdr l2) (cdr l3)))]))\n  (convert_list_dictionary_iter l1 l2 l3))\n",
    "  (define (convert_list_dictionary_iter l1 l2 l3)\n    (if (null? l1)\n        '()\n        (cons (cons (car l1) (cons (car l2) (cons (car l3) '())))\n              (convert_list_dictionary_iter (cdr l1) (cdr l2) (cdr l3)))))\n  (convert_list_dictionary_iter l1 l2 l3))\n",
    "  (list (list 'l1 l1) (list 'l2 l2) (list 'l3 l3)))\n",
    "  (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict-set (dict",
    "  (define (convert_list_dictionary_iter l1 l2 l3)\n    (cond\n      [(empty? l1) empty]\n      [(empty? l2) empty]\n      [(empty? l3) empty]\n      [else (cons (cons (car l1) (cons (car l2) (cons (car l3) empty)))\n                  (convert_list_dictionary_iter (cdr l1) (cdr l2) (cdr l3)))]))\n  (convert_list_dictionary_iter l1 l2 l3))\n",
    "  (define (convert_list_dictionary_iter l1 l2 l3)\n    (cond [(empty? l1) empty]\n          [(empty? l2) empty]\n          [(empty? l3) empty]\n          [else (cons (cons (car l1) (cons (car l2) (cons (car l3) empty)))\n                      (convert_list_dictionary_iter (cdr l1) (cdr l2) (cdr l3)))]))\n  (convert_list_dictionary_iter l1 l2 l3))\n",
    "  (define (convert_list_dictionary_iter l1 l2 l3)\n    (cond ((and (null? l1) (null? l2) (null? l3)) '())\n          ((and (null? l1) (null? l2) (not (null? l3))) (cons (cons 'c3 (car l3)) (convert_list_dictionary_iter l1 l2 (cdr l3))))\n          ((and (null? l1) (not (null? l2)) (null? l3)) (cons (cons 'c2 (car l2)) (convert_list_dictionary_iter l1 (cdr l2) l3)))\n          ((and (null? l1) (not (null? l2)) (not (null? l3))) (cons (cons 'c2 (car l2)) (cons (cons 'c3 (car l3)) (convert_list_dictionary_iter l1 (cdr l2) (cdr l3)))))\n          ((and (not (null? l1)) (null? l2) (null? l3)) (cons (cons 'c1 (car l1)) (convert_list_dictionary_iter (cdr l1) l2 l3)))\n          ((and (not (null? l1)) (null? l2) (not (null? l3))) (cons (cons 'c1 (car l1)) (cons (cons 'c3 (car l3)) (convert_list_dictionary_iter (cdr l1) l2 (cdr l3)))))\n          ((and (not (null? l1)) (not (null? l2)) (null? l3)) (cons (cons 'c1 (car l1)) (cons (cons 'c2 (car l2)) (convert_list_dictionary_iter (cdr l1) (cdr l2) l3))))\n          ((and (not (null? l1)) (not (null? l2)) (not (null? l3))) (cons (cons 'c1 (car l1)) (cons (cons 'c2 (car l2)) (cons (cons 'c3 (car l3)) (convert_list_",
    "  (define (convert_list_dictionary_iter l1 l2 l3 acc)\n    (cond\n      [(and (null? l1) (null? l2) (null? l3)) acc]\n      [(and (not (null? l1)) (not (null? l2)) (not (null? l3)))\n       (convert_list_dictionary_iter (cdr l1) (cdr l2) (cdr l3)\n                                     (cons (cons (car l1) (cons (car l2) (cons (car l3) '()))) acc))]\n      [else (error \"All lists must be of the same length\")]))\n  (reverse (convert_list_dictionary_iter l1 l2 l3 '())))\n"
  ]
}