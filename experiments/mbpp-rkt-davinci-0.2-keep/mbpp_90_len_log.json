{
  "name": "mbpp_90_len_log",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to find the length of the longest word.\n(define (len_log list1)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_90_len_log.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate len_log))\n    (check-equal? (candidate (list \"python\" \"PHP\" \"bigdata\")) 7)\n    (check-equal? (candidate (list \"a\" \"ab\" \"abc\")) 3)\n    (check-equal? (candidate (list \"small\" \"big\" \"tall\")) 5)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (if (null? list1)\n      0\n      (max (string-length (car list1)) (len_log (cdr list1)))))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(> (string-length (first list1)) (len_log (rest list1)))\n     (string-length (first list1))]\n    [else (len_log (rest list1))]))\n",
    "  (if (null? list1)\n      0\n      (max (string-length (car list1))\n           (len_log (cdr list1)))))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(> (string-length (first list1)) (len_log (rest list1)))\n     (string-length (first list1))]\n    [else (len_log (rest list1))]))\n",
    "  (apply max (map string-length list1)))\n",
    "  (cond ((null? list1) 0)\n        ((&gt; (length (car list1)) (len_log (cdr list1))) (length (car list1)))\n        (else (len_log (cdr list1)))))\n",
    "  (if (null? list1)\n      0\n      (max (string-length (car list1))\n           (len_log (cdr list1)))))\n",
    "  (if (null? list1)\n      0\n      (max (string-length (car list1)) (len_log (cdr list1)))))\n",
    "  (if (null? list1)\n      0\n      (max (string-length (car list1))\n           (len_log (cdr list1)))))\n",
    "  (if (null? list1)\n      0\n      (max (string-length (car list1))\n           (len_log (cdr list1)))))\n",
    "  (apply max (map string-length list1)))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(> (string-length (first list1)) (len_log (rest list1))) (string-length (first list1))]\n    [else (len_log (rest list1))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [else (max (string-length (first list1)) (len_log (rest list1)))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [else (max (string-length (first list1)) (len_log (rest list1)))]))\n",
    "  (apply max (map string-length list1)))\n",
    "  (cond\n    [(null? list1) 0]\n    [else (max (string-length (car list1)) (len_log (cdr list1)))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [else (max (string-length (first list1)) (len_log (rest list1)))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(> (string-length (first list1)) (len_log (rest list1)))\n     (string-length (first list1))]\n    [else (len_log (rest list1))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [else (max (string-length (first list1)) (len_log (rest list1)))]))\n",
    "  (define (len_log_helper list1 max)\n    (cond\n      [(empty? list1) max]\n      [(> (string-length (first list1)) max)\n       (len_log_helper (rest list1) (string-length (first list1)))]\n      [else (len_log_helper (rest list1) max)]))\n  (len_log_helper list1 0))\n"
  ]
}