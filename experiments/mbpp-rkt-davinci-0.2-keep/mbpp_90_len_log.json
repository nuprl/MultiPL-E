{
  "name": "mbpp_90_len_log",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to find the length of the longest word.\n(define (len_log list1)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_90_len_log.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate len_log))\n    (check-equal? (candidate (list \"python\" \"PHP\" \"bigdata\")) 7)\n    (check-equal? (candidate (list \"a\" \"ab\" \"abc\")) 3)\n    (check-equal? (candidate (list \"small\" \"big\" \"tall\")) 5)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (if (null? list1)\n      0\n      (max (string-length (car list1)) (len_log (cdr list1)))))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(> (string-length (first list1)) (len_log (rest list1)))\n     (string-length (first list1))]\n    [else (len_log (rest list1))]))\n",
    "  (if (null? list1)\n      0\n      (max (string-length (car list1))\n           (len_log (cdr list1)))))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(> (string-length (first list1)) (len_log (rest list1)))\n     (string-length (first list1))]\n    [else (len_log (rest list1))]))\n",
    "  (apply max (map string-length list1)))\n",
    "  (cond ((null? list1) 0)\n        ((&gt; (length (car list1)) (len_log (cdr list1))) (length (car list1)))\n        (else (len_log (cdr list1)))))\n",
    "  (if (null? list1)\n      0\n      (max (string-length (car list1))\n           (len_log (cdr list1)))))\n",
    "  (if (null? list1)\n      0\n      (max (string-length (car list1)) (len_log (cdr list1)))))\n",
    "  (if (null? list1)\n      0\n      (max (string-length (car list1))\n           (len_log (cdr list1)))))\n",
    "  (if (null? list1)\n      0\n      (max (string-length (car list1))\n           (len_log (cdr list1)))))\n",
    "  (apply max (map string-length list1)))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(> (string-length (first list1)) (len_log (rest list1))) (string-length (first list1))]\n    [else (len_log (rest list1))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [else (max (string-length (first list1)) (len_log (rest list1)))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [else (max (string-length (first list1)) (len_log (rest list1)))]))\n",
    "  (apply max (map string-length list1)))\n",
    "  (cond\n    [(null? list1) 0]\n    [else (max (string-length (car list1)) (len_log (cdr list1)))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [else (max (string-length (first list1)) (len_log (rest list1)))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(> (string-length (first list1)) (len_log (rest list1)))\n     (string-length (first list1))]\n    [else (len_log (rest list1))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [else (max (string-length (first list1)) (len_log (rest list1)))]))\n",
    "  (define (len_log_helper list1 max)\n    (cond\n      [(empty? list1) max]\n      [(> (string-length (first list1)) max)\n       (len_log_helper (rest list1) (string-length (first list1)))]\n      [else (len_log_helper (rest list1) max)]))\n  (len_log_helper list1 0))\n",
    "  (cond ((null? list1) 0)\n        ((&gt; (string-length (car list1)) (len_log (cdr list1)))\n         (string-length (car list1)))\n        (else (len_log (cdr list1)))))\n</code>\nI am getting the following error:\n<code>application: not a procedure;\n expected a procedure that can be applied to arguments\n  given: #&lt;syntax:eval:2:0&gt;\n  arguments...:\n   #&lt;syntax:eval:2:0&gt;\n</code>\nI am not sure what is wrong with my code.\n\n\nA:\n\nThe problem is that you're using <code>&gt;</code> instead of <code>&gt;?</code>. The former is a procedure, while the latter is a syntax form.\n",
    "  (if (null? list1)\n      0\n      (max (string-length (car list1))\n           (len_log (cdr list1)))))\n",
    "  (cond\n    [(null? list1) 0]\n    [(&gt; (string-length (car list1)) (len_log (cdr list1)))\n     (string-length (car list1))]\n    [else (len_log (cdr list1))]))\n",
    "  (cond [(empty? list1) 0]\n        [else (max (string-length (first list1)) (len_log (rest list1)))]))\n",
    "  (apply max (map string-length list1)))\n",
    "  (apply max (map string-length list1)))\n",
    "  (apply max (map string-length list1)))\n",
    "  (cond\n    [(null? list1) 0]\n    [(> (length (car list1)) (len_log (cdr list1))) (length (car list1))]\n    [else (len_log (cdr list1))]))\n",
    "  (if (null? list1)\n      0\n      (max (string-length (car list1))\n           (len_log (cdr list1)))))\n",
    "  (cond\n    [(null? list1) 0]\n    [(> (string-length (car list1)) (len_log (cdr list1)))\n     (string-length (car list1))]\n    [else (len_log (cdr list1))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [else (max (string-length (first list1)) (len_log (rest list1)))]))\n",
    "  (cond [(null? list1) 0]\n        [(string&gt;? (car list1) (car (cdr list1))) (len_log (cdr list1))]\n        [else (len_log (cdr list1))]))\n</code>\nI am getting an error:\n<code>string&gt;?: expects type &lt;string&gt; as 1st argument, given: \"hello\"; other arguments were: \"world\"\n</code>\nI am not sure what I am doing wrong.\n\n\nA:\n\nYou're trying to compare strings using <code>string&gt;?</code>, but you're not using it correctly. The function expects two arguments, and you're passing it a list of two elements.\nTry this instead:\n<code>(define (len_log list1)\n  (cond [(null? list1) 0]\n        [(string&gt;? (car list1) (cadr list1)) (len_log (cdr list1))]\n        [else (len_log (cdr list1))]))\n</code>\n",
    "  (cond\n    [(null? list1) 0]\n    [else (max (string-length (car list1)) (len_log (cdr list1)))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(> (string-length (first list1)) (len_log (rest list1)))\n     (string-length (first list1))]\n    [else (len_log (rest list1))]))\n",
    "  (apply max (map string-length list1)))\n",
    "  (cond\n    [(null? list1) 0]\n    [(> (string-length (car list1)) (len_log (cdr list1))) (string-length (car list1))]\n    [else (len_log (cdr list1))]))\n",
    "  (if (null? list1)\n      0\n      (max (string-length (car list1)) (len_log (cdr list1)))))\n",
    "  (cond\n    [(null? list1) 0]\n    [else (max (string-length (car list1)) (len_log (cdr list1)))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [else (max (string-length (first list1))\n               (len_log (rest list1)))]))\n",
    "  (cond\n    [(null? list1) 0]\n    [(> (string-length (car list1)) (len_log (cdr list1))) (string-length (car list1))]\n    [else (len_log (cdr list1))]))\n",
    "  (apply max (map string-length list1)))\n",
    "  (apply max (map string-length list1)))\n",
    "  (cond\n    [(null? list1) 0]\n    [(> (string-length (car list1)) (len_log (cdr list1)))\n     (string-length (car list1))]\n    [else (len_log (cdr list1))]))\n",
    "  (apply max (map string-length list1)))\n",
    "  (cond\n    [(empty? list1) 0]\n    [else\n     (max (string-length (first list1))\n          (len_log (rest list1)))]))\n",
    "  (apply max (map string-length list1)))\n",
    "  (define (len_log_iter list1 max)\n    (cond [(empty? list1) max]\n          [(> (string-length (first list1)) max) (len_log_iter (rest list1) (string-length (first list1)))]\n          [else (len_log_iter (rest list1) max)]))\n  (len_log_iter list1 0))\n",
    "  (apply max (map string-length list1)))\n",
    "  (cond\n    [(empty? list1) 0]\n    [else (max (string-length (first list1))\n               (len_log (rest list1)))]))\n",
    "  (apply max (map string-length list1)))\n",
    "  (define (len_log_helper list1 max)\n    (if (null? list1)\n        max\n        (if (&gt; (string-length (car list1)) max)\n            (len_log_helper (cdr list1) (string-length (car list1)))\n            (len_log_helper (cdr list1) max))))\n  (len_log_helper list1 0))\n",
    "  (cond\n    [(empty? list1) 0]\n    [else\n     (max (string-length (first list1))\n          (len_log (rest list1)))]))\n",
    "  (apply max (map string-length list1)))\n",
    "  (cond\n    [(empty? list1) 0]\n    [else\n     (max (string-length (first list1))\n          (len_log (rest list1)))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(> (string-length (first list1)) (len_log (rest list1)))\n     (string-length (first list1))]\n    [else (len_log (rest list1))]))\n",
    "  (apply max (map string-length list1)))\n",
    "  (cond\n    [(null? list1) 0]\n    [else\n     (max (string-length (car list1))\n          (len_log (cdr list1)))]))\n",
    "  (apply max (map string-length list1)))\n",
    "  (apply max (map string-length list1)))\n",
    "  (apply max (map string-length list1)))\n",
    "  (apply max (map string-length list1)))\n",
    "  (apply max (map string-length list1)))\n",
    "  (apply max (map string-length list1)))\n",
    "  (apply max (map string-length list1)))\n",
    "  (apply max (map string-length list1)))\n",
    "  (if (null? list1)\n      0\n      (max (string-length (car list1)) (len_log (cdr list1)))))\n",
    "  (cond\n    [(null? list1) 0]\n    [(> (string-length (car list1)) (len_log (cdr list1))) (string-length (car list1))]\n    [else (len_log (cdr list1))]))\n",
    "  (cond\n    [(null? list1) 0]\n    [(> (string-length (car list1)) (len_log (cdr list1))) (string-length (car list1))]\n    [else (len_log (cdr list1))]))\n",
    "  (apply max (map string-length list1)))\n",
    "  (if (null? list1)\n      0\n      (max (string-length (car list1))\n           (len_log (cdr list1)))))\n",
    "  (apply max (map string-length list1)))\n",
    "  (apply max (map string-length list1)))\n",
    "  (cond\n    [(empty? list1) 0]\n    [else (max (string-length (first list1)) (len_log (rest list1)))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [else\n     (max (string-length (first list1))\n          (len_log (rest list1)))]))\n",
    "  (cond\n    [(null? list1) 0]\n    [(> (string-length (car list1)) (len_log (cdr list1))) (string-length (car list1))]\n    [else (len_log (cdr list1))]))\n",
    "  (cond [(empty? list1) 0]\n        [else (max (string-length (first list1))\n                   (len_log (rest list1)))]))\n",
    "  (if (null? list1)\n      0\n      (max (string-length (car list1))\n           (len_log (cdr list1)))))\n",
    "  (if (null? list1)\n      0\n      (max (string-length (car list1)) (len_log (cdr list1)))))\n",
    "  (cond\n    [(empty? list1) 0]\n    [else (max (string-length (first list1)) (len_log (rest list1)))]))\n",
    "  (apply max (map string-length list1)))\n",
    "  (cond\n    [(empty? list1) 0]\n    [else\n     (max (string-length (first list1))\n          (len_log (rest list1)))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [else (max (string-length (first list1)) (len_log (rest list1)))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [else\n     (max (string-length (first list1))\n          (len_log (rest list1)))]))\n",
    "  (if (null? list1)\n      0\n      (max (string-length (car list1))\n           (len_log (cdr list1)))))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(> (string-length (first list1)) (len_log (rest list1)))\n     (string-length (first list1))]\n    [else (len_log (rest list1))]))\n",
    "  (apply max (map string-length list1)))\n",
    "  (if (null? list1)\n      0\n      (max (string-length (car list1))\n           (len_log (cdr list1)))))\n",
    "  (cond\n    [(empty? list1) 0]\n    [else (max (string-length (first list1)) (len_log (rest list1)))]))\n",
    "  (apply max (map string-length list1)))\n",
    "  (apply max (map string-length list1)))\n",
    "  (cond\n    [(null? list1) 0]\n    [(> (string-length (car list1)) (len_log (cdr list1)))\n     (string-length (car list1))]\n    [else (len_log (cdr list1))]))\n",
    "  (apply max (map string-length list1)))\n",
    "  (cond\n    [(empty? list1) 0]\n    [else\n     (max (string-length (first list1))\n          (len_log (rest list1)))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(> (string-length (first list1)) (len_log (rest list1)))\n     (string-length (first list1))]\n    [else (len_log (rest list1))]))\n",
    "  (apply max (map string-length list1)))\n",
    "  (if (null? list1)\n      0\n      (max (string-length (car list1))\n           (len_log (cdr list1)))))\n",
    "  (cond\n    [(empty? list1) 0]\n    [else (max (string-length (first list1)) (len_log (rest list1)))]))\n",
    "  (if (null? list1)\n      0\n      (max (string-length (car list1))\n           (len_log (cdr list1)))))\n",
    "  (cond\n    [(empty? list1) 0]\n    [else (max (string-length (first list1)) (len_log (rest list1)))]))\n",
    "  (if (null? list1)\n      0\n      (max (string-length (car list1))\n           (len_log (cdr list1)))))\n",
    "  (define (len_log_aux list1 max)\n    (cond ((null? list1) max)\n          ((&gt; (string-length (car list1)) max)\n           (len_log_aux (cdr list1) (string-length (car list1))))\n          (else (len_log_aux (cdr list1) max))))\n  (len_log_aux list1 0))\n",
    "  (cond\n    [(null? list1) 0]\n    [else (max (string-length (car list1)) (len_log (cdr list1)))]))\n",
    "  (cond\n    [(null? list1) 0]\n    [(> (string-length (car list1)) (len_log (cdr list1))) (string-length (car list1))]\n    [else (len_log (cdr list1))]))\n",
    "  (if (null? list1)\n      0\n      (max (string-length (car list1)) (len_log (cdr list1)))))\n",
    "  (if (null? list1)\n      0\n      (max (string-length (car list1)) (len_log (cdr list1)))))\n",
    "  (cond\n    [(empty? list1) 0]\n    [else (max (string-length (first list1)) (len_log (rest list1)))]))\n",
    "  (if (null? list1)\n      0\n      (max (string-length (car list1)) (len_log (cdr list1)))))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(> (length (first list1)) (len_log (rest list1))) (length (first list1))]\n    [else (len_log (rest list1))]))\n",
    "  (apply max (map string-length list1)))\n",
    "  (apply max (map string-length list1)))\n",
    "  (apply max (map string-length list1)))\n",
    "  (cond\n    [(empty? list1) 0]\n    [else (max (string-length (first list1))\n               (len_log (rest list1)))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(> (string-length (first list1)) (len_log (rest list1))) (string-length (first list1))]\n    [else (len_log (rest list1))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [else\n     (max (string-length (first list1))\n          (len_log (rest list1)))]))\n",
    "  (apply max (map string-length list1)))\n",
    "  (apply max (map string-length list1)))\n",
    "  (cond\n    [(null? list1) 0]\n    [(> (string-length (car list1)) (len_log (cdr list1)))\n     (string-length (car list1))]\n    [else (len_log (cdr list1))]))\n",
    "  (apply max (map string-length list1)))\n",
    "  (define (len_log_iter list1 max)\n    (cond\n      [(empty? list1) max]\n      [(> (string-length (first list1)) max)\n       (len_log_iter (rest list1) (string-length (first list1)))]\n      [else (len_log_iter (rest list1) max)]))\n  (len_log_iter list1 0))\n",
    "  (cond\n    [(null? list1) 0]\n    [(> (length (car list1)) (len_log (cdr list1))) (length (car list1))]\n    [else (len_log (cdr list1))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [else\n     (max (string-length (first list1))\n          (len_log (rest list1)))]))\n",
    "  (apply max (map string-length list1)))\n",
    "  (cond\n    [(empty? list1) 0]\n    [else (max (string-length (first list1)) (len_log (rest list1)))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(> (length (first list1)) (len_log (rest list1))) (length (first list1))]\n    [else (len_log (rest list1))]))\n",
    "  (apply max (map string-length list1)))\n",
    "  (cond\n    [(null? list1) 0]\n    [(> (string-length (car list1)) (len_log (cdr list1)))\n     (string-length (car list1))]\n    [else (len_log (cdr list1))]))\n",
    "  (cond [(empty? list1) 0]\n        [else (max (string-length (first list1))\n                   (len_log (rest list1)))]))\n",
    "  (apply max (map string-length list1)))\n",
    "  (apply max (map string-length list1)))\n",
    "  (cond\n    [(empty? list1) 0]\n    [else (max (string-length (first list1)) (len_log (rest list1)))]))\n",
    "  (cond [(empty? list1) 0]\n        [(> (string-length (first list1)) (len_log (rest list1)))\n         (string-length (first list1))]\n        [else (len_log (rest list1))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [else (max (len_log (rest list1)) (string-length (first list1)))]))\n",
    "  (apply max (map string-length list1)))\n",
    "  (cond\n    [(null? list1) 0]\n    [else (max (string-length (car list1)) (len_log (cdr list1)))]))\n",
    "  (cond\n    [(null? list1) 0]\n    [else (max (string-length (car list1)) (len_log (cdr list1)))]))\n",
    "  (apply max (map string-length list1)))\n",
    "  (apply max (map string-length list1)))\n",
    "  (cond\n    [(empty? list1) 0]\n    [else\n     (max (string-length (first list1)) (len_log (rest list1)))]))\n",
    "  (cond\n    [(null? list1) 0]\n    [(> (string-length (car list1)) (len_log (cdr list1))) (string-length (car list1))]\n    [else (len_log (cdr list1))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [else (max (string-length (first list1)) (len_log (rest list1)))]))\n",
    "  (cond\n    [(null? list1) 0]\n    [(> (string-length (car list1)) (len_log (cdr list1)))\n     (string-length (car list1))]\n    [else (len_log (cdr list1))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(> (string-length (first list1)) (len_log (rest list1))) (string-length (first list1))]\n    [else (len_log (rest list1))]))\n",
    "  (if (null? list1)\n      0\n      (max (string-length (car list1))\n           (len_log (cdr list1)))))\n",
    "  (apply max (map string-length list1)))\n",
    "  (if (null? list1)\n      0\n      (max (string-length (car list1))\n           (len_log (cdr list1)))))\n",
    "  (cond\n    [(empty? list1) 0]\n    [else (max (string-length (first list1)) (len_log (rest list1)))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [else (max (string-length (first list1)) (len_log (rest list1)))]))\n",
    "  (apply max (map string-length list1)))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(> (string-length (first list1)) (len_log (rest list1)))\n     (string-length (first list1))]\n    [else (len_log (rest list1))]))\n",
    "  (apply max (map string-length list1)))\n",
    "  (if (null? list1)\n      0\n      (max (string-length (car list1)) (len_log (cdr list1)))))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(> (string-length (first list1)) (len_log (rest list1)))\n     (string-length (first list1))]\n    [else (len_log (rest list1))]))\n",
    "  (apply max (map string-length list1)))\n",
    "  (apply max (map string-length list1)))\n",
    "  (cond [(empty? list1) 0]\n        [else (max (string-length (first list1))\n                   (len_log (rest list1)))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(> (string-length (first list1)) (len_log (rest list1))) (string-length (first list1))]\n    [else (len_log (rest list1))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(> (string-length (first list1)) (len_log (rest list1)))\n     (string-length (first list1))]\n    [else (len_log (rest list1))]))\n",
    "  (apply max (map string-length list1)))\n",
    "  (apply max (map string-length list1)))\n",
    "  (cond\n    [(null? list1) 0]\n    [(> (string-length (car list1)) (len_log (cdr list1))) (string-length (car list1))]\n    [else (len_log (cdr list1))]))\n",
    "  (apply max (map string-length list1)))\n",
    "  (cond\n    [(empty? list1) 0]\n    [else\n     (max (string-length (first list1))\n          (len_log (rest list1)))]))\n",
    "  (cond\n    [(null? list1) 0]\n    [(&gt; (string-length (car list1)) (len_log (cdr list1)))\n     (string-length (car list1))]\n    [else (len_log (cdr list1))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [else (max (string-length (first list1)) (len_log (rest list1)))]))\n",
    "  (define (len_log_iter list1 max)\n    (cond [(empty? list1) max]\n          [(> (string-length (first list1)) max)\n           (len_log_iter (rest list1) (string-length (first list1)))]\n          [else (len_log_iter (rest list1) max)]))\n  (len_log_iter list1 0))\n",
    "  (cond\n    [(null? list1) 0]\n    [else (max (string-length (car list1)) (len_log (cdr list1)))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [else\n     (max (string-length (first list1))\n          (len_log (rest list1)))]))\n",
    "  (apply max (map string-length list1)))\n",
    "  (define (len_log_iter list1 max)\n    (cond ((null? list1) max)\n          ((> (string-length (car list1)) max)\n           (len_log_iter (cdr list1) (string-length (car list1))))\n          (else (len_log_iter (cdr list1) max))))\n  (len_log_iter list1 0))\n",
    "  (cond\n    [(null? list1) 0]\n    [(> (string-length (car list1)) (len_log (cdr list1))) (string-length (car list1))]\n    [else (len_log (cdr list1))]))\n",
    "  (cond [(empty? list1) 0]\n        [else (max (string-length (first list1))\n                   (len_log (rest list1)))]))\n",
    "  (if (null? list1)\n      0\n      (max (string-length (car list1))\n           (len_log (cdr list1)))))\n",
    "  (if (null? list1)\n      0\n      (max (string-length (car list1)) (len_log (cdr list1)))))\n",
    "  (cond\n    [(empty? list1) 0]\n    [else\n     (max (string-length (first list1))\n          (len_log (rest list1)))]))\n",
    "  (apply max (map string-length list1)))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(> (string-length (first list1)) (len_log (rest list1)))\n     (string-length (first list1))]\n    [else (len_log (rest list1))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [else\n     (max (string-length (first list1))\n          (len_log (rest list1)))]))\n",
    "  (apply max (map string-length list1)))\n",
    "  (apply max (map string-length list1)))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(> (string-length (first list1)) (len_log (rest list1)))\n     (string-length (first list1))]\n    [else (len_log (rest list1))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [else (max (string-length (first list1)) (len_log (rest list1)))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(> (string-length (first list1)) (len_log (rest list1))) (string-length (first list1))]\n    [else (len_log (rest list1))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(> (string-length (first list1)) (len_log (rest list1)))\n     (string-length (first list1))]\n    [else (len_log (rest list1))]))\n",
    "  (apply max (map string-length list1)))\n",
    "  (apply max (map string-length list1)))\n",
    "  (apply max (map string-length list1)))\n",
    "  (apply max (map string-length list1)))\n",
    "  (apply max (map string-length list1)))\n",
    "  (cond\n    [(empty? list1) 0]\n    [else (max (string-length (first list1)) (len_log (rest list1)))]))\n",
    "  (if (null? list1)\n      0\n      (max (string-length (car list1))\n           (len_log (cdr list1)))))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(> (string-length (first list1)) (len_log (rest list1))) (string-length (first list1))]\n    [else (len_log (rest list1))]))\n",
    "  (apply max (map string-length list1)))\n",
    "  (apply max (map string-length list1)))\n",
    "  (apply max (map string-length list1)))\n",
    "  (cond\n    [(empty? list1) 0]\n    [else\n     (max (string-length (first list1))\n          (len_log (rest list1)))]))\n",
    "  (apply max (map string-length list1)))\n",
    "  (if (null? list1)\n      0\n      (max (string-length (car list1)) (len_log (cdr list1)))))\n",
    "  (cond\n    [(null? list1) 0]\n    [else (max (string-length (car list1)) (len_log (cdr list1)))]))\n",
    "  (apply max (map string-length list1)))\n",
    "  (apply max (map string-length list1)))\n"
  ]
}