{
  "name": "mbpp_730_consecutive_duplicates",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to remove consecutive duplicates of a given list.\n(define (consecutive_duplicates nums)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_730_consecutive_duplicates.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list 0 1 2 3 4 5 6 7 8 9 4))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list 10 15 19 18 17 26 17 18 10))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list \"a\" \"b\" \"c\" \"d\"))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\" \"a\" \"a\")) (list \"a\" \"b\" \"c\" \"d\" \"a\"))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond [(empty? nums) empty]\n        [(empty? (rest nums)) nums]\n        [(= (first nums) (second nums)) (consecutive_duplicates (rest nums))]\n        [else (cons (first nums) (consecutive_duplicates (rest nums)))]))\n",
    "  (cond [(empty? nums) empty]\n        [(empty? (rest nums)) nums]\n        [(= (first nums) (second nums)) (consecutive_duplicates (rest nums))]\n        [else (cons (first nums) (consecutive_duplicates (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(empty? (rest nums)) nums]\n    [else\n     (cond\n       [(= (first nums) (second nums))\n        (consecutive_duplicates (rest nums))]\n       [else\n        (cons (first nums)\n              (consecutive_duplicates (rest nums)))])]))\n",
    "  (cond\n    [(null? nums) '()]\n    [(null? (cdr nums)) nums]\n    [(equal? (car nums) (cadr nums)) (consecutive_duplicates (cdr nums))]\n    [else (cons (car nums) (consecutive_duplicates (cdr nums)))]))\n",
    "  (cond [(empty? nums) empty]\n        [(empty? (rest nums)) nums]\n        [(= (first nums) (second nums)) (consecutive_duplicates (rest nums))]\n        [else (cons (first nums) (consecutive_duplicates (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(empty? (rest nums)) nums]\n    [else\n     (if (equal? (first nums) (second nums))\n         (consecutive_duplicates (rest nums))\n         (cons (first nums) (consecutive_duplicates (rest nums))))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(empty? (rest nums)) nums]\n    [(= (first nums) (second nums)) (consecutive_duplicates (rest nums))]\n    [else (cons (first nums) (consecutive_duplicates (rest nums)))]))\n",
    "  (cond [(empty? nums) empty]\n        [(empty? (rest nums)) nums]\n        [(= (first nums) (second nums)) (consecutive_duplicates (rest nums))]\n        [else (cons (first nums) (consecutive_duplicates (rest nums)))]))\n",
    "  (cond\n    [(null? nums) '()]\n    [(null? (cdr nums)) nums]\n    [(equal? (car nums) (cadr nums)) (consecutive_duplicates (cdr nums))]\n    [else (cons (car nums) (consecutive_duplicates (cdr nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(empty? (rest nums)) nums]\n    [else\n     (cond\n       [(equal? (first nums) (second nums))\n        (consecutive_duplicates (rest nums))]\n       [else\n        (cons (first nums) (consecutive_duplicates (rest nums)))])]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(empty? (rest nums)) nums]\n    [else\n     (cond\n       [(= (first nums) (second nums))\n        (consecutive_duplicates (rest nums))]\n       [else\n        (cons (first nums)\n              (consecutive_duplicates (rest nums)))])]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(empty? (rest nums)) nums]\n    [else\n     (if (= (first nums) (second nums))\n         (consecutive_duplicates (rest nums))\n         (cons (first nums) (consecutive_duplicates (rest nums))))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(empty? (rest nums)) nums]\n    [else\n     (cond\n       [(= (first nums) (second nums))\n        (consecutive_duplicates (rest nums))]\n       [else\n        (cons (first nums) (consecutive_duplicates (rest nums)))])]))\n",
    "  (cond [(empty? nums) empty]\n        [(= (first nums) (second nums)) (consecutive_duplicates (rest nums))]\n        [else (cons (first nums) (consecutive_duplicates (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(empty? (rest nums)) nums]\n    [(= (first nums) (second nums)) (consecutive_duplicates (rest nums))]\n    [else (cons (first nums) (consecutive_duplicates (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(empty? (rest nums)) nums]\n    [(equal? (first nums) (second nums)) (consecutive_duplicates (rest nums))]\n    [else (cons (first nums) (consecutive_duplicates (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(empty? (rest nums)) nums]\n    [(= (first nums) (second nums)) (consecutive_duplicates (rest nums))]\n    [else (cons (first nums) (consecutive_duplicates (rest nums)))]))\n",
    "  (cond [(empty? nums) empty]\n        [(empty? (rest nums)) nums]\n        [(= (first nums) (second nums)) (consecutive_duplicates (rest nums))]\n        [else (cons (first nums) (consecutive_duplicates (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(empty? (rest nums)) nums]\n    [else\n     (cond\n       [(= (first nums) (second nums))\n        (consecutive_duplicates (rest nums))]\n       [else\n        (cons (first nums) (consecutive_duplicates (rest nums)))])]))\n",
    "  (if (null? nums)\n      '()\n      (if (null? (cdr nums))\n          nums\n          (if (= (car nums) (cadr nums))\n              (consecutive_duplicates (cdr nums))\n              (cons (car nums) (consecutive_duplicates (cdr nums)))))))\n"
  ]
}