{
  "name": "mbpp_270_sum_even_and_even_index",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to find the sum of even numbers at even positions of a list.\n(define (sum_even_and_even_index arr)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_270_sum_even_and_even_index.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_even_and_even_index))\n    (check-equal? (candidate (list 5 6 12 1 18 8)) 30)\n    (check-equal? (candidate (list 3 20 17 9 2 10 18 13 6 18)) 26)\n    (check-equal? (candidate (list 5 6 12 1)) 12)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let loop ([i 0] [acc 0])\n    (cond\n      [(empty? arr) acc]\n      [(even? i)\n       (if (even? (first arr))\n           (loop (+ i 1) (+ acc (first arr)))\n           (loop (+ i 1) acc))]\n      [else (loop (+ i 1) acc)])))\n",
    "  (let loop ([i 0] [sum 0])\n    (cond [(= i (length arr)) sum]\n          [(even? i) (if (even? (list-ref arr i))\n                        (loop (+ i 1) (+ sum (list-ref arr i)))\n                        (loop (+ i 1) sum))]\n          [else (loop (+ i 1) sum)])))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (&lt; i (length arr))\n        (if (and (even? i) (even? (vector-ref arr i)))\n            (loop (+ i 1) (+ sum (vector-ref arr i)))\n            (loop (+ i 1) sum))\n        sum)))\n",
    "  (let loop ([i 0] [acc 0])\n    (cond [(= i (length arr)) acc]\n          [(and (even? i) (even? (vector-ref arr i)))\n           (loop (+ i 1) (+ acc (vector-ref arr i)))]\n          [else (loop (+ i 1) acc)])))\n",
    "  (define (sum_even_and_even_index_helper arr i sum)\n    (cond\n      [(empty? arr) sum]\n      [(and (even? i) (even? (first arr))) (sum_even_and_even_index_helper (rest arr) (+ i 1) (+ sum (first arr)))]\n      [else (sum_even_and_even_index_helper (rest arr) (+ i 1) sum)]))\n  (sum_even_and_even_index_helper arr 0 0))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (define (is_even? n)\n    (= (modulo n 2) 0))\n  (define (sum_even_and_even_index_iter arr i sum)\n    (cond [(null? arr) sum]\n          [(and (is_even? i) (is_even? (car arr)))\n           (sum_even_and_even_index_iter (cdr arr) (+ i 1) (+ sum (car arr)))]\n          [else (sum_even_and_even_index_iter (cdr arr) (+ i 1) sum)]))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (define (sum_even_and_even_index_iter arr i sum)\n    (if (empty? arr)\n        sum\n        (if (and (even? i) (even? (first arr)))\n            (sum_even_and_even_index_iter (rest arr) (+ i 1) (+ sum (first arr)))\n            (sum_even_and_even_index_iter (rest arr) (+ i 1) sum))))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (define (sum_even_and_even_index_iter arr i sum)\n    (if (null? arr)\n        sum\n        (if (and (even? i) (even? (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ i 1) (+ sum (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ i 1) sum))))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (let loop ([i 0] [sum 0])\n    (cond\n      [(= i (length arr)) sum]\n      [(and (even? i) (even? (list-ref arr i))) (loop (+ i 1) (+ sum (list-ref arr i)))]\n      [else (loop (+ i 1) sum)])))\n",
    "  (let loop ([i 0] [sum 0])\n    (cond\n      [(= i (length arr)) sum]\n      [(and (= (remainder i 2) 0) (= (remainder (list-ref arr i) 2) 0))\n       (loop (+ i 1) (+ sum (list-ref arr i)))]\n      [else (loop (+ i 1) sum)])))\n",
    "  (define (sum_even_and_even_index_iter arr index sum)\n    (if (null? arr)\n        sum\n        (if (and (even? index) (even? (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ index 1) (+ sum (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ index 1) sum))))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (define (is_even? n)\n    (= (remainder n 2) 0))\n  (define (sum_even_and_even_index_iter arr i sum)\n    (if (null? arr)\n        sum\n        (if (and (is_even? i) (is_even? (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ i 1) (+ sum (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ i 1) sum))))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (let loop ([i 0] [sum 0])\n    (cond\n      [(= i (length arr)) sum]\n      [(and (even? i) (even? (list-ref arr i))) (loop (+ i 1) (+ sum (list-ref arr i)))]\n      [else (loop (+ i 1) sum)])))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(even? (first arr)) (+ (first arr) (sum_even_and_even_index (rest arr)))]\n    [else (sum_even_and_even_index (rest arr))]))\n",
    "  (let loop ((i 0) (sum 0))\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (define (sum_even_and_even_index_helper arr index)\n    (cond\n      [(empty? arr) 0]\n      [(even? index)\n       (if (even? (first arr))\n           (+ (first arr) (sum_even_and_even_index_helper (rest arr) (+ index 1)))\n           (sum_even_and_even_index_helper (rest arr) (+ index 1)))]\n      [else (sum_even_and_even_index_helper (rest arr) (+ index 1))]))\n  (sum_even_and_even_index_helper arr 0))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? (list-ref arr i)) (even? i))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n"
  ]
}