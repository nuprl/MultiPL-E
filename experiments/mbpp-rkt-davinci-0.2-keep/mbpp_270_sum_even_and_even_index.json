{
  "name": "mbpp_270_sum_even_and_even_index",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to find the sum of even numbers at even positions of a list.\n(define (sum_even_and_even_index arr)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_270_sum_even_and_even_index.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_even_and_even_index))\n    (check-equal? (candidate (list 5 6 12 1 18 8)) 30)\n    (check-equal? (candidate (list 3 20 17 9 2 10 18 13 6 18)) 26)\n    (check-equal? (candidate (list 5 6 12 1)) 12)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let loop ([i 0] [acc 0])\n    (cond\n      [(empty? arr) acc]\n      [(even? i)\n       (if (even? (first arr))\n           (loop (+ i 1) (+ acc (first arr)))\n           (loop (+ i 1) acc))]\n      [else (loop (+ i 1) acc)])))\n",
    "  (let loop ([i 0] [sum 0])\n    (cond [(= i (length arr)) sum]\n          [(even? i) (if (even? (list-ref arr i))\n                        (loop (+ i 1) (+ sum (list-ref arr i)))\n                        (loop (+ i 1) sum))]\n          [else (loop (+ i 1) sum)])))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (&lt; i (length arr))\n        (if (and (even? i) (even? (vector-ref arr i)))\n            (loop (+ i 1) (+ sum (vector-ref arr i)))\n            (loop (+ i 1) sum))\n        sum)))\n",
    "  (let loop ([i 0] [acc 0])\n    (cond [(= i (length arr)) acc]\n          [(and (even? i) (even? (vector-ref arr i)))\n           (loop (+ i 1) (+ acc (vector-ref arr i)))]\n          [else (loop (+ i 1) acc)])))\n",
    "  (define (sum_even_and_even_index_helper arr i sum)\n    (cond\n      [(empty? arr) sum]\n      [(and (even? i) (even? (first arr))) (sum_even_and_even_index_helper (rest arr) (+ i 1) (+ sum (first arr)))]\n      [else (sum_even_and_even_index_helper (rest arr) (+ i 1) sum)]))\n  (sum_even_and_even_index_helper arr 0 0))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (define (is_even? n)\n    (= (modulo n 2) 0))\n  (define (sum_even_and_even_index_iter arr i sum)\n    (cond [(null? arr) sum]\n          [(and (is_even? i) (is_even? (car arr)))\n           (sum_even_and_even_index_iter (cdr arr) (+ i 1) (+ sum (car arr)))]\n          [else (sum_even_and_even_index_iter (cdr arr) (+ i 1) sum)]))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (define (sum_even_and_even_index_iter arr i sum)\n    (if (empty? arr)\n        sum\n        (if (and (even? i) (even? (first arr)))\n            (sum_even_and_even_index_iter (rest arr) (+ i 1) (+ sum (first arr)))\n            (sum_even_and_even_index_iter (rest arr) (+ i 1) sum))))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (define (sum_even_and_even_index_iter arr i sum)\n    (if (null? arr)\n        sum\n        (if (and (even? i) (even? (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ i 1) (+ sum (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ i 1) sum))))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (let loop ([i 0] [sum 0])\n    (cond\n      [(= i (length arr)) sum]\n      [(and (even? i) (even? (list-ref arr i))) (loop (+ i 1) (+ sum (list-ref arr i)))]\n      [else (loop (+ i 1) sum)])))\n",
    "  (let loop ([i 0] [sum 0])\n    (cond\n      [(= i (length arr)) sum]\n      [(and (= (remainder i 2) 0) (= (remainder (list-ref arr i) 2) 0))\n       (loop (+ i 1) (+ sum (list-ref arr i)))]\n      [else (loop (+ i 1) sum)])))\n",
    "  (define (sum_even_and_even_index_iter arr index sum)\n    (if (null? arr)\n        sum\n        (if (and (even? index) (even? (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ index 1) (+ sum (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ index 1) sum))))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (define (is_even? n)\n    (= (remainder n 2) 0))\n  (define (sum_even_and_even_index_iter arr i sum)\n    (if (null? arr)\n        sum\n        (if (and (is_even? i) (is_even? (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ i 1) (+ sum (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ i 1) sum))))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (let loop ([i 0] [sum 0])\n    (cond\n      [(= i (length arr)) sum]\n      [(and (even? i) (even? (list-ref arr i))) (loop (+ i 1) (+ sum (list-ref arr i)))]\n      [else (loop (+ i 1) sum)])))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(even? (first arr)) (+ (first arr) (sum_even_and_even_index (rest arr)))]\n    [else (sum_even_and_even_index (rest arr))]))\n",
    "  (let loop ((i 0) (sum 0))\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (define (sum_even_and_even_index_helper arr index)\n    (cond\n      [(empty? arr) 0]\n      [(even? index)\n       (if (even? (first arr))\n           (+ (first arr) (sum_even_and_even_index_helper (rest arr) (+ index 1)))\n           (sum_even_and_even_index_helper (rest arr) (+ index 1)))]\n      [else (sum_even_and_even_index_helper (rest arr) (+ index 1))]))\n  (sum_even_and_even_index_helper arr 0))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? (list-ref arr i)) (even? i))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (define (even-index? i) (= (remainder i 2) 0))\n  (define (even? i) (= (remainder i 2) 0))\n  (define (sum-even-and-even-index arr i sum)\n    (cond ((= i (length arr)) sum)\n          ((and (even-index? i) (even? (list-ref arr i)))\n           (sum-even-and-even-index arr (+ i 1) (+ sum (list-ref arr i))))\n          (else (sum-even-and-even-index arr (+ i 1) sum))))\n  (sum-even-and-even-index arr 0 0))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (&lt; i (length arr))\n        (let ([val (list-ref arr i)])\n          (if (and (even? i) (even? val))\n              (loop (+ i 1) (+ sum val))\n              (loop (+ i 1) sum)))\n        sum)))\n",
    "  (define (sum_even_and_even_index_iter arr i sum)\n    (cond\n      [(empty? arr) sum]\n      [(even? i)\n       (sum_even_and_even_index_iter (rest arr) (+ i 1) (+ sum (first arr)))]\n      [else\n       (sum_even_and_even_index_iter (rest arr) (+ i 1) sum)]))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (let loop ((i 0) (sum 0))\n    (cond\n      [(= i (length arr)) sum]\n      [(and (even? i) (even? (vector-ref arr i))) (loop (+ i 1) (+ sum (vector-ref arr i)))]\n      [else (loop (+ i 1) sum)])))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (&lt; i (length arr))\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum))\n        sum)))\n",
    "  (foldl + 0 (filter even? (filter even? (range (length arr))))))\n",
    "  (define (sum_even_and_even_index_iter arr index sum)\n    (if (null? arr)\n        sum\n        (if (and (even? index) (even? (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ index 1) (+ sum (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ index 1) sum))))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(even? (first arr)) (+ (first arr) (sum_even_and_even_index (rest arr)))]\n    [else (sum_even_and_even_index (rest arr))]))\n",
    "  (let loop ((arr arr) (i 0) (sum 0))\n    (cond\n      [(empty? arr) sum]\n      [(even? i)\n       (if (even? (first arr))\n           (loop (rest arr) (+ i 1) (+ sum (first arr)))\n           (loop (rest arr) (+ i 1) sum))]\n      [else (loop (rest arr) (+ i 1) sum)])))\n",
    "  (define (sum_even_and_even_index_iter arr i sum)\n    (if (null? arr)\n        sum\n        (if (and (even? i) (even? (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ i 1) (+ sum (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ i 1) sum))))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (let loop ((i 0) (sum 0))\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (let loop ([i 0] [sum 0])\n    (cond\n      [(= i (length arr)) sum]\n      [(and (even? i) (even? (list-ref arr i))) (loop (+ i 1) (+ sum (list-ref arr i)))]\n      [else (loop (+ i 1) sum)])))\n",
    "  (define (helper arr acc index)\n    (if (null? arr)\n        acc\n        (if (and (even? index) (even? (car arr)))\n            (helper (cdr arr) (+ acc (car arr)) (+ index 1))\n            (helper (cdr arr) acc (+ index 1)))))\n  (helper arr 0 0))\n",
    "  (let loop ([i 0] [sum 0])\n    (cond\n      [(= i (length arr)) sum]\n      [(and (even? i) (even? (list-ref arr i))) (loop (+ i 1) (+ sum (list-ref arr i)))]\n      [else (loop (+ i 1) sum)])))\n",
    "  (let loop ((i 0) (sum 0) (arr arr))\n    (if (null? arr)\n        sum\n        (if (and (even? i) (even? (car arr)))\n            (loop (+ i 1) (+ sum (car arr)) (cdr arr))\n            (loop (+ i 1) sum (cdr arr))))))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (let ([val (list-ref arr i)])\n          (if (and (even? i) (even? val))\n              (loop (+ i 1) (+ sum val))\n              (loop (+ i 1) sum))))))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (let ([e (list-ref arr i)])\n          (if (and (even? e) (even? i))\n              (loop (+ i 1) (+ sum e))\n              (loop (+ i 1) sum))))))\n",
    "  (let loop ((i 0) (sum 0))\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (let loop ([i 0] [sum 0])\n    (cond\n      [(= i (length arr)) sum]\n      [(and (= (remainder i 2) 0) (= (remainder (list-ref arr i) 2) 0))\n       (loop (+ i 1) (+ sum (list-ref arr i)))]\n      [else (loop (+ i 1) sum)])))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (let loop ((i 0) (sum 0))\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (vector-ref arr i)))\n            (loop (+ i 1) (+ sum (vector-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (define (helper arr i sum)\n    (cond\n      [(empty? arr) sum]\n      [(even? i) (helper (rest arr) (+ i 1) (+ sum (first arr)))]\n      [else (helper (rest arr) (+ i 1) sum)]))\n  (helper arr 0 0))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (let ([val (list-ref arr i)])\n          (if (and (even? i) (even? val))\n              (loop (+ i 1) (+ sum val))\n              (loop (+ i 1) sum))))))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (&lt; i (length arr))\n        (if (and (even? i) (even? (vector-ref arr i)))\n            (loop (+ i 1) (+ sum (vector-ref arr i)))\n            (loop (+ i 1) sum))\n        sum)))\n",
    "  (define (sum_even_and_even_index_helper arr index)\n    (cond\n      [(empty? arr) 0]\n      [(and (even? index) (even? (first arr))) (+ (first arr) (sum_even_and_even_index_helper (rest arr) (+ index 1)))]\n      [else (sum_even_and_even_index_helper (rest arr) (+ index 1))]))\n  (sum_even_and_even_index_helper arr 0))\n",
    "  (let loop ([i 0] [acc 0])\n    (if (= i (length arr))\n        acc\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ acc (list-ref arr i)))\n            (loop (+ i 1) acc)))))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (&lt; i (length arr))\n        (if (and (even? i) (even? (vector-ref arr i)))\n            (loop (+ i 1) (+ sum (vector-ref arr i)))\n            (loop (+ i 1) sum))\n        sum)))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(even? (remainder (length arr) 2))\n     (+ (sum_even_and_even_index (rest arr))\n        (if (even? (first arr)) (first arr) 0))]\n    [else (sum_even_and_even_index (rest arr))]))\n",
    "  (foldl + 0 (filter even? (filter even? (enumerate arr)))))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(even? (first arr))\n     (+ (first arr) (sum_even_and_even_index (rest arr)))]\n    [else\n     (sum_even_and_even_index (rest arr))]))\n",
    "  (define (sum_even_and_even_index_iter arr index sum)\n    (cond ((null? arr) sum)\n          ((and (even? index) (even? (car arr)))\n           (sum_even_and_even_index_iter (cdr arr) (+ index 1) (+ sum (car arr))))\n          (else (sum_even_and_even_index_iter (cdr arr) (+ index 1) sum))))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (let loop ((i 0) (sum 0))\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (vector-ref arr i)))\n            (loop (+ i 1) (+ sum (vector-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (let loop ([arr arr]\n             [sum 0]\n             [index 0])\n    (cond [(empty? arr) sum]\n          [(and (even? index) (even? (first arr)))\n           (loop (rest arr) (+ sum (first arr)) (+ index 1))]\n          [else (loop (rest arr) sum (+ index 1))])))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(even? (remainder (length arr) 2))\n     (+ (if (even? (first arr)) (first arr) 0)\n        (sum_even_and_even_index (rest arr)))]\n    [else (sum_even_and_even_index (rest arr))]))\n",
    "  (define (sum_even_and_even_index_iter arr i sum)\n    (cond\n      [(empty? arr) sum]\n      [(and (even? i) (even? (first arr)))\n       (sum_even_and_even_index_iter (rest arr) (+ i 1) (+ sum (first arr)))]\n      [else (sum_even_and_even_index_iter (rest arr) (+ i 1) sum)]))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (define (sum_even_and_even_index_iter arr i sum)\n    (if (null? arr)\n        sum\n        (if (and (even? i) (even? (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ i 1) (+ sum (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ i 1) sum))))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (let loop ([i 0] [sum 0])\n    (cond [(= i (length arr)) sum]\n          [(and (even? i) (even? (list-ref arr i))) (loop (+ i 1) (+ sum (list-ref arr i)))]\n          [else (loop (+ i 1) sum)])))\n",
    "  (let loop ([i 0] [sum 0])\n    (cond\n      [(= i (length arr)) sum]\n      [(and (even? i) (even? (list-ref arr i))) (loop (+ i 1) (+ sum (list-ref arr i)))]\n      [else (loop (+ i 1) sum)])))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(even? (remainder (length arr) 2))\n     (+ (if (even? (first arr)) (first arr) 0)\n        (sum_even_and_even_index (rest arr)))]\n    [else (sum_even_and_even_index (rest arr))]))\n",
    "  (define (helper arr index sum)\n    (if (null? arr)\n        sum\n        (if (and (even? index) (even? (car arr)))\n            (helper (cdr arr) (+ index 1) (+ sum (car arr)))\n            (helper (cdr arr) (+ index 1) sum))))\n  (helper arr 0 0))\n",
    "  (define (sum_even_and_even_index_iter arr i sum)\n    (cond ((null? arr) sum)\n          ((and (even? i) (even? (car arr)))\n           (sum_even_and_even_index_iter (cdr arr) (+ i 1) (+ sum (car arr))))\n          (else (sum_even_and_even_index_iter (cdr arr) (+ i 1) sum))))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(even? (first arr)) (+ (first arr) (sum_even_and_even_index (rest arr)))]\n    [else (sum_even_and_even_index (rest arr))]))\n",
    "  (let loop ((arr arr)\n             (sum 0)\n             (index 0))\n    (if (null? arr)\n        sum\n        (if (and (even? index) (even? (car arr)))\n            (loop (cdr arr) (+ sum (car arr)) (+ index 1))\n            (loop (cdr arr) sum (+ index 1))))))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (let loop ((i 0) (sum 0) (arr arr))\n    (if (null? arr)\n        sum\n        (if (and (= (modulo i 2) 0) (= (modulo (car arr) 2) 0))\n            (loop (+ i 1) (+ sum (car arr)) (cdr arr))\n            (loop (+ i 1) sum (cdr arr))))))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (define (sum_even_and_even_index_iter arr i sum)\n    (if (null? arr)\n        sum\n        (if (and (even? i) (even? (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ i 1) (+ sum (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ i 1) sum))))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (let loop ((i 0) (sum 0))\n    (cond\n      [(> i (sub1 (length arr))) sum]\n      [(and (even? i) (even? (vector-ref arr i))) (loop (add1 i) (+ sum (vector-ref arr i)))]\n      [else (loop (add1 i) sum)])))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (define (sum_even_and_even_index_iter arr i sum)\n    (cond\n      [(empty? arr) sum]\n      [(and (even? i) (even? (first arr))) (sum_even_and_even_index_iter (rest arr) (+ i 1) (+ sum (first arr)))]\n      [else (sum_even_and_even_index_iter (rest arr) (+ i 1) sum)]))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (define (sum_even_and_even_index_iter arr index sum)\n    (cond\n      [(empty? arr) sum]\n      [(and (even? index) (even? (first arr)))\n       (sum_even_and_even_index_iter (rest arr) (+ index 1) (+ sum (first arr)))]\n      [else (sum_even_and_even_index_iter (rest arr) (+ index 1) sum)]))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (let loop ([i 0] [sum 0])\n    (cond [(= i (length arr)) sum]\n          [(and (even? i) (even? (vector-ref arr i))) (loop (+ i 1) (+ sum (vector-ref arr i)))]\n          [else (loop (+ i 1) sum)])))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(even? (remainder (length arr) 2))\n     (+ (if (even? (first arr)) (first arr) 0)\n        (sum_even_and_even_index (rest arr)))]\n    [else (sum_even_and_even_index (rest arr))]))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(even? (car arr)) (+ (car arr) (sum_even_and_even_index (cdr arr)))]\n    [else (sum_even_and_even_index (cdr arr))]))\n",
    "  (let loop ([i 0] [acc 0])\n    (if (= i (length arr))\n        acc\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ acc (list-ref arr i)))\n            (loop (+ i 1) acc)))))\n",
    "  (let loop ([arr arr] [sum 0] [i 0])\n    (cond\n      [(empty? arr) sum]\n      [(and (even? i) (even? (first arr))) (loop (rest arr) (+ sum (first arr)) (+ i 1))]\n      [else (loop (rest arr) sum (+ i 1))])))\n",
    "  (define (sum_even_and_even_index_iter arr i sum)\n    (if (null? arr)\n        sum\n        (if (and (even? i) (even? (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ i 1) (+ sum (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ i 1) sum))))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (define (helper arr index sum)\n    (cond\n      [(empty? arr) sum]\n      [(and (even? index) (even? (first arr))) (helper (rest arr) (+ index 1) (+ sum (first arr)))]\n      [else (helper (rest arr) (+ index 1) sum)]))\n  (helper arr 0 0))\n",
    "  (let loop ((i 0) (sum 0))\n    (if (= i (length arr))\n        sum\n        (let ((val (list-ref arr i)))\n          (if (and (even? i) (even? val))\n              (loop (+ i 1) (+ sum val))\n              (loop (+ i 1) sum))))))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (define (sum_even_and_even_index_iter arr i sum)\n    (if (null? arr)\n        sum\n        (if (and (even? i) (even? (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ i 1) (+ sum (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ i 1) sum))))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(even? (remainder (length arr) 2))\n     (+ (if (even? (car arr)) (car arr) 0)\n        (sum_even_and_even_index (cdr arr)))]\n    [else (sum_even_and_even_index (cdr arr))]))\n",
    "  (define (sum_even_and_even_index_helper arr i sum)\n    (if (null? arr)\n        sum\n        (if (and (even? i) (even? (car arr)))\n            (sum_even_and_even_index_helper (cdr arr) (+ i 1) (+ sum (car arr)))\n            (sum_even_and_even_index_helper (cdr arr) (+ i 1) sum))))\n  (sum_even_and_even_index_helper arr 0 0))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(even? (first arr)) (+ (first arr) (sum_even_and_even_index (rest arr)))]\n    [else (sum_even_and_even_index (rest arr))]))\n",
    "  (let loop ([i 0] [acc 0])\n    (cond\n      [(= i (length arr)) acc]\n      [(and (even? i) (even? (vector-ref arr i)))\n       (loop (+ i 1) (+ acc (vector-ref arr i)))]\n      [else (loop (+ i 1) acc)])))\n",
    "  (let loop ([i 0] [acc 0])\n    (if (= i (length arr))\n        acc\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ acc (list-ref arr i)))\n            (loop (+ i 1) acc)))))\n",
    "  (define (sum_even_and_even_index_helper arr index)\n    (if (null? arr)\n        0\n        (if (and (even? index) (even? (car arr)))\n            (+ (car arr) (sum_even_and_even_index_helper (cdr arr) (+ index 1)))\n            (sum_even_and_even_index_helper (cdr arr) (+ index 1)))))\n  (sum_even_and_even_index_helper arr 0))\n",
    "  (define (sum_even_and_even_index_iter arr i sum)\n    (cond\n      [(empty? arr) sum]\n      [(even? i) (sum_even_and_even_index_iter (rest arr) (+ i 1) (+ sum (first arr)))]\n      [else (sum_even_and_even_index_iter (rest arr) (+ i 1) sum)]))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(even? (remainder (length arr) 2))\n     (+ (if (even? (first arr)) (first arr) 0)\n        (sum_even_and_even_index (rest arr)))]\n    [else (sum_even_and_even_index (rest arr))]))\n",
    "  (define (sum_even_and_even_index_helper arr index)\n    (if (null? arr)\n        0\n        (if (and (even? index) (even? (car arr)))\n            (+ (car arr) (sum_even_and_even_index_helper (cdr arr) (+ index 1)))\n            (sum_even_and_even_index_helper (cdr arr) (+ index 1)))))\n  (sum_even_and_even_index_helper arr 0))\n",
    "  (let loop ((i 0) (sum 0))\n    (cond\n      [(= i (length arr)) sum]\n      [(and (even? i) (even? (list-ref arr i))) (loop (+ i 1) (+ sum (list-ref arr i)))]\n      [else (loop (+ i 1) sum)])))\n",
    "  (let loop ((i 0) (sum 0))\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (define (sum_even_and_even_index_helper arr index)\n    (if (null? arr)\n        0\n        (if (and (even? index) (even? (car arr)))\n            (+ (car arr) (sum_even_and_even_index_helper (cdr arr) (+ index 1)))\n            (sum_even_and_even_index_helper (cdr arr) (+ index 1)))))\n  (sum_even_and_even_index_helper arr 0))\n",
    "  (accumulate + 0\n              (filter even?\n                      (filter even?\n                              (enumerate arr)))))\n",
    "  (define (helper arr index sum)\n    (if (null? arr)\n        sum\n        (if (and (even? index) (even? (car arr)))\n            (helper (cdr arr) (+ index 1) (+ sum (car arr)))\n            (helper (cdr arr) (+ index 1) sum))))\n  (helper arr 0 0))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(even? (remainder (length arr) 2))\n     (+ (if (even? (first arr)) (first arr) 0)\n        (sum_even_and_even_index (rest arr)))]\n    [else (sum_even_and_even_index (rest arr))]))\n",
    "  (let loop ((i 0) (sum 0))\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (define (sum_even_and_even_index_iter arr index sum)\n    (if (null? arr)\n        sum\n        (if (and (even? index) (even? (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ index 1) (+ sum (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ index 1) sum))))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (define (sum_even_and_even_index_helper arr index)\n    (cond\n      [(empty? arr) 0]\n      [(and (even? index) (even? (first arr))) (+ (first arr) (sum_even_and_even_index_helper (rest arr) (+ index 1)))]\n      [else (sum_even_and_even_index_helper (rest arr) (+ index 1))]))\n  (sum_even_and_even_index_helper arr 0))\n",
    "  (let loop ((arr arr)\n             (index 0)\n             (sum 0))\n    (if (null? arr)\n        sum\n        (if (and (even? index) (even? (car arr)))\n            (loop (cdr arr) (+ index 1) (+ sum (car arr)))\n            (loop (cdr arr) (+ index 1) sum)))))\n",
    "  (define (sum_even_and_even_index_iter arr i sum)\n    (if (null? arr)\n        sum\n        (if (and (even? i) (even? (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ i 1) (+ sum (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ i 1) sum))))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(even? (second arr)) (+ (first arr) (sum_even_and_even_index (rest (rest arr))))]\n    [else (sum_even_and_even_index (rest arr))]))\n",
    "  (let loop ([i 0] [sum 0])\n    (cond\n      [(= i (length arr)) sum]\n      [(and (even? i) (even? (vector-ref arr i)))\n       (loop (+ i 1) (+ sum (vector-ref arr i)))]\n      [else (loop (+ i 1) sum)])))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (define (sum_even_and_even_index_iter arr i sum)\n    (if (null? arr)\n        sum\n        (if (and (even? i) (even? (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ i 1) (+ sum (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ i 1) sum))))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (let loop ((i 0) (sum 0) (arr arr))\n    (if (null? arr)\n        sum\n        (if (and (even? i) (even? (car arr)))\n            (loop (+ i 1) (+ sum (car arr)) (cdr arr))\n            (loop (+ i 1) sum (cdr arr))))))\n",
    "  (let loop ([arr arr] [index 0] [sum 0])\n    (cond\n      [(empty? arr) sum]\n      [(even? index)\n       (if (even? (first arr))\n           (loop (rest arr) (+ index 1) (+ sum (first arr)))\n           (loop (rest arr) (+ index 1) sum))]\n      [else (loop (rest arr) (+ index 1) sum)])))\n",
    "  (let loop ([i 0] [sum 0])\n    (cond\n      [(= i (length arr)) sum]\n      [(and (even? i) (even? (vector-ref arr i))) (loop (+ i 1) (+ sum (vector-ref arr i)))]\n      [else (loop (+ i 1) sum)])))\n",
    "  (let loop ((i 0) (sum 0))\n    (if (&lt; i (length arr))\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum))\n        sum)))\n",
    "  (define (sum_even_and_even_index_helper arr i sum)\n    (if (null? arr)\n        sum\n        (if (and (even? i) (even? (car arr)))\n            (sum_even_and_even_index_helper (cdr arr) (+ i 1) (+ sum (car arr)))\n            (sum_even_and_even_index_helper (cdr arr) (+ i 1) sum))))\n  (sum_even_and_even_index_helper arr 0 0))\n",
    "  (define (helper arr index sum)\n    (if (null? arr)\n        sum\n        (if (and (even? index) (even? (car arr)))\n            (helper (cdr arr) (+ index 1) (+ sum (car arr)))\n            (helper (cdr arr) (+ index 1) sum))))\n  (helper arr 0 0))\n",
    "  (let loop ([arr arr] [sum 0] [index 0])\n    (if (null? arr)\n        sum\n        (if (and (= (remainder index 2) 0) (= (remainder (car arr) 2) 0))\n            (loop (cdr arr) (+ sum (car arr)) (+ index 1))\n            (loop (cdr arr) sum (+ index 1))))))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (define (sum-even-and-even-index-helper arr i sum)\n    (cond\n      [(empty? arr) sum]\n      [(and (even? i) (even? (first arr))) (sum-even-and-even-index-helper (rest arr) (+ i 1) (+ sum (first arr)))]\n      [else (sum-even-and-even-index-helper (rest arr) (+ i 1) sum)]))\n  (sum-even-and-even-index-helper arr 0 0))\n",
    "  (let loop ((arr arr) (i 0) (sum 0))\n    (cond ((null? arr) sum)\n          ((even? i) (loop (cdr arr) (+ i 1) (+ sum (car arr))))\n          (else (loop (cdr arr) (+ i 1) sum)))))\n",
    "  (define (sum_even_and_even_index_iter arr i sum)\n    (cond\n      [(empty? arr) sum]\n      [(and (even? i) (even? (first arr)))\n       (sum_even_and_even_index_iter (rest arr) (+ i 1) (+ sum (first arr)))]\n      [else (sum_even_and_even_index_iter (rest arr) (+ i 1) sum)]))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (define (sum_even_and_even_index_iter arr i sum)\n    (cond\n      [(empty? arr) sum]\n      [(and (even? i) (even? (first arr)))\n       (sum_even_and_even_index_iter (rest arr) (+ i 1) (+ sum (first arr)))]\n      [else (sum_even_and_even_index_iter (rest arr) (+ i 1) sum)]))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (define (helper arr index sum)\n    (cond [(empty? arr) sum]\n          [(and (even? index) (even? (first arr)))\n           (helper (rest arr) (+ index 1) (+ sum (first arr)))]\n          [else (helper (rest arr) (+ index 1) sum)]))\n  (helper arr 0 0))\n",
    "  (define (sum_even_and_even_index_iter arr sum i)\n    (if (null? arr)\n        sum\n        (if (and (even? i) (even? (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ sum (car arr)) (+ i 1))\n            (sum_even_and_even_index_iter (cdr arr) sum (+ i 1)))))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (let loop ([i 0] [sum 0])\n    (cond [(empty? arr) sum]\n          [(even? (first arr))\n           (if (even? i)\n               (loop (+ i 1) (+ sum (first arr)))\n               (loop (+ i 1) sum))]\n          [else (loop (+ i 1) sum)])))\n",
    "  (let loop ([i 0] [acc 0])\n    (if (= i (length arr))\n        acc\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ acc (list-ref arr i)))\n            (loop (+ i 1) acc)))))\n",
    "  (define (sum_even_and_even_index_iter arr i sum)\n    (if (null? arr)\n        sum\n        (if (and (even? i) (even? (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ i 1) (+ sum (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ i 1) sum))))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (define (is_even? n)\n    (= (modulo n 2) 0))\n  (define (sum_even_and_even_index_iter arr i acc)\n    (if (empty? arr)\n        acc\n        (if (and (is_even? i) (is_even? (first arr)))\n            (sum_even_and_even_index_iter (rest arr) (+ i 1) (+ acc (first arr)))\n            (sum_even_and_even_index_iter (rest arr) (+ i 1) acc))))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (define (sum_even_and_even_index_iter arr i sum)\n    (if (null? arr)\n        sum\n        (if (and (even? i) (even? (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ i 1) (+ sum (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ i 1) sum))))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (define (helper arr index sum)\n    (if (null? arr)\n        sum\n        (if (and (even? index) (even? (car arr)))\n            (helper (cdr arr) (+ index 1) (+ sum (car arr)))\n            (helper (cdr arr) (+ index 1) sum))))\n  (helper arr 0 0))\n",
    "  (define (is_even? n)\n    (= (remainder n 2) 0))\n  (define (sum_even_and_even_index_iter arr i sum)\n    (cond\n      [(empty? arr) sum]\n      [(and (is_even? i) (is_even? (first arr)))\n       (sum_even_and_even_index_iter (rest arr) (+ i 1) (+ sum (first arr)))]\n      [else (sum_even_and_even_index_iter (rest arr) (+ i 1) sum)]))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (define (helper arr index sum)\n    (if (null? arr)\n        sum\n        (if (and (even? index) (even? (car arr)))\n            (helper (cdr arr) (+ index 1) (+ sum (car arr)))\n            (helper (cdr arr) (+ index 1) sum))))\n  (helper arr 0 0))\n",
    "  (let loop ([i 0] [sum 0])\n    (cond [(= i (length arr)) sum]\n          [(and (even? i) (even? (list-ref arr i))) (loop (+ i 1) (+ sum (list-ref arr i)))]\n          [else (loop (+ i 1) sum)])))\n",
    "  (define (sum_even_and_even_index_iter arr i sum)\n    (if (null? arr)\n        sum\n        (if (and (even? i) (even? (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ i 1) (+ sum (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ i 1) sum))))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (let loop ((i 0) (sum 0))\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (apply + (filter even? (filter even? (range (length arr)))))\n  )\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (let ([x (list-ref arr i)])\n          (if (and (even? x) (even? i))\n              (loop (+ i 1) (+ sum x))\n              (loop (+ i 1) sum))))))\n",
    "  (define (sum_even_and_even_index_iter arr index sum)\n    (cond\n      [(empty? arr) sum]\n      [(and (even? index) (even? (first arr))) (sum_even_and_even_index_iter (rest arr) (+ index 1) (+ sum (first arr)))]\n      [else (sum_even_and_even_index_iter (rest arr) (+ index 1) sum)]))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (define (sum_even_and_even_index_iter arr index sum)\n    (cond\n      [(empty? arr) sum]\n      [(and (even? index) (even? (first arr)))\n       (sum_even_and_even_index_iter (rest arr) (+ index 1) (+ sum (first arr)))]\n      [else (sum_even_and_even_index_iter (rest arr) (+ index 1) sum)]))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (let loop ((i 0) (sum 0))\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (let loop ([arr arr] [sum 0] [index 0])\n    (cond [(empty? arr) sum]\n          [(and (even? (first arr)) (even? index)) (loop (rest arr) (+ sum (first arr)) (+ index 1))]\n          [else (loop (rest arr) sum (+ index 1))])))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (define (sum_even_and_even_index_helper arr i sum)\n    (cond\n      [(empty? arr) sum]\n      [(and (even? i) (even? (first arr)))\n       (sum_even_and_even_index_helper (rest arr) (+ i 1) (+ sum (first arr)))]\n      [else (sum_even_and_even_index_helper (rest arr) (+ i 1) sum)]))\n  (sum_even_and_even_index_helper arr 0 0))\n",
    "  (accumulate + 0 (filter even? (filter even? (enumerate arr)))))\n",
    "  (let loop ((i 0) (acc 0))\n    (cond ((= i (length arr)) acc)\n          ((and (even? i) (even? (vector-ref arr i)))\n           (loop (+ i 1) (+ acc (vector-ref arr i))))\n          (else (loop (+ i 1) acc)))))\n",
    "  (let loop ((i 0) (sum 0))\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (define (sum_even_and_even_index_iter arr i sum)\n    (cond [(empty? arr) sum]\n          [(and (even? i) (even? (first arr)))\n           (sum_even_and_even_index_iter (rest arr) (+ i 1) (+ sum (first arr)))]\n          [else (sum_even_and_even_index_iter (rest arr) (+ i 1) sum)]))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(even? (remainder (length arr) 2))\n     (+ (sum_even_and_even_index (rest arr))\n        (if (even? (first arr)) (first arr) 0))]\n    [else (sum_even_and_even_index (rest arr))]))\n",
    "  (define (helper arr index sum)\n    (cond\n      [(empty? arr) sum]\n      [(and (even? index) (even? (first arr))) (helper (rest arr) (+ index 1) (+ sum (first arr)))]\n      [else (helper (rest arr) (+ index 1) sum)]))\n  (helper arr 0 0))\n",
    "  (define (helper arr index sum)\n    (if (null? arr)\n        sum\n        (if (and (even? index) (even? (car arr)))\n            (helper (cdr arr) (+ index 1) (+ sum (car arr)))\n            (helper (cdr arr) (+ index 1) sum))))\n  (helper arr 0 0))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (let loop ([arr arr] [sum 0] [index 0])\n    (if (null? arr)\n        sum\n        (if (and (even? index) (even? (car arr)))\n            (loop (cdr arr) (+ sum (car arr)) (+ index 1))\n            (loop (cdr arr) sum (+ index 1))))))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (let ([val (list-ref arr i)])\n          (if (and (even? i) (even? val))\n              (loop (+ i 1) (+ sum val))\n              (loop (+ i 1) sum))))))\n",
    "  (let loop ([i 0] [sum 0])\n    (cond\n      [(= i (length arr)) sum]\n      [(and (= (modulo i 2) 0) (= (modulo (list-ref arr i) 2) 0))\n       (loop (+ i 1) (+ sum (list-ref arr i)))]\n      [else (loop (+ i 1) sum)])))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (let loop ((i 0) (sum 0))\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (define (sum_even_and_even_index_iter arr i sum)\n    (cond\n      [(empty? arr) sum]\n      [(and (even? i) (even? (first arr))) (sum_even_and_even_index_iter (rest arr) (+ i 1) (+ sum (first arr)))]\n      [else (sum_even_and_even_index_iter (rest arr) (+ i 1) sum)]))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (let loop ((arr arr)\n             (sum 0)\n             (index 0))\n    (cond ((null? arr) sum)\n          ((and (even? index) (even? (car arr)))\n           (loop (cdr arr) (+ sum (car arr)) (+ index 1)))\n          (else (loop (cdr arr) sum (+ index 1))))))\n",
    "  (let loop ([i 0] [sum 0])\n    (cond\n      [(= i (length arr)) sum]\n      [(and (even? i) (even? (list-ref arr i))) (loop (+ i 1) (+ sum (list-ref arr i)))]\n      [else (loop (+ i 1) sum)])))\n",
    "  (define (sum_even_and_even_index_iter arr i sum)\n    (cond\n      [(empty? arr) sum]\n      [(even? i) (sum_even_and_even_index_iter (rest arr) (+ i 1) (+ sum (first arr)))]\n      [else (sum_even_and_even_index_iter (rest arr) (+ i 1) sum)]))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (for/sum ([i (in-range (length arr))]\n            [x (in-list arr)])\n    (if (and (even? i) (even? x))\n        x\n        0)))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (define (helper arr index)\n    (if (null? arr)\n        0\n        (if (and (even? index) (even? (car arr)))\n            (+ (car arr) (helper (cdr arr) (+ index 1)))\n            (helper (cdr arr) (+ index 1)))))\n  (helper arr 0))\n",
    "  (let loop ([i 0] [acc 0])\n    (if (&lt; i (length arr))\n        (let ([val (list-ref arr i)])\n          (if (and (even? i) (even? val))\n              (loop (+ i 1) (+ acc val))\n              (loop (+ i 1) acc)))\n        acc)))\n",
    "  (define (even? n) (= (modulo n 2) 0))\n  (define (sum_even_and_even_index_iter arr i sum)\n    (if (null? arr)\n        sum\n        (if (and (even? i) (even? (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ i 1) (+ sum (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ i 1) sum))))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (let loop ((i 0) (sum 0))\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (vector-ref arr i)))\n            (loop (+ i 1) (+ sum (vector-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (define (sum_even_and_even_index_helper arr index)\n    (if (null? arr)\n        0\n        (if (and (even? index) (even? (car arr)))\n            (+ (car arr) (sum_even_and_even_index_helper (cdr arr) (+ index 1)))\n            (sum_even_and_even_index_helper (cdr arr) (+ index 1)))))\n  (sum_even_and_even_index_helper arr 0))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (let loop ([arr arr] [sum 0] [index 0])\n    (if (null? arr)\n        sum\n        (if (and (even? index) (even? (car arr)))\n            (loop (cdr arr) (+ sum (car arr)) (+ index 1))\n            (loop (cdr arr) sum (+ index 1))))))\n",
    "  (let loop ([arr arr] [sum 0] [i 0])\n    (cond [(empty? arr) sum]\n          [(and (even? (first arr)) (even? i)) (loop (rest arr) (+ sum (first arr)) (+ i 1))]\n          [else (loop (rest arr) sum (+ i 1))])))\n",
    "  (cond\n    [(empty? arr) 0]\n    [else\n     (if (and (even? (first arr)) (even? (length arr)))\n         (+ (first arr) (sum_even_and_even_index (rest arr)))\n         (sum_even_and_even_index (rest arr)))]))\n",
    "  (let loop ([i 0] [sum 0])\n    (cond [(= i (length arr)) sum]\n          [(and (even? i) (even? (vector-ref arr i)))\n           (loop (+ i 1) (+ sum (vector-ref arr i)))]\n          [else (loop (+ i 1) sum)])))\n",
    "  (let loop ([i 0] [sum 0])\n    (cond\n      [(= i (length arr)) sum]\n      [(and (even? i) (even? (list-ref arr i))) (loop (+ i 1) (+ sum (list-ref arr i)))]\n      [else (loop (+ i 1) sum)])))\n",
    "  (let loop ((i 0) (sum 0))\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (cond [(empty? arr) 0]\n        [(even? (first arr)) (+ (first arr) (sum_even_and_even_index (rest arr)))]\n        [else (sum_even_and_even_index (rest arr))]))\n",
    "  (let loop ([i 0] [acc 0])\n    (if (= i (length arr))\n        acc\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ acc (list-ref arr i)))\n            (loop (+ i 1) acc)))))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(even? (second arr)) (+ (first arr) (sum_even_and_even_index (rest (rest arr))))]\n    [else (sum_even_and_even_index (rest arr))]))\n",
    "  (let loop ((i 0) (sum 0))\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (vector-ref arr i)))\n            (loop (+ i 1) (+ sum (vector-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (for/sum ([i (in-range (length arr))]\n            [v (in-list arr)])\n    (if (and (even? i) (even? v))\n        v\n        0)))\n",
    "  (let loop ((i 0) (sum 0))\n    (if (&lt; i (length arr))\n        (if (and (even? i) (even? (vector-ref arr i)))\n            (loop (+ i 1) (+ sum (vector-ref arr i)))\n            (loop (+ i 1) sum))\n        sum)))\n",
    "  (define (sum_even_and_even_index_helper arr index sum)\n    (if (null? arr)\n        sum\n        (if (and (even? index) (even? (car arr)))\n            (sum_even_and_even_index_helper (cdr arr) (+ index 1) (+ sum (car arr)))\n            (sum_even_and_even_index_helper (cdr arr) (+ index 1) sum))))\n  (sum_even_and_even_index_helper arr 0 0))\n",
    "  (let loop ([i 0] [sum 0])\n    (cond\n      [(= i (length arr)) sum]\n      [(and (even? i) (even? (list-ref arr i))) (loop (+ i 1) (+ sum (list-ref arr i)))]\n      [else (loop (+ i 1) sum)])))\n",
    "  (define (sum_even_and_even_index_iter arr i sum)\n    (cond\n      [(empty? arr) sum]\n      [(and (even? i) (even? (first arr))) (sum_even_and_even_index_iter (rest arr) (+ i 1) (+ sum (first arr)))]\n      [else (sum_even_and_even_index_iter (rest arr) (+ i 1) sum)]))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (let loop ((arr arr)\n             (index 0)\n             (sum 0))\n    (cond ((null? arr) sum)\n          ((and (even? index) (even? (car arr)))\n           (loop (cdr arr) (+ index 1) (+ sum (car arr))))\n          (else (loop (cdr arr) (+ index 1) sum)))))\n",
    "  (let loop ([i 0] [sum 0])\n    (cond\n      [(= i (length arr)) sum]\n      [(and (even? i) (even? (list-ref arr i))) (loop (+ i 1) (+ sum (list-ref arr i)))]\n      [else (loop (+ i 1) sum)])))\n",
    "  (let loop ((arr arr) (acc 0) (index 0))\n    (cond ((null? arr) acc)\n          ((and (even? index) (even? (car arr)))\n           (loop (cdr arr) (+ acc (car arr)) (+ index 1)))\n          (else (loop (cdr arr) acc (+ index 1))))))\n",
    "  (let loop ([i 0] [sum 0])\n    (cond\n      [(= i (length arr)) sum]\n      [(and (even? i) (even? (list-ref arr i))) (loop (+ i 1) (+ sum (list-ref arr i)))]\n      [else (loop (+ i 1) sum)])))\n",
    "  (define (sum_even_and_even_index_iter arr i sum)\n    (cond\n      [(empty? arr) sum]\n      [(and (even? i) (even? (first arr)))\n       (sum_even_and_even_index_iter (rest arr) (+ i 1) (+ sum (first arr)))]\n      [else (sum_even_and_even_index_iter (rest arr) (+ i 1) sum)]))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (let loop ((i 0) (accum 0))\n    (if (equal? i (length arr))\n        accum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ accum (list-ref arr i)))\n            (loop (+ i 1) accum)))))\n"
  ]
}