{
  "name": "mbpp_123_amicable_numbers_sum",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_123_amicable_numbers_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable-numbers-sum-iter limit sum)\n    (cond ((&gt; limit 1)\n           (let ((d (sum-of-divisors (- limit 1))))\n             (if (and (= d limit) (&gt; d 1))\n                 (amicable-numbers-sum-iter (- limit 1) (+ sum limit))\n               (amicable-numbers-sum-iter (- limit 1) sum))))\n          (else sum)))\n  (amicable-numbers-sum-iter limit 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509994,
      "stdout": "",
      "stderr": "/tmp/tmp7cygtf5d.rkt:6:4: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 14\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (filter (lambda (x) (= 0 (modulo n x))) (range 1 (add1 (quotient n 2)))))\n  (define (amicable? n)\n    (let ((n2 (sum (divisors n))))\n      (and (= n2 (sum (divisors n2)))\n           (not (= n n2)))))\n  (sum (filter amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "/tmp/tmphf4u6js0.rkt:8:15: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmphf4u6js0.rkt:8:15\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (filter (lambda (x) (= 0 (modulo n x))) (range 1 (add1 (quotient n 2)))))\n  (define (sum-divisors n)\n    (apply + (divisors n)))\n  (define (amicable? n)\n    (let ((m (sum-divisors n)))\n      (and (not (= n m)) (= n (sum-divisors m)))))\n  (apply + (filter amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509997,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable-pairs limit)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n        (when (zero? (modulo n i))\n          i)))\n    (define (sum-divisors n)\n      (apply + (divisors n)))\n    (for/list ([i (in-range 1 limit)])\n      (let ([sum (sum-divisors i)])\n        (when (and (not (zero? sum))\n                   (= (sum-divisors sum) i))\n          (list i sum)))))\n  (apply + (apply append (amicable-pairs limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509996,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn76okoau.rkt:24:4\n\n+: contract violation\n  expected: number?\n  given: #<void>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn76okoau.rkt:25:4\n\n+: contract violation\n  expected: number?\n  given: #<void>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn76okoau.rkt:26:4\n\n+: contract violation\n  expected: number?\n  given: #<void>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (filter (lambda (x) (= 0 (modulo n x)))\n            (range 1 (add1 (quotient n 2)))))\n  (define (sum_of_divisors n)\n    (apply + (divisors n)))\n  (define (amicable? n)\n    (let ((m (sum_of_divisors n)))\n      (and (not (= n m))\n           (= n (sum_of_divisors m)))))\n  (apply + (filter amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509997,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (filter (lambda (x) (= (remainder n x) 0))\n            (range 1 (add1 (quotient n 2)))))\n  (define (amicable? n)\n    (let ((n2 (sum (divisors n))))\n      (and (not (= n n2))\n           (= n (sum (divisors n2))))))\n  (sum (filter amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "/tmp/tmpu3vdhs2q.rkt:9:15: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpu3vdhs2q.rkt:9:15\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (sum-divisors n)\n    (define (sum-divisors-iter n sum)\n      (if (= n 1)\n          sum\n          (if (= (remainder n 2) 0)\n              (sum-divisors-iter (/ n 2) (+ sum (/ n 2)))\n              (sum-divisors-iter (- n 1) (+ sum (divisor n)))\n              )))\n    (sum-divisors-iter n 0))\n  (define (divisor n)\n    (define (divisor-iter n divisor)\n      (if (= (remainder n divisor) 0)\n          divisor\n          (divisor-iter n (+ divisor 1))))\n    (divisor-iter n 1))\n  (define (amicable-numbers-sum-iter n sum)\n    (if (= n limit)\n        sum\n        (if (= (sum-divisors (+ n 1)) n)\n            (amicable-numbers-sum-iter (+ n 1) (+ sum n))\n            (amicable-numbers-sum-iter (+ n 1) sum))))\n  (amicable-numbers-sum-iter 1 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509996,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4efi2e6y.rkt:33:4\nactual:     498501\nexpected:   504\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4efi2e6y.rkt:34:4\nactual:     49985001\nexpected:   31626\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4efi2e6y.rkt:35:4\nactual:     4851\nexpected:   0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (let loop ((i 1) (sum 0))\n    (cond ((&gt; i limit) sum)\n          ((= (sum_of_divisors i) (+ i (sum_of_divisors (sum_of_divisors i))))\n           (loop (+ i 1) (+ sum i (sum_of_divisors i))))\n          (else (loop (+ i 1) sum)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509994,
      "stdout": "",
      "stderr": "/tmp/tmp7x883ea0.rkt:5:2: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 11\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable-pair? a b)\n    (and (= a (sum-of-divisors b))\n         (= b (sum-of-divisors a))))\n  (define (sum-of-divisors n)\n    (define (sum-of-divisors-iter n i sum)\n      (cond ((&gt; i n) sum)\n            ((divides? i n) (sum-of-divisors-iter n (+ i 1) (+ sum i)))\n            (else (sum-of-divisors-iter n (+ i 1) sum))))\n    (sum-of-divisors-iter n 1 0))\n  (define (divides? a b)\n    (= (remainder b a) 0))\n  (define (sum-of-amicable-numbers-iter n i sum)\n    (cond ((&gt; i n) sum)\n          ((amicable-pair? i (sum-of-divisors i)) (sum-of-amicable-numbers-iter n (+ i 1) (+ sum i)))\n          (else (sum-of-amicable-numbers-iter n (+ i 1) sum))))\n  (sum-of-amicable-numbers-iter limit 1 0))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509994,
      "stdout": "",
      "stderr": "/tmp/tmp5g5h5dco.rkt:16:2: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 21\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable-pair? a b)\n    (and (= (sum-of-divisors a) b)\n         (= (sum-of-divisors b) a)))\n  (define (sum-of-divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (add1 (/ n 2)))])\n        (if (zero? (modulo n i)) i)))\n    (apply + (divisors n)))\n  (define (amicable-numbers)\n    (for/list ([i (in-range 1 limit)])\n      (for/list ([j (in-range 1 limit)])\n        (if (amicable-pair? i j) i))))\n  (apply + (amicable-numbers)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "/tmp/tmp3wov1wce.rkt:11:8: if: missing an \"else\" expression\n  in: (if (zero? (modulo n i)) i)\n  location...:\n   /tmp/tmp3wov1wce.rkt:11:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (filter (lambda (x) (= 0 (remainder n x)))\n            (range 1 (add1 (quotient n 2)))))\n  (define (amicable? n)\n    (let ((dn (apply + (divisors n))))\n      (and (not (= n dn)) (= n (apply + (divisors dn))))))\n  (apply + (filter amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509997,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable-pair? a b)\n    (and (= (sum-of-divisors a) b)\n         (= (sum-of-divisors b) a)))\n  (define (sum-of-divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (quotient n 2))]\n                 #:when (zero? (remainder n i)))\n        i))\n    (apply + (divisors n)))\n  (define (amicable-numbers)\n    (for/list ([i (in-range 1 limit)]\n               [j (in-range 1 limit)])\n      (when (amicable-pair? i j)\n        i)))\n  (apply + (amicable-numbers)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509996,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1stiv2e8.rkt:26:4\n\n+: contract violation\n  expected: number?\n  given: #<void>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1stiv2e8.rkt:27:4\n\n+: contract violation\n  expected: number?\n  given: #<void>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1stiv2e8.rkt:28:4\n\n+: contract violation\n  expected: number?\n  given: #<void>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable? n)\n    (let ((n-divisors (divisors n)))\n      (and (not (null? n-divisors))\n           (= n (apply + (map (lambda (x) (- x)) n-divisors)))\n           (= (apply + n-divisors) n))))\n  (define (divisors n)\n    (filter (lambda (x) (= (remainder n x) 0))\n            (range 1 (quotient n 2))))\n  (apply + (filter amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509996,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq6xtoyuy.rkt:20:4\nactual:     0\nexpected:   504\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq6xtoyuy.rkt:21:4\nactual:     0\nexpected:   31626\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable-number? n)\n    (let ([m (sum-of-divisors n)])\n      (and (not (= n m)) (= n (sum-of-divisors m)))))\n  (define (sum-of-divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n        (if (zero? (modulo n i)) i)))\n    (apply + (divisors n)))\n  (apply + (filter amicable-number? (in-range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "/tmp/tmpbrjo2jq5.rkt:11:8: if: missing an \"else\" expression\n  in: (if (zero? (modulo n i)) i)\n  location...:\n   /tmp/tmpbrjo2jq5.rkt:11:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable-pair? a b)\n    (and (= (sum-of-divisors a) b)\n         (= (sum-of-divisors b) a)))\n  (define (sum-of-divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n        (if (zero? (remainder n i)) i)))\n    (apply + (divisors n)))\n  (define (amicable-numbers n)\n    (for/list ([i (in-range 1 n)])\n      (if (amicable-pair? i (sum-of-divisors i)) i)))\n  (apply + (amicable-numbers limit)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "/tmp/tmp4d5yltgb.rkt:11:8: if: missing an \"else\" expression\n  in: (if (zero? (remainder n i)) i)\n  location...:\n   /tmp/tmp4d5yltgb.rkt:11:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable? n)\n    (let ((m (sum_of_divisors n)))\n      (and (not (= n m)) (= n (sum_of_divisors m)))))\n  (define (sum_of_divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n        (if (zero? (modulo n i)) i)))\n    (apply + (divisors n)))\n  (apply + (filter amicable? (in-range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509996,
      "stdout": "",
      "stderr": "/tmp/tmpdg7dm2_1.rkt:11:8: if: missing an \"else\" expression\n  in: (if (zero? (modulo n i)) i)\n  location...:\n   /tmp/tmpdg7dm2_1.rkt:11:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (filter (lambda (x) (= 0 (remainder n x)))\n            (range 1 (add1 (quotient n 2)))))\n  (define (sum_divisors n)\n    (apply + (divisors n)))\n  (define (amicable? n)\n    (let ((m (sum_divisors n)))\n      (and (not (= n m))\n           (= (sum_divisors m) n))))\n  (apply + (filter amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509997,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (filter (lambda (x) (= 0 (remainder n x)))\n            (range 1 (add1 (quotient n 2)))))\n  (define (amicable? n)\n    (let ((m (apply + (divisors n))))\n      (and (not (= n m))\n           (= n (apply + (divisors m))))))\n  (apply + (filter amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509997,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (sum-divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n        (if (zero? (modulo n i)) i)))\n    (apply + (divisors n)))\n  (define (is-amicable? n)\n    (let ([sum-n (sum-divisors n)])\n      (and (not (zero? sum-n))\n           (equal? n (sum-divisors sum-n)))))\n  (apply + (for/list ([i (in-range 1 limit)])\n              (if (is-amicable? i) i))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "/tmp/tmpo52ooiph.rkt:8:8: if: missing an \"else\" expression\n  in: (if (zero? (modulo n i)) i)\n  location...:\n   /tmp/tmpo52ooiph.rkt:8:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (filter (lambda (x) (= 0 (modulo n x))) (range 1 (quotient n 2))))\n  (define (sum_divisors n)\n    (apply + (divisors n)))\n  (define (amicable? n)\n    (and (= n (sum_divisors (sum_divisors n)))\n         (not (= n (sum_divisors n)))))\n  (apply + (filter amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509997,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmbak0kob.rkt:19:4\nactual:     0\nexpected:   504\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmbak0kob.rkt:20:4\nactual:     0\nexpected:   31626\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (filter (lambda (x) (= 0 (modulo n x)))\n            (range 1 (add1 (quotient n 2)))))\n  (define (amicable? n)\n    (let ((n2 (sum (divisors n))))\n      (and (= n (sum (divisors n2)))\n           (/= n n2))))\n  (sum (filter amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122690,
      "stdout": "",
      "stderr": "/tmp/tmpt8xs1etn.rkt:9:15: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpt8xs1etn.rkt:9:15\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (filter (lambda (x) (= 0 (remainder n x)))\n            (range 1 (add1 (quotient n 2)))))\n  (define (sum_divisors n)\n    (apply + (divisors n)))\n  (define (amicable? n)\n    (let ((m (sum_divisors n)))\n      (and (= n (sum_divisors m))\n           (not (= n m)))))\n  (apply + (filter amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122691,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable? a)\n    (let ((b (sum-of-divisors a)))\n      (and (not (= a b)) (= a (sum-of-divisors b)))))\n  (define (sum-of-divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n        (if (zero? (modulo n i)) i)))\n    (apply + (divisors n)))\n  (apply + (for/list ([i (in-range 1 limit)])\n            (if (amicable? i) i))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122690,
      "stdout": "",
      "stderr": "/tmp/tmpk73paxw7.rkt:11:8: if: missing an \"else\" expression\n  in: (if (zero? (modulo n i)) i)\n  location...:\n   /tmp/tmpk73paxw7.rkt:11:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (sum_divisors n)\n    (define (sum_divisors_iter n sum)\n      (cond\n        [(= n 1) sum]\n        [(= (modulo n 2) 0) (sum_divisors_iter (/ n 2) (+ sum n))]\n        [else (sum_divisors_iter (- n 1) sum)]))\n    (sum_divisors_iter n 0))\n  (define (is_amicable? n)\n    (let ([m (sum_divisors n)])\n      (and (= n (sum_divisors m))\n           (not (= n m)))))\n  (define (amicable_numbers_sum_iter n sum)\n    (cond\n      [(= n limit) sum]\n      [(is_amicable? n) (amicable_numbers_sum_iter (+ n 1) (+ sum n))]\n      [else (amicable_numbers_sum_iter (+ n 1) sum)]))\n  (amicable_numbers_sum_iter 1 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122704,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (for/list ([i (in-range 1 (quotient n 2))]\n               #:when (zero? (modulo n i)))\n      i))\n  (define (sum-divisors n)\n    (apply + (divisors n)))\n  (define (amicable? n)\n    (let ([s (sum-divisors n)])\n      (and (not (zero? s))\n           (equal? n (sum-divisors s)))))\n  (apply + (filter amicable? (in-range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122690,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpox90ahrc.rkt:22:4\n\nfilter: contract violation\n  expected: list?\n  given: #<stream>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpox90ahrc.rkt:23:4\n\nfilter: contract violation\n  expected: list?\n  given: #<stream>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpox90ahrc.rkt:24:4\n\nfilter: contract violation\n  expected: list?\n  given: #<stream>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable? a)\n    (let ((b (sum-of-divisors a)))\n      (and (= a (sum-of-divisors b))\n           (not (= a b)))))\n  (define (sum-of-divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (quotient n 2))]\n                 #:when (zero? (modulo n i)))\n        i))\n    (apply + (divisors n)))\n  (apply + (filter amicable? (in-range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122690,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzcxw7woe.rkt:22:4\n\nfilter: contract violation\n  expected: list?\n  given: #<stream>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzcxw7woe.rkt:23:4\n\nfilter: contract violation\n  expected: list?\n  given: #<stream>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzcxw7woe.rkt:24:4\n\nfilter: contract violation\n  expected: list?\n  given: #<stream>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (sum_divisors n)\n    (define (sum_divisors-iter n i sum)\n      (cond\n        [(= i n) sum]\n        [(= 0 (modulo n i)) (sum_divisors-iter n (+ i 1) (+ sum i))]\n        [else (sum_divisors-iter n (+ i 1) sum)]))\n    (sum_divisors-iter n 1 0))\n  (define (is_amicable n)\n    (let ([m (sum_divisors n)])\n      (and (= n (sum_divisors m))\n           (not (= n m)))))\n  (define (amicable-numbers-sum-iter n sum)\n    (cond\n      [(= n limit) sum]\n      [(is_amicable n) (amicable-numbers-sum-iter (+ n 1) (+ sum n))]\n      [else (amicable-numbers-sum-iter (+ n 1) sum)]))\n  (amicable-numbers-sum-iter 1 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122704,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (define (divisors-helper n divisors)\n      (if (= n 1)\n          divisors\n          (if (= (modulo n (car divisors)) 0)\n              (divisors-helper (/ n (car divisors)) (cons (car divisors) divisors))\n              (divisors-helper n (cdr divisors)))))\n    (divisors-helper n (range 2 (ceiling (sqrt n)))))\n  (define (sum-divisors n)\n    (apply + (divisors n)))\n  (define (amicable-numbers-sum-helper n sum)\n    (if (= n limit)\n        sum\n        (let ((sum-of-divisors (sum-divisors n)))\n          (if (= (sum-divisors sum-of-divisors) n)\n              (if (and (/= n sum-of-divisors)\n                       (/= n 1))\n                  (amicable-numbers-sum-helper (+ n 1) (+ sum n sum-of-divisors))\n                  (amicable-numbers-sum-helper (+ n 1) sum))\n              (amicable-numbers-sum-helper (+ n 1) sum)))))\n  (amicable-numbers-sum-helper 1 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122690,
      "stdout": "",
      "stderr": "/tmp/tmp98osm8wc.rkt:20:24: /=: unbound identifier\n  in: /=\n  location...:\n   /tmp/tmp98osm8wc.rkt:20:24\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable? n)\n    (let ((m (sum_of_divisors n)))\n      (and (= n (sum_of_divisors m))\n           (/= n m))))\n  (define (sum_of_divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n        (if (zero? (modulo n i)) i)))\n    (apply + (divisors n)))\n  (apply + (filter amicable? (in-range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122690,
      "stdout": "",
      "stderr": "/tmp/tmpmfzu6bdk.rkt:8:12: /=: unbound identifier\n  in: /=\n  location...:\n   /tmp/tmpmfzu6bdk.rkt:8:12\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable-pair? n)\n    (let ((m (sum-of-proper-divisors n)))\n      (and (not (= n m))\n           (= (sum-of-proper-divisors m) n))))\n  (define (sum-of-proper-divisors n)\n    (define (divisors n)\n      (define (divisors-iter n i)\n        (cond ((= n 1) '())\n              ((= (remainder n i) 0) (cons i (divisors-iter (/ n i) i)))\n              (else (divisors-iter n (+ i 1)))))\n      (divisors-iter n 2))\n    (apply + (divisors n)))\n  (define (amicable-numbers-sum-iter n sum)\n    (cond ((&gt; n limit) sum)\n          ((amicable-pair? n) (amicable-numbers-sum-iter (+ n 1) (+ sum n)))\n          (else (amicable-numbers-sum-iter (+ n 1) sum))))\n  (amicable-numbers-sum-iter 1 0))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122689,
      "stdout": "",
      "stderr": "/tmp/tmpo1j341al.rkt:17:2: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 22\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable-numbers-sum-iter limit sum)\n    (cond\n      [(= limit 1) sum]\n      [(amicable? limit) (amicable-numbers-sum-iter (- limit 1) (+ limit sum))]\n      [else (amicable-numbers-sum-iter (- limit 1) sum)]))\n  (amicable-numbers-sum-iter limit 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122666,
      "stdout": "",
      "stderr": "/tmp/tmprej492wc.rkt:8:8: amicable?: unbound identifier\n  in: amicable?\n  location...:\n   /tmp/tmprej492wc.rkt:8:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (filter (lambda (x) (= (modulo n x) 0)) (range 1 (add1 (quotient n 2)))))\n  (define (sum_divisors n)\n    (apply + (divisors n)))\n  (define (amicable? n)\n    (let ((s (sum_divisors n)))\n      (and (not (= n s)) (= (sum_divisors s) n))))\n  (apply + (filter amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122691,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (filter (lambda (x) (= 0 (modulo n x))) (range 1 (add1 (quotient n 2)))))\n  (define (sum_divisors n)\n    (apply + (divisors n)))\n  (define (amicable? n)\n    (define (amicable?-helper n)\n      (let ((sum-divisors (sum_divisors n)))\n        (and (not (= n sum-divisors)) (= (sum_divisors sum-divisors) n))))\n    (amicable?-helper n))\n  (apply + (filter amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable? n)\n    (let ((m (sum_of_proper_divisors n)))\n      (and (not (= n m)) (= n (sum_of_proper_divisors m)))))\n  (define (sum_of_proper_divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (quotient n 2))])\n        (if (zero? (modulo n i)) i)))\n    (apply + (divisors n)))\n  (apply + (for/list ([n (in-range 1 limit)])\n            (if (amicable? n) n 0))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122690,
      "stdout": "",
      "stderr": "/tmp/tmpjhbt94lo.rkt:11:8: if: missing an \"else\" expression\n  in: (if (zero? (modulo n i)) i)\n  location...:\n   /tmp/tmpjhbt94lo.rkt:11:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable? a)\n    (let ((b (sum-divisors a)))\n      (and (not (= a b))\n           (= a (sum-divisors b)))))\n  (define (sum-divisors n)\n    (let loop ((i 1) (sum 0))\n      (cond ((= i n) sum)\n            ((divides? i n) (loop (+ i 1) (+ sum i)))\n            (else (loop (+ i 1) sum)))))\n  (define (divides? a b)\n    (= (remainder b a) 0))\n  (let loop ((i 1) (sum 0))\n    (cond ((&gt; i limit) sum)\n          ((amicable? i) (loop (+ i 1) (+ sum i)))\n          (else (loop (+ i 1) sum)))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122689,
      "stdout": "",
      "stderr": "/tmp/tmpuo3b5qjp.rkt:16:2: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 20\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable-pair? a b)\n    (and (= (sum-of-divisors a) b) (= (sum-of-divisors b) a)))\n  (define (sum-of-divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n        (if (zero? (modulo n i)) i)))\n    (apply + (divisors n)))\n  (define (amicable-numbers n)\n    (for/list ([i (in-range 1 n)])\n      (if (amicable-pair? i (sum-of-divisors i)) i)))\n  (apply + (amicable-numbers limit)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122690,
      "stdout": "",
      "stderr": "/tmp/tmpwkgocknn.rkt:10:8: if: missing an \"else\" expression\n  in: (if (zero? (modulo n i)) i)\n  location...:\n   /tmp/tmpwkgocknn.rkt:10:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (filter (lambda (x) (= 0 (modulo n x))) (range 1 (add1 (quotient n 2)))))\n  (define (sum_divisors n)\n    (apply + (divisors n)))\n  (define (amicable? n)\n    (let ((n2 (sum_divisors n)))\n      (and (= n (sum_divisors n2))\n           (not (= n n2)))))\n  (apply + (filter amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable? n)\n    (let ((m (sum_proper_divisors n)))\n      (and (not (= n m)) (= (sum_proper_divisors m) n))))\n  (define (sum_proper_divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (quotient n 2))]\n                 #:when (zero? (remainder n i)))\n        i))\n    (apply + (divisors n)))\n  (apply + (filter amicable? (in-range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122690,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpky1rpjla.rkt:21:4\n\nfilter: contract violation\n  expected: list?\n  given: #<stream>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpky1rpjla.rkt:22:4\n\nfilter: contract violation\n  expected: list?\n  given: #<stream>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpky1rpjla.rkt:23:4\n\nfilter: contract violation\n  expected: list?\n  given: #<stream>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (sum-divisors n)\n    (define (sum-divisors-iter n sum)\n      (cond\n        [(= n 1) sum]\n        [(= (remainder n 2) 0) (sum-divisors-iter (/ n 2) (+ sum n))]\n        [(= (remainder n 3) 0) (sum-divisors-iter (/ n 3) (+ sum n))]\n        [(= (remainder n 5) 0) (sum-divisors-iter (/ n 5) (+ sum n))]\n        [(= (remainder n 7) 0) (sum-divisors-iter (/ n 7) (+ sum n))]\n        [else (sum-divisors-iter (/ n 11) (+ sum n))]))\n    (sum-divisors-iter n 0))\n  (define (sum-amicable-numbers-iter n sum)\n    (cond\n      [(= n limit) sum]\n      [(= (sum-divisors n) (sum-divisors (sum-divisors n))) (sum-amicable-numbers-iter (+ n 1) (+ sum n))]\n      [else (sum-amicable-numbers-iter (+ n 1) sum)]))\n  (sum-amicable-numbers-iter 1 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122704,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (filter (lambda (x) (= 0 (modulo n x)))\n            (range 1 (add1 (quotient n 2)))))\n  (define (sum_divisors n)\n    (apply + (divisors n)))\n  (define (is_amicable? n)\n    (let ((m (sum_divisors n)))\n      (and (not (= n m)) (= n (sum_divisors m)))))\n  (apply + (filter is_amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable-sum n)\n    (define (divisors n)\n      (filter (lambda (x) (= 0 (modulo n x))) (range 1 (add1 (quotient n 2)))))\n    (apply + (divisors n)))\n  (define (amicable? n)\n    (let ((n2 (amicable-sum n)))\n      (and (not (= n n2)) (= n (amicable-sum n2)))))\n  (apply + (filter amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (filter (lambda (x) (= (remainder n x) 0)) (range 1 (add1 (quotient n 2)))))\n  (define (divisors-sum n)\n    (apply + (divisors n)))\n  (define (amicable-pair? n)\n    (let ((m (divisors-sum n)))\n      (and (not (= n m)) (= (divisors-sum m) n))))\n  (apply + (filter amicable-pair? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable-pair? a b)\n    (and (= (sum-of-divisors a) b)\n         (= (sum-of-divisors b) a)))\n  (define (sum-of-divisors n)\n    (define (divisors n)\n      (define (divisors-helper n i)\n        (if (> i n)\n            '()\n            (if (zero? (modulo n i))\n                (cons i (divisors-helper n (+ i 1)))\n                (divisors-helper n (+ i 1)))))\n      (divisors-helper n 1))\n    (apply + (divisors n)))\n  (define (amicable-numbers-sum-helper n sum)\n    (if (= n limit)\n        sum\n        (if (amicable-pair? n (sum-of-divisors n))\n            (amicable-numbers-sum-helper (+ n 1) (+ sum n))\n            (amicable-numbers-sum-helper (+ n 1) sum))))\n  (amicable-numbers-sum-helper 1 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122694,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz1kmhy99.rkt:31:4\nactual:     1\nexpected:   504\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz1kmhy99.rkt:32:4\nactual:     1\nexpected:   31626\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz1kmhy99.rkt:33:4\nactual:     1\nexpected:   0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (filter (lambda (x) (= 0 (modulo n x)))\n            (range 1 (add1 (quotient n 2)))))\n  (define (sum_divisors n)\n    (apply + (divisors n)))\n  (define (is_amicable n)\n    (let ((sum_divisors_n (sum_divisors n)))\n      (and (not (= n sum_divisors_n))\n           (= n (sum_divisors sum_divisors_n)))))\n  (apply + (filter is_amicable (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable? n)\n    (let ((m (sum_of_divisors n)))\n      (and (not (= n m)) (= n (sum_of_divisors m)))))\n  (define (sum_of_divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n        (if (zero? (modulo n i)) i)))\n    (apply + (divisors n)))\n  (apply + (filter amicable? (in-range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509996,
      "stdout": "",
      "stderr": "/tmp/tmpdg7dm2_1.rkt:11:8: if: missing an \"else\" expression\n  in: (if (zero? (modulo n i)) i)\n  location...:\n   /tmp/tmpdg7dm2_1.rkt:11:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable? n)\n    (let ((m (sum-of-divisors n)))\n      (and (not (= n m)) (= (sum-of-divisors m) n))))\n  (define (sum-of-divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (quotient n 2))]\n                 #:when (zero? (remainder n i)))\n        i))\n    (apply + (divisors n)))\n  (apply + (filter amicable? (in-range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122690,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6f8qzwyp.rkt:21:4\n\nfilter: contract violation\n  expected: list?\n  given: #<stream>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6f8qzwyp.rkt:22:4\n\nfilter: contract violation\n  expected: list?\n  given: #<stream>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6f8qzwyp.rkt:23:4\n\nfilter: contract violation\n  expected: list?\n  given: #<stream>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (sum-of-divisors n)\n    (define (sum-of-divisors-iter n acc)\n      (cond ((= n 1) acc)\n            ((= (remainder n 2) 0) (sum-of-divisors-iter (/ n 2) (+ acc n)))\n            ((= (remainder n 3) 0) (sum-of-divisors-iter (/ n 3) (+ acc n)))\n            ((= (remainder n 5) 0) (sum-of-divisors-iter (/ n 5) (+ acc n)))\n            ((= (remainder n 7) 0) (sum-of-divisors-iter (/ n 7) (+ acc n)))\n            (else (sum-of-divisors-iter (- n 1) (+ acc n)))))\n    (sum-of-divisors-iter n 0))\n  (define (is-amicable? n)\n    (let ((m (sum-of-divisors n)))\n      (and (= (sum-of-divisors m) n)\n           (not (= n m)))))\n  (define (amicable-numbers-sum-iter n acc)\n    (cond ((= n limit) acc)\n          ((is-amicable? n) (amicable-numbers-sum-iter (+ n 1) (+ acc n)))\n          (else (amicable-numbers-sum-iter (+ n 1) acc))))\n  (amicable-numbers-sum-iter 1 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122704,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (filter (lambda (x) (= 0 (modulo n x))) (range 1 (add1 (quotient n 2)))))\n  (define (sum_divisors n)\n    (apply + (divisors n)))\n  (define (amicable? n)\n    (let ((sum_n (sum_divisors n)))\n      (and (not (= n sum_n)) (= n (sum_divisors sum_n)))))\n  (apply + (filter amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable? a)\n    (let ((b (sum_of_divisors a)))\n      (and (not (= a b)) (= (sum_of_divisors b) a))))\n  (define (sum_of_divisors n)\n    (define (divisors n)\n      (let loop ((i 1) (acc '()))\n        (cond ((= i n) acc)\n              ((divides? i n) (loop (+ i 1) (cons i acc)))\n              (else (loop (+ i 1) acc)))))\n    (foldl + 0 (divisors n)))\n  (define (divides? a b) (= (remainder b a) 0))\n  (foldl + 0 (filter amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122705,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable? a)\n    (let ([b (sum_of_divisors a)])\n      (and (not (= a b)) (= a (sum_of_divisors b)))))\n  (define (sum_of_divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (add1 (quotient n 2)))]\n                  #:when (zero? (remainder n i)))\n        i))\n    (apply + (divisors n)))\n  (apply + (filter amicable? (in-range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122690,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkqorg5ct.rkt:21:4\n\nfilter: contract violation\n  expected: list?\n  given: #<stream>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkqorg5ct.rkt:22:4\n\nfilter: contract violation\n  expected: list?\n  given: #<stream>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkqorg5ct.rkt:23:4\n\nfilter: contract violation\n  expected: list?\n  given: #<stream>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable-pair? a b)\n    (and (= (sum-of-divisors a) b)\n         (= (sum-of-divisors b) a)))\n  (define (sum-of-divisors n)\n    (define (divisors n)\n      (filter (lambda (x) (= (modulo n x) 0))\n              (range 1 (add1 (quotient n 2)))))\n    (apply + (divisors n)))\n  (apply +\n         (filter (lambda (x) (amicable-pair? x (sum-of-divisors x)))\n                 (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122671,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppg6rgxj3.rkt:22:4\nactual:     1034\nexpected:   504\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppg6rgxj3.rkt:23:4\nactual:     40284\nexpected:   31626\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppg6rgxj3.rkt:24:4\nactual:     34\nexpected:   0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable-pair? a b)\n    (and (= (sum-of-divisors a) b) (= (sum-of-divisors b) a)))\n  (define (sum-of-divisors n)\n    (apply + (filter (lambda (x) (= 0 (modulo n x))) (range 1 (quotient n 2)))))\n  (define (amicable-numbers-sum-helper n sum)\n    (if (&gt; n limit)\n        sum\n        (if (amicable-pair? n (sum-of-divisors n))\n            (amicable-numbers-sum-helper (+ n 1) (+ sum n))\n            (amicable-numbers-sum-helper (+ n 1) sum))))\n  (amicable-numbers-sum-helper 1 0))\n</code>\nI'm not sure if this is the best way to do it, but it seems to work.\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122690,
      "stdout": "",
      "stderr": "/tmp/tmpqhbzv7hr.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 16\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable? n)\n    (let ([m (sum_of_divisors n)])\n      (and (not (= n m)) (= (sum_of_divisors m) n))))\n  (define (sum_of_divisors n)\n    (let loop ([i 1] [sum 0])\n      (if (&gt; i (/ n 2))\n          sum\n          (if (zero? (modulo n i))\n              (loop (+ i 1) (+ sum i))\n              (loop (+ i 1) sum)))))\n  (let loop ([i 1] [sum 0])\n    (if (&gt; i limit)\n        sum\n        (if (amicable? i)\n            (loop (+ i 1) (+ sum i))\n            (loop (+ i 1) sum)))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122690,
      "stdout": "",
      "stderr": "/tmp/tmp409kxvwz.rkt:8:2: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 15\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable-number? n)\n    (let ((m (sum-of-divisors n)))\n      (and (not (= n m)) (= (sum-of-divisors m) n))))\n  (define (sum-of-divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n        (if (= (remainder n i) 0) i)))\n    (apply + (divisors n)))\n  (apply + (filter amicable-number? (in-range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122690,
      "stdout": "",
      "stderr": "/tmp/tmp___9p51r.rkt:11:8: if: missing an \"else\" expression\n  in: (if (= (remainder n i) 0) i)\n  location...:\n   /tmp/tmp___9p51r.rkt:11:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable-pair? a b)\n    (and (= (sum-of-divisors a) b)\n         (= (sum-of-divisors b) a)))\n  (define (sum-of-divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n        (if (zero? (modulo n i)) i)))\n    (apply + (divisors n)))\n  (define (amicable-pairs limit)\n    (for/list ([i (in-range 1 limit)])\n      (for/list ([j (in-range 1 limit)])\n        (if (and (amicable-pair? i j)\n                 (not (zero? (modulo i j))))\n            (list i j)))))\n  (apply + (apply append (amicable-pairs limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122691,
      "stdout": "",
      "stderr": "/tmp/tmpt_z37obf.rkt:11:8: if: missing an \"else\" expression\n  in: (if (zero? (modulo n i)) i)\n  location...:\n   /tmp/tmpt_z37obf.rkt:11:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (filter (lambda (x) (= 0 (modulo n x)))\n            (range 1 (add1 (quotient n 2)))))\n  (define (sum_divisors n)\n    (apply + (divisors n)))\n  (define (amicable? n)\n    (let ((sum (sum_divisors n)))\n      (and (not (= n sum))\n           (= n (sum_divisors sum)))))\n  (apply + (filter amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (filter (lambda (x) (= (remainder n x) 0)) (range 1 (add1 (quotient n 2)))))\n  (define (sum_divisors n)\n    (apply + (divisors n)))\n  (define (amicable? n)\n    (let ((sum (sum_divisors n)))\n      (and (= n (sum_divisors sum)) (not (= n sum)))))\n  (apply + (filter amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122693,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (filter (lambda (x) (= (remainder n x) 0))\n            (range 1 (add1 (quotient n 2)))))\n  (define (amicable? n)\n    (let ((d (divisors n)))\n      (and (not (= n (apply + d)))\n           (= n (apply + (divisors (apply + d)))))))\n  (apply + (filter amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (for/list ([i (in-range 1 (quotient n 2))] #:when (zero? (remainder n i)))\n      i))\n  (define (sum_divisors n)\n    (apply + (divisors n)))\n  (define (amicable? n)\n    (let ([sum (sum_divisors n)])\n      (and (not (= n sum))\n           (= (sum_divisors sum) n))))\n  (apply + (for/list ([i (in-range 1 limit)] #:when (amicable? i))\n             i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122692,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp885as1c8.rkt:22:4\nactual:     0\nexpected:   504\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp885as1c8.rkt:23:4\nactual:     0\nexpected:   31626\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable-number? n)\n    (let ((n-divisors-sum (sum-divisors n)))\n      (and (not (= n n-divisors-sum))\n           (= n (sum-divisors n-divisors-sum)))))\n  (define (sum-divisors n)\n    (let loop ((n n) (divisors (list 1)))\n      (if (= n 1)\n          (apply + divisors)\n          (loop (quotient n (gcd n (sub1 n)))\n                (cons (quotient n (gcd n (sub1 n))) divisors)))))\n  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (let loop ((n 1) (sum 0))\n    (if (= n limit)\n        sum\n        (loop (add1 n)\n              (if (amicable-number? n)\n                  (+ sum n)\n                  sum)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122705,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable? n)\n    (let* ([n-divisors (divisors n)]\n           [n-divisors-sum (apply + n-divisors)])\n      (and (not (= n n-divisors-sum))\n           (= n (apply + (divisors n-divisors-sum))))))\n  (apply + (filter amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122691,
      "stdout": "",
      "stderr": "/tmp/tmp2sn12hrt.rkt:6:24: divisors: unbound identifier\n  in: divisors\n  location...:\n   /tmp/tmp2sn12hrt.rkt:6:24\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable-pair? a b)\n    (and (= (sum-of-divisors a) b)\n         (= (sum-of-divisors b) a)))\n  (define (sum-of-divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n        (if (zero? (modulo n i)) i)))\n    (apply + (divisors n)))\n  (define (amicable-numbers)\n    (for/list ([i (in-range 1 limit)])\n      (for/list ([j (in-range 1 limit)])\n        (if (amicable-pair? i j) i))))\n  (apply + (amicable-numbers)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122691,
      "stdout": "",
      "stderr": "/tmp/tmpsmmmb23v.rkt:11:8: if: missing an \"else\" expression\n  in: (if (zero? (modulo n i)) i)\n  location...:\n   /tmp/tmpsmmmb23v.rkt:11:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (filter (lambda (x) (= 0 (modulo n x))) (range 1 (add1 (quotient n 2)))))\n  (define (amicable? n)\n    (let ((m (apply + (divisors n))))\n      (and (= n (apply + (divisors m))) (not (= n m)))))\n  (apply + (filter amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122693,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (filter (lambda (x) (= 0 (modulo n x)))\n            (range 1 (add1 (quotient n 2)))))\n  (define (amicable? n)\n    (let ((m (apply + (divisors n))))\n      (and (not (= n m))\n           (= n (apply + (divisors m))))))\n  (apply + (filter amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable? n)\n    (let ((m (sum-of-divisors n)))\n      (and (not (= n m)) (= n (sum-of-divisors m)))))\n  (define (sum-of-divisors n)\n    (define (divisors n)\n      (let loop ((i 1) (acc '()))\n        (cond ((= i n) acc)\n              ((divides? i n) (loop (+ i 1) (cons i acc)))\n              (else (loop (+ i 1) acc)))))\n    (apply + (divisors n)))\n  (define (divides? a b) (= (remainder b a) 0))\n  (define (sum-of-amicable-numbers limit)\n    (let loop ((i 1) (acc 0))\n      (cond ((= i limit) acc)\n            ((amicable? i) (loop (+ i 1) (+ acc i)))\n            (else (loop (+ i 1) acc)))))\n  (sum-of-amicable-numbers limit))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122706,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable-pair? a b)\n    (and (= (sum-of-divisors a) b)\n         (= (sum-of-divisors b) a)))\n  (define (sum-of-divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (quotient n 2))]\n                 #:when (zero? (remainder n i)))\n        i))\n    (apply + (divisors n)))\n  (define (amicable-numbers limit)\n    (for/list ([i (in-range 1 limit)]\n               #:when (amicable-pair? i (sum-of-divisors i)))\n      i))\n  (apply + (amicable-numbers limit)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122693,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxh0tmq9z.rkt:25:4\nactual:     24\nexpected:   504\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxh0tmq9z.rkt:26:4\nactual:     24\nexpected:   31626\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxh0tmq9z.rkt:27:4\nactual:     24\nexpected:   0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (filter (lambda (x) (= 0 (remainder n x)))\n            (range 1 (add1 (quotient n 2)))))\n  (define (sum_divisors n)\n    (apply + (divisors n)))\n  (define (amicable? n)\n    (let ((m (sum_divisors n)))\n      (and (not (= n m)) (= n (sum_divisors m)))))\n  (apply + (filter amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122693,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable? a)\n    (let ([b (sum_of_proper_divisors a)])\n      (and (not (= a b)) (= a (sum_of_proper_divisors b)))))\n  (define (sum_of_proper_divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (quotient n 2))]\n                 #:when (zero? (remainder n i)))\n        i))\n    (apply + (divisors n)))\n  (apply + (filter amicable? (in-range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122692,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfp6_utxk.rkt:21:4\n\nfilter: contract violation\n  expected: list?\n  given: #<stream>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfp6_utxk.rkt:22:4\n\nfilter: contract violation\n  expected: list?\n  given: #<stream>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfp6_utxk.rkt:23:4\n\nfilter: contract violation\n  expected: list?\n  given: #<stream>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable-numbers-sum-iter limit sum)\n    (if (= limit 0)\n        sum\n        (let ((divisors-sum (divisors-sum limit)))\n          (if (= (divisors-sum divisors-sum) limit)\n              (amicable-numbers-sum-iter (- limit 1) (+ sum limit))\n              (amicable-numbers-sum-iter (- limit 1) sum)))))\n  (amicable-numbers-sum-iter limit 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122664,
      "stdout": "",
      "stderr": "/tmp/tmpijj_d39v.rkt:8:29: divisors-sum: unbound identifier\n  in: divisors-sum\n  location...:\n   /tmp/tmpijj_d39v.rkt:8:29\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable-numbers-sum-iter limit sum)\n    (cond\n      [(= limit 1) sum]\n      [(amicable? limit) (amicable-numbers-sum-iter (- limit 1) (+ sum limit))]\n      [else (amicable-numbers-sum-iter (- limit 1) sum)]))\n  (amicable-numbers-sum-iter limit 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122661,
      "stdout": "",
      "stderr": "/tmp/tmp668graxz.rkt:8:8: amicable?: unbound identifier\n  in: amicable?\n  location...:\n   /tmp/tmp668graxz.rkt:8:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (sum-of-divisors n)\n    (define (sum-of-divisors-iter n sum)\n      (cond ((= n 1) sum)\n            ((= (modulo n 2) 0) (sum-of-divisors-iter (/ n 2) (+ sum n)))\n            ((= (modulo n 3) 0) (sum-of-divisors-iter (/ n 3) (+ sum n)))\n            (else (sum-of-divisors-iter (- n 1) sum))))\n    (sum-of-divisors-iter n 1))\n  (define (is-amicable? n)\n    (let ((n-sum (sum-of-divisors n))\n          (n-sum-sum (sum-of-divisors (sum-of-divisors n))))\n      (and (= n-sum-sum n)\n           (/= n-sum n))))\n  (define (amicable-numbers-sum-iter n sum)\n    (cond ((= n limit) sum)\n          ((is-amicable? n) (amicable-numbers-sum-iter (+ n 1) (+ sum n)))\n          (else (amicable-numbers-sum-iter (+ n 1) sum))))\n  (amicable-numbers-sum-iter 1 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122692,
      "stdout": "",
      "stderr": "/tmp/tmpzhxdz87k.rkt:16:12: /=: unbound identifier\n  in: /=\n  location...:\n   /tmp/tmpzhxdz87k.rkt:16:12\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable? n)\n    (let ((m (sum_of_divisors n)))\n      (and (not (= n m)) (= n (sum_of_divisors m)))))\n  (define (sum_of_divisors n)\n    (define (divisors n)\n      (let loop ((n n) (d 2) (divs '()))\n        (cond ((= n 1) (reverse divs))\n              ((= (remainder n d) 0) (loop (quotient n d) d (cons d divs)))\n              (else (loop n (+ d 1) divs)))))\n    (apply + (divisors n)))\n  (define (loop n sum)\n    (cond ((= n limit) sum)\n          ((amicable? n) (loop (+ n 1) (+ n sum)))\n          (else (loop (+ n 1) sum))))\n  (loop 1 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122707,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable-pair? a b)\n    (and (= (sum-of-divisors a) b)\n         (= (sum-of-divisors b) a)))\n  (define (sum-of-divisors n)\n    (accumulate + 0 (divisors n)))\n  (define (divisors n)\n    (filter (lambda (x) (= (modulo n x) 0))\n            (range 1 (add1 (quotient n 2)))))\n  (accumulate + 0 (filter (lambda (x) (amicable-pair? x (sum-of-divisors x)))\n                          (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122692,
      "stdout": "",
      "stderr": "/tmp/tmp7hky4asq.rkt:9:5: accumulate: unbound identifier\n  in: accumulate\n  location...:\n   /tmp/tmp7hky4asq.rkt:9:5\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable? n)\n    (let ([m (sum_of_proper_divisors n)])\n      (and (not (= n m)) (= (sum_of_proper_divisors m) n))))\n  (define (sum_of_proper_divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (quotient n 2))])\n        (if (= 0 (remainder n i)) i)))\n    (apply + (divisors n)))\n  (apply + (filter amicable? (in-range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122692,
      "stdout": "",
      "stderr": "/tmp/tmp6qfzh11y.rkt:11:8: if: missing an \"else\" expression\n  in: (if (= 0 (remainder n i)) i)\n  location...:\n   /tmp/tmp6qfzh11y.rkt:11:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable-pair? a b)\n    (and (= (sum-of-divisors a) b)\n         (= (sum-of-divisors b) a)))\n  (define (sum-of-divisors n)\n    (define (divisors n)\n      (filter (lambda (x) (= (remainder n x) 0))\n              (range 1 (add1 (floor (/ n 2))))))\n    (apply + (divisors n)))\n  (define (amicable-numbers-below n)\n    (filter (lambda (x) (amicable-pair? x (sum-of-divisors x)))\n            (range 1 n)))\n  (apply + (amicable-numbers-below limit)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122695,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9pwl61hp.rkt:23:4\nactual:     1034\nexpected:   504\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9pwl61hp.rkt:24:4\nactual:     40284\nexpected:   31626\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9pwl61hp.rkt:25:4\nactual:     34\nexpected:   0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (filter (lambda (x) (= 0 (modulo n x))) (range 1 (add1 (quotient n 2)))))\n  (define (sum_divisors n)\n    (apply + (divisors n)))\n  (define (amicable? n)\n    (let ((sum (sum_divisors n)))\n      (and (not (= n sum)) (= (sum_divisors sum) n))))\n  (apply + (filter amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122694,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable-pair? a b)\n    (and (= (sum-of-divisors a) b)\n         (= (sum-of-divisors b) a)))\n  (define (sum-of-divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (quotient n 2))]\n                 #:when (zero? (remainder n i)))\n        i))\n    (apply + (divisors n)))\n  (define (amicable-numbers)\n    (for/list ([i (in-range 1 limit)]\n               [j (in-range 1 limit)])\n      (when (amicable-pair? i j)\n        (list i j))))\n  (apply + (apply append (amicable-numbers))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122666,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphka14n4d.rkt:26:4\n\nappend: contract violation\n  expected: list?\n  given: #<void>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphka14n4d.rkt:27:4\n\nappend: contract violation\n  expected: list?\n  given: #<void>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphka14n4d.rkt:28:4\n\nappend: contract violation\n  expected: list?\n  given: #<void>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (filter (lambda (x) (= 0 (modulo n x)))\n            (range 1 (add1 (quotient n 2)))))\n  (define (amicable? n)\n    (let ((n2 (apply + (divisors n))))\n      (and (not (= n n2))\n           (= n (apply + (divisors n2))))))\n  (apply + (filter amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122665,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable-pair? a b)\n    (and (= (sum-of-divisors a) b)\n         (= (sum-of-divisors b) a)))\n  (define (sum-of-divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (quotient n 2))]\n                 #:when (zero? (modulo n i)))\n        i))\n    (apply + (divisors n)))\n  (define (amicable-pairs limit)\n    (for/list ([i (in-range 1 limit)]\n               [j (in-range 1 limit)])\n      (when (amicable-pair? i j)\n        (list i j))))\n  (apply + (apply append (amicable-pairs limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122693,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr36kdsxe.rkt:26:4\n\nappend: contract violation\n  expected: list?\n  given: #<void>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr36kdsxe.rkt:27:4\n\nappend: contract violation\n  expected: list?\n  given: #<void>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr36kdsxe.rkt:28:4\n\nappend: contract violation\n  expected: list?\n  given: #<void>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable-pair? a b)\n    (and (= (sum-of-divisors a) b)\n         (= (sum-of-divisors b) a)))\n  (define (sum-of-divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n        (if (zero? (modulo n i)) i)))\n    (apply + (divisors n)))\n  (define (amicable-numbers n)\n    (for/list ([i (in-range 1 n)])\n      (for/list ([j (in-range 1 n)])\n        (if (amicable-pair? i j) i))))\n  (apply + (amicable-numbers limit)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122693,
      "stdout": "",
      "stderr": "/tmp/tmpj78zecdl.rkt:11:8: if: missing an \"else\" expression\n  in: (if (zero? (modulo n i)) i)\n  location...:\n   /tmp/tmpj78zecdl.rkt:11:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable-pairs-sum limit)\n    (define (amicable-pairs-sum-iter limit acc)\n      (if (= limit 1)\n          acc\n          (let ((divisor-sum (divisor-sum limit)))\n            (if (= (divisor-sum divisor-sum) limit)\n                (amicable-pairs-sum-iter (- limit 1) (+ acc limit divisor-sum))\n                (amicable-pairs-sum-iter (- limit 1) acc)))))\n  (amicable-pairs-sum-iter limit 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122692,
      "stdout": "",
      "stderr": "/tmp/tmpti0keojh.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 15\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (filter (lambda (x) (= 0 (modulo n x))) (range 1 (add1 (quotient n 2)))))\n  (define (sum_divisors n)\n    (apply + (divisors n)))\n  (define (amicable? n)\n    (let ((sum (sum_divisors n)))\n      (and (= n (sum_divisors sum))\n           (not (= n sum)))))\n  (apply + (filter amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable? n)\n    (let ((m (sum_of_divisors n)))\n      (and (not (= n m)) (= (sum_of_divisors m) n))))\n  (define (sum_of_divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n        (if (zero? (modulo n i)) i)))\n    (apply + (divisors n)))\n  (apply + (filter amicable? (in-range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "/tmp/tmpcmqfz3sh.rkt:11:8: if: missing an \"else\" expression\n  in: (if (zero? (modulo n i)) i)\n  location...:\n   /tmp/tmpcmqfz3sh.rkt:11:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (sum-divisors n)\n    (define (sum-divisors-iter n sum)\n      (cond ((= n 1) sum)\n            ((= (remainder n 2) 0) (sum-divisors-iter (/ n 2) (+ sum n)))\n            ((= (remainder n 3) 0) (sum-divisors-iter (/ n 3) (+ sum n)))\n            ((= (remainder n 5) 0) (sum-divisors-iter (/ n 5) (+ sum n)))\n            ((= (remainder n 7) 0) (sum-divisors-iter (/ n 7) (+ sum n)))\n            (else (sum-divisors-iter (- n 1) (+ sum n)))))\n    (sum-divisors-iter n 0))\n  (define (amicable-numbers-sum-iter n sum)\n    (cond ((= n limit) sum)\n          ((= (sum-divisors n) (sum-divisors (+ n 1))) (amicable-numbers-sum-iter (+ n 2) (+ sum n n)))\n          (else (amicable-numbers-sum-iter (+ n 1) sum))))\n  (amicable-numbers-sum-iter 1 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122693,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj4d79_0x.rkt:25:4\nactual:     0\nexpected:   504\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj4d79_0x.rkt:26:4\nactual:     0\nexpected:   31626\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (filter (lambda (x) (= 0 (modulo n x))) (range 1 (add1 (quotient n 2)))))\n  (define (sum_divisors n)\n    (apply + (divisors n)))\n  (define (amicable? n)\n    (let ((n2 (sum_divisors n)))\n      (and (= n (sum_divisors n2))\n           (not (= n n2)))))\n  (apply + (filter amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable-pair? a b)\n    (and (= (sum-of-divisors a) b) (= (sum-of-divisors b) a)))\n  (define (sum-of-divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (quotient n 2))]\n                 #:when (zero? (modulo n i)))\n        i))\n    (apply + (divisors n)))\n  (define (amicable-numbers)\n    (for/list ([i (in-range 1 limit)]\n               [j (in-range 1 limit)])\n      (when (amicable-pair? i j)\n        (list i j))))\n  (apply + (apply append (amicable-numbers))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122694,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk0u0_05s.rkt:25:4\n\nappend: contract violation\n  expected: list?\n  given: #<void>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk0u0_05s.rkt:26:4\n\nappend: contract violation\n  expected: list?\n  given: #<void>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk0u0_05s.rkt:27:4\n\nappend: contract violation\n  expected: list?\n  given: #<void>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (sum-of-divisors n)\n    (define (sum-of-divisors-iter n sum)\n      (cond\n        [(= n 1) sum]\n        [(divides? n (sub1 n)) (sum-of-divisors-iter (sub1 n) (+ sum (sub1 n)))]\n        [else (sum-of-divisors-iter (sub1 n) sum)]))\n    (sum-of-divisors-iter n 0))\n  (define (sum-of-amicable-numbers-iter n sum)\n    (cond\n      [(= n limit) sum]\n      [(and (not (= n (sum-of-divisors n))) (= (sum-of-divisors n) n)) (sum-of-amicable-numbers-iter (add1 n) sum)]\n      [(and (= n (sum-of-divisors n)) (= (sum-of-divisors (sum-of-divisors n)) n)) (sum-of-amicable-numbers-iter (add1 n) (+ sum n (sum-of-divisors n)))]\n      [else (sum-of-amicable-numbers-iter (add1 n) sum)]))\n  (sum-of-amicable-numbers-iter 1 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122693,
      "stdout": "",
      "stderr": "/tmp/tmpbqzkmrnh.rkt:9:10: divides?: unbound identifier\n  in: divides?\n  location...:\n   /tmp/tmpbqzkmrnh.rkt:9:10\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (filter (lambda (x) (= 0 (modulo n x)))\n            (range 1 (add1 (quotient n 2)))))\n  (define (amicable? n)\n    (let ((sum (apply + (divisors n))))\n      (and (= n (apply + (divisors sum)))\n           (not (= n sum)))))\n  (apply + (filter amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (filter (lambda (x) (= 0 (modulo n x)))\n            (range 1 (add1 (quotient n 2)))))\n  (define (sum_divisors n)\n    (apply + (divisors n)))\n  (define (amicable? n)\n    (let ((m (sum_divisors n)))\n      (and (not (= n m)) (= n (sum_divisors m)))))\n  (apply + (filter amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable-pair? a b)\n    (and (= (sum-of-proper-divisors a) b)\n         (= (sum-of-proper-divisors b) a)))\n  (define (sum-of-proper-divisors n)\n    (define (divisors n)\n      (filter (lambda (x) (= (modulo n x) 0))\n              (range 1 (add1 (quotient n 2)))))\n    (apply + (divisors n)))\n  (define (range a b)\n    (if (> a b)\n        '()\n        (cons a (range (add1 a) b))))\n  (define (filter pred lst)\n    (cond ((null? lst) '())\n          ((pred (car lst)) (cons (car lst) (filter pred (cdr lst))))\n          (else (filter pred (cdr lst)))))\n  (define (sum-of-amicable-numbers-from-1-to limit)\n    (define (sum-of-amicable-numbers-from-1-to-n n)\n      (define (sum-of-amicable-numbers-from-1-to-n-iter n sum)\n        (if (= n 1)\n            sum\n            (if (amicable-pair? n (sum-of-proper-divisors n))\n                (sum-of-amicable-numbers-from-1-to-n-iter (sub1 n) (add1 sum))\n                (sum-of-amicable-numbers-from-1-to-n-iter (sub1 n) sum))))\n      (sum-of-amicable-numbers-from-1-to-n-iter n 0))\n    (sum-of-amicable-numbers-from-1-to-n limit))\n  (sum-of-amicable-numbers-from-1-to limit))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122695,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr51gm2pr.rkt:38:4\nactual:     5\nexpected:   504\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr51gm2pr.rkt:39:4\nactual:     14\nexpected:   31626\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr51gm2pr.rkt:40:4\nactual:     2\nexpected:   0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable? n)\n    (let* ([d (sum-of-divisors n)]\n           [d2 (sum-of-divisors d)])\n      (and (not (= n d)) (= n d2))))\n  (define (sum-of-divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n        (if (zero? (modulo n i)) i)))\n    (apply + (divisors n)))\n  (apply + (filter amicable? (in-range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122693,
      "stdout": "",
      "stderr": "/tmp/tmpk9ncx9i8.rkt:12:8: if: missing an \"else\" expression\n  in: (if (zero? (modulo n i)) i)\n  location...:\n   /tmp/tmpk9ncx9i8.rkt:12:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (filter (lambda (x) (= 0 (modulo n x))) (range 1 (add1 (quotient n 2)))))\n  (define (sum_divisors n)\n    (apply + (divisors n)))\n  (define (amicable? n)\n    (let ([m (sum_divisors n)])\n      (and (= n (sum_divisors m))\n           (not (= n m)))))\n  (apply + (filter amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (filter (lambda (x) (= (remainder n x) 0))\n            (range 1 (add1 (quotient n 2)))))\n  (define (sum_divisors n)\n    (apply + (divisors n)))\n  (define (amicable? n)\n    (let ((sum (sum_divisors n)))\n      (and (= n (sum_divisors sum))\n           (not (= n sum)))))\n  (apply + (filter amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (sum-of-divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (quotient n 2))])\n        (if (zero? (modulo n i)) i)))\n    (apply + (divisors n)))\n  (define (amicable-pairs n)\n    (define (pair-p n)\n      (define (pair-p-helper n)\n        (define (pair-p-helper-helper n)\n          (define (pair-p-helper-helper-helper n)\n            (define (pair-p-helper-helper-helper-helper n)\n              (define (pair-p-helper-helper-helper-helper-helper n)\n                (define (pair-p-helper-helper-helper-helper-helper-helper n)\n                  (define (pair-p-helper-helper-helper-helper-helper-helper-helper n)\n                    (define (pair-p-helper-helper-helper-helper-helper-helper-helper-helper n)\n                      (define (pair-p-helper-helper-helper-helper-helper-helper-helper-helper-helper n)\n                        (define (pair-p-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper n)\n                          (define (pair-p-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper n)\n                            (define (pair-p-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper n)\n                              (define (pair-p-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper n)\n                                (define (pair-p-helper-\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122693,
      "stdout": "",
      "stderr": "/tmp/tmpm_n6iz9w.rkt:25:40: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 26\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable-pair? a b)\n    (and (= (sum-of-divisors a) b)\n         (= (sum-of-divisors b) a)))\n  (define (sum-of-divisors n)\n    (define (divisors n)\n      (filter (lambda (x) (= (modulo n x) 0)) (range 1 n)))\n    (apply + (divisors n)))\n  (define (range a b)\n    (if (> a b)\n        '()\n        (cons a (range (+ a 1) b))))\n  (define (filter pred lst)\n    (cond ((null? lst) '())\n          ((pred (car lst)) (cons (car lst) (filter pred (cdr lst))))\n          (else (filter pred (cdr lst)))))\n  (apply + (filter (lambda (x) (amicable-pair? x (sum-of-divisors x))) (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122699,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprizehuic.rkt:27:4\nactual:     1\nexpected:   504\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprizehuic.rkt:28:4\nactual:     1\nexpected:   31626\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprizehuic.rkt:29:4\nactual:     1\nexpected:   0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (filter (lambda (x) (= (remainder n x) 0))\n            (range 1 (add1 (quotient n 2)))))\n  (define (sum_divisors n)\n    (apply + (divisors n)))\n  (define (amicable? n)\n    (let ((sum (sum_divisors n)))\n      (and (not (= n sum))\n           (= (sum_divisors sum) n))))\n  (apply + (filter amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable-pair? a b)\n    (and (= (sum-of-divisors a) b) (= (sum-of-divisors b) a)))\n  (define (sum-of-divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n        (if (zero? (modulo n i)) i)))\n    (apply + (divisors n)))\n  (define (amicable-numbers limit)\n    (for/list ([i (in-range 1 limit)])\n      (define j (sum-of-divisors i))\n      (if (and (amicable-pair? i j) (< i j)) j)))\n  (apply + (amicable-numbers limit)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122694,
      "stdout": "",
      "stderr": "/tmp/tmprn10rkhp.rkt:10:8: if: missing an \"else\" expression\n  in: (if (zero? (modulo n i)) i)\n  location...:\n   /tmp/tmprn10rkhp.rkt:10:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (filter (lambda (x) (= (remainder n x) 0))\n            (range 1 (add1 (quotient n 2)))))\n  (define (sum_divisors n)\n    (apply + (divisors n)))\n  (define (amicable? n)\n    (let ((m (sum_divisors n)))\n      (and (not (= n m))\n           (= (sum_divisors m) n))))\n  (apply + (filter amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122662,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable? a)\n    (let ((b (sum_of_divisors a)))\n      (and (not (= a b))\n           (= a (sum_of_divisors b)))))\n  (define (sum_of_divisors n)\n    (define (divisors n)\n      (let loop ((i 1) (acc '()))\n        (if (= i n)\n            acc\n            (if (zero? (modulo n i))\n                (loop (+ i 1) (cons i acc))\n                (loop (+ i 1) acc)))))\n    (apply + (divisors n)))\n  (define (amicable-numbers n)\n    (let loop ((i 1) (acc '()))\n      (if (= i n)\n          acc\n          (if (amicable? i)\n              (loop (+ i 1) (cons i acc))\n              (loop (+ i 1) acc)))))\n  (apply + (amicable-numbers limit)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable? n)\n    (let ((m (sum_of_divisors n)))\n      (and (not (= n m)) (= (sum_of_divisors m) n))))\n  (define (sum_of_divisors n)\n    (let loop ((i 1) (sum 0))\n      (cond ((&gt; i (/ n 2)) sum)\n            ((zero? (modulo n i)) (loop (+ i 1) (+ sum i)))\n            (else (loop (+ i 1) sum)))))\n  (let loop ((i 1) (sum 0))\n    (cond ((&gt; i limit) sum)\n          ((amicable? i) (loop (+ i 1) (+ sum i)))\n          (else (loop (+ i 1) sum)))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122694,
      "stdout": "",
      "stderr": "/tmp/tmpxx0t9sp2.rkt:13:2: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 17\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (filter (lambda (x) (= 0 (modulo n x))) (range 1 (add1 (quotient n 2)))))\n  (define (sum_divisors n)\n    (apply + (divisors n)))\n  (define (amicable? n)\n    (let ((sum (sum_divisors n)))\n      (and (not (= n sum)) (= (sum_divisors sum) n))))\n  (apply + (filter amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122694,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (filter (lambda (x) (= 0 (modulo n x))) (range 1 (add1 (quotient n 2)))))\n  (define (sum_divisors n)\n    (apply + (divisors n)))\n  (define (amicable? n)\n    (let ((n2 (sum_divisors n)))\n      (and (not (= n n2)) (= n (sum_divisors n2)))))\n  (apply + (filter amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable-number? n)\n    (let* ((n-divisors (divisors n))\n           (n-divisors-sum (apply + n-divisors))\n           (n-divisors-sum-divisors (divisors n-divisors-sum)))\n      (and (not (equal? n n-divisors-sum))\n           (equal? n-divisors-sum-divisors n-divisors))))\n  (define (divisors n)\n    (let loop ((i 1) (acc '()))\n      (cond ((= i n) acc)\n            ((divides? i n) (loop (+ i 1) (cons i acc)))\n            (else (loop (+ i 1) acc)))))\n  (define (divides? a b)\n    (= (remainder b a) 0))\n  (define (sum-amicable-numbers n)\n    (let loop ((i 1) (acc 0))\n      (cond ((= i n) acc)\n            ((amicable-number? i) (loop (+ i 1) (+ acc i)))\n            (else (loop (+ i 1) acc)))))\n  (sum-amicable-numbers limit))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122709,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (sum-divisors n)\n    (define (sum-divisors-iter n i sum)\n      (cond ((= i n) sum)\n            ((= 0 (modulo n i)) (sum-divisors-iter n (+ i 1) (+ sum i)))\n            (else (sum-divisors-iter n (+ i 1) sum))))\n    (sum-divisors-iter n 1 0))\n  (define (is-amicable n)\n    (let ((n-sum (sum-divisors n)))\n      (and (= n (sum-divisors n-sum))\n           (/= n n-sum))))\n  (define (sum-amicable-numbers-iter n sum)\n    (cond ((= n limit) sum)\n          ((is-amicable n) (sum-amicable-numbers-iter (+ n 1) (+ sum n)))\n          (else (sum-amicable-numbers-iter (+ n 1) sum))))\n  (sum-amicable-numbers-iter 1 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122694,
      "stdout": "",
      "stderr": "/tmp/tmpskxg2p6w.rkt:14:12: /=: unbound identifier\n  in: /=\n  location...:\n   /tmp/tmpskxg2p6w.rkt:14:12\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable? a)\n    (let ([b (sum_of_divisors a)])\n      (and (not (= a b)) (= (sum_of_divisors b) a))))\n  (define (sum_of_divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n        (if (zero? (modulo n i)) i)))\n    (apply + (divisors n)))\n  (apply + (filter amicable? (in-range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122660,
      "stdout": "",
      "stderr": "/tmp/tmpn4rz67hn.rkt:11:8: if: missing an \"else\" expression\n  in: (if (zero? (modulo n i)) i)\n  location...:\n   /tmp/tmpn4rz67hn.rkt:11:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable-pair? a b)\n    (and (= a (sum-divisors b))\n         (= b (sum-divisors a))))\n  (define (sum-divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n        (if (zero? (modulo n i)) i)))\n    (apply + (divisors n)))\n  (define (amicable-numbers limit)\n    (for/list ([i (in-range 1 limit)])\n      (if (amicable-pair? i (sum-divisors i)) i)))\n  (apply + (amicable-numbers limit)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122695,
      "stdout": "",
      "stderr": "/tmp/tmp8nyj6704.rkt:11:8: if: missing an \"else\" expression\n  in: (if (zero? (modulo n i)) i)\n  location...:\n   /tmp/tmp8nyj6704.rkt:11:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable-sum n)\n    (define (divisors n)\n      (filter (lambda (x) (= 0 (remainder n x)))\n              (range 1 (add1 (quotient n 2)))))\n    (apply + (divisors n)))\n  (define (amicable? n)\n    (let ((n-sum (amicable-sum n)))\n      (and (not (= n n-sum))\n           (= (amicable-sum n-sum) n))))\n  (apply + (filter amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (sum_of_divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (quotient n 2))]\n                 #:when (zero? (modulo n i)))\n        i))\n    (apply + (divisors n)))\n  (define (is_amicable? n)\n    (let ([m (sum_of_divisors n)])\n      (and (not (= n m))\n           (= (sum_of_divisors m) n))))\n  (apply + (for/list ([i (in-range 1 limit)]\n                      #:when (is_amicable? i))\n              i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122696,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz1fcy4kz.rkt:24:4\nactual:     0\nexpected:   504\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz1fcy4kz.rkt:25:4\nactual:     0\nexpected:   31626\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable? n)\n    (let ((m (sum_of_divisors n)))\n      (and (not (= n m)) (= (sum_of_divisors m) n))))\n  (define (sum_of_divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n        (if (zero? (modulo n i)) i)))\n    (apply + (divisors n)))\n  (apply + (filter amicable? (in-range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "/tmp/tmpcmqfz3sh.rkt:11:8: if: missing an \"else\" expression\n  in: (if (zero? (modulo n i)) i)\n  location...:\n   /tmp/tmpcmqfz3sh.rkt:11:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable-pair? a b)\n    (and (= (sum-of-divisors a) b)\n         (= (sum-of-divisors b) a)))\n  (define (sum-of-divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n        (when (zero? (modulo n i)) i)))\n    (apply + (divisors n)))\n  (define (amicable-numbers n)\n    (for/list ([i (in-range 1 n)])\n      (when (amicable-pair? i (sum-of-divisors i)) i)))\n  (apply + (amicable-numbers limit)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122695,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0gfttbzm.rkt:23:4\n\n+: contract violation\n  expected: number?\n  given: #<void>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0gfttbzm.rkt:24:4\n\n+: contract violation\n  expected: number?\n  given: #<void>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0gfttbzm.rkt:25:4\n\n+: contract violation\n  expected: number?\n  given: #<void>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (sum-of-divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n        (if (zero? (modulo n i)) i)))\n    (apply + (divisors n)))\n  (define (is-amicable? n)\n    (let ([m (sum-of-divisors n)])\n      (and (not (= n m)) (= n (sum-of-divisors m)))))\n  (apply + (for/list ([i (in-range 1 limit)])\n            (if (is-amicable? i) i))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122695,
      "stdout": "",
      "stderr": "/tmp/tmpnibg89hu.rkt:8:8: if: missing an \"else\" expression\n  in: (if (zero? (modulo n i)) i)\n  location...:\n   /tmp/tmpnibg89hu.rkt:8:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (filter (lambda (x) (= (remainder n x) 0)) (range 1 (add1 (quotient n 2)))))\n  (define (sum_divisors n)\n    (apply + (divisors n)))\n  (define (is_amicable? n)\n    (let ((m (sum_divisors n)))\n      (and (not (= n m)) (= (sum_divisors m) n))))\n  (apply + (filter is_amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (filter (lambda (x) (= 0 (modulo n x))) (range 1 (add1 (quotient n 2)))))\n  (define (sum_divisors n)\n    (apply + (divisors n)))\n  (define (amicable? n)\n    (let ((m (sum_divisors n)))\n      (and (not (= n m)) (= n (sum_divisors m)))))\n  (apply + (filter amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122666,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable? n)\n    (let ((m (sum_divisors n)))\n      (and (not (= n m)) (= (sum_divisors m) n))))\n  (define (sum_divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (quotient n 2))]\n                 #:when (zero? (modulo n i)))\n        i))\n    (apply + (divisors n)))\n  (apply + (filter amicable? (in-range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122696,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb00m_u_w.rkt:21:4\n\nfilter: contract violation\n  expected: list?\n  given: #<stream>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb00m_u_w.rkt:22:4\n\nfilter: contract violation\n  expected: list?\n  given: #<stream>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb00m_u_w.rkt:23:4\n\nfilter: contract violation\n  expected: list?\n  given: #<stream>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (sum-divisors n)\n    (let loop ((i 1) (sum 0))\n      (cond ((&gt; i (/ n 2)) sum)\n            ((= (modulo n i) 0) (loop (+ i 1) (+ sum i)))\n            (else (loop (+ i 1) sum)))))\n  (let loop ((i 1) (sum 0))\n    (cond ((&gt; i limit) sum)\n          ((= (sum-divisors i) (sum-divisors (sum-divisors i)))\n           (loop (+ i 1) (+ sum i)))\n          (else (loop (+ i 1) sum)))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122695,
      "stdout": "",
      "stderr": "/tmp/tmpcyo5qcyo.rkt:10:2: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 15\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (filter (lambda (x) (= 0 (modulo n x))) (range 1 (add1 (quotient n 2)))))\n  (define (sum_divisors n)\n    (apply + (divisors n)))\n  (define (amicable? n)\n    (let ((m (sum_divisors n)))\n      (and (not (= n m)) (= n (sum_divisors m)))))\n  (apply + (filter amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122666,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (filter (lambda (x) (= 0 (modulo n x)))\n            (range 1 (add1 (quotient n 2)))))\n  (define (amicable? n)\n    (let ((m (apply + (divisors n))))\n      (and (= n (apply + (divisors m)))\n           (not (= n m)))))\n  (apply + (filter amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122698,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (sum-of-divisors n)\n    (define (sum-of-divisors-iter n sum)\n      (cond ((= n 1) sum)\n            ((= (remainder n 2) 0)\n             (sum-of-divisors-iter (/ n 2) (+ sum n)))\n            (else (sum-of-divisors-iter (- n 1) sum))))\n    (sum-of-divisors-iter n 1))\n  (define (is-amicable? n)\n    (let ((sum-of-n (sum-of-divisors n)))\n      (and (not (= n sum-of-n)) (= n (sum-of-divisors sum-of-n)))))\n  (define (amicable-numbers-sum-iter n sum)\n    (cond ((= n limit) sum)\n          ((is-amicable? n) (amicable-numbers-sum-iter (+ n 1) (+ sum n)))\n          (else (amicable-numbers-sum-iter (+ n 1) sum))))\n  (amicable-numbers-sum-iter 1 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122696,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfw8eiaam.rkt:26:4\nactual:     0\nexpected:   504\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfw8eiaam.rkt:27:4\nactual:     0\nexpected:   31626\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable-numbers-sum-iter limit sum)\n    (if (= limit 0)\n        sum\n        (let ((sum-of-divisors (sum-of-divisors limit)))\n          (if (and (= sum-of-divisors (sum-of-divisors sum-of-divisors))\n                   (not (= limit sum-of-divisors)))\n              (amicable-numbers-sum-iter (- limit 1) (+ sum limit))\n              (amicable-numbers-sum-iter (- limit 1) sum)))))\n  (amicable-numbers-sum-iter limit 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122696,
      "stdout": "",
      "stderr": "/tmp/tmpbwu9feo9.rkt:8:32: sum-of-divisors: unbound identifier\n  in: sum-of-divisors\n  location...:\n   /tmp/tmpbwu9feo9.rkt:8:32\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable? a)\n    (let ((b (sum_of_divisors a)))\n      (and (not (= a b)) (= a (sum_of_divisors b)))))\n  (define (sum_of_divisors n)\n    (define (divisors n)\n      (filter (lambda (x) (= 0 (modulo n x))) (range 1 (add1 (quotient n 2)))))\n    (apply + (divisors n)))\n  (apply + (filter amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122698,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (filter (lambda (x) (= (remainder n x) 0))\n            (range 1 (add1 (quotient n 2)))))\n  (define (amicable? n)\n    (let ((sum-of-divisors (apply + (divisors n))))\n      (and (not (= n sum-of-divisors))\n           (= (apply + (divisors sum-of-divisors)) n))))\n  (apply + (filter amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122698,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable-pair? a b)\n    (and (= (sum-of-divisors a) b)\n         (= (sum-of-divisors b) a)))\n  (define (sum-of-divisors n)\n    (define (divisors n)\n      (filter (lambda (x) (= (remainder n x) 0))\n              (range 1 (add1 (quotient n 2)))))\n    (apply + (divisors n)))\n  (define (range a b)\n    (if (> a b)\n        '()\n        (cons a (range (add1 a) b))))\n  (define (filter pred lst)\n    (cond ((null? lst) '())\n          ((pred (car lst)) (cons (car lst) (filter pred (cdr lst))))\n          (else (filter pred (cdr lst)))))\n  (apply + (filter (lambda (x) (amicable-pair? x (sum-of-divisors x)))\n                   (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122698,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw7enab2k.rkt:29:4\nactual:     1035\nexpected:   504\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw7enab2k.rkt:30:4\nactual:     40285\nexpected:   31626\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw7enab2k.rkt:31:4\nactual:     35\nexpected:   0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable? n)\n    (let ((m (sum_of_divisors n)))\n      (and (not (= n m)) (= n (sum_of_divisors m)))))\n  (define (sum_of_divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n        (if (zero? (modulo n i)) i)))\n    (apply + (divisors n)))\n  (apply + (filter amicable? (in-range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509996,
      "stdout": "",
      "stderr": "/tmp/tmpdg7dm2_1.rkt:11:8: if: missing an \"else\" expression\n  in: (if (zero? (modulo n i)) i)\n  location...:\n   /tmp/tmpdg7dm2_1.rkt:11:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (filter (lambda (x) (= (modulo n x) 0)) (range 1 n)))\n  (define (amicable? n)\n    (let ((m (apply + (divisors n))))\n      (and (= n (apply + (divisors m)))\n           (not (= n m)))))\n  (apply + (filter amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122700,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (sum-of-divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (quotient n 2))])\n        (when (zero? (modulo n i))\n          i)))\n    (apply + (divisors n)))\n  (define (is-amicable? n)\n    (let ([n2 (sum-of-divisors n)])\n      (and (not (= n n2))\n           (= n (sum-of-divisors n2)))))\n  (apply + (for/list ([i (in-range 1 limit)])\n              (when (is-amicable? i)\n                i))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122697,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu689o5lq.rkt:24:4\n\n+: contract violation\n  expected: number?\n  given: #<void>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu689o5lq.rkt:25:4\n\n+: contract violation\n  expected: number?\n  given: #<void>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu689o5lq.rkt:26:4\n\n+: contract violation\n  expected: number?\n  given: #<void>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable-pair? a b)\n    (and (= (sum-of-divisors a) b)\n         (= (sum-of-divisors b) a)))\n  (define (sum-of-divisors n)\n    (define (divisors n)\n      (filter (lambda (x) (= (modulo n x) 0))\n              (range 1 (add1 (quotient n 2)))))\n    (apply + (divisors n)))\n  (define (amicable-numbers limit)\n    (filter (lambda (x) (amicable-pair? x (sum-of-divisors x)))\n            (range 1 limit)))\n  (apply + (amicable-numbers limit)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122700,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjuyc5yaq.rkt:23:4\nactual:     1034\nexpected:   504\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjuyc5yaq.rkt:24:4\nactual:     40284\nexpected:   31626\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjuyc5yaq.rkt:25:4\nactual:     34\nexpected:   0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (sum-of-divisors n)\n    (define (divisors n)\n      (filter (lambda (x) (= (modulo n x) 0)) (range 1 (add1 (quotient n 2)))))\n    (apply + (divisors n)))\n  (define (amicable? n)\n    (let ((m (sum-of-divisors n)))\n      (and (= (sum-of-divisors m) n)\n           (not (= m n)))))\n  (apply + (filter amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122699,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (filter (lambda (x) (= (remainder n x) 0))\n            (range 1 (add1 (quotient n 2)))))\n  (define (sum_divisors n)\n    (apply + (divisors n)))\n  (define (amicable? n)\n    (let ((n2 (sum_divisors n)))\n      (and (not (= n n2))\n           (= (sum_divisors n2) n))))\n  (apply + (filter amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122698,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (filter (lambda (x) (= 0 (modulo n x)))\n            (range 1 (add1 (floor (sqrt n))))))\n  (define (sum_divisors n)\n    (apply + (divisors n)))\n  (define (amicable? a b)\n    (and (= (sum_divisors a) b)\n         (= (sum_divisors b) a)))\n  (define (amicable-pairs limit)\n    (filter (lambda (pair) (amicable? (car pair) (cdr pair)))\n            (map (lambda (x) (cons x (sum_divisors x)))\n                 (range 1 limit))))\n  (apply + (map car (amicable-pairs limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122697,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmx1yhkta.rkt:24:4\nactual:     1\nexpected:   504\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmx1yhkta.rkt:25:4\nactual:     1\nexpected:   31626\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmx1yhkta.rkt:26:4\nactual:     1\nexpected:   0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable-pair? a b)\n    (and (= (sum-of-divisors a) b)\n         (= (sum-of-divisors b) a)))\n  (define (sum-of-divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (quotient n 2))]\n                 #:when (zero? (remainder n i)))\n        i))\n    (apply + (divisors n)))\n  (define (amicable-numbers-below n)\n    (for/list ([i (in-range 1 n)]\n               #:when (amicable-pair? i (sum-of-divisors i)))\n      i))\n  (apply + (amicable-numbers-below limit)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122699,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpipawiaob.rkt:25:4\nactual:     24\nexpected:   504\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpipawiaob.rkt:26:4\nactual:     24\nexpected:   31626\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpipawiaob.rkt:27:4\nactual:     24\nexpected:   0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (filter (lambda (x) (= 0 (modulo n x)))\n            (range 1 (add1 (quotient n 2)))))\n  (define (sum_divisors n)\n    (apply + (divisors n)))\n  (define (amicable? n)\n    (let ((m (sum_divisors n)))\n      (and (not (= n m))\n           (= (sum_divisors m) n))))\n  (apply + (filter amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (sum-of-divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (quotient n 2))]\n                 #:when (zero? (modulo n i)))\n        i))\n    (apply + (divisors n)))\n  (define (amicable? n)\n    (let ([m (sum-of-divisors n)])\n      (and (not (= n m)) (= n (sum-of-divisors m)))))\n  (apply + (for/list ([i (in-range 1 limit)]\n                     #:when (amicable? i))\n            i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122698,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6ryxskx3.rkt:23:4\nactual:     0\nexpected:   504\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6ryxskx3.rkt:24:4\nactual:     0\nexpected:   31626\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (filter (lambda (x) (= (remainder n x) 0))\n            (range 1 (add1 (quotient n 2)))))\n  (define (sum_divisors n)\n    (apply + (divisors n)))\n  (define (amicable? n)\n    (let ((sum (sum_divisors n)))\n      (and (not (= n sum))\n           (= (sum_divisors sum) n))))\n  (apply + (filter amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable-number? n)\n    (let ((m (sum-of-divisors n)))\n      (and (not (= n m)) (= n (sum-of-divisors m)))))\n  (define (sum-of-divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n        (if (zero? (modulo n i)) i)))\n    (apply + (divisors n)))\n  (apply + (filter amicable-number? (in-range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122698,
      "stdout": "",
      "stderr": "/tmp/tmpku5l5tqy.rkt:11:8: if: missing an \"else\" expression\n  in: (if (zero? (modulo n i)) i)\n  location...:\n   /tmp/tmpku5l5tqy.rkt:11:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable? n)\n    (let ((m (sum_of_divisors n)))\n      (and (not (= n m)) (= (sum_of_divisors m) n))))\n  (define (sum_of_divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (quotient n 2))]\n                 #:when (zero? (modulo n i)))\n        i))\n    (apply + (divisors n)))\n  (apply + (filter amicable? (in-range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122698,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvpfyx2hx.rkt:21:4\n\nfilter: contract violation\n  expected: list?\n  given: #<stream>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvpfyx2hx.rkt:22:4\n\nfilter: contract violation\n  expected: list?\n  given: #<stream>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvpfyx2hx.rkt:23:4\n\nfilter: contract violation\n  expected: list?\n  given: #<stream>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (filter (lambda (x) (= 0 (modulo n x)))\n            (range 1 (add1 (quotient n 2)))))\n  (define (sum_divisors n)\n    (apply + (divisors n)))\n  (define (amicable? n)\n    (let ((n2 (sum_divisors n)))\n      (and (= n (sum_divisors n2))\n           (not (= n n2)))))\n  (apply + (filter amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122700,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable? n)\n    (let ((m (sum-of-divisors n)))\n      (and (not (= n m)) (= n (sum-of-divisors m)))))\n  (define (sum-of-divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (quotient n 2))]\n                 #:when (zero? (modulo n i)))\n        i))\n    (apply + (divisors n)))\n  (apply + (filter amicable? (in-range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122699,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphjybkb_k.rkt:21:4\n\nfilter: contract violation\n  expected: list?\n  given: #<stream>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphjybkb_k.rkt:22:4\n\nfilter: contract violation\n  expected: list?\n  given: #<stream>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphjybkb_k.rkt:23:4\n\nfilter: contract violation\n  expected: list?\n  given: #<stream>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (filter (lambda (x) (= 0 (modulo n x)))\n            (range 1 (add1 (quotient n 2)))))\n  (define (sum_divisors n)\n    (apply + (divisors n)))\n  (define (is_amicable? n)\n    (let ((m (sum_divisors n)))\n      (and (= n (sum_divisors m))\n           (not (= n m)))))\n  (apply + (filter is_amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122700,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable-numbers-sum-iter limit sum)\n    (cond ((= limit 1) sum)\n          ((= (sum-of-divisors (sum-of-divisors limit)) limit)\n           (amicable-numbers-sum-iter (- limit 1) (+ limit sum)))\n          (else (amicable-numbers-sum-iter (- limit 1) sum))))\n  (amicable-numbers-sum-iter limit 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122699,
      "stdout": "",
      "stderr": "/tmp/tmpu1dlsm2l.rkt:7:15: sum-of-divisors: unbound identifier\n  in: sum-of-divisors\n  location...:\n   /tmp/tmpu1dlsm2l.rkt:7:15\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (sum-divisors n)\n    (define (sum-divisors-iter n divisor sum)\n      (cond ((= n 1) sum)\n            ((= 0 (modulo n divisor))\n             (sum-divisors-iter (/ n divisor) divisor (+ sum divisor)))\n            (else (sum-divisors-iter n (+ divisor 1) sum))))\n    (sum-divisors-iter n 2 0))\n  (define (is-amicable n)\n    (let ((m (sum-divisors n)))\n      (and (= m (/ n 2))\n           (= (sum-divisors m) n))))\n  (define (amicable-numbers-sum-iter n sum)\n    (cond ((= n limit) sum)\n          ((is-amicable n) (amicable-numbers-sum-iter (+ n 1) (+ sum n)))\n          (else (amicable-numbers-sum-iter (+ n 1) sum))))\n  (amicable-numbers-sum-iter 1 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122699,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6aj6ix1n.rkt:27:4\nactual:     0\nexpected:   504\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6aj6ix1n.rkt:28:4\nactual:     0\nexpected:   31626\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (filter (lambda (x) (= 0 (modulo n x))) (range 1 (add1 (quotient n 2)))))\n  (define (amicable? n)\n    (let ([m (apply + (divisors n))])\n      (and (= n (apply + (divisors m)))\n           (not (= n m)))))\n  (apply + (filter amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122700,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (let loop ((i 1) (sum 0))\n    (cond ((&gt; i limit) sum)\n          ((= (sum_of_divisors i) (+ i (sum_of_divisors (sum_of_divisors i))))\n           (loop (+ i 1) (+ sum i (sum_of_divisors i))))\n          (else (loop (+ i 1) sum)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509994,
      "stdout": "",
      "stderr": "/tmp/tmp7x883ea0.rkt:5:2: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 11\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable? a)\n    (let ((b (sum_of_divisors a)))\n      (and (= a (sum_of_divisors b))\n           (/= a b))))\n  (define (sum_of_divisors n)\n    (define (divisors n)\n      (filter (lambda (x) (= 0 (modulo n x)))\n              (range 1 (add1 (quotient n 2)))))\n    (apply + (divisors n)))\n  (apply + (filter amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122699,
      "stdout": "",
      "stderr": "/tmp/tmpmy6407ep.rkt:8:12: /=: unbound identifier\n  in: /=\n  location...:\n   /tmp/tmpmy6407ep.rkt:8:12\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (sum-of-divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (quotient n 2))]\n                 #:when (zero? (modulo n i)))\n        i))\n    (apply + (divisors n)))\n  (define (amicable? n)\n    (let ([m (sum-of-divisors n)])\n      (and (not (= n m)) (= (sum-of-divisors m) n))))\n  (apply + (filter amicable? (in-range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122699,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfvmgrrpr.rkt:21:4\n\nfilter: contract violation\n  expected: list?\n  given: #<stream>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfvmgrrpr.rkt:22:4\n\nfilter: contract violation\n  expected: list?\n  given: #<stream>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfvmgrrpr.rkt:23:4\n\nfilter: contract violation\n  expected: list?\n  given: #<stream>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable-numbers-sum-iter limit sum)\n    (cond ((&gt; limit 1)\n           (let ((divisor-sum (divisor-sum limit)))\n             (if (and (&gt; divisor-sum 1)\n                      (= (divisor-sum divisor-sum) limit)\n                      (&lt; limit divisor-sum))\n                 (amicable-numbers-sum-iter (- limit 1) (+ sum limit divisor-sum))\n                 (amicable-numbers-sum-iter (- limit 1) sum))))\n          (else sum)))\n  (amicable-numbers-sum-iter limit 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122699,
      "stdout": "",
      "stderr": "/tmp/tmpfiacwk1p.rkt:6:10: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 16\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (define (divisors-iter n i acc)\n      (if (= n i)\n          acc\n          (if (= (modulo n i) 0)\n              (divisors-iter n (+ i 1) (cons i acc))\n              (divisors-iter n (+ i 1) acc))))\n    (divisors-iter n 1 '()))\n  (define (sum-divisors n)\n    (apply + (divisors n)))\n  (define (is-amicable? n)\n    (let ((sum-n (sum-divisors n)))\n      (and (= (sum-divisors sum-n) n)\n           (not (= n sum-n)))))\n  (define (amicable-numbers-sum-iter n acc)\n    (if (= n limit)\n        acc\n        (if (is-amicable? n)\n            (amicable-numbers-sum-iter (+ n 1) (+ n acc))\n            (amicable-numbers-sum-iter (+ n 1) acc))))\n  (amicable-numbers-sum-iter 1 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (filter (lambda (x) (= (remainder n x) 0)) (range 1 (add1 (quotient n 2)))))\n  (define (sum_of_divisors n)\n    (apply + (divisors n)))\n  (define (amicable? n)\n    (let ((m (sum_of_divisors n)))\n      (and (not (= n m)) (= (sum_of_divisors m) n))))\n  (apply + (filter amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122701,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (filter (lambda (x) (= 0 (remainder n x))) (range 1 (add1 (quotient n 2)))))\n  (define (sum_divisors n)\n    (apply + (divisors n)))\n  (define (amicable? n)\n    (let ((m (sum_divisors n)))\n      (and (not (= n m)) (= n (sum_divisors m)))))\n  (apply + (filter amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122701,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable-pair? a b)\n    (and (= (sum-of-divisors a) b)\n         (= (sum-of-divisors b) a)))\n  (define (sum-of-divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n        (if (zero? (modulo n i)) i)))\n    (apply + (divisors n)))\n  (define (amicable-numbers)\n    (for/list ([i (in-range 1 limit)])\n      (let ([s (sum-of-divisors i)])\n        (if (and (amicable-pair? i s)\n                 (not (zero? s)))\n            i))))\n  (apply + (amicable-numbers)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122700,
      "stdout": "",
      "stderr": "/tmp/tmpq5r7jbxq.rkt:11:8: if: missing an \"else\" expression\n  in: (if (zero? (modulo n i)) i)\n  location...:\n   /tmp/tmpq5r7jbxq.rkt:11:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable-numbers-sum-iter limit sum)\n    (cond\n      [(= limit 1) sum]\n      [(amicable? limit) (amicable-numbers-sum-iter (- limit 1) (+ limit sum))]\n      [else (amicable-numbers-sum-iter (- limit 1) sum)]))\n  (amicable-numbers-sum-iter limit 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122666,
      "stdout": "",
      "stderr": "/tmp/tmprej492wc.rkt:8:8: amicable?: unbound identifier\n  in: amicable?\n  location...:\n   /tmp/tmprej492wc.rkt:8:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable-pairs limit)\n    (for/list ([i (in-range 1 limit)])\n      (let ([d (sum-of-divisors i)])\n        (when (and (= (sum-of-divisors d) i)\n                   (not (= i d)))\n          (list i d)))))\n  (apply + (apply append (amicable-pairs limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122700,
      "stdout": "",
      "stderr": "/tmp/tmpheglsxf2.rkt:7:16: sum-of-divisors: unbound identifier\n  in: sum-of-divisors\n  location...:\n   /tmp/tmpheglsxf2.rkt:7:16\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable? n)\n    (let ((m (sum-of-divisors n)))\n      (and (not (= n m)) (= (sum-of-divisors m) n))))\n  (define (sum-of-divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n        (if (zero? (modulo n i)) i)))\n    (apply + (divisors n)))\n  (apply + (filter amicable? (in-range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122661,
      "stdout": "",
      "stderr": "/tmp/tmpjakfljld.rkt:11:8: if: missing an \"else\" expression\n  in: (if (zero? (modulo n i)) i)\n  location...:\n   /tmp/tmpjakfljld.rkt:11:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable-numbers-sum-iter limit sum)\n    (cond\n      [(= limit 1) sum]\n      [(amicable? limit) (amicable-numbers-sum-iter (- limit 1) (+ limit sum))]\n      [else (amicable-numbers-sum-iter (- limit 1) sum)]))\n  (amicable-numbers-sum-iter limit 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122666,
      "stdout": "",
      "stderr": "/tmp/tmprej492wc.rkt:8:8: amicable?: unbound identifier\n  in: amicable?\n  location...:\n   /tmp/tmprej492wc.rkt:8:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable-pair? a b)\n    (and (= (sum-of-divisors a) b) (= (sum-of-divisors b) a)))\n  (define (sum-of-divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (quotient n 2))]\n                 #:when (zero? (remainder n i)))\n        i))\n    (apply + (divisors n)))\n  (define (amicable-numbers)\n    (for/list ([i (in-range 1 limit)]\n               [j (in-range 1 limit)])\n      (when (amicable-pair? i j)\n        i)))\n  (apply + (amicable-numbers)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122701,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzg3otish.rkt:25:4\n\n+: contract violation\n  expected: number?\n  given: #<void>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzg3otish.rkt:26:4\n\n+: contract violation\n  expected: number?\n  given: #<void>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzg3otish.rkt:27:4\n\n+: contract violation\n  expected: number?\n  given: #<void>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable-pair? n)\n    (let ((m (sum-of-divisors n)))\n      (and (not (= n m)) (= (sum-of-divisors m) n))))\n  (define (sum-of-divisors n)\n    (define (divisors n)\n      (let loop ((i 1) (divisors '()))\n        (cond ((= i n) (cons i divisors))\n              ((divides? i n) (loop (+ i 1) (cons i divisors)))\n              (else (loop (+ i 1) divisors)))))\n    (apply + (divisors n)))\n  (define (divides? a b) (= (remainder b a) 0))\n  (define (amicable-numbers n)\n    (let loop ((i 1) (amicable-numbers '()))\n      (cond ((= i n) amicable-numbers)\n            ((amicable-pair? i) (loop (+ i 1) (cons i amicable-numbers)))\n            (else (loop (+ i 1) amicable-numbers)))))\n  (apply + (amicable-numbers limit)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122702,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2kxkeywo.rkt:28:4\nactual:     0\nexpected:   504\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2kxkeywo.rkt:29:4\nactual:     0\nexpected:   31626\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable? n)\n    (let ((m (sum-of-divisors n)))\n      (and (not (= n m)) (= n (sum-of-divisors m)))))\n  (define (sum-of-divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n        (if (zero? (modulo n i)) i)))\n    (apply + (divisors n)))\n  (apply + (filter amicable? (in-range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "/tmp/tmpvxdbu3xg.rkt:11:8: if: missing an \"else\" expression\n  in: (if (zero? (modulo n i)) i)\n  location...:\n   /tmp/tmpvxdbu3xg.rkt:11:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (filter (lambda (x) (= 0 (remainder n x))) (range 1 (add1 (quotient n 2)))))\n  (define (sum_divisors n)\n    (apply + (divisors n)))\n  (define (amicable? n)\n    (let ((n2 (sum_divisors n)))\n      (and (not (= n n2)) (= n (sum_divisors n2)))))\n  (apply + (filter amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable? n)\n    (let ([m (sum_of_proper_divisors n)])\n      (and (not (= n m)) (= n (sum_of_proper_divisors m)))))\n  (define (sum_of_proper_divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (quotient n 2))]\n                 #:when (zero? (remainder n i)))\n        i))\n    (apply + (divisors n)))\n  (apply + (filter amicable? (in-range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122700,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq5sb3s8q.rkt:21:4\n\nfilter: contract violation\n  expected: list?\n  given: #<stream>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq5sb3s8q.rkt:22:4\n\nfilter: contract violation\n  expected: list?\n  given: #<stream>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq5sb3s8q.rkt:23:4\n\nfilter: contract violation\n  expected: list?\n  given: #<stream>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable-sum n)\n    (define (sum-of-divisors n)\n      (define (divisors n)\n        (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n          (if (zero? (modulo n i)) i)))\n      (apply + (divisors n)))\n    (define (amicable-pair? n)\n      (let ([m (sum-of-divisors n)])\n        (and (not (zero? m))\n             (= n (sum-of-divisors m)))))\n    (for/sum ([i (in-range 1 limit)])\n      (if (amicable-pair? i) i)))\n  (amicable-sum limit))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122700,
      "stdout": "",
      "stderr": "/tmp/tmprm1x9c8u.rkt:9:10: if: missing an \"else\" expression\n  in: (if (zero? (modulo n i)) i)\n  location...:\n   /tmp/tmprm1x9c8u.rkt:9:10\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable-pair? a b)\n    (and (= (sum-of-divisors a) b)\n         (= (sum-of-divisors b) a)))\n  (define (sum-of-divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (quotient n 2))]\n                 #:when (zero? (modulo n i)))\n        i))\n    (apply + (divisors n)))\n  (define (amicable-numbers limit)\n    (for/list ([i (in-range 1 limit)]\n               [j (in-range 1 limit)])\n      (if (amicable-pair? i j)\n          i)))\n  (apply + (amicable-numbers limit)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122700,
      "stdout": "",
      "stderr": "/tmp/tmpboj8kogt.rkt:17:6: if: missing an \"else\" expression\n  in: (if (amicable-pair? i j) i)\n  location...:\n   /tmp/tmpboj8kogt.rkt:17:6\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable-pair? n)\n    (let ((m (sum-of-divisors n)))\n      (and (not (= n m)) (= n (sum-of-divisors m)))))\n  (define (sum-of-divisors n)\n    (accumulate + 0 (filter (lambda (x) (divides? x n)) (range 1 n))))\n  (accumulate + 0 (filter amicable-pair? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122700,
      "stdout": "",
      "stderr": "/tmp/tmplsmjdomw.rkt:9:5: accumulate: unbound identifier\n  in: accumulate\n  location...:\n   /tmp/tmplsmjdomw.rkt:9:5\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (sum_divisors n)\n    (define (sum_divisors-iter n divisor sum)\n      (cond ((= n 1) sum)\n            ((= 0 (modulo n divisor))\n             (sum_divisors-iter (/ n divisor) divisor (+ sum divisor)))\n            (else (sum_divisors-iter n (+ divisor 1) sum))))\n    (sum_divisors-iter n 2 0))\n  (define (is-amicable? n)\n    (let ((m (sum_divisors n)))\n      (and (= n (sum_divisors m))\n           (not (= n m)))))\n  (define (amicable-numbers-sum-iter n sum)\n    (cond ((= n limit) sum)\n          ((is-amicable? n) (amicable-numbers-sum-iter (+ n 1) (+ sum n)))\n          (else (amicable-numbers-sum-iter (+ n 1) sum))))\n  (amicable-numbers-sum-iter 1 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (let loop ((i 1) (sum 0))\n    (cond ((&gt; i limit) sum)\n          ((= (sum_of_divisors i) (+ i (sum_of_divisors (sum_of_divisors i))))\n           (loop (+ i 1) (+ sum i (sum_of_divisors i))))\n          (else (loop (+ i 1) sum)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509994,
      "stdout": "",
      "stderr": "/tmp/tmp7x883ea0.rkt:5:2: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 11\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable-pair? a b)\n    (and (= (sum-of-divisors a) b)\n         (= (sum-of-divisors b) a)))\n  (define (sum-of-divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n        (if (zero? (modulo n i)) i)))\n    (apply + (divisors n)))\n  (define (amicable-numbers n)\n    (for/list ([i (in-range 1 n)])\n      (let ([sum (sum-of-divisors i)])\n        (if (and (amicable-pair? i sum)\n                 (not (zero? sum)))\n            i))))\n  (apply + (amicable-numbers limit)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122701,
      "stdout": "",
      "stderr": "/tmp/tmpwbiqpxum.rkt:11:8: if: missing an \"else\" expression\n  in: (if (zero? (modulo n i)) i)\n  location...:\n   /tmp/tmpwbiqpxum.rkt:11:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (sum-of-divisors n)\n    (define (sum-of-divisors-iter n i sum)\n      (cond ((= i n) sum)\n            ((= 0 (modulo n i)) (sum-of-divisors-iter n (+ i 1) (+ sum i)))\n            (else (sum-of-divisors-iter n (+ i 1) sum))))\n    (sum-of-divisors-iter n 1 0))\n  (define (amicable-numbers-sum-iter n sum)\n    (cond ((= n limit) sum)\n          ((= (sum-of-divisors (sum-of-divisors n)) n) (amicable-numbers-sum-iter (+ n 1) (+ sum n)))\n          (else (amicable-numbers-sum-iter (+ n 1) sum))))\n  (amicable-numbers-sum-iter 1 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (filter (lambda (x) (= (remainder n x) 0)) (range 1 n)))\n  (define (sum_divisors n)\n    (apply + (divisors n)))\n  (define (amicable? n)\n    (let ((sum (sum_divisors n)))\n      (and (not (= n sum)) (= (sum_divisors sum) n))))\n  (apply + (filter amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122704,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable? n)\n    (let ([m (sum_of_divisors n)])\n      (and (not (= n m)) (= (sum_of_divisors m) n))))\n  (define (sum_of_divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n        (if (zero? (modulo n i)) i)))\n    (apply + (divisors n)))\n  (apply + (filter amicable? (in-range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122667,
      "stdout": "",
      "stderr": "/tmp/tmpsya7327b.rkt:11:8: if: missing an \"else\" expression\n  in: (if (zero? (modulo n i)) i)\n  location...:\n   /tmp/tmpsya7327b.rkt:11:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (sum-of-divisors n)\n    (define (divisors n)\n      (filter (lambda (x) (= (modulo n x) 0))\n              (range 1 (add1 (quotient n 2)))))\n    (apply + (divisors n)))\n  (define (amicable? n)\n    (let ((m (sum-of-divisors n)))\n      (and (not (= n m)) (= (sum-of-divisors m) n))))\n  (apply + (filter amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122703,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (filter (lambda (x) (= (remainder n x) 0))\n            (range 1 (add1 (quotient n 2)))))\n  (define (proper-divisors n)\n    (filter (lambda (x) (not (= x n))) (divisors n)))\n  (define (sum-proper-divisors n)\n    (apply + (proper-divisors n)))\n  (define (amicable? n)\n    (let ((m (sum-proper-divisors n)))\n      (and (= (sum-proper-divisors m) n)\n           (not (= n m)))))\n  (apply + (filter amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122703,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable? n)\n    (let ((m (sum_of_divisors n)))\n      (and (not (= n m)) (= n (sum_of_divisors m)))))\n  (define (sum_of_divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n        (if (zero? (modulo n i)) i)))\n    (apply + (divisors n)))\n  (apply + (filter amicable? (in-range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665509996,
      "stdout": "",
      "stderr": "/tmp/tmpdg7dm2_1.rkt:11:8: if: missing an \"else\" expression\n  in: (if (zero? (modulo n i)) i)\n  location...:\n   /tmp/tmpdg7dm2_1.rkt:11:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (sum_of_divisors n)\n    (define (divisors n)\n      (filter (lambda (x) (= (modulo n x) 0))\n              (range 1 (add1 (truncate (sqrt n))))))\n    (apply + (divisors n)))\n  (define (amicable? n)\n    (let ((m (sum_of_divisors n)))\n      (and (not (= n m)) (= (sum_of_divisors m) n))))\n  (apply + (filter amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122701,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa4qtsr5k.rkt:20:4\nactual:     0\nexpected:   504\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa4qtsr5k.rkt:21:4\nactual:     0\nexpected:   31626\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable? a)\n    (let ((b (sum_of_divisors a)))\n      (and (not (= a b)) (= (sum_of_divisors b) a))))\n  (define (sum_of_divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n        (if (zero? (modulo n i)) i)))\n    (apply + (divisors n)))\n  (apply + (filter amicable? (in-range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122701,
      "stdout": "",
      "stderr": "/tmp/tmpslautlin.rkt:11:8: if: missing an \"else\" expression\n  in: (if (zero? (modulo n i)) i)\n  location...:\n   /tmp/tmpslautlin.rkt:11:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (sum-of-divisors n)\n    (define (sum-of-divisors-iter n sum)\n      (cond ((= n 1) sum)\n            ((= (remainder n 2) 0)\n             (sum-of-divisors-iter (/ n 2) (+ sum n)))\n            (else (sum-of-divisors-iter (- n 1) sum))))\n    (sum-of-divisors-iter n 1))\n  (define (is-amicable? n)\n    (let ((n-sum (sum-of-divisors n)))\n      (and (= n-sum (sum-of-divisors n-sum))\n           (not (= n n-sum)))))\n  (define (amicable-numbers-sum-iter n sum)\n    (cond ((= n limit) sum)\n          ((is-amicable? n) (amicable-numbers-sum-iter (+ n 1) (+ sum n)))\n          (else (amicable-numbers-sum-iter (+ n 1) sum))))\n  (amicable-numbers-sum-iter 1 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122702,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvanpglv7.rkt:27:4\nactual:     2\nexpected:   504\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvanpglv7.rkt:28:4\nactual:     2\nexpected:   31626\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvanpglv7.rkt:29:4\nactual:     2\nexpected:   0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (for/list ([i (in-range 1 (quotient n 2))]\n               #:when (zero? (modulo n i)))\n      i))\n  (define (amicable? n)\n    (let ([d (divisors n)])\n      (and (not (empty? d))\n           (= n (apply + (divisors (apply + d)))))))\n  (apply + (for/list ([i (in-range 1 limit)]\n                      #:when (amicable? i))\n                i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122703,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_lwrf14u.rkt:22:4\nactual:     24\nexpected:   504\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_lwrf14u.rkt:23:4\nactual:     24\nexpected:   31626\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_lwrf14u.rkt:24:4\nactual:     24\nexpected:   0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (sum-divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (quotient n 2))]\n                 #:when (zero? (modulo n i)))\n        i))\n    (apply + (divisors n)))\n  (define (amicable? n)\n    (let ([m (sum-divisors n)])\n      (and (not (= n m)) (= (sum-divisors m) n))))\n  (apply + (for/list ([i (in-range 1 limit)]\n                     #:when (amicable? i))\n              i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122703,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq731od5t.rkt:23:4\nactual:     0\nexpected:   504\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq731od5t.rkt:24:4\nactual:     0\nexpected:   31626\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (sum-of-divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n        (if (zero? (modulo n i)) i)))\n    (apply + (divisors n)))\n  (define (is-amicable? n)\n    (let ([m (sum-of-divisors n)])\n      (and (not (= n m)) (= n (sum-of-divisors m)))))\n  (apply + (filter is-amicable? (in-range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122702,
      "stdout": "",
      "stderr": "/tmp/tmpagamrpvg.rkt:8:8: if: missing an \"else\" expression\n  in: (if (zero? (modulo n i)) i)\n  location...:\n   /tmp/tmpagamrpvg.rkt:8:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (sum-divisors n)\n    (define (sum-divisors-iter n acc)\n      (cond\n        [(= n 1) acc]\n        [(= (remainder n 2) 0) (sum-divisors-iter (/ n 2) (+ acc n))]\n        [(= (remainder n 3) 0) (sum-divisors-iter (/ n 3) (+ acc n))]\n        [(= (remainder n 5) 0) (sum-divisors-iter (/ n 5) (+ acc n))]\n        [(= (remainder n 7) 0) (sum-divisors-iter (/ n 7) (+ acc n))]\n        [else (sum-divisors-iter (- n 1) (+ acc n))]))\n    (sum-divisors-iter n 0))\n  (define (amicable-numbers-sum-iter n acc)\n    (cond\n      [(= n limit) acc]\n      [(= (sum-divisors n) (sum-divisors (+ n 1))) (amicable-numbers-sum-iter (+ n 1) (+ acc n))]\n      [else (amicable-numbers-sum-iter (+ n 1) acc)]))\n  (amicable-numbers-sum-iter 1 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122702,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4v_3e3ha.rkt:27:4\nactual:     0\nexpected:   504\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4v_3e3ha.rkt:28:4\nactual:     0\nexpected:   31626\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable-pair? a b)\n    (and (= (sum-of-divisors a) b)\n         (= (sum-of-divisors b) a)))\n  (define (sum-of-divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (quotient n 2))]\n                 #:when (zero? (remainder n i)))\n        i))\n    (apply + (divisors n)))\n  (define (amicable-numbers n)\n    (for/list ([i (in-range 1 n)]\n               #:when (amicable-pair? i (sum-of-divisors i)))\n      i))\n  (apply + (amicable-numbers limit)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122704,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc_1uqvyt.rkt:25:4\nactual:     24\nexpected:   504\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc_1uqvyt.rkt:26:4\nactual:     24\nexpected:   31626\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc_1uqvyt.rkt:27:4\nactual:     24\nexpected:   0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable-numbers-sum-iter limit sum)\n    (cond ((= limit 0) sum)\n          ((amicable? limit) (amicable-numbers-sum-iter (- limit 1) (+ limit sum)))\n          (else (amicable-numbers-sum-iter (- limit 1) sum))))\n  (amicable-numbers-sum-iter limit 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122703,
      "stdout": "",
      "stderr": "/tmp/tmp0d7s2hud.rkt:7:12: amicable?: unbound identifier\n  in: amicable?\n  location...:\n   /tmp/tmp0d7s2hud.rkt:7:12\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable-pair? a b)\n    (and (= (sum-of-divisors a) b)\n         (= (sum-of-divisors b) a)))\n  (define (sum-of-divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (quotient n 2))]\n                 #:when (zero? (remainder n i)))\n        i))\n    (apply + (divisors n)))\n  (define (amicable-numbers-under n)\n    (for/list ([i (in-range 1 n)]\n               [j (in-range 1 n)]\n               #:when (and (amicable-pair? i j)\n                           (not (zero? i))\n                           (not (zero? j))))\n      i))\n  (apply + (amicable-numbers-under limit)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122703,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqa3tmcb7.rkt:28:4\nactual:     24\nexpected:   504\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqa3tmcb7.rkt:29:4\nactual:     24\nexpected:   31626\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqa3tmcb7.rkt:30:4\nactual:     24\nexpected:   0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable? n)\n    (let ((m (sum_of_divisors n)))\n      (and (not (= n m))\n           (= n (sum_of_divisors m)))))\n  (define (sum_of_divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n        (if (zero? (modulo n i))\n            i)))\n    (apply + (divisors n)))\n  (apply + (filter amicable? (in-range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122703,
      "stdout": "",
      "stderr": "/tmp/tmpunagndm0.rkt:12:8: if: missing an \"else\" expression\n  in: (if (zero? (modulo n i)) i)\n  location...:\n   /tmp/tmpunagndm0.rkt:12:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable-pairs-sum limit)\n    (define (divisors n)\n      (filter (lambda (x) (= 0 (modulo n x)))\n              (range 1 (add1 (quotient n 2)))))\n    (define (sum-divisors n)\n      (apply + (divisors n)))\n    (define (amicable-pair? n)\n      (let ((m (sum-divisors n)))\n        (and (= n (sum-divisors m))\n             (not (= n m)))))\n    (define (amicable-pairs limit)\n      (filter amicable-pair? (range 1 limit)))\n    (apply + (amicable-pairs limit)))\n  (amicable-pairs-sum limit))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122705,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (filter (lambda (x) (= 0 (modulo n x))) (range 1 (add1 (quotient n 2)))))\n  (define (sum_divisors n)\n    (apply + (divisors n)))\n  (define (amicable? n)\n    (let ((sum (sum_divisors n)))\n      (and (not (= n sum)) (= n (sum_divisors sum)))))\n  (apply + (filter amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122705,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable? n)\n    (let* ([m (sum_of_divisors n)]\n           [n2 (sum_of_divisors m)])\n      (and (not (= n m)) (= n n2))))\n  (define (sum_of_divisors n)\n    (define (divisors n)\n      (filter (lambda (x) (= 0 (remainder n x)))\n              (range 1 (add1 (quotient n 2)))))\n    (apply + (divisors n)))\n  (apply + (filter amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122705,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable-pair? a b)\n    (and (= (sum-of-divisors a) b) (= (sum-of-divisors b) a)))\n  (define (sum-of-divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (quotient n 2))]\n                 #:when (zero? (remainder n i)))\n        i))\n    (apply + (divisors n)))\n  (define (amicable-numbers)\n    (for/list ([i (in-range 1 limit)]\n               [j (in-range 1 limit)])\n      (when (amicable-pair? i j)\n        (list i j))))\n  (apply + (apply append (amicable-numbers))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122704,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7kjv05ar.rkt:25:4\n\nappend: contract violation\n  expected: list?\n  given: #<void>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7kjv05ar.rkt:26:4\n\nappend: contract violation\n  expected: list?\n  given: #<void>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7kjv05ar.rkt:27:4\n\nappend: contract violation\n  expected: list?\n  given: #<void>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable? n)\n    (let ((m (sum-of-divisors n)))\n      (and (not (= n m)) (= (sum-of-divisors m) n))))\n  (define (sum-of-divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n        (if (zero? (remainder n i)) i)))\n    (apply + (divisors n)))\n  (apply + (filter amicable? (in-range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122704,
      "stdout": "",
      "stderr": "/tmp/tmp16s2lte5.rkt:11:8: if: missing an \"else\" expression\n  in: (if (zero? (remainder n i)) i)\n  location...:\n   /tmp/tmp16s2lte5.rkt:11:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable? n)\n    (let ([m (sum_of_divisors n)])\n      (and (not (= n m)) (= (sum_of_divisors m) n))))\n  (define (sum_of_divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n        (if (zero? (modulo n i)) i)))\n    (apply + (divisors n)))\n  (apply + (filter amicable? (in-range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122667,
      "stdout": "",
      "stderr": "/tmp/tmpsya7327b.rkt:11:8: if: missing an \"else\" expression\n  in: (if (zero? (modulo n i)) i)\n  location...:\n   /tmp/tmpsya7327b.rkt:11:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (sum-divisors n)\n    (define (sum-divisors-iter n i sum)\n      (cond ((&gt; i n) sum)\n            ((= (modulo n i) 0) (sum-divisors-iter n (+ i 1) (+ sum i)))\n            (else (sum-divisors-iter n (+ i 1) sum))))\n    (sum-divisors-iter n 1 0))\n  (define (sum-amicable-numbers-iter n sum)\n    (cond ((&gt; n limit) sum)\n          ((= (sum-divisors n) (sum-divisors (sum-divisors n)))\n           (sum-amicable-numbers-iter (+ n 1) (+ sum n)))\n          (else (sum-amicable-numbers-iter (+ n 1) sum))))\n  (sum-amicable-numbers-iter 1 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122703,
      "stdout": "",
      "stderr": "/tmp/tmpcilfki_f.rkt:11:2: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 18\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (filter (lambda (x) (= 0 (modulo n x))) (range 1 (add1 (quotient n 2)))))\n  (define (sum_of_divisors n)\n    (apply + (divisors n)))\n  (define (is_amicable n)\n    (let ((m (sum_of-divisors n)))\n      (and (= m (sum_of_divisors m))\n           (not (= n m)))))\n  (apply + (filter is_amicable (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122704,
      "stdout": "",
      "stderr": "/tmp/tmpwr0dgzn9.rkt:10:14: sum_of-divisors: unbound identifier\n  in: sum_of-divisors\n  location...:\n   /tmp/tmpwr0dgzn9.rkt:10:14\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (sum-divisors n)\n    (define (sum-divisors-iter n sum)\n      (cond ((= n 1) sum)\n            ((= (remainder n 2) 0)\n             (sum-divisors-iter (/ n 2) (+ sum n)))\n            (else (sum-divisors-iter (- n 1) sum))))\n    (sum-divisors-iter n 1))\n  (define (is-amicable? n)\n    (let ((sum-n (sum-divisors n)))\n      (and (= (sum-divisors sum-n) n)\n           (/= sum-n n))))\n  (define (amicable-numbers-sum-iter n sum)\n    (cond ((= n limit) sum)\n          ((is-amicable? n) (amicable-numbers-sum-iter (+ n 1) (+ sum n)))\n          (else (amicable-numbers-sum-iter (+ n 1) sum))))\n  (amicable-numbers-sum-iter 1 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122704,
      "stdout": "",
      "stderr": "/tmp/tmpz3oildgu.rkt:15:12: /=: unbound identifier\n  in: /=\n  location...:\n   /tmp/tmpz3oildgu.rkt:15:12\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable? n)\n    (let ((m (sum-of-divisors n)))\n      (and (not (= n m)) (= (sum-of-divisors m) n))))\n  (define (sum-of-divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n        (if (zero? (modulo n i)) i)))\n    (apply + (divisors n)))\n  (apply + (filter amicable? (in-range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122661,
      "stdout": "",
      "stderr": "/tmp/tmpjakfljld.rkt:11:8: if: missing an \"else\" expression\n  in: (if (zero? (modulo n i)) i)\n  location...:\n   /tmp/tmpjakfljld.rkt:11:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (filter (lambda (x) (= (modulo n x) 0))\n            (range 1 (add1 (quotient n 2)))))\n  (define (amicable? n)\n    (let ((n2 (sum (divisors n))))\n      (and (= n2 (sum (divisors n2)))\n           (not (= n n2)))))\n  (sum (filter amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122704,
      "stdout": "",
      "stderr": "/tmp/tmpeaur48nj.rkt:9:15: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpeaur48nj.rkt:9:15\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable-numbers-sum-iter limit sum)\n    (if (= limit 1)\n        sum\n        (let ((divisors-sum (divisors-sum limit)))\n          (if (and (= (divisors-sum divisors-sum) limit)\n                   (not (= limit divisors-sum)))\n              (amicable-numbers-sum-iter (- limit 1) (+ sum limit))\n              (amicable-numbers-sum-iter (- limit 1) sum)))))\n  (amicable-numbers-sum-iter limit 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122704,
      "stdout": "",
      "stderr": "/tmp/tmpr2wzrd2d.rkt:8:29: divisors-sum: unbound identifier\n  in: divisors-sum\n  location...:\n   /tmp/tmpr2wzrd2d.rkt:8:29\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (filter (lambda (x) (= 0 (modulo n x))) (range 1 (add1 (quotient n 2)))))\n  (define (sum_divisors n)\n    (apply + (divisors n)))\n  (define (amicable? n)\n    (let ((m (sum_divisors n)))\n      (and (= n (sum_divisors m))\n           (not (= n m)))))\n  (apply + (filter amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable? n)\n    (let ([m (sum_proper_divisors n)])\n      (and (not (= n m)) (= (sum_proper_divisors m) n))))\n  (define (sum_proper_divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n        (if (zero? (modulo n i)) i)))\n    (apply + (divisors n)))\n  (apply + (filter amicable? (in-range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122704,
      "stdout": "",
      "stderr": "/tmp/tmpav_3zl6e.rkt:11:8: if: missing an \"else\" expression\n  in: (if (zero? (modulo n i)) i)\n  location...:\n   /tmp/tmpav_3zl6e.rkt:11:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable? n)\n    (let ((m (sum_of_divisors n)))\n      (and (not (= n m)) (= (sum_of_divisors m) n))))\n  (define (sum_of_divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (quotient n 2))]\n                 #:when (zero? (remainder n i)))\n        i))\n    (apply + (divisors n)))\n  (apply + (filter amicable? (in-range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122705,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps5raj6m7.rkt:21:4\n\nfilter: contract violation\n  expected: list?\n  given: #<stream>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps5raj6m7.rkt:22:4\n\nfilter: contract violation\n  expected: list?\n  given: #<stream>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps5raj6m7.rkt:23:4\n\nfilter: contract violation\n  expected: list?\n  given: #<stream>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (amicable-pair? a b)\n    (and (= (sum-of-divisors a) b)\n         (= (sum-of-divisors b) a)))\n  (define (sum-of-divisors n)\n    (define (divisors n)\n      (filter (lambda (x) (= (modulo n x) 0))\n              (range 1 (add1 (quotient n 2)))))\n    (apply + (divisors n)))\n  (apply +\n         (filter (lambda (x)\n                   (let ((y (sum-of-divisors x)))\n                     (and (not (= x y))\n                          (amicable-pair? x y))))\n                 (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (filter (lambda (x) (= (remainder n x) 0))\n            (range 1 (add1 (quotient n 2)))))\n  (define (sum_divisors n)\n    (apply + (divisors n)))\n  (define (amicable? n)\n    (let ((m (sum_divisors n)))\n      (and (not (= n m))\n           (= n (sum_divisors m)))))\n  (apply + (filter amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (filter (lambda (x) (= 0 (modulo n x)))\n            (range 1 (add1 (quotient n 2)))))\n  (define (sum_of_divisors n)\n    (apply + (divisors n)))\n  (define (amicable? n)\n    (let ((m (sum_of_divisors n)))\n      (and (not (= n m))\n           (= (sum_of_divisors m) n))))\n  (apply + (filter amicable? (range 1 limit))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n  (define (divisors n)\n    (define (divisors-iter n i)\n      (if (&gt; i n)\n          '()\n          (if (zero? (modulo n i))\n              (cons i (divisors-iter n (+ i 1)))\n              (divisors-iter n (+ i 1)))))\n    (divisors-iter n 1))\n  (define (sum-divisors n)\n    (apply + (divisors n)))\n  (define (is-amicable n)\n    (let ((sum-divisors-n (sum-divisors n)))\n      (and (not (= n sum-divisors-n))\n           (= n (sum-divisors sum-divisors-n)))))\n  (define (amicable-numbers-sum-iter n sum)\n    (if (&gt; n limit)\n        sum\n        (if (is-amicable n)\n            (amicable-numbers-sum-iter (+ n 1) (+ sum n))\n            (amicable-numbers-sum-iter (+ n 1) sum))))\n  (amicable-numbers-sum-iter 1 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-equal? (candidate 999) 504)\n    (check-equal? (candidate 9999) 31626)\n    (check-equal? (candidate 99) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666122704,
      "stdout": "",
      "stderr": "/tmp/tmpxj3t9o6c.rkt:5:2: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 13\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}