{
  "name": "mbpp_454_text_match_wordz",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function that matches a word containing 'z'.\n(define (text_match_wordz text)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_454_text_match_wordz.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate text_match_wordz))\n    (check-equal? (candidate \"pythonz.\") #t)\n    (check-equal? (candidate \"xyz.\") #t)\n    (check-equal? (candidate \"  lang  .\") #f)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (regexp-match* #rx\"\\w*z\\w*\" text))\n",
    "  (regexp-match #rx\"z\" text))\n",
    "  (regexp-match? #rx\"\\w*z\\w*\" text))\n",
    "  (regexp-match #rx\"z\" text))\n",
    "  (regexp-match? #rx\"\\w*z\\w*\" text))\n",
    "  (regexp-match* #rx\"\\w*z\\w*\" text))\n",
    "  (regexp-match* #rx\"\\w*z\\w*\" text))\n",
    "  (regexp-match* #rx\"z\" text))\n",
    "  (regexp-match* #rx\"\\w*z\\w*\" text))\n",
    "  (regexp-match #rx\"\\\\bz\\\\w*\\\\b\" text))\n",
    "  (regexp-match? #rx\"\\\\bz\\\\w+\\\\b\" text))\n",
    "  (regexp-match* #rx\"\\w*z\\w*\" text))\n",
    "  (regexp-match* #rx\"z\" text))\n",
    "  (regexp-match* #rx\"\\b[a-z]+z[a-z]+\\b\" text))\n",
    "  (regexp-match* #rx\"\\w*z\\w*\" text))\n",
    "  (regexp-match #rx\"\\w*z\\w*\" text))\n",
    "  (regexp-match* #rx\"\\w*z\\w*\" text))\n",
    "  (regexp-match? #rx\"z\" text))\n",
    "  (regexp-match? #rx\"\\w*z\\w*\" text))\n",
    "  (regexp-match? #rx\"\\w*z\\w*\" text))\n"
  ]
}