{
  "name": "mbpp_777_find_sum",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_777_find_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ((arr arr) (sum 0))\n    (if (null? arr)\n        sum\n        (if (member (car arr) (cdr arr))\n            (loop (cdr arr) sum)\n            (loop (cdr arr) (+ sum (car arr)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (define (sum_helper arr acc)\n    (cond\n      [(empty? arr) acc]\n      [(member (first arr) (rest arr)) (sum_helper (rest arr) acc)]\n      [else (sum_helper (rest arr) (+ (first arr) acc))]))\n  (sum_helper arr 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ([arr arr] [sum 0])\n    (cond [(empty? arr) sum]\n          [(member (first arr) (rest arr)) (loop (rest arr) sum)]\n          [else (loop (rest arr) (+ sum (first arr)))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (cond\n    [(null? arr) 0]\n    [(null? (cdr arr)) (car arr)]\n    [else\n     (if (member (car arr) (cdr arr))\n         (find_sum (cdr arr))\n         (+ (car arr) (find_sum (cdr arr))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (cond\n    [(empty? arr) 0]\n    [(member (first arr) (rest arr)) (find_sum (rest arr))]\n    [else (+ (first arr) (find_sum (rest arr)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (cond\n    [(empty? arr) 0]\n    [(member (first arr) (rest arr)) (find_sum (rest arr))]\n    [else (+ (first arr) (find_sum (rest arr)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ((arr arr) (sum 0))\n    (cond\n      [(empty? arr) sum]\n      [(member (first arr) (rest arr)) (loop (rest arr) sum)]\n      [else (loop (rest arr) (+ sum (first arr)))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (define (find_sum_iter arr sum)\n    (cond\n      [(empty? arr) sum]\n      [(member (first arr) (rest arr)) (find_sum_iter (rest arr) sum)]\n      [else (find_sum_iter (rest arr) (+ sum (first arr)))]))\n  (find_sum_iter arr 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ([arr arr] [sum 0])\n    (cond [(empty? arr) sum]\n          [(member (first arr) (rest arr)) (loop (rest arr) sum)]\n          [else (loop (rest arr) (+ sum (first arr)))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (define (helper arr sum)\n    (cond\n      [(empty? arr) sum]\n      [(member (first arr) (rest arr)) (helper (rest arr) sum)]\n      [else (helper (rest arr) (+ sum (first arr)))]))\n  (helper arr 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ((arr arr) (sum 0))\n    (if (null? arr)\n        sum\n        (if (member (car arr) (cdr arr))\n            (loop (cdr arr) sum)\n            (loop (cdr arr) (+ (car arr) sum))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (define (find_sum_helper arr acc)\n    (cond\n      [(empty? arr) acc]\n      [(member (first arr) (rest arr)) (find_sum_helper (rest arr) acc)]\n      [else (find_sum_helper (rest arr) (+ acc (first arr)))]))\n  (find_sum_helper arr 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ((arr arr) (sum 0))\n    (cond ((null? arr) sum)\n          ((member (car arr) (cdr arr)) (loop (cdr arr) sum))\n          (else (loop (cdr arr) (+ sum (car arr)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (define (find_sum_helper arr sum)\n    (if (null? arr)\n        sum\n        (if (member (car arr) (cdr arr))\n            (find_sum_helper (cdr arr) sum)\n            (find_sum_helper (cdr arr) (+ sum (car arr))))))\n  (find_sum_helper arr 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ((arr arr) (sum 0))\n    (if (null? arr)\n        sum\n        (if (member (car arr) (cdr arr))\n            (loop (cdr arr) sum)\n            (loop (cdr arr) (+ sum (car arr)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (cond [(empty? arr) 0]\n        [(member (first arr) (rest arr)) (find_sum (rest arr))]\n        [else (+ (first arr) (find_sum (rest arr)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ([arr arr] [sum 0] [seen '()])\n    (cond [(empty? arr) sum]\n          [(member (first arr) seen) (loop (rest arr) sum seen)]\n          [else (loop (rest arr) (+ sum (first arr)) (cons (first arr) seen))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ([arr arr] [sum 0])\n    (if (null? arr)\n        sum\n        (if (member (car arr) (cdr arr))\n            (loop (cdr arr) sum)\n            (loop (cdr arr) (+ sum (car arr)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ([arr arr] [sum 0])\n    (if (null? arr)\n        sum\n        (if (member (car arr) (cdr arr))\n            (loop (cdr arr) sum)\n            (loop (cdr arr) (+ sum (car arr)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (cond [(empty? arr) 0]\n        [(member (first arr) (rest arr)) (find_sum (rest arr))]\n        [else (+ (first arr) (find_sum (rest arr)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (cond\n    [(empty? arr) 0]\n    [(member (first arr) (rest arr)) (find_sum (rest arr))]\n    [else (+ (first arr) (find_sum (rest arr)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ((arr arr) (sum 0) (seen '()))\n    (cond\n      [(empty? arr) sum]\n      [(member (first arr) seen) (loop (rest arr) sum seen)]\n      [else (loop (rest arr) (+ sum (first arr)) (cons (first arr) seen))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ([arr arr] [sum 0])\n    (if (null? arr)\n        sum\n        (if (member (car arr) (cdr arr))\n            (loop (cdr arr) sum)\n            (loop (cdr arr) (+ sum (car arr)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ([arr arr] [sum 0])\n    (cond [(empty? arr) sum]\n          [(member (first arr) (rest arr)) (loop (rest arr) sum)]\n          [else (loop (rest arr) (+ sum (first arr)))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (define (find_sum_helper arr acc)\n    (if (null? arr)\n        acc\n        (if (member (car arr) (cdr arr))\n            (find_sum_helper (cdr arr) acc)\n            (find_sum_helper (cdr arr) (+ acc (car arr))))))\n  (find_sum_helper arr 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (apply + (filter (lambda (x) (not (member x (cdr arr)))) arr)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw462umbr.rkt:12:4\nactual:     0\nexpected:   21\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw462umbr.rkt:13:4\nactual:     1\nexpected:   71\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw462umbr.rkt:14:4\nactual:     12\nexpected:   78\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ([arr arr] [sum 0])\n    (if (null? arr)\n        sum\n        (if (member (car arr) (cdr arr))\n            (loop (cdr arr) sum)\n            (loop (cdr arr) (+ sum (car arr)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ((arr arr) (sum 0))\n    (if (null? arr)\n        sum\n        (if (member (car arr) (cdr arr))\n            (loop (cdr arr) sum)\n            (loop (cdr arr) (+ sum (car arr)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ((arr arr) (sum 0))\n    (if (null? arr)\n        sum\n        (if (member (car arr) (cdr arr))\n            (loop (cdr arr) sum)\n            (loop (cdr arr) (+ sum (car arr)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (define (helper arr acc)\n    (if (null? arr)\n        acc\n        (if (member (car arr) (cdr arr))\n            (helper (cdr arr) acc)\n            (helper (cdr arr) (+ acc (car arr))))))\n  (helper arr 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (define (find_sum_iter arr sum)\n    (if (null? arr)\n        sum\n        (if (member (car arr) (cdr arr))\n            (find_sum_iter (cdr arr) sum)\n            (find_sum_iter (cdr arr) (+ sum (car arr))))))\n  (find_sum_iter arr 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ((arr arr) (sum 0))\n    (if (null? arr)\n        sum\n        (if (member (car arr) (cdr arr))\n            (loop (cdr arr) sum)\n            (loop (cdr arr) (+ sum (car arr)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ([arr arr] [sum 0])\n    (cond [(empty? arr) sum]\n          [(member (first arr) (rest arr)) (loop (rest arr) sum)]\n          [else (loop (rest arr) (+ sum (first arr)))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (cond\n    [(empty? arr) 0]\n    [(member (first arr) (rest arr)) (find_sum (rest arr))]\n    [else (+ (first arr) (find_sum (rest arr)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (cond [(empty? arr) 0]\n        [(member (first arr) (rest arr)) (find_sum (rest arr))]\n        [else (+ (first arr) (find_sum (rest arr)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ((arr arr) (sum 0))\n    (if (null? arr)\n        sum\n        (if (member (car arr) (cdr arr))\n            (loop (cdr arr) sum)\n            (loop (cdr arr) (+ sum (car arr)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ([arr arr] [sum 0])\n    (cond [(empty? arr) sum]\n          [(member (first arr) (rest arr)) (loop (rest arr) sum)]\n          [else (loop (rest arr) (+ sum (first arr)))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (cond\n    [(empty? arr) 0]\n    [(member (first arr) (rest arr)) (find_sum (rest arr))]\n    [else (+ (first arr) (find_sum (rest arr)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (define (find_sum_helper arr sum)\n    (cond\n      [(empty? arr) sum]\n      [(empty? (rest arr)) (+ sum (first arr))]\n      [(equal? (first arr) (second arr)) (find_sum_helper (rest arr) sum)]\n      [else (find_sum_helper (rest arr) (+ sum (first arr)))]))\n  (find_sum_helper arr 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9z5r7jxu.rkt:18:4\nactual:     22\nexpected:   21\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9z5r7jxu.rkt:19:4\nactual:     85\nexpected:   71\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9z5r7jxu.rkt:20:4\nactual:     143\nexpected:   78\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (define (find_sum_iter arr acc)\n    (cond\n      [(empty? arr) acc]\n      [(member (first arr) (rest arr)) (find_sum_iter (rest arr) acc)]\n      [else (find_sum_iter (rest arr) (+ acc (first arr)))]))\n  (find_sum_iter arr 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (define (find_sum_helper arr acc)\n    (cond\n      [(empty? arr) acc]\n      [(member (first arr) (rest arr)) (find_sum_helper (rest arr) acc)]\n      [else (find_sum_helper (rest arr) (+ acc (first arr)))]))\n  (find_sum_helper arr 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (cond [(empty? arr) 0]\n        [else\n         (let ([first (first arr)]\n               [rest (rest arr)])\n           (if (member first rest)\n               (find_sum rest)\n               (+ first (find_sum rest))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (cond\n    [(empty? arr) 0]\n    [(member (first arr) (rest arr)) (find_sum (rest arr))]\n    [else (+ (first arr) (find_sum (rest arr)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (cond\n    [(empty? arr) 0]\n    [(empty? (cdr arr)) (car arr)]\n    [else (+ (car arr) (find_sum (cdr arr)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpms5cicvf.rkt:15:4\nactual:     23\nexpected:   21\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpms5cicvf.rkt:16:4\nactual:     95\nexpected:   71\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpms5cicvf.rkt:17:4\nactual:     153\nexpected:   78\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (cond\n    [(empty? arr) 0]\n    [(member (first arr) (rest arr)) (find_sum (rest arr))]\n    [else (+ (first arr) (find_sum (rest arr)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (apply + (filter (lambda (x) (not (member x (cdr arr)))) arr)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw462umbr.rkt:12:4\nactual:     0\nexpected:   21\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw462umbr.rkt:13:4\nactual:     1\nexpected:   71\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw462umbr.rkt:14:4\nactual:     12\nexpected:   78\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (define (find_sum_iter arr sum)\n    (if (null? arr)\n        sum\n        (if (member (car arr) (cdr arr))\n            (find_sum_iter (cdr arr) sum)\n            (find_sum_iter (cdr arr) (+ sum (car arr))))))\n  (find_sum_iter arr 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ((arr arr) (sum 0))\n    (if (null? arr)\n        sum\n        (if (member (car arr) (cdr arr))\n            (loop (cdr arr) sum)\n            (loop (cdr arr) (+ sum (car arr)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ([arr arr] [sum 0])\n    (if (null? arr)\n        sum\n        (if (member (car arr) (cdr arr))\n            (loop (cdr arr) sum)\n            (loop (cdr arr) (+ sum (car arr)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (define (find_sum_iter arr sum)\n    (cond\n      [(empty? arr) sum]\n      [(member (first arr) (rest arr)) (find_sum_iter (rest arr) sum)]\n      [else (find_sum_iter (rest arr) (+ (first arr) sum))]))\n  (find_sum_iter arr 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ([arr arr] [sum 0])\n    (if (null? arr)\n        sum\n        (if (member (car arr) (cdr arr))\n            (loop (cdr arr) sum)\n            (loop (cdr arr) (+ sum (car arr)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (cond [(empty? arr) 0]\n        [(member (first arr) (rest arr)) (find_sum (rest arr))]\n        [else (+ (first arr) (find_sum (rest arr)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (define (find_sum_helper arr acc)\n    (if (null? arr)\n        acc\n        (if (member (car arr) (cdr arr))\n            (find_sum_helper (cdr arr) acc)\n            (find_sum_helper (cdr arr) (+ acc (car arr))))))\n  (find_sum_helper arr 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ((arr arr) (sum 0))\n    (cond\n      [(empty? arr) sum]\n      [(member (first arr) (rest arr)) (loop (rest arr) sum)]\n      [else (loop (rest arr) (+ sum (first arr)))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ([arr arr] [sum 0])\n    (if (null? arr)\n        sum\n        (if (member (car arr) (cdr arr))\n            (loop (cdr arr) sum)\n            (loop (cdr arr) (+ sum (car arr)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (apply + (filter (lambda (x) (not (member x (cdr arr)))) arr)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw462umbr.rkt:12:4\nactual:     0\nexpected:   21\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw462umbr.rkt:13:4\nactual:     1\nexpected:   71\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw462umbr.rkt:14:4\nactual:     12\nexpected:   78\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (cond [(empty? arr) 0]\n        [(member (first arr) (rest arr)) (find_sum (rest arr))]\n        [else (+ (first arr) (find_sum (rest arr)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (cond\n    [(empty? arr) 0]\n    [(member (first arr) (rest arr)) (find_sum (rest arr))]\n    [else (+ (first arr) (find_sum (rest arr)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ([arr arr] [sum 0])\n    (if (null? arr)\n        sum\n        (if (member (car arr) (cdr arr))\n            (loop (cdr arr) sum)\n            (loop (cdr arr) (+ sum (car arr)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (cond\n    [(empty? arr) 0]\n    [(member (first arr) (rest arr)) (find_sum (rest arr))]\n    [else (+ (first arr) (find_sum (rest arr)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (cond\n    [(empty? arr) 0]\n    [(member (first arr) (rest arr)) (find_sum (rest arr))]\n    [else (+ (first arr) (find_sum (rest arr)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ([arr arr] [sum 0])\n    (cond [(empty? arr) sum]\n          [(member (first arr) (rest arr)) (loop (rest arr) sum)]\n          [else (loop (rest arr) (+ sum (first arr)))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (cond\n    [(empty? arr) 0]\n    [(member (first arr) (rest arr)) (find_sum (rest arr))]\n    [else (+ (first arr) (find_sum (rest arr)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (cond [(empty? arr) 0]\n        [(member (first arr) (rest arr)) (find_sum (rest arr))]\n        [else (+ (first arr) (find_sum (rest arr)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ((arr arr) (sum 0))\n    (cond ((null? arr) sum)\n          ((member (car arr) (cdr arr)) (loop (cdr arr) sum))\n          (else (loop (cdr arr) (+ sum (car arr)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ([arr arr]\n             [sum 0])\n    (if (null? arr)\n        sum\n        (if (member (car arr) (cdr arr))\n            (loop (cdr arr) sum)\n            (loop (cdr arr) (+ sum (car arr)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (define (find_sum_iter arr acc)\n    (cond\n      [(empty? arr) acc]\n      [(member (first arr) (rest arr)) (find_sum_iter (rest arr) acc)]\n      [else (find_sum_iter (rest arr) (+ acc (first arr)))]))\n  (find_sum_iter arr 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (cond\n    [(empty? arr) 0]\n    [(member (first arr) (rest arr)) (find_sum (rest arr))]\n    [else (+ (first arr) (find_sum (rest arr)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ((arr arr) (sum 0))\n    (cond ((null? arr) sum)\n          ((member (car arr) (cdr arr)) (loop (cdr arr) sum))\n          (else (loop (cdr arr) (+ sum (car arr)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (cond\n    [(empty? arr) 0]\n    [else\n     (+ (car arr)\n        (find_sum (remove (car arr) (cdr arr))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9717ykgt.rkt:16:4\nactual:     22\nexpected:   21\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9717ykgt.rkt:17:4\nactual:     81\nexpected:   71\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9717ykgt.rkt:18:4\nactual:     88\nexpected:   78\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (cond [(empty? arr) 0]\n        [(member (first arr) (rest arr)) (find_sum (rest arr))]\n        [else (+ (first arr) (find_sum (rest arr)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (define (find_sum_helper arr acc)\n    (cond\n      [(empty? arr) acc]\n      [(member (first arr) (rest arr)) (find_sum_helper (rest arr) acc)]\n      [else (find_sum_helper (rest arr) (+ acc (first arr)))]))\n  (find_sum_helper arr 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ((arr arr) (sum 0))\n    (if (null? arr)\n        sum\n        (if (member (car arr) (cdr arr))\n            (loop (cdr arr) sum)\n            (loop (cdr arr) (+ sum (car arr)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (define (find_sum_helper arr acc)\n    (if (null? arr)\n        acc\n        (if (member (car arr) (cdr arr))\n            (find_sum_helper (cdr arr) acc)\n            (find_sum_helper (cdr arr) (+ acc (car arr))))))\n  (find_sum_helper arr 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (cond [(empty? arr) 0]\n        [(member (first arr) (rest arr)) (find_sum (rest arr))]\n        [else (+ (first arr) (find_sum (rest arr)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ([arr arr] [sum 0])\n    (cond\n      [(empty? arr) sum]\n      [(member (first arr) (rest arr)) (loop (rest arr) sum)]\n      [else (loop (rest arr) (+ sum (first arr)))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ([arr arr] [sum 0])\n    (cond [(empty? arr) sum]\n          [(member (first arr) (rest arr)) (loop (rest arr) sum)]\n          [else (loop (rest arr) (+ sum (first arr)))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (define (helper arr acc)\n    (if (null? arr)\n        acc\n        (if (member (car arr) (cdr arr))\n            (helper (cdr arr) acc)\n            (helper (cdr arr) (+ (car arr) acc)))))\n  (helper arr 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ([arr arr]\n             [sum 0])\n    (if (null? arr)\n        sum\n        (if (member (car arr) (cdr arr))\n            (loop (cdr arr) sum)\n            (loop (cdr arr) (+ sum (car arr)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (cond\n    [(empty? arr) 0]\n    [(empty? (rest arr)) (first arr)]\n    [else (+ (first arr) (find_sum (rest arr)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9o_ecfa9.rkt:15:4\nactual:     23\nexpected:   21\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9o_ecfa9.rkt:16:4\nactual:     95\nexpected:   71\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9o_ecfa9.rkt:17:4\nactual:     153\nexpected:   78\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (define (helper arr acc)\n    (cond\n      [(empty? arr) acc]\n      [(member (first arr) (rest arr)) (helper (rest arr) acc)]\n      [else (helper (rest arr) (+ acc (first arr)))]))\n  (helper arr 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ((arr arr) (sum 0))\n    (cond ((null? arr) sum)\n          ((member (car arr) (cdr arr)) (loop (cdr arr) sum))\n          (else (loop (cdr arr) (+ sum (car arr)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (cond\n    [(empty? arr) 0]\n    [(member (first arr) (rest arr)) (find_sum (rest arr))]\n    [else (+ (first arr) (find_sum (rest arr)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (cond\n    [(empty? arr) 0]\n    [(member (first arr) (rest arr)) (find_sum (rest arr))]\n    [else (+ (first arr) (find_sum (rest arr)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (cond\n    [(empty? arr) 0]\n    [(member (first arr) (rest arr)) (find_sum (rest arr))]\n    [else (+ (first arr) (find_sum (rest arr)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ([arr arr] [sum 0])\n    (if (null? arr)\n        sum\n        (let ([x (car arr)])\n          (if (member x (cdr arr))\n              (loop (cdr arr) sum)\n              (loop (cdr arr) (+ sum x)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (define (find_sum_iter arr sum)\n    (if (empty? arr)\n        sum\n        (if (member (first arr) (rest arr))\n            (find_sum_iter (rest arr) sum)\n            (find_sum_iter (rest arr) (+ sum (first arr))))))\n  (find_sum_iter arr 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (define (find_sum_iter arr sum)\n    (cond\n      [(null? arr) sum]\n      [(member (car arr) (cdr arr)) (find_sum_iter (cdr arr) sum)]\n      [else (find_sum_iter (cdr arr) (+ sum (car arr)))]))\n  (find_sum_iter arr 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (define (find_sum_helper arr acc)\n    (if (null? arr)\n        acc\n        (if (member (car arr) (cdr arr))\n            (find_sum_helper (cdr arr) acc)\n            (find_sum_helper (cdr arr) (+ acc (car arr))))))\n  (find_sum_helper arr 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ((arr arr) (sum 0))\n    (if (null? arr)\n        sum\n        (if (member (car arr) (cdr arr))\n            (loop (cdr arr) sum)\n            (loop (cdr arr) (+ sum (car arr)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (cond [(empty? arr) 0]\n        [(member (first arr) (rest arr)) (find_sum (rest arr))]\n        [else (+ (first arr) (find_sum (rest arr)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (apply + (remove-duplicates arr)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ([arr arr] [sum 0])\n    (if (null? arr)\n        sum\n        (if (member (car arr) (cdr arr))\n            (loop (cdr arr) sum)\n            (loop (cdr arr) (+ sum (car arr)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (define (find_sum_helper arr sum)\n    (cond\n      [(empty? arr) sum]\n      [(member (first arr) (rest arr)) (find_sum_helper (rest arr) sum)]\n      [else (find_sum_helper (rest arr) (+ sum (first arr)))]))\n  (find_sum_helper arr 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (if (null? arr)\n      0\n      (if (member (car arr) (cdr arr))\n          (find_sum (cdr arr))\n          (+ (car arr) (find_sum (cdr arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ((arr arr) (sum 0))\n    (if (null? arr)\n        sum\n        (if (member (car arr) (cdr arr))\n            (loop (cdr arr) sum)\n            (loop (cdr arr) (+ sum (car arr)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (cond\n    [(empty? arr) 0]\n    [(member (first arr) (rest arr)) (find_sum (rest arr))]\n    [else (+ (first arr) (find_sum (rest arr)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (define (find_sum_iter arr sum)\n    (if (null? arr)\n        sum\n        (if (member (car arr) (cdr arr))\n            (find_sum_iter (cdr arr) sum)\n            (find_sum_iter (cdr arr) (+ sum (car arr))))))\n  (find_sum_iter arr 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (cond\n    [(empty? arr) 0]\n    [(member (first arr) (rest arr)) (find_sum (rest arr))]\n    [else (+ (first arr) (find_sum (rest arr)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (define (find_sum_iter arr sum)\n    (if (null? arr)\n        sum\n        (if (member (car arr) (cdr arr))\n            (find_sum_iter (cdr arr) sum)\n            (find_sum_iter (cdr arr) (+ sum (car arr))))))\n  (find_sum_iter arr 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (define (find_sum_iter arr acc)\n    (cond\n      [(empty? arr) acc]\n      [(member (first arr) (rest arr)) (find_sum_iter (rest arr) acc)]\n      [else (find_sum_iter (rest arr) (+ acc (first arr)))]))\n  (find_sum_iter arr 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (define (find_sum_iter arr acc)\n    (if (null? arr)\n        acc\n        (if (member (car arr) (cdr arr))\n            (find_sum_iter (cdr arr) acc)\n            (find_sum_iter (cdr arr) (+ acc (car arr))))))\n  (find_sum_iter arr 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ((arr arr) (sum 0))\n    (cond\n      [(empty? arr) sum]\n      [(member (first arr) (rest arr)) (loop (rest arr) sum)]\n      [else (loop (rest arr) (+ sum (first arr)))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ((arr arr) (sum 0))\n    (if (null? arr)\n        sum\n        (if (member (car arr) (cdr arr))\n            (loop (cdr arr) sum)\n            (loop (cdr arr) (+ sum (car arr)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ([arr arr] [sum 0])\n    (if (null? arr)\n        sum\n        (if (member (car arr) (cdr arr))\n            (loop (cdr arr) sum)\n            (loop (cdr arr) (+ sum (car arr)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (cond\n    [(empty? arr) 0]\n    [(member (first arr) (rest arr)) (find_sum (rest arr))]\n    [else (+ (first arr) (find_sum (rest arr)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ((arr arr) (sum 0))\n    (cond ((null? arr) sum)\n          ((member (car arr) (cdr arr)) (loop (cdr arr) sum))\n          (else (loop (cdr arr) (+ sum (car arr)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (define (helper arr acc)\n    (if (null? arr)\n        acc\n        (if (member (car arr) (cdr arr))\n            (helper (cdr arr) acc)\n            (helper (cdr arr) (+ acc (car arr))))))\n  (helper arr 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (define (find_sum_helper arr acc)\n    (cond\n      [(empty? arr) acc]\n      [(member (first arr) (rest arr)) (find_sum_helper (rest arr) acc)]\n      [else (find_sum_helper (rest arr) (+ acc (first arr)))]))\n  (find_sum_helper arr 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ((arr arr) (sum 0))\n    (cond\n      [(empty? arr) sum]\n      [(member (first arr) (rest arr)) (loop (rest arr) sum)]\n      [else (loop (rest arr) (+ sum (first arr)))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ((arr arr) (sum 0))\n    (cond\n      [(empty? arr) sum]\n      [(member (first arr) (rest arr)) (loop (rest arr) sum)]\n      [else (loop (rest arr) (+ sum (first arr)))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ((arr arr) (sum 0) (seen '()))\n    (cond\n      [(empty? arr) sum]\n      [(member (first arr) seen) (loop (rest arr) sum seen)]\n      [else (loop (rest arr) (+ sum (first arr)) (cons (first arr) seen))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (cond\n    [(empty? arr) 0]\n    [(member (first arr) (rest arr)) (find_sum (rest arr))]\n    [else (+ (first arr) (find_sum (rest arr)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ((arr arr) (sum 0))\n    (if (null? arr)\n        sum\n        (if (member (car arr) (cdr arr))\n            (loop (cdr arr) sum)\n            (loop (cdr arr) (+ sum (car arr)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ((arr arr) (sum 0))\n    (cond\n      [(empty? arr) sum]\n      [(member (first arr) (rest arr)) (loop (rest arr) sum)]\n      [else (loop (rest arr) (+ sum (first arr)))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (define (find_sum_helper arr acc)\n    (if (null? arr)\n        acc\n        (if (member (car arr) (cdr arr))\n            (find_sum_helper (cdr arr) acc)\n            (find_sum_helper (cdr arr) (+ acc (car arr))))))\n  (find_sum_helper arr 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (cond\n    [(empty? arr) 0]\n    [(member (first arr) (rest arr)) (find_sum (rest arr))]\n    [else (+ (first arr) (find_sum (rest arr)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (define (helper arr acc)\n    (cond\n      [(empty? arr) acc]\n      [(member (first arr) (rest arr)) (helper (rest arr) acc)]\n      [else (helper (rest arr) (+ acc (first arr)))]))\n  (helper arr 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ([arr arr] [sum 0])\n    (if (null? arr)\n        sum\n        (if (member (car arr) (cdr arr))\n            (loop (cdr arr) sum)\n            (loop (cdr arr) (+ sum (car arr)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ([arr arr] [sum 0])\n    (cond [(empty? arr) sum]\n          [(member (first arr) (rest arr)) (loop (rest arr) sum)]\n          [else (loop (rest arr) (+ sum (first arr)))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (cond\n    [(empty? arr) 0]\n    [(member (first arr) (rest arr)) (find_sum (rest arr))]\n    [else (+ (first arr) (find_sum (rest arr)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (cond\n    [(empty? arr) 0]\n    [else\n     (let ([first (first arr)])\n       (cond\n         [(member first (rest arr)) (find_sum (rest arr))]\n         [else (+ first (find_sum (rest arr)))]))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (cond [(empty? arr) 0]\n        [(member (first arr) (rest arr)) (find_sum (rest arr))]\n        [else (+ (first arr) (find_sum (rest arr)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ((arr arr) (sum 0) (seen '()))\n    (cond\n      [(null? arr) sum]\n      [(member (car arr) seen) (loop (cdr arr) sum seen)]\n      [else (loop (cdr arr) (+ sum (car arr)) (cons (car arr) seen))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (cond\n    [(empty? arr) 0]\n    [else\n     (let ([first (first arr)])\n       (cond\n         [(member first (rest arr)) (find_sum (rest arr))]\n         [else (+ first (find_sum (rest arr)))]))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (cond\n    [(empty? arr) 0]\n    [(empty? (cdr arr)) (car arr)]\n    [else (+ (car arr) (find_sum (cdr arr)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpms5cicvf.rkt:15:4\nactual:     23\nexpected:   21\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpms5cicvf.rkt:16:4\nactual:     95\nexpected:   71\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpms5cicvf.rkt:17:4\nactual:     153\nexpected:   78\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ([arr arr] [sum 0])\n    (if (null? arr)\n        sum\n        (if (member (car arr) (cdr arr))\n            (loop (cdr arr) sum)\n            (loop (cdr arr) (+ sum (car arr)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ([arr arr] [sum 0])\n    (cond [(empty? arr) sum]\n          [(member (first arr) (rest arr)) (loop (rest arr) sum)]\n          [else (loop (rest arr) (+ sum (first arr)))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ([arr arr] [sum 0])\n    (cond\n      [(empty? arr) sum]\n      [(member (first arr) (rest arr)) (loop (rest arr) sum)]\n      [else (loop (rest arr) (+ sum (first arr)))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ((arr arr) (sum 0))\n    (if (null? arr)\n        sum\n        (if (member (car arr) (cdr arr))\n            (loop (cdr arr) sum)\n            (loop (cdr arr) (+ sum (car arr)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ((arr arr) (sum 0) (seen '()))\n    (cond\n      ((null? arr) sum)\n      ((member (car arr) seen) (loop (cdr arr) sum seen))\n      (else (loop (cdr arr) (+ sum (car arr)) (cons (car arr) seen))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (define (find_sum_helper arr sum)\n    (cond\n      [(empty? arr) sum]\n      [(member (first arr) (rest arr)) (find_sum_helper (rest arr) sum)]\n      [else (find_sum_helper (rest arr) (+ sum (first arr)))]))\n  (find_sum_helper arr 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (cond\n    [(empty? arr) 0]\n    [(member (first arr) (rest arr)) (find_sum (rest arr))]\n    [else (+ (first arr) (find_sum (rest arr)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (letrec ([helper (lambda (arr sum)\n                     (cond [(empty? arr) sum]\n                           [(member (first arr) (rest arr)) (helper (rest arr) sum)]\n                           [else (helper (rest arr) (+ sum (first arr)))]))])\n    (helper arr 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (define (find_sum_iter arr sum)\n    (cond [(empty? arr) sum]\n          [(member (first arr) (rest arr)) (find_sum_iter (rest arr) sum)]\n          [else (find_sum_iter (rest arr) (+ sum (first arr)))]))\n  (find_sum_iter arr 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (define (find_sum_helper arr sum)\n    (if (null? arr)\n        sum\n        (if (member (car arr) (cdr arr))\n            (find_sum_helper (cdr arr) sum)\n            (find_sum_helper (cdr arr) (+ sum (car arr))))))\n  (find_sum_helper arr 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ([arr arr] [sum 0])\n    (if (null? arr)\n        sum\n        (if (member (car arr) (cdr arr))\n            (loop (cdr arr) sum)\n            (loop (cdr arr) (+ sum (car arr)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (apply + (filter (lambda (x) (not (member x (cdr arr)))) arr)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw462umbr.rkt:12:4\nactual:     0\nexpected:   21\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw462umbr.rkt:13:4\nactual:     1\nexpected:   71\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw462umbr.rkt:14:4\nactual:     12\nexpected:   78\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (apply + (filter (lambda (x) (not (member x (cdr arr)))) arr)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw462umbr.rkt:12:4\nactual:     0\nexpected:   21\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw462umbr.rkt:13:4\nactual:     1\nexpected:   71\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw462umbr.rkt:14:4\nactual:     12\nexpected:   78\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (define (find_sum_iter arr sum)\n    (cond\n      [(empty? arr) sum]\n      [(member (first arr) (rest arr)) (find_sum_iter (rest arr) sum)]\n      [else (find_sum_iter (rest arr) (+ sum (first arr)))]))\n  (find_sum_iter arr 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (cond\n    [(empty? arr) 0]\n    [(not (member (first arr) (rest arr))) (+ (first arr) (find_sum (rest arr)))]\n    [else (find_sum (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (apply + (filter (lambda (x) (not (member x (cdr arr)))) arr)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw462umbr.rkt:12:4\nactual:     0\nexpected:   21\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw462umbr.rkt:13:4\nactual:     1\nexpected:   71\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw462umbr.rkt:14:4\nactual:     12\nexpected:   78\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (cond\n    [(empty? arr) 0]\n    [(member (first arr) (rest arr)) (find_sum (rest arr))]\n    [else (+ (first arr) (find_sum (rest arr)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (define (find_sum_helper arr sum)\n    (cond\n      [(empty? arr) sum]\n      [(member (first arr) (rest arr)) (find_sum_helper (rest arr) sum)]\n      [else (find_sum_helper (rest arr) (+ sum (first arr)))]))\n  (find_sum_helper arr 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ((arr arr) (sum 0))\n    (cond\n      [(empty? arr) sum]\n      [(member (first arr) (rest arr)) (loop (rest arr) sum)]\n      [else (loop (rest arr) (+ sum (first arr)))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (cond [(empty? arr) 0]\n        [else (let ([x (car arr)])\n                (if (member x (cdr arr))\n                    (find_sum (cdr arr))\n                    (+ x (find_sum (cdr arr)))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (cond\n    [(empty? arr) 0]\n    [(member (first arr) (rest arr)) (find_sum (rest arr))]\n    [else (+ (first arr) (find_sum (rest arr)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (define (find_sum_helper arr sum)\n    (cond\n      [(empty? arr) sum]\n      [(member (first arr) (rest arr)) (find_sum_helper (rest arr) sum)]\n      [else (find_sum_helper (rest arr) (+ sum (first arr)))]))\n  (find_sum_helper arr 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (define (helper arr acc)\n    (cond\n      [(empty? arr) acc]\n      [(member (first arr) (rest arr)) (helper (rest arr) acc)]\n      [else (helper (rest arr) (+ acc (first arr)))]))\n  (helper arr 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (define (find_sum_helper arr acc)\n    (if (null? arr)\n        acc\n        (if (member (car arr) (cdr arr))\n            (find_sum_helper (cdr arr) acc)\n            (find_sum_helper (cdr arr) (+ acc (car arr))))))\n  (find_sum_helper arr 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ((arr arr) (sum 0))\n    (cond\n      [(empty? arr) sum]\n      [(member (first arr) (rest arr)) (loop (rest arr) sum)]\n      [else (loop (rest arr) (+ sum (first arr)))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ((arr arr) (sum 0))\n    (if (null? arr)\n        sum\n        (if (member (car arr) (cdr arr))\n            (loop (cdr arr) sum)\n            (loop (cdr arr) (+ sum (car arr)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ((arr arr)\n             (sum 0))\n    (if (null? arr)\n        sum\n        (if (member (car arr) (cdr arr))\n            (loop (cdr arr) sum)\n            (loop (cdr arr) (+ sum (car arr)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (define (find_sum_iter arr sum)\n    (if (null? arr)\n        sum\n        (if (member (car arr) (cdr arr))\n            (find_sum_iter (cdr arr) sum)\n            (find_sum_iter (cdr arr) (+ sum (car arr))))))\n  (find_sum_iter arr 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (define (find_sum_helper arr acc)\n    (cond\n      [(empty? arr) acc]\n      [(member (first arr) (rest arr)) (find_sum_helper (rest arr) acc)]\n      [else (find_sum_helper (rest arr) (+ acc (first arr)))]))\n  (find_sum_helper arr 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (cond [(empty? arr) 0]\n        [(member (first arr) (rest arr)) (find_sum (rest arr))]\n        [else (+ (first arr) (find_sum (rest arr)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (cond\n    [(empty? arr) 0]\n    [else\n     (let ([first (first arr)])\n       (cond\n         [(member first (rest arr)) (find_sum (rest arr))]\n         [else (+ first (find_sum (rest arr)))]))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (define (find_sum_iter arr sum)\n    (if (null? arr)\n        sum\n        (if (member (car arr) (cdr arr))\n            (find_sum_iter (cdr arr) sum)\n            (find_sum_iter (cdr arr) (+ sum (car arr))))))\n  (find_sum_iter arr 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ([arr arr] [sum 0])\n    (cond [(empty? arr) sum]\n          [(member (first arr) (rest arr)) (loop (rest arr) sum)]\n          [else (loop (rest arr) (+ sum (first arr)))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (apply + (filter (lambda (x) (not (member x (cdr arr)))) arr)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw462umbr.rkt:12:4\nactual:     0\nexpected:   21\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw462umbr.rkt:13:4\nactual:     1\nexpected:   71\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw462umbr.rkt:14:4\nactual:     12\nexpected:   78\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (define (find_sum_iter arr sum)\n    (cond\n      [(empty? arr) sum]\n      [(member (first arr) (rest arr)) (find_sum_iter (rest arr) sum)]\n      [else (find_sum_iter (rest arr) (+ sum (first arr)))]))\n  (find_sum_iter arr 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (define (find_sum_helper arr acc)\n    (cond [(empty? arr) acc]\n          [(member (first arr) (rest arr)) (find_sum_helper (rest arr) acc)]\n          [else (find_sum_helper (rest arr) (+ acc (first arr)))]))\n  (find_sum_helper arr 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ((arr arr) (sum 0))\n    (cond ((null? arr) sum)\n          ((member (car arr) (cdr arr)) (loop (cdr arr) sum))\n          (else (loop (cdr arr) (+ sum (car arr)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ((arr arr) (sum 0))\n    (if (null? arr)\n        sum\n        (if (member (car arr) (cdr arr))\n            (loop (cdr arr) sum)\n            (loop (cdr arr) (+ sum (car arr)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (cond\n    [(empty? arr) 0]\n    [(empty? (cdr arr)) (car arr)]\n    [else (+ (car arr) (find_sum (cdr arr)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpms5cicvf.rkt:15:4\nactual:     23\nexpected:   21\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpms5cicvf.rkt:16:4\nactual:     95\nexpected:   71\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpms5cicvf.rkt:17:4\nactual:     153\nexpected:   78\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (define (find_sum_iter arr sum)\n    (cond\n      [(empty? arr) sum]\n      [(member (first arr) (rest arr)) (find_sum_iter (rest arr) sum)]\n      [else (find_sum_iter (rest arr) (+ sum (first arr)))]))\n  (find_sum_iter arr 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (define (find_sum_helper arr acc)\n    (cond\n      [(empty? arr) acc]\n      [(member (first arr) (rest arr)) (find_sum_helper (rest arr) acc)]\n      [else (find_sum_helper (rest arr) (+ acc (first arr)))]))\n  (find_sum_helper arr 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ([arr arr] [acc 0])\n    (cond\n      [(empty? arr) acc]\n      [(member (first arr) (rest arr)) (loop (rest arr) acc)]\n      [else (loop (rest arr) (+ acc (first arr)))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (define (find_sum_helper arr acc)\n    (cond\n      [(empty? arr) acc]\n      [(member (first arr) (rest arr)) (find_sum_helper (rest arr) acc)]\n      [else (find_sum_helper (rest arr) (+ acc (first arr)))]))\n  (find_sum_helper arr 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (define (find_sum_iter arr sum)\n    (if (null? arr)\n        sum\n        (if (member (car arr) (cdr arr))\n            (find_sum_iter (cdr arr) sum)\n            (find_sum_iter (cdr arr) (+ sum (car arr))))))\n  (find_sum_iter arr 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ([arr arr] [sum 0])\n    (cond [(empty? arr) sum]\n          [(member (first arr) (rest arr)) (loop (rest arr) sum)]\n          [else (loop (rest arr) (+ sum (first arr)))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ([arr arr] [sum 0])\n    (if (null? arr)\n        sum\n        (if (member (car arr) (cdr arr))\n            (loop (cdr arr) sum)\n            (loop (cdr arr) (+ sum (car arr)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ((arr arr) (sum 0))\n    (cond ((null? arr) sum)\n          ((member (car arr) (cdr arr)) (loop (cdr arr) sum))\n          (else (loop (cdr arr) (+ sum (car arr)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ([arr arr] [sum 0])\n    (if (null? arr)\n        sum\n        (let ([x (car arr)])\n          (if (member x (cdr arr))\n              (loop (cdr arr) sum)\n              (loop (cdr arr) (+ sum x)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ([arr arr] [sum 0])\n    (if (null? arr)\n        sum\n        (if (member (car arr) (cdr arr))\n            (loop (cdr arr) sum)\n            (loop (cdr arr) (+ sum (car arr)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (define (find_sum_helper arr sum)\n    (cond\n      [(empty? arr) sum]\n      [(member (first arr) (rest arr)) (find_sum_helper (rest arr) sum)]\n      [else (find_sum_helper (rest arr) (+ (first arr) sum))]))\n  (find_sum_helper arr 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (cond\n    [(empty? arr) 0]\n    [(member (first arr) (rest arr)) (find_sum (rest arr))]\n    [else (+ (first arr) (find_sum (rest arr)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (define (find_sum_iter arr acc)\n    (if (null? arr)\n        acc\n        (if (member (car arr) (cdr arr))\n            (find_sum_iter (cdr arr) acc)\n            (find_sum_iter (cdr arr) (+ acc (car arr))))))\n  (find_sum_iter arr 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (define (find_sum_helper arr acc)\n    (if (null? arr)\n        acc\n        (if (member (car arr) (cdr arr))\n            (find_sum_helper (cdr arr) acc)\n            (find_sum_helper (cdr arr) (+ acc (car arr))))))\n  (find_sum_helper arr 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ((arr arr) (sum 0))\n    (if (null? arr)\n        sum\n        (if (member (car arr) (cdr arr))\n            (loop (cdr arr) sum)\n            (loop (cdr arr) (+ sum (car arr)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ((arr arr)\n             (sum 0))\n    (cond ((null? arr) sum)\n          ((member (car arr) (cdr arr)) (loop (cdr arr) sum))\n          (else (loop (cdr arr) (+ sum (car arr)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (define (find_sum_iter arr sum)\n    (cond\n      [(empty? arr) sum]\n      [(member (first arr) (rest arr)) (find_sum_iter (rest arr) sum)]\n      [else (find_sum_iter (rest arr) (+ sum (first arr)))]))\n  (find_sum_iter arr 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (apply + (set-remove (lambda (x y) (= x y)) arr)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpru1koz0g.rkt:12:4\n\nset-remove: contract violation:\n  expected: set?\n  given: #<procedure:...tmp/tmpru1koz0g.rkt:5:23>\n  argument position: 1st\n  x argument...: '(1 2 3 1 1 4 5 6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpru1koz0g.rkt:13:4\n\nset-remove: contract violation:\n  expected: set?\n  given: #<procedure:...tmp/tmpru1koz0g.rkt:5:23>\n  argument position: 1st\n  x argument...: '(1 10 9 4 2 10 10 45 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpru1koz0g.rkt:14:4\n\nset-remove: contract violation:\n  expected: set?\n  given: #<procedure:...tmp/tmpru1koz0g.rkt:5:23>\n  argument position: 1st\n  x argument...: '(12 10 9 45 2 10 10 45 10)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ([arr arr] [sum 0])\n    (cond [(empty? arr) sum]\n          [(member (first arr) (rest arr)) (loop (rest arr) sum)]\n          [else (loop (rest arr) (+ sum (first arr)))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (cond [(empty? arr) 0]\n        [(member (first arr) (rest arr)) (find_sum (rest arr))]\n        [else (+ (first arr) (find_sum (rest arr)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ([arr arr] [sum 0])\n    (if (null? arr)\n        sum\n        (if (member (car arr) (cdr arr))\n            (loop (cdr arr) sum)\n            (loop (cdr arr) (+ sum (car arr)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (define (find_sum_helper arr acc)\n    (cond\n      [(empty? arr) acc]\n      [(member (first arr) (rest arr)) (find_sum_helper (rest arr) acc)]\n      [else (find_sum_helper (rest arr) (+ acc (first arr)))]))\n  (find_sum_helper arr 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (apply + (filter (lambda (x) (not (member x (cdr arr)))) arr)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw462umbr.rkt:12:4\nactual:     0\nexpected:   21\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw462umbr.rkt:13:4\nactual:     1\nexpected:   71\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw462umbr.rkt:14:4\nactual:     12\nexpected:   78\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (define (find_sum_iter arr sum)\n    (cond\n      [(empty? arr) sum]\n      [(member (first arr) (rest arr)) (find_sum_iter (rest arr) sum)]\n      [else (find_sum_iter (rest arr) (+ sum (first arr)))]))\n  (find_sum_iter arr 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ((arr arr) (sum 0))\n    (if (null? arr)\n        sum\n        (if (member (car arr) (cdr arr))\n            (loop (cdr arr) sum)\n            (loop (cdr arr) (+ sum (car arr)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (cond\n    [(empty? arr) 0]\n    [(member (first arr) (rest arr)) (find_sum (rest arr))]\n    [else (+ (first arr) (find_sum (rest arr)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ([arr arr] [sum 0])\n    (if (null? arr)\n        sum\n        (if (member (car arr) (cdr arr))\n            (loop (cdr arr) sum)\n            (loop (cdr arr) (+ sum (car arr)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (cond\n    [(empty? arr) 0]\n    [(member (first arr) (rest arr)) (find_sum (rest arr))]\n    [else (+ (first arr) (find_sum (rest arr)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (define (find_sum_iter arr sum)\n    (cond\n      [(empty? arr) sum]\n      [(member (first arr) (rest arr)) (find_sum_iter (rest arr) sum)]\n      [else (find_sum_iter (rest arr) (+ sum (first arr)))]))\n  (find_sum_iter arr 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ([arr arr] [sum 0])\n    (if (null? arr)\n        sum\n        (if (member (car arr) (cdr arr))\n            (loop (cdr arr) sum)\n            (loop (cdr arr) (+ sum (car arr)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (define (find_sum_iter arr sum)\n    (if (null? arr)\n        sum\n        (if (member (car arr) (cdr arr))\n            (find_sum_iter (cdr arr) sum)\n            (find_sum_iter (cdr arr) (+ sum (car arr))))))\n  (find_sum_iter arr 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (cond\n    [(empty? arr) 0]\n    [(member (first arr) (rest arr)) (find_sum (rest arr))]\n    [else (+ (first arr) (find_sum (rest arr)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ([arr arr] [sum 0])\n    (cond [(empty? arr) sum]\n          [(member (first arr) (rest arr)) (loop (rest arr) sum)]\n          [else (loop (rest arr) (+ sum (first arr)))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (let loop ([arr arr] [sum 0])\n    (if (null? arr)\n        sum\n        (if (member (car arr) (cdr arr))\n            (loop (cdr arr) sum)\n            (loop (cdr arr) (+ sum (car arr)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (cond\n    [(empty? arr) 0]\n    [(member (first arr) (rest arr)) (find_sum (rest arr))]\n    [else (+ (first arr) (find_sum (rest arr)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}