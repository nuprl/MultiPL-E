{
  "name": "mbpp_450_extract_string",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_450_extract_string.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond\n    [(empty? l) empty]\n    [(string=? (first l) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n",
    "  (cond\n    [(empty? l) empty]\n    [(string=? (first l) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n",
    "  (cond\n    [(empty? l) empty]\n    [(string=? str (first l)) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n",
    "  (filter (lambda (x) (= (string-length x) str)) l))\n",
    "  (cond\n    [(empty? l) empty]\n    [(string=? (string-length (first l)) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n",
    "  (cond\n    [(empty? l) empty]\n    [(string=? (first l) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n",
    "  (cond\n    [(empty? l) empty]\n    [(string=? (first l) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n",
    "  (cond\n    [(empty? l) empty]\n    [(string=? (first l) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n",
    "  (cond\n    [(empty? l) empty]\n    [(string=? str (first l)) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n",
    "  (cond\n    [(empty? l) empty]\n    [(string=? (string-length (first l)) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n",
    "  (filter (lambda (x) (= (string-length x) str)) l))\n",
    "  (cond [(empty? l) empty]\n        [(equal? (string-length (car l)) str) (cons (car l) (extract_string str (cdr l)))]\n        [else (extract_string str (cdr l))]))\n",
    "  (cond\n    [(empty? l) empty]\n    [(string=? (car l) str) (cons (car l) (extract_string str (cdr l)))]\n    [else (extract_string str (cdr l))]))\n",
    "  (cond\n    [(empty? l) empty]\n    [(= (string-length (first l)) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n",
    "  (cond\n    [(empty? l) empty]\n    [(string=? str (first l)) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n",
    "  (filter (lambda (x) (= (string-length x) str)) l))\n",
    "  (cond\n    [(empty? l) empty]\n    [(string=? str (first l)) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n",
    "  (cond\n    [(empty? l) empty]\n    [(string=? (first l) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n",
    "  (cond\n    [(empty? l) empty]\n    [(string=? str (first l)) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n",
    "  (cond [(empty? l) empty]\n        [(string=? str (first l)) (cons (first l) (extract_string str (rest l)))]\n        [else (extract_string str (rest l))]))\n"
  ]
}