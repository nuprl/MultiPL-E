{
  "name": "mbpp_722_filter_data",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_722_filter_data.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))))\n    (check-equal? (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (filter (lambda (student)\n            (let ([height (car student)]\n                  [weight (cadr student)])\n              (and (> height h) (> weight w))))\n          students))\n",
    "  (filter (\u03bb (student)\n            (let ([height (car (cdr student))]\n                  [weight (cadr (cdr student))])\n              (and (> height h) (> weight w))))\n          students))\n",
    "  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n",
    "  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n",
    "  (filter (lambda (student)\n            (and (> (car student) h)\n                 (> (cadr student) w)))\n          students))\n",
    "  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n",
    "  (filter (\u03bb (student)\n            (let ([height (car (cdr student))]\n                  [weight (car (cdr (cdr student)))])\n              (and (> height h) (> weight w))))\n          students))\n",
    "  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n",
    "  (filter (lambda (student)\n            (let ([height (car student)]\n                  [weight (cadr student)])\n              (and (> height h) (> weight w))))\n          (hash-values students)))\n",
    "  (for/list ([(name . (height . weight)) students])\n    (if (and (> height h) (> weight w))\n        (cons name (cons height weight)))))\n",
    "  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n",
    "  (filter (\u03bb (student)\n            (and (> (car student) h)\n                 (> (cadr student) w)))\n          students))\n",
    "  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n",
    "  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n",
    "  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n",
    "  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n",
    "  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n",
    "  (filter (\u03bb (x)\n            (and (> (car (cdr x)) h)\n                 (> (cadr (cdr x)) w)))\n          students))\n",
    "  (filter (lambda (student)\n            (and (> (car (cdr student)) h)\n                 (> (cadr (cdr student)) w)))\n          students))\n",
    "  (filter (lambda (x)\n            (and (> (car (cdr x)) h)\n                 (> (cadr (cdr x)) w)))\n          students))\n"
  ]
}