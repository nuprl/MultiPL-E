{
  "name": "mbpp_287_square_Sum",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n(define (square_Sum n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_287_square_Sum.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate square_Sum))\n    (check-equal? (candidate 2) 20)\n    (check-equal? (candidate 3) 56)\n    (check-equal? (candidate 4) 120)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (if (= n 0)\n      0\n      (+ (* n n) (square_Sum (- n 1)))))\n",
    "  (define (square x) (* x x))\n  (define (sum_of_squares n)\n    (if (= n 0)\n        0\n        (+ (square n) (sum_of_squares (- n 2)))))\n  (sum_of_squares n))\n",
    "  (define (square x) (* x x))\n  (define (sum_of_squares x)\n    (if (= x 0)\n        0\n        (+ (square x) (sum_of_squares (- x 2)))))\n  (sum_of_squares n))\n",
    "  (if (= n 0)\n      0\n      (+ (* n n) (square_Sum (- n 1)))))\n",
    "  (define (square x) (* x x))\n  (define (sum_of_squares n)\n    (if (= n 0)\n        0\n        (+ (square n) (sum_of_squares (- n 2)))))\n  (sum_of_squares n))\n",
    "  (if (= n 0)\n      0\n      (+ (* n n) (square_Sum (- n 1)))))\n</code>\nI am getting the following error:\n<code>application: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 1\n  arguments...:\n   1\n</code>\nI am not sure what is wrong with my code.\n\n\nA:\n\nYou need to call the function with a number, not a string.\n<code>(square_Sum 1)\n</code>\n",
    "  (define (square_Sum_iter n acc)\n    (if (= n 0)\n        acc\n        (square_Sum_iter (- n 1) (+ acc (* n n)))))\n  (square_Sum_iter n 0))\n",
    "  (if (= n 0)\n      0\n      (+ (* n n) (square_Sum (- n 1)))))\n",
    "  (if (= n 0)\n      0\n      (+ (* n n) (square_Sum (- n 1)))))\n",
    "  (define (square x) (* x x))\n  (define (sum_of_squares x)\n    (if (= x 0)\n        0\n        (+ (square x) (sum_of_squares (- x 2)))))\n  (sum_of_squares n))\n",
    "  (cond [(= n 0) 0]\n        [else (+ (* n n) (square_Sum (- n 1)))]))\n",
    "  (define (square n)\n    (* n n))\n  (define (sum n)\n    (if (= n 1)\n        (square 2)\n        (+ (square (+ n 2)) (sum (- n 1)))))\n  (sum n))\n",
    "  (define (square x) (* x x))\n  (define (sum_of_squares x)\n    (if (= x 0)\n        0\n        (+ (square x) (sum_of_squares (- x 2)))))\n  (sum_of_squares n))\n",
    "  (if (= n 0)\n      0\n      (+ (* n n) (square_Sum (- n 1)))))\n",
    "  (define (square_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (square_Sum_iter (- n 1) (+ sum (* n n)))))\n  (square_Sum_iter n 0))\n",
    "  (define (square x)\n    (* x x))\n  (define (sum_of_squares n)\n    (if (= n 0)\n        0\n        (+ (square n) (sum_of_squares (- n 2)))))\n  (sum_of_squares n))\n",
    "  (define (square x)\n    (* x x))\n  (define (sum_of_squares x)\n    (if (= x 0)\n        0\n        (+ (square x) (sum_of_squares (- x 2)))))\n  (sum_of_squares n))\n",
    "  (if (= n 0)\n      0\n      (+ (* n n) (square_Sum (- n 1)))))\n",
    "  (define (square_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (square_Sum_iter (- n 1) (+ sum (* n n)))))\n  (square_Sum_iter n 0))\n",
    "  (define (square x) (* x x))\n  (define (sum_of_squares x)\n    (if (= x 0)\n        0\n        (+ (square x) (sum_of_squares (- x 2)))))\n  (sum_of_squares n))\n"
  ]
}