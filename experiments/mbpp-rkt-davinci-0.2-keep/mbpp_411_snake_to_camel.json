{
  "name": "mbpp_411_snake_to_camel",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_411_snake_to_camel.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (helper word result)\n    (if (empty? word)\n        result\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (string-append result (string-upcase (string (second word)))))\n            (helper (rest word) (string-append result (string (first word)))))))\n  (helper word \"\"))\n",
    "  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (define (helper word result)\n    (cond [(empty? word) result]\n          [(char=? (first word) #\\_)\n           (helper (rest word) (string-append result (string-upcase (first (rest word))))) ]\n          [else (helper (rest word) (string-append result (first word)))]))\n  (helper word \"\"))\n",
    "  (string-join\n   (map (lambda (x) (string-upcase x))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x)\n          (if (equal? (string-length x) 1)\n              (string-upcase x)\n              (string-append\n               (string-upcase (substring x 0 1))\n               (substring x 1))))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (w)\n      (string-upcase (substring w 1)))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x) (string-upcase x))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (w) (string-upcase w))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (define (helper word acc)\n    (if (empty? word)\n        (string-join (reverse acc))\n        (if (char=? (string-ref word 0) #\\_)\n            (helper (substring word 1) (cons (string-upcase (string-ref word 1)) acc))\n            (helper (substring word 1) (cons (string-ref word 0) acc)))))\n  (helper word '()))\n",
    "  (string-join (map (lambda (x) (if (equal? (string-ref x 0) #\\_)\n                                (string-upcase (string-ref x 1))\n                                x))\n                     (string-split word #\\_))\n               \"\"))\n",
    "  (cond\n    [(empty? word) empty]\n    [(char=? (first word) #\\_)\n     (cons (char-upcase (second word)) (snake_to_camel (rest (rest word))))]\n    [else (cons (first word) (snake_to_camel (rest word)))]))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (define (helper word result)\n    (cond\n      [(empty? word) result]\n      [(char=? #\\_ (first word)) (helper (rest word) (string-append result (string-upcase (first (rest word))))) ]\n      [else (helper (rest word) (string-append result (first word)))]))\n  (helper word \"\"))\n",
    "  (define (helper word acc)\n    (if (empty? word)\n        acc\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (string-append acc (string-upcase (string (second word)))))\n            (helper (rest word) (string-append acc (string (first word)))))))\n  (helper word \"\"))\n",
    "  (let loop ([word word]\n             [result '()])\n    (cond [(empty? word) (string-join (reverse result) \"\")]\n          [(char=? (first word) #\\_) (loop (rest word) (cons (char-upcase (second word)) result))]\n          [else (loop (rest word) (cons (first word) result))])))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-length x) 1)\n          (string-upcase x)\n          (string-append (string-upcase (substring x 0 1))\n                        (substring x 1))))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (define (helper word result)\n    (if (empty? word)\n        result\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (string-append result (string-upcase (string (second word)))))\n            (helper (rest word) (string-append result (string (first word)))))))\n  (helper word \"\"))\n",
    "  (string-join\n   (map (lambda (word)\n          (string-upcase (substring word 0 1))\n          (substring word 1))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (string-join (map (lambda (w) (string-upcase w)) (string-split word #\"_\")) \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x) (string-upcase x))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (let loop ([word word]\n             [result '()])\n    (cond [(empty? word) (string-join (reverse result))]\n          [(char=? (first word) #\\_) (loop (rest word) (cons (string-upcase (second word)) result))]\n          [else (loop (rest word) (cons (first word) result))])))\n",
    "  (string-join (map (lambda (x) (string-upcase x)) (string-split word #\\_)) \"\"))\n",
    "  (define (helper word result)\n    (cond\n      [(empty? word) result]\n      [(char=? (first word) #\\_) (helper (rest word) (string-append result (string-upcase (string (second word)))))]\n      [else (helper (rest word) (string-append result (string (first word))))]))\n  (helper word \"\"))\n",
    "  (string-join\n   (map (lambda (x)\n          (if (string=? (substring x 0 1) \"_\")\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join (map (lambda (x) (string-upcase x))\n                    (string-split word #\\_))\n               \"\"))\n",
    "  (string-join (map (lambda (x) (if (equal? (string-ref x 0) #\\_)\n                                    (string-upcase (substring x 1))\n                                    x))\n                     (string-split word #\\_))\n               \"\"))\n",
    "  (string-join\n   (map (lambda (w) (string-upcase (substring w 1)))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (string-join (map (lambda (w) (string-upcase (substring w 1))) (string-split word #\\_)) \"\"))\n",
    "  (string-join\n   (map (lambda (x)\n          (if (equal? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (define (helper word result)\n    (cond\n      [(empty? word) result]\n      [(char=? (first word) #\\_) (helper (rest word) (string-append result (string-upcase (first (rest word)))))]\n      [else (helper (rest word) (string-append result (string (first word))))]))\n  (helper word \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-length x) 1)\n          (string-upcase x)\n          (string-append (string-upcase (substring x 0 1)) (substring x 1))))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x) (string-upcase x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (w) (string-upcase (substring w 1)))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x)\n          (if (equal? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x) (string-upcase x))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (define (helper word acc)\n    (if (empty? word)\n        acc\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (string-append acc (string-upcase (first (rest word)))))\n            (helper (rest word) (string-append acc (string (first word)))))))\n  (helper word \"\"))\n",
    "  (string-join\n   (map (lambda (w) (string-upcase (substring w 1)))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (define (helper word result)\n    (if (empty? word)\n        result\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (string-append result (string-upcase (string (second word)))))\n            (helper (rest word) (string-append result (string (first word)))))))\n  (helper word \"\"))\n",
    "  (string-join\n   (map\n    (lambda (word)\n      (string-upcase (substring word 0 1))\n      (substring word 1))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                       (string-upcase (substring x 1))\n                       x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join (map (lambda (x) (if (string=? (substring x 0 1) \"_\") (string-upcase (substring x 1)) x)) (string-split word #\\_)) \"\"))\n",
    "  (define (capitalize-first-letter word)\n    (string-append (string-upcase (substring word 0 1)) (substring word 1)))\n  (define (snake_to_camel-helper word)\n    (if (string-contains word #\\_)\n        (snake_to_camel-helper (string-append (capitalize-first-letter (substring word 0 (string-index word #\\_))) (substring word (+ 1 (string-index word #\\_)))))\n        word))\n  (snake_to_camel-helper word))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (string-drop x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (define (helper word acc)\n    (if (empty? word)\n        (string-join (reverse acc))\n        (if (char=? (string-ref word 0) #\\_)\n            (helper (substring word 1) (cons (string-upcase (string-ref word 1)) acc))\n            (helper (substring word 1) (cons (string-ref word 0) acc)))))\n  (helper word '()))\n",
    "  (string-join (map (lambda (x) (string-upcase x))\n                    (string-split word #\\_))\n               \"\"))\n",
    "  (string-join\n   (map\n    (lambda (w)\n      (string-upcase (substring w 0 1))\n      (substring w 1))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join (map (lambda (x) (string-upcase x)) (string-split word #\\_)) \"\"))\n",
    "  (string-join (map (lambda (x) (if (equal? (string-length x) 1) x (string-append (string-upcase (substring x 0 1)) (substring x 1)))) (string-split word #\\_)) \"\"))\n",
    "  (define (helper word result)\n    (cond\n      [(empty? word) result]\n      [(char=? (first word) #\\_) (helper (rest word) (string-append result (string-upcase (string (second word))))) ]\n      [else (helper (rest word) (string-append result (string (first word))))]))\n  (helper word \"\"))\n",
    "  (define (helper word result)\n    (if (empty? word)\n        result\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (string-append result (string-upcase (string (second word)))))\n            (helper (rest word) (string-append result (string (first word)))))))\n  (helper word \"\"))\n",
    "  (string-join\n   (map (lambda (w) (string-upcase w))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (define (helper word result)\n    (cond\n      [(empty? word) result]\n      [(char=? (first word) #\\_) (helper (rest word) (string-append result (string-upcase (string (second word)))))]\n      [else (helper (rest word) (string-append result (string (first word))))]))\n  (helper word \"\"))\n",
    "  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (word)\n      (string-upcase (substring word 1)))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x) (if (string=? (substring x 0 1) \"_\")\n                        (string-upcase (substring x 1))\n                        x))\n        (string-split word #\\_)) \"\"))\n",
    "  (string-join\n   (map (lambda (w)\n          (string-upcase (substring w 1)))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                       (string-upcase (substring x 1))\n                       x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (define (helper word acc)\n    (if (empty? word)\n        acc\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (string-append acc (string-upcase (string (second word)))))\n            (helper (rest word) (string-append acc (string (first word)))))))\n  (helper word \"\"))\n",
    "  (define (snake_to_camel_iter word acc)\n    (cond\n      [(empty? word) (list->string (reverse acc))]\n      [(char=? (first word) #\\_) (snake_to_camel_iter (rest word) (cons (char-upcase (second word)) (rest (rest word))))]\n      [else (snake_to_camel_iter (rest word) (cons (first word) acc))]))\n  (snake_to_camel_iter word '()))\n",
    "  (define (helper word result)\n    (if (empty? word)\n        result\n        (if (equal? (first word) #\\_)\n            (helper (rest word) (string-append result (string-upcase (second word))))\n            (helper (rest word) (string-append result (string (first word)))))))\n  (helper word \"\"))\n",
    "  (define (helper word acc)\n    (if (empty? word)\n        (string-join (reverse acc))\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (cons (string-upcase (list (second word))) (rest acc)))\n            (helper (rest word) (cons (list (first word)) acc)))))\n  (helper word '()))\n",
    "  (string-join\n   (map (lambda (x) (string-upcase x))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (define (helper word result)\n    (cond\n      [(empty? word) result]\n      [(char=? (first word) #\\_) (helper (rest word) (string-append result (string-upcase (string (second word)))))]\n      [else (helper (rest word) (string-append result (string (first word))))]))\n  (helper word \"\"))\n",
    "  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (define (helper word result)\n    (if (empty? word)\n        result\n        (if (equal? (first word) #\\_)\n            (helper (rest word) (string-append result (string-upcase (string (second word)))))\n            (helper (rest word) (string-append result (string (first word)))))))\n  (helper word \"\"))\n",
    "  (string-join\n   (map\n    (lambda (w)\n      (string-upcase (substring w 1)))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-length x) 1)\n          (string-upcase x)\n          (string-append (string-upcase (substring x 0 1))\n                        (substring x 1))))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (define (snake_to_camel_iter word acc)\n    (if (empty? word)\n        acc\n        (if (char=? (first word) #\\_)\n            (snake_to_camel_iter (rest word) (string-append acc (string-upcase (string (second word)))))\n            (snake_to_camel_iter (rest word) (string-append acc (string (first word)))))))\n  (snake_to_camel_iter word \"\"))\n",
    "  (define (snake_to_camel_iter word acc)\n    (cond\n      [(empty? word) (list->string (reverse acc))]\n      [(char=? (first word) #\\_) (snake_to_camel_iter (rest word) (cons (char-upcase (second word)) (rest (rest word))))]\n      [else (snake_to_camel_iter (rest word) (cons (first word) acc))]))\n  (snake_to_camel_iter word '()))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-length x) 1)\n          (string-upcase x)\n          (string-append (string-upcase (substring x 0 1)) (substring x 1))))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (define (helper word result)\n    (if (empty? word)\n        result\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (string-append result (string-upcase (string (second word)))))\n            (helper (rest word) (string-append result (string (first word)))))))\n  (helper word \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (string=? (substring x 0 1) \"_\")\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                       (string-upcase (substring x 1))\n                       x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x)\n          (if (string=? (substring x 0 1) \"_\")\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x) (if (equal? (string-ref x 0) #\\_)\n                       (string-upcase (substring x 1))\n                       x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                       (string-upcase (substring x 1))\n                       x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (define (helper word acc)\n    (if (empty? word)\n        acc\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (string-append acc (string-upcase (string (second word)))))\n            (helper (rest word) (string-append acc (string (first word)))))))\n  (helper word \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                       (string-upcase (substring x 1))\n                       x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-length x) 1)\n          (string-upcase x)\n          (string-append (string-upcase (substring x 0 1)) (substring x 1))))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (word)\n          (string-capitalize word))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (str)\n      (string-capitalize str))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join (map (lambda (x) (string-upcase x)) (string-split word #\\_)) \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join (map (lambda (x) (string-upcase x)) (string-split word #\\_)) \"\"))\n",
    "  (define (helper word acc)\n    (if (empty? word)\n        acc\n        (if (equal? (first word) #\\_)\n            (helper (rest word) (string-append acc (string-upcase (string (second word)))))\n            (helper (rest word) (string-append acc (string (first word)))))))\n  (helper word \"\"))\n",
    "  (string-join\n   (map (lambda (w) (string-upcase w))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (w)\n      (string-upcase (substring w 1)))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (string-join (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                                    (string-upcase (substring x 1))\n                                    x))\n                     (string-split word #\\_)) \"\"))\n",
    "  (define (helper word result)\n    (cond\n      [(empty? word) result]\n      [(char=? #\\_ (first word))\n       (helper (rest word)\n               (string-append result\n                              (string-upcase (first (rest word)))))\n       ]\n      [else (helper (rest word)\n                    (string-append result (string (first word))))]))\n  (helper word \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-length x) 1)\n          (string-upcase x)\n          (string-upcase (substring x 0 1))\n          (substring x 1)))\n    (regexp-split #px\"_\" word))\n   \"\"))\n",
    "  (define (convert-word word)\n    (define (convert-word-helper word result)\n      (if (empty? word)\n          result\n          (if (char=? (first word) #\\_)\n              (convert-word-helper (rest word) (string-append result (string-upcase (string (second word)))))\n              (convert-word-helper (rest word) (string-append result (string (first word)))))))\n    (convert-word-helper word \"\"))\n  (convert-word word))\n",
    "  (define (helper word acc)\n    (cond\n      [(empty? word) (reverse acc)]\n      [(char=? (first word) #\\_) (helper (rest word) (cons (char-upcase (first (rest word))) (rest (rest word))))]\n      [else (helper (rest word) (cons (first word) acc))]))\n  (helper word '()))\n",
    "  (string-join\n   (map (lambda (x) (if (equal? (string-ref x 0) #\\_)\n                        (string-upcase (substring x 1))\n                        x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (define (helper word result)\n    (if (empty? word)\n        (string-join (reverse result))\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (cons (string-upcase (second word)) (rest result)))\n            (helper (rest word) (cons (first word) result)))))\n  (helper word '()))\n",
    "  (string-join\n   (map (lambda (w) (string-upcase (substring w 0 1)) (substring w 1))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-ref x 0) #\\_)\n          (string-upcase (string-drop x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x) (string-capitalize x))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (define (helper word)\n    (if (string-empty? word)\n        \"\"\n        (if (string=? (string-take word 1) \"_\")\n            (string-append (string-upcase (string-take word 2)) (helper (string-drop word 2)))\n            (string-append (string-take word 1) (helper (string-drop word 1))))))\n  (string-downcase (helper word)))\n",
    "  (string-join\n   (map (lambda (x)\n          (if (string=? (substring x 0 1) \"_\")\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (string-contains x #\\_)\n          (string-upcase (string-drop x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (s) (string-upcase s))\n        (regexp-split #rx\"_\" word)) \"\"))\n",
    "  (string-join\n   (map (\u03bb (x) (string-upcase x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (define (convert word)\n    (cond\n      [(empty? word) empty]\n      [(char=? (first word) #\\_) (cons (char-upcase (second word)) (convert (rest (rest word))))]\n      [else (cons (first word) (convert (rest word)))]))\n  (convert word))\n",
    "  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (w)\n      (string-upcase (substring w 1)))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (w) (string-upcase w))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (define (helper word result)\n    (cond [(empty? word) result]\n          [(char=? (first word) #\\_)\n           (helper (rest word) (string-append result (string-upcase (first (rest word)))))\n           ]\n          [else (helper (rest word) (string-append result (string (first word))))]))\n  (helper word \"\"))\n",
    "  (string-join\n   (map (lambda (x) (string-upcase x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (define (helper word result)\n    (if (empty? word)\n        result\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (string-append result (string-upcase (string (second word)))))\n            (helper (rest word) (string-append result (string (first word)))))))\n  (helper word \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (string=? (substring x 0 1) \"_\")\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (define (helper word result)\n    (if (string-empty? word)\n        result\n        (if (char=? (string-ref word 0) #\\_)\n            (helper (substring word 1 (string-length word))\n                    (string-append result (string-upcase (string-ref word 1))))\n            (helper (substring word 1 (string-length word))\n                    (string-append result (string-ref word 0))))))\n  (helper word \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (define (helper word)\n    (if (string-empty? word)\n        \"\"\n        (string-append (string-capitalize (string-take word 1))\n                       (string-drop word 1))))\n  (string-join (map helper (string-split word #\\_)) \"\"))\n",
    "  (define (helper word result)\n    (cond\n      [(empty? word) result]\n      [(char=? (first word) #\\_) (helper (rest word) (string-append result (string-upcase (string (second word)))))]\n      [else (helper (rest word) (string-append result (string (first word))))]))\n  (helper word \"\"))\n",
    "  (string-join\n   (map (lambda (x)\n          (if (equal? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join (map (lambda (x) (if (char=? #\\_ (string-ref x 0))\n                                    (string-upcase (substring x 1))\n                                    x))\n                     (string-split word #\\_))\n               \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x) (string-upcase x))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (define (helper word result)\n    (cond [(empty? word) result]\n          [(char=? (first word) #\\_)\n           (helper (rest word) (string-append result (string-upcase (first (rest word)))))\n           ]\n          [else (helper (rest word) (string-append result (string (first word))))]))\n  (helper word \"\"))\n",
    "  (string-join\n   (map (lambda (x) (if (equal? (string-ref x 0) #\\_)\n                       (string-upcase (substring x 1))\n                       x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (define (helper word)\n    (if (string-contains word #\\_)\n        (string-append (string-upcase (string-take word 1))\n                       (string-drop word 1))\n        word))\n  (define (helper2 word)\n    (if (string-contains word #\\_)\n        (string-append (helper (string-take word (string-index word #\\_)))\n                       (string-drop word (add1 (string-index word #\\_))))\n        word))\n  (helper2 word))\n",
    "  (define (helper word result)\n    (cond\n      [(empty? word) result]\n      [(char=? #\\_ (first word)) (helper (rest word) (string-append result (string-upcase (first (rest word))))) ]\n      [else (helper (rest word) (string-append result (string (first word))))]))\n  (helper word \"\"))\n",
    "  (string-join (map string-upcase (string-split word #\"_\")) \"\"))\n",
    "  (string-join\n   (map (lambda (x) (string-upcase x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x) (string-upcase x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (word)\n      (string-upcase (substring word 0 1))\n      (substring word 1))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (w)\n      (string-upcase (substring w 1)))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (w)\n      (string-upcase (substring w 1)))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (word)\n          (string-upcase (substring word 0 1))\n          (substring word 1))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (substring x 0 1) \"_\")\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join (map (lambda (x) (if (equal? #\\_ (string-ref x 0))\n                                    (string-upcase (substring x 1))\n                                    x))\n                     (string-split word #\\_))\n               \"\"))\n",
    "  (string-join\n   (map\n    (lambda (word)\n      (string-upcase (substring word 1)))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x)\n          (if (char-numeric? (string-ref x 0))\n              x\n              (string-titlecase x)))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (word)\n      (string-upcase (substring word 1)))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (define (helper word result)\n    (if (empty? word)\n        result\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (string-append result (string-upcase (string (second word)))))\n            (helper (rest word) (string-append result (string (first word)))))))\n  (helper word \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (char-numeric? (string-ref x 0))\n          x\n          (string-upcase x)))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (define (helper word acc)\n    (cond\n      [(empty? word) (list->string (reverse acc))]\n      [(char=? (first word) #\\_) (helper (rest word) (cons (char-upcase (first (rest word))) (rest (rest word))))]\n      [else (helper (rest word) (cons (first word) acc))]))\n  (helper word '()))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (char-numeric? (string-ref x 0))\n          x\n          (string-titlecase x)))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (w)\n      (string-upcase (substring w 1)))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (define (snake_to_camel_iter word acc)\n    (cond\n      [(empty? word) (list->string (reverse acc))]\n      [(equal? (first word) #\\_)\n       (snake_to_camel_iter (rest word) (cons (char-upcase (second word)) (rest acc)))]\n      [else (snake_to_camel_iter (rest word) (cons (first word) acc))]))\n  (snake_to_camel_iter word '()))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (define (snake_to_camel_iter word result)\n    (if (empty? word)\n        result\n        (if (char=? (first word) #\\_)\n            (snake_to_camel_iter (rest word) (string-append result (string-upcase (string (second word)))))\n            (snake_to_camel_iter (rest word) (string-append result (string (first word)))))))\n  (snake_to_camel_iter word \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (string=? (substring x 0 1) \"_\")\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (define (helper w acc)\n    (if (empty? w)\n        (string-join (reverse acc))\n        (if (equal? (first w) #\\_)\n            (helper (rest w) (cons (string-upcase (second w)) (rest acc)))\n            (helper (rest w) (cons (first w) acc)))))\n  (helper (string->list word) '()))\n",
    "  (string-join\n   (map\n    (lambda (w)\n      (string-upcase (substring w 0 1))\n      (substring w 1))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                                    (string-upcase (substring x 1))\n                                    x))\n                     (string-split word #\\_))\n               \"\"))\n",
    "  (string-append (string-upcase (substring word 0 1)) (substring word 1)))\n",
    "  (define (helper word acc)\n    (cond\n      [(empty? word) (reverse acc)]\n      [(char=? (first word) #\\_) (helper (rest word) (cons (char-upcase (first (rest word))) (rest (rest word))))]\n      [else (helper (rest word) (cons (first word) acc))]))\n  (helper word '()))\n",
    "  (string-join (map (lambda (x) (if (equal? (string-ref x 0) #\\_)\n                                    (string-upcase (string-drop x 1))\n                                    x))\n                     (string-split word #\\_)) \"\"))\n",
    "  (string-join\n   (map (lambda (w)\n          (string-upcase (substring w 0 1))\n          (substring w 1))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1 (string-length x)))\n          x))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-append (string-upcase (substring word 0 1))\n                 (substring word 1)))\n",
    "  (define (helper word result)\n    (cond\n      [(empty? word) result]\n      [(char=? (first word) #\\_) (helper (rest word) (string-append result (string-upcase (string (second word))))) ]\n      [else (helper (rest word) (string-append result (string (first word))))]))\n  (helper word \"\"))\n",
    "  (string-join\n   (map\n    (lambda (word)\n      (string-upcase (substring word 0 1))\n      (substring word 1))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (word)\n          (string-upcase (substring word 0 1))\n          (substring word 1))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (let ([word (string-split word #\\_)])\n    (string-join (map (lambda (x) (string-upcase (substring x 0 1)) (substring x 1)) word) \"\")))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (w) (string-upcase w))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (\u03bb (x) (string-upcase x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join (map (lambda (x) (string-upcase x)) (string-split word #\\_)) \"\"))\n",
    "  (define (helper word)\n    (if (string-empty? word)\n        \"\"\n        (if (string=? (string-take word 1) \"_\")\n            (string-append (string-upcase (string-take word 2))\n                           (helper (string-drop word 2)))\n            (string-append (string-take word 1)\n                           (helper (string-drop word 1))))))\n  (helper (string-downcase word)))\n",
    "  (string-join\n   (map (lambda (x) (string-upcase x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (substring x 0 1) \"_\")\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (define (helper word result)\n    (if (empty? word)\n        result\n        (if (equal? (first word) #\\_)\n            (helper (rest word) (string-append result (string-upcase (string (second word)))))\n            (helper (rest word) (string-append result (string (first word)))))))\n  (helper word \"\"))\n",
    "  (define (snake_to_camel_iter word result)\n    (cond [(empty? word) result]\n          [(char=? (first word) #\\_)\n           (snake_to_camel_iter (rest word) (string-append result (string-upcase (string (second word)))))\n           ]\n          [else (snake_to_camel_iter (rest word) (string-append result (string (first word))))]))\n  (snake_to_camel_iter word \"\"))\n",
    "  (define (helper word result)\n    (if (empty? word)\n        result\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (string-append result (string-upcase (string (second word)))))\n            (helper (rest word) (string-append result (string (first word)))))))\n  (helper word \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-length x) 1)\n          (string-upcase x)\n          (string-append (string-upcase (substring x 0 1))\n                        (substring x 1))))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join (map string-upcase (regexp-split #rx\"_\" word)) \"\"))\n",
    "  (string-append (string-upcase (substring word 0 1))\n                 (substring word 1)))\n",
    "  (string-join\n   (map (lambda (x) (string-upcase x))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (define (helper word result)\n    (cond\n      [(empty? word) result]\n      [(char=? (first word) #\\_) (helper (rest word) (string-append result (string-upcase (string (second word)))))]\n      [else (helper (rest word) (string-append result (string (first word))))]))\n  (helper word \"\"))\n",
    "  (string-join\n   (map\n    (lambda (w)\n      (string-upcase (substring w 0 1))\n      (substring w 1))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x)\n          (if (string=? (substring x 0 1) \"_\")\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (define (helper word result)\n    (cond\n      [(empty? word) result]\n      [(char=? (first word) #\\_) (helper (rest word) (string-append result (string-upcase (string (second word))))) ]\n      [else (helper (rest word) (string-append result (string (first word))))]))\n  (helper word \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x) (string-capitalize x))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (define (convert-word word)\n    (string-append (string-upcase (substring word 0 1))\n                   (substring word 1)))\n  (define (convert-words words)\n    (if (empty? words)\n        '()\n        (cons (convert-word (first words))\n              (convert-words (rest words)))))\n  (string-join (convert-words (string-split word #\\_)) \"\"))\n",
    "  (string-join\n   (map (lambda (x)\n          (if (equal? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (word)\n      (string-upcase (substring word 1)))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (w) (string-upcase (substring w 1)))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x) (string-upcase (substring x 1)))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (let loop ([word word]\n             [result '()])\n    (cond [(empty? word) (string-join (reverse result))]\n          [(char=? (first word) #\\_) (loop (rest word) (cons (char-upcase (second word)) result))]\n          [else (loop (rest word) (cons (first word) result))])))\n",
    "  (string-join\n   (map (lambda (x) (string-upcase x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (define (helper word result)\n    (if (empty? word)\n        result\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (string-append result (string-upcase (string (second word)))))\n            (helper (rest word) (string-append result (string (first word)))))))\n  (helper word \"\"))\n",
    "  (define (helper word acc)\n    (if (empty? word)\n        acc\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (string-append acc (string-upcase (string (second word)))))\n            (helper (rest word) (string-append acc (string (first word)))))))\n  (helper word \"\"))\n",
    "  (string-join\n   (map\n    (lambda (word)\n      (string-capitalize word))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (define (helper word result)\n    (cond\n      [(empty? word) result]\n      [(char=? (first word) #\\_) (helper (rest word) (string-append result (string-upcase (string (second word)))))]\n      [else (helper (rest word) (string-append result (string (first word))))]))\n  (helper word \"\"))\n",
    "  (define (helper word result)\n    (if (string-empty? word)\n        result\n        (if (string=? (substring word 0 1) \"_\")\n            (helper (substring word 1) (string-append result (string-upcase (substring word 1 1))))\n            (helper (substring word 1) (string-append result (substring word 0 1))))))\n  (helper word \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-length x) 1)\n          x\n          (string-append (string-upcase (substring x 0 1)) (substring x 1))))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (string-join\n   (map string-upcase\n        (regexp-split #rx\"_\" word))\n   \"\"))\n"
  ]
}