{
  "name": "mbpp_411_snake_to_camel",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_411_snake_to_camel.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (helper word result)\n    (if (empty? word)\n        result\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (string-append result (string-upcase (string (second word)))))\n            (helper (rest word) (string-append result (string (first word)))))))\n  (helper word \"\"))\n",
    "  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (define (helper word result)\n    (cond [(empty? word) result]\n          [(char=? (first word) #\\_)\n           (helper (rest word) (string-append result (string-upcase (first (rest word))))) ]\n          [else (helper (rest word) (string-append result (first word)))]))\n  (helper word \"\"))\n",
    "  (string-join\n   (map (lambda (x) (string-upcase x))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x)\n          (if (equal? (string-length x) 1)\n              (string-upcase x)\n              (string-append\n               (string-upcase (substring x 0 1))\n               (substring x 1))))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (w)\n      (string-upcase (substring w 1)))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x) (string-upcase x))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (w) (string-upcase w))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (define (helper word acc)\n    (if (empty? word)\n        (string-join (reverse acc))\n        (if (char=? (string-ref word 0) #\\_)\n            (helper (substring word 1) (cons (string-upcase (string-ref word 1)) acc))\n            (helper (substring word 1) (cons (string-ref word 0) acc)))))\n  (helper word '()))\n",
    "  (string-join (map (lambda (x) (if (equal? (string-ref x 0) #\\_)\n                                (string-upcase (string-ref x 1))\n                                x))\n                     (string-split word #\\_))\n               \"\"))\n",
    "  (cond\n    [(empty? word) empty]\n    [(char=? (first word) #\\_)\n     (cons (char-upcase (second word)) (snake_to_camel (rest (rest word))))]\n    [else (cons (first word) (snake_to_camel (rest word)))]))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (define (helper word result)\n    (cond\n      [(empty? word) result]\n      [(char=? #\\_ (first word)) (helper (rest word) (string-append result (string-upcase (first (rest word))))) ]\n      [else (helper (rest word) (string-append result (first word)))]))\n  (helper word \"\"))\n",
    "  (define (helper word acc)\n    (if (empty? word)\n        acc\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (string-append acc (string-upcase (string (second word)))))\n            (helper (rest word) (string-append acc (string (first word)))))))\n  (helper word \"\"))\n",
    "  (let loop ([word word]\n             [result '()])\n    (cond [(empty? word) (string-join (reverse result) \"\")]\n          [(char=? (first word) #\\_) (loop (rest word) (cons (char-upcase (second word)) result))]\n          [else (loop (rest word) (cons (first word) result))])))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-length x) 1)\n          (string-upcase x)\n          (string-append (string-upcase (substring x 0 1))\n                        (substring x 1))))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (define (helper word result)\n    (if (empty? word)\n        result\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (string-append result (string-upcase (string (second word)))))\n            (helper (rest word) (string-append result (string (first word)))))))\n  (helper word \"\"))\n",
    "  (string-join\n   (map (lambda (word)\n          (string-upcase (substring word 0 1))\n          (substring word 1))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (string-join (map (lambda (w) (string-upcase w)) (string-split word #\"_\")) \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x) (string-upcase x))\n    (string-split word #\\_))\n   \"\"))\n"
  ]
}