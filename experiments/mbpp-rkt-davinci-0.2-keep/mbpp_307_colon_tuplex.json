{
  "name": "mbpp_307_colon_tuplex",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to get a colon of a tuple.\n(define (colon_tuplex tuplex m n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_307_colon_tuplex.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate colon_tuplex))\n    (check-equal? (candidate (list \"HELLO\" 5 (list ) #t) 2 50) (list \"HELLO\" 5 (list 50) #t))\n    (check-equal? (candidate (list \"HELLO\" 5 (list ) #t) 2 100) (list \"HELLO\" 5 (list 100) #t))\n    (check-equal? (candidate (list \"HELLO\" 5 (list ) #t) 2 500) (list \"HELLO\" 5 (list 500) #t))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond\n    [(= m n) (list (list-ref tuplex m))]\n    [else (cons (list-ref tuplex m) (colon_tuplex tuplex (+ m 1) n))]))\n",
    "  (cond\n    [(= m n) (list (list-ref tuplex m))]\n    [else (cons (list-ref tuplex m) (colon_tuplex tuplex (+ m 1) n))]))\n",
    "  (cond ((= m n) (list (list-ref tuplex m)))\n        (else (cons (list-ref tuplex m) (colon_tuplex tuplex (+ m 1) n)))))\n",
    "  (cond\n    [(= m n) (list (list-ref tuplex m))]\n    [else (cons (list-ref tuplex m) (colon_tuplex tuplex (+ m 1) n))]))\n",
    "  (if (or (&lt; m 0) (&lt; n 0) (&gt; m (sub1 (length tuplex))) (&gt; n (sub1 (length tuplex))))\n      '()\n      (cons (list-ref tuplex m) (colon_tuplex tuplex (add1 m) n))))\n",
    "  (cond\n    [(= m n) (list (list-ref tuplex m))]\n    [else (cons (list-ref tuplex m) (colon_tuplex tuplex (+ m 1) n))]))\n",
    "  (if (= m 0)\n      (list (list-ref tuplex n))\n      (cons (list-ref tuplex n) (colon_tuplex tuplex (- m 1) (+ n 1)))))\n",
    "  (cond\n    [(= m n) (list (list-ref tuplex m))]\n    [else (cons (list-ref tuplex m) (colon_tuplex tuplex (+ m 1) n))]))\n",
    "  (if (or (= m 0) (= n 0))\n      '()\n      (cons (list-ref tuplex m)\n            (colon_tuplex tuplex (- m 1) (- n 1)))))\n",
    "  (if (or (= m 0) (= n 0))\n      '()\n      (cons (list-ref tuplex m)\n            (colon_tuplex tuplex (- m 1) (- n 1)))))\n",
    "  (if (&lt;= m n)\n      (cons (list-ref tuplex m)\n            (colon_tuplex tuplex (+ m 1) n))\n      '()))\n",
    "  (cond\n    [(= m n) (list (list-ref tuplex m))]\n    [else (cons (list-ref tuplex m) (colon_tuplex tuplex (+ m 1) n))]))\n",
    "  (cond\n    [(= m n) (list (list-ref tuplex m))]\n    [else (cons (list-ref tuplex m) (colon_tuplex tuplex (+ m 1) n))]))\n",
    "  (if (= m n)\n      (list (list-ref tuplex m))\n      (cons (list-ref tuplex m) (colon_tuplex tuplex (+ m 1) n))))\n",
    "  (if (or (&lt; m 0) (&lt; n 0) (&gt; m (tuple-length tuplex)) (&gt; n (tuple-length tuplex)))\n      '()\n      (if (= m n)\n          (list (tuple-ref tuplex m))\n          (cons (tuple-ref tuplex m) (colon_tuplex tuplex (+ m 1) n)))))\n",
    "  (if (= m n)\n      (list (list-ref tuplex m))\n      (append (list (list-ref tuplex m)) (colon_tuplex tuplex (+ m 1) n))))\n",
    "  (if (= m n)\n      (list (list-ref tuplex m))\n      (append (list (list-ref tuplex m)) (colon_tuplex tuplex (+ m 1) n))))\n",
    "  (cond\n    [(empty? tuplex) empty]\n    [(= m n) (cons (first tuplex) (colon_tuplex (rest tuplex) m n))]\n    [else (colon_tuplex (rest tuplex) (+ m 1) n)]))\n",
    "  (cond\n    [(zero? m) (car tuplex)]\n    [(zero? n) (cdr tuplex)]\n    [else (colon_tuplex (cdr tuplex) (- m 1) (- n 1))]))\n",
    "  (if (= m n)\n      (list (list-ref tuplex m))\n      (cons (list-ref tuplex m) (colon_tuplex tuplex (+ m 1) n))))\n"
  ]
}