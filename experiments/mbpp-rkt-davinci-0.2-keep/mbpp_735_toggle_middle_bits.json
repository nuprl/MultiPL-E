{
  "name": "mbpp_735_toggle_middle_bits",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n(define (toggle_middle_bits n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_735_toggle_middle_bits.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_middle_bits))\n    (check-equal? (candidate 9) 15)\n    (check-equal? (candidate 10) 12)\n    (check-equal? (candidate 11) 13)\n    (check-equal? (candidate 65) 127)\n    (check-equal? (candidate 77) 115)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (toggle_middle_bits_helper n i)\n    (if (zero? i)\n        n\n        (let ([mask (expt 2 i)])\n          (if (zero? (bitwise-and n mask))\n              (toggle_middle_bits_helper (bitwise-ior n mask) (- i 1))\n              (toggle_middle_bits_helper (bitwise-and n (bitwise-not mask)) (- i 1))))))\n  (toggle_middle_bits_helper n (- (bit-length n) 2)))\n",
    "  (define (toggle-bit n i)\n    (bitwise-xor n (bitwise-shift-left 1 i)))\n  (define (toggle-bits n i)\n    (if (= i 0)\n        n\n        (toggle-bits (toggle-bit n i) (- i 1))))\n  (toggle-bits n (- (bit-length n) 2)))\n",
    "  (let ([mask (bitwise-ior (bitwise-not (bitwise-arithmetic-shift 1 (sub1 (bit-length n)))) 1)])\n    (bitwise-xor n mask)))\n",
    "  (define (toggle_middle_bits_helper n i)\n    (if (= i 1)\n        n\n        (let ([mask (expt 2 (- i 2))])\n          (if (= (logand n mask) 0)\n              (toggle_middle_bits_helper (logior n mask) (- i 1))\n              (toggle_middle_bits_helper (logand n (lognot mask)) (- i 1))))))\n  (toggle_middle_bits_helper n (integer-length n)))\n",
    "  (define (toggle_middle_bits_iter n i)\n    (if (= i (bit-count n))\n        n\n        (if (zero? (bit-test n i))\n            (toggle_middle_bits_iter (bit-set n i) (+ i 1))\n            (toggle_middle_bits_iter (bit-clear n i) (+ i 1)))))\n  (toggle_middle_bits_iter n 1))\n",
    "  (define (toggle_middle_bits_iter n i)\n    (cond\n      [(= i 1) n]\n      [(= i (bit-length n)) n]\n      [else (toggle_middle_bits_iter (bitwise-xor n (bitwise-shift-left 1 (- i 1))) (- i 1))]))\n  (toggle_middle_bits_iter n (- (bit-length n) 1)))\n",
    "  (define (toggle_middle_bits-iter n i)\n    (if (= i 1)\n        n\n        (let ([mask (bitwise-bit-set 0 i)])\n          (toggle_middle_bits-iter (bitwise-xor n mask) (- i 1)))))\n  (toggle_middle_bits-iter n (- (bit-length n) 2)))\n",
    "  (define (toggle_middle_bits-helper n i)\n    (cond\n      [(= i 0) n]\n      [(= i 1) n]\n      [(= i 2) (bitwise-xor n (bitwise-rotate-bit-field n 1 1))]\n      [else (toggle_middle_bits-helper (bitwise-xor n (bitwise-rotate-bit-field n 1 i)) (- i 1))]))\n  (toggle_middle_bits-helper n (bit-length n)))\n",
    "  (define (toggle_bit n i)\n    (bitwise-xor n (bitwise-shift-left 1 i)))\n  (define (toggle_middle_bits-iter n i)\n    (if (zero? i)\n        n\n        (toggle_middle_bits-iter (toggle_bit n i) (sub1 i))))\n  (toggle_middle_bits-iter n (- (bit-length n) 2)))\n",
    "  (define (toggle_middle_bits_helper n i)\n    (cond\n      [(= i 1) n]\n      [(= i (- (bit-length n) 1)) n]\n      [else (toggle_middle_bits_helper (bitwise-xor n (ash 1 (- i 1))) (- i 1))]))\n  (toggle_middle_bits_helper n (- (bit-length n) 1)))\n",
    "  (let ([mask (bitwise-ior (bitwise-not (bitwise-arithmetic-shift 1 (sub1 (bit-length n)))) 1)])\n    (bitwise-xor n mask)))\n",
    "  (define (toggle_middle_bits_helper n i)\n    (if (= i 0)\n        n\n        (let ([mask (expt 2 (- i 1))])\n          (toggle_middle_bits_helper (bitwise-xor n mask) (- i 1)))))\n  (toggle_middle_bits_helper n (- (bit-length n) 2)))\n",
    "  (define (toggle_middle_bits_iter n i)\n    (cond [(= i 0) n]\n          [(= i 1) n]\n          [(= i (- (bit-length n) 1)) n]\n          [else (toggle_middle_bits_iter (bitwise-xor n (ash 1 (- i 1))) (- i 1))]))\n  (toggle_middle_bits_iter n (- (bit-length n) 1)))\n",
    "  (define (toggle-bit n i)\n    (bitwise-xor n (bitwise-shift-left 1 i)))\n  (define (toggle-bits n i)\n    (if (= i (- (bit-length n) 2))\n        n\n        (toggle-bits (toggle-bit n i) (+ i 1))))\n  (toggle-bits n 1))\n",
    "  (define (toggle-bit n i)\n    (bitwise-xor n (bitwise-shift 1 i)))\n  (define (toggle-bits n i)\n    (if (= i 1)\n        n\n        (toggle-bits (toggle-bit n i) (- i 1))))\n  (toggle-bits n (- (bit-length n) 1)))\n",
    "  (define (toggle-bit n i)\n    (bitwise-xor n (bitwise-shift-left 1 i)))\n  (define (toggle-bits n i)\n    (if (= i 0)\n        n\n        (toggle-bits (toggle-bit n i) (- i 1))))\n  (toggle-bits n (- (bit-length n) 2)))\n",
    "  (define (toggle_middle_bits_iter n i)\n    (if (= i 0)\n        n\n        (let ([mask (expt 2 i)])\n          (toggle_middle_bits_iter (bitwise-xor n mask) (- i 1)))))\n  (toggle_middle_bits_iter n (- (bit-length n) 2)))\n",
    "  (define (toggle_bit n i)\n    (bitwise-xor n (bitwise-shift-left 1 i)))\n  (define (toggle_middle_bits_iter n i)\n    (cond\n      [(= i 1) n]\n      [(= i (bitwise-length n)) n]\n      [else (toggle_middle_bits_iter (toggle_bit n i) (+ i 1))]))\n  (toggle_middle_bits_iter n 2))\n",
    "  (let ([mask (logxor (ash 1 (sub1 (bit-length n))) 1)])\n    (logxor n mask)))\n",
    "  (define (toggle-bit n i)\n    (bitwise-xor n (bitwise-shift-left 1 i)))\n  (define (toggle-middle-bits n i)\n    (if (= i (- (bitwise-length n) 2))\n        n\n        (toggle-middle-bits (toggle-bit n i) (+ i 1))))\n  (toggle-middle-bits n 1))\n"
  ]
}