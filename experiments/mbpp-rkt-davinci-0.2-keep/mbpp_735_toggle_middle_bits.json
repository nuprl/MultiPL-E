{
  "name": "mbpp_735_toggle_middle_bits",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n(define (toggle_middle_bits n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_735_toggle_middle_bits.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_middle_bits))\n    (check-equal? (candidate 9) 15)\n    (check-equal? (candidate 10) 12)\n    (check-equal? (candidate 11) 13)\n    (check-equal? (candidate 65) 127)\n    (check-equal? (candidate 77) 115)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (toggle_middle_bits_helper n i)\n    (if (zero? i)\n        n\n        (let ([mask (expt 2 i)])\n          (if (zero? (bitwise-and n mask))\n              (toggle_middle_bits_helper (bitwise-ior n mask) (- i 1))\n              (toggle_middle_bits_helper (bitwise-and n (bitwise-not mask)) (- i 1))))))\n  (toggle_middle_bits_helper n (- (bit-length n) 2)))\n",
    "  (define (toggle-bit n i)\n    (bitwise-xor n (bitwise-shift-left 1 i)))\n  (define (toggle-bits n i)\n    (if (= i 0)\n        n\n        (toggle-bits (toggle-bit n i) (- i 1))))\n  (toggle-bits n (- (bit-length n) 2)))\n",
    "  (let ([mask (bitwise-ior (bitwise-not (bitwise-arithmetic-shift 1 (sub1 (bit-length n)))) 1)])\n    (bitwise-xor n mask)))\n",
    "  (define (toggle_middle_bits_helper n i)\n    (if (= i 1)\n        n\n        (let ([mask (expt 2 (- i 2))])\n          (if (= (logand n mask) 0)\n              (toggle_middle_bits_helper (logior n mask) (- i 1))\n              (toggle_middle_bits_helper (logand n (lognot mask)) (- i 1))))))\n  (toggle_middle_bits_helper n (integer-length n)))\n",
    "  (define (toggle_middle_bits_iter n i)\n    (if (= i (bit-count n))\n        n\n        (if (zero? (bit-test n i))\n            (toggle_middle_bits_iter (bit-set n i) (+ i 1))\n            (toggle_middle_bits_iter (bit-clear n i) (+ i 1)))))\n  (toggle_middle_bits_iter n 1))\n",
    "  (define (toggle_middle_bits_iter n i)\n    (cond\n      [(= i 1) n]\n      [(= i (bit-length n)) n]\n      [else (toggle_middle_bits_iter (bitwise-xor n (bitwise-shift-left 1 (- i 1))) (- i 1))]))\n  (toggle_middle_bits_iter n (- (bit-length n) 1)))\n",
    "  (define (toggle_middle_bits-iter n i)\n    (if (= i 1)\n        n\n        (let ([mask (bitwise-bit-set 0 i)])\n          (toggle_middle_bits-iter (bitwise-xor n mask) (- i 1)))))\n  (toggle_middle_bits-iter n (- (bit-length n) 2)))\n",
    "  (define (toggle_middle_bits-helper n i)\n    (cond\n      [(= i 0) n]\n      [(= i 1) n]\n      [(= i 2) (bitwise-xor n (bitwise-rotate-bit-field n 1 1))]\n      [else (toggle_middle_bits-helper (bitwise-xor n (bitwise-rotate-bit-field n 1 i)) (- i 1))]))\n  (toggle_middle_bits-helper n (bit-length n)))\n",
    "  (define (toggle_bit n i)\n    (bitwise-xor n (bitwise-shift-left 1 i)))\n  (define (toggle_middle_bits-iter n i)\n    (if (zero? i)\n        n\n        (toggle_middle_bits-iter (toggle_bit n i) (sub1 i))))\n  (toggle_middle_bits-iter n (- (bit-length n) 2)))\n",
    "  (define (toggle_middle_bits_helper n i)\n    (cond\n      [(= i 1) n]\n      [(= i (- (bit-length n) 1)) n]\n      [else (toggle_middle_bits_helper (bitwise-xor n (ash 1 (- i 1))) (- i 1))]))\n  (toggle_middle_bits_helper n (- (bit-length n) 1)))\n",
    "  (let ([mask (bitwise-ior (bitwise-not (bitwise-arithmetic-shift 1 (sub1 (bit-length n)))) 1)])\n    (bitwise-xor n mask)))\n",
    "  (define (toggle_middle_bits_helper n i)\n    (if (= i 0)\n        n\n        (let ([mask (expt 2 (- i 1))])\n          (toggle_middle_bits_helper (bitwise-xor n mask) (- i 1)))))\n  (toggle_middle_bits_helper n (- (bit-length n) 2)))\n",
    "  (define (toggle_middle_bits_iter n i)\n    (cond [(= i 0) n]\n          [(= i 1) n]\n          [(= i (- (bit-length n) 1)) n]\n          [else (toggle_middle_bits_iter (bitwise-xor n (ash 1 (- i 1))) (- i 1))]))\n  (toggle_middle_bits_iter n (- (bit-length n) 1)))\n",
    "  (define (toggle-bit n i)\n    (bitwise-xor n (bitwise-shift-left 1 i)))\n  (define (toggle-bits n i)\n    (if (= i (- (bit-length n) 2))\n        n\n        (toggle-bits (toggle-bit n i) (+ i 1))))\n  (toggle-bits n 1))\n",
    "  (define (toggle-bit n i)\n    (bitwise-xor n (bitwise-shift 1 i)))\n  (define (toggle-bits n i)\n    (if (= i 1)\n        n\n        (toggle-bits (toggle-bit n i) (- i 1))))\n  (toggle-bits n (- (bit-length n) 1)))\n",
    "  (define (toggle-bit n i)\n    (bitwise-xor n (bitwise-shift-left 1 i)))\n  (define (toggle-bits n i)\n    (if (= i 0)\n        n\n        (toggle-bits (toggle-bit n i) (- i 1))))\n  (toggle-bits n (- (bit-length n) 2)))\n",
    "  (define (toggle_middle_bits_iter n i)\n    (if (= i 0)\n        n\n        (let ([mask (expt 2 i)])\n          (toggle_middle_bits_iter (bitwise-xor n mask) (- i 1)))))\n  (toggle_middle_bits_iter n (- (bit-length n) 2)))\n",
    "  (define (toggle_bit n i)\n    (bitwise-xor n (bitwise-shift-left 1 i)))\n  (define (toggle_middle_bits_iter n i)\n    (cond\n      [(= i 1) n]\n      [(= i (bitwise-length n)) n]\n      [else (toggle_middle_bits_iter (toggle_bit n i) (+ i 1))]))\n  (toggle_middle_bits_iter n 2))\n",
    "  (let ([mask (logxor (ash 1 (sub1 (bit-length n))) 1)])\n    (logxor n mask)))\n",
    "  (define (toggle-bit n i)\n    (bitwise-xor n (bitwise-shift-left 1 i)))\n  (define (toggle-middle-bits n i)\n    (if (= i (- (bitwise-length n) 2))\n        n\n        (toggle-middle-bits (toggle-bit n i) (+ i 1))))\n  (toggle-middle-bits n 1))\n",
    "  (define (toggle-bit n i)\n    (bitwise-xor n (bitwise-shift-left 1 i)))\n  (define (toggle-bits n i)\n    (if (= i 0)\n        n\n        (toggle-bits (toggle-bit n i) (- i 1))))\n  (toggle-bits n (- (bit-length n) 2)))\n",
    "  (define (toggle-bit n i)\n    (bitwise-xor n (bitwise-shift-left 1 i)))\n  (define (toggle-bits n i)\n    (if (= i (bitwise-arithmetic-shift-right n 1))\n        n\n        (toggle-bits (toggle-bit n i) (+ i 1))))\n  (toggle-bits n 1))\n",
    "  (define (toggle_middle_bits-iter n acc)\n    (cond\n      [(zero? n) acc]\n      [(zero? (remainder n 2)) (toggle_middle_bits-iter (quotient n 2) (add1 (bitwise-shift-left acc 1)))]\n      [else (toggle_middle_bits-iter (quotient n 2) (bitwise-shift-left acc 1))]))\n  (toggle_middle_bits-iter n 0))\n",
    "  (define (toggle_middle_bits_helper n i)\n    (if (zero? i)\n        n\n        (let ([mask (bitwise-shift-left 1 i)])\n          (toggle_middle_bits_helper (bitwise-xor n mask) (- i 1)))))\n  (toggle_middle_bits_helper n (- (bit-length n) 2)))\n",
    "  (let ([mask (bitwise-ior (bitwise-shift-left 1 (sub1 (integer-length n))) (bitwise-shift-left 1 (- (integer-length n) 2)))])\n    (bitwise-xor n mask)))\n",
    "  (define (toggle_middle_bits_helper n i)\n    (if (= i 0)\n        (bitwise-and n 1)\n        (bitwise-xor (bitwise-and n (bitwise-shift-left 1 i)) (toggle_middle_bits_helper n (- i 1)))))\n  (toggle_middle_bits_helper n (- (bit-length n) 2)))\n",
    "  (let loop ([n n] [i 1] [result 0])\n    (if (= i (bitwise-count n))\n        result\n        (loop (bitwise-arithmetic-shift n 1) (add1 i) (bitwise-xor n result)))))\n",
    "  (define (toggle-bit n i)\n    (bitwise-xor n (bitwise-shift 1 i)))\n  (define (toggle-bits n i)\n    (if (= i 0)\n        n\n        (toggle-bits (toggle-bit n i) (- i 1))))\n  (toggle-bits n (- (bit-length n) 2)))\n",
    "  (let ([mask (bitwise-ior (bitwise-not (bitwise-and n 1))\n                           (bitwise-not (bitwise-and n (bitwise-not (bitwise-not 0)))))]\n        [result (bitwise-xor n mask)])\n    result))\n",
    "  (let ([mask (bitwise-ior (bitwise-not (bitwise-arithmetic-shift-left 1 (bit-count n))) 1)])\n    (bitwise-xor n mask)))\n",
    "  (let ([mask (bitwise-ior (bitwise-shift-left 1 (sub1 (integer-length n))) 1)])\n    (bitwise-xor n mask)))\n",
    "  (define (toggle_middle_bits_iter n mask)\n    (if (zero? mask)\n        n\n        (toggle_middle_bits_iter (bitwise-xor n mask) (bitwise-shift-right mask 1))))\n  (toggle_middle_bits_iter n (bitwise-shift-left 1 (- (bit-length n) 2))))\n",
    "  (let ([mask (bitwise-ior (bitwise-arithmetic-shift 1 (bitwise-arithmetic-shift-right-logical n 1))\n                           (bitwise-arithmetic-shift -2 (bitwise-arithmetic-shift-right-logical n 2)))])\n    (bitwise-xor n mask)))\n",
    "  (define (toggle_middle_bits_helper n i)\n    (if (= i 0)\n        n\n        (toggle_middle_bits_helper (bitwise-xor n (ash 1 i)) (- i 1))))\n  (toggle_middle_bits_helper n (- (bit-length n) 2)))\n",
    "  (define (toggle-bit n i)\n    (bitwise-xor n (bitwise-shift 1 i)))\n  (define (toggle-bits n i)\n    (if (= i (- (bit-length n) 2))\n        n\n        (toggle-bits (toggle-bit n i) (+ i 1))))\n  (toggle-bits n 1))\n",
    "  (define (toggle_bit n i)\n    (bitwise-xor n (bitwise-shift-left 1 i)))\n  (define (toggle_middle_bits-iter n i)\n    (cond ((= i 0) (toggle_bit n i))\n          ((= i 1) n)\n          ((= i 31) (toggle_bit n i))\n          (else (toggle_middle_bits-iter (toggle_bit n i) (- i 1)))))\n  (toggle_middle_bits-iter n 31))\n",
    "  (define (toggle-bit n i)\n    (bitwise-xor n (bitwise-shift-left 1 i)))\n  (define (toggle-bits n i)\n    (if (= i 0)\n        n\n        (toggle-bits (toggle-bit n i) (- i 1))))\n  (toggle-bits n (- (bit-length n) 2)))\n",
    "  (define (toggle-bit n i)\n    (bitwise-xor n (bitwise-shift-left 1 i)))\n  (define (toggle-bits n i)\n    (if (= i (bitwise-arithmetic-shift-right n 1))\n        n\n        (toggle-bits (toggle-bit n i) (+ i 1))))\n  (toggle-bits n 1))\n",
    "  (define (toggle_middle_bits_helper n i)\n    (cond\n      [(= i 0) n]\n      [(= i 1) n]\n      [else (toggle_middle_bits_helper (bitwise-xor n (bitwise-shift 1 (- i 2))) (- i 1))]))\n  (toggle_middle_bits_helper n (bit-length n)))\n",
    "  (let ([mask (bitwise-ior (bitwise-not (bitwise-arithmetic-shift 1 (sub1 (bit-length n)))) 1)])\n    (bitwise-xor n mask)))\n",
    "  (let ([mask (bitwise-ior (bitwise-shift-left 1 (sub1 (bit-length n))) (bitwise-shift-left 1 (- (bit-length n) 2)))])\n    (bitwise-xor n mask)))\n",
    "  (define (toggle_middle_bits-helper n i)\n    (if (= i 0)\n        n\n        (let ((mask (bitwise-xor n (ash 1 i))))\n          (toggle_middle_bits-helper mask (- i 1)))))\n  (toggle_middle_bits-helper n (- (bit-length n) 2)))\n",
    "  (define (toggle_middle_bits_helper n i)\n    (if (= i 0)\n        n\n        (let ([mask (expt 2 (- i 1))])\n          (if (bitwise-bit-set? n mask)\n              (toggle_middle_bits_helper (bitwise-clear n mask) (- i 1))\n              (toggle_middle_bits_helper (bitwise-set n mask) (- i 1))))))\n  (toggle_middle_bits_helper n (- (bit-length n) 2)))\n",
    "  (define (toggle-bit n i)\n    (bitwise-xor n (bitwise-shift-left 1 i)))\n  (define (toggle-bits n i)\n    (if (= i 1)\n        n\n        (toggle-bits (toggle-bit n i) (- i 1))))\n  (toggle-bits n (- (bit-length n) 2)))\n",
    "  (let ([mask (bitwise-ior (bitwise-shift-left 1 (sub1 (bit-length n))) (bitwise-shift-left 1 (- (bit-length n) 2)))])\n    (bitwise-xor n mask)))\n",
    "  (define (toggle_middle_bits_iter n i)\n    (if (zero? i)\n        n\n        (let ([mask (bitwise-arithmetic-shift 1 i)])\n          (toggle_middle_bits_iter (bitwise-xor n mask) (- i 1)))))\n  (toggle_middle_bits_iter n (- (bit-length n) 2)))\n",
    "  (let ([mask (lognot (logior (bitwise-arithmetic-shift-left 1 (bitwise-arithmetic-shift-right n 1)) 1))])\n    (bitwise-arithmetic-shift-right (bitwise-arithmetic-shift-left (bitwise-arithmetic-shift-right n 1) 1) 1)))\n",
    "  (let ([mask (bitwise-ior (bitwise-shift-left 1 (sub1 (integer-length n)))\n                           (bitwise-shift-left 1 (sub1 (integer-length n))))])\n    (bitwise-xor n mask)))\n",
    "  (define (toggle-bit n i)\n    (bitwise-xor n (bitwise-shift-left 1 i)))\n  (define (toggle-middle-bits n i)\n    (if (zero? i) n\n        (if (or (zero? i) (= i (sub1 (bit-length n))))\n            (toggle-middle-bits n (sub1 i))\n            (toggle-middle-bits (toggle-bit n i) (sub1 i)))))\n  (toggle-middle-bits n (sub1 (bit-length n))))\n",
    "  (define (toggle_middle_bits_helper n i)\n    (cond\n      [(= i 0) n]\n      [(= i 1) n]\n      [(= i 2) (bitwise-xor n (bitwise-shift-left 1 (- i 1)))]\n      [else (bitwise-xor n (bitwise-shift-left 1 (- i 1))) (toggle_middle_bits_helper n (- i 1))]))\n  (toggle_middle_bits_helper n (bit-length n)))\n",
    "  (let ([mask (bitwise-ior (bitwise-not (bitwise-shift-left 1 (bitwise-arithmetic-shift-right n 1))) 1)])\n    (bitwise-xor n mask)))\n",
    "  (define (toggle-bit n i)\n    (bitwise-xor n (bitwise-shift-left 1 i)))\n  (define (toggle-bits n i)\n    (if (= i 0)\n        n\n        (toggle-bits (toggle-bit n i) (- i 1))))\n  (toggle-bits n (- (bit-length n) 2)))\n",
    "  (define (toggle-bit n i)\n    (bitwise-xor n (bitwise-shift-left 1 i)))\n  (define (toggle-bits n i j)\n    (for/fold ([n n]) ([i (in-range i j)])\n      (toggle-bit n i)))\n  (toggle-bits n 1 (- (bit-length n) 2)))\n",
    "  (define (toggle_middle_bits_iter n i)\n    (if (= i 0)\n        n\n        (toggle_middle_bits_iter (bitwise-xor n (bitwise-shift 1 i)) (- i 1))))\n  (toggle_middle_bits_iter n (- (bit-length n) 2)))\n",
    "  (define (toggle_middle_bits_iter n count)\n    (if (= count 0)\n        n\n        (let* ([mask (expt 2 count)]\n               [new-n (bitwise-xor n mask)])\n          (toggle_middle_bits_iter new-n (- count 1)))))\n  (toggle_middle_bits_iter n (- (bit-length n) 2)))\n",
    "  (define (toggle_middle_bits-iter n i)\n    (cond\n      [(= i 1) n]\n      [(= i 0) n]\n      [else (toggle_middle_bits-iter (bitwise-xor n (bitwise-shift-left 1 (- i 1))) (- i 1))]))\n  (toggle_middle_bits-iter n (- (bit-length n) 2)))\n",
    "  (define (toggle-bit n i)\n    (bitwise-xor n (bitwise-shift-left 1 i)))\n  (define (toggle-bits n i j)\n    (if (= i j)\n        (toggle-bit n i)\n        (begin\n          (set! n (toggle-bit n i))\n          (set! n (toggle-bits n (+ i 1) j)))))\n  (toggle-bits n 1 (- (bit-length n) 2)))\n",
    "  (define (toggle-bit n i)\n    (bitwise-xor n (bitwise-shift 1 i)))\n  (define (toggle-bits n i)\n    (if (= i 0)\n        n\n        (toggle-bits (toggle-bit n i) (- i 1))))\n  (toggle-bits n (- (bit-length n) 2)))\n",
    "  (let ([mask (bitwise-ior (bitwise-shift-left 1 (- (bit-length n) 2)) 1)])\n    (bitwise-xor n mask)))\n",
    "  (define (toggle_middle_bits-iter n i)\n    (cond [(= i (- (bit-length n) 1)) n]\n          [(= i 1) (toggle_middle_bits-iter n (+ i 1))]\n          [else (toggle_middle_bits-iter (bitwise-xor n (ash 1 i)) (+ i 1))]))\n  (toggle_middle_bits-iter n 1))\n",
    "  (define (toggle_middle_bits_helper n i)\n    (if (= i 0)\n        n\n        (let ([mask (bitwise-not (bitwise-shift-left 1 i))])\n          (toggle_middle_bits_helper (bitwise-and n mask) (- i 1)))))\n  (toggle_middle_bits_helper n (- (bit-length n) 2)))\n",
    "  (define (toggle_middle_bits_helper n i)\n    (if (= i 0)\n        n\n        (let ([mask (bitwise-shift-left 1 (- i 1))])\n          (toggle_middle_bits_helper (bitwise-xor n mask) (- i 1)))))\n  (toggle_middle_bits_helper n (- (bit-length n) 2)))\n",
    "  (define (toggle_middle_bits_iter n i)\n    (cond\n      [(= i 0) n]\n      [(= i 1) n]\n      [(= i 2) n]\n      [(= i 3) n]\n      [(= i 4) n]\n      [(= i 5) n]\n      [(= i 6) n]\n      [(= i 7) n]\n      [(= i 8) n]\n      [(= i 9) n]\n      [(= i 10) n]\n      [(= i 11) n]\n      [(= i 12) n]\n      [(= i 13) n]\n      [(= i 14) n]\n      [(= i 15) n]\n      [(= i 16) n]\n      [(= i 17) n]\n      [(= i 18) n]\n      [(= i 19) n]\n      [(= i 20) n]\n      [(= i 21) n]\n      [(= i 22) n]\n      [(= i 23) n]\n      [(= i 24) n]\n      [(= i 25) n]\n      [(= i 26) n]\n      [(= i 27) n]\n      [(= i 28) n]\n      [(= i 29) n]\n      [(= i 30) n]\n      [(= i 31) n]\n      [else (toggle_middle_bits_iter (bitwise-xor n (ash 1 i)) (+ i 1))]))\n  (toggle_middle_bits_iter n 0))\n",
    "  (define (toggle_middle_bits_iter n i)\n    (cond\n      [(= i 1) n]\n      [(= i (bit-length n)) n]\n      [else (toggle_middle_bits_iter (bitwise-xor n (ash 1 (- i 1))) (- i 1))]))\n  (toggle_middle_bits_iter n (- (bit-length n) 1)))\n",
    "  (define (toggle_middle_bits-iter n i)\n    (if (= i 0)\n        n\n        (let ([mask (expt 2 (- i 1))])\n          (toggle_middle_bits-iter (bitwise-xor n mask) (- i 1)))))\n  (toggle_middle_bits-iter n (- (bit-length n) 2)))\n",
    "  (let loop ([n n] [i 1] [j 2])\n    (if (= i 0)\n        (if (= j 0)\n            n\n            (loop (bitwise-xor n (ash 1 j)) i (- j 1)))\n        (if (= j 0)\n            (loop (bitwise-xor n (ash 1 i)) (- i 1) j)\n            (loop (bitwise-xor n (ash 1 i) (ash 1 j)) (- i 1) (- j 1))))))\n",
    "  (let ([mask (bitwise-ior (bitwise-not (bitwise-arithmetic-shift 1 n)) (bitwise-arithmetic-shift -1 n))])\n    (bitwise-xor n mask)))\n",
    "  (define (toggle_middle_bits_iter n i)\n    (cond\n      [(= i 1) n]\n      [(= i 2) n]\n      [(= i 3) n]\n      [(= i 4) n]\n      [(= i 5) n]\n      [(= i 6) n]\n      [(= i 7) n]\n      [(= i 8) n]\n      [(= i 9) n]\n      [(= i 10) n]\n      [(= i 11) n]\n      [(= i 12) n]\n      [(= i 13) n]\n      [(= i 14) n]\n      [(= i 15) n]\n      [(= i 16) n]\n      [(= i 17) n]\n      [(= i 18) n]\n      [(= i 19) n]\n      [(= i 20) n]\n      [(= i 21) n]\n      [(= i 22) n]\n      [(= i 23) n]\n      [(= i 24) n]\n      [(= i 25) n]\n      [(= i 26) n]\n      [(= i 27) n]\n      [(= i 28) n]\n      [(= i 29) n]\n      [(= i 30) n]\n      [(= i 31) n]\n      [(= i 32) n]\n      [else (toggle_middle_bits_iter (bitwise-xor n (ash 1 (- i 2))) (- i 1))]))\n  (toggle_middle_bits_iter n 32))\n",
    "  (define (toggle_bit n i)\n    (bitwise-xor n (bitwise-shift-left 1 i)))\n  (define (toggle_middle_bits_helper n i)\n    (cond ((= i 1) n)\n          ((= i (bitwise-length n)) n)\n          (else (toggle_middle_bits_helper (toggle_bit n i) (+ i 1)))))\n  (toggle_middle_bits_helper n 2))\n",
    "  (define (toggle_middle_bits_iter n i)\n    (cond\n      [(= i 1) n]\n      [(= i 2) n]\n      [(= i 32) n]\n      [else (toggle_middle_bits_iter (bitwise-xor n (ash 1 (- i 2))) (- i 1))]))\n  (toggle_middle_bits_iter n 32))\n",
    "  (define (toggle_middle_bits-iter n i)\n    (if (= i 0)\n        n\n        (let ([mask (expt 2 i)])\n          (if (zero? (bitwise-and n mask))\n              (toggle_middle_bits-iter (bitwise-ior n mask) (- i 1))\n              (toggle_middle_bits-iter (bitwise-and n (bitwise-not mask)) (- i 1))))))\n  (toggle_middle_bits-iter n (- (bit-length n) 2)))\n",
    "  (define (toggle_middle_bits_helper n i)\n    (cond ((= i 1) n)\n          ((= i (bit-length n)) n)\n          (else (toggle-bit n i))))\n  (for/fold ([n n]) ([i (in-range (bit-length n))])\n    (toggle-middle-bits-helper n i)))\n",
    "  (define (toggle-bit n i)\n    (bitwise-xor n (bitwise-shift-left 1 i)))\n  (define (toggle-bits n i)\n    (if (= i 0)\n        n\n        (toggle-bits (toggle-bit n i) (- i 1))))\n  (toggle-bits n (- (bit-length n) 2)))\n",
    "  (define (toggle-bit n i)\n    (bitwise-xor n (bitwise-shift-left 1 i)))\n  (define (toggle-middle-bits n i)\n    (cond\n      [(zero? i) n]\n      [(= i 1) (toggle-middle-bits (toggle-bit n i) (- i 1))]\n      [(= i (- (bit-length n) 2)) (toggle-middle-bits (toggle-bit n i) (- i 1))]\n      [else (toggle-middle-bits (toggle-bit n i) (- i 1))]))\n  (toggle-middle-bits n (- (bit-length n) 1)))\n",
    "  (let ([mask (lognot (bitwise-ior (bitwise-and n 1) (bitwise-and n (bitwise-not (bitwise-arithmetic-shift-left -1 31)))))]\n        [mask (bitwise-arithmetic-shift-left mask 1)])\n    (bitwise-xor n mask)))\n",
    "  (define (toggle-bit n i)\n    (bitwise-xor n (bitwise-shift-left 1 i)))\n  (define (toggle-bits n i)\n    (if (= i 0)\n        n\n        (toggle-bits (toggle-bit n i) (- i 1))))\n  (toggle-bits n (- (bit-length n) 2)))\n",
    "  (let ([mask (bitwise-ior (bitwise-not (bitwise-arithmetic-shift 1 (bitwise-arithmetic-shift -1 n)))\n                           (bitwise-arithmetic-shift -1 n))])\n    (bitwise-xor n mask)))\n",
    "  (define (toggle_middle_bits_iter n i)\n    (cond\n      [(= i 0) n]\n      [(= i 1) n]\n      [else (toggle_middle_bits_iter (bitwise-xor n (ash 1 (- i 2))) (- i 1))]))\n  (toggle_middle_bits_iter n (bit-length n)))\n",
    "  (define (toggle_middle_bits_helper n i)\n    (if (= i 1)\n        n\n        (let ([mask (bitwise-not (bitwise-shift-left 1 (- i 1)))])\n          (toggle_middle_bits_helper (bitwise-xor n mask) (- i 1)))))\n  (toggle_middle_bits_helper n (bit-length n)))\n",
    "  (define (toggle-bit n i)\n    (bitwise-xor n (bitwise-shift-left 1 i)))\n  (define (toggle-middle-bits n i)\n    (cond [(= i 1) n]\n          [(= i (- (bit-length n) 1)) n]\n          [else (toggle-middle-bits (toggle-bit n i) (- i 1))]))\n  (toggle-middle-bits n (- (bit-length n) 1)))\n",
    "  (let loop ((n n) (i 1) (result 0))\n    (cond ((= i 1) (loop n (+ i 1) result))\n          ((= i (- (bit-length n) 1)) (loop n (+ i 1) result))\n          ((= i (bit-length n)) result)\n          (else (loop n (+ i 1) (bitwise-xor n (ash 1 (- i 1))))))))\n",
    "  (define (toggle_middle_bits_helper n i)\n    (if (zero? i)\n        n\n        (toggle_middle_bits_helper (bitwise-xor n (bitwise-shift-left 1 i)) (- i 1))))\n  (toggle_middle_bits_helper n (- (bit-length n) 2)))\n",
    "  (define (toggle_middle_bits_iter n i)\n    (cond\n      [(= i 1) n]\n      [(= i 0) n]\n      [else (toggle_middle_bits_iter (bitwise-xor n (bitwise-shift-left 1 (- i 1))) (- i 1))]))\n  (toggle_middle_bits_iter n (- (bit-length n) 2)))\n",
    "  (let loop ([n n] [i 1] [j 1])\n    (cond\n      [(= i 1) (loop n (+ i 1) (+ j 1))]\n      [(= j (bit-length n)) n]\n      [else (loop (bitwise-xor n (bitwise-shift-left 1 j)) (+ i 1) (+ j 1))])))\n",
    "  (let ([mask #b11111111111111111111111111111100])\n    (bitwise-xor n mask)))\n",
    "  (define (toggle_middle_bits_helper n i)\n    (if (= i 1)\n        n\n        (let ([mask (bitwise-bit-set 0 i)])\n          (toggle_middle_bits_helper (bitwise-xor n mask) (- i 1)))))\n  (toggle_middle_bits_helper n (- (bit-length n) 2)))\n",
    "  (let ([mask (bitwise-ior (bitwise-not (bitwise-shift-left 1 (bit-count n))) 1)])\n    (bitwise-xor n mask)))\n",
    "  (let ([mask (bitwise-ior (bitwise-not (bitwise-arithmetic-shift 1 n)) (bitwise-arithmetic-shift -1 n))])\n    (bitwise-xor n mask)))\n",
    "  (let ([mask (bitwise-ior (bitwise-arithmetic-shift-left 1 (- (bit-count n) 2)) 1)])\n    (bitwise-xor n mask)))\n",
    "  (let ([mask #b11111111111111111111111111111100])\n    (bitwise-xor n mask)))\n",
    "  (define (toggle-bit n i)\n    (bitwise-xor n (bitwise-shift-left 1 i)))\n  (define (toggle-bits n i)\n    (if (= i (- (bitwise-length n) 1))\n        n\n        (toggle-bits (toggle-bit n i) (+ i 1))))\n  (toggle-bits n 1))\n",
    "  (let ([mask #b11111111111111111111111111111101])\n    (bitwise-and n mask)))\n",
    "  (define (toggle_middle_bits_helper n i)\n    (if (= i 0)\n        n\n        (let ((mask (logxor n (ash 1 i))))\n          (toggle_middle_bits_helper mask (- i 1)))))\n  (toggle_middle_bits_helper n (- (bit-length n) 2)))\n",
    "  (bitwise-xor n (bitwise-arithmetic-shift n -1)))\n",
    "  (let ([mask (bitwise-ior (bitwise-shift-left 1 (sub1 (integer-length n))) (bitwise-shift-left 1 (sub1 (integer-length n))))])\n    (bitwise-xor n mask)))\n",
    "  (define (toggle-bit n i)\n    (bitwise-xor n (bitwise-shift-left 1 i)))\n  (define (toggle-middle-bits-helper n i)\n    (if (= i (- (bit-length n) 1))\n        n\n        (toggle-middle-bits-helper (toggle-bit n i) (+ i 1))))\n  (toggle-middle-bits-helper n 1))\n",
    "  (define (toggle-bit n i)\n    (bitwise-xor n (bitwise-shift-left 1 i)))\n  (define (toggle-bits n i)\n    (if (= i 0)\n        n\n        (toggle-bits (toggle-bit n i) (- i 1))))\n  (toggle-bits n (- (bit-length n) 2)))\n",
    "  (define (toggle_middle_bits_helper n i)\n    (if (zero? i)\n        n\n        (let* ([mask (expt 2 i)]\n               [bit (logand n mask)])\n          (if (zero? bit)\n              (toggle_middle_bits_helper (logior n mask) (- i 1))\n              (toggle_middle_bits_helper (logand n (lognot mask)) (- i 1))))))\n  (toggle_middle_bits_helper n (- (integer-length n) 2)))\n",
    "  (define (toggle_middle_bits_helper n i)\n    (cond\n      [(= i 1) n]\n      [(= i (bit-length n)) n]\n      [else (toggle_middle_bits_helper (bitwise-xor n (ash 1 (- i 1))) (- i 1))]))\n  (toggle_middle_bits_helper n (bit-length n)))\n",
    "  (define (toggle_middle_bits_iter n i)\n    (if (= i 1)\n        n\n        (if (bitwise-bit-set? n i)\n            (toggle_middle_bits_iter (bitwise-clear-bit n i) (- i 1))\n            (toggle_middle_bits_iter (bitwise-set-bit n i) (- i 1)))))\n  (toggle_middle_bits_iter n (- (bit-length n) 1)))\n",
    "  (define (toggle_middle_bits_helper n i)\n    (cond\n      [(= i 1) n]\n      [(= i (bit-length n)) n]\n      [else (toggle_middle_bits_helper (bitwise-xor n (ash 1 (- i 1))) (- i 1))]))\n  (toggle_middle_bits_helper n (bit-length n)))\n",
    "  (bitwise-xor n (bitwise-arithmetic-shift n -1) (bitwise-arithmetic-shift n 1)))\n",
    "  (define (toggle_middle_bits_iter n i)\n    (if (&lt; i (- (bit-length n) 1))\n        (let ([bit (bitwise-bit-field n i 1)])\n          (if (= bit 1)\n              (bitwise-arithmetic-shift n (- i) 1)\n              (bitwise-arithmetic-shift n (- i) 0)))\n        n))\n  (toggle_middle_bits_iter n 1))\n",
    "  (let ([mask (bitwise-ior (bitwise-arithmetic-shift-left 1 (sub1 (bit-length n))) (bitwise-arithmetic-shift-right 1 1))])\n    (bitwise-xor n mask)))\n",
    "  (bitwise-xor n (bitwise-rotate-bit-field n 1 (- (bit-length n) 2))))\n",
    "  (define (toggle-bit n i)\n    (bitwise-xor n (bitwise-shift-left 1 i)))\n  (define (toggle-bits n i)\n    (if (= i (- (bit-length n) 1))\n        n\n        (toggle-bits (toggle-bit n i) (+ i 1))))\n  (toggle-bits n 1))\n",
    "  (define (toggle-bit n i)\n    (bitwise-xor n (bitwise-shift-left 1 i)))\n  (define (toggle-bits n i)\n    (if (= i (- (bit-length n) 1))\n        n\n        (toggle-bits (toggle-bit n i) (+ i 1))))\n  (toggle-bits n 1))\n",
    "  (define (toggle_middle_bits_iter n mask)\n    (if (= mask 0)\n        n\n        (toggle_middle_bits_iter (bitwise-xor n mask)\n                                 (bitwise-shift-right mask 1))))\n  (toggle_middle_bits_iter n (bitwise-shift-left 1 (- (bit-length n) 2))))\n",
    "  (let ([mask (bitwise-ior (bitwise-shift-left 1 (- (bit-length n) 2)) (bitwise-shift-left 1 1))])\n    (bitwise-xor n mask)))\n",
    "  (let ([mask (bitwise-ior (bitwise-shift-left 1 (sub1 (integer-length n)))\n                           (bitwise-shift-left 1 (sub1 (integer-length n))))])\n    (bitwise-xor n mask)))\n",
    "  (let ([mask (bitwise-ior (bitwise-shift-left 1 (sub1 (integer-length n))) (bitwise-shift-left -1 1))])\n    (bitwise-xor n mask)))\n",
    "  (let ([mask #b11111111111111111111111111111110])\n    (bitwise-xor n mask)))\n",
    "  (define (toggle_middle_bits_iter n i)\n    (cond\n      [(= i 1) n]\n      [(= i (bit-length n)) n]\n      [else (toggle_middle_bits_iter (bitwise-xor n (ash 1 (- i 1))) (- i 1))]))\n  (toggle_middle_bits_iter n (- (bit-length n) 1)))\n",
    "  (let ([mask (bitwise-ior (bitwise-not (bitwise-arithmetic-shift 1 n))\n                           (bitwise-arithmetic-shift -1 n))])\n    (bitwise-xor n mask)))\n",
    "  (define (toggle_middle_bits-iter n i)\n    (cond\n      [(= i 0) n]\n      [(= i 1) n]\n      [(= i 2) n]\n      [(= i 3) n]\n      [(= i 4) n]\n      [(= i 5) n]\n      [(= i 6) n]\n      [(= i 7) n]\n      [(= i 8) n]\n      [(= i 9) n]\n      [(= i 10) n]\n      [(= i 11) n]\n      [(= i 12) n]\n      [(= i 13) n]\n      [(= i 14) n]\n      [(= i 15) n]\n      [(= i 16) n]\n      [(= i 17) n]\n      [(= i 18) n]\n      [(= i 19) n]\n      [(= i 20) n]\n      [(= i 21) n]\n      [(= i 22) n]\n      [(= i 23) n]\n      [(= i 24) n]\n      [(= i 25) n]\n      [(= i 26) n]\n      [(= i 27) n]\n      [(= i 28) n]\n      [(= i 29) n]\n      [(= i 30) n]\n      [(= i 31) n]\n      [else (toggle_middle_bits-iter n (- i 1))]))\n  (toggle_middle_bits-iter n 31))\n",
    "  (define (toggle-bit n i)\n    (bitwise-xor n (bitwise-shift-left 1 i)))\n  (define (toggle-bits n i)\n    (if (= i 0)\n        n\n        (toggle-bits (toggle-bit n i) (- i 1))))\n  (toggle-bits n (- (bit-length n) 2)))\n",
    "  (define (toggle_middle_bits_iter n i)\n    (if (= i 0)\n        n\n        (let ((mask (logxor n (ash 1 i))))\n          (toggle_middle_bits_iter mask (- i 1)))))\n  (toggle_middle_bits_iter n (- (bit-length n) 2)))\n",
    "  (define (toggle_middle_bits_helper n mask)\n    (if (= mask 0)\n        n\n        (toggle_middle_bits_helper (bitwise-xor n mask) (bitwise-shift-right mask 1))))\n  (toggle_middle_bits_helper n (bitwise-shift-left 1 (- (bit-length n) 2))))\n",
    "  (define (toggle-bit n i)\n    (bitwise-xor n (bitwise-shift-left 1 i)))\n  (define (toggle-middle-bits n i)\n    (if (= i (- (bit-length n) 2))\n        n\n        (toggle-middle-bits (toggle-bit n i) (+ i 1))))\n  (toggle-middle-bits n 1))\n",
    "  (let ([mask (bitwise-ior (bitwise-not (bitwise-shift-left 1 (sub1 (bit-length n)))) 1)])\n    (bitwise-xor n mask)))\n",
    "  (let ([mask (bitwise-ior (bitwise-not (bitwise-shift-left 1 (bitwise-arithmetic-shift-right n 1))) 1)])\n    (bitwise-xor n mask)))\n",
    "  (define (helper n i)\n    (if (= i 0)\n        n\n        (helper (bitwise-xor n (ash 1 i)) (- i 1))))\n  (helper n (- (bit-length n) 2)))\n",
    "  (define (toggle_middle_bits-helper n i)\n    (cond\n      [(= i 1) n]\n      [(= i (bit-length n)) n]\n      [else (toggle_middle_bits-helper (bitwise-xor n (ash 1 (- i 1))) (- i 1))]))\n  (toggle_middle_bits-helper n (- (bit-length n) 1)))\n",
    "  (let ([mask (bitwise-ior (bitwise-shift-left 1 (sub1 (integer-length n))) (bitwise-shift-right 1 1))])\n    (bitwise-xor n mask)))\n",
    "  (bitwise-xor n (bitwise-arithmetic-shift n -1)))\n",
    "  (define (toggle_middle_bits_iter n i)\n    (if (= i 0)\n        n\n        (let ([mask (lsh 1 i)])\n          (toggle_middle_bits_iter (bitwise-xor n mask) (- i 1)))))\n  (toggle_middle_bits_iter n (- (bit-length n) 2)))\n",
    "  (bitwise-ior (bitwise-and n -2) (bitwise-and n -4)))\n",
    "  (let* ([mask (bitwise-ior (bitwise-shift-left 1 (sub1 (bit-length n)))\n                            (bitwise-shift-left 1 (sub1 (bit-length n))))]\n         [mask (bitwise-xor mask 1)])\n    (bitwise-xor n mask)))\n",
    "  (define (toggle-bits-helper n mask)\n    (if (= mask 0)\n        n\n        (toggle-bits-helper (bitwise-xor n mask) (bitwise-arithmetic-shift mask -1))))\n  (toggle-bits-helper n (bitwise-arithmetic-shift (bitwise-arithmetic-shift n -2) 2)))\n",
    "  (define (toggle-bit n i)\n    (bitwise-xor n (bitwise-shift-left 1 i)))\n  (define (toggle-middle-bits n i)\n    (if (zero? i)\n        n\n        (toggle-middle-bits (toggle-bit n i) (sub1 i))))\n  (toggle-middle-bits n (sub1 (bit-length n))))\n",
    "  (define (toggle_middle_bits_iter n i)\n    (cond\n      [(= i 0) n]\n      [(= i 1) n]\n      [(= i 2) n]\n      [else (toggle_middle_bits_iter (bitwise-xor n (bitwise-shift-left 1 (- i 2))) (- i 1))]))\n  (toggle_middle_bits_iter n (bit-length n)))\n",
    "  (let ([mask (bitwise-ior (bitwise-shift-left 1 (sub1 (bit-length n))) 1)])\n    (bitwise-xor n mask)))\n",
    "  (let loop ([n n] [i 1] [j 2])\n    (if (&gt;= i j)\n        n\n        (loop (bitwise-xor n (ash 1 i)) (+ i 1) (+ j 1)))))\n",
    "  (let ([mask (bitwise-ior (bitwise-shift-left 1 (sub1 (integer-length n))) (bitwise-shift-left 1 (sub1 (integer-length n))))])\n    (bitwise-xor n mask)))\n",
    "  (let ([mask (bitwise-ior (bitwise-not (bitwise-shift-left 1 (bitwise-arithmetic-shift-right n 1))) 1)])\n    (bitwise-xor n mask)))\n",
    "  (define (toggle_middle_bits_iter n i)\n    (if (&gt; i 1)\n        (if (even? (remainder n 2))\n            (toggle_middle_bits_iter (quotient n 2) (- i 1))\n            (toggle_middle_bits_iter (+ (quotient n 2) 1) (- i 1)))\n        n))\n  (toggle_middle_bits_iter n (integer-length n)))\n",
    "  (define (toggle-bit n i)\n    (bitwise-xor n (bitwise-shift-left 1 i)))\n  (define (toggle-bits n i)\n    (if (= i 0)\n        n\n        (toggle-bits (toggle-bit n i) (- i 1))))\n  (toggle-bits n (- (bit-length n) 2)))\n",
    "  (bitwise-xor n (bitwise-arithmetic-shift n -1) (bitwise-arithmetic-shift n 1)))\n",
    "  (let ([mask (bitwise-ior (bitwise-not (bitwise-shift-left 1 (bitwise-arithmetic-shift-right n 1))) (bitwise-not (bitwise-arithmetic-shift-right n 1)))])\n    (bitwise-xor n mask)))\n",
    "  (define (toggle-bit n i)\n    (bitwise-xor n (bitwise-shift-left 1 i)))\n  (define (toggle-middle-bits n i)\n    (if (= i (- (bit-length n) 2))\n        n\n        (toggle-middle-bits (toggle-bit n i) (+ i 1))))\n  (toggle-middle-bits n 1))\n",
    "  (let ([mask (bitwise-ior (bitwise-not (bitwise-arithmetic-shift 1 n)) (bitwise-arithmetic-shift -1 n))])\n    (bitwise-xor n mask)))\n",
    "  (let ([mask (bitwise-ior (bitwise-not (bitwise-arithmetic-shift 1 n)) (bitwise-arithmetic-shift -1 n))])\n    (bitwise-xor n mask)))\n",
    "  (let ([mask (logxor (bitwise-rotate-bit-field n -1) (bitwise-rotate-bit-field n 1))])\n    (logand n (logior mask 1))\n    (logand n (logior mask (bitwise-rotate-bit-field mask -1)))))\n",
    "  (let ([mask (logxor (ash 1 (sub1 (integer-length n))) 3)])\n    (logxor n mask)))\n",
    "  (define (toggle_middle_bits-helper n i)\n    (if (= i 1)\n        n\n        (toggle_middle_bits-helper (bitwise-xor n (bitwise-shift-left 1 (- i 1))) (- i 1))))\n  (toggle_middle_bits-helper n (- (bit-length n) 1)))\n",
    "  (define (toggle-bit n i)\n    (bitwise-xor n (bitwise-shift-left 1 i)))\n  (define (toggle-middle-bits n i)\n    (if (= i (- (bit-length n) 2))\n        n\n        (toggle-middle-bits (toggle-bit n i) (+ i 1))))\n  (toggle-middle-bits n 1))\n",
    "  (define (toggle_middle_bits_iter n i)\n    (if (= i 1)\n        n\n        (toggle_middle_bits_iter (bitwise-xor n (bitwise-shift-left 1 (- i 1))) (- i 1))))\n  (toggle_middle_bits_iter n (- (bit-length n) 1)))\n",
    "  (define (toggle-bit n i)\n    (bitwise-xor n (bitwise-shift-left 1 i)))\n  (define (toggle-bits n i)\n    (if (= i (- (bit-length n) 1))\n        n\n        (toggle-bits (toggle-bit n i) (+ i 1))))\n  (toggle-bits n 1))\n",
    "  (define (toggle_middle_bits_helper n i)\n    (if (= i 1)\n        n\n        (toggle_middle_bits_helper (logxor n (ash 1 (- i 1))) (- i 1))))\n  (toggle_middle_bits_helper n (- (bit-length n) 2)))\n",
    "  (define (toggle_middle_bits_iter n i)\n    (cond\n      [(= i 0) n]\n      [(= i 1) n]\n      [(= i 2) n]\n      [else\n       (define new-n (bitwise-xor n (bitwise-shift-left 1 (- i 2))))\n       (toggle_middle_bits_iter new-n (- i 1))]))\n  (toggle_middle_bits_iter n (bit-length n)))\n",
    "  (define (toggle_middle_bits_helper n i)\n    (if (= i 0)\n        n\n        (let ([mask (expt 2 (- i 1))])\n          (toggle_middle_bits_helper (xor n mask) (- i 1)))))\n  (toggle_middle_bits_helper n (- (bit-length n) 2)))\n",
    "  (define (toggle_middle_bits_helper n i)\n    (if (= i 0)\n        n\n        (let ([mask (expt 2 (- i 1))])\n          (toggle_middle_bits_helper (bitwise-xor n mask) (- i 1)))))\n  (toggle_middle_bits_helper n (- (bit-length n) 2)))\n",
    "  (define (toggle_middle_bits_iter n i)\n    (cond\n      [(= i 0) n]\n      [(= i 1) n]\n      [else\n       (let ([bit (bitwise-and n (bitwise-shift-left 1 i))])\n         (if (= bit 0)\n             (toggle_middle_bits_iter (bitwise-ior n (bitwise-shift-left 1 i)) (- i 1))\n             (toggle_middle_bits_iter (bitwise-xor n (bitwise-shift-left 1 i)) (- i 1))))]))\n  (toggle_middle_bits_iter n (- (bit-length n) 1)))\n",
    "  (define (toggle_middle_bits_iter n i)\n    (if (= i 0)\n        n\n        (toggle_middle_bits_iter (bitwise-xor n (ash 1 i)) (- i 1))))\n  (toggle_middle_bits_iter n (- (bit-length n) 2)))\n",
    "  (let ([mask (bitwise-ior (bitwise-shift-left 1 (sub1 (bit-length n))) (bitwise-shift-left 1 (sub1 (bit-length n))))])\n    (bitwise-xor n mask)))\n",
    "  (let ([mask (bitwise-ior (bitwise-not (bitwise-arithmetic-shift 1 (bitwise-arithmetic-shift -1 n))) (bitwise-arithmetic-shift -1 n))])\n    (bitwise-xor n mask)))\n",
    "  (let ([mask (bitwise-ior (bitwise-not (bitwise-arithmetic-shift 1 n)) (bitwise-arithmetic-shift -1 n))])\n    (bitwise-xor n mask)))\n",
    "  (let ([mask (bitwise-ior (bitwise-not (bitwise-arithmetic-shift 1 (- n 2))) (bitwise-arithmetic-shift 1 (- n 1)))])\n    (bitwise-xor n mask)))\n",
    "  (bitwise-xor n (bitwise-rotate-bit-field n 1 (- (bit-length n) 2))))\n",
    "  (define (toggle_middle_bits_helper n i)\n    (cond\n      [(= i 1) n]\n      [(= i (bit-length n)) n]\n      [else (toggle_middle_bits_helper (bitwise-xor n (bitwise-rotate-bit-field n 1 i)) (+ i 1))]))\n  (toggle_middle_bits_helper n 2))\n",
    "  (define (toggle_middle_bits_iter n i)\n    (if (= i 0)\n        n\n        (let ([mask (bitwise-bit-set 0 i)])\n          (if (bitwise-bit-set? n i)\n              (toggle_middle_bits_iter (bitwise-bit-clear n i) (- i 1))\n              (toggle_middle_bits_iter (bitwise-bit-set n i) (- i 1))))))\n  (toggle_middle_bits_iter n (- (bit-length n) 2)))\n",
    "  (let ([mask (bitwise-ior (bitwise-shift-left 1 (sub1 (bit-length n))) (bitwise-shift-left 1 (sub1 (bit-length n))))])\n    (bitwise-xor n mask)))\n",
    "  (bitwise-xor n (bitwise-arithmetic-shift n -1)))\n",
    "  (define (toggle-bit n i)\n    (bitwise-xor n (bitwise-shift-left 1 i)))\n  (define (toggle-bits n i)\n    (if (= i (- (bit-length n) 2))\n        n\n        (toggle-bits (toggle-bit n i) (+ i 1))))\n  (toggle-bits n 1))\n",
    "  (define (toggle-bit n i)\n    (bitwise-xor n (bitwise-shift-left 1 i)))\n  (define (toggle-middle-bits n i)\n    (if (zero? i)\n        n\n        (toggle-middle-bits (toggle-bit n i) (sub1 i))))\n  (toggle-middle-bits n (sub1 (bit-length n))))\n",
    "  (define (toggle_middle_bits_iter n i)\n    (cond\n      [(= i 0) n]\n      [(= i 1) n]\n      [(= i 2) n]\n      [(= i 3) n]\n      [(= i 4) n]\n      [(= i 5) n]\n      [(= i 6) n]\n      [(= i 7) n]\n      [else (toggle_middle_bits_iter (bitwise-xor n (bitwise-shift-left 1 i)) (- i 1))]))\n  (toggle_middle_bits_iter n 7))\n",
    "  (define (helper n i)\n    (cond [(= i 0) n]\n          [(= i 1) n]\n          [(= i 2) (bitwise-xor n (bitwise-rotate-bit-field n 1 1))]\n          [(= i 3) (bitwise-xor n (bitwise-rotate-bit-field n 2 1))]\n          [(= i 4) (bitwise-xor n (bitwise-rotate-bit-field n 3 1))]\n          [(= i 5) (bitwise-xor n (bitwise-rotate-bit-field n 4 1))]\n          [(= i 6) (bitwise-xor n (bitwise-rotate-bit-field n 5 1))]\n          [(= i 7) (bitwise-xor n (bitwise-rotate-bit-field n 6 1))]\n          [(= i 8) (bitwise-xor n (bitwise-rotate-bit-field n 7 1))]\n          [(= i 9) (bitwise-xor n (bitwise-rotate-bit-field n 8 1))]\n          [(= i 10) (bitwise-xor n (bitwise-rotate-bit-field n 9 1))]\n          [(= i 11) (bitwise-xor n (bitwise-rotate-bit-field n 10 1))]\n          [(= i 12) (bitwise-xor n (bitwise-rotate-bit-field n 11 1))]\n          [(= i 13) (bitwise-xor n (bitwise-rotate-bit-field n 12 1))]\n          [(= i 14) (bitwise-xor n (bitwise-rotate-bit-field n 13 1))]\n          [(= i 15) (bitwise-xor n (bitwise-rotate-bit-field n 14 1))]\n          [(= i 16) (bitwise-xor n (bitwise-rotate-bit-field n 15 1))]\n          [(= i 17) (bitwise-xor n (bitwise-rotate-bit-field n 16 1))]\n          [(= i 18) (bitwise-xor n (bitwise-",
    "  (define (toggle-bit n i)\n    (bitwise-xor n (bitwise-shift-left 1 i)))\n  (define (toggle-bits n i)\n    (if (= i 0)\n        n\n        (toggle-bits (toggle-bit n i) (- i 1))))\n  (toggle-bits n (- (bit-length n) 2)))\n",
    "  (define (toggle_middle_bits_helper n mask)\n    (if (= mask 0)\n        n\n        (toggle_middle_bits_helper (bitwise-xor n mask) (bitwise-arithmetic-shift mask -1))))\n  (toggle_middle_bits_helper n (bitwise-arithmetic-shift (bitwise-arithmetic-shift -1 -1) 1)))\n",
    "  (bitwise-xor n (bitwise-arithmetic-shift n -1) (bitwise-arithmetic-shift n 1)))\n",
    "  (define (toggle_middle_bits_iter n i)\n    (if (= i 0)\n        n\n        (let ([mask (ash 1 i)])\n          (toggle_middle_bits_iter (bitwise-xor n mask) (- i 1)))))\n  (toggle_middle_bits_iter n (- (bit-length n) 2)))\n",
    "  (define (toggle_middle_bits_iter n i)\n    (cond\n      [(= i 0) n]\n      [(= i 1) n]\n      [else (toggle_middle_bits_iter (bitwise-xor n (bitwise-shift-left 1 (- i 2))) (- i 1))]))\n  (toggle_middle_bits_iter n (bit-length n)))\n",
    "  (let ([mask (bitwise-ior (bitwise-shift-left 1 (sub1 (bit-length n)))\n                           (bitwise-shift-left -1 (sub1 (bit-length n))))])\n    (bitwise-xor n mask)))\n",
    "  (define (toggle-bit n i)\n    (bitwise-xor n (bitwise-shift-left 1 i)))\n  (define (toggle-bits n i)\n    (if (= i 0)\n        n\n        (toggle-bits (toggle-bit n i) (- i 1))))\n  (toggle-bits n (- (bit-length n) 1)))\n",
    "  (define (helper n i)\n    (if (= i 0)\n        (bitwise-and n 1)\n        (if (= i (sub1 (bit-length n)))\n            (bitwise-and n (ash 1 (sub1 (bit-length n))))\n            (bitwise-xor n (ash 1 i)))))\n  (define (iter n i)\n    (if (= i (bit-length n))\n        n\n        (iter (helper n i) (add1 i))))\n  (iter n 0))\n",
    "  (let ([mask (bitwise-ior (bitwise-not (bitwise-arithmetic-shift 1 n))\n                           (bitwise-arithmetic-shift -1 n))])\n    (bitwise-xor n mask)))\n",
    "  (define (toggle-bit n i)\n    (bitwise-xor n (bitwise-shift 1 i)))\n  (define (toggle-bits n i)\n    (if (= i (- (bit-length n) 1))\n        n\n        (toggle-bits (toggle-bit n i) (+ i 1))))\n  (toggle-bits n 1))\n",
    "  (define (toggle-bit n i)\n    (bitwise-xor n (bitwise-shift-left 1 i)))\n  (define (toggle-bits n i)\n    (if (= i (- (bit-length n) 2))\n        n\n        (toggle-bits (toggle-bit n i) (+ i 1))))\n  (toggle-bits n 1))\n",
    "  (let ([mask (lognot (bitwise-ior (bitwise-arithmetic-shift 1 (bit-length n)) 1))])\n    (bitwise-arithmetic-shift (bitwise-xor n mask) -1)))\n",
    "  (define (toggle_middle_bits_iter n i)\n    (if (= i (bit-count n))\n        n\n        (if (bit-set? n i)\n            (toggle_middle_bits_iter (bit-clear n i) (+ i 1))\n            (toggle_middle_bits_iter (bit-set n i) (+ i 1)))))\n  (toggle_middle_bits_iter n 1))\n",
    "  (define (toggle-bit n i)\n    (bitwise-xor n (bitwise-shift-left 1 i)))\n  (define (toggle-bits n i)\n    (if (= i 0)\n        n\n        (toggle-bits (toggle-bit n i) (- i 1))))\n  (toggle-bits n (- (bit-length n) 2)))\n",
    "  (define (toggle_middle_bits_iter n i)\n    (cond\n      [(= i 1) n]\n      [(= i 0) n]\n      [else (toggle_middle_bits_iter (bitwise-xor n (ash 1 (- i 1))) (- i 1))]))\n  (toggle_middle_bits_iter n (- (bit-length n) 2)))\n",
    "  (let ([mask (lognot (bitwise-ior (bitwise-ior (bitwise-shift-left 1 (integer-length n)) 1) (bitwise-shift-left 1 (sub1 (integer-length n)))))]\n        [masked (bitwise-and n mask)])\n    (bitwise-xor masked mask)))\n",
    "  (define (toggle_middle_bits_helper n i)\n    (if (= i 1)\n        n\n        (let* ([bit (modulo n 2)]\n               [new-n (quotient n 2)])\n          (if (= bit 0)\n              (toggle_middle_bits_helper (+ new-n (expt 2 (- i 2))) (- i 1))\n              (toggle_middle_bits_helper new-n (- i 1))))))\n  (toggle_middle_bits_helper n (integer-length n)))\n",
    "  (bitwise-xor n (bitwise-arithmetic-shift n -1) (bitwise-arithmetic-shift n 1)))\n",
    "  (define (toggle_middle_bits_iter n i)\n    (if (= i (- (bit-length n) 1))\n        n\n        (if (zero? (bitwise-bit-field n i 1))\n            (bitwise-bit-set n i)\n            (bitwise-bit-clear n i))\n        (toggle_middle_bits_iter n (+ i 1))))\n  (toggle_middle_bits_iter n 1))\n",
    "  (let ([mask (bitwise-ior (bitwise-shift-left 1 (sub1 (integer-length n))) (bitwise-shift-left 1 (sub1 (integer-length n))))])\n    (bitwise-xor n mask)))\n",
    "  (define (toggle_middle_bits_helper n i)\n    (cond\n      [(= i 0) n]\n      [(= i 1) n]\n      [(= i 2) (bitwise-xor n (bitwise-rotate-bit-field n 1 2))]\n      [else (toggle_middle_bits_helper (bitwise-xor n (bitwise-rotate-bit-field n 1 i)) (- i 1))]))\n  (toggle_middle_bits_helper n (bit-length n)))\n",
    "  (define (toggle_middle_bits_helper n i)\n    (if (= i 1)\n        n\n        (toggle_middle_bits_helper (bitwise-xor n (ash 1 (- i 1))) (- i 1))))\n  (toggle_middle_bits_helper n (- (bit-length n) 2)))\n",
    "  (define (toggle_middle_bits_helper n i)\n    (if (&lt; i (- (bit-length n) 1))\n        (bitwise-xor n (bitwise-rotate-bit-field n 1 i))\n        n))\n  (toggle_middle_bits_helper n 1))\n",
    "  (define (toggle_middle_bits_helper n i)\n    (if (= i 0)\n        n\n        (let ([mask (bitwise-arithmetic-shift 1 i)])\n          (if (bitwise-and n mask)\n              (bitwise-xor n mask)\n              (bitwise-ior n mask)))))\n  (let ([i (- (bit-length n) 2)])\n    (toggle_middle_bits_helper n i)))\n",
    "  (define (toggle-bit n i)\n    (if (zero? (bitwise-bit-field n i 1))\n        (bitwise-bit-set n i)\n        (bitwise-bit-clear n i)))\n  (define (toggle-middle-bits n i)\n    (if (zero? i)\n        n\n        (toggle-middle-bits (toggle-bit n i) (- i 1))))\n  (toggle-middle-bits n (- (bit-length n) 2)))\n",
    "  (define (toggle_middle_bits_iter n i)\n    (if (&lt; i (- (bit-length n) 1))\n        (if (zero? (bitwise-bit-field n i 1))\n            (bitwise-bit-set n i)\n            (bitwise-bit-clear n i))\n        (toggle_middle_bits_iter n (+ i 1))))\n  (toggle_middle_bits_iter n 1))\n",
    "  (bitwise-xor n (bitwise-arithmetic-shift n -1)))\n",
    "  (define (toggle-bit n i)\n    (bitwise-xor n (bitwise-shift-left 1 i)))\n  (define (toggle-bits n i j)\n    (if (&gt; i j)\n        n\n        (toggle-bits (toggle-bit n i) (+ i 1) j)))\n  (toggle-bits n 1 (- (bit-length n) 2)))\n",
    "  (define (toggle_middle_bits_helper n i)\n    (if (zero? i)\n        n\n        (let* ([mask (expt 2 i)]\n               [new-n (bitwise-xor n mask)])\n          (toggle_middle_bits_helper new-n (- i 1)))))\n  (toggle_middle_bits_helper n (- (bit-length n) 2)))\n",
    "  (define (toggle_middle_bits_iter n i)\n    (if (= i (bit-length n))\n        n\n        (if (zero? (bit-set? n i))\n            (toggle_middle_bits_iter (bit-set n i) (+ i 1))\n            (toggle_middle_bits_iter (bit-clear n i) (+ i 1)))))\n  (toggle_middle_bits_iter n 1))\n",
    "  (define (toggle_middle_bits_helper n mask)\n    (if (= mask 0)\n        n\n        (toggle_middle_bits_helper (bitwise-xor n mask) (bitwise-arithmetic-shift mask -1))))\n  (toggle_middle_bits_helper n (bitwise-arithmetic-shift 1 (- (bit-length n) 2))))\n",
    "  (define (toggle_middle_bits_helper n i)\n    (cond\n      [(= i 0) n]\n      [(= i 1) n]\n      [(= i 2) n]\n      [(= i 3) n]\n      [(= i 4) n]\n      [(= i 5) n]\n      [(= i 6) n]\n      [(= i 7) n]\n      [else (toggle_middle_bits_helper (bitwise-xor n (expt 2 (- i 1))) (- i 1))]))\n  (toggle_middle_bits_helper n 7))\n",
    "  (define (toggle_middle_bits_iter n i)\n    (if (&gt; i 1)\n        (if (even? (bitwise-and n i))\n            (bitwise-ior (toggle_middle_bits_iter n (- i 1)) (bitwise-shift-left 1 (- i 1)))\n            (bitwise-and (toggle_middle_bits_iter n (- i 1)) (bitwise-not (bitwise-shift-left 1 (- i 1)))))\n        n))\n  (toggle_middle_bits_iter n (bitwise-length n)))\n"
  ]
}