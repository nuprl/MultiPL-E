name: HumanEval_49_modp
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp(3,\
  \ 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0, 101)\n\
  \    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n    // 1\n\
  \    public static long Modp(long n, long p) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Modp((3L),\
  \ (5L)) == (3L));\n    Debug.Assert(Modp((1101L), (101L)) == (2L));\n    Debug.Assert(Modp((0L),\
  \ (101L)) == (1L));\n    Debug.Assert(Modp((3L), (11L)) == (8L));\n    Debug.Assert(Modp((100L),\
  \ (101L)) == (1L));\n    Debug.Assert(Modp((30L), (5L)) == (4L));\n    Debug.Assert(Modp((31L),\
  \ (5L)) == (3L));\n    }\n\n}\n"
completions: ["        long result = 1L;\n        while (n > p) {\n            result\
    \ *= p;\n            n -= p;\n        }\n        return n % p == 0 ? result :\
    \ result * p % p;", "        long res = 1;\n        while (n > 0) {\n        \
    \    if (n % 2 == 0) {\n                res = (res * p) % p;\n            }\n\
    \            n = n / 2;\n        }\n        return res;", "        long res =\
    \ 1;\n        while (n > 0) {\n            if (n % 2 == 0) {\n               \
    \ res = (res * p) % p;\n            }\n            n /= 2;\n        }\n      \
    \  return res;", "        long ret = 1;\n        while (n != 0) {\n          \
    \  long tmp = n % p;\n            ret = ret * tmp;\n            n = n / p;\n \
    \       }\n        return ret;", "        long res = 1;\n        while (n > 0)\
    \ {\n            if (n % 2 == 1) {\n                res = (res * p) % p;\n   \
    \         }\n            n /= 2;\n        }\n        return res;", "        long\
    \ r = 1;\n        while (n > 0) {\n            r = r * p % n;\n            n =\
    \ n / 2;\n        }\n        return r;", "        long r = 1;\n        while (n\
    \ > 0) {\n            long m = n / p;\n            long t = r * m;\n         \
    \   r = t;\n            n = n % p;\n        }\n        return r;", "        long\
    \ r = 1;\n        while (n > 0) {\n            long m = n / p;\n            long\
    \ t = r * m;\n            r = t;\n            n = n % p;\n        }\n        return\
    \ r;", "        long res = 1;\n        while (n > 0) {\n            if (n % 2\
    \ == 0) {\n                res *= p;\n            }\n            n /= 2;\n   \
    \         p *= p;\n        }\n        return res;", "        long result = 1L;\n\
    \        while (n > p) {\n            result *= p;\n            n -= p;\n    \
    \    }\n        return result % p;", "        long r = 1;\n        while (n >\
    \ 0) {\n            long m = n & -p;\n            n ^= m;\n            r = (r\
    \ * m) % p;\n        }\n        return r;", "        if (n == 0) return 1;\n \
    \       if (n == 1) return p;\n        if (n == 2) return p + p;\n        if (n\
    \ % 2 == 0) return Modp(n / 2, p);\n        return Modp(n / 2, p + p) % p;", " \
    \       long r = 1;\n        while (n > 0) {\n            long m = n / p;\n  \
    \          long t = r * m;\n            r = t;\n            n = n % p;\n     \
    \   }\n        return r;", "        long r = 1;\n        while (n > 0) {\n   \
    \         if (n % 2 == 0) {\n                r = (r * p) % p;\n            }\n\
    \            n = n / 2;\n        }\n        return r;", "        long r = 1;\n\
    \        while (n > 0) {\n            long t = r * n % p;\n            r = t;\n\
    \            n = n / p;\n        }\n        return r;", "        long r = 1;\n\
    \        while (n > 0) {\n            r = r * p % n;\n            n = n / 2;\n\
    \        }\n        return r;", "        if (n == 0)\n            return 1;\n\
    \        if (n == 1)\n            return p;\n        if (n == 2)\n           \
    \ return p % 3;\n        if (n % 2 == 0)\n            return Modp(n / 2, p);\n\
    \        else\n            return Modp((n - 1) / 2, p * p) % p;", "        long\
    \ r = 1;\n        while (n != 0) {\n            if (n % 2 == 1) {\n          \
    \      r = (r * p) % p;\n            }\n            n = n / 2;\n        }\n  \
    \      return r;", "        long result = 1;\n        while (n > 0) {\n      \
    \      result *= p;\n            result %= p;\n            n -= 1;\n        }\n\
    \        return result;", "        long r = 1;\n        while (n-- > 0) {\n  \
    \          r = (r * p) % p;\n        }\n        return r;"]
stop_tokens:
- "\n    }\n"
