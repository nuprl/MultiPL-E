name: HumanEval_68_pluck
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // \"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n    // your task is to pluck one of the nodes and return it.\n\
  \    // The plucked node should be the node with the smallest even value.\n    //\
  \ If multiple nodes with the same smallest even value are found return the node\
  \ that has smallest index.\n    // The plucked node should be returned in a list,\
  \ [ smalest_value, its index ],\n    // If there are no even values or the given\
  \ array is empty, return [].\n    // Example 1:\n    // Input: [4,2,3]\n    // Output:\
  \ [2, 1]\n    // Explanation: 2 has the smallest even value, and 2 has the smallest\
  \ index.\n    // Example 2:\n    // Input: [1,2,3]\n    // Output: [2, 1]\n    //\
  \ Explanation: 2 has the smallest even value, and 2 has the smallest index. \n \
  \   // Example 3:\n    // Input: []\n    // Output: []\n    // Example 4:\n    //\
  \ Input: [5, 0, 3, 0, 4, 2]\n    // Output: [0, 1]\n    // Explanation: 0 is the\
  \ smallest value, but  there are two zeros,\n    // so we will choose the first\
  \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
  \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
  \ arr) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
  \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
  \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
  \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new\
  \ List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
  \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
  \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
  \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
  \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,\
  \ (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n\
  \    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,\
  \ (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
completions: ["        List<long> result = new List<long>();\n        long minValue\
    \ = arr.Min();\n        long minIndex = 0;\n        long minEvenValue = minValue\
    \ % 2 == 0 ? minValue : minValue + 1;\n        foreach (long n in arr) {\n   \
    \         if (n % 2 == 0) {\n                if (minValue > minEvenValue) {\n\
    \                    minEvenValue = minValue;\n                    minIndex =\
    \ n;\n                }\n            }\n            else {\n                if\
    \ (minValue < minEvenValue) {\n                    minEvenValue = minValue;\n\
    \                    minIndex = n;\n                }\n            }\n       \
    \ }\n        result.Add(minEvenValue);\n        result.Add(minIndex);\n      \
    \  return result;", "        List<long> result = new List<long>();\n        long\
    \ smalest_value = arr.Min();\n        long smalest_index = 0;\n        long smalest_even_value\
    \ = 0;\n        long smalest_even_count = 0;\n        long smalest_even_index\
    \ = 0;\n        foreach (long n in arr) {\n            if (n % 2 == 0) {\n   \
    \             if (smalest_even_count < n) {\n                    smalest_even_value\
    \ = n;\n                    smalest_even_count = n;\n                    smalest_even_index\
    \ = n;\n                }\n                else {\n                    smalest_even_count\
    \ = smalest_even_count + n;\n                }\n            }\n            else\
    \ {\n                if (smalest_even_count < n) {\n                    smalest_value\
    \ = n;\n                    smalest_index = n;\n                }\n          \
    \      else {\n                    smalest_even_count = smalest_even_count + n;\n\
    \                }\n            }\n        }\n        if (smalest_even_count ==\
    \ 0) {\n            return new List<long>();\n        }\n        if (smalest_even_count\
    \ == arr.Count) {\n            result.Add(smalest_value);\n            result.Add(smalest_index);\n\
    \            return result;\n        }\n        if (smalest_even_count == arr.Count\
    \ - 1) {\n            result.Add(smalest_value);\n            result.Add(smalest_index);\n\
    \            result.Add(smalest_even_value);\n            result.Add(smalest_even_index);\n\
    \            return result;\n        }\n        if (smalest_even_count > arr.Count\
    \ - 1) {\n            result.Add(smalest_value);\n            result.Add(smalest_index);\n\
    \            result.Add(smalest_even_value);\n            result.Add(smalest_even_index);\n\
    \            result.Add(smalest_even_count);\n            return result;\n   \
    \     }\n        if (smalest_even_count == arr.Count - 2) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n            result.Add(smalest_even_value);\n\
    \            result.Add(smalest_even_index);\n            result.Add(smalest_even_count);\n\
    \            result.Add(smalest_even_count + smalest_even_index);\n          \
    \  return result;\n        }\n        if (smalest_even_count == arr.Count - 3)\
    \ {\n            result.Add(smalest_value);\n            result.Add(smalest_index);\n\
    \            result.Add(smalest_even_value);\n            result.Add(smalest_even_index);\n\
    \            result.Add(smalest_even_count);\n            result.Add(smalest_even_count\
    \ + smalest_even_index);\n            result.Add(smalest_even_count + smalest_even_count\
    \ + smalest_even_index);\n            return result;\n        }\n        if (smalest_ev",
  "        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_index == -1) {\n            return result;\n        }\n\
    \        long smallest_value = arr[smallest_index];\n        long smallest_even_value\
    \ = arr[smallest_index];\n        bool found = false;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n                smallest_even_value\
    \ = arr[i];\n                smallest_index = i;\n                found = true;\n\
    \                break;\n            }\n        }\n        if (found) {\n    \
    \        result.Add(smallest_even_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;", "        long min = arr.Min();\n        long\
    \ max = arr.Max();\n        List<long> result = new List<long>();\n        long\
    \ index = 0;\n        long smalest_value = min;\n        bool found = false;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] < min)\
    \ {\n                smalest_value = arr[i];\n                found = false;\n\
    \            } else if (arr[i] == min) {\n                found = true;\n    \
    \        } else if (arr[i] > min && arr[i] < max && !found) {\n              \
    \  smalest_value = arr[i];\n                index = i;\n            }\n      \
    \  }\n        if (smalest_value == min && arr.Count == 0) {\n            return\
    \ new List<long>();\n        }\n        result.Add(smalest_value);\n        result.Add(index);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallestEven = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEven);\n\
    \        if (smallestIndex == -1) {\n            return result;\n        }\n \
    \       foreach (var item in arr.Where((x, i) => x % 2 == 0 && i != smallestIndex))\
    \ {\n            if (item < smallestEven) {\n                smallestEven = item;\n\
    \                smallestIndex = i;\n            }\n        }\n        result.Add(smallestEven);\n\
    \        result.Add(smallestIndex);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallest_value = arr.Min();\n     \
    \   long smallest_index = 0;\n        bool found = false;\n        for (int i\
    \ = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n           \
    \     found = true;\n                if (arr[i] < smallest_value) {\n        \
    \            smallest_value = arr[i];\n                    smallest_index = i;\n\
    \                }\n            }\n        }\n        if (found) {\n         \
    \   result.Add(smallest_value);\n            result.Add(smallest_index);\n   \
    \     }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n\
    \        bool foundSmallestEvenValue = false;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                if (smallestEvenValue\
    \ == arr[i]) {\n                    foundSmallestEvenValue = true;\n         \
    \       }\n                else {\n                    smallestEvenValue = arr[i];\n\
    \                    smallestIndex = i;\n                }\n            }\n  \
    \      }\n        if (foundSmallestEvenValue) {\n            result.Add(smallestEvenValue);\n\
    \            result.Add(smallestIndex);\n        }\n        return result;", " \
    \       long smalest_value = 0;\n        int smalest_index = 0;\n        List<long>\
    \ result = new List<long>();\n        foreach (var item in arr) {\n          \
    \  if (item % 2 == 0) {\n                smalest_value = item;\n             \
    \   smalest_index = arr.IndexOf(item);\n            }\n        }\n        if (smalest_index\
    \ != 0) {\n            result.Add(smalest_value);\n            result.Add(smalest_index);\n\
    \        }\n        return result;", "        long smalest_value = arr.Min();\n\
    \        long smalest_index = 0;\n        List<long> result = new List<long>();\n\
    \        foreach (var item in arr) {\n            if (item % 2 == 0) {\n     \
    \           if (item < smalest_value) {\n                    smalest_value = item;\n\
    \                    smalest_index = arr.IndexOf(item);\n                }\n \
    \           }\n        }\n        if (smalest_index > 0) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long smallestEvenValue\
    \ = arr.Min();\n        long smallestIndex = 0;\n        bool isSmallestEvenValueFound\
    \ = false;\n        bool isSmallestIndexFound = false;\n        foreach (long\
    \ value in arr) {\n            if (isSmallestEvenValueFound == false && value\
    \ % 2 == 0) {\n                isSmallestEvenValueFound = true;\n            \
    \    smallestEvenValue = value;\n            }\n            if (isSmallestIndexFound\
    \ == false && value == smallestEvenValue) {\n                isSmallestIndexFound\
    \ = true;\n                smallestIndex = arr.IndexOf(value);\n            }\n\
    \            if (isSmallestEvenValueFound && isSmallestIndexFound) {\n       \
    \         break;\n            }\n        }\n        if (isSmallestEvenValueFound)\
    \ {\n            result.Add(smallestEvenValue);\n            result.Add(smallestIndex);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_value = 0;\n        long smallest_index = 0;\n        long\
    \ smallest_even_value = 0;\n        long smallest_even_node_index = 0;\n     \
    \   bool is_even = false;\n        bool is_smallest = true;\n        foreach (long\
    \ n in arr) {\n            if (n % 2 == 0) {\n                is_even = true;\n\
    \                smallest_even_value = n;\n                smallest_even_node_index\
    \ = arr.IndexOf(n);\n            }\n            else {\n                is_even\
    \ = false;\n                if (smallest_even_value == 0) {\n                \
    \    smallest_even_value = n;\n                    smallest_even_node_index =\
    \ arr.IndexOf(n);\n                }\n                else {\n               \
    \     if (n < smallest_even_value) {\n                        is_smallest = false;\n\
    \                    }\n                    else {\n                        is_smallest\
    \ = true;\n                    }\n                }\n            }\n         \
    \   if (is_even) {\n                if (is_smallest) {\n                    smallest_value\
    \ = n;\n                    smallest_index = arr.IndexOf(n);\n               \
    \ }\n            }\n        }\n        if (smallest_even_value == 0) {\n     \
    \       return result;\n        }\n        else {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_even_node_index);\n            return result;\n\
    \        }", "        long min = arr.Min();\n        long max = arr.Max();\n \
    \       List<long> result = new List<long>();\n        List<long> evens = new\
    \ List<long>();\n        foreach (long n in arr) {\n            if (n % 2 == 0)\
    \ {\n                evens.Add(n);\n            }\n        }\n        if (evens.Count\
    \ > 0) {\n            int index = evens.IndexOf(min);\n            if (index >=\
    \ 0) {\n                result.Add(min);\n                result.Add(index);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long smallestEven = arr.Min();\n        long smallestIndex\
    \ = arr.IndexOf(smallestEven);\n        if (smallestIndex == -1) {\n         \
    \   return result;\n        }\n        bool found = false;\n        for (int i\
    \ = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n           \
    \     found = true;\n                break;\n            }\n        }\n      \
    \  if (found) {\n            result.Add(smallestEven);\n            result.Add(smallestIndex);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEven = arr.Min();\n        int smallestIndex = arr.IndexOf(smallestEven);\n\
    \        bool isEven = smallestEven % 2 == 0;\n        bool isSmallestEven = smallestEven\
    \ < arr.Min();\n        bool isSmallestEvenIndex = smallestIndex < arr.IndexOf(smallestEven);\n\
    \        if (isEven && isSmallestEven) {\n            result.Add(smallestEven);\n\
    \            result.Add(smallestIndex);\n        } else if (isSmallestEven) {\n\
    \            result.Add(smallestEven);\n            result.Add(smallestIndex);\n\
    \        } else if (isSmallestEvenIndex) {\n            result.Add(smallestEven);\n\
    \            result.Add(smallestIndex);\n        } else {\n            result.Add(smallestEven);\n\
    \            result.Add(smallestIndex);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long smallestEven = arr.Min();\n\
    \        long smallestIndex = arr.IndexOf(smallestEven);\n        bool foundSmallestEven\
    \ = false;\n        foreach (long n in arr) {\n            if (n % 2 == 0) {\n\
    \                if (smallestEven == n) {\n                    foundSmallestEven\
    \ = true;\n                }\n                else {\n                    smallestEven\
    \ = n;\n                    smallestIndex = arr.IndexOf(n);\n                }\n\
    \            }\n        }\n        if (foundSmallestEven) {\n            result.Add(smallestEven);\n\
    \            result.Add(smallestIndex);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long smallestEven = arr.Min();\n\
    \        long smallestIndex = arr.IndexOf(smallestEven);\n        if (smallestIndex\
    \ == -1) return result;\n        long smallestEvenValue = arr[smallestIndex];\n\
    \        long smallestEvenIndex = 0;\n        bool foundSmallestEven = false;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] != smallestEvenValue)\
    \ {\n                foundSmallestEven = false;\n                continue;\n \
    \           }\n            if (foundSmallestEven) {\n                result.Add(smallestEvenIndex);\n\
    \                break;\n            }\n            foundSmallestEven = true;\n\
    \            smallestEvenIndex = i;\n            smallestEvenValue = arr[i];\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEven = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEven);\n\
    \        if (smallestIndex == arr.Count - 1) {\n            result.Add(smallestEven);\n\
    \            return result;\n        }\n        long smallestEven2 = arr.Min(x\
    \ => x % 2 == 0);\n        if (smallestEven2 == smallestEven) {\n            smallestEven\
    \ = smallestEven2;\n            smallestIndex = arr.IndexOf(smallestEven);\n \
    \       }\n        if (smallestIndex == arr.Count - 1) {\n            result.Add(smallestEven);\n\
    \            return result;\n        }\n        long smallestEven3 = arr.Min(x\
    \ => x % 2 == 0);\n        if (smallestEven3 == smallestEven) {\n            smallestEven\
    \ = smallestEven3;\n            smallestIndex = arr.IndexOf(smallestEven);\n \
    \       }\n        if (smallestIndex == arr.Count - 1) {\n            result.Add(smallestEven);\n\
    \            return result;\n        }\n        long smallestEven4 = arr.Min(x\
    \ => x % 2 == 0);\n        if (smallestEven4 == smallestEven) {\n            smallestEven\
    \ = smallestEven4;\n            smallestIndex = arr.IndexOf(smallestEven);\n \
    \       }\n        if (smallestIndex == arr.Count - 1) {\n            result.Add(smallestEven);\n\
    \            return result;\n        }\n        long smallestEven5 = arr.Min(x\
    \ => x % 2 == 0);\n        if (smallestEven5 == smallestEven) {\n            smallestEven\
    \ = smallestEven5;\n            smallestIndex = arr.IndexOf(smallestEven);\n \
    \       }\n        if (smallestIndex == arr.Count - 1) {\n            result.Add(smallestEven);\n\
    \            return result;\n        }\n        long smallestEven6 = arr.Min(x\
    \ => x % 2 == 0);\n        if (smallestEven6 == smallestEven) {\n            smallestEven\
    \ = smallestEven6;\n            smallestIndex = arr.IndexOf(smallestEven);\n \
    \       }\n        if (smallestIndex == arr.Count - 1) {\n            result.Add(smallestEven);\n\
    \            return result;\n        }\n        long smallestEven7 = arr.Min(x\
    \ => x % 2 == 0);\n        if (smallestEven7 == smallestEven) {\n            smallestEven\
    \ = smallestEven7;\n            smallestIndex = arr.IndexOf(smallestEven);\n \
    \       }\n        if (smallestIndex == arr.Count - 1) {\n            result.Add(smallestEven);\n\
    \            return result;\n        }\n        long smallestEven8 = arr.Min(x\
    \ => x % 2 == 0);\n        if (smallestEven8", "        List<long> result = new\
    \ List<long>();\n        long smallest_value = arr.Min();\n        long smallest_index\
    \ = 0;\n        long smallest_even_value = 0;\n        bool found = false;\n \
    \       foreach (long value in arr) {\n            if (value % 2 == 0) {\n   \
    \             if (smallest_value == 0) {\n                    smallest_even_value\
    \ = value;\n                    smallest_index = arr.IndexOf(value);\n       \
    \             found = true;\n                }\n                else if (smallest_value\
    \ == value && smallest_index == arr.IndexOf(value)) {\n                    smallest_even_value\
    \ = value;\n                    smallest_index = arr.IndexOf(value);\n       \
    \             found = true;\n                }\n                else if (smallest_value\
    \ == value && smallest_index > arr.IndexOf(value)) {\n                    smallest_even_value\
    \ = value;\n                    smallest_index = arr.IndexOf(value);\n       \
    \             found = true;\n                }\n            }\n        }\n   \
    \     if (found) {\n            result.Add(smallest_even_value);\n           \
    \ result.Add(smallest_index);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long minValue = arr.Min();\n        long\
    \ minIndex = 0;\n        long minEvenValue = minValue % 2 == 0 ? minValue : minValue\
    \ / 2;\n        bool isEven = true;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            long value = arr[i];\n            if (isEven) {\n           \
    \     if (value == minEvenValue) {\n                    result.Add(value);\n \
    \                   minIndex = i;\n                }\n                isEven =\
    \ false;\n            } else {\n                if (value == minEvenValue) {\n\
    \                    result.Add(value);\n                    minIndex = i;\n \
    \               }\n                isEven = true;\n            }\n        }\n\
    \        if (result.Count == 0) {\n            return new List<long>();\n    \
    \    }\n        if (result.Count == 1) {\n            return new List<long> {\
    \ result[0] };\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long smallest_even = arr.Min();\n        long smallest_index\
    \ = arr.IndexOf(smallest_even);\n        if (smallest_even % 2 == 0) {\n     \
    \       result.Add(smallest_even);\n            result.Add(smallest_index);\n\
    \            return result;\n        }\n        long smallest_odd = arr.Min();\n\
    \        long smallest_index_odd = arr.IndexOf(smallest_odd);\n        if (smallest_odd\
    \ % 2 == 0) {\n            result.Add(smallest_odd);\n            result.Add(smallest_index_odd);\n\
    \            return result;\n        }\n        long smallest_odd_index = arr.IndexOf(smallest_odd);\n\
    \        long smallest_even_index = arr.IndexOf(smallest_even);\n        if (smallest_odd_index\
    \ > smallest_even_index) {\n            result.Add(smallest_even);\n         \
    \   result.Add(smallest_even_index);\n            return result;\n        }\n\
    \        long smallest_even_index = arr.IndexOf(smallest_even);\n        long\
    \ smallest_odd_index = arr.IndexOf(smallest_odd);\n        if (smallest_odd_index\
    \ > smallest_even_index) {\n            result.Add(smallest_odd);\n          \
    \  result.Add(smallest_odd_index);\n            return result;\n        }\n  \
    \      long smallest_even = arr.Min();\n        long smallest_index = arr.IndexOf(smallest_even);\n\
    \        if (smallest_even % 2 == 0) {\n            result.Add(smallest_even);\n\
    \            result.Add(smallest_index);\n            return result;\n       \
    \ }\n        long smallest_odd = arr.Min();\n        long smallest_index_odd =\
    \ arr.IndexOf(smallest_odd);\n        if (smallest_odd % 2 == 0) {\n         \
    \   result.Add(smallest_odd);\n            result.Add(smallest_index_odd);\n \
    \           return result;\n        }\n        long smallest_odd_index = arr.IndexOf(smallest_odd);\n\
    \        long smallest_even_index = arr.IndexOf(smallest_even);\n        if (smallest_odd_index\
    \ > smallest_even_index) {\n            result.Add(smallest_even);\n         \
    \   result.Add(smallest_even_index);\n            return result;\n        }\n\
    \        long smallest_even_index = arr.IndexOf(smallest_even);\n        long\
    \ smallest_odd_index = arr.IndexOf(smallest_odd);\n        if (smallest_odd_index\
    \ > smallest_even_index) {\n            result.Add(smallest_odd);\n          \
    \  result.Add(smallest_odd_index);\n            return result;\n        }\n  \
    \      long smallest_even = arr.Min();\n        long smallest_index = arr.IndexOf(smallest_even);\n\
    \        if (smallest_even % 2 == 0) {\n            result.Add(smallest_even);\n\
    \            result.Add(smallest_index);\n            return result;\n       \
    \ }\n        ", "        List<long> result = new List<long>();\n        long smallestEvenValue\
    \ = arr.Min();\n        long smallestIndex = 0;\n        long smallestIndexValue\
    \ = 0;\n        foreach (long value in arr) {\n            if (value % 2 == 0)\
    \ {\n                if (smallestEvenValue % 2 == 0) {\n                    smallestEvenValue\
    \ = value;\n                    smallestIndex = arr.IndexOf(value);\n        \
    \            smallestIndexValue = value;\n                } else {\n         \
    \           smallestEvenValue = value;\n                    smallestIndex = arr.IndexOf(value);\n\
    \                    smallestIndexValue = value;\n                }\n        \
    \    }\n        }\n        result.Add(smallestEvenValue);\n        result.Add(smallestIndex);\n\
    \        result.Add(smallestIndexValue);\n        return result;", "        long\
    \ min = arr.Min();\n        long max = arr.Max();\n        long smalest_value\
    \ = min;\n        long smalest_index = 0;\n        List<long> result = new List<long>();\n\
    \        foreach (long n in arr) {\n            if (n % 2 == 0) {\n          \
    \      if (smalest_value == min) {\n                    smalest_value = n;\n \
    \                   smalest_index = arr.IndexOf(n);\n                }\n     \
    \       }\n            else {\n                if (smalest_value == min) {\n \
    \                   smalest_value = n;\n                    smalest_index = arr.IndexOf(n);\n\
    \                }\n            }\n        }\n        result.Add(smalest_value);\n\
    \        result.Add(smalest_index);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallestEven = arr.Min();\n       \
    \ long smallestIndex = arr.IndexOf(smallestEven);\n        long largestEven =\
    \ arr.Max();\n        long largestIndex = arr.IndexOf(largestEven);\n        bool\
    \ isEven = true;\n        bool isSmallestEven = true;\n        bool isSmallestIndex\
    \ = true;\n        bool isLargestEven = true;\n        bool isLargestIndex = true;\n\
    \        bool isSmallest = true;\n        bool isLargest = true;\n        long\
    \ smallestSmallestEven = smallestEven;\n        long smallestSmallestIndex = smallestIndex;\n\
    \        long smallestLargestEven = largestEven;\n        long smallestLargestIndex\
    \ = largestIndex;\n        long largestSmallestEven = smallestEven;\n        long\
    \ largestSmallestIndex = smallestIndex;\n        long largestLargestEven = largestEven;\n\
    \        long largestLargestIndex = largestIndex;\n        long smallestSmallestEvenIndex\
    \ = 0;\n        long smallestSmallestIndexIndex = 0;\n        long smallestLargestEvenIndex\
    \ = 0;\n        long smallestLargestIndexIndex = 0;\n        long largestSmallestEvenIndex\
    \ = 0;\n        long largestSmallestIndexIndex = 0;\n        long largestLargestEvenIndex\
    \ = 0;\n        long largestLargestIndexIndex = 0;\n        long smallestSmallestEvenValue\
    \ = smallestEven;\n        long smallestSmallestIndexValue = smallestIndex;\n\
    \        long smallestLargestEvenValue = largestEven;\n        long smallestLargestIndexValue\
    \ = largestIndex;\n        long largestSmallestEvenValue = smallestEven;\n   \
    \     long largestSmallestIndexValue = smallestIndex;\n        long largestLargestEvenValue\
    \ = largestEven;\n        long largestLargestIndexValue = largestIndex;\n    \
    \    long smallestSmallestEvenValueIndex = 0;\n        long smallestSmallestIndexValueIndex\
    \ = 0;\n        long smallestLargestEvenValueIndex = 0;\n        long smallestLargestIndexValueIndex\
    \ = 0;\n        long largestSmallestEvenValueIndex = 0;\n        long largestSmallestIndexValueIndex\
    \ = 0;\n        long largestLargestEvenValueIndex = 0;\n        long largestLargestIndexValueIndex\
    \ = 0;\n        long ", "        List<long> result = new List<long>();\n     \
    \   long smallest_even_value = 0;\n        long smallest_index = 0;\n        long\
    \ smallest_value = 0;\n        bool is_even = true;\n        foreach (var item\
    \ in arr) {\n            if (item % 2 == 0) {\n                is_even = true;\n\
    \                smallest_even_value = item;\n                smallest_index =\
    \ arr.IndexOf(item);\n                smallest_value = item;\n            } else\
    \ {\n                is_even = false;\n                if (smallest_even_value.CompareTo(item)\
    \ < 0) {\n                    smallest_even_value = item;\n                  \
    \  smallest_index = arr.IndexOf(item);\n                    smallest_value = item;\n\
    \                }\n            }\n        }\n        if (smallest_even_value.Equals(0))\
    \ {\n            return new List<long>();\n        }\n        if (smallest_index\
    \ == 0) {\n            result.Add(smallest_value);\n            return result;\n\
    \        }\n        if (smallest_index == arr.Count - 1) {\n            result.Add(smallest_value);\n\
    \            return result;\n        }\n        if (smallest_index > 0) {\n  \
    \          int index = smallest_index;\n            while (index > 0) {\n    \
    \            if (arr[index - 1] % 2 == 0) {\n                    result.Add(arr[index\
    \ - 1]);\n                    index--;\n                } else {\n           \
    \         index--;\n                }\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        long smallest_value = smallest_even_value;\n        long smallest_index\
    \ = smallest_even_index;\n        bool found = false;\n        foreach (long value\
    \ in arr) {\n            if (value % 2 == 0) {\n                if (smallest_value\
    \ == smallest_even_value) {\n                    found = true;\n             \
    \       smallest_value = value;\n                    smallest_index = arr.IndexOf(value);\n\
    \                }\n                else {\n                    if (smallest_value\
    \ < smallest_even_value) {\n                        found = true;\n          \
    \              smallest_value = value;\n                        smallest_index\
    \ = arr.IndexOf(value);\n                    }\n                }\n          \
    \  }\n        }\n        if (found) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallestEven = arr.Min();\n\
    \        int smallestIndex = arr.FindIndex(x => x == smallestEven);\n        if\
    \ (smallestIndex != -1) {\n            result.Add(smallestEven);\n           \
    \ result.Add(smallestIndex);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallestEven = arr.Min();\n       \
    \ long smallestIndex = arr.IndexOf(smallestEven);\n        long smallestValue\
    \ = arr[smallestIndex];\n        bool isEven = smallestEven % 2 == 0;\n      \
    \  bool isSmallestEven = smallestEven < smallestValue;\n        if (isEven &&\
    \ isSmallestEven) {\n            result.Add(smallestEven);\n            result.Add(smallestIndex);\n\
    \        }\n        else if (isEven) {\n            int index = arr.IndexOf(smallestEven);\n\
    \            while (index != smallestIndex) {\n                smallestEven =\
    \ arr[index];\n                smallestIndex = arr.IndexOf(smallestEven);\n  \
    \              smallestValue = arr[index];\n                isEven = smallestEven\
    \ % 2 == 0;\n                isSmallestEven = smallestEven < smallestValue;\n\
    \                if (isEven && isSmallestEven) {\n                    result.Add(smallestEven);\n\
    \                    result.Add(index);\n                }\n                else\
    \ if (isEven) {\n                    index = arr.IndexOf(smallestEven);\n    \
    \            }\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long minValue = arr.Min();\n        long\
    \ minIndex = 0;\n        long minEvenValue = minValue % 2 == 0 ? minValue : minValue\
    \ + 1;\n        long minEvenIndex = 0;\n        foreach (long i in arr) {\n  \
    \          if (i % 2 == 0) {\n                if (minEvenValue > i) {\n      \
    \              minEvenValue = i;\n                    minEvenIndex = minIndex;\n\
    \                }\n            } else {\n                if (minEvenValue < i)\
    \ {\n                    minEvenValue = i;\n                    minEvenIndex =\
    \ minIndex;\n                }\n            }\n            if (minEvenValue ==\
    \ i) {\n                minIndex++;\n            }\n        }\n        result.Add(minEvenValue);\n\
    \        result.Add(minEvenIndex);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallest_value = arr.Min();\n     \
    \   long smallest_index = 0;\n        bool found = false;\n        for (int i\
    \ = 0; i < arr.Count; i++) {\n            if (arr[i] < smallest_value) {\n   \
    \             smallest_value = arr[i];\n                smallest_index = i;\n\
    \                found = false;\n            }\n            if (arr[i] == smallest_value\
    \ && !found) {\n                result.Add(smallest_value);\n                result.Add(smallest_index);\n\
    \                found = true;\n            }\n        }\n        return result.Count\
    \ == 0 ? new List<long>() : result;", "        List<long> result = new List<long>();\n\
    \        long minValue = arr.Min();\n        long minIndex = 0;\n        bool\
    \ isEven = true;\n        foreach (long n in arr) {\n            if (n % 2 ==\
    \ 0) {\n                isEven = false;\n            }\n            if (isEven)\
    \ {\n                if (n < minValue) {\n                    minValue = n;\n\
    \                    minIndex = arr.IndexOf(n);\n                }\n         \
    \   }\n        }\n        result.Add(minValue);\n        result.Add(minIndex);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long minValue = arr.Min();\n        long minIndex = 0;\n        long minEvenValue\
    \ = minValue / 2;\n        long minEvenIndex = 0;\n        foreach (long n in\
    \ arr) {\n            if (n % 2 == 0) {\n                if (n < minEvenValue)\
    \ {\n                    minEvenValue = n;\n                    minEvenIndex =\
    \ minIndex;\n                }\n                if (n == minEvenValue) {\n   \
    \                 minIndex++;\n                }\n            }\n        }\n \
    \       result.Add(minEvenValue);\n        result.Add(minEvenIndex);\n       \
    \ return result;", "        List<long> result = new List<long>();\n        long\
    \ smallestEven = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEven);\n\
    \        if (smallestIndex < 0)\n            return result;\n        long smallestEvenValue\
    \ = arr[smallestIndex];\n        long smallestEvenIndex = 0;\n        bool foundSmallestEven\
    \ = false;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ == smallestEvenValue) {\n                foundSmallestEven = true;\n       \
    \         smallestEvenIndex = i;\n            }\n        }\n        if (foundSmallestEven)\
    \ {\n            result.Add(smallestEvenValue);\n            result.Add(smallestEvenIndex);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long minValue = arr.Min();\n        long minIndex = 0;\n        long\
    \ minEvenValue = minValue % 2 == 0 ? minValue : minValue - 1;\n        bool isEven\
    \ = true;\n        foreach (long i in arr) {\n            if (i % 2 == 0) {\n\
    \                if (minEvenValue == i) {\n                    minEvenValue =\
    \ minValue % 2 == 0 ? minValue : minValue - 1;\n                    minIndex =\
    \ i;\n                    isEven = true;\n                }\n                else\
    \ if (minEvenValue > i) {\n                    minEvenValue = i;\n           \
    \         minIndex = i;\n                    isEven = true;\n                }\n\
    \            }\n            else {\n                if (minEvenValue == i) {\n\
    \                    minEvenValue = minValue % 2 == 0 ? minValue : minValue -\
    \ 1;\n                    minIndex = i;\n                    isEven = false;\n\
    \                }\n                else if (minEvenValue > i) {\n           \
    \         minEvenValue = i;\n                    minIndex = i;\n             \
    \       isEven = false;\n                }\n            }\n        }\n       \
    \ if (isEven) {\n            result.Add(minEvenValue);\n            result.Add(minIndex);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n\
    \        long currentIndex = 0;\n        bool foundSmallestEvenValue = false;\n\
    \        bool foundSmallestIndex = false;\n        foreach (long value in arr)\
    \ {\n            if (value % 2 == 0) {\n                if (!foundSmallestEvenValue)\
    \ {\n                    foundSmallestEvenValue = true;\n                    smallestEvenValue\
    \ = value;\n                }\n                if (value < smallestEvenValue)\
    \ {\n                    foundSmallestEvenValue = false;\n                   \
    \ smallestEvenValue = value;\n                }\n            }\n            else\
    \ {\n                if (!foundSmallestIndex) {\n                    foundSmallestIndex\
    \ = true;\n                    smallestIndex = value;\n                }\n   \
    \             if (value < smallestIndex) {\n                    foundSmallestIndex\
    \ = false;\n                    smallestIndex = value;\n                }\n  \
    \          }\n        }\n        if (foundSmallestEvenValue) {\n            result.Add(smallestEvenValue);\n\
    \            result.Add(smallestIndex);\n        }\n        else if (foundSmallestIndex)\
    \ {\n            result.Add(smallestIndex);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallestEven = arr.Min();\n\
    \        long smallestIndex = arr.IndexOf(smallestEven);\n        if (smallestIndex\
    \ == -1 || smallestIndex == arr.Count - 1) {\n            return result;\n   \
    \     }\n        long smallestEvenValue = arr[smallestIndex];\n        bool found\
    \ = false;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ == smallestEvenValue) {\n                found = true;\n                break;\n\
    \            }\n        }\n        if (found) {\n            result.Add(smallestEvenValue);\n\
    \            result.Add(smallestIndex);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long smallestEvenValue\
    \ = arr.Min();\n        long smallestIndex = 0;\n        bool foundSmallestEvenValue\
    \ = false;\n        bool foundSmallestIndex = false;\n        foreach (long i\
    \ in arr) {\n            if (i % 2 == 0) {\n                if (foundSmallestEvenValue)\
    \ {\n                    foundSmallestIndex = true;\n                    result.Add(smallestEvenValue);\n\
    \                    result.Add(smallestIndex);\n                    break;\n\
    \                }\n                foundSmallestEvenValue = true;\n         \
    \       smallestEvenValue = i;\n                smallestIndex = i;\n         \
    \   }\n        }\n        if (!foundSmallestEvenValue) {\n            result.Add(smallestEvenValue);\n\
    \            result.Add(smallestIndex);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long smallestEven = arr.Min();\n\
    \        long smallestIndex = arr.IndexOf(smallestEven);\n        bool foundSmallestEven\
    \ = false;\n        foreach (long n in arr) {\n            if (n % 2 == 0) {\n\
    \                if (smallestEven < n) {\n                    smallestEven = n;\n\
    \                    smallestIndex = arr.IndexOf(n);\n                    foundSmallestEven\
    \ = true;\n                }\n            }\n        }\n        if (foundSmallestEven)\
    \ {\n            result.Add(smallestEven);\n            result.Add(smallestIndex);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEvenValue = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEvenValue);\n\
    \        if (smallestEvenValue % 2 == 0) {\n            result.Add(smallestEvenValue);\n\
    \            result.Add(smallestIndex);\n        }\n        else {\n         \
    \   List<long> evenValues = new List<long>();\n            foreach (long value\
    \ in arr) {\n                if (value % 2 == 0) {\n                    evenValues.Add(value);\n\
    \                }\n            }\n            int smallestEvenValueIndex = evenValues.IndexOf(smallestEvenValue);\n\
    \            result.Add(smallestEvenValue);\n            result.Add(smallestEvenValueIndex);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_even = arr.Min();\n        long smallest_index = arr.IndexOf(smallest_even);\n\
    \        if (smallest_even % 2 == 0) {\n            result.Add(smallest_even);\n\
    \            result.Add(smallest_index);\n            return result;\n       \
    \ }\n        long smallest_odd = arr.Min();\n        long smallest_index_odd =\
    \ arr.IndexOf(smallest_odd);\n        if (smallest_odd % 2 == 0) {\n         \
    \   result.Add(smallest_odd);\n            result.Add(smallest_index_odd);\n \
    \           return result;\n        }\n        long smallest_odd_index = arr.IndexOf(smallest_odd);\n\
    \        long smallest_even_index = arr.IndexOf(smallest_even);\n        if (smallest_odd_index\
    \ > smallest_even_index) {\n            result.Add(smallest_even);\n         \
    \   result.Add(smallest_even_index);\n            return result;\n        }\n\
    \        long smallest_even_index = arr.IndexOf(smallest_even);\n        long\
    \ smallest_odd_index = arr.IndexOf(smallest_odd);\n        if (smallest_odd_index\
    \ > smallest_even_index) {\n            result.Add(smallest_odd);\n          \
    \  result.Add(smallest_odd_index);\n            return result;\n        }\n  \
    \      long smallest_odd_index = arr.IndexOf(smallest_odd);\n        long smallest_even_index\
    \ = arr.IndexOf(smallest_even);\n        if (smallest_odd_index > smallest_even_index)\
    \ {\n            result.Add(smallest_even);\n            result.Add(smallest_even_index);\n\
    \            return result;\n        }\n        long smallest_odd_index = arr.IndexOf(smallest_odd);\n\
    \        long smallest_even_index = arr.IndexOf(smallest_even);\n        if (smallest_odd_index\
    \ > smallest_even_index) {\n            result.Add(smallest_odd);\n          \
    \  result.Add(smallest_odd_index);\n            return result;\n        }\n  \
    \      long smallest_odd_index = arr.IndexOf(smallest_odd);\n        long smallest_even_index\
    \ = arr.IndexOf(smallest_even);\n        if (smallest_odd_index > smallest_even_index)\
    \ {\n            result.Add(smallest_even);\n            result.Add(smallest_even_index);\n\
    \            return result;\n        }\n        long smallest_odd_index = arr.IndexOf(smallest_odd);\n\
    \        long smallest_even_index = arr.IndexOf(smallest_even);\n        if (smallest_odd_index\
    \ > smallest_even_index) {\n            result.Add(smallest_odd);\n          \
    \  result.Add(smallest_odd_index);\n            return result;\n        }\n  \
    \      long smallest_odd_index = arr.IndexOf(smallest_odd);\n        long smallest_even_index\
    \ = arr.IndexOf(smallest_even);", "        List<long> result = new List<long>();\n\
    \        long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n\
    \        bool foundSmallestEvenValue = false;\n        bool foundSmallestIndex\
    \ = false;\n        foreach (long n in arr) {\n            if (n % 2 == 0) {\n\
    \                if (!foundSmallestEvenValue) {\n                    smallestEvenValue\
    \ = n;\n                    foundSmallestEvenValue = true;\n                }\n\
    \                else if (smallestEvenValue == n) {\n                    foundSmallestEvenValue\
    \ = true;\n                    smallestIndex = arr.IndexOf(n);\n             \
    \   }\n            }\n        }\n        if (foundSmallestEvenValue) {\n     \
    \       result.Add(smallestEvenValue);\n            result.Add(smallestIndex);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEvenValue = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEvenValue);\n\
    \        if (smallestEvenValue % 2 == 0) {\n            result.Add(smallestEvenValue);\n\
    \            result.Add(smallestIndex);\n            return result;\n        }\n\
    \        long smallestEvenValue2 = arr.Min(x => x % 2 == 0);\n        long smallestIndex2\
    \ = arr.IndexOf(smallestEvenValue2);\n        if (smallestEvenValue2 % 2 == 0)\
    \ {\n            result.Add(smallestEvenValue2);\n            result.Add(smallestIndex2);\n\
    \            return result;\n        }\n        long smallestEvenValue3 = arr.Min(x\
    \ => x % 2 == 0);\n        long smallestIndex3 = arr.IndexOf(smallestEvenValue3);\n\
    \        if (smallestEvenValue3 % 2 == 0) {\n            result.Add(smallestEvenValue3);\n\
    \            result.Add(smallestIndex3);\n            return result;\n       \
    \ }\n        long smallestEvenValue4 = arr.Min(x => x % 2 == 0);\n        long\
    \ smallestIndex4 = arr.IndexOf(smallestEvenValue4);\n        if (smallestEvenValue4\
    \ % 2 == 0) {\n            result.Add(smallestEvenValue4);\n            result.Add(smallestIndex4);\n\
    \            return result;\n        }\n        long smallestEvenValue5 = arr.Min(x\
    \ => x % 2 == 0);\n        long smallestIndex5 = arr.IndexOf(smallestEvenValue5);\n\
    \        if (smallestEvenValue5 % 2 == 0) {\n            result.Add(smallestEvenValue5);\n\
    \            result.Add(smallestIndex5);\n            return result;\n       \
    \ }\n        long smallestEvenValue6 = arr.Min(x => x % 2 == 0);\n        long\
    \ smallestIndex6 = arr.IndexOf(smallestEvenValue6);\n        if (smallestEvenValue6\
    \ % 2 == 0) {\n            result.Add(smallestEvenValue6);\n            result.Add(smallestIndex6);\n\
    \            return result;\n        }\n        long smallestEvenValue7 = arr.Min(x\
    \ => x % 2 == 0);\n        long smallestIndex7 = arr.IndexOf(smallestEvenValue7);\n\
    \        if (smallestEvenValue7 % 2 == 0) {\n            result.Add(smallestEvenValue7);\n\
    \            result.Add(smallestIndex7);\n            return result;\n       \
    \ }\n        long smallestEvenValue8 = arr.Min(x => x % 2 == 0);\n        long\
    \ smallestIndex8 = arr.IndexOf(smallestEvenValue8);\n        if (smallestEvenValue8\
    \ % 2 == 0) {\n            result.Add(smallestEvenValue8);\n            result.Add(smallestIndex8);\n\
    \            return result;\n        }\n        long smallestEvenValue9 = arr.Min(x\
    \ => x % 2 == 0);\n        ", "        List<long> result = new List<long>();\n\
    \        long smallestEven = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEven);\n\
    \        bool isEven = smallestEven % 2 == 0;\n        long smallestEvenValue\
    \ = smallestEven / 2;\n        foreach (long i in arr) {\n            if (isEven)\
    \ {\n                if (i == smallestEvenValue) {\n                    result.Add(smallestEvenValue);\n\
    \                    result.Add(smallestIndex);\n                }\n         \
    \   }\n            else {\n                if (i == smallestEvenValue) {\n   \
    \                 result.Add(smallestEvenValue);\n                    result.Add(smallestIndex);\n\
    \                }\n            }\n            isEven = !isEven;\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallestEven = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEven);\n\
    \        long smallestValue = smallestEven;\n        bool isEven = true;\n   \
    \     foreach (long i in arr) {\n            if (i % 2 == 0) {\n             \
    \   isEven = true;\n            }\n            if (isEven) {\n               \
    \ if (i < smallestEven) {\n                    smallestEven = i;\n           \
    \         smallestIndex = arr.IndexOf(i);\n                    smallestValue =\
    \ i;\n                }\n                isEven = false;\n            }\n    \
    \    }\n        result.Add(smallestEven);\n        result.Add(smallestIndex);\n\
    \        return result;", "        long smallestEvenValue = arr.Min();\n     \
    \   long smallestIndex = 0;\n        List<long> result = new List<long>();\n \
    \       foreach (long node in arr) {\n            if (node % 2 == 0) {\n     \
    \           if (smallestEvenValue % 2 == 0) {\n                    if (smallestIndex\
    \ < node) {\n                        smallestEvenValue = node;\n             \
    \           smallestIndex = node;\n                    }\n                }\n\
    \                else {\n                    if (smallestEvenValue < node) {\n\
    \                        smallestEvenValue = node;\n                        smallestIndex\
    \ = node;\n                    }\n                }\n            }\n        }\n\
    \        if (smallestEvenValue != 0) {\n            result.Add(smallestEvenValue);\n\
    \            result.Add(smallestIndex);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long smallestEvenValue\
    \ = arr.Min();\n        long smallestIndex = 0;\n        long currentSmallestEvenValue\
    \ = smallestEvenValue;\n        long currentSmallestIndex = smallestIndex;\n \
    \       bool isSmallestEvenValueFound = false;\n        bool isSmallestIndexFound\
    \ = false;\n        foreach (long n in arr) {\n            if (n % 2 == 0) {\n\
    \                currentSmallestEvenValue = n;\n                currentSmallestIndex\
    \ = arr.IndexOf(n);\n                isSmallestEvenValueFound = true;\n      \
    \      }\n            if (n % 2 == 0 && n == smallestEvenValue) {\n          \
    \      isSmallestEvenValueFound = true;\n            }\n            if (n % 2\
    \ == 0 && n == smallestIndex) {\n                isSmallestIndexFound = true;\n\
    \            }\n            if (isSmallestEvenValueFound && isSmallestIndexFound)\
    \ {\n                break;\n            }\n        }\n        if (isSmallestEvenValueFound)\
    \ {\n            result.Add(smallestEvenValue);\n            result.Add(currentSmallestIndex);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_value = 0;\n        long smallest_index = 0;\n        foreach\
    \ (var item in arr) {\n            if (item % 2 == 0) {\n                smallest_value\
    \ = item;\n                smallest_index = arr.IndexOf(item);\n            }\n\
    \        }\n        if (smallest_value == 0) {\n            return new List<long>();\n\
    \        }\n        List<long> evens = new List<long>();\n        foreach (var\
    \ item in arr) {\n            if (item % 2 == 0) {\n                evens.Add(item);\n\
    \            }\n        }\n        if (evens.Count > 0) {\n            smallest_value\
    \ = evens.Min();\n            smallest_index = evens.IndexOf(smallest_value);\n\
    \        }\n        result.Add(smallest_value);\n        result.Add(smallest_index);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallest_even_value = arr.Min();\n        long smallest_even_index\
    \ = arr.IndexOf(smallest_even_value);\n        if (smallest_even_index > 0) {\n\
    \            result.Add(smallest_even_value);\n            result.Add(smallest_even_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_even = arr.Min();\n        long smallest_index = arr.IndexOf(smallest_even);\n\
    \        long smallest_value = smallest_even;\n        long smallest_index_value\
    \ = smallest_index;\n        bool found = false;\n        foreach (var item in\
    \ arr) {\n            if (item % 2 == 0) {\n                if (smallest_even\
    \ < item) {\n                    smallest_even = item;\n                    smallest_index_value\
    \ = arr.IndexOf(item);\n                    smallest_value = smallest_even;\n\
    \                    found = true;\n                }\n            }\n       \
    \ }\n        if (found) {\n            result.Add(smallest_value);\n         \
    \   result.Add(smallest_index_value);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_even_index == -1) {\n            return result;\n      \
    \  }\n        long smallest_value = arr[smallest_even_index];\n        long smallest_index\
    \ = smallest_even_index;\n        bool found = false;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            if (arr[i] != smallest_value) {\n       \
    \         found = true;\n                break;\n            }\n        }\n  \
    \      if (found) {\n            int index = smallest_even_index;\n          \
    \  while (index > 0) {\n                if (arr[index] % 2 == 0) {\n         \
    \           smallest_value = arr[index];\n                    smallest_index =\
    \ index;\n                    break;\n                }\n                index--;\n\
    \            }\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEven = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEven);\n\
    \        if (smallestIndex == -1) {\n            return result;\n        }\n \
    \       long smallestEvenValue = arr[smallestIndex];\n        foreach (var item\
    \ in arr.Where(x => x % 2 == 0)) {\n            if (item < smallestEvenValue)\
    \ {\n                smallestEven = item;\n                smallestIndex = arr.IndexOf(smallestEven);\n\
    \                smallestEvenValue = arr[smallestIndex];\n            }\n    \
    \    }\n        result.Add(smallestEvenValue);\n        result.Add(smallestIndex);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallest_value = arr.Min();\n        long smallest_index = -1;\n  \
    \      bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n  \
    \          if (arr[i] < smallest_value) {\n                found = true;\n   \
    \             smallest_value = arr[i];\n                smallest_index = i;\n\
    \            }\n        }\n        if (found) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        long smalest_value = 0;\n        long smalest_index = 0;\n        List<long>\
    \ result = new List<long>();\n        foreach (var item in arr) {\n          \
    \  if (item % 2 == 0) {\n                smalest_value = item;\n             \
    \   smalest_index = arr.IndexOf(item);\n            }\n        }\n        if (smalest_value\
    \ == 0) {\n            return result;\n        }\n        List<long> evens = new\
    \ List<long>();\n        foreach (var item in arr) {\n            if (item % 2\
    \ == 0) {\n                evens.Add(item);\n            }\n        }\n      \
    \  smalest_value = evens.Min();\n        smalest_index = evens.IndexOf(smalest_value);\n\
    \        result.Add(smalest_value);\n        result.Add(smalest_index);\n    \
    \    return result;", "        List<long> result = new List<long>();\n       \
    \ long minValue = arr.Min();\n        long minIndex = 0;\n        bool isEven\
    \ = true;\n        foreach (long i in arr) {\n            if (i % 2 == 0) {\n\
    \                isEven = false;\n            }\n            if (isEven) {\n \
    \               if (i < minValue) {\n                    minValue = i;\n     \
    \               minIndex = i;\n                }\n            }\n            else\
    \ {\n                if (i > minValue) {\n                    minValue = i;\n\
    \                    minIndex = i;\n                }\n            }\n       \
    \ }\n        result.Add(minValue);\n        result.Add(minIndex);\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long smallestEven\
    \ = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEven);\n    \
    \    if (smallestIndex == -1 || smallestEven % 2 == 0) {\n            result.Add(smallestEven);\n\
    \            return result;\n        }\n        long smallestEven2 = arr.Min(x\
    \ => x % 2 == 0);\n        long smallestIndex2 = arr.IndexOf(smallestEven2);\n\
    \        if (smallestIndex2 == -1 || smallestEven2 % 2 == 0) {\n            result.Add(smallestEven2);\n\
    \            return result;\n        }\n        long smallestEven3 = arr.Min(x\
    \ => x % 2 == 0);\n        long smallestIndex3 = arr.IndexOf(smallestEven3);\n\
    \        if (smallestIndex3 == -1 || smallestEven3 % 2 == 0) {\n            result.Add(smallestEven3);\n\
    \            return result;\n        }\n        long smallestEven4 = arr.Min(x\
    \ => x % 2 == 0);\n        long smallestIndex4 = arr.IndexOf(smallestEven4);\n\
    \        if (smallestIndex4 == -1 || smallestEven4 % 2 == 0) {\n            result.Add(smallestEven4);\n\
    \            return result;\n        }\n        long smallestEven5 = arr.Min(x\
    \ => x % 2 == 0);\n        long smallestIndex5 = arr.IndexOf(smallestEven5);\n\
    \        if (smallestIndex5 == -1 || smallestEven5 % 2 == 0) {\n            result.Add(smallestEven5);\n\
    \            return result;\n        }\n        long smallestEven6 = arr.Min(x\
    \ => x % 2 == 0);\n        long smallestIndex6 = arr.IndexOf(smallestEven6);\n\
    \        if (smallestIndex6 == -1 || smallestEven6 % 2 == 0) {\n            result.Add(smallestEven6);\n\
    \            return result;\n        }\n        long smallestEven7 = arr.Min(x\
    \ => x % 2 == 0);\n        long smallestIndex7 = arr.IndexOf(smallestEven7);\n\
    \        if (smallestIndex7 == -1 || smallestEven7 % 2 == 0) {\n            result.Add(smallestEven7);\n\
    \            return result;\n        }\n        long smallestEven8 = arr.Min(x\
    \ => x % 2 == 0);\n        long smallestIndex8 = arr.IndexOf(smallestEven8);\n\
    \        if (smallestIndex8 == -1 || smallestEven8 % 2 == 0) {\n            result.Add(smallestEven8);\n\
    \            return result;\n        }\n        long smallestEven9 = arr.Min(x\
    \ => x % 2 == 0);\n        long smallestIndex9 = arr.IndexOf(smallestEven9);\n\
    \        if (smallestIndex9 == -1 || smallestEven9 % 2 == 0) {\n            result.Add(smalle",
  "        List<long> result = new List<long>();\n        long smallestEvenValue =\
    \ arr.Min();\n        long smallestIndex = 0;\n        long smallestIndexValue\
    \ = 0;\n        bool isSmallestEvenValue = true;\n        bool isSmallestIndex\
    \ = true;\n        foreach (long n in arr) {\n            if (n % 2 == 0) {\n\
    \                if (isSmallestEvenValue) {\n                    smallestEvenValue\
    \ = n;\n                    isSmallestEvenValue = false;\n                }\n\
    \                if (isSmallestIndex) {\n                    smallestIndex = n;\n\
    \                    isSmallestIndex = false;\n                }\n           \
    \ } else {\n                if (isSmallestEvenValue) {\n                    smallestEvenValue\
    \ = n;\n                    isSmallestEvenValue = true;\n                }\n \
    \               if (isSmallestIndex) {\n                    smallestIndex = n;\n\
    \                    isSmallestIndex = true;\n                }\n            }\n\
    \        }\n        if (smallestEvenValue == 0) {\n            return result;\n\
    \        }\n        if (smallestIndex == 0) {\n            result.Add(smallestEvenValue);\n\
    \            return result;\n        }\n        if (smallestIndexValue == 0) {\n\
    \            result.Add(smallestIndex);\n            return result;\n        }\n\
    \        if (smallestIndexValue < smallestIndex) {\n            result.Add(smallestIndex);\n\
    \            result.Add(smallestIndexValue);\n            return result;\n   \
    \     }\n        result.Add(smallestEvenValue);\n        result.Add(smallestIndex);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallestEven = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEven);\n\
    \        if (smallestIndex == -1) {\n            return result;\n        }\n \
    \       long smallestEvenValue = arr[smallestIndex];\n        if (smallestEven\
    \ % 2 == 0) {\n            smallestEvenValue += 1;\n        }\n        if (smallestEvenValue\
    \ % 2 == 0) {\n            result.Add(smallestEvenValue);\n        }\n       \
    \ if (smallestEvenValue % 2 != 0) {\n            int index = smallestIndex + 1;\n\
    \            while (index != arr.Count && arr[index] % 2 != 0) {\n           \
    \     index++;\n            }\n            result.Add(smallestEvenValue, index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEven = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEven);\n\
    \        if (smallestIndex == -1) {\n            return result;\n        }\n \
    \       long smallestEvenValue = arr[smallestIndex];\n        bool isEven = true;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] != smallestEvenValue)\
    \ {\n                isEven = false;\n                break;\n            }\n\
    \        }\n        if (isEven) {\n            result.Add(smallestEvenValue);\n\
    \            result.Add(smallestIndex);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long smallest_value = arr.Min();\n\
    \        long smallest_index = arr.IndexOf(smallest_value);\n        long smallest_even_value\
    \ = smallest_value % 2 == 0 ? smallest_value : smallest_value - 1;\n        long\
    \ smallest_even_val = smallest_even_value % 2 == 0 ? smallest_even_value : smallest_even_value\
    \ - 1;\n        bool found = false;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] == smallest_value) {\n                found = true;\n\
    \                break;\n            }\n        }\n        if (found) {\n    \
    \        result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        } else {\n            for (int i = 0; i < arr.Count; i++) {\n       \
    \         if (arr[i] == smallest_even_value) {\n                    result.Add(smallest_value);\n\
    \                    result.Add(smallest_index);\n                    break;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   List<long> result = new List<long>();\n        long smallest_value = 0;\n\
    \        long smallest_index = 0;\n        long smallest_even_value = 0;\n   \
    \     long smallest_even_node = 0;\n        long smallest_even_node_index = 0;\n\
    \        foreach (long n in arr) {\n            if (n % 2 == 0) {\n          \
    \      if (smallest_even_value == 0) {\n                    smallest_even_value\
    \ = n;\n                    smallest_even_node = n;\n                    smallest_even_node_index\
    \ = arr.IndexOf(n);\n                } else if (smallest_even_value == n) {\n\
    \                    smallest_even_node = n;\n                    smallest_even_node_index\
    \ = arr.IndexOf(n);\n                }\n            } else {\n               \
    \ if (smallest_value == 0) {\n                    smallest_value = n;\n      \
    \              smallest_index = arr.IndexOf(n);\n                } else if (smallest_value\
    \ == n) {\n                    smallest_index = arr.IndexOf(n);\n            \
    \    }\n            }\n        }\n        if (smallest_even_value == 0) {\n  \
    \          result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        } else if (smallest_even_value == smallest_value) {\n            result.Add(smallest_even_node);\n\
    \            result.Add(smallest_even_node_index);\n        } else {\n       \
    \     result.Add(smallest_value);\n            result.Add(smallest_index);\n \
    \       }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long minValue = arr.Min();\n        long minIndex = 0;\n        long\
    \ minEvenValue = minValue % 2 == 0 ? minValue : minValue - 1;\n        long minEvenIndex\
    \ = 0;\n        foreach (long n in arr) {\n            if (n % 2 == 0) {\n   \
    \             if (minEvenValue < n) {\n                    minEvenValue = n;\n\
    \                    minEvenIndex = minIndex;\n                }\n           \
    \     minIndex++;\n            }\n        }\n        result.Add(minEvenValue);\n\
    \        result.Add(minEvenIndex);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallestEven = arr.Min();\n       \
    \ long smallestIndex = arr.IndexOf(smallestEven);\n        bool foundSmallestEven\
    \ = false;\n        foreach (long n in arr) {\n            if (n % 2 == 0) {\n\
    \                if (smallestEven == n) {\n                    foundSmallestEven\
    \ = true;\n                }\n                else {\n                    smallestEven\
    \ = n;\n                    smallestIndex = arr.IndexOf(n);\n                }\n\
    \            }\n        }\n        if (foundSmallestEven) {\n            result.Add(smallestEven);\n\
    \            result.Add(smallestIndex);\n        }\n        else {\n         \
    \   result.Add(smallestEven);\n            result.Add(-1);\n        }\n      \
    \  return result;", "        List<long> result = new List<long>();\n        long\
    \ smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n        bool\
    \ foundSmallestEvenValue = false;\n        bool foundSmallestIndex = false;\n\
    \        foreach (long n in arr) {\n            if (n % 2 == 0) {\n          \
    \      if (!foundSmallestEvenValue) {\n                    smallestEvenValue =\
    \ n;\n                    foundSmallestEvenValue = true;\n                }\n\
    \                if (n == smallestEvenValue) {\n                    foundSmallestIndex\
    \ = true;\n                }\n            }\n            else {\n            \
    \    if (!foundSmallestIndex) {\n                    smallestIndex = n;\n    \
    \                foundSmallestIndex = true;\n                }\n             \
    \   if (n == smallestIndex) {\n                    result.Add(smallestEvenValue);\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   List<long> result = new List<long>();\n        long smallest_value = 0;\n\
    \        long smallest_index = 0;\n        bool found = false;\n        foreach\
    \ (long n in arr) {\n            if (n % 2 == 0) {\n                found = true;\n\
    \                smallest_value = n;\n                smallest_index = arr.IndexOf(n);\n\
    \            }\n        }\n        if (found) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallestEvenValue =\
    \ arr.Min();\n        long smallestIndex = 0;\n        long currentSmallestEvenValue\
    \ = smallestEvenValue;\n        long currentSmallestIndex = smallestIndex;\n \
    \       bool isSmallestEvenValueFound = false;\n        bool isSmallestIndexFound\
    \ = false;\n        for (int i = 0; i < arr.Count; i++) {\n            long value\
    \ = arr[i];\n            if (isSmallestEvenValueFound == false && isSmallestIndexFound\
    \ == false) {\n                if (value % 2 == 0) {\n                    currentSmallestEvenValue\
    \ = value;\n                    currentSmallestIndex = i;\n                  \
    \  isSmallestEvenValueFound = true;\n                }\n            } else if\
    \ (isSmallestEvenValueFound == true && isSmallestIndexFound == false) {\n    \
    \            if (value % 2 == 0) {\n                    currentSmallestEvenValue\
    \ = value;\n                    currentSmallestIndex = i;\n                  \
    \  isSmallestEvenValueFound = true;\n                    isSmallestIndexFound\
    \ = true;\n                }\n            } else if (isSmallestEvenValueFound\
    \ == true && isSmallestIndexFound == true) {\n                if (value % 2 ==\
    \ 0) {\n                    if (value < currentSmallestEvenValue) {\n        \
    \                currentSmallestEvenValue = value;\n                        currentSmallestIndex\
    \ = i;\n                        isSmallestEvenValueFound = true;\n           \
    \             isSmallestIndexFound = true;\n                    }\n          \
    \      }\n            }\n        }\n        result.Add(currentSmallestEvenValue);\n\
    \        result.Add(currentSmallestIndex);\n        return result;", "       \
    \ List<long> result = new List<long>();\n        long smallestEven = arr.Min();\n\
    \        long smallestIndex = arr.IndexOf(smallestEven);\n        bool isEven\
    \ = smallestEven % 2 == 0;\n        long smallestValue = 0;\n        foreach (long\
    \ n in arr) {\n            if (isEven) {\n                if (n < smallestEven)\
    \ {\n                    smallestEven = n;\n                    smallestIndex\
    \ = arr.IndexOf(n);\n                }\n            } else {\n               \
    \ if (n < smallestEven) {\n                    smallestEven = n;\n           \
    \         smallestValue = n;\n                }\n            }\n        }\n  \
    \      result.Add(smallestValue);\n        result.Add(smallestIndex);\n      \
    \  return result;", "        List<long> result = new List<long>();\n        long\
    \ smallestEven = arr.Min();\n        int smallestIndex = arr.FindIndex(x => x\
    \ == smallestEven);\n        if (smallestIndex == -1) {\n            return result;\n\
    \        }\n        bool isEven = true;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                isEven = false;\n\
    \                break;\n            }\n        }\n        if (isEven) {\n   \
    \         result.Add(smallestEven);\n            result.Add(smallestIndex);\n\
    \        } else {\n            int smallestIndex2 = arr.FindIndex(x => x == smallestEven);\n\
    \            if (smallestIndex2 != -1) {\n                result.Add(smallestEven);\n\
    \                result.Add(smallestIndex2);\n            } else {\n         \
    \       result.Add(smallestEven);\n                result.Add(smallestIndex);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long smallestEvenValue = arr.Min();\n        long\
    \ smallestIndex = 0;\n        bool foundSmallestEvenValue = false;\n        bool\
    \ foundSmallestIndex = false;\n        foreach (long i in arr) {\n           \
    \ if (i % 2 == 0) {\n                if (!foundSmallestEvenValue) {\n        \
    \            foundSmallestEvenValue = true;\n                    smallestEvenValue\
    \ = i;\n                }\n                foundSmallestIndex = true;\n      \
    \          smallestIndex = i;\n            }\n        }\n        if (foundSmallestEvenValue)\
    \ {\n            result.Add(smallestEvenValue);\n            result.Add(smallestIndex);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEven = arr.Min();\n        int smallestIndex = arr.IndexOf(smallestEven);\n\
    \        bool isEven = smallestEven % 2 == 0;\n        bool isSmallestEven = smallestIndex\
    \ == 0;\n        if (isEven && isSmallestEven) {\n            result.Add(smallestEven);\n\
    \            result.Add(smallestIndex);\n            return result;\n        }\n\
    \        int smallestEvenIndex = -1;\n        int smallestEvenValue = 0;\n   \
    \     for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0)\
    \ {\n                if (smallestEvenIndex == -1 || arr[i] < smallestEvenValue)\
    \ {\n                    smallestEvenIndex = i;\n                    smallestEvenValue\
    \ = arr[i];\n                }\n            }\n        }\n        if (smallestEvenIndex\
    \ != -1) {\n            result.Add(smallestEvenValue);\n            result.Add(smallestEvenIndex);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEven = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEven);\n\
    \        bool foundSmallestEven = false;\n        foreach (long i in arr) {\n\
    \            if (i % 2 == 0) {\n                if (smallestEven == i) {\n   \
    \                 foundSmallestEven = true;\n                    break;\n    \
    \            }\n                if (foundSmallestEven) {\n                   \
    \ result.Add(smallestEven);\n                    result.Add(smallestIndex);\n\
    \                    break;\n                }\n                smallestEven =\
    \ i;\n                smallestIndex = arr.IndexOf(i);\n            }\n       \
    \ }\n        return result.Count > 0 ? result : new List<long>();", "        List<long>\
    \ result = new List<long>();\n        long smallest_value = arr.Min();\n     \
    \   long smallest_index = 0;\n        bool has_even = false;\n        foreach\
    \ (long n in arr) {\n            if (n % 2 == 0) {\n                has_even =\
    \ true;\n            }\n            if (smallest_value == n && smallest_index\
    \ == 0 && !has_even) {\n                result.Add(n);\n                smallest_index\
    \ = arr.IndexOf(n);\n            }\n            if (smallest_value == n && smallest_index\
    \ != 0 && !has_even) {\n                result.Add(smallest_index);\n        \
    \        smallest_index = arr.IndexOf(n);\n            }\n            if (smallest_value\
    \ != n && smallest_index != 0 && !has_even) {\n                result.Add(smallest_index);\n\
    \                smallest_index = arr.IndexOf(n);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallestEvenValue = arr.Min();\n        int smallestIndex = 0;\n  \
    \      for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0)\
    \ {\n                if (smallestEvenValue % 2 == 0) {\n                    smallestEvenValue\
    \ = arr[i];\n                    smallestIndex = i;\n                }\n     \
    \       }\n        }\n        result.Add(smallestEvenValue);\n        result.Add(smallestIndex);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long minValue = arr.Min();\n        long minIndex = 0;\n        long minEvenValue\
    \ = minValue % 2 == 0 ? minValue : minValue + 1;\n        long minEvenIndex =\
    \ 0;\n        foreach (long i in arr) {\n            if (i % 2 == 0) {\n     \
    \           if (minEvenValue > i) {\n                    minEvenValue = i;\n \
    \                   minEvenIndex = minIndex;\n                }\n            }\
    \ else {\n                if (minEvenValue < i) {\n                    minEvenValue\
    \ = i;\n                    minEvenIndex = minIndex;\n                }\n    \
    \        }\n            if (minEvenValue == i) {\n                minIndex++;\n\
    \            }\n        }\n        result.Add(minEvenValue);\n        result.Add(minEvenIndex);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n \
    \       bool foundSmallestEvenValue = false;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                if (!foundSmallestEvenValue)\
    \ {\n                    smallestEvenValue = arr[i];\n                    smallestIndex\
    \ = i;\n                    foundSmallestEvenValue = true;\n                }\n\
    \                else if (arr[i] < smallestEvenValue) {\n                    smallestEvenValue\
    \ = arr[i];\n                    smallestIndex = i;\n                }\n     \
    \       }\n        }\n        if (smallestEvenValue == 0) {\n            return\
    \ new List<long>();\n        }\n        result.Add(smallestEvenValue);\n     \
    \   result.Add(smallestIndex);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long smallest_value = arr.Min();\n        long\
    \ smallest_index = 0;\n        long smallest_even_value = 0;\n        bool found\
    \ = false;\n        foreach (long n in arr) {\n            if (n % 2 == 0) {\n\
    \                smallest_even_value = n;\n                found = true;\n   \
    \             break;\n            }\n        }\n        if (found) {\n       \
    \     smallest_value = smallest_even_value;\n            smallest_index = arr.IndexOf(smallest_even_value);\n\
    \        }\n        if (smallest_value == 0) {\n            return result;\n \
    \       }\n        List<long> result2 = new List<long>();\n        foreach (long\
    \ n in arr) {\n            if (n % 2 == 0) {\n                if (smallest_value\
    \ == n) {\n                    result2.Add(smallest_value);\n                \
    \    result2.Add(smallest_index);\n                } else {\n                \
    \    result2.Add(n);\n                }\n            }\n        }\n        if\
    \ (result2.Count > 0) {\n            result.Add(smallest_value);\n           \
    \ result.Add(smallest_index);\n        }\n        return result;", "        long\
    \ smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n        List<long>\
    \ result = new List<long>();\n        foreach (long n in arr) {\n            if\
    \ (n % 2 == 0) {\n                if (smallestEvenValue % 2 == 0) {\n        \
    \            if (n < smallestEvenValue) {\n                        smallestEvenValue\
    \ = n;\n                        smallestIndex = arr.IndexOf(n);\n            \
    \        }\n                } else {\n                    if (n < smallestEvenValue)\
    \ {\n                        smallestEvenValue = n;\n                        smallestIndex\
    \ = arr.IndexOf(n);\n                    }\n                }\n            }\n\
    \        }\n        if (smallestEvenValue % 2 == 0) {\n            result.Add(smallestEvenValue);\n\
    \            result.Add(smallestIndex);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long minValue = arr.Min();\n\
    \        long minIndex = 0;\n        long minEvenValue = minValue % 2 == 0 ? minValue\
    \ : minValue / 2;\n        foreach (long n in arr) {\n            if (n % 2 ==\
    \ 0) {\n                if (minValue < minEvenValue) {\n                    minValue\
    \ = n;\n                    minIndex = arr.IndexOf(n);\n                    minEvenValue\
    \ = n % 2 == 0 ? n : n / 2;\n                }\n            }\n        }\n   \
    \     result.Add(minValue);\n        result.Add(minIndex);\n        return result;",
  "        List<long> result = new List<long>();\n        long smallestEvenValue =\
    \ arr.Min();\n        int smallestIndex = 0;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                if (smallestEvenValue\
    \ % 2 == 0) {\n                    smallestEvenValue = arr[i];\n             \
    \       smallestIndex = i;\n                }\n            }\n        }\n    \
    \    result.Add(smallestEvenValue);\n        result.Add(smallestIndex);\n    \
    \    return result;", "        long smalest_value = arr.Min();\n        List<long>\
    \ result = new List<long>();\n        long smallest_index = -1;\n        foreach\
    \ (long n in arr) {\n            if (n % 2 == 0) {\n                if (smallest_index\
    \ == -1) {\n                    smallest_index = n;\n                    smalest_value\
    \ = n;\n                }\n                else if (smallest_index != n) {\n \
    \                   if (smalest_value < n) {\n                        smalest_value\
    \ = n;\n                        smallest_index = n;\n                    }\n \
    \               }\n            }\n        }\n        result.Add(smalest_value);\n\
    \        result.Add(smallest_index);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallestEven = arr.Min();\n       \
    \ int smallestIndex = arr.IndexOf(smallestEven);\n        if (smallestIndex ==\
    \ -1) {\n            return result;\n        }\n        bool isEven = true;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0) {\n                isEven = false;\n                break;\n            }\n\
    \        }\n        if (isEven) {\n            result.Add(smallestEven);\n   \
    \         result.Add(smallestIndex);\n        } else {\n            int index\
    \ = arr.IndexOf(smallestEven);\n            while (index != -1) {\n          \
    \      result.Add(smallestEven);\n                result.Add(index);\n       \
    \         index = arr.IndexOf(smallestEven, index + 1);\n            }\n     \
    \   }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEven = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEven);\n\
    \        if (smallestIndex == -1) {\n            return result;\n        }\n \
    \       bool isEven = true;\n        foreach (long i in arr) {\n            if\
    \ (i % 2 == 0) {\n                isEven = false;\n            }\n           \
    \ if (isEven) {\n                result.Add(i);\n            }\n        }\n  \
    \      return result;", "        List<long> result = new List<long>();\n     \
    \   long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n   \
    \     bool foundSmallestEvenValue = false;\n        bool foundSmallestIndex =\
    \ false;\n        foreach (long node in arr) {\n            if (node == smallestEvenValue)\
    \ {\n                foundSmallestEvenValue = true;\n                foundSmallestIndex\
    \ = true;\n            }\n            if (foundSmallestEvenValue && foundSmallestIndex)\
    \ {\n                result.Add(smallestEvenValue);\n                result.Add(smallestIndex);\n\
    \                break;\n            }\n            if (node < smallestEvenValue)\
    \ {\n                smallestEvenValue = node;\n                smallestIndex\
    \ = arr.IndexOf(node);\n            }\n        }\n        if (result.Count ==\
    \ 0) {\n            return new List<long>();\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallestEven = arr.Min();\n\
    \        long smallestIndex = arr.IndexOf(smallestEven);\n        bool foundSmallestEven\
    \ = false;\n        foreach (long i in arr) {\n            if (i % 2 == 0) {\n\
    \                foundSmallestEven = true;\n                if (smallestEven <\
    \ i) {\n                    smallestEven = i;\n                    smallestIndex\
    \ = arr.IndexOf(i);\n                }\n            }\n        }\n        if (foundSmallestEven)\
    \ {\n            result.Add(smallestEven);\n            result.Add(smallestIndex);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEvenValue = arr.Min();\n        int smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0) {\n                if (smallestEvenValue % 2 == 0) {\n                  \
    \  smallestEvenValue = arr[i];\n                    smallestIndex = i;\n     \
    \           }\n            }\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestIndex);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long minValue = arr.Min();\n        long\
    \ minIndex = 0;\n        long minEvenValue = minValue % 2 == 0 ? minValue : minValue\
    \ + 1;\n        long minEvenIndex = 0;\n        foreach (long value in arr) {\n\
    \            if (value % 2 == 0) {\n                if (value < minEvenValue)\
    \ {\n                    minEvenValue = value;\n                    minEvenIndex\
    \ = minIndex;\n                }\n                if (value < minValue) {\n  \
    \                  minValue = value;\n                    minIndex = arr.IndexOf(value);\n\
    \                }\n            }\n        }\n        result.Add(minEvenValue);\n\
    \        result.Add(minEvenIndex);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallestEvenValue = arr.Min();\n  \
    \      long smallestIndex = 0;\n        bool foundSmallestEvenValue = false;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] < smallestEvenValue)\
    \ {\n                smallestEvenValue = arr[i];\n                smallestIndex\
    \ = i;\n                foundSmallestEvenValue = true;\n            }\n      \
    \  }\n        if (foundSmallestEvenValue) {\n            result.Add(smallestEvenValue);\n\
    \            result.Add(smallestIndex);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long smallest_value = 0;\n\
    \        int smallest_index = 0;\n        long smallest_even_value = 0;\n    \
    \    int smallest_even_index = 0;\n        bool found = false;\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n         \
    \       found = true;\n                smallest_value = arr[i];\n            \
    \    smallest_index = i;\n                smallest_even_value = arr[i] / 2;\n\
    \                smallest_even_index = i;\n            }\n        }\n        if\
    \ (!found) {\n            return result;\n        }\n        for (int i = 0; i\
    \ < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n                if\
    \ (arr[i] < smallest_value) {\n                    smallest_value = arr[i];\n\
    \                    smallest_index = i;\n                    smallest_even_value\
    \ = arr[i] / 2;\n                    smallest_even_index = i;\n              \
    \  }\n            }\n        }\n        result.Add(smallest_value);\n        result.Add(smallest_index);\n\
    \        result.Add(smallest_even_value);\n        result.Add(smallest_even_index);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n \
    \       bool isSmallestEvenValue = false;\n        bool isSmallestIndex = false;\n\
    \        foreach (long n in arr) {\n            if (n % 2 == 0) {\n          \
    \      if (smallestEvenValue % 2 == 0) {\n                    isSmallestEvenValue\
    \ = true;\n                    smallestEvenValue = n;\n                    smallestIndex\
    \ = arr.IndexOf(n);\n                }\n                else {\n             \
    \       isSmallestEvenValue = false;\n                }\n            }\n     \
    \       else {\n                if (smallestEvenValue % 2 != 0) {\n          \
    \          isSmallestIndex = true;\n                    smallestEvenValue = n;\n\
    \                    smallestIndex = arr.IndexOf(n);\n                }\n    \
    \            else {\n                    isSmallestIndex = false;\n          \
    \      }\n            }\n        }\n        if (isSmallestEvenValue) {\n     \
    \       result.Add(smallestEvenValue);\n            result.Add(smallestIndex);\n\
    \        }\n        else if (isSmallestIndex) {\n            result.Add(smallestIndex);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_value = arr.Min();\n        long smallest_index = 0;\n\
    \        long smallest_even_value = 0;\n        foreach (long n in arr) {\n  \
    \          if (n % 2 == 0) {\n                if (smallest_even_value == 0) {\n\
    \                    smallest_even_value = n;\n                    smallest_index\
    \ = n;\n                } else {\n                    if (n < smallest_even_value)\
    \ {\n                        smallest_even_value = n;\n                      \
    \  smallest_index = n;\n                    }\n                }\n           \
    \ }\n        }\n        result.Add(smallest_even_value);\n        result.Add(smallest_index);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long minValue = arr.Min();\n        long minIndex = 0;\n        long minEvenValue\
    \ = minValue / 2;\n        bool isEven = true;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                isEven = true;\n\
    \            } else {\n                isEven = false;\n            }\n      \
    \      if (isEven == true && arr[i] < minEvenValue) {\n                minEvenValue\
    \ = arr[i];\n                minIndex = i;\n            }\n        }\n       \
    \ result.Add(minEvenValue);\n        result.Add(minIndex);\n        return result;",
  "        List<long> result = new List<long>();\n        long smalest_value = arr.Min();\n\
    \        int smalest_index = -1;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] < smalest_value) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \      if (smalest_index != -1) {\n            result.Add(smalest_value);\n  \
    \          result.Add(smalest_index);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long smallestEvenValue\
    \ = arr.Min();\n        int smallestIndex = 0;\n        foreach (long value in\
    \ arr) {\n            if (value % 2 == 0) {\n                if (smallestEvenValue\
    \ % 2 == 0) {\n                    if (value < smallestEvenValue) {\n        \
    \                smallestEvenValue = value;\n                        smallestIndex\
    \ = arr.IndexOf(value);\n                    }\n                } else {\n   \
    \                 if (value < smallestEvenValue) {\n                        smallestEvenValue\
    \ = value;\n                        smallestIndex = arr.IndexOf(value);\n    \
    \                }\n                }\n            }\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestIndex);\n        return result;", "        long smallestEven\
    \ = arr.Min();\n        List<long> result = new List<long>();\n        long smallestIndex\
    \ = 0;\n        foreach (long n in arr) {\n            if (n % 2 == 0) {\n   \
    \             if (smallestEven > n) {\n                    smallestEven = n;\n\
    \                    smallestIndex = arr.IndexOf(n);\n                }\n    \
    \        }\n        }\n        result.Add(smallestEven);\n        result.Add(smallestIndex);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallestEven = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEven);\n\
    \        long smallestValue = smallestEven;\n        foreach (var item in arr.Where((x,\
    \ i) => x % 2 == 0)) {\n            if (item < smallestEven) {\n             \
    \   smallestEven = item;\n                smallestIndex = i;\n               \
    \ smallestValue = item;\n            }\n        }\n        result.Add(smallestEven);\n\
    \        result.Add(smallestIndex);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallestEvenValue = arr.Min();\n  \
    \      int smallestIndex = 0;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] % 2 == 0) {\n                if (smallestEvenValue % 2\
    \ == 0) {\n                    smallestEvenValue = arr[i];\n                 \
    \   smallestIndex = i;\n                }\n            }\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestIndex);\n        return result;", "        long smalest_value\
    \ = 0;\n        long smalest_index = 0;\n        List<long> result = new List<long>();\n\
    \        foreach (long n in arr) {\n            if (n % 2 == 0) {\n          \
    \      if (smalest_value == 0) {\n                    smalest_value = n;\n   \
    \                 smalest_index = arr.IndexOf(n);\n                } else if (smalest_value\
    \ < n) {\n                    smalest_value = n;\n                    smalest_index\
    \ = arr.IndexOf(n);\n                }\n            }\n        }\n        if (smalest_value\
    \ == 0) {\n            return new List<long>();\n        }\n        result.Add(smalest_value);\n\
    \        result.Add(smalest_index);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallestEvenValue = arr.Min();\n  \
    \      long smallestIndex = 0;\n        bool foundSmallestEvenValue = false;\n\
    \        bool foundSmallestIndex = false;\n        foreach (long value in arr)\
    \ {\n            if (value % 2 == 0) {\n                if (smallestEvenValue\
    \ < value) {\n                    smallestEvenValue = value;\n               \
    \     foundSmallestEvenValue = true;\n                }\n                if (smallestIndex\
    \ < value) {\n                    smallestIndex = value;\n                   \
    \ foundSmallestIndex = true;\n                }\n            }\n        }\n  \
    \      if (foundSmallestEvenValue) {\n            result.Add(smallestEvenValue);\n\
    \            result.Add(smallestIndex);\n        }\n        if (foundSmallestIndex)\
    \ {\n            result.Add(smallestIndex);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallestEvenValue =\
    \ arr.Min();\n        long smallestIndex = 0;\n        long smallestEvenValueIndex\
    \ = 0;\n        foreach (long i in arr) {\n            if (i % 2 == 0) {\n   \
    \             if (smallestEvenValue > i) {\n                    smallestEvenValue\
    \ = i;\n                    smallestEvenValueIndex = i;\n                }\n \
    \               else {\n                    smallestEvenValueIndex = i;\n    \
    \            }\n            }\n            else {\n                if (smallestEvenValue\
    \ > i) {\n                    smallestEvenValue = i;\n                    smallestIndex\
    \ = i;\n                }\n                else {\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestEvenValueIndex);\n        return result;", "     \
    \   List<long> result = new List<long>();\n        long smallestEven = arr.Min();\n\
    \        long smallestIndex = arr.IndexOf(smallestEven);\n        if (smallestIndex\
    \ != -1) {\n            smallestEven = arr[smallestIndex];\n        }\n      \
    \  foreach (long n in arr) {\n            if (n % 2 == 0) {\n                if\
    \ (smallestEven < n) {\n                    smallestEven = n;\n              \
    \      smallestIndex = arr.IndexOf(n);\n                }\n            }\n   \
    \     }\n        if (smallestIndex != -1) {\n            result.Add(smallestEven);\n\
    \            result.Add(smallestIndex);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long smallestEven = arr.Min();\n\
    \        long smallestIndex = arr.IndexOf(smallestEven);\n        if (smallestIndex\
    \ == -1) {\n            return result;\n        }\n        long smallestEvenValue\
    \ = arr[smallestIndex];\n        long smallestEvenIndex = 0;\n        foreach\
    \ (long value in arr) {\n            if (value % 2 == 0) {\n                if\
    \ (value < smallestEvenValue) {\n                    smallestEvenValue = value;\n\
    \                    smallestEvenIndex = smallestIndex;\n                }\n \
    \           }\n        }\n        result.Add(smallestEvenValue);\n        result.Add(smallestEvenIndex);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n \
    \       bool isSmallestEvenValueFound = false;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                if (!isSmallestEvenValueFound)\
    \ {\n                    smallestEvenValue = arr[i];\n                    smallestIndex\
    \ = i;\n                    isSmallestEvenValueFound = true;\n               \
    \ }\n                else {\n                    if (arr[i] < smallestEvenValue)\
    \ {\n                        smallestEvenValue = arr[i];\n                   \
    \     smallestIndex = i;\n                    }\n                }\n         \
    \   }\n        }\n        result.Add(smallestEvenValue);\n        result.Add(smallestIndex);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallestEven = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEven);\n\
    \        foreach (long n in arr) {\n            if (n % 2 == 0) {\n          \
    \      if (smallestEven < n) {\n                    smallestEven = n;\n      \
    \              smallestIndex = arr.IndexOf(n);\n                }\n          \
    \  }\n        }\n        result.Add(smallestEven);\n        result.Add(smallestIndex);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n \
    \       foreach (long i in arr) {\n            if (i % 2 == 0) {\n           \
    \     if (smallestEvenValue < i) {\n                    smallestEvenValue = i;\n\
    \                    smallestIndex = i;\n                }\n            }\n  \
    \      }\n        result.Add(smallestEvenValue);\n        result.Add(smallestIndex);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallestEven = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEven);\n\
    \        bool foundSmallestEven = false;\n        bool foundSmallestIndex = false;\n\
    \        long currentSmallestEven = smallestEven;\n        long currentSmallestIndex\
    \ = smallestIndex;\n        long currentSmallestEvenIndex = currentSmallestEven;\n\
    \        long currentSmallestIndexIndex = currentSmallestIndex;\n        foreach\
    \ (long i in arr) {\n            if (i % 2 == 0) {\n                if (foundSmallestEven)\
    \ {\n                    if (currentSmallestEvenIndex < currentSmallestEven) {\n\
    \                        currentSmallestEvenIndex = currentSmallestEven;\n   \
    \                     currentSmallestEven = i;\n                    }\n      \
    \          }\n                else {\n                    currentSmallestEven\
    \ = i;\n                    foundSmallestEven = true;\n                }\n   \
    \         }\n            else {\n                if (foundSmallestIndex) {\n \
    \                   if (currentSmallestIndexIndex < currentSmallestIndex) {\n\
    \                        currentSmallestIndexIndex = currentSmallestIndex;\n \
    \                       currentSmallestIndex = i;\n                    }\n   \
    \             }\n                else {\n                    currentSmallestIndex\
    \ = i;\n                    foundSmallestIndex = true;\n                }\n  \
    \          }\n        }\n        result.Add(smallestEven);\n        result.Add(smallestIndex);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallestEven = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEven);\n\
    \        long smallestValue = 0;\n        bool isEven = true;\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n         \
    \       isEven = false;\n            }\n            if (isEven) {\n          \
    \      smallestEven = arr[i];\n                smallestIndex = i;\n          \
    \      smallestValue = arr[i];\n            }\n        }\n        result.Add(smallestEven);\n\
    \        result.Add(smallestIndex);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallest_value = arr.Min();\n     \
    \   long smallest_index = 0;\n        long smallest_even_value = 0;\n        long\
    \ smallest_even_count = 0;\n        foreach (long value in arr) {\n          \
    \  if (value % 2 == 0) {\n                if (smallest_even_count < value) {\n\
    \                    smallest_even_value = value;\n                    smallest_even_count\
    \ = value;\n                }\n                else {\n                    if\
    \ (smallest_even_value == value) {\n                        smallest_even_count++;\n\
    \                    }\n                }\n            }\n            else {\n\
    \                if (smallest_even_count == value) {\n                    smallest_even_count++;\n\
    \                }\n            }\n        }\n        if (smallest_even_count\
    \ == 0) {\n            return result;\n        }\n        smallest_value = smallest_even_value\
    \ / 2;\n        smallest_index = arr.IndexOf(smallest_value);\n        result.Add(smallest_value);\n\
    \        result.Add(smallest_index);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallestEven = arr.Min();\n       \
    \ long smallestIndex = arr.IndexOf(smallestEven);\n        bool foundSmallestEven\
    \ = false;\n        bool foundSmallestIndex = false;\n        foreach (long n\
    \ in arr) {\n            if (n % 2 == 0) {\n                if (smallestEven ==\
    \ n) {\n                    foundSmallestEven = true;\n                }\n   \
    \             else {\n                    foundSmallestEven = false;\n       \
    \             smallestEven = n;\n                    smallestIndex = arr.IndexOf(n);\n\
    \                }\n            }\n            else {\n                if (smallestEven\
    \ == n) {\n                    foundSmallestIndex = true;\n                }\n\
    \                else {\n                    foundSmallestIndex = false;\n   \
    \                 smallestEven = n;\n                    smallestIndex = arr.IndexOf(n);\n\
    \                }\n            }\n        }\n        if (foundSmallestEven) {\n\
    \            result.Add(smallestEven);\n            result.Add(smallestIndex);\n\
    \        }\n        else if (foundSmallestIndex) {\n            result.Add(smallestEven);\n\
    \            result.Add(smallestIndex);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long smallestEvenValue\
    \ = arr.Min();\n        long smallestIndex = 0;\n        foreach (long value in\
    \ arr) {\n            if (value % 2 == 0) {\n                if (smallestEvenValue\
    \ < value) {\n                    smallestEvenValue = value;\n               \
    \     smallestIndex = arr.IndexOf(value);\n                }\n            }\n\
    \        }\n        result.Add(smallestEvenValue);\n        result.Add(smallestIndex);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallestEven = arr.Min();\n        int smallestIndex = arr.FindIndex(x\
    \ => x == smallestEven);\n        if (smallestIndex == -1) {\n            return\
    \ result;\n        }\n        long smallestValue = arr[smallestIndex];\n     \
    \   bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n     \
    \       if (arr[i] == smallestEven) {\n                found = true;\n       \
    \         break;\n            }\n        }\n        if (found) {\n           \
    \ result.Add(smallestEven);\n            result.Add(smallestIndex);\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallestEvenValue = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEvenValue);\n\
    \        if (smallestEvenValue % 2 == 0) {\n            smallestEvenValue++;\n\
    \        }\n        if (smallestIndex != -1) {\n            result.Add(smallestEvenValue);\n\
    \            result.Add(smallestIndex);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long smallestEvenValue\
    \ = arr.Min();\n        long smallestIndex = 0;\n        long currentIndex = 0;\n\
    \        bool isSmallestEvenValue = true;\n        bool isSmallestIndex = true;\n\
    \        foreach (long i in arr) {\n            if (i % 2 == 0) {\n          \
    \      if (isSmallestEvenValue) {\n                    smallestEvenValue = i;\n\
    \                    isSmallestEvenValue = false;\n                }\n       \
    \         else {\n                    currentIndex = i;\n                    isSmallestIndex\
    \ = false;\n                }\n            }\n            else {\n           \
    \     if (isSmallestIndex) {\n                    smallestIndex = i;\n       \
    \             isSmallestIndex = false;\n                }\n            }\n   \
    \     }\n        result.Add(smallestEvenValue);\n        result.Add(smallestIndex);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n \
    \       bool foundSmallestEvenValue = false;\n        bool foundSmallestIndex\
    \ = false;\n        long currentSmallestEvenValue = smallestEvenValue;\n     \
    \   long currentSmallestIndex = smallestIndex;\n        foreach (long node in\
    \ arr) {\n            if (node == smallestEvenValue) {\n                foundSmallestEvenValue\
    \ = true;\n                currentSmallestEvenValue = node;\n                currentSmallestIndex\
    \ = smallestIndex;\n            }\n            if (foundSmallestEvenValue && node\
    \ == smallestIndex) {\n                foundSmallestIndex = true;\n          \
    \      currentSmallestIndex = node;\n            }\n            if (foundSmallestEvenValue\
    \ && foundSmallestIndex) {\n                result.Add(currentSmallestEvenValue);\n\
    \                result.Add(currentSmallestIndex);\n                foundSmallestEvenValue\
    \ = false;\n                foundSmallestIndex = false;\n            }\n     \
    \   }\n        if (result.Count == 0) {\n            return new List<long>();\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEven = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEven);\n\
    \        bool foundSmallestEven = false;\n        long smallestValue = 0;\n  \
    \      foreach (long i in arr) {\n            if (i % 2 == 0) {\n            \
    \    if (foundSmallestEven) {\n                    result.Add(smallestValue);\n\
    \                    result.Add(smallestIndex);\n                    return result;\n\
    \                }\n                foundSmallestEven = true;\n              \
    \  smallestEven = i;\n                smallestValue = i;\n                smallestIndex\
    \ = arr.IndexOf(i);\n            }\n        }\n        if (foundSmallestEven)\
    \ {\n            result.Add(smallestValue);\n            result.Add(smallestIndex);\n\
    \            return result;\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallestEven = arr.Min();\n       \
    \ long smallestIndex = arr.IndexOf(smallestEven);\n        if (smallestIndex ==\
    \ -1) return result;\n        long smallestEvenValue = arr[smallestIndex];\n \
    \       bool isSmallestEvenValueEven = false;\n        bool isSmallestEvenValueOdd\
    \ = false;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ == smallestEvenValue) {\n                isSmallestEvenValueEven = true;\n \
    \           }\n            if (arr[i] % 2 == 0) {\n                isSmallestEvenValueOdd\
    \ = true;\n            }\n        }\n        if (isSmallestEvenValueEven) {\n\
    \            if (isSmallestEvenValueOdd) {\n                result.Add(smallestEvenValue);\n\
    \                result.Add(smallestIndex);\n            } else {\n          \
    \      result.Add(smallestEvenValue);\n                result.Add(smallestIndex);\n\
    \                result.Add(smallestIndex + 1);\n            }\n        } else\
    \ {\n            if (isSmallestEvenValueOdd) {\n                result.Add(smallestEvenValue);\n\
    \                result.Add(smallestIndex);\n                result.Add(smallestIndex\
    \ + 1);\n            } else {\n                result.Add(smallestEvenValue);\n\
    \                result.Add(smallestIndex);\n            }\n        }\n      \
    \  return result;", "        List<long> result = new List<long>();\n        long\
    \ smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n        long\
    \ currentEvenValue = smallestEvenValue;\n        long currentIndex = -1;\n   \
    \     foreach (long value in arr) {\n            if (value % 2 == 0) {\n     \
    \           if (currentEvenValue < value) {\n                    currentEvenValue\
    \ = value;\n                    currentIndex = arr.IndexOf(value);\n         \
    \       }\n            }\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(currentIndex);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallestEven = arr.Min();\n       \
    \ long smallestIndex = arr.IndexOf(smallestEven);\n        bool isEven = smallestEven\
    \ % 2 == 0;\n        long smallestEvenValue = smallestEven / 2;\n        bool\
    \ isSmallestEvenValue = smallestEvenValue % 2 == 0;\n        bool isSmallestEven\
    \ = smallestEvenValue % 2 == 0;\n        bool isSmallestEvenIndex = smallestEvenValue\
    \ % 2 == 0;\n        bool isSmallestEvenIndexValue = smallestEvenValue % 2 ==\
    \ 0;\n        bool isSmallestEvenIndexValue2 = smallestEvenValue % 2 == 0;\n \
    \       bool isSmallestEvenIndexValue3 = smallestEvenValue % 2 == 0;\n       \
    \ bool isSmallestEvenIndexValue4 = smallestEvenValue % 2 == 0;\n        bool isSmallestEvenIndexValue5\
    \ = smallestEvenValue % 2 == 0;\n        bool isSmallestEvenIndexValue6 = smallestEvenValue\
    \ % 2 == 0;\n        bool isSmallestEvenIndexValue7 = smallestEvenValue % 2 ==\
    \ 0;\n        bool isSmallestEvenIndexValue8 = smallestEvenValue % 2 == 0;\n \
    \       bool isSmallestEvenIndexValue9 = smallestEvenValue % 2 == 0;\n       \
    \ bool isSmallestEvenIndexValue10 = smallestEvenValue % 2 == 0;\n        bool\
    \ isSmallestEvenIndexValue11 = smallestEvenValue % 2 == 0;\n        bool isSmallestEvenIndexValue12\
    \ = smallestEvenValue % 2 == 0;\n        bool isSmallestEvenIndexValue13 = smallestEvenValue\
    \ % 2 == 0;\n        bool isSmallestEvenIndexValue14 = smallestEvenValue % 2 ==\
    \ 0;\n        bool isSmallestEvenIndexValue15 = smallestEvenValue % 2 == 0;\n\
    \        bool isSmallestEvenIndexValue16 = smallestEvenValue % 2 == 0;\n     \
    \   bool isSmallestEvenIndexValue17 = smallestEvenValue % 2 == 0;\n        bool\
    \ isSmallestEvenIndexValue18 = smallestEvenValue % 2 == 0;\n        bool isSmallestEvenIndexValue19\
    \ = smallestEvenValue % 2 == 0;\n        bool isSmallestEvenIndexValue20 = smallestEvenValue\
    \ % 2 == 0;\n        bool isSmallestEvenIndexValue21 = smallestEvenValue % 2 ==\
    \ 0;\n        bool isSmallestEvenIndexValue22 = smallestEvenValue % 2 == 0;\n\
    \        bool ", "        List<long> result = new List<long>();\n        long\
    \ smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n        foreach\
    \ (long value in arr) {\n            if (value % 2 == 0) {\n                if\
    \ (smallestEvenValue < value) {\n                    smallestEvenValue = value;\n\
    \                    smallestIndex = arr.IndexOf(value);\n                }\n\
    \            }\n        }\n        if (smallestEvenValue == 0) {\n           \
    \ return new List<long>();\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestIndex);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smalest_value = arr.Min();\n      \
    \  long smalest_index = 0;\n        long smalest_even_value = 0;\n        long\
    \ smalest_even_index = 0;\n        bool foundSmallestEven = false;\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n    \
    \            if (smalest_value == 0) {\n                    smalest_value = arr[i];\n\
    \                    smalest_index = i;\n                    smalest_even_value\
    \ = arr[i] / 2;\n                    smalest_even_index = i;\n               \
    \     foundSmallestEven = true;\n                }\n                else if (smalest_value\
    \ == arr[i] / 2) {\n                    smalest_even_value = arr[i] / 2;\n   \
    \                 smalest_even_index = i;\n                }\n            }\n\
    \        }\n        if (foundSmallestEven) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_even_value);\n            result.Add(smalest_index);\n\
    \            result.Add(smalest_even_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smalest_value = 0;\n\
    \        long smalest_index = 0;\n        long smalest_even_value = 0;\n     \
    \   long smalest_even_index = 0;\n        foreach (long i in arr) {\n        \
    \    if (i % 2 == 0) {\n                smalest_even_value = i;\n            \
    \    smalest_even_index = i;\n            }\n            else {\n            \
    \    if (smalest_value < i) {\n                    smalest_value = i;\n      \
    \              smalest_index = i;\n                }\n            }\n        }\n\
    \        if (smalest_value == 0) {\n            return new List<long>();\n   \
    \     }\n        result.Add(smalest_value);\n        result.Add(smalest_index);\n\
    \        if (smalest_even_index < smalest_index) {\n            result.Add(smalest_even_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEven = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEven);\n\
    \        bool hasSmallestEven = smallestEven == arr.Min();\n        bool hasSmallestIndex\
    \ = smallestIndex != -1;\n        if (hasSmallestEven && hasSmallestIndex) {\n\
    \            result.Add(smallestEven);\n            result.Add(smallestIndex);\n\
    \        }\n        if (arr.Count == 0) {\n            return result;\n      \
    \  }\n        long largestEven = arr.Max();\n        long largestIndex = arr.IndexOf(largestEven);\n\
    \        bool hasLargestEven = largestEven == arr.Max();\n        bool hasLargestIndex\
    \ = largestIndex != -1;\n        if (hasLargestEven && hasLargestIndex) {\n  \
    \          result.Add(largestEven);\n            result.Add(largestIndex);\n \
    \       }\n        bool hasSmallestEvenAndLargestEven = hasSmallestEven && hasLargestEven;\n\
    \        bool hasSmallestIndexAndLargestIndex = hasSmallestIndex && hasLargestIndex;\n\
    \        if (hasSmallestEvenAndLargestEven) {\n            int smallestEvenIndex\
    \ = smallestIndex - 1;\n            int largestEvenIndex = largestIndex + 1;\n\
    \            int smallestEvenValue = arr[smallestEvenIndex];\n            int\
    \ largestEvenValue = arr[largestEvenIndex];\n            int smallestIndexValue\
    \ = arr[smallestIndex];\n            int largestIndexValue = arr[largestIndex];\n\
    \            bool isSmallestEven = smallestEvenValue == smallestEven;\n      \
    \      bool isSmallestIndex = smallestIndexValue == smallestIndex;\n         \
    \   bool isLargestEven = largestEvenValue == largestEven;\n            bool isLargestIndex\
    \ = largestIndexValue == largestIndex;\n            if (isSmallestEven && isSmallestIndex\
    \ && isLargestEven && isLargestIndex) {\n                result.Add(smallestEvenValue);\n\
    \                result.Add(smallestIndexValue);\n                result.Add(largestEvenValue);\n\
    \                result.Add(largestIndexValue);\n            }\n        }\n  \
    \      return result;", "        List<long> result = new List<long>();\n     \
    \   long smallest_value = arr.Min();\n        long smallest_index = arr.IndexOf(smallest_value);\n\
    \        long smallest_even_value = smallest_value % 2 == 0 ? smallest_value :\
    \ smallest_value - 1;\n        bool found = false;\n        foreach (long n in\
    \ arr) {\n            if (n % 2 == 0) {\n                if (smallest_value ==\
    \ n) {\n                    found = true;\n                    break;\n      \
    \          }\n                if (smallest_value == smallest_even_value) {\n \
    \                   found = true;\n                    break;\n              \
    \  }\n                if (smallest_value < n) {\n                    smallest_value\
    \ = n;\n                    smallest_index = arr.IndexOf(n);\n               \
    \     smallest_even_value = n % 2 == 0 ? n : n - 1;\n                }\n     \
    \       }\n        }\n        if (found) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        } else {\n            result.Add(smallest_value);\n\
    \            result.Add(0);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallest_value = arr.Min();\n     \
    \   long smallest_index = 0;\n        bool found = false;\n        for (int i\
    \ = 0; i < arr.Count; i++) {\n            if (arr[i] < smallest_value) {\n   \
    \             smallest_value = arr[i];\n                smallest_index = i;\n\
    \                found = true;\n            }\n        }\n        if (found) {\n\
    \            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEven = arr.Min();\n        int smallestIndex = arr.IndexOf(smallestEven);\n\
    \        if (smallestIndex == -1 || arr.Count == 0) {\n            return result;\n\
    \        }\n        long smallestEvenValue = arr[smallestIndex];\n        long\
    \ smallestEvenIndex = 0;\n        for (int i = 0; i < arr.Count; i++) {\n    \
    \        if (arr[i] % 2 == 0) {\n                if (smallestEvenValue > arr[i])\
    \ {\n                    smallestEvenValue = arr[i];\n                    smallestEvenIndex\
    \ = i;\n                }\n            }\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestEvenIndex);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallestEvenValue = arr.Min();\n  \
    \      long smallestIndex = 0;\n        bool foundSmallestEvenValue = false;\n\
    \        bool foundSmallestIndex = false;\n        foreach (long node in arr)\
    \ {\n            if (node % 2 == 0) {\n                if (!foundSmallestEvenValue)\
    \ {\n                    smallestEvenValue = node;\n                    foundSmallestEvenValue\
    \ = true;\n                }\n                if (node < smallestEvenValue) {\n\
    \                    smallestEvenValue = node;\n                    foundSmallestEvenValue\
    \ = true;\n                }\n            }\n            else {\n            \
    \    if (!foundSmallestIndex) {\n                    smallestIndex = node;\n \
    \                   foundSmallestIndex = true;\n                }\n          \
    \      if (node < smallestIndex) {\n                    smallestIndex = node;\n\
    \                    foundSmallestIndex = true;\n                }\n         \
    \   }\n        }\n        if (foundSmallestEvenValue) {\n            result.Add(smallestEvenValue);\n\
    \            result.Add(smallestIndex);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long smallestEvenValue\
    \ = arr.Min();\n        long smallestIndex = 0;\n        foreach (long n in arr)\
    \ {\n            if (n % 2 == 0) {\n                if (smallestEvenValue < n)\
    \ {\n                    smallestEvenValue = n;\n                    smallestIndex\
    \ = arr.IndexOf(n);\n                }\n            }\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestIndex);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallestEvenValue = arr.Min();\n  \
    \      int smallestIndex = 0;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] % 2 == 0) {\n                if (smallestEvenValue % 2\
    \ == 0) {\n                    if (arr[i] < smallestEvenValue) {\n           \
    \             smallestEvenValue = arr[i];\n                        smallestIndex\
    \ = i;\n                    }\n                } else {\n                    if\
    \ (arr[i] < smallestEvenValue) {\n                        smallestEvenValue =\
    \ arr[i];\n                        smallestIndex = i;\n                    }\n\
    \                }\n            }\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestIndex);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallestEven = arr.Min();\n       \
    \ long smallestIndex = arr.IndexOf(smallestEven);\n        if (smallestIndex ==\
    \ -1) {\n            return result;\n        }\n        bool found = false;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == smallestEven)\
    \ {\n                found = true;\n                result.Add(smallestEven);\n\
    \                result.Add(smallestIndex);\n                break;\n        \
    \    }\n        }\n        if (!found) {\n            return result;\n       \
    \ }\n        List<long> temp = new List<long>();\n        for (int i = 0; i <\
    \ arr.Count; i++) {\n            if (arr[i] != smallestEven) {\n             \
    \   temp.Add(arr[i]);\n            }\n        }\n        if (temp.Count == 0)\
    \ {\n            return result;\n        }\n        List<long> temp2 = new List<long>();\n\
    \        foreach (long x in temp) {\n            if (x % 2 == 0) {\n         \
    \       temp2.Add(x);\n            }\n        }\n        smallestEven = temp2.Min();\n\
    \        smallestIndex = temp2.IndexOf(smallestEven);\n        if (smallestIndex\
    \ == -1) {\n            return result;\n        }\n        for (int i = 0; i <\
    \ arr.Count; i++) {\n            if (arr[i] == smallestEven) {\n             \
    \   result.Add(smallestEven);\n                result.Add(smallestIndex);\n  \
    \              break;\n            }\n        }\n        return result;", "  \
    \      List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        long smallest_value = smallest_even_value;\n        long smallest_index\
    \ = smallest_even_index;\n        bool found = false;\n        foreach (long n\
    \ in arr) {\n            if (n % 2 == 0) {\n                if (smallest_value\
    \ == smallest_even_value) {\n                    smallest_value = n;\n       \
    \             smallest_index = arr.IndexOf(n);\n                    found = true;\n\
    \                }\n                else if (smallest_value < n) {\n         \
    \           smallest_value = n;\n                    smallest_index = arr.IndexOf(n);\n\
    \                    found = true;\n                }\n            }\n       \
    \ }\n        if (found) {\n            result.Add(smallest_value);\n         \
    \   result.Add(smallest_index);\n        }\n        return result;", "       \
    \ List<long> result = new List<long>();\n        long minValue = arr.Min();\n\
    \        long minIndex = 0;\n        long minEvenValue = arr.Min(x => x % 2 ==\
    \ 0);\n        long minEvenIndex = 0;\n        foreach (long x in arr) {\n   \
    \         if (x % 2 == 0) {\n                if (minEvenValue < x) {\n       \
    \             minEvenValue = x;\n                    minEvenIndex = minIndex;\n\
    \                }\n                if (minValue < x) {\n                    minValue\
    \ = x;\n                    minIndex = arr.IndexOf(x);\n                }\n  \
    \          }\n        }\n        if (minEvenValue == minValue) {\n           \
    \ result.Add(minEvenValue);\n            result.Add(minEvenIndex);\n        }\n\
    \        if (minIndex == arr.IndexOf(minValue)) {\n            result.Add(minValue);\n\
    \            result.Add(minIndex);\n        }\n        return result;", "    \
    \    List<long> result = new List<long>();\n        long smallestEvenValue = arr.Min();\n\
    \        long smallestIndex = 0;\n        bool foundSmallestEvenValue = false;\n\
    \        bool foundSmallestIndex = false;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                if (smallestEvenValue\
    \ < arr[i]) {\n                    smallestEvenValue = arr[i];\n             \
    \       smallestIndex = i;\n                    foundSmallestEvenValue = true;\n\
    \                }\n            }\n        }\n        if (foundSmallestEvenValue)\
    \ {\n            result.Add(smallestEvenValue);\n            result.Add(smallestIndex);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n\
    \        bool isSmallestEvenValueFound = false;\n        bool isSmallestIndexFound\
    \ = false;\n        foreach (long value in arr) {\n            if (value % 2 ==\
    \ 0) {\n                if (smallestEvenValue % 2 == 0) {\n                  \
    \  if (value < smallestEvenValue) {\n                        smallestEvenValue\
    \ = value;\n                        smallestIndex = arr.IndexOf(value);\n    \
    \                    isSmallestEvenValueFound = true;\n                    }\n\
    \                } else {\n                    if (value < smallestEvenValue)\
    \ {\n                        smallestEvenValue = value;\n                    \
    \    smallestIndex = arr.IndexOf(value);\n                        isSmallestEvenValueFound\
    \ = true;\n                    }\n                }\n            } else {\n  \
    \              if (smallestEvenValue % 2 == 0) {\n                    if (value\
    \ < smallestEvenValue) {\n                        smallestEvenValue = value;\n\
    \                        smallestIndex = arr.IndexOf(value);\n               \
    \         isSmallestEvenValueFound = true;\n                    }\n          \
    \      } else {\n                    if (value < smallestEvenValue) {\n      \
    \                  smallestEvenValue = value;\n                        smallestIndex\
    \ = arr.IndexOf(value);\n                        isSmallestEvenValueFound = true;\n\
    \                    }\n                }\n            }\n        }\n        if\
    \ (isSmallestEvenValueFound == true) {\n            result.Add(smallestEvenValue);\n\
    \            result.Add(smallestIndex);\n        } else {\n            result.Add(smallestEvenValue);\n\
    \            result.Add(smallestIndex);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long minValue = arr.Min();\n\
    \        long minIndex = arr.IndexOf(minValue);\n        long minEvenValue = minValue\
    \ % 2 == 0 ? minValue : minValue - 1;\n        bool isEven = true;\n        long\
    \ minEvenIndex = -1;\n        foreach (long n in arr) {\n            if (n % 2\
    \ == 0) {\n                if (minEvenValue == n) {\n                    minEvenIndex\
    \ = arr.IndexOf(n);\n                    minEvenValue = n;\n                 \
    \   isEven = true;\n                }\n                else if (minEvenValue <\
    \ n) {\n                    minEvenIndex = arr.IndexOf(n);\n                 \
    \   minEvenValue = n;\n                    isEven = true;\n                }\n\
    \                else {\n                    isEven = false;\n               \
    \ }\n            }\n            else {\n                if (minEvenValue == n)\
    \ {\n                    minEvenIndex = arr.IndexOf(n);\n                    minEvenValue\
    \ = n;\n                    isEven = true;\n                }\n              \
    \  else if (minEvenValue < n) {\n                    minEvenIndex = arr.IndexOf(n);\n\
    \                    minEvenValue = n;\n                    isEven = true;\n \
    \               }\n                else {\n                    isEven = false;\n\
    \                }\n            }\n        }\n        if (minEvenIndex != -1)\
    \ {\n            result.Add(minEvenValue);\n            result.Add(minEvenIndex);\n\
    \        }\n        else {\n            if (minIndex != -1) {\n              \
    \  result.Add(minValue);\n                result.Add(minIndex);\n            }\n\
    \            else {\n                result.Add(minValue);\n            }\n  \
    \      }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long minValue = arr.Min();\n        long minIndex = 0;\n        long\
    \ minEvenValue = minValue;\n        bool isEven = true;\n        for (int i =\
    \ 0; i < arr.Count; i++) {\n            if (arr[i] < minValue) {\n           \
    \     minValue = arr[i];\n                minIndex = i;\n            }\n     \
    \       if (arr[i] % 2 == 0) {\n                isEven = true;\n            }\
    \ else {\n                isEven = false;\n            }\n            if (isEven)\
    \ {\n                if (arr[i] < minEvenValue) {\n                    minEvenValue\
    \ = arr[i];\n                }\n            }\n        }\n        result.Add(minEvenValue);\n\
    \        result.Add(minIndex);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long smallestEvenValue = arr.Min();\n        int\
    \ smallestIndex = 0;\n        for (int i = 0; i < arr.Count; i++) {\n        \
    \    if (arr[i] % 2 == 0) {\n                if (arr[i] < smallestEvenValue) {\n\
    \                    smallestEvenValue = arr[i];\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestIndex);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallestEven = arr.Min();\n       \
    \ int smallestIndex = arr.FindIndex(x => x == smallestEven);\n        if (smallestIndex\
    \ == -1)\n            return result;\n        bool found = false;\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == smallestEven) {\n\
    \                found = true;\n                result.Add(smallestEven);\n  \
    \              result.Add(smallestIndex);\n                break;\n          \
    \  }\n        }\n        if (!found)\n            return result;\n        List<long>\
    \ temp = new List<long>();\n        for (int i = 0; i < arr.Count; i++) {\n  \
    \          if (arr[i] != smallestEven) {\n                temp.Add(arr[i]);\n\
    \            }\n        }\n        if (temp.Count > 1)\n            return result;\n\
    \        return temp;", "        List<long> result = new List<long>();\n     \
    \   long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n   \
    \     foreach (long n in arr) {\n            if (n % 2 == 0) {\n             \
    \   if (smallestEvenValue % 2 == 0) {\n                    smallestEvenValue =\
    \ n;\n                    smallestIndex = arr.IndexOf(n);\n                }\n\
    \            }\n        }\n        result.Add(smallestEvenValue);\n        result.Add(smallestIndex);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n \
    \       bool isSmallestEvenValueFound = false;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                isSmallestEvenValueFound\
    \ = true;\n                if (smallestEvenValue == arr[i]) {\n              \
    \      smallestEvenValue = arr[i];\n                    smallestIndex = i;\n \
    \               }\n            }\n        }\n        if (!isSmallestEvenValueFound)\
    \ {\n            return result;\n        }\n        List<long> evenValues = new\
    \ List<long>();\n        for (int i = 0; i < arr.Count; i++) {\n            if\
    \ (arr[i] % 2 == 0) {\n                evenValues.Add(arr[i]);\n            }\n\
    \        }\n        evenValues.Sort();\n        long smallestEvenValue = evenValues[0];\n\
    \        long smallestIndex = evenValues.IndexOf(smallestEvenValue);\n       \
    \ result.Add(smallestEvenValue);\n        result.Add(smallestIndex);\n       \
    \ return result;", "        long smallestEvenValue = arr.Min();\n        long\
    \ smallestIndex = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in arr) {\n            if (n % 2 == 0) {\n                if (smallestEvenValue\
    \ < n) {\n                    smallestEvenValue = n;\n                    smallestIndex\
    \ = arr.IndexOf(n);\n                }\n            }\n        }\n        if (smallestEvenValue\
    \ == 0) {\n            return new List<long>();\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestIndex);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallestEvenValue = arr.Min();\n  \
    \      int smallestIndex = 0;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] % 2 == 0 && arr[i] < smallestEvenValue) {\n          \
    \      smallestEvenValue = arr[i];\n                smallestIndex = i;\n     \
    \       }\n        }\n        result.Add(smallestEvenValue);\n        result.Add(smallestIndex);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallestEven = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEven);\n\
    \        foreach (long n in arr) {\n            if (n % 2 == 0) {\n          \
    \      if (smallestEven < n) {\n                    smallestEven = n;\n      \
    \              smallestIndex = arr.IndexOf(n);\n                }\n          \
    \  }\n        }\n        result.Add(smallestEven);\n        result.Add(smallestIndex);\n\
    \        return result;", "        long smallestEvenValue = 0;\n        long smallestIndex\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (long n\
    \ in arr) {\n            if (n % 2 == 0) {\n                if (smallestEvenValue\
    \ < n) {\n                    smallestEvenValue = n;\n                    smallestIndex\
    \ = arr.IndexOf(n);\n                }\n            }\n        }\n        if (smallestEvenValue\
    \ == 0) {\n            return new List<long>();\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestIndex);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallestEven = arr.Min();\n       \
    \ int smallestIndex = arr.FindIndex(x => x == smallestEven);\n        if (smallestIndex\
    \ == -1)\n            return result;\n        long smallestEvenValue = arr[smallestIndex];\n\
    \        long smallestEvenIndex = 0;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] == smallestEvenValue) {\n                result.Add(smallestEvenValue);\n\
    \                result.Add(smallestEvenIndex);\n                break;\n    \
    \        }\n            if (arr[i] < smallestEvenValue) {\n                smallestEvenValue\
    \ = arr[i];\n                smallestEvenIndex = i;\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n \
    \       bool foundSmallestEvenValue = false;\n        foreach (long i in arr)\
    \ {\n            if (i % 2 == 0) {\n                if (!foundSmallestEvenValue)\
    \ {\n                    smallestEvenValue = i;\n                    foundSmallestEvenValue\
    \ = true;\n                }\n                if (i == smallestEvenValue) {\n\
    \                    smallestIndex = i;\n                }\n            }\n  \
    \      }\n        if (smallestEvenValue == 0) {\n            return new List<long>();\n\
    \        }\n        result.Add(smallestEvenValue);\n        result.Add(smallestIndex);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallest_even_value = arr.Min();\n        long smallest_even_index\
    \ = arr.IndexOf(smallest_even_value);\n        if (smallest_even_index == arr.Count\
    \ - 1) {\n            result.Add(smallest_even_value);\n            return result;\n\
    \        }\n        long smallest_odd_value = arr[smallest_even_index + 1];\n\
    \        long smallest_odd_index = arr.IndexOf(smallest_odd_value);\n        if\
    \ (smallest_odd_index == arr.Count - 1) {\n            result.Add(smallest_odd_value);\n\
    \            return result;\n        }\n        long smallest_odd_value_2 = arr[smallest_odd_index\
    \ + 1];\n        long smallest_odd_index_2 = arr.IndexOf(smallest_odd_value_2);\n\
    \        if (smallest_odd_index_2 == arr.Count - 1) {\n            result.Add(smallest_odd_value_2);\n\
    \            return result;\n        }\n        long smallest_odd_value_3 = arr[smallest_odd_index_2\
    \ + 1];\n        long smallest_odd_index_3 = arr.IndexOf(smallest_odd_value_3);\n\
    \        if (smallest_odd_index_3 == arr.Count - 1) {\n            result.Add(smallest_odd_value_3);\n\
    \            return result;\n        }\n        long smallest_odd_value_4 = arr[smallest_odd_index_3\
    \ + 1];\n        long smallest_odd_index_4 = arr.IndexOf(smallest_odd_value_4);\n\
    \        if (smallest_odd_index_4 == arr.Count - 1) {\n            result.Add(smallest_odd_value_4);\n\
    \            return result;\n        }\n        long smallest_odd_value_5 = arr[smallest_odd_index_4\
    \ + 1];\n        long smallest_odd_index_5 = arr.IndexOf(smallest_odd_value_5);\n\
    \        if (smallest_odd_index_5 == arr.Count - 1) {\n            result.Add(smallest_odd_value_5);\n\
    \            return result;\n        }\n        long smallest_odd_value_6 = arr[smallest_odd_index_5\
    \ + 1];\n        long smallest_odd_index_6 = arr.IndexOf(smallest_odd_value_6);\n\
    \        if (smallest_odd_index_6 == arr.Count - 1) {\n            result.Add(smallest_odd_value_6);\n\
    \            return result;\n        }\n        long smallest_odd_value_7 = arr[smallest_odd_index_6\
    \ + 1];\n        long smallest_odd_index_7 = arr.IndexOf(smallest_odd_value_7);\n\
    \        if (smallest_odd_index_7 == arr.Count - 1) {\n            result.Add(smallest_odd_value_7);\n\
    \            return result;\n        }\n        long smallest_odd_value_8 = arr[smallest_odd_index_7\
    \ + 1];\n        long smallest_od", "        List<long> result = new List<long>();\n\
    \        long smallestEvenValue = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEvenValue);\n\
    \        if (smallestEvenValue % 2 == 0) {\n            result.Add(smallestEvenValue);\n\
    \            result.Add(smallestIndex);\n            return result;\n        }\n\
    \        long smallestEvenValue2 = arr.Min(x => x % 2 == 0);\n        long smallestIndex2\
    \ = arr.IndexOf(smallestEvenValue2);\n        if (smallestEvenValue2 % 2 == 0)\
    \ {\n            result.Add(smallestEvenValue2);\n            result.Add(smallestIndex2);\n\
    \            return result;\n        }\n        long smallestEvenValue3 = arr.Min(x\
    \ => x % 2 == 0);\n        long smallestIndex3 = arr.IndexOf(smallestEvenValue3);\n\
    \        if (smallestEvenValue3 % 2 == 0) {\n            result.Add(smallestEvenValue3);\n\
    \            result.Add(smallestIndex3);\n            return result;\n       \
    \ }\n        long smallestEvenValue4 = arr.Min(x => x % 2 == 0);\n        long\
    \ smallestIndex4 = arr.IndexOf(smallestEvenValue4);\n        if (smallestEvenValue4\
    \ % 2 == 0) {\n            result.Add(smallestEvenValue4);\n            result.Add(smallestIndex4);\n\
    \            return result;\n        }\n        long smallestEvenValue5 = arr.Min(x\
    \ => x % 2 == 0);\n        long smallestIndex5 = arr.IndexOf(smallestEvenValue5);\n\
    \        if (smallestEvenValue5 % 2 == 0) {\n            result.Add(smallestEvenValue5);\n\
    \            result.Add(smallestIndex5);\n            return result;\n       \
    \ }\n        long smallestEvenValue6 = arr.Min(x => x % 2 == 0);\n        long\
    \ smallestIndex6 = arr.IndexOf(smallestEvenValue6);\n        if (smallestEvenValue6\
    \ % 2 == 0) {\n            result.Add(smallestEvenValue6);\n            result.Add(smallestIndex6);\n\
    \            return result;\n        }\n        long smallestEvenValue7 = arr.Min(x\
    \ => x % 2 == 0);\n        long smallestIndex7 = arr.IndexOf(smallestEvenValue7);\n\
    \        if (smallestEvenValue7 % 2 == 0) {\n            result.Add(smallestEvenValue7);\n\
    \            result.Add(smallestIndex7);\n            return result;\n       \
    \ }\n        long smallestEvenValue8 = arr.Min(x => x % 2 == 0);\n        long\
    \ smallestIndex8 = arr.IndexOf(smallestEvenValue8);\n        if (smallestEvenValue8\
    \ % 2 == 0) {\n            result.Add(smallestEvenValue8);\n            result.Add(smallestIndex8);\n\
    \            return result;\n        }\n        long smallestEvenValue9 = arr.Min(x\
    \ => x % 2 == 0);\n        ", "        List<long> result = new List<long>();\n\
    \        long smallestEven = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEven);\n\
    \        if (smallestIndex == -1) {\n            return result;\n        }\n \
    \       bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n \
    \           if (arr[i] % 2 == 0) {\n                found = true;\n          \
    \      result.Add(smallestEven);\n                result.Add(smallestIndex);\n\
    \                break;\n            }\n        }\n        if (!found) {\n   \
    \         return result;\n        }\n        List<long> evens = new List<long>();\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0) {\n                evens.Add(arr[i]);\n            }\n        }\n       \
    \ long smallestEvenValue = evens.Min();\n        long smallestEvenIndex = evens.IndexOf(smallestEvenValue);\n\
    \        if (smallestEvenIndex == -1) {\n            return result;\n        }\n\
    \        result.Add(smallestEvenValue);\n        result.Add(smallestEvenIndex);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n \
    \       bool foundSmallestEvenValue = false;\n        bool foundSmallestIndex\
    \ = false;\n        foreach (long value in arr) {\n            if (value % 2 ==\
    \ 0) {\n                if (!foundSmallestEvenValue) {\n                    smallestEvenValue\
    \ = value;\n                    foundSmallestEvenValue = true;\n             \
    \   }\n                if (value < smallestEvenValue) {\n                    smallestEvenValue\
    \ = value;\n                    foundSmallestIndex = true;\n                }\n\
    \            }\n            else {\n                if (!foundSmallestIndex) {\n\
    \                    smallestIndex = value;\n                    foundSmallestIndex\
    \ = true;\n                }\n                if (value < smallestIndex) {\n \
    \                   smallestIndex = value;\n                    foundSmallestIndex\
    \ = true;\n                }\n            }\n        }\n        if (foundSmallestEvenValue)\
    \ {\n            result.Add(smallestEvenValue);\n            result.Add(smallestIndex);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEven = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEven);\n\
    \        if (smallestIndex == -1) {\n            return result;\n        }\n \
    \       foreach (var item in arr.Where((x, i) => x % 2 == 0 && i != smallestIndex))\
    \ {\n            if (item == smallestEven) {\n                result.Add(item);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = 0;\n        long smallest_index\
    \ = 0;\n        long smallest_value = 0;\n        long smallest_index2 = 0;\n\
    \        long smallest_value2 = 0;\n        bool flag = false;\n        foreach\
    \ (var item in arr) {\n            if (item % 2 == 0) {\n                flag\
    \ = true;\n                smallest_even_value = item;\n                smallest_index\
    \ = arr.IndexOf(item);\n                smallest_value = item;\n             \
    \   smallest_index2 = smallest_index;\n                smallest_value2 = smallest_value;\n\
    \            }\n            if (flag) {\n                if (item < smallest_even_value)\
    \ {\n                    flag = false;\n                    smallest_even_value\
    \ = item;\n                    smallest_index = arr.IndexOf(item);\n         \
    \           smallest_value = item;\n                    smallest_index2 = smallest_index;\n\
    \                    smallest_value2 = smallest_value;\n                }\n  \
    \              if (item == smallest_even_value) {\n                    result.Add(smallest_value);\n\
    \                    result.Add(smallest_index2);\n                }\n       \
    \     }\n        }\n        if (result.Count == 0) {\n            return new List<long>();\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n\
    \        long currentIndex = 0;\n        bool foundSmallestEvenValue = false;\n\
    \        bool foundSmallestIndex = false;\n        foreach (long value in arr)\
    \ {\n            if (value % 2 == 0) {\n                if (!foundSmallestEvenValue)\
    \ {\n                    foundSmallestEvenValue = true;\n                    smallestEvenValue\
    \ = value;\n                }\n                if (value < smallestEvenValue)\
    \ {\n                    foundSmallestEvenValue = false;\n                   \
    \ smallestEvenValue = value;\n                }\n            }\n            else\
    \ {\n                if (!foundSmallestIndex) {\n                    foundSmallestIndex\
    \ = true;\n                    smallestIndex = value;\n                }\n   \
    \             if (value < smallestIndex) {\n                    foundSmallestIndex\
    \ = false;\n                    smallestIndex = value;\n                }\n  \
    \          }\n        }\n        if (foundSmallestEvenValue) {\n            result.Add(smallestEvenValue);\n\
    \            result.Add(smallestIndex);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long smallestEven = arr.Min();\n\
    \        long smallestIndex = arr.IndexOf(smallestEven);\n        bool foundSmallestEven\
    \ = false;\n        foreach (long n in arr) {\n            if (n % 2 == 0) {\n\
    \                if (smallestEven < n) {\n                    smallestEven = n;\n\
    \                    smallestIndex = arr.IndexOf(n);\n                    foundSmallestEven\
    \ = true;\n                }\n            }\n        }\n        if (foundSmallestEven)\
    \ {\n            result.Add(smallestEven);\n            result.Add(smallestIndex);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEven = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEven);\n\
    \        bool isEven = smallestEven % 2 == 0;\n        bool isSmallestEven = smallestEven\
    \ < arr.Min();\n        bool isSmallestEvenIndex = smallestIndex < arr.IndexOf(smallestEven);\n\
    \        if (isEven && isSmallestEven) {\n            result.Add(smallestEven);\n\
    \            result.Add(smallestIndex);\n        }\n        if (isSmallestEven)\
    \ {\n            result.Add(smallestEven);\n        }\n        if (isSmallestEvenIndex)\
    \ {\n            result.Add(smallestIndex);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallest_value = 0;\n\
    \        long smallest_index = 0;\n        bool found = false;\n        foreach\
    \ (long n in arr) {\n            if (n % 2 == 0) {\n                smallest_value\
    \ = n;\n                smallest_index = arr.IndexOf(n);\n                found\
    \ = true;\n            }\n        }\n        if (found) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallestEvenValue =\
    \ arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEvenValue);\n \
    \       if (smallestEvenValue % 2 == 0) {\n            result.Add(smallestEvenValue);\n\
    \            result.Add(smallestIndex);\n            return result;\n        }\n\
    \        List<long> evenValues = new List<long>();\n        List<long> evenIndexes\
    \ = new List<long>();\n        foreach (long value in arr) {\n            if (value\
    \ % 2 == 0) {\n                evenValues.Add(value);\n                evenIndexes.Add(arr.IndexOf(value));\n\
    \            }\n        }\n        long smallestEvenValue = evenValues.Min();\n\
    \        long smallestIndex = evenIndexes.IndexOf(smallestEvenValue);\n      \
    \  result.Add(smallestEvenValue);\n        result.Add(smallestIndex);\n      \
    \  return result;", "        List<long> result = new List<long>();\n        long\
    \ smallestEven = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEven);\n\
    \        if (smallestIndex == -1) {\n            return result;\n        }\n \
    \       long smallestEvenValue = arr[smallestIndex];\n        long smallestEvenIndex\
    \ = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0) {\n                if (arr[i] < smallestEvenValue) {\n           \
    \         smallestEvenValue = arr[i];\n                    smallestEvenIndex =\
    \ i;\n                }\n            }\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestEvenIndex);\n        return result;", "        long\
    \ minValue = arr.Min();\n        long minIndex = 0;\n        long minEvenValue\
    \ = minValue % 2 == 0 ? minValue : minValue + 1;\n        List<long> result =\
    \ new List<long>();\n        foreach (long i in arr) {\n            if (i % 2\
    \ == 0) {\n                if (i < minEvenValue) {\n                    minEvenValue\
    \ = i;\n                    minIndex = i;\n                }\n            }\n\
    \            else {\n                if (i == minEvenValue) {\n              \
    \      minEvenValue = i;\n                    minIndex = i;\n                }\n\
    \            }\n        }\n        result.Add(minEvenValue);\n        result.Add(minIndex);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallestEven = arr.Min();\n        int smallestIndex = -1;\n      \
    \  for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i]\
    \ < smallestEven) {\n                smallestEven = arr[i];\n                smallestIndex\
    \ = i;\n            }\n        }\n        result.Add(smallestEven);\n        result.Add(smallestIndex);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smalest_value = arr.Min();\n        long smalest_index = 0;\n     \
    \   long smalest_even_value = 0;\n        bool foundSmallestEvenValue = false;\n\
    \        foreach (long n in arr) {\n            if (n % 2 == 0) {\n          \
    \      if (foundSmallestEvenValue) {\n                    smalest_value = n;\n\
    \                    smalest_index = arr.IndexOf(n);\n                    smalest_even_value\
    \ = n % 2;\n                    foundSmallestEvenValue = false;\n            \
    \    } else {\n                    smalest_value = n;\n                    smalest_index\
    \ = arr.IndexOf(n);\n                    smalest_even_value = n % 2;\n       \
    \             foundSmallestEvenValue = true;\n                }\n            }\
    \ else {\n                if (smalest_value == n && smalest_index == arr.IndexOf(n))\
    \ {\n                    smalest_value = n;\n                    smalest_index\
    \ = arr.IndexOf(n);\n                    smalest_even_value = n % 2;\n       \
    \             foundSmallestEvenValue = true;\n                }\n            }\n\
    \        }\n        if (foundSmallestEvenValue) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n        } else {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n            result.Add(smalest_even_value);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEven = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEven);\n\
    \        long smallestValue = arr[smallestIndex];\n        bool foundSmallestEven\
    \ = false;\n        bool foundSmallestIndex = false;\n        foreach (long n\
    \ in arr) {\n            if (n % 2 == 0) {\n                if (smallestEven ==\
    \ n) {\n                    foundSmallestEven = true;\n                }\n   \
    \             else if (smallestEven == n && smallestIndex < arr.IndexOf(n)) {\n\
    \                    foundSmallestEven = true;\n                    smallestIndex\
    \ = arr.IndexOf(n);\n                }\n            }\n        }\n        if (foundSmallestEven)\
    \ {\n            result.Add(smallestEven);\n            result.Add(smallestIndex);\n\
    \        }\n        return result;", "        long smallestEvenValue = arr.Min();\n\
    \        long smallestIndex = 0;\n        List<long> result = new List<long>();\n\
    \        foreach (long n in arr) {\n            if (n % 2 == 0) {\n          \
    \      if (smallestEvenValue % 2 == 0) {\n                    smallestEvenValue\
    \ = n;\n                    smallestIndex = arr.IndexOf(n);\n                }\n\
    \            }\n        }\n        if (smallestEvenValue % 2 == 0) {\n       \
    \     result.Add(smallestEvenValue);\n            result.Add(smallestIndex);\n\
    \        }\n        return result;", "        long smallestEvenValue = arr.Min();\n\
    \        long smallestIndex = arr.IndexOf(smallestEvenValue);\n        List<long>\
    \ result = new List<long>();\n        foreach (var item in arr) {\n          \
    \  if (item % 2 == 0) {\n                if (smallestEvenValue < item) {\n   \
    \                 smallestEvenValue = item;\n                    smallestIndex\
    \ = arr.IndexOf(item);\n                }\n            }\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestIndex);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallestEven = arr.Min();\n       \
    \ long smallestIndex = arr.IndexOf(smallestEven);\n        if (smallestIndex ==\
    \ -1) {\n            return result;\n        }\n        bool isEven = true;\n\
    \        long smallestValue = smallestEven;\n        foreach (var item in arr)\
    \ {\n            if (item % 2 == 0) {\n                isEven = false;\n     \
    \           smallestValue = item;\n            }\n        }\n        if (isEven)\
    \ {\n            result.Add(smallestValue);\n            result.Add(smallestIndex);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n\
    \        bool isSmallestEvenValueFound = false;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                if (!isSmallestEvenValueFound)\
    \ {\n                    smallestEvenValue = arr[i];\n                    smallestIndex\
    \ = i;\n                    isSmallestEvenValueFound = true;\n               \
    \ }\n            }\n        }\n        if (isSmallestEvenValueFound) {\n     \
    \       result.Add(smallestEvenValue);\n            result.Add(smallestIndex);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEven = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEven);\n\
    \        if (smallestIndex == -1) {\n            return result;\n        }\n \
    \       long smallestValue = arr[smallestIndex];\n        long largestEven = arr.Max();\n\
    \        long largestIndex = arr.IndexOf(largestEven);\n        if (largestIndex\
    \ == -1) {\n            return result;\n        }\n        long largestValue =\
    \ arr[largestIndex];\n        if (smallestValue == largestEven) {\n          \
    \  int index = smallestIndex;\n            while (index > 0 && arr[index] == smallestEven)\
    \ {\n                index--;\n            }\n            result.Add(smallestEven);\n\
    \            result.Add(index);\n            return result;\n        }\n     \
    \   if (smallestValue < largestEven) {\n            int index = smallestIndex;\n\
    \            while (index > 0 && arr[index] == smallestEven) {\n             \
    \   index--;\n            }\n            result.Add(smallestEven);\n         \
    \   result.Add(index);\n            return result;\n        }\n        int index\
    \ = largestIndex;\n        while (index < arr.Length && arr[index] == largestEven)\
    \ {\n            index++;\n        }\n        result.Add(largestEven);\n     \
    \   result.Add(index);\n        return result;", "        List<long> result =\
    \ new List<long>();\n        long smallestEvenValue = arr.Min();\n        long\
    \ smallestIndex = 0;\n        bool foundSmallestEvenValue = false;\n        bool\
    \ foundSmallestIndex = false;\n        foreach (long value in arr) {\n       \
    \     if (value % 2 == 0) {\n                if (!foundSmallestEvenValue) {\n\
    \                    smallestEvenValue = value;\n                    foundSmallestEvenValue\
    \ = true;\n                }\n                if (value < smallestEvenValue) {\n\
    \                    smallestEvenValue = value;\n                    foundSmallestIndex\
    \ = true;\n                }\n            }\n        }\n        if (foundSmallestEvenValue)\
    \ {\n            result.Add(smallestEvenValue);\n            result.Add(smallestIndex);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smalest_value = arr.Min();\n        long smalest_index = 0;\n  \
    \      long smalest_even_value = 0;\n        long smalest_even_index = 0;\n  \
    \      long smalest_even_index_index = 0;\n        foreach (long n in arr) {\n\
    \            if (n % 2 == 0) {\n                if (smalest_even_value == 0) {\n\
    \                    smalest_even_value = n;\n                    smalest_even_index\
    \ = smalest_index;\n                    smalest_even_index_index = smalest_index_index;\n\
    \                } else if (smalest_even_value == n) {\n                    smalest_even_index_index++;\n\
    \                }\n            } else {\n                if (smalest_value ==\
    \ 0) {\n                    smalest_value = n;\n                    smalest_index\
    \ = smalest_index;\n                } else if (smalest_value == n) {\n       \
    \             smalest_index_index++;\n                }\n            }\n     \
    \       smalest_value = n;\n            smalest_index = smalest_index;\n     \
    \   }\n        if (smalest_even_value == 0) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n        } else if (smalest_even_value\
    \ == smalest_value) {\n            result.Add(smalest_value);\n            result.Add(smalest_even_index);\n\
    \            result.Add(smalest_even_index_index);\n        } else {\n       \
    \     result.Add(smalest_value);\n            result.Add(smalest_even_index);\n\
    \            result.Add(smalest_even_index_index);\n            result.Add(smalest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long minValue = arr.Min();\n        long minIndex = 0;\n        long\
    \ minEvenValue = minValue / 2;\n        long minEvenIndex = 0;\n        bool isEven\
    \ = true;\n        foreach (long n in arr) {\n            if (n % 2 == 0) {\n\
    \                isEven = true;\n                if (minEvenValue > n) {\n   \
    \                 minEvenValue = n;\n                    minEvenIndex = minIndex;\n\
    \                }\n                else {\n                    minEvenIndex =\
    \ minIndex;\n                }\n            }\n            else {\n          \
    \      isEven = false;\n                if (minEvenValue < n) {\n            \
    \        minEvenValue = n;\n                    minEvenIndex = minIndex;\n   \
    \             }\n                else {\n                    minEvenIndex = minIndex;\n\
    \                }\n            }\n            if (isEven) {\n               \
    \ minIndex = minEvenIndex;\n            }\n            else {\n              \
    \  minIndex = minIndex;\n            }\n            result.Add(n);\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n \
    \       long currentIndex = 0;\n        bool isEven = true;\n        foreach (long\
    \ n in arr) {\n            if (isEven) {\n                if (n == smallestEvenValue)\
    \ {\n                    result.Add(n);\n                    currentIndex++;\n\
    \                }\n                else {\n                    isEven = false;\n\
    \                }\n            }\n            else {\n                if (n ==\
    \ smallestEvenValue) {\n                    result.Add(n);\n                 \
    \   currentIndex++;\n                }\n                else {\n             \
    \       isEven = true;\n                }\n            }\n        }\n        if\
    \ (result.Count == 0) {\n            return new List<long>();\n        }\n   \
    \     if (result.Count == 1) {\n            return new List<long> { result[0]\
    \ };\n        }\n        if (result.Count > 1) {\n            List<long> result\
    \ = new List<long>();\n            int smallestIndex = result.Count;\n       \
    \     long smallestEvenValue = result.Min();\n            long currentIndex =\
    \ 0;\n            bool isEven = true;\n            foreach (long n in arr) {\n\
    \                if (isEven) {\n                    if (n == smallestEvenValue)\
    \ {\n                        result.Add(n);\n                        currentIndex++;\n\
    \                    }\n                    else {\n                        isEven\
    \ = false;\n                    }\n                }\n                else {\n\
    \                    if (n == smallestEvenValue) {\n                        result.Add(n);\n\
    \                        currentIndex++;\n                    }\n            \
    \        else {\n                        isEven = true;\n                    }\n\
    \                }\n            }\n            if (result.Count == 0) {\n    \
    \            return new List<long>();\n            }\n            if (result.Count\
    \ == 1) {\n                return new List<long> { result[0] };\n            }\n\
    \            if (result.Count > 1) {\n                List<long> result = new\
    \ List<long>();\n                int smallestIndex = result.Count;\n         \
    \       long smallestEvenValue = result.Min();\n                long currentIndex\
    \ = 0;\n                bool isEven = true;\n                foreach (long n in\
    \ arr) {\n                    if (isEven) {\n                        if (n ==\
    \ smallestEvenValue) {\n                            result.Add(n);\n         \
    \                   currentIndex++;\n                        }\n             \
    \           else {\n                            isEven = false;\n            \
    \            }\n                    }\n                    else {\n          \
    \              if (n == smallestEvenValue) {\n                            result.Add(n);\n\
    \                            currentIndex++;\n                        }\n    \
    \                    else {\n                            isEven = true;\n    \
    \                    }\n                    }\n                }\n           \
    \ }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long minValue = arr.Min();\n        long minIndex = 0;\n        long\
    \ minEvenValue = minValue / 2;\n        long minEvenIndex = 0;\n        foreach\
    \ (long i in arr) {\n            if (i % 2 == 0) {\n                if (minEvenValue\
    \ > i) {\n                    minEvenValue = i;\n                    minEvenIndex\
    \ = minIndex;\n                }\n            }\n            if (i == minEvenValue)\
    \ {\n                minEvenIndex = minIndex;\n            }\n            if (i\
    \ == minValue) {\n                minIndex = minIndex;\n            }\n      \
    \  }\n        result.Add(minEvenValue);\n        result.Add(minEvenIndex);\n \
    \       return result;", "        List<long> result = new List<long>();\n    \
    \    long smallest_even = arr.Min();\n        long smallest_index = -1;\n    \
    \    foreach (long n in arr) {\n            if (n % 2 == 0) {\n              \
    \  if (smallest_even < n) {\n                    smallest_even = n;\n        \
    \            smallest_index = arr.IndexOf(n);\n                }\n           \
    \ }\n        }\n        if (smallest_even != arr.Min()) {\n            result.Add(smallest_even);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_index = arr.IndexOf(smallest_even_value);\n\
    \        bool has_multiple_even_values = false;\n        foreach (long i in arr)\
    \ {\n            if (i % 2 == 0) {\n                if (smallest_even_value <\
    \ i) {\n                    smallest_even_value = i;\n                    smallest_index\
    \ = arr.IndexOf(i);\n                }\n                has_multiple_even_values\
    \ = true;\n            }\n        }\n        if (has_multiple_even_values) {\n\
    \            int smallest_even_value_index = arr.IndexOf(smallest_even_value);\n\
    \            result.Add(smallest_even_value);\n            result.Add(smallest_even_value_index);\n\
    \        } else {\n            result.Add(smallest_even_value);\n        }\n \
    \       return result;", "        List<long> result = new List<long>();\n    \
    \    long smallestEven = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEven);\n\
    \        if (smallestIndex == arr.Count - 1) {\n            result.Add(smallestEven);\n\
    \            return result;\n        }\n        long smallestEven2 = arr.Min(x\
    \ => x % 2 == 0);\n        long smallestIndex2 = arr.IndexOf(smallestEven2);\n\
    \        if (smallestIndex2 == arr.Count - 1) {\n            result.Add(smallestEven2);\n\
    \            return result;\n        }\n        long smallestEven3 = arr.Min(x\
    \ => x % 2 == 1);\n        long smallestIndex3 = arr.IndexOf(smallestEven3);\n\
    \        if (smallestIndex3 == arr.Count - 1) {\n            result.Add(smallestEven3);\n\
    \            return result;\n        }\n        long smallestEven4 = arr.Min(x\
    \ => x % 2 == 1);\n        long smallestIndex4 = arr.IndexOf(smallestEven4);\n\
    \        if (smallestIndex4 == arr.Count - 1) {\n            result.Add(smallestEven4);\n\
    \            return result;\n        }\n        long smallestEven5 = arr.Min(x\
    \ => x % 2 == 0);\n        long smallestIndex5 = arr.IndexOf(smallestEven5);\n\
    \        if (smallestIndex5 == arr.Count - 1) {\n            result.Add(smallestEven5);\n\
    \            return result;\n        }\n        long smallestEven6 = arr.Min(x\
    \ => x % 2 == 1);\n        long smallestIndex6 = arr.IndexOf(smallestEven6);\n\
    \        if (smallestIndex6 == arr.Count - 1) {\n            result.Add(smallestEven6);\n\
    \            return result;\n        }\n        long smallestEven7 = arr.Min(x\
    \ => x % 2 == 0);\n        long smallestIndex7 = arr.IndexOf(smallestEven7);\n\
    \        if (smallestIndex7 == arr.Count - 1) {\n            result.Add(smallestEven7);\n\
    \            return result;\n        }\n        long smallestEven8 = arr.Min(x\
    \ => x % 2 == 1);\n        long smallestIndex8 = arr.IndexOf(smallestEven8);\n\
    \        if (smallestIndex8 == arr.Count - 1) {\n            result.Add(smallestEven8);\n\
    \            return result;\n        }\n        long smallestEven9 = arr.Min(x\
    \ => x % 2 == 0);\n        long smallestIndex9 = arr.IndexOf(smallestEven9);\n\
    \        if (smallestIndex9 == arr.Count - 1) {\n            result.Add(smallestEven9);\n\
    \            return result;\n        }\n        long smallestEven10 = arr.Min(x\
    \ => x % 2 == 1);\n        long smallestIndex10 = arr.IndexOf(smallestEven10);\n\
    \        if (smallestIndex10", "        List<long> result = new List<long>();\n\
    \        long smallestEvenValue = arr.Min();\n        int smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0) {\n                if (smallestEvenValue % 2 == 0) {\n                  \
    \  smallestEvenValue = arr[i];\n                    smallestIndex = i;\n     \
    \           }\n            }\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestIndex);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallestEven = arr.Min();\n       \
    \ long smallestIndex = arr.IndexOf(smallestEven);\n        bool foundSmallestEven\
    \ = false;\n        bool foundSmallestIndex = false;\n        foreach (long n\
    \ in arr) {\n            if (n % 2 == 0) {\n                if (smallestEven <\
    \ n) {\n                    smallestEven = n;\n                    foundSmallestEven\
    \ = true;\n                }\n            }\n            else {\n            \
    \    if (smallestIndex < n) {\n                    smallestIndex = n;\n      \
    \              foundSmallestIndex = true;\n                }\n            }\n\
    \        }\n        if (foundSmallestEven) {\n            result.Add(smallestEven);\n\
    \            result.Add(smallestIndex);\n        }\n        else if (foundSmallestIndex)\
    \ {\n            result.Add(smallestIndex);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallestEvenValue =\
    \ arr.Min();\n        long smallestIndex = 0;\n        bool foundSmallestEvenValue\
    \ = false;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ < smallestEvenValue) {\n                smallestEvenValue = arr[i];\n      \
    \          smallestIndex = i;\n                foundSmallestEvenValue = true;\n\
    \            }\n        }\n        if (foundSmallestEvenValue) {\n           \
    \ result.Add(smallestEvenValue);\n            result.Add(smallestIndex);\n   \
    \     }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEven = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEven);\n\
    \        if (smallestIndex != -1) {\n            smallestEven = arr[smallestIndex];\n\
    \        }\n        foreach (var item in arr) {\n            if (item % 2 == 0)\
    \ {\n                if (smallestEven < item) {\n                    smallestEven\
    \ = item;\n                    smallestIndex = arr.IndexOf(item);\n          \
    \      }\n            }\n        }\n        if (smallestIndex != -1) {\n     \
    \       result.Add(smallestEven);\n            result.Add(smallestIndex);\n  \
    \      }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n\
    \        bool foundSmallestEvenValue = false;\n        foreach (long n in arr)\
    \ {\n            if (n % 2 == 0) {\n                if (smallestEvenValue % 2\
    \ == 0) {\n                    smallestEvenValue = n;\n                    smallestIndex\
    \ = arr.IndexOf(n);\n                    foundSmallestEvenValue = true;\n    \
    \            }\n            }\n        }\n        if (foundSmallestEvenValue)\
    \ {\n            result.Add(smallestEvenValue);\n            result.Add(smallestIndex);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEvenValue = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEvenValue);\n\
    \        if (smallestIndex == -1) {\n            return result;\n        }\n \
    \       long smallestEvenValueIndex = arr.IndexOf(smallestEvenValue);\n      \
    \  if (smallestEvenValueIndex == -1) {\n            return result;\n        }\n\
    \        bool isEven = true;\n        long evenValue = smallestEvenValue;\n  \
    \      long evenIndex = smallestEvenValueIndex;\n        foreach (long i in arr)\
    \ {\n            if (i % 2 == 0) {\n                isEven = false;\n        \
    \        if (evenValue < i) {\n                    evenValue = i;\n          \
    \          evenIndex = i;\n                }\n            }\n        }\n     \
    \   if (isEven) {\n            result.Add(evenValue);\n            result.Add(evenIndex);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEven = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEven);\n\
    \        bool isEven = smallestEven % 2 == 0;\n        long smallestEvenValue\
    \ = smallestEven;\n        long smallestEvenIndex = smallestIndex;\n        foreach\
    \ (long n in arr) {\n            if (n % 2 == 0) {\n                if (isEven)\
    \ {\n                    smallestEvenValue = n;\n                    smallestEvenIndex\
    \ = arr.IndexOf(n);\n                    isEven = false;\n                }\n\
    \                else {\n                    if (smallestEvenValue < n) {\n  \
    \                      smallestEvenValue = n;\n                        smallestEvenIndex\
    \ = arr.IndexOf(n);\n                    }\n                }\n            }\n\
    \        }\n        result.Add(smallestEvenValue);\n        result.Add(smallestEvenIndex);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallest_even_value = arr.Min();\n        long smallest_index = arr.IndexOf(smallest_even_value);\n\
    \        long smallest_value = smallest_even_value;\n        bool found = false;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0) {\n                found = true;\n                smallest_value = arr[i];\n\
    \                smallest_index = i;\n            }\n        }\n        if (found)\
    \ {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEven = arr.Min();\n        int smallestIndex = arr.FindIndex(x\
    \ => x == smallestEven);\n        if (smallestIndex == -1) {\n            return\
    \ result;\n        }\n        bool isEven = true;\n        for (int i = 0; i <\
    \ arr.Count; i++) {\n            if (arr[i] != smallestEven) {\n             \
    \   isEven = false;\n                break;\n            }\n        }\n      \
    \  if (isEven) {\n            smallestEven = smallestEven % 2;\n        }\n  \
    \      result.Add(smallestEven);\n        result.Add(smallestIndex);\n       \
    \ return result;", "        List<long> result = new List<long>();\n        long\
    \ smallestEven = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEven);\n\
    \        long smallestValue = smallestEven;\n        long smallestIndexValue =\
    \ smallestIndex;\n        bool isEven = true;\n        foreach (long n in arr)\
    \ {\n            if (n % 2 == 0) {\n                isEven = false;\n        \
    \    }\n            if (isEven) {\n                if (n < smallestEven) {\n \
    \                   smallestEven = n;\n                    smallestIndexValue\
    \ = smallestIndex;\n                }\n                if (n == smallestEven)\
    \ {\n                    smallestIndex++;\n                }\n            }\n\
    \        }\n        result.Add(smallestEven);\n        result.Add(smallestIndexValue);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallestEven = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEven);\n\
    \        if (smallestIndex != -1) {\n            smallestEven = arr[smallestIndex];\n\
    \        }\n        if (smallestEven % 2 == 0) {\n            result.Add(smallestEven);\n\
    \        }\n        else {\n            int smallestEvenIndex = arr.FindIndex(x\
    \ => x % 2 == 0);\n            if (smallestEvenIndex != -1) {\n              \
    \  smallestEven = arr[smallestEvenIndex];\n            }\n            int smallestEvenIndex\
    \ = arr.FindIndex(x => x % 2 == 0);\n            if (smallestEvenIndex != -1)\
    \ {\n                smallestEven = arr[smallestEvenIndex];\n            }\n \
    \           int smallestEvenIndex = arr.FindIndex(x => x % 2 == 0);\n        \
    \    if (smallestEvenIndex != -1) {\n                smallestEven = arr[smallestEvenIndex];\n\
    \            }\n            int smallestEvenIndex = arr.FindIndex(x => x % 2 ==\
    \ 0);\n            if (smallestEvenIndex != -1) {\n                smallestEven\
    \ = arr[smallestEvenIndex];\n            }\n            int smallestEvenIndex\
    \ = arr.FindIndex(x => x % 2 == 0);\n            if (smallestEvenIndex != -1)\
    \ {\n                smallestEven = arr[smallestEvenIndex];\n            }\n \
    \           int smallestEvenIndex = arr.FindIndex(x => x % 2 == 0);\n        \
    \    if (smallestEvenIndex != -1) {\n                smallestEven = arr[smallestEvenIndex];\n\
    \            }\n            int smallestEvenIndex = arr.FindIndex(x => x % 2 ==\
    \ 0);\n            if (smallestEvenIndex != -1) {\n                smallestEven\
    \ = arr[smallestEvenIndex];\n            }\n            int smallestEvenIndex\
    \ = arr.FindIndex(x => x % 2 == 0);\n            if (smallestEvenIndex != -1)\
    \ {\n                smallestEven = arr[smallestEvenIndex];\n            }\n \
    \           int smallestEvenIndex = arr.FindIndex(x => x % 2 == 0);\n        \
    \    if (smallestEvenIndex != -1) {\n                smallestEven = arr[smallestEvenIndex];\n\
    \            }\n            int smallestEvenIndex = arr.FindIndex(x => x % 2 ==\
    \ 0);\n            if (smallestEvenIndex != -1) {\n                smallestEven\
    \ = arr[smallestEvenIndex];\n            }\n            int smallestEvenIndex\
    \ = arr.FindIndex(x => x % 2 == 0);\n            if (smallestEvenIndex != -1)\
    \ {\n                smallestEven = arr[smallestEvenIndex];\n            }\n \
    \           int smallestEvenIndex = arr.FindIndex(x => x % 2 == 0);\n        \
    \    if (smallestEvenIndex != ", "        long smallestEven = arr.Min();\n   \
    \     long smallestIndex = arr.IndexOf(smallestEven);\n        List<long> result\
    \ = new List<long>();\n        foreach (var item in arr.Where(x => x % 2 == 0))\
    \ {\n            if (item == smallestEven) {\n                result.Add(smallestEven);\n\
    \                result.Add(smallestIndex);\n                break;\n        \
    \    }\n            if (item < smallestEven) {\n                smallestEven =\
    \ item;\n                smallestIndex = arr.IndexOf(smallestEven);\n        \
    \    }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0) {\n                if (smallestEvenValue < arr[i]) {\n                  \
    \  smallestEvenValue = arr[i];\n                    smallestIndex = i;\n     \
    \           }\n            }\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestIndex);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long minValue = arr.Min();\n        long\
    \ minIndex = 0;\n        long minEvenValue = 0;\n        foreach (long i in arr)\
    \ {\n            if (i % 2 == 0) {\n                if (minEvenValue == 0) {\n\
    \                    minEvenValue = i;\n                    minIndex = i;\n  \
    \              }\n                else if (minEvenValue > i) {\n             \
    \       minEvenValue = i;\n                    minIndex = i;\n               \
    \ }\n            }\n        }\n        result.Add(minEvenValue);\n        result.Add(minIndex);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n \
    \       bool foundSmallestEvenValue = false;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                if (!foundSmallestEvenValue)\
    \ {\n                    smallestEvenValue = arr[i];\n                    foundSmallestEvenValue\
    \ = true;\n                }\n                else if (arr[i] < smallestEvenValue)\
    \ {\n                    smallestEvenValue = arr[i];\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        if (foundSmallestEvenValue)\
    \ {\n            result.Add(smallestEvenValue);\n            result.Add(smallestIndex);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEven = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEven);\n\
    \        bool hasEven = arr.Any(x => x % 2 == 0);\n        if (hasEven) {\n  \
    \          smallestEven = arr.Min(x => x % 2 == 0);\n            smallestIndex\
    \ = arr.IndexOf(smallestEven);\n        }\n        result.Add(smallestEven);\n\
    \        result.Add(smallestIndex);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallestEven = arr.Min();\n       \
    \ long smallestIndex = arr.IndexOf(smallestEven);\n        if (smallestIndex ==\
    \ arr.Count - 1) {\n            return result;\n        }\n        long smallestEven2\
    \ = arr.Skip(smallestIndex + 1).Min();\n        long smallestIndex2 = arr.IndexOf(smallestEven2);\n\
    \        if (smallestIndex2 == arr.Count - 1) {\n            return result;\n\
    \        }\n        long smallestEven3 = arr.Skip(smallestIndex2 + 1).Min();\n\
    \        long smallestIndex3 = arr.IndexOf(smallestEven3);\n        if (smallestIndex3\
    \ == arr.Count - 1) {\n            return result;\n        }\n        long smallestEven4\
    \ = arr.Skip(smallestIndex3 + 1).Min();\n        long smallestIndex4 = arr.IndexOf(smallestEven4);\n\
    \        if (smallestIndex4 == arr.Count - 1) {\n            return result;\n\
    \        }\n        long smallestEven5 = arr.Skip(smallestIndex4 + 1).Min();\n\
    \        long smallestIndex5 = arr.IndexOf(smallestEven5);\n        if (smallestIndex5\
    \ == arr.Count - 1) {\n            return result;\n        }\n        long smallestEven6\
    \ = arr.Skip(smallestIndex5 + 1).Min();\n        long smallestIndex6 = arr.IndexOf(smallestEven6);\n\
    \        if (smallestIndex6 == arr.Count - 1) {\n            return result;\n\
    \        }\n        long smallestEven7 = arr.Skip(smallestIndex6 + 1).Min();\n\
    \        long smallestIndex7 = arr.IndexOf(smallestEven7);\n        if (smallestIndex7\
    \ == arr.Count - 1) {\n            return result;\n        }\n        long smallestEven8\
    \ = arr.Skip(smallestIndex7 + 1).Min();\n        long smallestIndex8 = arr.IndexOf(smallestEven8);\n\
    \        if (smallestIndex8 == arr.Count - 1) {\n            return result;\n\
    \        }\n        long smallestEven9 = arr.Skip(smallestIndex8 + 1).Min();\n\
    \        long smallestIndex9 = arr.IndexOf(smallestEven9);\n        if (smallestIndex9\
    \ == arr.Count - 1) {\n            return result;\n        }\n        long smallestEven10\
    \ = arr.Skip(smallestIndex9 + 1).Min();\n        long smallestIndex10 = arr.IndexOf(smallestEven10);\n\
    \        if (smallestIndex10 == arr.Count - 1) {\n            return result;\n\
    \        }\n        long smallestEven11 = arr.Skip(smallestIndex10 + 1).Min();\n\
    \        long smallestIndex11 = arr.IndexOf(smallestEven11);\n        if (smallestIndex11",
  "        List<long> result = new List<long>();\n        long smalest_value = 0;\n\
    \        int smalest_index = 0;\n        foreach (var item in arr) {\n       \
    \     if (item % 2 == 0) {\n                if (smalest_value < item) {\n    \
    \                smalest_value = item;\n                    smalest_index = arr.IndexOf(item);\n\
    \                }\n            }\n        }\n        if (smalest_index > 0) {\n\
    \            result.Add(smalest_value);\n            result.Add(smalest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEvenValue = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEvenValue);\n\
    \        long smallestIndexWithSmallestEvenValue = smallestIndex;\n        long\
    \ smallestIndexWithSmallestEvenValue2 = smallestIndex;\n        bool isSmallestEvenValueFound\
    \ = false;\n        bool isSmallestEvenValueFound2 = false;\n        bool isSmallestEvenValueFound3\
    \ = false;\n        bool isSmallestEvenValueFound4 = false;\n        bool isSmallestEvenValueFound5\
    \ = false;\n        bool isSmallestEvenValueFound6 = false;\n        bool isSmallestEvenValueFound7\
    \ = false;\n        bool isSmallestEvenValueFound8 = false;\n        bool isSmallestEvenValueFound9\
    \ = false;\n        bool isSmallestEvenValueFound10 = false;\n        bool isSmallestEvenValueFound11\
    \ = false;\n        bool isSmallestEvenValueFound12 = false;\n        bool isSmallestEvenValueFound13\
    \ = false;\n        bool isSmallestEvenValueFound14 = false;\n        bool isSmallestEvenValueFound15\
    \ = false;\n        bool isSmallestEvenValueFound16 = false;\n        bool isSmallestEvenValueFound17\
    \ = false;\n        bool isSmallestEvenValueFound18 = false;\n        bool isSmallestEvenValueFound19\
    \ = false;\n        bool isSmallestEvenValueFound20 = false;\n        bool isSmallestEvenValueFound21\
    \ = false;\n        bool isSmallestEvenValueFound22 = false;\n        bool isSmallestEvenValueFound23\
    \ = false;\n        bool isSmallestEvenValueFound24 = false;\n        bool isSmallestEvenValueFound25\
    \ = false;\n        bool isSmallestEvenValueFound26 = false;\n        bool isSmallestEvenValueFound27\
    \ = false;\n        bool isSmallestEvenValueFound28 = false;\n        bool isSmallestEvenValueFound29\
    \ = false;\n        bool isSmallestEvenValueFound30 = false;\n        bool isSmallestEvenValueFound31\
    \ = false;\n        bool isSmallestEvenValueFound32 = false;\n        bool isSmallestEvenValueFound33\
    \ = false;\n        bool isSmallestEvenValueFound34 = false;\n        bool isSmallestEvenValueFound35\
    \ = false;\n        bool isSmallestEvenValueFound36 = false;\n        bool isSmallestEvenValueFound37\
    \ = false;\n        bool is", "        List<long> result = new List<long>();\n\
    \        long smallestEven = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEven);\n\
    \        bool found = false;\n        foreach (long i in arr) {\n            if\
    \ (i % 2 == 0) {\n                found = true;\n                if (smallestEven\
    \ < i) {\n                    smallestEven = i;\n                    smallestIndex\
    \ = arr.IndexOf(i);\n                }\n            }\n        }\n        if (found)\
    \ {\n            result.Add(smallestEven);\n            result.Add(smallestIndex);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_even_value = arr.Min();\n        long smallest_even_index\
    \ = arr.IndexOf(smallest_even_value);\n        bool found = false;\n        long\
    \ smallest_even_value_plus_one = smallest_even_value + 1;\n        foreach (long\
    \ n in arr) {\n            if (n % 2 == 0) {\n                if (smallest_even_value\
    \ == n) {\n                    found = true;\n                }\n            \
    \    else if (smallest_even_value == smallest_even_value_plus_one) {\n       \
    \             found = true;\n                }\n                else if (smallest_even_index\
    \ < arr.IndexOf(n)) {\n                    found = true;\n                }\n\
    \            }\n        }\n        if (found) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_even_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallestEvenValue =\
    \ arr.Min();\n        int smallestIndex = 0;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0 && arr[i] < smallestEvenValue) {\n \
    \               smallestEvenValue = arr[i];\n                smallestIndex = i;\n\
    \            }\n        }\n        result.Add(smallestEvenValue);\n        result.Add(smallestIndex);\n\
    \        return result;", "        long smallestEven = arr.Min();\n        List<long>\
    \ result = new List<long>();\n        foreach (long i in arr) {\n            if\
    \ (i % 2 == 0) {\n                if (smallestEven == i) {\n                 \
    \   result.Add(smallestEven);\n                    break;\n                }\n\
    \                if (smallestEven < i) {\n                    smallestEven = i;\n\
    \                }\n            }\n        }\n        if (result.Count == 0) {\n\
    \            return new List<long>();\n        }\n        if (result.Count > 1)\
    \ {\n            int index = result.IndexOf(smallestEven);\n            if (index\
    \ != -1) {\n                result.Insert(index, smallestEven);\n            }\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEvenValue = arr.Min();\n        int smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0) {\n                if (arr[i] < smallestEvenValue) {\n                  \
    \  smallestEvenValue = arr[i];\n                    smallestIndex = i;\n     \
    \           }\n            }\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestIndex);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallestEven = arr.Min();\n       \
    \ long smallestIndex = arr.IndexOf(smallestEven);\n        bool isEven = smallestEven\
    \ % 2 == 0;\n        bool isSmallestEven = smallestIndex == 0;\n        bool isSmallestIndex\
    \ = smallestIndex == arr.Count - 1;\n        if (isEven && isSmallestEven && isSmallestIndex)\
    \ {\n            result.Add(smallestEven);\n            result.Add(smallestIndex);\n\
    \            return result;\n        }\n        if (isEven && isSmallestEven)\
    \ {\n            result.Add(smallestEven);\n            return result;\n     \
    \   }\n        if (isSmallestIndex) {\n            result.Add(smallestIndex);\n\
    \            return result;\n        }\n        if (isSmallestEven) {\n      \
    \      result.Add(smallestEven);\n            return result;\n        }\n    \
    \    return result;", "        List<long> result = new List<long>();\n       \
    \ long smallestEven = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEven);\n\
    \        if (smallestIndex == -1) {\n            return result;\n        }\n \
    \       bool isEven = true;\n        long smallestIndex2 = smallestIndex;\n  \
    \      long smallestEven2 = smallestEven;\n        long smallestEven3 = smallestEven;\n\
    \        long smallestEven4 = smallestEven;\n        long smallestEven5 = smallestEven;\n\
    \        long smallestEven6 = smallestEven;\n        long smallestEven7 = smallestEven;\n\
    \        long smallestEven8 = smallestEven;\n        long smallestEven9 = smallestEven;\n\
    \        long smallestEven10 = smallestEven;\n        long smallestEven11 = smallestEven;\n\
    \        long smallestEven12 = smallestEven;\n        long smallestEven13 = smallestEven;\n\
    \        long smallestEven14 = smallestEven;\n        long smallestEven15 = smallestEven;\n\
    \        long smallestEven16 = smallestEven;\n        long smallestEven17 = smallestEven;\n\
    \        long smallestEven18 = smallestEven;\n        long smallestEven19 = smallestEven;\n\
    \        long smallestEven20 = smallestEven;\n        long smallestEven21 = smallestEven;\n\
    \        long smallestEven22 = smallestEven;\n        long smallestEven23 = smallestEven;\n\
    \        long smallestEven24 = smallestEven;\n        long smallestEven25 = smallestEven;\n\
    \        long smallestEven26 = smallestEven;\n        long smallestEven27 = smallestEven;\n\
    \        long smallestEven28 = smallestEven;\n        long smallestEven29 = smallestEven;\n\
    \        long smallestEven30 = smallestEven;\n        long smallestEven31 = smallestEven;\n\
    \        long smallestEven32 = smallestEven;\n        long smallestEven33 = smallestEven;\n\
    \        long smallestEven34 = smallestEven;\n        long smallestEven35 = smallestEven;\n\
    \        long smallestEven36 = smallestEven;\n        long smallestEven37 = smallestEven;\n\
    \        long smallestEven38 = smallestEven;\n        long smallestEven39 = smallestEven;\n\
    \        long smallestEven40", "        List<long> result = new List<long>();\n\
    \        long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n\
    \        bool isSmallestEvenValueFound = false;\n        foreach (long i in arr)\
    \ {\n            if (i % 2 == 0) {\n                if (smallestEvenValue % 2\
    \ == 0) {\n                    smallestEvenValue = i;\n                    smallestIndex\
    \ = arr.IndexOf(i);\n                    isSmallestEvenValueFound = true;\n  \
    \              }\n            }\n        }\n        if (isSmallestEvenValueFound)\
    \ {\n            result.Add(smallestEvenValue);\n            result.Add(smallestIndex);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEvenValue = arr.Min();\n        int smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0) {\n                if (smallestEvenValue % 2 == 0) {\n                  \
    \  smallestEvenValue = arr[i];\n                    smallestIndex = i;\n     \
    \           }\n            }\n        }\n        if (smallestEvenValue % 2 ==\
    \ 0) {\n            result.Add(smallestEvenValue);\n            result.Add(smallestIndex);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEvenValue = arr.Min();\n        int smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0) {\n                if (smallestEvenValue < arr[i]) {\n                  \
    \  smallestEvenValue = arr[i];\n                    smallestIndex = i;\n     \
    \           }\n            }\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestIndex);\n        return result;"]
stop_tokens:
- "\n    }\n"
