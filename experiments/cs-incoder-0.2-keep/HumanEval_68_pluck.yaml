name: HumanEval_68_pluck
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // \"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n    // your task is to pluck one of the nodes and return it.\n\
  \    // The plucked node should be the node with the smallest even value.\n    //\
  \ If multiple nodes with the same smallest even value are found return the node\
  \ that has smallest index.\n    // The plucked node should be returned in a list,\
  \ [ smalest_value, its index ],\n    // If there are no even values or the given\
  \ array is empty, return [].\n    // Example 1:\n    // Input: [4,2,3]\n    // Output:\
  \ [2, 1]\n    // Explanation: 2 has the smallest even value, and 2 has the smallest\
  \ index.\n    // Example 2:\n    // Input: [1,2,3]\n    // Output: [2, 1]\n    //\
  \ Explanation: 2 has the smallest even value, and 2 has the smallest index. \n \
  \   // Example 3:\n    // Input: []\n    // Output: []\n    // Example 4:\n    //\
  \ Input: [5, 0, 3, 0, 4, 2]\n    // Output: [0, 1]\n    // Explanation: 0 is the\
  \ smallest value, but  there are two zeros,\n    // so we will choose the first\
  \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
  \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
  \ arr) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
  \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
  \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
  \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new\
  \ List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
  \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
  \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
  \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
  \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,\
  \ (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n\
  \    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,\
  \ (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
completions: ["        List<long> result = new List<long>();\n        long minValue\
    \ = arr.Min();\n        long minIndex = 0;\n        long minEvenValue = minValue\
    \ % 2 == 0 ? minValue : minValue + 1;\n        foreach (long n in arr) {\n   \
    \         if (n % 2 == 0) {\n                if (minValue > minEvenValue) {\n\
    \                    minEvenValue = minValue;\n                    minIndex =\
    \ n;\n                }\n            }\n            else {\n                if\
    \ (minValue < minEvenValue) {\n                    minEvenValue = minValue;\n\
    \                    minIndex = n;\n                }\n            }\n       \
    \ }\n        result.Add(minEvenValue);\n        result.Add(minIndex);\n      \
    \  return result;", "        List<long> result = new List<long>();\n        long\
    \ smalest_value = arr.Min();\n        long smalest_index = 0;\n        long smalest_even_value\
    \ = 0;\n        long smalest_even_count = 0;\n        long smalest_even_index\
    \ = 0;\n        foreach (long n in arr) {\n            if (n % 2 == 0) {\n   \
    \             if (smalest_even_count < n) {\n                    smalest_even_value\
    \ = n;\n                    smalest_even_count = n;\n                    smalest_even_index\
    \ = n;\n                }\n                else {\n                    smalest_even_count\
    \ = smalest_even_count + n;\n                }\n            }\n            else\
    \ {\n                if (smalest_even_count < n) {\n                    smalest_value\
    \ = n;\n                    smalest_index = n;\n                }\n          \
    \      else {\n                    smalest_even_count = smalest_even_count + n;\n\
    \                }\n            }\n        }\n        if (smalest_even_count ==\
    \ 0) {\n            return new List<long>();\n        }\n        if (smalest_even_count\
    \ == arr.Count) {\n            result.Add(smalest_value);\n            result.Add(smalest_index);\n\
    \            return result;\n        }\n        if (smalest_even_count == arr.Count\
    \ - 1) {\n            result.Add(smalest_value);\n            result.Add(smalest_index);\n\
    \            result.Add(smalest_even_value);\n            result.Add(smalest_even_index);\n\
    \            return result;\n        }\n        if (smalest_even_count > arr.Count\
    \ - 1) {\n            result.Add(smalest_value);\n            result.Add(smalest_index);\n\
    \            result.Add(smalest_even_value);\n            result.Add(smalest_even_index);\n\
    \            result.Add(smalest_even_count);\n            return result;\n   \
    \     }\n        if (smalest_even_count == arr.Count - 2) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n            result.Add(smalest_even_value);\n\
    \            result.Add(smalest_even_index);\n            result.Add(smalest_even_count);\n\
    \            result.Add(smalest_even_count + smalest_even_index);\n          \
    \  return result;\n        }\n        if (smalest_even_count == arr.Count - 3)\
    \ {\n            result.Add(smalest_value);\n            result.Add(smalest_index);\n\
    \            result.Add(smalest_even_value);\n            result.Add(smalest_even_index);\n\
    \            result.Add(smalest_even_count);\n            result.Add(smalest_even_count\
    \ + smalest_even_index);\n            result.Add(smalest_even_count + smalest_even_count\
    \ + smalest_even_index);\n            return result;\n        }\n        if (smalest_ev",
  "        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_index == -1) {\n            return result;\n        }\n\
    \        long smallest_value = arr[smallest_index];\n        long smallest_even_value\
    \ = arr[smallest_index];\n        bool found = false;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n                smallest_even_value\
    \ = arr[i];\n                smallest_index = i;\n                found = true;\n\
    \                break;\n            }\n        }\n        if (found) {\n    \
    \        result.Add(smallest_even_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;", "        long min = arr.Min();\n        long\
    \ max = arr.Max();\n        List<long> result = new List<long>();\n        long\
    \ index = 0;\n        long smalest_value = min;\n        bool found = false;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] < min)\
    \ {\n                smalest_value = arr[i];\n                found = false;\n\
    \            } else if (arr[i] == min) {\n                found = true;\n    \
    \        } else if (arr[i] > min && arr[i] < max && !found) {\n              \
    \  smalest_value = arr[i];\n                index = i;\n            }\n      \
    \  }\n        if (smalest_value == min && arr.Count == 0) {\n            return\
    \ new List<long>();\n        }\n        result.Add(smalest_value);\n        result.Add(index);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallestEven = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEven);\n\
    \        if (smallestIndex == -1) {\n            return result;\n        }\n \
    \       foreach (var item in arr.Where((x, i) => x % 2 == 0 && i != smallestIndex))\
    \ {\n            if (item < smallestEven) {\n                smallestEven = item;\n\
    \                smallestIndex = i;\n            }\n        }\n        result.Add(smallestEven);\n\
    \        result.Add(smallestIndex);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallest_value = arr.Min();\n     \
    \   long smallest_index = 0;\n        bool found = false;\n        for (int i\
    \ = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n           \
    \     found = true;\n                if (arr[i] < smallest_value) {\n        \
    \            smallest_value = arr[i];\n                    smallest_index = i;\n\
    \                }\n            }\n        }\n        if (found) {\n         \
    \   result.Add(smallest_value);\n            result.Add(smallest_index);\n   \
    \     }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n\
    \        bool foundSmallestEvenValue = false;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                if (smallestEvenValue\
    \ == arr[i]) {\n                    foundSmallestEvenValue = true;\n         \
    \       }\n                else {\n                    smallestEvenValue = arr[i];\n\
    \                    smallestIndex = i;\n                }\n            }\n  \
    \      }\n        if (foundSmallestEvenValue) {\n            result.Add(smallestEvenValue);\n\
    \            result.Add(smallestIndex);\n        }\n        return result;", " \
    \       long smalest_value = 0;\n        int smalest_index = 0;\n        List<long>\
    \ result = new List<long>();\n        foreach (var item in arr) {\n          \
    \  if (item % 2 == 0) {\n                smalest_value = item;\n             \
    \   smalest_index = arr.IndexOf(item);\n            }\n        }\n        if (smalest_index\
    \ != 0) {\n            result.Add(smalest_value);\n            result.Add(smalest_index);\n\
    \        }\n        return result;", "        long smalest_value = arr.Min();\n\
    \        long smalest_index = 0;\n        List<long> result = new List<long>();\n\
    \        foreach (var item in arr) {\n            if (item % 2 == 0) {\n     \
    \           if (item < smalest_value) {\n                    smalest_value = item;\n\
    \                    smalest_index = arr.IndexOf(item);\n                }\n \
    \           }\n        }\n        if (smalest_index > 0) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long smallestEvenValue\
    \ = arr.Min();\n        long smallestIndex = 0;\n        bool isSmallestEvenValueFound\
    \ = false;\n        bool isSmallestIndexFound = false;\n        foreach (long\
    \ value in arr) {\n            if (isSmallestEvenValueFound == false && value\
    \ % 2 == 0) {\n                isSmallestEvenValueFound = true;\n            \
    \    smallestEvenValue = value;\n            }\n            if (isSmallestIndexFound\
    \ == false && value == smallestEvenValue) {\n                isSmallestIndexFound\
    \ = true;\n                smallestIndex = arr.IndexOf(value);\n            }\n\
    \            if (isSmallestEvenValueFound && isSmallestIndexFound) {\n       \
    \         break;\n            }\n        }\n        if (isSmallestEvenValueFound)\
    \ {\n            result.Add(smallestEvenValue);\n            result.Add(smallestIndex);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_value = 0;\n        long smallest_index = 0;\n        long\
    \ smallest_even_value = 0;\n        long smallest_even_node_index = 0;\n     \
    \   bool is_even = false;\n        bool is_smallest = true;\n        foreach (long\
    \ n in arr) {\n            if (n % 2 == 0) {\n                is_even = true;\n\
    \                smallest_even_value = n;\n                smallest_even_node_index\
    \ = arr.IndexOf(n);\n            }\n            else {\n                is_even\
    \ = false;\n                if (smallest_even_value == 0) {\n                \
    \    smallest_even_value = n;\n                    smallest_even_node_index =\
    \ arr.IndexOf(n);\n                }\n                else {\n               \
    \     if (n < smallest_even_value) {\n                        is_smallest = false;\n\
    \                    }\n                    else {\n                        is_smallest\
    \ = true;\n                    }\n                }\n            }\n         \
    \   if (is_even) {\n                if (is_smallest) {\n                    smallest_value\
    \ = n;\n                    smallest_index = arr.IndexOf(n);\n               \
    \ }\n            }\n        }\n        if (smallest_even_value == 0) {\n     \
    \       return result;\n        }\n        else {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_even_node_index);\n            return result;\n\
    \        }", "        long min = arr.Min();\n        long max = arr.Max();\n \
    \       List<long> result = new List<long>();\n        List<long> evens = new\
    \ List<long>();\n        foreach (long n in arr) {\n            if (n % 2 == 0)\
    \ {\n                evens.Add(n);\n            }\n        }\n        if (evens.Count\
    \ > 0) {\n            int index = evens.IndexOf(min);\n            if (index >=\
    \ 0) {\n                result.Add(min);\n                result.Add(index);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long smallestEven = arr.Min();\n        long smallestIndex\
    \ = arr.IndexOf(smallestEven);\n        if (smallestIndex == -1) {\n         \
    \   return result;\n        }\n        bool found = false;\n        for (int i\
    \ = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n           \
    \     found = true;\n                break;\n            }\n        }\n      \
    \  if (found) {\n            result.Add(smallestEven);\n            result.Add(smallestIndex);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEven = arr.Min();\n        int smallestIndex = arr.IndexOf(smallestEven);\n\
    \        bool isEven = smallestEven % 2 == 0;\n        bool isSmallestEven = smallestEven\
    \ < arr.Min();\n        bool isSmallestEvenIndex = smallestIndex < arr.IndexOf(smallestEven);\n\
    \        if (isEven && isSmallestEven) {\n            result.Add(smallestEven);\n\
    \            result.Add(smallestIndex);\n        } else if (isSmallestEven) {\n\
    \            result.Add(smallestEven);\n            result.Add(smallestIndex);\n\
    \        } else if (isSmallestEvenIndex) {\n            result.Add(smallestEven);\n\
    \            result.Add(smallestIndex);\n        } else {\n            result.Add(smallestEven);\n\
    \            result.Add(smallestIndex);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long smallestEven = arr.Min();\n\
    \        long smallestIndex = arr.IndexOf(smallestEven);\n        bool foundSmallestEven\
    \ = false;\n        foreach (long n in arr) {\n            if (n % 2 == 0) {\n\
    \                if (smallestEven == n) {\n                    foundSmallestEven\
    \ = true;\n                }\n                else {\n                    smallestEven\
    \ = n;\n                    smallestIndex = arr.IndexOf(n);\n                }\n\
    \            }\n        }\n        if (foundSmallestEven) {\n            result.Add(smallestEven);\n\
    \            result.Add(smallestIndex);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long smallestEven = arr.Min();\n\
    \        long smallestIndex = arr.IndexOf(smallestEven);\n        if (smallestIndex\
    \ == -1) return result;\n        long smallestEvenValue = arr[smallestIndex];\n\
    \        long smallestEvenIndex = 0;\n        bool foundSmallestEven = false;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] != smallestEvenValue)\
    \ {\n                foundSmallestEven = false;\n                continue;\n \
    \           }\n            if (foundSmallestEven) {\n                result.Add(smallestEvenIndex);\n\
    \                break;\n            }\n            foundSmallestEven = true;\n\
    \            smallestEvenIndex = i;\n            smallestEvenValue = arr[i];\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEven = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEven);\n\
    \        if (smallestIndex == arr.Count - 1) {\n            result.Add(smallestEven);\n\
    \            return result;\n        }\n        long smallestEven2 = arr.Min(x\
    \ => x % 2 == 0);\n        if (smallestEven2 == smallestEven) {\n            smallestEven\
    \ = smallestEven2;\n            smallestIndex = arr.IndexOf(smallestEven);\n \
    \       }\n        if (smallestIndex == arr.Count - 1) {\n            result.Add(smallestEven);\n\
    \            return result;\n        }\n        long smallestEven3 = arr.Min(x\
    \ => x % 2 == 0);\n        if (smallestEven3 == smallestEven) {\n            smallestEven\
    \ = smallestEven3;\n            smallestIndex = arr.IndexOf(smallestEven);\n \
    \       }\n        if (smallestIndex == arr.Count - 1) {\n            result.Add(smallestEven);\n\
    \            return result;\n        }\n        long smallestEven4 = arr.Min(x\
    \ => x % 2 == 0);\n        if (smallestEven4 == smallestEven) {\n            smallestEven\
    \ = smallestEven4;\n            smallestIndex = arr.IndexOf(smallestEven);\n \
    \       }\n        if (smallestIndex == arr.Count - 1) {\n            result.Add(smallestEven);\n\
    \            return result;\n        }\n        long smallestEven5 = arr.Min(x\
    \ => x % 2 == 0);\n        if (smallestEven5 == smallestEven) {\n            smallestEven\
    \ = smallestEven5;\n            smallestIndex = arr.IndexOf(smallestEven);\n \
    \       }\n        if (smallestIndex == arr.Count - 1) {\n            result.Add(smallestEven);\n\
    \            return result;\n        }\n        long smallestEven6 = arr.Min(x\
    \ => x % 2 == 0);\n        if (smallestEven6 == smallestEven) {\n            smallestEven\
    \ = smallestEven6;\n            smallestIndex = arr.IndexOf(smallestEven);\n \
    \       }\n        if (smallestIndex == arr.Count - 1) {\n            result.Add(smallestEven);\n\
    \            return result;\n        }\n        long smallestEven7 = arr.Min(x\
    \ => x % 2 == 0);\n        if (smallestEven7 == smallestEven) {\n            smallestEven\
    \ = smallestEven7;\n            smallestIndex = arr.IndexOf(smallestEven);\n \
    \       }\n        if (smallestIndex == arr.Count - 1) {\n            result.Add(smallestEven);\n\
    \            return result;\n        }\n        long smallestEven8 = arr.Min(x\
    \ => x % 2 == 0);\n        if (smallestEven8", "        List<long> result = new\
    \ List<long>();\n        long smallest_value = arr.Min();\n        long smallest_index\
    \ = 0;\n        long smallest_even_value = 0;\n        bool found = false;\n \
    \       foreach (long value in arr) {\n            if (value % 2 == 0) {\n   \
    \             if (smallest_value == 0) {\n                    smallest_even_value\
    \ = value;\n                    smallest_index = arr.IndexOf(value);\n       \
    \             found = true;\n                }\n                else if (smallest_value\
    \ == value && smallest_index == arr.IndexOf(value)) {\n                    smallest_even_value\
    \ = value;\n                    smallest_index = arr.IndexOf(value);\n       \
    \             found = true;\n                }\n                else if (smallest_value\
    \ == value && smallest_index > arr.IndexOf(value)) {\n                    smallest_even_value\
    \ = value;\n                    smallest_index = arr.IndexOf(value);\n       \
    \             found = true;\n                }\n            }\n        }\n   \
    \     if (found) {\n            result.Add(smallest_even_value);\n           \
    \ result.Add(smallest_index);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long minValue = arr.Min();\n        long\
    \ minIndex = 0;\n        long minEvenValue = minValue % 2 == 0 ? minValue : minValue\
    \ / 2;\n        bool isEven = true;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            long value = arr[i];\n            if (isEven) {\n           \
    \     if (value == minEvenValue) {\n                    result.Add(value);\n \
    \                   minIndex = i;\n                }\n                isEven =\
    \ false;\n            } else {\n                if (value == minEvenValue) {\n\
    \                    result.Add(value);\n                    minIndex = i;\n \
    \               }\n                isEven = true;\n            }\n        }\n\
    \        if (result.Count == 0) {\n            return new List<long>();\n    \
    \    }\n        if (result.Count == 1) {\n            return new List<long> {\
    \ result[0] };\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long smallest_even = arr.Min();\n        long smallest_index\
    \ = arr.IndexOf(smallest_even);\n        if (smallest_even % 2 == 0) {\n     \
    \       result.Add(smallest_even);\n            result.Add(smallest_index);\n\
    \            return result;\n        }\n        long smallest_odd = arr.Min();\n\
    \        long smallest_index_odd = arr.IndexOf(smallest_odd);\n        if (smallest_odd\
    \ % 2 == 0) {\n            result.Add(smallest_odd);\n            result.Add(smallest_index_odd);\n\
    \            return result;\n        }\n        long smallest_odd_index = arr.IndexOf(smallest_odd);\n\
    \        long smallest_even_index = arr.IndexOf(smallest_even);\n        if (smallest_odd_index\
    \ > smallest_even_index) {\n            result.Add(smallest_even);\n         \
    \   result.Add(smallest_even_index);\n            return result;\n        }\n\
    \        long smallest_even_index = arr.IndexOf(smallest_even);\n        long\
    \ smallest_odd_index = arr.IndexOf(smallest_odd);\n        if (smallest_odd_index\
    \ > smallest_even_index) {\n            result.Add(smallest_odd);\n          \
    \  result.Add(smallest_odd_index);\n            return result;\n        }\n  \
    \      long smallest_even = arr.Min();\n        long smallest_index = arr.IndexOf(smallest_even);\n\
    \        if (smallest_even % 2 == 0) {\n            result.Add(smallest_even);\n\
    \            result.Add(smallest_index);\n            return result;\n       \
    \ }\n        long smallest_odd = arr.Min();\n        long smallest_index_odd =\
    \ arr.IndexOf(smallest_odd);\n        if (smallest_odd % 2 == 0) {\n         \
    \   result.Add(smallest_odd);\n            result.Add(smallest_index_odd);\n \
    \           return result;\n        }\n        long smallest_odd_index = arr.IndexOf(smallest_odd);\n\
    \        long smallest_even_index = arr.IndexOf(smallest_even);\n        if (smallest_odd_index\
    \ > smallest_even_index) {\n            result.Add(smallest_even);\n         \
    \   result.Add(smallest_even_index);\n            return result;\n        }\n\
    \        long smallest_even_index = arr.IndexOf(smallest_even);\n        long\
    \ smallest_odd_index = arr.IndexOf(smallest_odd);\n        if (smallest_odd_index\
    \ > smallest_even_index) {\n            result.Add(smallest_odd);\n          \
    \  result.Add(smallest_odd_index);\n            return result;\n        }\n  \
    \      long smallest_even = arr.Min();\n        long smallest_index = arr.IndexOf(smallest_even);\n\
    \        if (smallest_even % 2 == 0) {\n            result.Add(smallest_even);\n\
    \            result.Add(smallest_index);\n            return result;\n       \
    \ }\n        "]
stop_tokens:
- "\n    }\n"
