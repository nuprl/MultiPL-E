name: HumanEval_56_correct_bracketing
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return True\
  \ if every opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
  <\")\n    // False\n    // >>> correct_bracketing(\"<>\")\n    // True\n    // >>>\
  \ correct_bracketing(\"<<><>>\")\n    // True\n    // >>> correct_bracketing(\"\
  ><<>\")\n    // False\n    public static bool CorrectBracketing(string brackets)\
  \ {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
  <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
  \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
  <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
  <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n\
  \    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
  <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
  \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
  <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
  )) == (false));\n    }\n\n}\n"
completions: ["        bool result = true;\n        foreach (char c in brackets) {\n\
    \            if (c == '<') {\n                if (brackets.IndexOf('>', brackets.IndexOf(c)\
    \ + 1) < 0) {\n                    result = false;\n                    break;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   bool result = true;\n        foreach (char c in brackets) {\n            if\
    \ (c == '<') {\n                if (brackets.IndexOf('<', brackets.IndexOf(c)\
    \ + 1) < 0) {\n                    result = false;\n                    break;\n\
    \                }\n            }\n            if (c == '>') {\n             \
    \   if (brackets.IndexOf('>', brackets.IndexOf(c) + 1) < 0) {\n              \
    \      result = false;\n                    break;\n                }\n      \
    \      }\n        }\n        return result;", "        string opening_brackets\
    \ = brackets.Replace(\"<<\", \">>\").Replace(\"<<<\", \">>>\");\n        string\
    \ closing_brackets = brackets.Replace(\">>\", \"<<\").Replace(\">>>\", \"<<<\"\
    );\n        return opening_brackets.Replace(closing_brackets, \"\") == \"\";",
  "        bool result = true;\n        foreach (char c in brackets) {\n         \
    \   if (c == '<') {\n                if (brackets.IndexOf('>', brackets.IndexOf(c)\
    \ + 1) < 0) {\n                    result = false;\n                    break;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   bool result = true;\n        foreach (char c in brackets) {\n            if\
    \ (c == '<') {\n                result &= (brackets.IndexOf('>', brackets.IndexOf(c)\
    \ + 1) != -1);\n            }\n        }\n        return result;", "        string\
    \ openingBrackets = brackets.Replace(\"<<\", \">>\").Replace(\"<\", \">\");\n\
    \        string closingBrackets = openingBrackets.Replace(\">>\", \"<\").Replace(\"\
    >\", \"<\");\n        return openingBrackets.Replace(closingBrackets, \"\") ==\
    \ \"\";", "        string opening_brackets = \"\";\n        string closing_brackets\
    \ = \"\";\n        for (int i = 0; i < brackets.Length; i++) {\n            if\
    \ (brackets[i] == '<') {\n                opening_brackets += brackets[i];\n \
    \           }\n            if (brackets[i] == '>') {\n                closing_brackets\
    \ += brackets[i];\n            }\n        }\n        if (opening_brackets.Length\
    \ != closing_brackets.Length) {\n            return false;\n        }\n      \
    \  bool result = true;\n        for (int i = 0; i < opening_brackets.Length; i++)\
    \ {\n            if (opening_brackets[i] != closing_brackets[i]) {\n         \
    \       result = false;\n            }\n        }\n        return result;", " \
    \       if (brackets == null) return false;\n        bool result = true;\n   \
    \     foreach (char c in brackets) {\n            if (c != '<') result = false;\n\
    \        }\n        return result;", "        Stack<char> stack = new Stack<char>();\n\
    \        foreach (char c in brackets) {\n            if (c == '<') {\n       \
    \         stack.Push(c);\n            } else if (c == '>') {\n               \
    \ if (stack.Count > 0) {\n                    char top = stack.Pop();\n      \
    \              if (top != '<') {\n                        return false;\n    \
    \                }\n                }\n            } else {\n                if\
    \ (stack.Count > 0) {\n                    char top = stack.Pop();\n         \
    \           if (top != c) {\n                        return false;\n         \
    \           }\n                }\n            }\n        }\n        return stack.Count\
    \ == 0;", "        if (brackets == null) return false;\n        StringBuilder\
    \ sb = new StringBuilder(brackets);\n        bool result = true;\n        for\
    \ (int i = 0; i < brackets.Length; i++) {\n            char c = brackets[i];\n\
    \            if (c == '<') {\n                if (sb.Length > 0 && sb.ToString().IndexOf('>')\
    \ != -1) {\n                    result = false;\n                    break;\n\
    \                }\n                sb.Append('<');\n            }\n         \
    \   else if (c == '>') {\n                if (sb.Length > 0 && sb.ToString().IndexOf('<')\
    \ != -1) {\n                    result = false;\n                    break;\n\
    \                }\n                sb.Append('>');\n            }\n        }\n\
    \        return result;", "        bool result = true;\n        foreach (char\
    \ c in brackets) {\n            if (c == '<') {\n                result &= (brackets.IndexOf('>',\
    \ brackets.IndexOf(c) + 1) != -1);\n            }\n        }\n        return result;",
  "        bool result = true;\n        foreach (char c in brackets) {\n         \
    \   if (c == '<') {\n                bool found = false;\n                for\
    \ (int i = 0; i < brackets.Length; i++) {\n                    if (brackets[i]\
    \ == '>') {\n                        found = true;\n                        break;\n\
    \                    }\n                }\n                if (!found) {\n   \
    \                 result = false;\n                    break;\n              \
    \  }\n            }\n        }\n        return result;", "        bool result\
    \ = true;\n        foreach (char c in brackets) {\n            if (c == '<') {\n\
    \                result = result && CorrectBracketing(brackets.Replace(c, '>'));\n\
    \            } else if (c == '>') {\n                result = result && CorrectBracketing(brackets.Replace(c,\
    \ '<'));\n            } else {\n                result = result && CorrectBracketing(brackets.Replace(c,\
    \ ''));\n            }\n        }\n        return result;", "        string opening_brackets\
    \ = brackets.Replace(\"<\", \"\").Replace(\">\", \"\");\n        string closing_brackets\
    \ = brackets.Replace(\"<\", \"\").Replace(\">\", \"\");\n        bool result =\
    \ opening_brackets.Replace(closing_brackets, \"\") == \"\";\n        return result;",
  "        bool result = true;\n        foreach (char c in brackets) {\n         \
    \   if (c == '<') {\n                if (brackets.IndexOf('>', brackets.IndexOf(c)\
    \ + 1) < 0) {\n                    result = false;\n                    break;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   string opening_brackets = \"<\";\n        string closing_brackets = \">\"\
    ;\n        string opening_brackets_count = opening_brackets.Length;\n        string\
    \ closing_brackets_count = closing_brackets.Length;\n        string opening_brackets_count_string\
    \ = opening_brackets_count.ToString();\n        string closing_brackets_count_string\
    \ = closing_brackets_count.ToString();\n        string opening_brackets_count_string\
    \ = opening_brackets_count.ToString();\n        string closing_brackets_count_string\
    \ = closing_brackets_count.ToString();\n        string opening_brackets_count_string2\
    \ = opening_brackets_count.ToString();\n        string closing_brackets_count_string2\
    \ = closing_brackets_count.ToString();\n        string opening_brackets_count_string3\
    \ = opening_brackets_count.ToString();\n        string closing_brackets_count_string3\
    \ = closing_brackets_count.ToString();\n        string opening_brackets_count_string4\
    \ = opening_brackets_count.ToString();\n        string closing_brackets_count_string4\
    \ = closing_brackets_count.ToString();\n        string opening_brackets_count_string5\
    \ = opening_brackets_count.ToString();\n        string closing_brackets_count_string5\
    \ = closing_brackets_count.ToString();\n        string opening_brackets_count_string6\
    \ = opening_brackets_count.ToString();\n        string closing_brackets_count_string6\
    \ = closing_brackets_count.ToString();\n        string opening_brackets_count_string7\
    \ = opening_brackets_count.ToString();\n        string closing_brackets_count_string7\
    \ = closing_brackets_count.ToString();\n        string opening_brackets_count_string8\
    \ = opening_brackets_count.ToString();\n        string closing_brackets_count_string8\
    \ = closing_brackets_count.ToString();\n        string opening_brackets_count_string9\
    \ = opening_brackets_count.ToString();\n        string closing_brackets_count_string9\
    \ = closing_brackets_count.ToString();\n        string opening_brackets_count_string10\
    \ = opening_brackets_count.ToString();\n        string closing_brackets_count_string10\
    \ = closing_brackets_count.ToString();\n        string opening_brackets_count_string11\
    \ = opening_brackets_count.ToString();\n", "        string opening_brackets =\
    \ brackets.Replace(\"<\", \"\").Replace(\">\", \"\");\n        string closing_brackets\
    \ = brackets.Replace(\"<\", \"\").Replace(\">\", \"\");\n        bool result =\
    \ true;\n        foreach (char opening_bracket in opening_brackets) {\n      \
    \      if (!closing_brackets.Contains(opening_bracket)) {\n                result\
    \ = false;\n                break;\n            }\n        }\n        return result;",
  "        string opening_brackets = \"\";\n        string closing_brackets = \"\"\
    ;\n        foreach (char c in brackets) {\n            if (c == '<') {\n     \
    \           opening_brackets += c;\n            } else if (c == '>') {\n     \
    \           closing_brackets += c;\n            }\n        }\n        if (opening_brackets.Length\
    \ != closing_brackets.Length) {\n            return false;\n        }\n      \
    \  bool result = true;\n        for (int i = 0; i < opening_brackets.Length; i++)\
    \ {\n            if (opening_brackets[i] != closing_brackets[i]) {\n         \
    \       result = false;\n            }\n        }\n        return result;", " \
    \       bool result = true;\n        foreach (char c in brackets) {\n        \
    \    if (c == '<') {\n                if (brackets.IndexOf('>', brackets.IndexOf(c)\
    \ + 1) < 0) {\n                    result = false;\n                    break;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   bool result = true;\n        foreach (char c in brackets) {\n            if\
    \ (c == '<') {\n                if (brackets.IndexOf('>', brackets.IndexOf(c)\
    \ + 1) < 0) {\n                    result = false;\n                    break;\n\
    \                }\n            }\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
