language: cs
name: HumanEval_93_encode
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            result += (char)(c + 1);\n        }\n \
    \       foreach (char c in message.ToUpper()) {\n            result += (char)(c\
    \ + 1);\n        }\n        foreach (char c in message.ToUpper()) {\n        \
    \    result += (char)(c + 1);\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"\
    tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"mWDCSKR\")));\n \
    \   Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e2759012a56c47a9932769357f02489c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e2759012a56c47a9932769357f02489c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            if (char.IsLetter(c)) {\n             \
    \   result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in result.ToLower()) {\n            if (char.IsLetter(c)) {\n            \
    \    result += (char)(c - 1);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e8ddcc2884e849289b326e9851edaaa3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e8ddcc2884e849289b326e9851edaaa3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            if (char.IsLetter(c)) {\n             \
    \   result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c - 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToLower()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c - 1);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <321f23e435f34d82a9c0acf81c29fcc8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <321f23e435f34d82a9c0acf81c29fcc8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            if (char.IsLetter(c)) {\n                result += (char.ToLower(c));\n\
    \            }\n        }\n        foreach (char c in result) {\n            int\
    \ index = result.IndexOf(c);\n            if (index > 0) {\n                char\
    \ nextChar = result[index + 1];\n                if (char.IsUpper(c)) {\n    \
    \                result += (char.ToLower(nextChar));\n                }\n    \
    \            else if (char.IsLower(c)) {\n                    result += (char.ToUpper(nextChar));\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"TEST\"\
    )).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"mWDCSKR\"\
    )));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <35fc866322d344ee882c3290b9b15956>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <35fc866322d344ee882c3290b9b15956>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dcf52f9569d14947a30a1b82cb6beb47>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dcf52f9569d14947a30a1b82cb6beb47>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in result.ToCharArray()) {\n            if (Char.IsUpper(c)) {\n         \
    \       result += (char)(c ^ 0x20);\n            }\n        }\n        foreach\
    \ (char c in result.ToCharArray()) {\n            if (Char.IsLower(c)) {\n   \
    \             result += (char)(c ^ 0x20);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <29560952d71f43e6aef56153379b4d1f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <29560952d71f43e6aef56153379b4d1f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message) {\n            result += (char)(c - 1);\n        }\n        foreach\
    \ (char c in message) {\n            result += (char)(c + 2);\n        }\n   \
    \     foreach (char c in message) {\n            result += (char)(c - 2);\n  \
    \      }\n        foreach (char c in message) {\n            result += (char)(c\
    \ + 3);\n        }\n        foreach (char c in message) {\n            result\
    \ += (char)(c - 3);\n        }\n        foreach (char c in message) {\n      \
    \      result += (char)(c + 4);\n        }\n        foreach (char c in message)\
    \ {\n            result += (char)(c - 4);\n        }\n        foreach (char c\
    \ in message) {\n            result += (char)(c + 5);\n        }\n        foreach\
    \ (char c in message) {\n            result += (char)(c - 5);\n        }\n   \
    \     foreach (char c in message) {\n            result += (char)(c + 6);\n  \
    \      }\n        foreach (char c in message) {\n            result += (char)(c\
    \ - 6);\n        }\n        foreach (char c in message) {\n            result\
    \ += (char)(c + 7);\n        }\n        foreach (char c in message) {\n      \
    \      result += (char)(c - 7);\n        }\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 8);\n        }\n        foreach (char c\
    \ in message) {\n            result += (char)(c - 8);\n        }\n        foreach\
    \ (char c in message) {\n            result += (char)(c + 9);\n        }\n   \
    \     foreach (char c in message) {\n            result += (char)(c - 9);\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <32de86f95e3d4bc5a9b2d50838cd8feb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <32de86f95e3d4bc5a9b2d50838cd8feb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            if (char.IsLetter(c)) {\n                result += (char.ToLower(c));\n\
    \            }\n            else {\n                result += (char.ToUpper(c));\n\
    \            }\n        }\n        char[] vowels = { 'a', 'e', 'i', 'o', 'u' };\n\
    \        char[] letters = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] letters2\
    \ = { 'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S',\
    \ 'T', 'V', 'W', 'X', 'Y', 'Z' };\n        char[] letters31 = { 'b', 'c', 'd',\
    \ 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x',\
    \ 'y', 'z' };\n        char[] letters32 = { 'B', 'C', 'D', 'F', 'G', 'H', 'J',\
    \ 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z' };\n  \
    \      char[] letters33 = { 'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M',\
    \ 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z' };\n        char[] letters34\
    \ = { 'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S',\
    \ 'T', 'V', 'W', 'X', 'Y', 'Z' };\n        char[] letters35 = { 'B', 'C', 'D',\
    \ 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X',\
    \ 'Y', 'Z' };\n        char[] letters36 = { 'B', 'C', 'D', 'F', 'G', 'H', 'J',\
    \ 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z' };\n  \
    \      char[] letters37 = { 'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M',\
    \ 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z' };\n        char[] letters38\
    \ = { 'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S',\
    \ 'T', 'V', 'W', 'X', 'Y', 'Z' };\n        char[] letters39 = { 'B', 'C', 'D',\
    \ 'F', 'G', 'H', 'J', 'K\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpobenmhag.cs(40,65): error CS1010: Newline in constant

    /tmp/tmpobenmhag.cs(41,6): error CS1002: ; expected

    /tmp/tmpobenmhag.cs(42,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpobenmhag.cs(50,2): error CS1513: } expected

    '
  timestamp: 1659793689
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dcf52f9569d14947a30a1b82cb6beb47>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dcf52f9569d14947a30a1b82cb6beb47>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            if (char.IsLetter(c)) {\n                result += (char.ToLower(c));\n\
    \            }\n        }\n        foreach (char c in result) {\n            if\
    \ (char.IsUpper(c)) {\n                result += (char.ToUpper(c));\n        \
    \    }\n        }\n        char[] vowels = new char[] { 'a', 'e', 'i', 'o', 'u'\
    \ };\n        char[] letters = new char[] { 'b', 'c', 'd', 'f', 'g', 'h', 'j',\
    \ 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n  \
    \      char[] vowels2 = new char[] { 'A', 'E', 'I', 'O', 'U' };\n        char[]\
    \ letters2 = new char[] { 'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N',\
    \ 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z' };\n        char[] vowels3\
    \ = new char[] { 'a', 'e', 'i', 'o', 'u' };\n        char[] letters3 = new char[]\
    \ { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] vowels4 = new char[] { 'A',\
    \ 'E', 'I', 'O', 'U' };\n        char[] letters4 = new char[] { 'B', 'C', 'D',\
    \ 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X',\
    \ 'Y', 'Z' };\n        char[] vowels5 = new char[] { 'a', 'e', 'i', 'o', 'u' };\n\
    \        char[] letters5 = new char[] { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k',\
    \ 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n       \
    \ char[] vowels6 = new char[] { 'A', 'E', 'I', 'O', 'U' };\n        char[] letters6\
    \ = new char[] { 'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q',\
    \ 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z' };\n        char[] vowels7 = new char[]\
    \ { 'a', 'e', 'i', 'o', 'u' };\n        char[] letters7 = new char[] { 'b', 'c',\
    \ 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w',\
    \ 'x', 'y', 'z' };\n        char[] vowels8\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpums_lmbn.cs(45,23): error CS1002: ; expected

    '
  timestamp: 1659793689
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            if (char.IsLetter(c)) {\n                result += char.ToUpper(c);\n\
    \            }\n            else {\n                result += c;\n           \
    \ }\n        }\n        char[] vowels = new char[] { 'a', 'e', 'i', 'o', 'u' };\n\
    \        char[] letters = new char[] { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k',\
    \ 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n       \
    \ char[] vowels2 = new char[] { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] letters2\
    \ = new char[] { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] vowels3 = new char[]\
    \ { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] letters3 = new char[] { 'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z' };\n        char[] vowels4 = new char[] { 'b', 'c', 'd',\
    \ 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x',\
    \ 'y', 'z' };\n        char[] letters4 = new char[] { 'b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'\
    \ };\n        char[] vowels5 = new char[] { 'b', 'c', 'd', 'f', 'g', 'h', 'j',\
    \ 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n  \
    \      char[] letters5 = new char[] { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k',\
    \ 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n       \
    \ char[] vowels6 = new char[] { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] letters6\
    \ = new char[] { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] vowels7 = new char[]\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpm6_1sf81.cs(41,36): error CS1002: ; expected

    '
  timestamp: 1659793689
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c >= 'a' && c <= 'z' ? (char)(c + 32) : (char)(c\
    \ - 32));\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <efe1409730094aff9dba68f72890e9a0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <efe1409730094aff9dba68f72890e9a0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in result) {\n            if (char.IsUpper(c)) {\n                result +=\
    \ (char)(c + 1);\n            }\n        }\n        foreach (char c in result)\
    \ {\n            if (char.IsUpper(c)) {\n                result += (char)(c -\
    \ 1);\n            }\n        }\n        foreach (char c in result) {\n      \
    \      if (char.IsUpper(c)) {\n                result += (char)(c + 1);\n    \
    \        }\n        }\n        foreach (char c in result) {\n            if (char.IsUpper(c))\
    \ {\n                result += (char)(c - 1);\n            }\n        }\n    \
    \    foreach (char c in result) {\n            if (char.IsUpper(c)) {\n      \
    \          result += (char)(c + 1);\n            }\n        }\n        foreach\
    \ (char c in result) {\n            if (char.IsUpper(c)) {\n                result\
    \ += (char)(c - 1);\n            }\n        }\n        foreach (char c in result)\
    \ {\n            if (char.IsUpper(c)) {\n                result += (char)(c +\
    \ 1);\n            }\n        }\n        foreach (char c in result) {\n      \
    \      if (char.IsUpper(c)) {\n                result += (char)(c - 1);\n    \
    \        }\n        }\n        foreach (char c in result) {\n            if (char.IsUpper(c))\
    \ {\n                result += (char)(c + 1);\n            }\n        }\n    \
    \    foreach (char c in result) {\n            if (char.IsUpper(c)) {\n      \
    \          result += (char)(c - 1);\n            }\n        }\n        foreach\
    \ (char c in result) {\n            if (char.IsUpper(c)) {\n                result\
    \ += (char)(c + 1);\n            }\n        }\n        foreach (char c in result)\
    \ {\n            if (char.IsUpper(c)) {\n                result += (char)(c -\
    \ 1);\n            }\n        }\n        foreach (char c in result) {\n      \
    \      if (char.IsUpper(c)) {\n                result += (char)(c + 1);\n    \
    \        }\n        }\n        foreach (char c in result) {\n            if (char.IsUpper(c))\
    \ {\n                result += (char)(c - 1);\n            }\n        }\n    \
    \    foreach (char c in result) {\n            if (char.IsUpper(c)) {\n      \
    \          result += (char)(c + 1);\n            }\n        }\n        foreach\
    \ (char c in result) {\n            if (char.IsUpper(c)) {\n                result\
    \ += (char)(c - 1);\n            }\n        }\n        foreach (char c in result)\
    \ {\n            if (char.IsUpper(c)) {\n                result += (char)(c +\
    \ 1);\n            }\n        }\n        foreach (char c in result) {\n      \
    \      if (char.IsUpper(c)) {\n                result += (char)(c - 1);\n    \
    \        }\n        }\n        foreach (char c in result) {\n            if (char.IsUpper(c))\
    \ {\n                result += (char)(c + 1);\n            }\n        }\n    \
    \    foreach (char c in result) {\n            if (char.IsUpper(c)) {\n      \
    \          result += \n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbognlg6r.cs(121,26): error CS1525: Invalid expression term ''}''

    /tmp/tmpbognlg6r.cs(121,26): error CS1002: ; expected

    /tmp/tmpbognlg6r.cs(123,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpbognlg6r.cs(131,2): error CS1513: } expected

    '
  timestamp: 1659793689
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c >= 'a' && c <= 'z' ? (char)(c + 2) : c);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <66aa467c1c664710be74cf1493198cf7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <66aa467c1c664710be74cf1493198cf7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            if (char.IsLetter(c)) {\n             \
    \   result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c - 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToLower()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c - 1);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <321f23e435f34d82a9c0acf81c29fcc8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <321f23e435f34d82a9c0acf81c29fcc8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in result) {\n            if (char.IsUpper(c)) {\n                result +=\
    \ (char)(c - 1);\n            }\n        }\n        foreach (char c in result)\
    \ {\n            if (char.IsUpper(c)) {\n                result += (char)(c +\
    \ 1);\n            }\n        }\n        foreach (char c in result) {\n      \
    \      if (char.IsUpper(c)) {\n                result += (char)(c - 1);\n    \
    \        }\n        }\n        foreach (char c in result) {\n            if (char.IsUpper(c))\
    \ {\n                result += (char)(c + 1);\n            }\n        }\n    \
    \    foreach (char c in result) {\n            if (char.IsUpper(c)) {\n      \
    \          result += (char)(c - 1);\n            }\n        }\n        foreach\
    \ (char c in result) {\n            if (char.IsUpper(c)) {\n                result\
    \ += (char)(c + 1);\n            }\n        }\n        foreach (char c in result)\
    \ {\n            if (char.IsUpper(c)) {\n                result += (char)(c -\
    \ 1);\n            }\n        }\n        foreach (char c in result) {\n      \
    \      if (char.IsUpper(c)) {\n                result += (char)(c + 1);\n    \
    \        }\n        }\n        foreach (char c in result) {\n            if (char.IsUpper(c))\
    \ {\n                result += (char)(c - 1);\n            }\n        }\n    \
    \    foreach (char c in result) {\n            if (char.IsUpper(c)) {\n      \
    \          result += (char)(c + 1);\n            }\n        }\n        foreach\
    \ (char c in result) {\n            if (char.IsUpper(c)) {\n                result\
    \ += (char)(c - 1);\n            }\n        }\n        foreach (char c in result)\
    \ {\n            if (char.IsUpper(c)) {\n                result += (char)(c +\
    \ 1);\n            }\n        }\n        foreach (char c in result) {\n      \
    \      if (char.IsUpper(c)) {\n                result += (char)(c - 1);\n    \
    \        }\n        }\n        foreach (char c in result) {\n            if (char.IsUpper(c))\
    \ {\n                result += (char)(c + 1);\n            }\n        }\n    \
    \    foreach (char c in result) {\n            if (char.IsUpper(c)) {\n      \
    \          result += (char)(c - 1);\n            }\n        }\n        foreach\
    \ (char c in result) {\n            if (char.IsUpper(c)) {\n                result\
    \ += (char)(c + 1);\n            }\n        }\n        foreach (char c in result)\
    \ {\n            if (char.IsUpper(c)) {\n                result += (char)(c -\
    \ 1);\n            }\n        }\n        foreach (char c in result) {\n      \
    \      if (char.IsUpper(c)) {\n                result += (char)(c + 1);\n    \
    \        }\n        }\n        foreach (char c in result) {\n            if (char.IsUpper(c))\
    \ {\n                result += (char)(c - 1);\n            }\n        }\n    \
    \    foreach (char c in result) {\n            if (char.IsUpper(c)) {\n      \
    \          result += \n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn8dqp01y.cs(121,26): error CS1525: Invalid expression term ''}''

    /tmp/tmpn8dqp01y.cs(121,26): error CS1002: ; expected

    /tmp/tmpn8dqp01y.cs(123,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpn8dqp01y.cs(131,2): error CS1513: } expected

    '
  timestamp: 1659793689
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        char[] vowels = new char[] { 'a', 'e', 'i', 'o', 'u' };\n\
    \        char[] letters = new char[] { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k',\
    \ 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n       \
    \ char[] messageChars = message.ToCharArray();\n        StringBuilder sb = new\
    \ StringBuilder();\n        foreach (char c in messageChars) {\n            if\
    \ (vowels.Contains(c)) {\n                sb.Append(letters[messageChars.IndexOf(c)]);\n\
    \            } else {\n                sb.Append(c);\n            }\n        }\n\
    \        return sb.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl0vtl8ab.cs(26,48): error CS1501: No overload for method ''IndexOf'' takes
    1 arguments

    '
  timestamp: 1659793690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c ^ 0x20);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c9cd25c1e1f54474ac1e6bfc524aabf5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c9cd25c1e1f54474ac1e6bfc524aabf5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dcf52f9569d14947a30a1b82cb6beb47>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dcf52f9569d14947a30a1b82cb6beb47>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c >= 'a' && c <= 'z' ? c : ((int)c + 1));\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a1d563b6688c47f6af0e9eb4a89416b6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a1d563b6688c47f6af0e9eb4a89416b6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in result) {\n            if (char.IsUpper(c)) {\n                result +=\
    \ (char)(c - 1);\n            }\n        }\n        foreach (char c in result)\
    \ {\n            if (char.IsUpper(c)) {\n                result += (char)(c +\
    \ 1);\n            }\n        }\n        foreach (char c in result) {\n      \
    \      if (char.IsUpper(c)) {\n                result += (char)(c - 1);\n    \
    \        }\n        }\n        foreach (char c in result) {\n            if (char.IsUpper(c))\
    \ {\n                result += (char)(c + 1);\n            }\n        }\n    \
    \    foreach (char c in result) {\n            if (char.IsUpper(c)) {\n      \
    \          result += (char)(c - 1);\n            }\n        }\n        foreach\
    \ (char c in result) {\n            if (char.IsUpper(c)) {\n                result\
    \ += (char)(c + 1);\n            }\n        }\n        foreach (char c in result)\
    \ {\n            if (char.IsUpper(c)) {\n                result += (char)(c -\
    \ 1);\n            }\n        }\n        foreach (char c in result) {\n      \
    \      if (char.IsUpper(c)) {\n                result += (char)(c + 1);\n    \
    \        }\n        }\n        foreach (char c in result) {\n            if (char.IsUpper(c))\
    \ {\n                result += (char)(c - 1);\n            }\n        }\n    \
    \    foreach (char c in result) {\n            if (char.IsUpper(c)) {\n      \
    \          result += (char)(c + 1);\n            }\n        }\n        foreach\
    \ (char c in result) {\n            if (char.IsUpper(c)) {\n                result\
    \ += (char)(c - 1);\n            }\n        }\n        foreach (char c in result)\
    \ {\n            if (char.IsUpper(c)) {\n                result += (char)(c +\
    \ 1);\n            }\n        }\n        foreach (char c in result) {\n      \
    \      if (char.IsUpper(c)) {\n                result += (char)(c - 1);\n    \
    \        }\n        }\n        foreach (char c in result) {\n            if (char.IsUpper(c))\
    \ {\n                result += (char)(c + 1);\n            }\n        }\n    \
    \    foreach (char c in result) {\n            if (char.IsUpper(c)) {\n      \
    \          result += (char)(c - 1);\n            }\n        }\n        foreach\
    \ (char c in result) {\n            if (char.IsUpper(c)) {\n                result\
    \ += (char)(c + 1);\n            }\n        }\n        foreach (char c in result)\
    \ {\n            if (char.IsUpper(c)) {\n                result += (char)(c -\
    \ 1);\n            }\n        }\n        foreach (char c in result) {\n      \
    \      if (char.IsUpper(c)) {\n                result += (char)(c + 1);\n    \
    \        }\n        }\n        foreach (char c in result) {\n            if (char.IsUpper(c))\
    \ {\n                result += (char)(c - 1);\n            }\n        }\n    \
    \    foreach (char c in result) {\n            if (char.IsUpper(c)) {\n      \
    \          result += \n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn8dqp01y.cs(121,26): error CS1525: Invalid expression term ''}''

    /tmp/tmpn8dqp01y.cs(121,26): error CS1002: ; expected

    /tmp/tmpn8dqp01y.cs(123,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpn8dqp01y.cs(131,2): error CS1513: } expected

    '
  timestamp: 1659793689
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            result += (char)(c + 1);\n        }\n \
    \       foreach (char c in message.ToUpper()) {\n            result += (char)(c\
    \ + 1);\n        }\n        foreach (char c in message.ToUpper()) {\n        \
    \    result += (char)(c + 1);\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"\
    tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"mWDCSKR\")));\n \
    \   Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e2759012a56c47a9932769357f02489c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e2759012a56c47a9932769357f02489c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToLower() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToLower() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToLower() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToLower() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToLower() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToLower() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToLower() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToLower() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToLower() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToLower() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToLower() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToLower() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToLower() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToLower() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToLower() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToLower() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToLower() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToLower() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToLower() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToLower() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg9xuvmjt.cs(64,23): error CS1525: Invalid expression term ''}''

    /tmp/tmpg9xuvmjt.cs(64,23): error CS1026: ) expected

    /tmp/tmpg9xuvmjt.cs(64,23): error CS1002: ; expected

    /tmp/tmpg9xuvmjt.cs(66,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpg9xuvmjt.cs(74,2): error CS1513: } expected

    '
  timestamp: 1659793689
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dcf52f9569d14947a30a1b82cb6beb47>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dcf52f9569d14947a30a1b82cb6beb47>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c ^ 0x20);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c9cd25c1e1f54474ac1e6bfc524aabf5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c9cd25c1e1f54474ac1e6bfc524aabf5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in result) {\n            if (Char.IsUpper(c)) {\n                result +=\
    \ (char)(c - 1);\n            }\n        }\n        foreach (char c in result)\
    \ {\n            if (Char.IsUpper(c)) {\n                result += (char)(c -\
    \ 1);\n            }\n        }\n        foreach (char c in result) {\n      \
    \      if (Char.IsUpper(c)) {\n                result += (char)(c - 1);\n    \
    \        }\n        }\n        foreach (char c in result) {\n            if (Char.IsUpper(c))\
    \ {\n                result += (char)(c - 1);\n            }\n        }\n    \
    \    foreach (char c in result) {\n            if (Char.IsUpper(c)) {\n      \
    \          result += (char)(c - 1);\n            }\n        }\n        foreach\
    \ (char c in result) {\n            if (Char.IsUpper(c)) {\n                result\
    \ += (char)(c - 1);\n            }\n        }\n        foreach (char c in result)\
    \ {\n            if (Char.IsUpper(c)) {\n                result += (char)(c -\
    \ 1);\n            }\n        }\n        foreach (char c in result) {\n      \
    \      if (Char.IsUpper(c)) {\n                result += (char)(c - 1);\n    \
    \        }\n        }\n        foreach (char c in result) {\n            if (Char.IsUpper(c))\
    \ {\n                result += (char)(c - 1);\n            }\n        }\n    \
    \    foreach (char c in result) {\n            if (Char.IsUpper(c)) {\n      \
    \          result += (char)(c - 1);\n            }\n        }\n        foreach\
    \ (char c in result) {\n            if (Char.IsUpper(c)) {\n                result\
    \ += (char)(c - 1);\n            }\n        }\n        foreach (char c in result)\
    \ {\n            if (Char.IsUpper(c)) {\n                result += (char)(c -\
    \ 1);\n            }\n        }\n        foreach (char c in result) {\n      \
    \      if (Char.IsUpper(c)) {\n                result += (char)(c - 1);\n    \
    \        }\n        }\n        foreach (char c in result) {\n            if (Char.IsUpper(c))\
    \ {\n                result += (char)(c - 1);\n            }\n        }\n    \
    \    foreach (char c in result) {\n            if (Char.IsUpper(c)) {\n      \
    \          result += (char)(c - 1);\n            }\n        }\n        foreach\
    \ (char c in result) {\n            if (Char.IsUpper(c)) {\n                result\
    \ += (char)(c - 1);\n            }\n        }\n        foreach (char c in result)\
    \ {\n            if (Char.IsUpper(c)) {\n                result += (char)(c -\
    \ 1);\n            }\n        }\n        foreach (char c in result) {\n      \
    \      if (Char.IsUpper(c)) {\n                result += (char)(c - 1);\n    \
    \        }\n        }\n        foreach (char c in result) {\n            if (Char.IsUpper(c))\
    \ {\n                result += (char)(c - 1);\n            }\n        }\n    \
    \    foreach (char c in result) {\n            if (Char.IsUpper(c)) {\n      \
    \          result += \n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp37msyhr5.cs(121,26): error CS1525: Invalid expression term ''}''

    /tmp/tmp37msyhr5.cs(121,26): error CS1002: ; expected

    /tmp/tmp37msyhr5.cs(123,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp37msyhr5.cs(131,2): error CS1513: } expected

    '
  timestamp: 1659793689
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        char[] chars = message.ToCharArray();\n\
    \        foreach (char c in chars) {\n            result += (char.IsUpper(c) ?\
    \ \n                ((char)(char.ToLower(c) + 1).ToString()) : \n            \
    \    ((char)(char.ToUpper(c) + 1).ToString()));\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps9cgr89u.cs(24,18): error CS0030: Cannot convert type ''string'' to ''char''

    /tmp/tmps9cgr89u.cs(25,18): error CS0030: Cannot convert type ''string'' to ''char''

    '
  timestamp: 1659793690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            if (char.IsLetter(c)) {\n                result += (char.ToLower(c));\n\
    \            }\n            else {\n                result += (char.ToUpper(c));\n\
    \            }\n        }\n        char[] vowels = new char[] { 'a', 'e', 'i',\
    \ 'o', 'u' };\n        char[] vowelsTwo = new char[] { 'A', 'E', 'I', 'O', 'U'\
    \ };\n        char[] vowelsThree = new char[] { 'a', 'e', 'i', 'o', 'u' };\n \
    \       char[] vowelsFour = new char[] { 'A', 'E', 'I', 'O', 'U' };\n        char[]\
    \ vowelsFive = new char[] { 'a', 'e', 'i', 'o', 'u' };\n        char[] vowelsSix\
    \ = new char[] { 'A', 'E', 'I', 'O', 'U' };\n        char[] vowelsSeven = new\
    \ char[] { 'a', 'e', 'i', 'o', 'u' };\n        char[] vowelsEight = new char[]\
    \ { 'A', 'E', 'I', 'O', 'U' };\n        char[] vowelsNine = new char[] { 'a',\
    \ 'e', 'i', 'o', 'u' };\n        char[] vowelsTen = new char[] { 'A', 'E', 'I',\
    \ 'O', 'U' };\n        char[] vowelsEleven = new char[] { 'a', 'e', 'i', 'o',\
    \ 'u' };\n        char[] vowelsTwelve = new char[] { 'A', 'E', 'I', 'O', 'U' };\n\
    \        char[] vowelsThirteen = new char[] { 'a', 'e', 'i', 'o', 'u' };\n   \
    \     char[] vowelsFourteen = new char[] { 'A', 'E', 'I', 'O', 'U' };\n      \
    \  char[] vowelsFifteen = new char[] { 'a', 'e', 'i', 'o', 'u' };\n        char[]\
    \ vowelsSixteen = new char[] { 'A', 'E', 'I', 'O', 'U' };\n        char[] vowelsSeventeen\
    \ = new char[] { 'a', 'e', 'i', 'o', 'u' };\n        char[] vowelsEighteen = new\
    \ char[] { 'A', 'E', 'I', 'O', 'U' };\n        char[] vowelsNineteen = new char[]\
    \ { 'a', 'e', 'i', 'o', 'u' };\n        char[] vowelsTwenty = new char[] { 'A',\
    \ 'E', 'I', 'O', 'U' };\n        char[] vowelsTwentyOne = new char[] { 'a', 'e',\
    \ 'i', 'o', 'u' };\n        \n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpiw0b7ydh.cs(19,26): error CS0161: ''Problem.Encode(string)'': not all
    code paths return a value

    '
  timestamp: 1659793690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            if (char.IsLetter(c)) {\n                result += (char.ToLower(c));\n\
    \            }\n        }\n        foreach (char c in message) {\n           \
    \ if (char.IsLetter(c)) {\n                result += (char.ToUpper(c));\n    \
    \        }\n        }\n        char[] vowels = new char[] { 'a', 'e', 'i', 'o',\
    \ 'u' };\n        char[] consonants = new char[] { 'b', 'c', 'd', 'f', 'g', 'h',\
    \ 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n\
    \        char[] consonantVowels = new char[] { 'b', 'c', 'd', 'f', 'g', 'h', 'j',\
    \ 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n  \
    \      char[] consonantVowelsUp = new char[] { 'B', 'C', 'D', 'F', 'G', 'H', 'J',\
    \ 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z' };\n  \
    \      char[] consonantVowelsDown = new char[] { 'b', 'c', 'd', 'f', 'g', 'h',\
    \ 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n\
    \        char[] consonantVowelsUpDown = new char[] { 'B', 'C', 'D', 'F', 'G',\
    \ 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z'\
    \ };\n        char[] consonantVowelsUpDownUp = new char[] { 'B', 'C', 'D', 'F',\
    \ 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y',\
    \ 'Z' };\n        char[] consonantVowelsUpDownDown = new char[] { 'B', 'C', 'D',\
    \ 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X',\
    \ 'Y', 'Z' };\n        char[] consonantVowelsUpDownDownUp = new char[] { 'B',\
    \ 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V',\
    \ 'W', 'X', 'Y', 'Z' };\n        char[] consonantVowelsUpDownDownDown = new char[]\
    \ { 'B', 'C', 'D', 'F', 'G', 'H', '\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpof_3q2lg.cs(40,91): error CS1010: Newline in constant

    /tmp/tmpof_3q2lg.cs(40,91): error CS1011: Empty character literal

    /tmp/tmpof_3q2lg.cs(41,6): error CS1002: ; expected

    /tmp/tmpof_3q2lg.cs(42,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpof_3q2lg.cs(50,2): error CS1513: } expected

    '
  timestamp: 1659793689
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            result += (char)(c + 1);\n        }\n \
    \       foreach (char c in message.ToUpper()) {\n            result += (char)(c\
    \ + 1);\n        }\n        foreach (char c in message.ToLower()) {\n        \
    \    result += (char)(c + 1);\n        }\n        foreach (char c in message.ToUpper())\
    \ {\n            result += (char)(c + 1);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ca46963c488453badf3775add54952d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ca46963c488453badf3775add54952d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        char[] vowels = \"aeiou\"\
    .ToCharArray();\n        char[] letters = \"abcdefghijklmnopqrstuvwxyz\".ToCharArray();\n\
    \        char[] letters2 = new char[26];\n        char[] letters3 = \"bcdfghjklmnpqrstvwxyz\"\
    .ToCharArray();\n        char[] letters4 = new char[26];\n        char[] letters5\
    \ = new char[26];\n        char[] letters6 = new char[26];\n        char[] letters7\
    \ = new char[26];\n        char[] letters8 = new char[26];\n        char[] letters9\
    \ = new char[26];\n        char[] letters10 = new char[26];\n        char[] letters11\
    \ = new char[26];\n        char[] letters12 = new char[26];\n        char[] letters13\
    \ = new char[26];\n        char[] letters14 = new char[26];\n        char[] letters15\
    \ = new char[26];\n        char[] letters16 = new char[26];\n        char[] letters17\
    \ = new char[26];\n        char[] letters18 = new char[26];\n        char[] letters19\
    \ = new char[26];\n        char[] letters20 = new char[26];\n        char[] letters21\
    \ = new char[26];\n        char[] letters22 = new char[26];\n        char[] letters23\
    \ = new char[26];\n        char[] letters24 = new char[26];\n        char[] letters25\
    \ = new char[26];\n        char[] letters26 = new char[26];\n        char[] letters27\
    \ = new char[26];\n        char[] letters28 = new char[26];\n        char[] letters29\
    \ = new char[26];\n        char[] letters30 = new char[26];\n        char[] letters31\
    \ = new char[26];\n        char[] letters32 = new char[26];\n        char[] letters33\
    \ = new char[26];\n        char[] letters34 = new char[26];\n        char[] letters35\
    \ = new char[26];\n        char[] letters36 = new char[26];\n        char[] letters37\
    \ = new char[26];\n        char[] letters38 = new char[26];\n        char[] letters39\
    \ = new char[26];\n        char[] letters40 = new \n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\"\
    )));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"\
    YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"\
    tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\"\
    )).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1745e9q8.cs(61,31): error CS1031: Type expected

    /tmp/tmp1745e9q8.cs(61,31): error CS1526: A new expression requires (), [], or
    {} after type

    /tmp/tmp1745e9q8.cs(61,31): error CS1002: ; expected

    '
  timestamp: 1659793690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            result += (char)(c + 1);\n        }\n \
    \       foreach (char c in message.ToUpper()) {\n            result += (char)(c\
    \ + 1);\n        }\n        foreach (char c in message.ToLower()) {\n        \
    \    result += (char)(c + 1);\n        }\n        foreach (char c in message.ToUpper())\
    \ {\n            result += (char)(c + 1);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ca46963c488453badf3775add54952d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ca46963c488453badf3775add54952d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            if (char.IsUpper(c)) {\n              \
    \  result += (char)(c + 1);\n            }\n        }\n        foreach (char c\
    \ in message.ToUpper()) {\n            if (char.IsUpper(c)) {\n              \
    \  result += (char)(c - 1);\n            }\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            if (char.IsUpper(c)) {\n              \
    \  result += (char)(c - 1);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aa817fe473b6452ca23bda99537df5e8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aa817fe473b6452ca23bda99537df5e8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToLower()\n            );\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2phntoiz.cs(22,23): error CS0030: Cannot convert type ''string'' to ''char''

    '
  timestamp: 1659793690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            if (char.IsLetter(c)) {\n             \
    \   result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToLower()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dff6ba0d1de4d5683fd3b486f78feae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dff6ba0d1de4d5683fd3b486f78feae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            if (char.IsLetter(c)) {\n                result += (char.ToLower(c));\n\
    \            }\n            else {\n                result += (char.ToUpper(c));\n\
    \            }\n        }\n        char[] vowels = new char[] { 'a', 'e', 'i',\
    \ 'o', 'u' };\n        char[] letters = new char[] { 'b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'\
    \ };\n        char[] vowels2 = new char[] { 'A', 'E', 'I', 'O', 'U' };\n     \
    \   char[] letters2 = new char[] { 'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L',\
    \ 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z' };\n        char[]\
    \ vowels3 = new char[] { 'a', 'e', 'i', 'o', 'u' };\n        char[] letters3 =\
    \ new char[] { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] vowels4 = new char[]\
    \ { 'A', 'E', 'I', 'O', 'U' };\n        char[] letters4 = new char[] { 'B', 'C',\
    \ 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W',\
    \ 'X', 'Y', 'Z' };\n        char[] vowels5 = new char[] { 'a', 'e', 'i', 'o',\
    \ 'u' };\n        char[] letters5 = new char[] { 'b', 'c', 'd', 'f', 'g', 'h',\
    \ 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n\
    \        char[] vowels6 = new char[] { 'A', 'E', 'I', 'O', 'U' };\n        char[]\
    \ letters6 = new char[] { 'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N',\
    \ 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z' };\n        char[] vowels7\
    \ = new char[] { 'a', 'e', 'i', 'o', 'u' };\n        char[] letters7 = new char[]\
    \ { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] vowels8 = new char[] { 'A',\
    \ 'E', 'I', 'O', 'U' };\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6d6b88w9.cs(19,26): error CS0161: ''Problem.Encode(string)'': not all
    code paths return a value

    '
  timestamp: 1659793690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c ^ 0x20);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c9cd25c1e1f54474ac1e6bfc524aabf5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c9cd25c1e1f54474ac1e6bfc524aabf5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in result) {\n            if (char.IsUpper(c)) {\n                result +=\
    \ (char)(c - 1);\n            }\n        }\n        foreach (char c in result)\
    \ {\n            if (char.IsUpper(c)) {\n                result += (char)(c +\
    \ 1);\n            }\n        }\n        foreach (char c in result) {\n      \
    \      if (char.IsUpper(c)) {\n                result += (char)(c - 1);\n    \
    \        }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <82aa6a43c5ee4037975aa44183fc0fa7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <82aa6a43c5ee4037975aa44183fc0fa7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in \"aeiou\") {\n            int index = message.IndexOf(c);\n           \
    \ if (index != -1) {\n                result += (char)(message.Substring(index\
    \ - 1, 1) ^ 0x20);\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"TEST\"\
    )).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"mWDCSKR\"\
    )));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk9k6q1hp.cs(27,34): error CS0019: Operator ''^'' cannot be applied to
    operands of type ''string'' and ''int''

    '
  timestamp: 1659793690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dcf52f9569d14947a30a1b82cb6beb47>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dcf52f9569d14947a30a1b82cb6beb47>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            if (char.IsLetter(c)) {\n                result += (char.ToLower(c));\n\
    \            }\n            else {\n                result += (char.ToUpper(c));\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\"\
    )));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"\
    YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"\
    tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\"\
    )).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8d6750189d7c4864b347a523a31763e0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8d6750189d7c4864b347a523a31763e0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToUpper() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToUpper() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToUpper() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToUpper() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToUpper() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToUpper() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToUpper() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToUpper() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToUpper() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToUpper() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToUpper() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToUpper() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToUpper() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToUpper() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToUpper() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToUpper() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToUpper() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToUpper() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToUpper() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToUpper() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpapavzq0m.cs(64,23): error CS1525: Invalid expression term ''}''

    /tmp/tmpapavzq0m.cs(64,23): error CS1026: ) expected

    /tmp/tmpapavzq0m.cs(64,23): error CS1002: ; expected

    /tmp/tmpapavzq0m.cs(66,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpapavzq0m.cs(74,2): error CS1513: } expected

    '
  timestamp: 1659793690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in result) {\n            result += (char)(c ^ 0x20);\n        }\n       \
    \ foreach (char c in result) {\n            result += (char)(c ^ 0x20);\n    \
    \    }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e9e824ac71ee44f9a68e8ae55347b1e8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e9e824ac71ee44f9a68e8ae55347b1e8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c ^ 0x20);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c9cd25c1e1f54474ac1e6bfc524aabf5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c9cd25c1e1f54474ac1e6bfc524aabf5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        char[] vowels = new char[]\
    \ { 'a', 'e', 'i', 'o', 'u' };\n        char[] letters = new char[] { 'b', 'c',\
    \ 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w',\
    \ 'x', 'y', 'z' };\n        char[] letters2 = new char[] { 'b', 'c', 'd', 'f',\
    \ 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y',\
    \ 'z' };\n        char[] letters3= new char[] { 'b', 'c', 'd', 'f', 'g', 'h',\
    \ 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n\
    \        char[] letters4= new char[] { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k',\
    \ 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n       \
    \ char[] letters5= new char[] { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] letters6=\
    \ new char[] { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] letters7= new char[]\
    \ { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] letters8= new char[] { 'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z' };\n        char[] letters9= new char[] { 'b', 'c', 'd',\
    \ 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x',\
    \ 'y', 'z' };\n        char[] letters10= new char[] { 'b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'\
    \ };\n        char[] letters11= new char[] { 'b', 'c', 'd', 'f', 'g', 'h', 'j',\
    \ 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n  \
    \      char[] letters12= new char[] { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k',\
    \ 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"TEST\"\
    )).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"mWDCSKR\"\
    )));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx8qhd6cw.cs(20,16): warning CS0219: The variable ''result'' is assigned
    but its value is never used

    /tmp/tmpx8qhd6cw.cs(19,26): error CS0161: ''Problem.Encode(string)'': not all
    code paths return a value

    '
  timestamp: 1659793690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in \"aeiouAEIOU\") {\n            int index = result.IndexOf(c);\n         \
    \   if (index != -1) {\n                string newString = result.Substring(0,\
    \ index) + c + result.Substring(index + 1);\n                result = newString;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\"\
    )));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"\
    YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"\
    tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\"\
    )).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <87d62f24f0b44ca9acc7c7c79a445f14>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <87d62f24f0b44ca9acc7c7c79a445f14>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            if (char.IsLetter(c)) {\n             \
    \   result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in result.ToLower()) {\n            if (char.IsLetter(c)) {\n            \
    \    result += (char)(c - 1);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e8ddcc2884e849289b326e9851edaaa3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e8ddcc2884e849289b326e9851edaaa3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in \"aeiou\") {\n            result += (char)(c ^ 0x20);\n        }\n    \
    \    foreach (char c in \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n\
    \        }\n        foreach (char c in \"1234567890\") {\n            result +=\
    \ (char)(c ^ 0x20);\n        }\n        foreach (char c in \"!@#$%^&*()\") {\n\
    \            result += (char)(c ^ 0x20);\n        }\n        foreach (char c in\
    \ \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") {\n            result += (char)(c ^ 0x20);\n\
    \        }\n        foreach (char c in \"abcdefghijklmnopqrstuvwxyz\") {\n   \
    \         result += (char)(c ^ 0x20);\n        }\n        foreach (char c in \"\
    ~`!@#$%^&*()\") {\n            result += (char)(c ^ 0x20);\n        }\n      \
    \  foreach (char c in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") {\n            result +=\
    \ (char)(c ^ 0x20);\n        }\n        foreach (char c in \"abcdefghijklmnopqrstuvwxyz\"\
    ) {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in \"~`!@#$%^&*()\") {\n            result += (char)(c ^ 0x20);\n        }\n\
    \        foreach (char c in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") {\n            result\
    \ += (char)(c ^ 0x20);\n        }\n        foreach (char c in \"abcdefghijklmnopqrstuvwxyz\"\
    ) {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in \"~`!@#$%^&*()\") {\n            result += (char)(c ^ 0x20);\n        }\n\
    \        foreach (char c in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") {\n            result\
    \ += (char)(c ^ 0x20);\n        }\n        foreach (char c in \"abcdefghijklmnopqrstuvwxyz\"\
    ) {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in \"~`!@#$%^&*()\") {\n            result += (char)(c ^ 0x20);\n        }\n\
    \        foreach (char c in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") {\n            result\
    \ += (char)(c ^ 0x20);\n        }\n        foreach (char c in \"abcdefghijklmnopqrstuvwxyz\"\
    ) {\n            \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvgrm_oyb.cs(78,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpvgrm_oyb.cs(86,2): error CS1513: } expected

    '
  timestamp: 1659793690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in \"aeiouAEIOU\") {\n            result += (char)(c ^ 0x20);\n        }\n\
    \        foreach (char c in \"AEIOUaeiou\") {\n            result += (char)(c\
    \ ^ 0x20);\n        }\n        foreach (char c in \"AEIOUaeiouAEIOU\") {\n   \
    \         result += (char)(c ^ 0x20);\n        }\n        return result;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <613fa9d97c9d4b9589e10af765501975>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <613fa9d97c9d4b9589e10af765501975>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            result += (char)(c + 1);\n        }\n \
    \       foreach (char c in message.ToUpper()) {\n            result += (char)(c\
    \ + 1);\n        }\n        foreach (char c in message.ToLower()) {\n        \
    \    result += (char)(c + 1);\n        }\n        foreach (char c in message.ToUpper())\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            result += (char)(c + 1);\n        }\n \
    \       foreach (char c in message.ToUpper()) {\n            result += (char)(c\
    \ + 1);\n        }\n        foreach (char c in message.ToLower()) {\n        \
    \    result += (char)(c + 1);\n        }\n        foreach (char c in message.ToUpper())\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            result += (char)(c + 1);\n        }\n \
    \       foreach (char c in message.ToUpper()) {\n            result += (char)(c\
    \ + 1);\n        }\n        foreach (char c in message.ToLower()) {\n        \
    \    result += (char)(c + 1);\n        }\n        foreach (char c in message.ToUpper())\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            result += (char)(c + 1);\n        }\n \
    \       foreach (char c in message.ToUpper()) {\n            result += (char)(c\
    \ + 1);\n        }\n        foreach (char c in message.ToLower()) {\n        \
    \    result += (char)(c + 1);\n        }\n        foreach (char c in message.ToUpper())\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            result += (char)(c + 1);\n        }\n \
    \       foreach (char c in message.ToUpper()) {\n            result += (char)(c\
    \ + 1);\n        }\n        foreach (char c in message.ToLower()) {\n        \
    \    result += (char)(c + 1);\n        }\n        foreach (char c in message.ToUpper())\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            result += (char)(c + 1);\n        }\n \
    \       foreach (char c in message.ToUpper()) {\n            result += (char)(c\
    \ + 1);\n        }\n        foreach (char c in message.ToLower()) {\n        \
    \    result += (char)(c + 1);\n        }\n        foreach (char c in message.ToUpper())\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            result += (char)(c + 1);\n        }\n \
    \       foreach (char c in message.ToUpper()) {\n            result += (char)(c\
    \ + 1);\n        }\n        foreach (char c in message.ToLower()) {\n        \
    \    result += (char)(c + 1);\n        }\n        foreach (char c in message.\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjhola8ys.cs(105,36): error CS1001: Identifier expected

    /tmp/tmpjhola8ys.cs(105,36): error CS1026: ) expected

    /tmp/tmpjhola8ys.cs(105,36): error CS1525: Invalid expression term ''}''

    /tmp/tmpjhola8ys.cs(105,36): error CS1002: ; expected

    '
  timestamp: 1659793690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            if (char.IsLetter(c)) {\n             \
    \   result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToLower()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dff6ba0d1de4d5683fd3b486f78feae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dff6ba0d1de4d5683fd3b486f78feae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in result.ToCharArray()) {\n            int index = GetIndex(c);\n       \
    \     if (index >= 0) {\n                result += (char)(index ^ 0x20);\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\"\
    )));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"\
    YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"\
    tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\"\
    )).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxoqee7lv.cs(25,25): error CS0103: The name ''GetIndex'' does not exist
    in the current context

    '
  timestamp: 1659793690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            if (char.IsLetter(c)) {\n                result += (char.ToLower(c));\n\
    \            }\n            else {\n                result += (char.ToUpper(c));\n\
    \            }\n        }\n        char[] vowels = { 'a', 'e', 'i', 'o', 'u' };\n\
    \        char[] letters = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] vowels2\
    \ = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] letters2 = { 'b', 'c', 'd',\
    \ 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x',\
    \ 'y', 'z' };\n        char[] vowels3 = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k',\
    \ 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n       \
    \ char[] letters3 = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p',\
    \ 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] vowels4 = { 'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z' };\n        char[] letters4 = { 'b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'\
    \ };\n        char[] vowels5 = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[]\
    \ letters5 = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] vowels6 = { 'b', 'c',\
    \ 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w',\
    \ 'x', 'y', 'z' };\n        char[] letters6 = { 'b', 'c', 'd', 'f', 'g', 'h',\
    \ 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n\
    \        char[] vowels7 = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] letters7\
    \ = { '\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptp1homht.cs(42,29): error CS1010: Newline in constant

    /tmp/tmptp1homht.cs(42,29): error CS1011: Empty character literal

    /tmp/tmptp1homht.cs(43,6): error CS1002: ; expected

    /tmp/tmptp1homht.cs(44,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmptp1homht.cs(52,2): error CS1513: } expected

    '
  timestamp: 1659793690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            result += (char)(c + 1);\n        }\n \
    \       foreach (char c in message.ToUpper()) {\n            result += (char)(c\
    \ - 1);\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f0b63fc9801c4af68b5ef9ea9d20cbf5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f0b63fc9801c4af68b5ef9ea9d20cbf5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            if (char.IsLetter(c)) {\n             \
    \   result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToLower()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToLower()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToLower()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToLower()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToLower()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"\
    tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"mWDCSKR\")));\n \
    \   Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpszrv4cyv.cs(110,32): error CS1026: ) expected

    /tmp/tmpszrv4cyv.cs(110,32): error CS1525: Invalid expression term ''}''

    /tmp/tmpszrv4cyv.cs(110,32): error CS1002: ; expected

    /tmp/tmpszrv4cyv.cs(112,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpszrv4cyv.cs(120,2): error CS1513: } expected

    '
  timestamp: 1659793690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            result += (char)(c + 1);\n        }\n \
    \       foreach (char c in message.ToUpper()) {\n            result += (char)(c\
    \ + 1);\n        }\n        foreach (char c in message.Replace(\"a\", \"A\").Replace(\"\
    e\", \"E\").Replace(\"i\", \"I\").Replace(\"o\", \"O\").Replace(\"u\", \"U\").Replace(\"\
    y\", \"Y\").Replace(\"A\", \"a\").Replace(\"E\", \"e\").Replace(\"I\", \"i\").Replace(\"\
    O\", \"o\").Replace(\"U\", \"u\").Replace(\"Y\", \"y\")) {\n            result\
    \ += (char)(c + 1);\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\"\
    )));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"\
    YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"\
    tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\"\
    )).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a592b468b8da4275a17a602d31686d91>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a592b468b8da4275a17a602d31686d91>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in result) {\n            int index = result.IndexOf(c);\n            if (index\
    \ != -1) {\n                char replacement = GetReplacement(c, index);\n   \
    \             result = result.Replace(c, replacement);\n            }\n      \
    \  }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe2p8vbzz.cs(27,36): error CS0103: The name ''GetReplacement'' does not
    exist in the current context

    '
  timestamp: 1659793690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            if (char.IsLetter(c)) {\n             \
    \   result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToLower()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dff6ba0d1de4d5683fd3b486f78feae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dff6ba0d1de4d5683fd3b486f78feae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            if (char.IsLetter(c)) {\n                result += char.ToUpper(c);\n\
    \            }\n            else {\n                result += c;\n           \
    \ }\n        }\n        char[] vowels = { 'a', 'e', 'i', 'o', 'u' };\n       \
    \ char[] letters = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p',\
    \ 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] vowels2 = { 'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z' };\n        char[] letters2 = { 'b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'\
    \ };\n        char[] vowels3 = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[]\
    \ letters3 = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] vowels4 = { 'b', 'c',\
    \ 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w',\
    \ 'x', 'y', 'z' };\n        char[] letters4 = { 'b', 'c', 'd', 'f', 'g', 'h',\
    \ 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n\
    \        char[] vowels5 = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] letters5\
    \ = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] vowels6 = { 'b', 'c', 'd', 'f',\
    \ 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y',\
    \ 'z' };\n        char[] letters6 = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k',\
    \ 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n       \
    \ char[] vowels7 = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p',\
    \ 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] letters7 = {\
    \ 'b', 'c', 'd', 'f', 'g', 'h\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv4mekwpt.cs(42,54): error CS1010: Newline in constant

    /tmp/tmpv4mekwpt.cs(43,6): error CS1002: ; expected

    /tmp/tmpv4mekwpt.cs(44,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpv4mekwpt.cs(52,2): error CS1513: } expected

    '
  timestamp: 1659793690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            if (char.IsLetter(c)) {\n                result += (char.IsUpper(c)\
    \ ? char.ToLower(c) : char.ToUpper(c));\n            }\n        }\n        foreach\
    \ (char c in result) {\n            if (char.IsLetter(c)) {\n                result\
    \ += (char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c));\n            }\n \
    \       }\n        foreach (char c in result) {\n            if (char.IsLetter(c))\
    \ {\n                result += (char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c));\n\
    \            }\n        }\n        foreach (char c in result) {\n            if\
    \ (char.IsLetter(c)) {\n                result += (char.IsUpper(c) ? char.ToLower(c)\
    \ : char.ToUpper(c));\n            }\n        }\n        foreach (char c in result)\
    \ {\n            if (char.IsLetter(c)) {\n                result += (char.IsUpper(c)\
    \ ? char.ToLower(c) : char.ToUpper(c));\n            }\n        }\n        foreach\
    \ (char c in result) {\n            if (char.IsLetter(c)) {\n                result\
    \ += (char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c));\n            }\n \
    \       }\n        foreach (char c in result) {\n            if (char.IsLetter(c))\
    \ {\n                result += (char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c));\n\
    \            }\n        }\n        foreach (char c in result) {\n            if\
    \ (char.IsLetter(c)) {\n                result += (char.IsUpper(c) ? char.ToLower(c)\
    \ : char.ToUpper(c));\n            }\n        }\n        foreach (char c in result)\
    \ {\n            if (char.IsLetter(c)) {\n                result += (char.IsUpper(c)\
    \ ? char.ToLower(c) : char.ToUpper(c));\n            }\n        }\n        foreach\
    \ (char c in result) {\n            if (char.IsLetter(c)) {\n                result\
    \ += (char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c));\n            }\n \
    \       }\n        foreach (char c in result) {\n            if (char.IsLetter(c))\
    \ {\n                result += (char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c));\n\
    \            }\n        }\n        foreach (char c in result) {\n            if\
    \ (char.IsLetter(c)) {\n                result += (char.IsUpper(c) ? char.ToLower(c)\
    \ : char.ToUpper(c));\n            }\n        }\n        foreach (char c in result)\
    \ {\n            if (char.IsLetter(c)) {\n                result += (char.IsUpper(c)\
    \ ? char.ToLow\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps36reir0.cs(83,56): error CS1003: Syntax error, '':'' expected

    /tmp/tmps36reir0.cs(83,56): error CS1525: Invalid expression term ''}''

    /tmp/tmps36reir0.cs(83,56): error CS1026: ) expected

    /tmp/tmps36reir0.cs(83,56): error CS1002: ; expected

    /tmp/tmps36reir0.cs(85,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmps36reir0.cs(93,2): error CS1513: } expected

    '
  timestamp: 1659793690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in \"aeiou\") {\n            result += (char)(c ^ 0x20);\n        }\n    \
    \    foreach (char c in \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n\
    \        }\n        foreach (char c in \"1234567890\") {\n            result +=\
    \ (char)(c ^ 0x20);\n        }\n        foreach (char c in \"!@#$%^&*()\") {\n\
    \            result += (char)(c ^ 0x20);\n        }\n        foreach (char c in\
    \ \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") {\n            result += (char)(c ^ 0x20);\n\
    \        }\n        foreach (char c in \"abcdefghijklmnopqrstuvwxyz\") {\n   \
    \         result += (char)(c ^ 0x20);\n        }\n        foreach (char c in \"\
    ~`!@#$%^&*()\") {\n            result += (char)(c ^ 0x20);\n        }\n      \
    \  foreach (char c in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") {\n            result +=\
    \ (char)(c ^ 0x20);\n        }\n        foreach (char c in \"abcdefghijklmnopqrstuvwxyz\"\
    ) {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in \"~`!@#$%^&*()\") {\n            result += (char)(c ^ 0x20);\n        }\n\
    \        foreach (char c in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") {\n            result\
    \ += (char)(c ^ 0x20);\n        }\n        foreach (char c in \"abcdefghijklmnopqrstuvwxyz\"\
    ) {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in \"~`!@#$%^&*()\") {\n            result += (char)(c ^ 0x20);\n        }\n\
    \        foreach (char c in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") {\n            result\
    \ += (char)(c ^ 0x20);\n        }\n        foreach (char c in \"abcdefghijklmnopqrstuvwxyz\"\
    ) {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in \"~`!@#$%^&*()\") {\n            result += (char)(c ^ 0x20);\n        }\n\
    \        foreach (char c in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") {\n            result\
    \ += (char)(c ^ 0x20);\n        }\n        foreach (char c in \"abcdefghijklmnopqrstuvwxyz\"\
    ) {\n            \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvgrm_oyb.cs(78,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpvgrm_oyb.cs(86,2): error CS1513: } expected

    '
  timestamp: 1659793690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in \"aeiouAEIOU\") {\n            result += (char)(c ^ 0x20);\n        }\n\
    \        foreach (char c in \"AEIOUaeiou\") {\n            result += (char)(c\
    \ ^ 0x20);\n        }\n        foreach (char c in \"AEIOUaeiouAEIOU\") {\n   \
    \         result += (char)(c ^ 0x20);\n        }\n        foreach (char c in \"\
    aeiouAEIOUaeiouAEIOU\") {\n            result += (char)(c ^ 0x20);\n        }\n\
    \        foreach (char c in \"aeiouAEIOUaeiouAEIOUaeiou\") {\n            result\
    \ += (char)(c ^ 0x20);\n        }\n        foreach (char c in \"aeiouAEIOUaeiouAEIOUaeiouAEIOU\"\
    ) {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in \"aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou\") {\n            result += (char)(c\
    \ ^ 0x20);\n        }\n        foreach (char c in \"aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU\"\
    ) {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in \"aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou\") {\n            result\
    \ += (char)(c ^ 0x20);\n        }\n        foreach (char c in \"aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU\"\
    ) {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in \"aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou\") {\n      \
    \      result += (char)(c ^ 0x20);\n        }\n        foreach (char c in \"aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU\"\
    ) {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in \"aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou\")\
    \ {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in \"aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\"\
    )));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"\
    YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"\
    tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\"\
    )).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf9xs46nr.cs(63,28): error CS1010: Newline in constant

    /tmp/tmpf9xs46nr.cs(63,74): error CS1026: ) expected

    /tmp/tmpf9xs46nr.cs(63,74): error CS1525: Invalid expression term ''}''

    /tmp/tmpf9xs46nr.cs(63,74): error CS1002: ; expected

    '
  timestamp: 1659793690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            if (c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n                result += c;\n            }\n     \
    \   }\n        foreach (char c in message.ToUpper()) {\n            if (c == 'A'\
    \ || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n                result +=\
    \ c;\n            }\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\"\
    )));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"\
    YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"\
    tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\"\
    )).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <acfd11be5e2245f0917bd4300f22e316>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <acfd11be5e2245f0917bd4300f22e316>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in result) {\n            int index = GetIndex(c);\n            if (index\
    \ != -1) {\n                char replacement = GetReplacement(c);\n          \
    \      result += replacement;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyiru33ey.cs(25,25): error CS0103: The name ''GetIndex'' does not exist
    in the current context

    /tmp/tmpyiru33ey.cs(27,36): error CS0103: The name ''GetReplacement'' does not
    exist in the current context

    '
  timestamp: 1659793690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        char[] chars = message.ToCharArray();\n\
    \        foreach (char c in chars) {\n            if (char.IsLetter(c)) {\n  \
    \              result += char.ToUpper(c);\n            }\n            else {\n\
    \                result += char.ToLower(c);\n            }\n        }\n      \
    \  char[] vowels = new char[] { 'a', 'e', 'i', 'o', 'u' };\n        foreach (char\
    \ c in chars) {\n            if (vowels.Contains(c)) {\n                result\
    \ += char.ToUpper(c);\n            }\n            else {\n                result\
    \ += char.ToLower(c);\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"TEST\"\
    )).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"mWDCSKR\"\
    )));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4d4adc2233b458f85e66bf8b754c98e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4d4adc2233b458f85e66bf8b754c98e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            if (char.IsLetter(c)) {\n                result += (char.ToLower(c));\n\
    \            }\n            else {\n                result += (char.ToUpper(c));\n\
    \            }\n        }\n        char[] vowels = new char[] {'a', 'e', 'i',\
    \ 'o', 'u'};\n        char[] letters = new char[] {'A', 'E', 'I', 'O', 'U'};\n\
    \        char[] vowels2 = new char[] {'A', 'E', 'I', 'O', 'U'};\n        char[]\
    \ letters2 = new char[] {'a', 'e', 'i', 'o', 'u'};\n        char[] vowels3 = new\
    \ char[] {'A', 'E', 'I', 'O', 'U'};\n        char[] letters3 = new char[] {'a',\
    \ 'e', 'i', 'o', 'u'};\n        char[] vowels4 = new char[] {'A', 'E', 'I', 'O',\
    \ 'U'};\n        char[] letters4 = new char[] {'a', 'e', 'i', 'o', 'u'};\n   \
    \     char[] vowels5 = new char[] {'A', 'E', 'I', 'O', 'U'};\n        char[] letters5\
    \ = new char[] {'a', 'e', 'i', 'o', 'u'};\n        char[] vowels6 = new char[]\
    \ {'A', 'E', 'I', 'O', 'U'};\n        char[] letters6 = new char[] {'a', 'e',\
    \ 'i', 'o', 'u'};\n        char[] vowels7 = new char[] {'A', 'E', 'I', 'O', 'U'};\n\
    \        char[] letters7 = new char[] {'a', 'e', 'i', 'o', 'u'};\n        char[]\
    \ vowels8 = new char[] {'A', 'E', 'I', 'O', 'U'};\n        char[] letters8 = new\
    \ char[] {'a', 'e', 'i', 'o', 'u'};\n        char[] vowels9 = new char[] {'A',\
    \ 'E', 'I', 'O', 'U'};\n        char[] letters9 = new char[] {'a', 'e', 'i', 'o',\
    \ 'u'};\n        char[] vowels10 = new char[] {'A', 'E', 'I', 'O', 'U'};\n   \
    \     char[] letters10 = new char[] {'a', 'e', 'i', 'o', 'u'};\n        char[]\
    \ vowels11 = new char[] {'A', 'E', 'I', 'O', 'U'};\n        char[] letters11 =\
    \ new char[] {'a', 'e', 'i', 'o', 'u'};\n        char[] vowels12 = new char[]\
    \ {'A', 'E', 'I', 'O', 'U'};\n        char[] letters12 = new char[] {'a', 'e',\
    \ 'i', 'o', 'u'};\n        char[] vowels13 = new char[] {'A', 'E\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"\
    tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"mWDCSKR\")));\n \
    \   Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyx2zh5r2.cs(53,44): error CS1010: Newline in constant

    /tmp/tmpyx2zh5r2.cs(54,6): error CS1002: ; expected

    /tmp/tmpyx2zh5r2.cs(55,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpyx2zh5r2.cs(63,2): error CS1513: } expected

    '
  timestamp: 1659793690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            result += (char)(c + 1);\n        }\n \
    \       foreach (char c in message.ToUpper()) {\n            result += (char)(c\
    \ + 1);\n        }\n        foreach (char c in message.ToLower()) {\n        \
    \    result += (char)(c + 1);\n        }\n        foreach (char c in message.ToUpper())\
    \ {\n            result += (char)(c + 1);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ca46963c488453badf3775add54952d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ca46963c488453badf3775add54952d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dcf52f9569d14947a30a1b82cb6beb47>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dcf52f9569d14947a30a1b82cb6beb47>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            if (char.IsLetter(c)) {\n                result += char.ToUpper(c);\n\
    \            }\n            else {\n                result += c;\n           \
    \ }\n        }\n        char[] vowels = new char[] { 'a', 'e', 'i', 'o', 'u' };\n\
    \        char[] consonants = new char[] { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k',\
    \ 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n       \
    \ char[] vowels2 = new char[] { 'A', 'E', 'I', 'O', 'U' };\n        char[] consonants2\
    \ = new char[] { 'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q',\
    \ 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z' };\n        char[] vowels3 = new char[]\
    \ { 'a', 'e', 'i', 'o', 'u' };\n        char[] consonants3 = new char[] { 'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z' };\n        char[] vowels4 = new char[] { 'A', 'E', 'I',\
    \ 'O', 'U' };\n        char[] consonants4 = new char[] { 'B', 'C', 'D', 'F', 'G',\
    \ 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z'\
    \ };\n        char[] vowels5 = new char[] { 'a', 'e', 'i', 'o', 'u' };\n     \
    \   char[] consonants5 = new char[] { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k',\
    \ 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n       \
    \ char[] vowels6 = new char[] { 'A', 'E', 'I', 'O', 'U' };\n        char[] consonants6\
    \ = new char[] { 'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q',\
    \ 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z' };\n        char[] vowels7 = new char[]\
    \ { 'a', 'e', 'i', 'o', 'u' };\n        char[] consonants7 = new char[] { 'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z' };\n        char[] vowels8 = new char[] { 'A', 'E\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"TEST\"\
    )).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"mWDCSKR\"\
    )));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0k29z_r2.cs(43,44): error CS1010: Newline in constant

    /tmp/tmp0k29z_r2.cs(44,6): error CS1002: ; expected

    /tmp/tmp0k29z_r2.cs(45,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp0k29z_r2.cs(53,2): error CS1513: } expected

    '
  timestamp: 1659793690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message) {\n            result += (char)(c - 1);\n        }\n        foreach\
    \ (char c in message) {\n            if (char.IsLetter(c)) {\n               \
    \ result += (char)(c ^ 1);\n            }\n        }\n        foreach (char c\
    \ in message) {\n            if (char.IsLetter(c)) {\n                result +=\
    \ (char)(c ^ 1);\n            }\n        }\n        return result;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(Encode((\"TEST\"\
    )).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"mWDCSKR\"\
    )));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6058c2e179bf42dbb2e58a6fb07f78af>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6058c2e179bf42dbb2e58a6fb07f78af>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793691
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in \"aeiouAEIOU\") {\n            result += (char)(c - 1);\n        }\n    \
    \    return result;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f3c394dc42044c718d4de15b5aea979f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f3c394dc42044c718d4de15b5aea979f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793691
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in \"aeiou\") {\n            result += (char)(c ^ 0x20);\n        }\n    \
    \    return result;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5c96229cefd4ccca908c39e7c4823e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5c96229cefd4ccca908c39e7c4823e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793691
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            result += (char)(c + 1);\n        }\n \
    \       foreach (char c in message.ToUpper()) {\n            result += (char)(c\
    \ + 1);\n        }\n        foreach (char c in message.Replace(\"a\", \"A\").Replace(\"\
    e\", \"E\").Replace(\"i\", \"I\").Replace(\"o\", \"O\").Replace(\"u\", \"U\").Replace(\"\
    y\", \"Y\").Replace(\"A\", \"a\").Replace(\"E\", \"e\").Replace(\"I\", \"i\").Replace(\"\
    O\", \"o\").Replace(\"U\", \"u\").Replace(\"Y\", \"y\")) {\n            result\
    \ += (char)(c + 1);\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\"\
    )));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"\
    YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"\
    tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\"\
    )).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a592b468b8da4275a17a602d31686d91>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a592b468b8da4275a17a602d31686d91>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793691
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            if (char.IsLetter(c)) {\n             \
    \   result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToLower()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dff6ba0d1de4d5683fd3b486f78feae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dff6ba0d1de4d5683fd3b486f78feae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            if (char.IsLetter(c)) {\n             \
    \   result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c - 1);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e23263975c514e6880d8c17529b1aabb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e23263975c514e6880d8c17529b1aabb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            if (char.IsLetter(c)) {\n                result += (char.IsUpper(c)\
    \ ? char.ToUpper(c) : char.ToLower());\n            }\n        }\n        foreach\
    \ (char c in result) {\n            int index = result.IndexOf(c);\n         \
    \   if (index != -1) {\n                string vowels = \"AEIOUaeiou\";\n    \
    \            string replacement = vowels.Substring(index - 2, 2);\n          \
    \      result += replacement;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprlz6bja3.cs(23,69): error CS1501: No overload for method ''ToLower'' takes
    0 arguments

    '
  timestamp: 1659793691
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            if (char.IsLetter(c)) {\n             \
    \   result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c - 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToLower()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c - 1);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <321f23e435f34d82a9c0acf81c29fcc8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <321f23e435f34d82a9c0acf81c29fcc8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        char[] chars = message.ToCharArray();\n\
    \        foreach (char c in chars) {\n            result += (char.IsUpper(c) ?\
    \ \n                ((char.IsUpper(chars[chars.IndexOf(c) + 1]) ? \n         \
    \           char.ToUpper(chars[chars.IndexOf(c) + 1]) : \n                   \
    \ char.ToLower(chars[chars.IndexOf(c) + 1])) : \n                ((char.IsUpper(chars[chars.IndexOf(c)\
    \ - 1]) ? \n                    char.ToUpper(chars[chars.IndexOf(c) - 1]) : \n\
    \                    char.ToLower(chars[chars.IndexOf(c) - 1]))));\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpccsao5wy.cs(26,64): error CS1026: ) expected

    '
  timestamp: 1659793690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToLower()\n                );\n     \
    \   }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8sqpzppw.cs(22,23): error CS0030: Cannot convert type ''string'' to ''char''

    '
  timestamp: 1659793691
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in \"aeiou\") {\n            result += (char)(c ^ 0x20);\n        }\n    \
    \    return result;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5c96229cefd4ccca908c39e7c4823e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5c96229cefd4ccca908c39e7c4823e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793691
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in \"aeiou\") {\n            result += (char)(c ^ 0x20);\n        }\n    \
    \    return result;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5c96229cefd4ccca908c39e7c4823e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5c96229cefd4ccca908c39e7c4823e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            if (char.IsLetter(c)) {\n                result += (char.ToUpper(c));\n\
    \            }\n            else {\n                result += (char.ToLower(c));\n\
    \            }\n        }\n        char[] vowels = new char[] { 'a', 'e', 'i',\
    \ 'o', 'u' };\n        char[] letters = new char[] { 'b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'\
    \ };\n        char[] vowels2 = new char[] { 'b', 'c', 'd', 'f', 'g', 'h', 'j',\
    \ 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n  \
    \      char[] letters2 = new char[] { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k',\
    \ 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n       \
    \ char[] vowels3 = new char[] { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] letters3\
    \ = new char[] { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] vowels4 = new char[]\
    \ { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] letters4 = new char[] { 'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z' };\n        char[] vowels5 = new char[] { 'b', 'c', 'd',\
    \ 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x',\
    \ 'y', 'z' };\n        char[] letters5 = new char[] { 'b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'\
    \ };\n        char[] vowels6 = new char[] { 'b', 'c', 'd', 'f', 'g', 'h', 'j',\
    \ 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n  \
    \      char[] letters6 = new char[] { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k',\
    \ 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n       \
    \ char\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa9pc_j_u.cs(41,13): error CS1001: Identifier expected

    /tmp/tmpa9pc_j_u.cs(41,13): error CS1002: ; expected

    '
  timestamp: 1659793690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            result += (char)(c + 1);\n        }\n \
    \       foreach (char c in message.ToUpper()) {\n            result += (char)(c\
    \ + 1);\n        }\n        foreach (char c in message.ToLower()) {\n        \
    \    result += (char)(c + 1);\n        }\n        foreach (char c in message.ToUpper())\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            result += (char)(c + 1);\n        }\n \
    \       foreach (char c in message.ToUpper()) {\n            result += (char)(c\
    \ + 1);\n        }\n        foreach (char c in message.ToLower()) {\n        \
    \    result += (char)(c + 1);\n        }\n        foreach (char c in message.ToUpper())\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            result += (char)(c + 1);\n        }\n \
    \       foreach (char c in message.ToUpper()) {\n            result += (char)(c\
    \ + 1);\n        }\n        foreach (char c in message.ToLower()) {\n        \
    \    result += (char)(c + 1);\n        }\n        foreach (char c in message.ToUpper())\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            result += (char)(c + 1);\n        }\n \
    \       foreach (char c in message.ToUpper()) {\n            result += (char)(c\
    \ + 1);\n        }\n        foreach (char c in message.ToLower()) {\n        \
    \    result += (char)(c + 1);\n        }\n        foreach (char c in message.ToUpper())\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            result += (char)(c + 1);\n        }\n \
    \       foreach (char c in message.ToUpper()) {\n            result += (char)(c\
    \ + 1);\n        }\n        foreach (char c in message.ToLower()) {\n        \
    \    result += (char)(c + 1);\n        }\n        foreach (char c in message.ToUpper())\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            result += (char)(c + 1);\n        }\n \
    \       foreach (char c in message.ToUpper()) {\n            result += (char)(c\
    \ + 1);\n        }\n        foreach (char c in message.ToLower()) {\n        \
    \    result += (char)(c + 1);\n        }\n        foreach (char c in message.ToUpper())\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            result += (char)(c + 1);\n        }\n \
    \       foreach (char c in message.ToUpper()) {\n            result += (char)(c\
    \ + 1);\n        }\n        foreach (char c in message.ToLower()) {\n        \
    \    result += (char)(c + 1);\n        }\n        foreach (char c in message.\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjhola8ys.cs(105,36): error CS1001: Identifier expected

    /tmp/tmpjhola8ys.cs(105,36): error CS1026: ) expected

    /tmp/tmpjhola8ys.cs(105,36): error CS1525: Invalid expression term ''}''

    /tmp/tmpjhola8ys.cs(105,36): error CS1002: ; expected

    '
  timestamp: 1659793690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dcf52f9569d14947a30a1b82cb6beb47>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dcf52f9569d14947a30a1b82cb6beb47>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            result += (char)(c + 1);\n        }\n \
    \       foreach (char c in message.ToUpper()) {\n            result += (char)(c\
    \ + 1);\n        }\n        foreach (char c in message.Replace(\"a\", \"A\").Replace(\"\
    e\", \"E\").Replace(\"i\", \"I\").Replace(\"o\", \"O\").Replace(\"u\", \"U\").Replace(\"\
    y\", \"Y\").Replace(\"A\", \"a\").Replace(\"E\", \"e\").Replace(\"I\", \"i\").Replace(\"\
    O\", \"o\").Replace(\"U\", \"u\").Replace(\"Y\", \"y\")) {\n            result\
    \ += (char)(c + 1);\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\"\
    )));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"\
    YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"\
    tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\"\
    )).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a592b468b8da4275a17a602d31686d91>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a592b468b8da4275a17a602d31686d91>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in \"aeiou\") {\n            result += (char)(c ^ 0x20);\n        }\n    \
    \    foreach (char c in \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n\
    \        }\n        foreach (char c in \"1234567890\") {\n            result +=\
    \ (char)(c ^ 0x20);\n        }\n        foreach (char c in \"!@#$%^&*()\") {\n\
    \            result += (char)(c ^ 0x20);\n        }\n        foreach (char c in\
    \ \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") {\n            result += (char)(c ^ 0x20);\n\
    \        }\n        foreach (char c in \"abcdefghijklmnopqrstuvwxyz\") {\n   \
    \         result += (char)(c ^ 0x20);\n        }\n        foreach (char c in \"\
    ~`!@#$%^&*()\") {\n            result += (char)(c ^ 0x20);\n        }\n      \
    \  foreach (char c in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") {\n            result +=\
    \ (char)(c ^ 0x20);\n        }\n        foreach (char c in \"abcdefghijklmnopqrstuvwxyz\"\
    ) {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in \"~`!@#$%^&*()\") {\n            result += (char)(c ^ 0x20);\n        }\n\
    \        foreach (char c in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") {\n            result\
    \ += (char)(c ^ 0x20);\n        }\n        foreach (char c in \"abcdefghijklmnopqrstuvwxyz\"\
    ) {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in \"~`!@#$%^&*()\") {\n            result += (char)(c ^ 0x20);\n        }\n\
    \        foreach (char c in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") {\n            result\
    \ += (char)(c ^ 0x20);\n        }\n        foreach (char c in \"abcdefghijklmnopqrstuvwxyz\"\
    ) {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in \"~`!@#$%^&*()\") {\n            result += (char)(c ^ 0x20);\n        }\n\
    \        foreach (char c in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") {\n            result\
    \ += (char)(c ^ 0x20);\n        }\n        foreach (char c in \"abcdefghijklmnopqrstuvwxyz\"\
    ) {\n            \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvgrm_oyb.cs(78,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpvgrm_oyb.cs(86,2): error CS1513: } expected

    '
  timestamp: 1659793690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            if (char.IsLetter(c)) {\n             \
    \   result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToLower()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dff6ba0d1de4d5683fd3b486f78feae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dff6ba0d1de4d5683fd3b486f78feae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in \"aeiou\") {\n            result += (char)(c ^ 0x20);\n        }\n    \
    \    return result;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5c96229cefd4ccca908c39e7c4823e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5c96229cefd4ccca908c39e7c4823e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            if (char.IsLetter(c)) {\n                result += (char.ToLower(c));\n\
    \            }\n            else {\n                result += (char.ToUpper(c));\n\
    \            }\n        }\n        char[] vowels = new char[] { 'A', 'E', 'I',\
    \ 'O', 'U' };\n        char[] vowelsV2 = new char[] { 'A', 'E', 'I', 'O', 'U',\
    \ 'a', 'e', 'i', 'o', 'u' };\n        char[] vowelsV3 = new char[] { 'A', 'E',\
    \ 'I', 'O', 'U', 'a', 'e', 'i', 'o', 'u', 'a', 'e', 'i', 'o', 'u' };\n       \
    \ char[] vowelsV4 = new char[] { 'A', 'E', 'I', 'O', 'U', 'a', 'e', 'i', 'o',\
    \ 'u', 'a', 'e', 'i', 'o', 'u', 'a', 'e', 'i', 'o', 'u' };\n        char[] vowelsV5\
    \ = new char[] { 'A', 'E', 'I', 'O', 'U', 'a', 'e', 'i', 'o', 'u', 'a', 'e', 'i',\
    \ 'o', 'u', 'a', 'e', 'i', 'o', 'u', 'a', 'e', 'i', 'o', 'u' };\n        char[]\
    \ vowelsV6 = new char[] { 'A', 'E', 'I', 'O', 'U', 'a', 'e', 'i', 'o', 'u', 'a',\
    \ 'e', 'i', 'o', 'u', 'a', 'e', 'i', 'o', 'u', 'a', 'e', 'i', 'o', 'u', 'a', 'e',\
    \ 'i', 'o', 'u' };\n        char[] vowelsV7 = new char[] { 'A', 'E', 'I', 'O',\
    \ 'U', 'a', 'e', 'i', 'o', 'u', 'a', 'e', 'i', 'o', 'u', 'a', 'e', 'i', 'o', 'u',\
    \ 'a', 'e', 'i', 'o', 'u', 'a', 'e', 'i', 'o', 'u', 'a', 'e', 'i', 'o', 'u' };\n\
    \        char[] vowelsV8 = new char[] { 'A', 'E', 'I', 'O', 'U', 'a', 'e', 'i',\
    \ 'o', 'u', 'a', 'e', 'i', 'o', 'u', 'a', 'e', 'i', 'o', 'u', 'a', 'e', 'i', 'o',\
    \ 'u', 'a', 'e', 'i', 'o', 'u', 'a', 'e', 'i', 'o', 'u', 'a', 'e', 'i', 'o', 'u'\
    \ };\n        char[] vowelsV9 = new char[] { 'A', 'E', 'I', 'O', 'U', 'a', 'e',\
    \ 'i', 'o', 'u', 'a', 'e', 'i', 'o', 'u', 'a', 'e', 'i', 'o', 'u', 'a', 'e', 'i',\
    \ 'o', 'u', 'a', 'e', 'i', 'o', 'u', 'a', 'e', 'i', 'o', 'u', 'a', '\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"TEST\"\
    )).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"mWDCSKR\"\
    )));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuq5fa5wx.cs(37,220): error CS1010: Newline in constant

    /tmp/tmpuq5fa5wx.cs(37,220): error CS1011: Empty character literal

    /tmp/tmpuq5fa5wx.cs(38,6): error CS1002: ; expected

    /tmp/tmpuq5fa5wx.cs(39,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpuq5fa5wx.cs(47,2): error CS1513: } expected

    '
  timestamp: 1659793690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c ^ 0x20);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c9cd25c1e1f54474ac1e6bfc524aabf5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c9cd25c1e1f54474ac1e6bfc524aabf5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dcf52f9569d14947a30a1b82cb6beb47>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dcf52f9569d14947a30a1b82cb6beb47>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message) {\n            if (char.IsUpper(c)) {\n                result +=\
    \ (char)(c + 1);\n            }\n        }\n        foreach (char c in message)\
    \ {\n            if (char.IsLetter(c)) {\n                result += (char)(c +\
    \ 1);\n            }\n        }\n        foreach (char c in message) {\n     \
    \       if (char.IsLetterOrDigit(c)) {\n                result += (char)(c + 1);\n\
    \            }\n        }\n        foreach (char c in message) {\n           \
    \ if (char.IsLetterOrDigit(c) || char.IsUpper(c)) {\n                result +=\
    \ (char)(c + 1);\n            }\n        }\n        foreach (char c in message)\
    \ {\n            if (char.IsLetterOrDigit(c) || char.IsUpper(c) || char.IsLower(c))\
    \ {\n                result += (char)(c + 1);\n            }\n        }\n    \
    \    foreach (char c in message) {\n            if (char.IsLetterOrDigit(c) ||\
    \ char.IsUpper(c) || char.IsLower(c) || char.IsUpperOrLower(c)) {\n          \
    \      result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message) {\n            if (char.IsLetterOrDigit(c) || char.IsUpper(c)\
    \ || char.IsLower(c) || char.IsUpperOrLower(c) || char.IsLetter(c)) {\n      \
    \          result += (char)(c + 1);\n            }\n        }\n        foreach\
    \ (char c in message) {\n            if (char.IsLetterOrDigit(c) || char.IsUpper(c)\
    \ || char.IsLower(c) || char.IsUpperOrLower(c) || char.IsLetter(c) || char.IsDigit(c))\
    \ {\n                result += (char)(c + 1);\n            }\n        }\n    \
    \    return result;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmo_jkarn.cs(50,87): error CS0117: ''char'' does not contain a definition
    for ''IsUpperOrLower''

    /tmp/tmpmo_jkarn.cs(55,87): error CS0117: ''char'' does not contain a definition
    for ''IsUpperOrLower''

    /tmp/tmpmo_jkarn.cs(60,87): error CS0117: ''char'' does not contain a definition
    for ''IsUpperOrLower''

    '
  timestamp: 1659793691
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        char[] vowels = { 'a', 'e', 'i', 'o', 'u' };\n        char[]\
    \ letters = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] letters2 = { 'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z' };\n        char[] letters31 = { 'b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'\
    \ };\n        char[] letters32 = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[]\
    \ letters32 = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] letters33 = { 'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z' };\n        char[] letters34 = { 'b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'\
    \ };\n        char[] letters35 = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[]\
    \ letters36 = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] letters37 = { 'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z' };\n        char[] letters38 = { 'b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'\
    \ };\n        char[] letters39 = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[]\
    \ letters40 = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] letters41 = { '\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppg48sjp7.cs(34,30): error CS1010: Newline in constant

    /tmp/tmppg48sjp7.cs(34,30): error CS1011: Empty character literal

    /tmp/tmppg48sjp7.cs(35,6): error CS1002: ; expected

    /tmp/tmppg48sjp7.cs(36,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmppg48sjp7.cs(44,2): error CS1513: } expected

    '
  timestamp: 1659793690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            result += (char)(c + 1);\n        }\n \
    \       foreach (char c in message.ToUpper()) {\n            result += (char)(c\
    \ + 1);\n        }\n        foreach (char c in message.ToLower()) {\n        \
    \    result += (char)(c + 1);\n        }\n        foreach (char c in message.ToUpper())\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            result += (char)(c + 1);\n        }\n \
    \       foreach (char c in message.ToUpper()) {\n            result += (char)(c\
    \ + 1);\n        }\n        foreach (char c in message.ToLower()) {\n        \
    \    result += (char)(c + 1);\n        }\n        foreach (char c in message.ToUpper())\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            result += (char)(c + 1);\n        }\n \
    \       foreach (char c in message.ToUpper()) {\n            result += (char)(c\
    \ + 1);\n        }\n        foreach (char c in message.ToLower()) {\n        \
    \    result += (char)(c + 1);\n        }\n        foreach (char c in message.ToUpper())\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            result += (char)(c + 1);\n        }\n \
    \       foreach (char c in message.ToUpper()) {\n            result += (char)(c\
    \ + 1);\n        }\n        foreach (char c in message.ToLower()) {\n        \
    \    result += (char)(c + 1);\n        }\n        foreach (char c in message.ToUpper())\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            result += (char)(c + 1);\n        }\n \
    \       foreach (char c in message.ToUpper()) {\n            result += (char)(c\
    \ + 1);\n        }\n        foreach (char c in message.ToLower()) {\n        \
    \    result += (char)(c + 1);\n        }\n        foreach (char c in message.ToUpper())\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            result += (char)(c + 1);\n        }\n \
    \       foreach (char c in message.ToUpper()) {\n            result += (char)(c\
    \ + 1);\n        }\n        foreach (char c in message.ToLower()) {\n        \
    \    result += (char)(c + 1);\n        }\n        foreach (char c in message.ToUpper())\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            result += (char)(c + 1);\n        }\n \
    \       foreach (char c in message.ToUpper()) {\n            result += (char)(c\
    \ + 1);\n        }\n        foreach (char c in message.ToLower()) {\n        \
    \    result += (char)(c + 1);\n        }\n        foreach (char c in message.\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjhola8ys.cs(105,36): error CS1001: Identifier expected

    /tmp/tmpjhola8ys.cs(105,36): error CS1026: ) expected

    /tmp/tmpjhola8ys.cs(105,36): error CS1525: Invalid expression term ''}''

    /tmp/tmpjhola8ys.cs(105,36): error CS1002: ; expected

    '
  timestamp: 1659793690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in \"aeiou\") {\n            result += (char)(c ^ 0x20);\n        }\n    \
    \    return result;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5c96229cefd4ccca908c39e7c4823e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5c96229cefd4ccca908c39e7c4823e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToLower() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToLower() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToLower() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToLower() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToLower() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToLower() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToLower() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToLower() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToLower() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToLower() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToLower() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToLower() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToLower() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToLower() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToLower() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToLower() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToLower() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToLower() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToLower() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToLower() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg9xuvmjt.cs(64,23): error CS1525: Invalid expression term ''}''

    /tmp/tmpg9xuvmjt.cs(64,23): error CS1026: ) expected

    /tmp/tmpg9xuvmjt.cs(64,23): error CS1002: ; expected

    /tmp/tmpg9xuvmjt.cs(66,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpg9xuvmjt.cs(74,2): error CS1513: } expected

    '
  timestamp: 1659793689
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            if (char.IsLetter(c)) {\n                result += (char.ToLower(c));\n\
    \            }\n            else {\n                result += (char.ToUpper(c));\n\
    \            }\n        }\n        char[] vowels = new char[] { 'a', 'e', 'i',\
    \ 'o', 'u' };\n        char[] letters = new char[] { 'b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'\
    \ };\n        char[] letters2 = new char[] { 'A', 'B', 'C', 'D', 'F', 'G', 'H',\
    \ 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z' };\n\
    \        char[] vowels2 = new char[] { 'a', 'e', 'i', 'o', 'u' };\n        char[]\
    \ letters3 = new char[] { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\
    \ 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] vowels3\
    \ = new char[] { 'a', 'e', 'i', 'o', 'u' };\n        char[] letters4 = new char[]\
    \ { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] vowels4 = new char[] { 'a',\
    \ 'e', 'i', 'o', 'u' };\n        char[] letters5 = new char[] { 'b', 'c', 'd',\
    \ 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x',\
    \ 'y', 'z' };\n        char[] vowels5 = new char[] { 'a', 'e', 'i', 'o', 'u' };\n\
    \        char[] letters6 = new char[] { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k',\
    \ 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n       \
    \ char[] vowels6 = new char[] { 'a', 'e', 'i', 'o', 'u' };\n        char[] letters7\
    \ = new char[] { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] vowels7 = new char[]\
    \ { 'a', 'e', 'i', 'o', 'u' };\n        char[] letters8 = new char[] { 'b', 'c',\
    \ 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"\
    tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"mWDCSKR\")));\n \
    \   Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxq2g7jei.cs(43,105): error CS1010: Newline in constant

    /tmp/tmpxq2g7jei.cs(44,6): error CS1002: ; expected

    /tmp/tmpxq2g7jei.cs(45,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpxq2g7jei.cs(53,2): error CS1513: } expected

    '
  timestamp: 1659793690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in \"aeiou\") {\n            result += (char)(c ^ 0x20);\n        }\n    \
    \    foreach (char c in \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n\
    \        }\n        foreach (char c in \"AEIOU\") {\n            result += (char)(c\
    \ ^ 0x20);\n        }\n        foreach (char c in \"AEIOU\") {\n            result\
    \ += (char)(c ^ 0x20);\n        }\n        foreach (char c in \"AEIOU\") {\n \
    \           result += (char)(c ^ 0x20);\n        }\n        foreach (char c in\
    \ \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n        }\n        foreach\
    \ (char c in \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n        }\n\
    \        foreach (char c in \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n\
    \        }\n        foreach (char c in \"AEIOU\") {\n            result += (char)(c\
    \ ^ 0x20);\n        }\n        foreach (char c in \"AEIOU\") {\n            result\
    \ += (char)(c ^ 0x20);\n        }\n        foreach (char c in \"AEIOU\") {\n \
    \           result += (char)(c ^ 0x20);\n        }\n        foreach (char c in\
    \ \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n        }\n        foreach\
    \ (char c in \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n        }\n\
    \        foreach (char c in \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n\
    \        }\n        foreach (char c in \"AEIOU\") {\n            result += (char)(c\
    \ ^ 0x20);\n        }\n        foreach (char c in \"AEIOU\") {\n            result\
    \ += (char)(c ^ 0x20);\n        }\n        foreach (char c in \"AEIOU\") {\n \
    \           result += (char)(c ^ 0x20);\n        }\n        foreach (char c in\
    \ \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n        }\n        foreach\
    \ (char c in \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n        }\n\
    \        foreach (char c in \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n\
    \        }\n        foreach (char c in \"AEIOU\") {\n            result += (char)(c\
    \ ^ 0x20);\n        }\n        foreach (char c in \"AEIOU\") {\n            result\
    \ += (char)(c ^ 0x20);\n        }\n        foreach (char c in \"AEIOU\") {\n \
    \           result += (char)(c ^ 0x20);\n        }\n        foreach (char c in\
    \ \"AEIO\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpncb76l00.cs(93,28): error CS1010: Newline in constant

    /tmp/tmpncb76l00.cs(93,33): error CS1026: ) expected

    /tmp/tmpncb76l00.cs(93,33): error CS1525: Invalid expression term ''}''

    /tmp/tmpncb76l00.cs(93,33): error CS1002: ; expected

    '
  timestamp: 1659793691
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c >= 'a' && c <= 'z' ? c : ((int)c + 1));\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a1d563b6688c47f6af0e9eb4a89416b6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a1d563b6688c47f6af0e9eb4a89416b6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            if (char.IsLetter(c)) {\n                result += (char.ToUpper(c));\n\
    \            }\n            else {\n                result += (char.ToLower(c));\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\"\
    )));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"\
    YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"\
    tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\"\
    )).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e7b4532d78f4479c97dbbbdf511021bc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e7b4532d78f4479c97dbbbdf511021bc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        char[] vowels = { 'a', 'e', 'i', 'o', 'u' };\n        char[]\
    \ letters = { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\
    \ 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z' };\n       \
    \ char[] spaces = { ' ' };\n        char[] numbers = { '0', '1', '2', '3', '4',\
    \ '5', '6', '7', '8', '9' };\n        char[] punctuation = { '!', '\"', '#', '$',\
    \ '%', '&', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?',\
    \ '@', '[', ']', '^', '_', '`', '{', '|', '}', '~' };\n        char[] special\
    \ = { '@', '#', '$', '%', '^', '&', '*', '(', ')', '[', ']', '{', '}', '~' };\n\
    \        char[] allLetters = letters.Union(vowels).Union(spaces).Union(numbers).Union(punctuation).Union(special).ToArray();\n\
    \        char[] allVowels = vowels.ToArray();\n        char[] allSpecials = special.ToArray();\n\
    \        char[] allNumbers = numbers.ToArray();\n        char[] allPunctuation\
    \ = punctuation.ToArray();\n        char[] allSpaces = spaces.ToArray();\n   \
    \     char[] allLettersVowels = allLetters.Union(allVowels).ToArray();\n     \
    \   char[] allLettersSpecials = allLetters.Union(allSpecials).ToArray();\n   \
    \     char[] allLettersNumbers = allLetters.Union(allNumbers).ToArray();\n   \
    \     char[] allLettersPunctuation = allLetters.Union(allPunctuation).ToArray();\n\
    \        char[] allLettersSpaces = allLetters.Union(allSpaces).ToArray();\n  \
    \      char[] allVowelsSpecials = allVowels.Union(allSpecials).ToArray();\n  \
    \      char[] allVowelsNumbers = allVowels.Union(allNumbers).ToArray();\n    \
    \    char[] allVowelsPunctuation = allVowels.Union(allPunctuation).ToArray();\n\
    \        char[] allVowelsSpaces = allVowels.Union(allSpaces).ToArray();\n    \
    \    char[] allSpecialsNumbers = allSpecials.Union(allNumbers).ToArray();\n  \
    \      char[] allSpecialsPunctuation = allSpecials.Union(allPunctuation).\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi9ykv1tx.cs(42,75): error CS1001: Identifier expected

    /tmp/tmpi9ykv1tx.cs(42,75): error CS1002: ; expected

    '
  timestamp: 1659793691
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            result += (char)(c + 1);\n        }\n \
    \       foreach (char c in message.ToUpper()) {\n            result += (char)(c\
    \ + 1);\n        }\n        foreach (char c in message.ToLower()) {\n        \
    \    result += (char)(c + 1);\n        }\n        foreach (char c in message.ToUpper())\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            result += (char)(c + 1);\n        }\n \
    \       foreach (char c in message.ToUpper()) {\n            result += (char)(c\
    \ + 1);\n        }\n        foreach (char c in message.ToLower()) {\n        \
    \    result += (char)(c + 1);\n        }\n        foreach (char c in message.ToUpper())\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            result += (char)(c + 1);\n        }\n \
    \       foreach (char c in message.ToUpper()) {\n            result += (char)(c\
    \ + 1);\n        }\n        foreach (char c in message.ToLower()) {\n        \
    \    result += (char)(c + 1);\n        }\n        foreach (char c in message.ToUpper())\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            result += (char)(c + 1);\n        }\n \
    \       foreach (char c in message.ToUpper()) {\n            result += (char)(c\
    \ + 1);\n        }\n        foreach (char c in message.ToLower()) {\n        \
    \    result += (char)(c + 1);\n        }\n        foreach (char c in message.ToUpper())\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            result += (char)(c + 1);\n        }\n \
    \       foreach (char c in message.ToUpper()) {\n            result += (char)(c\
    \ + 1);\n        }\n        foreach (char c in message.ToLower()) {\n        \
    \    result += (char)(c + 1);\n        }\n        foreach (char c in message.ToUpper())\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            result += (char)(c + 1);\n        }\n \
    \       foreach (char c in message.ToUpper()) {\n            result += (char)(c\
    \ + 1);\n        }\n        foreach (char c in message.ToLower()) {\n        \
    \    result += (char)(c + 1);\n        }\n        foreach (char c in message.ToUpper())\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            result += (char)(c + 1);\n        }\n \
    \       foreach (char c in message.ToUpper()) {\n            result += (char)(c\
    \ + 1);\n        }\n        foreach (char c in message.ToLower()) {\n        \
    \    result += (char)(c + 1);\n        }\n        foreach (char c in message.\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjhola8ys.cs(105,36): error CS1001: Identifier expected

    /tmp/tmpjhola8ys.cs(105,36): error CS1026: ) expected

    /tmp/tmpjhola8ys.cs(105,36): error CS1525: Invalid expression term ''}''

    /tmp/tmpjhola8ys.cs(105,36): error CS1002: ; expected

    '
  timestamp: 1659793690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            result += (char)(c + 1);\n        }\n \
    \       foreach (char c in message.ToUpper()) {\n            result += (char)(c\
    \ + 1);\n        }\n        foreach (char c in message.ToLower()) {\n        \
    \    result += (char)(c + 2);\n        }\n        foreach (char c in message.ToUpper())\
    \ {\n            result += (char)(c + 2);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e343ac6a3bb6425cb3896074100773f2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e343ac6a3bb6425cb3896074100773f2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        char[] vowels = new char[]\
    \ { 'a', 'e', 'i', 'o', 'u' };\n        char[] letters = new char[] { 'b', 'c',\
    \ 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w',\
    \ 'x', 'y', 'z' };\n        char[] consonants = new char[] { 'b', 'c', 'd', 'f',\
    \ 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y',\
    \ 'z' };\n        char[] consonants2 = new char[] { 'b', 'c', 'd', 'f', 'g', 'h',\
    \ 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n\
    \        char[] consonants3 = new char[] { 'b', 'c', 'd', 'f', 'g', 'h', 'j',\
    \ 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n  \
    \      char[] consonants4 = new char[] { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k',\
    \ 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n       \
    \ char[] consonants5 = new char[] { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[]\
    \ consonants6 = new char[] { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] consonants7\
    \ = new char[] { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] consonants8 = new\
    \ char[] { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r',\
    \ 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] consonants9 = new char[]\
    \ { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] consonants10 = new char[] {\
    \ 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't',\
    \ 'v', 'w', 'x', 'y', 'z' };\n        char[] consonants11 = new char[] { 'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"\
    tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"mWDCSKR\")));\n \
    \   Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv31sp68_.cs(33,109): error CS1010: Newline in constant

    /tmp/tmpv31sp68_.cs(34,6): error CS1002: ; expected

    /tmp/tmpv31sp68_.cs(35,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpv31sp68_.cs(43,2): error CS1513: } expected

    '
  timestamp: 1659793691
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c ^ 0x20);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c9cd25c1e1f54474ac1e6bfc524aabf5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c9cd25c1e1f54474ac1e6bfc524aabf5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in \"aeiou\") {\n            result += (char)(c ^ 0x20);\n        }\n    \
    \    foreach (char c in \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n\
    \        }\n        foreach (char c in \"AEIOU\") {\n            result += (char)(c\
    \ ^ 0x20);\n        }\n        foreach (char c in \"AEIOU\") {\n            result\
    \ += (char)(c ^ 0x20);\n        }\n        foreach (char c in \"AEIOU\") {\n \
    \           result += (char)(c ^ 0x20);\n        }\n        foreach (char c in\
    \ \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n        }\n        foreach\
    \ (char c in \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n        }\n\
    \        foreach (char c in \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n\
    \        }\n        foreach (char c in \"AEIOU\") {\n            result += (char)(c\
    \ ^ 0x20);\n        }\n        foreach (char c in \"AEIOU\") {\n            result\
    \ += (char)(c ^ 0x20);\n        }\n        foreach (char c in \"AEIOU\") {\n \
    \           result += (char)(c ^ 0x20);\n        }\n        foreach (char c in\
    \ \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n        }\n        foreach\
    \ (char c in \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n        }\n\
    \        foreach (char c in \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n\
    \        }\n        foreach (char c in \"AEIOU\") {\n            result += (char)(c\
    \ ^ 0x20);\n        }\n        foreach (char c in \"AEIOU\") {\n            result\
    \ += (char)(c ^ 0x20);\n        }\n        foreach (char c in \"AEIOU\") {\n \
    \           result += (char)(c ^ 0x20);\n        }\n        foreach (char c in\
    \ \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n        }\n        foreach\
    \ (char c in \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n        }\n\
    \        foreach (char c in \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n\
    \        }\n        foreach (char c in \"AEIOU\") {\n            result += (char)(c\
    \ ^ 0x20);\n        }\n        foreach (char c in \"AEIOU\") {\n            result\
    \ += (char)(c ^ 0x20);\n        }\n        foreach (char c in \"AEIOU\") {\n \
    \           result += (char)(c ^ 0x20);\n        }\n        foreach (char c in\
    \ \"AEIO\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpncb76l00.cs(93,28): error CS1010: Newline in constant

    /tmp/tmpncb76l00.cs(93,33): error CS1026: ) expected

    /tmp/tmpncb76l00.cs(93,33): error CS1525: Invalid expression term ''}''

    /tmp/tmpncb76l00.cs(93,33): error CS1002: ; expected

    '
  timestamp: 1659793691
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            result += (char)(c + 1);\n        }\n \
    \       foreach (char c in message.ToUpper()) {\n            result += (char)(c\
    \ - 1);\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f0b63fc9801c4af68b5ef9ea9d20cbf5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f0b63fc9801c4af68b5ef9ea9d20cbf5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            if (char.IsLetter(c)) {\n                result += char.ToUpper(c);\n\
    \            }\n            else {\n                result += c;\n           \
    \ }\n        }\n        char[] vowels = new char[] { 'a', 'e', 'i', 'o', 'u' };\n\
    \        char[] vowels2 = new char[] { 'A', 'E', 'I', 'O', 'U' };\n        char[]\
    \ vowels3 = new char[] { 'a', 'e', 'i', 'o', 'u' };\n        char[] vowels4 =\
    \ new char[] { 'A', 'E', 'I', 'O', 'U' };\n        char[] vowels5 = new char[]\
    \ { 'a', 'e', 'i', 'o', 'u' };\n        char[] vowels6 = new char[] { 'A', 'E',\
    \ 'I', 'O', 'U' };\n        char[] vowels7 = new char[] { 'a', 'e', 'i', 'o',\
    \ 'u' };\n        char[] vowels8 = new char[] { 'A', 'E', 'I', 'O', 'U' };\n \
    \       char[] vowels9 = new char[] { 'a', 'e', 'i', 'o', 'u' };\n        char[]\
    \ vowels10 = new char[] { 'A', 'E', 'I', 'O', 'U' };\n        char[] vowels11\
    \ = new char[] { 'a', 'e', 'i', 'o', 'u' };\n        char[] vowels12 = new char[]\
    \ { 'A', 'E', 'I', 'O', 'U' };\n        char[] vowels13 = new char[] { 'a', 'e',\
    \ 'i', 'o', 'u' };\n        char[] vowels14 = new char[] { 'A', 'E', 'I', 'O',\
    \ 'U' };\n        char[] vowels15 = new char[] { 'a', 'e', 'i', 'o', 'u' };\n\
    \        char[] vowels16 = new char[] { 'A', 'E', 'I', 'O', 'U' };\n        char[]\
    \ vowels17 = new char[] { 'a', 'e', 'i', 'o', 'u' };\n        char[] vowels18\
    \ = new char[] { 'A', 'E', 'I', 'O', 'U' };\n        char[] vowels19 = new char[]\
    \ { 'a', 'e', 'i', 'o', 'u' };\n        char[] vowels20 = new char[] { 'A', 'E',\
    \ 'I', 'O', 'U' };\n        char[] vowels21 = new char[] { 'a', 'e', 'i', 'o',\
    \ 'u' };\n        char[] vowels22 = new char[] { 'A', 'E', 'I', 'O', 'U' };\n\
    \        char[] vowels23 = new char[] { 'a', '\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\"\
    )));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"\
    YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"\
    tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\"\
    )).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp20md9twg.cs(51,45): error CS1010: Newline in constant

    /tmp/tmp20md9twg.cs(51,45): error CS1011: Empty character literal

    /tmp/tmp20md9twg.cs(52,6): error CS1002: ; expected

    /tmp/tmp20md9twg.cs(53,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp20md9twg.cs(61,2): error CS1513: } expected

    '
  timestamp: 1659793691
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            if (char.IsUpper(c)) {\n              \
    \  result += (char)(c + 1);\n            }\n        }\n        foreach (char c\
    \ in message.ToUpper()) {\n            if (char.IsUpper(c)) {\n              \
    \  result += (char)(c - 1);\n            }\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            if (char.IsUpper(c)) {\n              \
    \  result += (char)(c + 1);\n            }\n        }\n        foreach (char c\
    \ in message.ToUpper()) {\n            if (char.IsUpper(c)) {\n              \
    \  result += (char)(c - 1);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <66931ea057df4714b23c9665365e5c89>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <66931ea057df4714b23c9665365e5c89>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793691
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dcf52f9569d14947a30a1b82cb6beb47>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dcf52f9569d14947a30a1b82cb6beb47>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            if (char.IsLetter(c)) {\n                result += (char.ToLower(c));\n\
    \            }\n            else {\n                result += (char.ToUpper(c));\n\
    \            }\n        }\n        foreach (char c in result) {\n            int\
    \ index = result.IndexOf(c);\n            if (index > 0) {\n                string\
    \ before = result.Substring(0, index);\n                string after = result.Substring(index\
    \ + 1, result.Length - index - 1);\n                string replacement = GetReplacement(c,\
    \ before, after);\n                result = before + replacement + after;\n  \
    \          }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\"\
    )));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"\
    YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"\
    tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\"\
    )).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcz6l6tx1.cs(34,38): error CS0103: The name ''GetReplacement'' does not
    exist in the current context

    '
  timestamp: 1659793691
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            result += (char)(c + 1);\n        }\n \
    \       foreach (char c in message.ToUpper()) {\n            result += (char)(c\
    \ + 1);\n        }\n        foreach (char c in message.ToUpper()) {\n        \
    \    result += (char)(c + 1);\n        }\n        foreach (char c in message.ToUpper())\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToUpper()) {\n            result += (char)(c + 1);\n        }\n \
    \       foreach (char c in message.ToUpper()) {\n            result += (char)(c\
    \ + 1);\n        }\n        foreach (char c in message.ToUpper()) {\n        \
    \    result += (char)(c + 1);\n        }\n        foreach (char c in message.ToUpper())\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToUpper()) {\n            result += (char)(c + 1);\n        }\n \
    \       foreach (char c in message.ToUpper()) {\n            result += (char)(c\
    \ + 1);\n        }\n        foreach (char c in message.ToUpper()) {\n        \
    \    result += (char)(c + 1);\n        }\n        foreach (char c in message.ToUpper())\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToUpper()) {\n            result += (char)(c + 1);\n        }\n \
    \       foreach (char c in message.ToUpper()) {\n            result += (char)(c\
    \ + 1);\n        }\n        foreach (char c in message.ToUpper()) {\n        \
    \    result += (char)(c + 1);\n        }\n        foreach (char c in message.ToUpper())\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToUpper()) {\n            result += (char)(c + 1);\n        }\n \
    \       foreach (char c in message.ToUpper()) {\n            result += (char)(c\
    \ + 1);\n        }\n        foreach (char c in message.ToUpper()) {\n        \
    \    result += (char)(c + 1);\n        }\n        foreach (char c in message.ToUpper())\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToUpper()) {\n            result += (char)(c + 1);\n        }\n \
    \       foreach (char c in message.ToUpper()) {\n            result += (char)(c\
    \ + 1);\n        }\n        foreach (char c in message.ToUpper()) {\n        \
    \    result += (char)(c + 1);\n        }\n        foreach (char c in message.ToUpper())\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToUpper()) {\n            result += (char)(c + 1);\n        }\n \
    \       foreach (char c in message.ToUpper()) {\n            result += (char)(c\
    \ + 1);\n        }\n        foreach (char c in message.ToUpper()) {\n        \
    \    result += (char)(c + 1);\n        }\n        foreach (char c in message.\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfrx_u_9i.cs(105,36): error CS1001: Identifier expected

    /tmp/tmpfrx_u_9i.cs(105,36): error CS1026: ) expected

    /tmp/tmpfrx_u_9i.cs(105,36): error CS1525: Invalid expression term ''}''

    /tmp/tmpfrx_u_9i.cs(105,36): error CS1002: ; expected

    '
  timestamp: 1659793691
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            if (char.IsLetter(c)) {\n                result += (char.ToLower(c));\n\
    \            }\n            else {\n                result += (char.ToUpper(c));\n\
    \            }\n        }\n        char[] vowels = new char[] { 'a', 'e', 'i',\
    \ 'o', 'u' };\n        char[] vowelsV2 = new char[] { 'A', 'E', 'I', 'O', 'U'\
    \ };\n        char[] vowelsV3 = new char[] { 'a', 'e', 'i', 'o', 'u' };\n    \
    \    char[] vowelsV4 = new char[] { 'A', 'E', 'I', 'O', 'U' };\n        char[]\
    \ vowelsV5 = new char[] { 'a', 'e', 'i', 'o', 'u' };\n        char[] vowelsV6\
    \ = new char[] { 'A', 'E', 'I', 'O', 'U' };\n        char[] vowelsV7 = new char[]\
    \ { 'a', 'e', 'i', 'o', 'u' };\n        char[] vowelsV8 = new char[] { 'A', 'E',\
    \ 'I', 'O', 'U' };\n        char[] vowelsV9 = new char[] { 'a', 'e', 'i', 'o',\
    \ 'u' };\n        char[] vowelsV10 = new char[] { 'A', 'E', 'I', 'O', 'U' };\n\
    \        char[] vowelsV11 = new char[] { 'a', 'e', 'i', 'o', 'u' };\n        char[]\
    \ vowelsV12 = new char[] { 'A', 'E', 'I', 'O', 'U' };\n        char[] vowelsV13\
    \ = new char[] { 'a', 'e', 'i', 'o', 'u' };\n        char[] vowelsV14 = new char[]\
    \ { 'A', 'E', 'I', 'O', 'U' };\n        char[] vowelsV15 = new char[] { 'a', 'e',\
    \ 'i', 'o', 'u' };\n        char[] vowelsV16 = new char[] { 'A', 'E', 'I', 'O',\
    \ 'U' };\n        char[] vowelsV17 = new char[] { 'a', 'e', 'i', 'o', 'u' };\n\
    \        char[] vowelsV18 = new char[] { 'A', 'E', 'I', 'O', 'U' };\n        char[]\
    \ vowelsV19 = new char[] { 'a', 'e', 'i', 'o', 'u' };\n        char[] vowelsV20\
    \ = new char[] { 'A', 'E', 'I', 'O', 'U' };\n        char[] vowelsV21 = new char[]\
    \ { 'a', 'e', 'i', 'o', 'u' };\n        char[] vowelsV22\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\"\
    )));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"\
    YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"\
    tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\"\
    )).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplls0b2pl.cs(50,25): error CS1002: ; expected

    '
  timestamp: 1659793691
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c >= 'a' && c <= 'z' ? c : ((int)c - 'a' + 2));\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a36b129573f04a56a09f3d1a3b625086>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a36b129573f04a56a09f3d1a3b625086>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793691
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in \"aeiou\") {\n            result += (char)(c ^ 0x20);\n        }\n    \
    \    foreach (char c in \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n\
    \        }\n        foreach (char c in \"AEIOU\") {\n            result += (char)(c\
    \ ^ 0x20);\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <55c811fbecd84d9294a1f0a10ea76b91>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <55c811fbecd84d9294a1f0a10ea76b91>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793691
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            result += (char)(c + 1);\n        }\n \
    \       foreach (char c in message.ToUpper()) {\n            result += (char)(c\
    \ + 1);\n        }\n        foreach (char c in message.ToUpper()) {\n        \
    \    result += (char)(c + 1);\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"\
    tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"mWDCSKR\")));\n \
    \   Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e2759012a56c47a9932769357f02489c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e2759012a56c47a9932769357f02489c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            if (char.IsLetter(c)) {\n             \
    \   result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToLower()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dff6ba0d1de4d5683fd3b486f78feae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dff6ba0d1de4d5683fd3b486f78feae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        char[] vowels = { 'a', 'e',\
    \ 'i', 'o', 'u' };\n        char[] letters = { 'b', 'c', 'd', 'f', 'g', 'h', 'j',\
    \ 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n  \
    \      char[] spaces = { '!', '\"', '#', '$', '%', '&', '(', ')', '*', '+', ',',\
    \ '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', ']', '^', '_', '`', '{',\
    \ '|', '}', '~' };\n        char[] numbers = { '0', '1', '2', '3', '4', '5', '6',\
    \ '7', '8', '9' };\n        char[] punctuation = { '!', '\"', '#', '$', '%', '&',\
    \ '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[',\
    \ ']', '^', '_', '`', '{', '|', '}', '~' };\n        char[] others = { 'a', 'b',\
    \ 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r',\
    \ 's', 't', 'u', 'v', 'w', 'x', 'y', 'z' };\n        char[] spaces = { '!', '\"\
    ', '#', '$', '%', '&', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<',\
    \ '=', '>', '?', '@', '[', ']', '^', '_', '`', '{', '|', '}', '~' };\n       \
    \ char[] numbers = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' };\n   \
    \     char[] punctuation = { '!', '\"', '#', '$', '%', '&', '(', ')', '*', '+',\
    \ ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', ']', '^', '_', '`',\
    \ '{', '|', '}', '~' };\n        char[] others = { 'a', 'b', 'c', 'd', 'e', 'f',\
    \ 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',\
    \ 'w', 'x', 'y', 'z' };\n        char[] spaces = { '!', '\"', '#', '$', '%', '&',\
    \ '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[',\
    \ ']', '^', '_', '`', '{', '|', '}', '~' };\n        char[] numbers = { '0', '1',\
    \ '2', '3', '4', '5', '6', '7', '8', '9' };\n        char[] punctuation = { '!',\
    \ '\"', '#', '$', '%\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpznvejzfl.cs(33,52): error CS1010: Newline in constant

    /tmp/tmpznvejzfl.cs(34,6): error CS1002: ; expected

    /tmp/tmpznvejzfl.cs(35,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpznvejzfl.cs(43,2): error CS1513: } expected

    '
  timestamp: 1659793691
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        char[] vowels = { \n            'a', 'e', 'i', 'o', 'u',\
    \ 'y' \n        };\n        char[] letters = {\n            'b', 'c', 'd', 'f',\
    \ 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y',\
    \ 'z'\n        };\n        char[] messageChars = message.ToCharArray();\n    \
    \    char[] encodedChars = new char[messageChars.Length];\n        string encodedMessage\
    \ = \"\";\n        for (int i = 0; i < messageChars.Length; i++) {\n         \
    \   char currentChar = messageChars[i];\n            char nextChar = messageChars[i\
    \ + 1];\n            int index = Array.IndexOf(vowels, currentChar);\n       \
    \     if (index >= 0) {\n                encodedChars[i] = letters[index];\n \
    \               encodedChars[i + 1] = letters[index + 1];\n            } else\
    \ {\n                index = Array.IndexOf(letters, currentChar);\n          \
    \      if (index >= 0) {\n                    encodedChars[i] = letters[index];\n\
    \                    encodedChars[i + 1] = letters[index + 1];\n             \
    \   }\n            }\n        }\n        encodedMessage = new string(encodedChars);\n\
    \        return encodedMessage;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.Encode (System.String message) [0x00049]\
    \ in <cec0d13bed3e40ec886af4c74eb5e85f>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <cec0d13bed3e40ec886af4c74eb5e85f>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of\
    \ the array.\n  at Problem.Encode (System.String message) [0x00049] in <cec0d13bed3e40ec886af4c74eb5e85f>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <cec0d13bed3e40ec886af4c74eb5e85f>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in \"aeiou\") {\n            result += (char)(c ^ 0x20);\n        }\n    \
    \    foreach (char c in \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n\
    \        }\n        foreach (char c in \"AEIOU\") {\n            result += (char)(c\
    \ ^ 0x20);\n        }\n        foreach (char c in \"AEIOU\") {\n            result\
    \ += (char)(c ^ 0x20);\n        }\n        foreach (char c in \"AEIOU\") {\n \
    \           result += (char)(c ^ 0x20);\n        }\n        foreach (char c in\
    \ \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n        }\n        foreach\
    \ (char c in \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n        }\n\
    \        foreach (char c in \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n\
    \        }\n        foreach (char c in \"AEIOU\") {\n            result += (char)(c\
    \ ^ 0x20);\n        }\n        foreach (char c in \"AEIOU\") {\n            result\
    \ += (char)(c ^ 0x20);\n        }\n        foreach (char c in \"AEIOU\") {\n \
    \           result += (char)(c ^ 0x20);\n        }\n        foreach (char c in\
    \ \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n        }\n        foreach\
    \ (char c in \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n        }\n\
    \        foreach (char c in \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n\
    \        }\n        foreach (char c in \"AEIOU\") {\n            result += (char)(c\
    \ ^ 0x20);\n        }\n        foreach (char c in \"AEIOU\") {\n            result\
    \ += (char)(c ^ 0x20);\n        }\n        foreach (char c in \"AEIOU\") {\n \
    \           result += (char)(c ^ 0x20);\n        }\n        foreach (char c in\
    \ \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n        }\n        foreach\
    \ (char c in \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n        }\n\
    \        foreach (char c in \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n\
    \        }\n        foreach (char c in \"AEIOU\") {\n            result += (char)(c\
    \ ^ 0x20);\n        }\n        foreach (char c in \"AEIOU\") {\n            result\
    \ += (char)(c ^ 0x20);\n        }\n        foreach (char c in \"AEIOU\") {\n \
    \           result += (char)(c ^ 0x20);\n        }\n        foreach (char c in\
    \ \"AEIO\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpncb76l00.cs(93,28): error CS1010: Newline in constant

    /tmp/tmpncb76l00.cs(93,33): error CS1026: ) expected

    /tmp/tmpncb76l00.cs(93,33): error CS1525: Invalid expression term ''}''

    /tmp/tmpncb76l00.cs(93,33): error CS1002: ; expected

    '
  timestamp: 1659793691
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in \"aeiou\") {\n            int index = message.IndexOf(c);\n           \
    \ if (index != -1) {\n                result += message.Substring(0, index) +\
    \ message.Substring(index + 1);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f1ec811e91f64c11a8675ffc3734e151>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f1ec811e91f64c11a8675ffc3734e151>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in result.ToCharArray()) {\n            if (char.IsUpper(c)) {\n         \
    \       result += (char)(c ^ 0x20);\n            }\n        }\n        foreach\
    \ (char c in result.ToCharArray()) {\n            if (char.IsUpper(c)) {\n   \
    \             result += (char)(c ^ 0x20);\n            }\n        }\n        foreach\
    \ (char c in result.ToCharArray()) {\n            if (char.IsUpper(c)) {\n   \
    \             result += (char)(c ^ 0x20);\n            }\n        }\n        foreach\
    \ (char c in result.ToCharArray()) {\n            if (char.IsUpper(c)) {\n   \
    \             result += (char)(c ^ 0x20);\n            }\n        }\n        foreach\
    \ (char c in result.ToCharArray()) {\n            if (char.IsUpper(c)) {\n   \
    \             result += (char)(c ^ 0x20);\n            }\n        }\n        foreach\
    \ (char c in result.ToCharArray()) {\n            if (char.IsUpper(c)) {\n   \
    \             result += (char)(c ^ 0x20);\n            }\n        }\n        foreach\
    \ (char c in result.ToCharArray()) {\n            if (char.IsUpper(c)) {\n   \
    \             result += (char)(c ^ 0x20);\n            }\n        }\n        foreach\
    \ (char c in result.ToCharArray()) {\n            if (char.IsUpper(c)) {\n   \
    \             result += (char)(c ^ 0x20);\n            }\n        }\n        foreach\
    \ (char c in result.ToCharArray()) {\n            if (char.IsUpper(c)) {\n   \
    \             result += (char)(c ^ 0x20);\n            }\n        }\n        foreach\
    \ (char c in result.ToCharArray()) {\n            if (char.IsUpper(c)) {\n   \
    \             result += (char)(c ^ 0x20);\n            }\n        }\n        foreach\
    \ (char c in result.ToCharArray()) {\n            if (char.IsUpper(c)) {\n   \
    \             result += (char)(c ^ 0x20);\n            }\n        }\n        foreach\
    \ (char c in result.ToCharArray()) {\n            if (char.IsUpper(c)) {\n   \
    \             result += (char)(c ^ 0x20);\n            }\n        }\n        foreach\
    \ (char c in result.ToCharArray()) {\n            if (char.IsUpper(c)) {\n   \
    \             result += (char)(c ^ 0x20);\n            }\n        }\n        foreach\
    \ (char c in result.ToCharArray()) {\n            if (char.IsUpper(c)) {\n   \
    \             result += (char)(c ^ 0x20);\n            }\n        }\n        foreach\
    \ (char c in result.ToCharArray()) {\n            if (char.IsUpper(c)) {\n   \
    \             result += (char)(c ^ 0x20);\n            }\n        }\n        foreach\
    \ (char c in result.ToCharArray()) {\n            if (char.IsUpper(c)) {\n   \
    \             result += (char)(c ^ \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzdlnoacj.cs(101,37): error CS1525: Invalid expression term ''}''

    /tmp/tmpzdlnoacj.cs(101,37): error CS1026: ) expected

    /tmp/tmpzdlnoacj.cs(101,37): error CS1002: ; expected

    /tmp/tmpzdlnoacj.cs(103,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpzdlnoacj.cs(111,2): error CS1513: } expected

    '
  timestamp: 1659793691
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in \"aeiouAEIOU\") {\n            result += (char)(c + 1);\n        }\n    \
    \    return result;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1001af0ad84c4bea9baa26f950244d03>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1001af0ad84c4bea9baa26f950244d03>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793691
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in \"aeiou\") {\n            int index = message.IndexOf(c);\n           \
    \ if (index != -1) {\n                result += message.Substring(0, index) +\
    \ message.Substring(index + 1, 1);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a9fb504c9a8d424aa263047811d686d1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a9fb504c9a8d424aa263047811d686d1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793692
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in \"aeiou\") {\n            result += (char)(c ^ 0x20);\n        }\n    \
    \    foreach (char c in \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n\
    \        }\n        foreach (char c in \"AEIOU\") {\n            result += (char)(c\
    \ ^ 0x20);\n        }\n        foreach (char c in \"AEIOU\") {\n            result\
    \ += (char)(c ^ 0x20);\n        }\n        foreach (char c in \"AEIOU\") {\n \
    \           result += (char)(c ^ 0x20);\n        }\n        foreach (char c in\
    \ \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n        }\n        foreach\
    \ (char c in \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n        }\n\
    \        foreach (char c in \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n\
    \        }\n        foreach (char c in \"AEIOU\") {\n            result += (char)(c\
    \ ^ 0x20);\n        }\n        foreach (char c in \"AEIOU\") {\n            result\
    \ += (char)(c ^ 0x20);\n        }\n        foreach (char c in \"AEIOU\") {\n \
    \           result += (char)(c ^ 0x20);\n        }\n        foreach (char c in\
    \ \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n        }\n        foreach\
    \ (char c in \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n        }\n\
    \        foreach (char c in \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n\
    \        }\n        foreach (char c in \"AEIOU\") {\n            result += (char)(c\
    \ ^ 0x20);\n        }\n        foreach (char c in \"AEIOU\") {\n            result\
    \ += (char)(c ^ 0x20);\n        }\n        foreach (char c in \"AEIOU\") {\n \
    \           result += (char)(c ^ 0x20);\n        }\n        foreach (char c in\
    \ \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n        }\n        foreach\
    \ (char c in \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n        }\n\
    \        foreach (char c in \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n\
    \        }\n        foreach (char c in \"AEIOU\") {\n            result += (char)(c\
    \ ^ 0x20);\n        }\n        foreach (char c in \"AEIOU\") {\n            result\
    \ += (char)(c ^ 0x20);\n        }\n        foreach (char c in \"AEIOU\") {\n \
    \           result += (char)(c ^ 0x20);\n        }\n        foreach (char c in\
    \ \"AEIO\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpncb76l00.cs(93,28): error CS1010: Newline in constant

    /tmp/tmpncb76l00.cs(93,33): error CS1026: ) expected

    /tmp/tmpncb76l00.cs(93,33): error CS1525: Invalid expression term ''}''

    /tmp/tmpncb76l00.cs(93,33): error CS1002: ; expected

    '
  timestamp: 1659793691
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            if (char.IsLetter(c)) {\n                result += char.ToUpper(c);\n\
    \            }\n            else {\n                result += c;\n           \
    \ }\n        }\n        foreach (char c in result) {\n            int index =\
    \ result.IndexOf(c);\n            if (index > 0) {\n                char previous\
    \ = result.Substring(0, index).ToUpper();\n                char next = result.Substring(index).ToUpper();\n\
    \                result += previous + next.Substring(1, 1);\n            }\n \
    \       }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl2_7y_9l.cs(32,33): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmpl2_7y_9l.cs(33,29): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmpl2_7y_9l.cs(34,43): error CS1061: ''char'' does not contain a definition
    for ''Substring'' and no accessible extension method ''Substring'' accepting a
    first argument of type ''char'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1659793691
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in message.ToLower()) {\n            result += (char)(c ^ 0x20);\n       \
    \ }\n        foreach (char c in message.ToUpper()) {\n            result += (char)(c\
    \ ^ 0x20);\n        }\n        foreach (char c in message.ToLower()) {\n     \
    \       result += (char)(c ^ 0x20);\n        }\n        foreach (char c in message.ToUpper())\
    \ {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in message.ToLower()) {\n            result += (char)(c ^ 0x20);\n       \
    \ }\n        foreach (char c in message.ToUpper()) {\n            result += (char)(c\
    \ ^ 0x20);\n        }\n        foreach (char c in message.ToLower()) {\n     \
    \       result += (char)(c ^ 0x20);\n        }\n        foreach (char c in message.ToUpper())\
    \ {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in message.ToLower()) {\n            result += (char)(c ^ 0x20);\n       \
    \ }\n        foreach (char c in message.ToUpper()) {\n            result += (char)(c\
    \ ^ 0x20);\n        }\n        foreach (char c in message.ToLower()) {\n     \
    \       result += (char)(c ^ 0x20);\n        }\n        foreach (char c in message.ToUpper())\
    \ {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in message.ToLower()) {\n            result += (char)(c ^ 0x20);\n       \
    \ }\n        foreach (char c in message.ToUpper()) {\n            result += (char)(c\
    \ ^ 0x20);\n        }\n        foreach (char c in message.ToLower()) {\n     \
    \       result += (char)(c ^ 0x20);\n        }\n        foreach (char c in message.ToUpper())\
    \ {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in message.ToLower()) {\n            result += (char)(c ^ 0x20);\n       \
    \ }\n        foreach (char c in message.ToUpper()) {\n            result += (char)(c\
    \ ^ 0x20);\n        }\n        foreach (char c in message.ToLower()) {\n     \
    \       result += (char)(c ^ 0x20);\n        }\n        foreach (char c in message.ToUpper())\
    \ {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in message.ToLower()) {\n            result += (char)(c ^ 0x20);\n       \
    \ }\n        foreach (char c in message.ToUpper()) {\n            result += (char)(c\
    \ ^ 0x20);\n        }\n        foreach (char c in message.ToLower()) {\n     \
    \       result += (char)(c ^ 0x20);\n        }\n        foreach (char c in message.ToUpper())\
    \ {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in message.ToLower()) {\n\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplm7mahea.cs(99,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmplm7mahea.cs(107,2): error CS1513: } expected

    '
  timestamp: 1659793691
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in \"aeiou\") {\n            result += (char)(c + 1);\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba606077bf82415ba8e5ab0b69883733>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba606077bf82415ba8e5ab0b69883733>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dcf52f9569d14947a30a1b82cb6beb47>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dcf52f9569d14947a30a1b82cb6beb47>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message) {\n            if (char.IsUpper(c)) {\n                result +=\
    \ (char)(c + 1);\n            }\n        }\n        foreach (char c in message)\
    \ {\n            if (char.IsLower(c)) {\n                result += (char)(c +\
    \ 1);\n            }\n        }\n        foreach (char c in message) {\n     \
    \       if (char.IsLetter(c)) {\n                result += (char)(c + 1);\n  \
    \          }\n        }\n        foreach (char c in message) {\n            if\
    \ (char.IsVowel(c)) {\n                result += (char)(c + 1);\n            }\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjpz35sug.cs(40,22): error CS0117: ''char'' does not contain a definition
    for ''IsVowel''

    '
  timestamp: 1659793691
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            if (char.IsLetter(c)) {\n             \
    \   result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToLower()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToLower()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToLower()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToLower()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToLower()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToLower()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToLower()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToLower()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"\
    tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"mWDCSKR\")));\n \
    \   Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqcikc97x.cs(110,32): error CS1026: ) expected

    /tmp/tmpqcikc97x.cs(110,32): error CS1525: Invalid expression term ''}''

    /tmp/tmpqcikc97x.cs(110,32): error CS1002: ; expected

    /tmp/tmpqcikc97x.cs(112,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpqcikc97x.cs(120,2): error CS1513: } expected

    '
  timestamp: 1659793691
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            if (char.IsLetter(c)) {\n                result += (char.ToUpper(c));\n\
    \            }\n            else {\n                result += (char.ToLower(c));\n\
    \            }\n        }\n        char[] vowels = new char[] { 'a', 'e', 'i',\
    \ 'o', 'u' };\n        char[] letters = new char[] { 'b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'\
    \ };\n        char[] vowelsLetters = new char[] { 'A', 'E', 'I', 'O', 'U' };\n\
    \        char[] vowelsLettersLetters = new char[] { 'B', 'C', 'D', 'F', 'G', 'H',\
    \ 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z' };\n\
    \        char[] vowelsLettersLettersLetters = new char[] { 'C', 'D', 'F', 'G',\
    \ 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z'\
    \ };\n        char[] vowelsLettersLettersLettersLetters = new char[] { 'D', 'F',\
    \ 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y',\
    \ 'Z' };\n        char[] vowelsLettersLettersLettersLettersLetters = new char[]\
    \ { 'E', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V',\
    \ 'W', 'X', 'Y', 'Z' };\n        char[] vowelsLettersLettersLettersLettersLettersLetters\
    \ = new char[] { 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T',\
    \ 'V', 'W', 'X', 'Y', 'Z' };\n        char[] vowelsLettersLettersLettersLettersLettersLettersLetters\
    \ = new char[] { 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V',\
    \ 'W', 'X', 'Y', 'Z' };\n        char[] vowelsLettersLettersLettersLettersLettersLettersLetters\
    \ = new char[] { 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W',\
    \ 'X', 'Y', 'Z' };\n        char[] vowelsLettersLettersLettersLettersLetter\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpiwtbovk5.cs(39,56): error CS1002: ; expected

    '
  timestamp: 1659793691
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            if (char.IsLetter(c)) {\n             \
    \   result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"\
    tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"mWDCSKR\")));\n \
    \   Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuf6_wsmi.cs(110,32): error CS1026: ) expected

    /tmp/tmpuf6_wsmi.cs(110,32): error CS1525: Invalid expression term ''}''

    /tmp/tmpuf6_wsmi.cs(110,32): error CS1002: ; expected

    /tmp/tmpuf6_wsmi.cs(112,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpuf6_wsmi.cs(120,2): error CS1513: } expected

    '
  timestamp: 1659793691
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        char[] alphabet = new char[] { 'a', 'b', 'c', 'd', 'e',\
    \ 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',\
    \ 'v', 'w', 'x', 'y', 'z' };\n        char[] vowels = new char[] { 'a', 'e', 'i',\
    \ 'o', 'u' };\n        char[] messageChars = message.ToCharArray();\n        char[]\
    \ encodedChars = new char[messageChars.Length];\n        int vowelIndex = 0;\n\
    \        for (int i = 0; i < messageChars.Length; i++) {\n            char c =\
    \ messageChars[i];\n            if (vowels.Contains(c)) {\n                vowelIndex++;\n\
    \                char nextVowel = alphabet[vowelIndex];\n                encodedChars[i]\
    \ = nextVowel;\n            } else {\n                encodedChars[i] = alphabet[alphabet.IndexOf(c)\
    \ + 2];\n            }\n        }\n        return new string(encodedChars);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0js1uetr.cs(32,53): error CS1501: No overload for method ''IndexOf'' takes
    1 arguments

    '
  timestamp: 1659793691
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        char[] chars = message.ToCharArray();\n\
    \        foreach (char c in chars) {\n            int index = GetIndex(c);\n \
    \           if (index != -1) {\n                result += SwapCase(chars[index]);\n\
    \            }\n            else {\n                result += c;\n           \
    \ }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqhr51a23.cs(23,25): error CS0103: The name ''GetIndex'' does not exist
    in the current context

    /tmp/tmpqhr51a23.cs(25,27): error CS0103: The name ''SwapCase'' does not exist
    in the current context

    '
  timestamp: 1659793691
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dcf52f9569d14947a30a1b82cb6beb47>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dcf52f9569d14947a30a1b82cb6beb47>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            result += (char)(c + 1);\n        }\n \
    \       foreach (char c in message.ToUpper()) {\n            result += (char)(c\
    \ + 1);\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e1de475071b044bd9001fb9f701692df>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e1de475071b044bd9001fb9f701692df>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793692
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in \"aeiou\") {\n            result += (char)(c ^ 0x20);\n        }\n    \
    \    foreach (char c in \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n\
    \        }\n        foreach (char c in \"AEIOU\") {\n            result += (char)(c\
    \ ^ 0x20);\n        }\n        foreach (char c in \"AEIOU\") {\n            result\
    \ += (char)(c ^ 0x20);\n        }\n        foreach (char c in \"AEIOU\") {\n \
    \           result += (char)(c ^ 0x20);\n        }\n        foreach (char c in\
    \ \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n        }\n        foreach\
    \ (char c in \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n        }\n\
    \        foreach (char c in \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n\
    \        }\n        foreach (char c in \"AEIOU\") {\n            result += (char)(c\
    \ ^ 0x20);\n        }\n        foreach (char c in \"AEIOU\") {\n            result\
    \ += (char)(c ^ 0x20);\n        }\n        foreach (char c in \"AEIOU\") {\n \
    \           result += (char)(c ^ 0x20);\n        }\n        foreach (char c in\
    \ \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n        }\n        foreach\
    \ (char c in \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n        }\n\
    \        foreach (char c in \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n\
    \        }\n        foreach (char c in \"AEIOU\") {\n            result += (char)(c\
    \ ^ 0x20);\n        }\n        foreach (char c in \"AEIOU\") {\n            result\
    \ += (char)(c ^ 0x20);\n        }\n        foreach (char c in \"AEIOU\") {\n \
    \           result += (char)(c ^ 0x20);\n        }\n        foreach (char c in\
    \ \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n        }\n        foreach\
    \ (char c in \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n        }\n\
    \        foreach (char c in \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n\
    \        }\n        foreach (char c in \"AEIOU\") {\n            result += (char)(c\
    \ ^ 0x20);\n        }\n        foreach (char c in \"AEIOU\") {\n            result\
    \ += (char)(c ^ 0x20);\n        }\n        foreach (char c in \"AEIOU\") {\n \
    \           result += (char)(c ^ 0x20);\n        }\n        foreach (char c in\
    \ \"AEIO\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpncb76l00.cs(93,28): error CS1010: Newline in constant

    /tmp/tmpncb76l00.cs(93,33): error CS1026: ) expected

    /tmp/tmpncb76l00.cs(93,33): error CS1525: Invalid expression term ''}''

    /tmp/tmpncb76l00.cs(93,33): error CS1002: ; expected

    '
  timestamp: 1659793691
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in \"aeiouAEIOU\") {\n            int index = message.IndexOf(c);\n      \
    \      if (index != -1) {\n                result += message.Substring(index,\
    \ 2);\n            }\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\"\
    )));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"\
    YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"\
    tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\"\
    )).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b5ddf39b9544438eba999708aeab3ac3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b5ddf39b9544438eba999708aeab3ac3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            if (char.IsLetter(c)) {\n             \
    \   result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToLower()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dff6ba0d1de4d5683fd3b486f78feae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dff6ba0d1de4d5683fd3b486f78feae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c ^ 0x20);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c9cd25c1e1f54474ac1e6bfc524aabf5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c9cd25c1e1f54474ac1e6bfc524aabf5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        char[] vowels = \"aeiouAEIOU\"\
    .ToCharArray();\n        char[] letters = \"abcdefghijklmnopqrstuvwxyz\".ToCharArray();\n\
    \        char[] lettersWithTwoAheadVowels = \"bcdfghjklmnpqrstvwxyz\".ToCharArray();\n\
    \        char[] lettersWithTwoAheadVowelsWithTwoAheadVowels = \"cdefghijklmnopqrstvwxyz\"\
    .ToCharArray();\n        char[] lettersWithTwoAheadVowelsWithTwoAheadVowelsWithTwoAheadVowels\
    \ = \"defghijklmnopqrstvwxyz\".ToCharArray();\n        char[] lettersWithTwoAheadVowelsWithTwoAheadVowelsWithTwoAheadVowelsWithTwoAheadVowels\
    \ = \"efghijklmnopqrstvwxyz\".ToCharArray();\n        char[] lettersWithTwoAheadVowelsWithTwoAheadVowelsWithTwoAheadVowelsWithTwoAheadVowelsWithTwoAheadVowels\
    \ = \"fghijklmnopqrstvwxyz\".ToCharArray();\n        char[] lettersWithTwoAheadVowelsWithTwoAheadVowelsWithTwoAheadVowelsWithTwoAheadVowelsWithTwoAheadVowelsWithTwoAheadVowels\
    \ = \"ghijklmnopqrstvwxyz\".ToCharArray();\n        char[] lettersWithTwoAheadVowelsWithTwoAheadVowelsWithTwoAheadVowelsWithTwoAheadVowelsWithTwoAheadVowelsWithTwoAheadVowelsWithTwoAheadVowels\
    \ = \"hijklmnopqrstvwxyz\".ToCharArray();\n        char[] lettersWithTwoAheadVowelsWithTwoAheadVowelsWithTwoAheadVowelsWithTwoAheadVowelsWithTwoAheadVowelsWithTwoAheadVowelsWithTwoAheadVowelsWithTwoAheadVowelsWithTwoAheadVowels\
    \ = \"ijklmnopqrstvwxyz\".ToCharArray();\n        char[] lettersWithTwoAheadVowelsWithTwoAheadVowelsWithTwoAheadVowelsWithTwoAheadVowelsWithTwoAheadVowelsWithTwoAheadVowel\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi7_tcls_.cs(31,130): error CS1002: ; expected

    '
  timestamp: 1659793691
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            if (char.IsLetter(c)) {\n                result += char.ToUpper(c);\n\
    \            }\n            else {\n                result += c;\n           \
    \ }\n        }\n        char[] vowels = { 'a', 'e', 'i', 'o', 'u' };\n       \
    \ char[] letters = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p',\
    \ 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] vowels2 = { 'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z' };\n        char[] letters2 = { 'b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'\
    \ };\n        char[] vowels3 = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[]\
    \ letters3 = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] vowels4 = { 'b', 'c',\
    \ 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w',\
    \ 'x', 'y', 'z' };\n        char[] letters4 = { 'b', 'c', 'd', 'f', 'g', 'h',\
    \ 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n\
    \        char[] vowels5 = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] letters5\
    \ = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] vowels6 = { 'b', 'c', 'd', 'f',\
    \ 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y',\
    \ 'z' };\n        char[] letters6 = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k',\
    \ 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n       \
    \ char[] vowels7 = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p',\
    \ 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] letters7 = {\
    \ 'b', 'c', 'd', 'f', 'g', '\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5eegzlhf.cs(42,54): error CS1010: Newline in constant

    /tmp/tmp5eegzlhf.cs(42,54): error CS1011: Empty character literal

    /tmp/tmp5eegzlhf.cs(43,6): error CS1002: ; expected

    /tmp/tmp5eegzlhf.cs(44,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp5eegzlhf.cs(52,2): error CS1513: } expected

    '
  timestamp: 1659793691
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            if (char.IsLetter(c)) {\n                result += char.ToUpper(c);\n\
    \            }\n            else {\n                result += c;\n           \
    \ }\n        }\n        char[] vowels = { 'a', 'e', 'i', 'o', 'u' };\n       \
    \ char[] letters = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p',\
    \ 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] vowels2 = { 'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z' };\n        char[] letters2 = { 'b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'\
    \ };\n        char[] vowels3 = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[]\
    \ letters3 = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] vowels4 = { 'b', 'c',\
    \ 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w',\
    \ 'x', 'y', 'z' };\n        char[] letters4 = { 'b', 'c', 'd', 'f', 'g', 'h',\
    \ 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n\
    \        char[] vowels5 = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] letters5\
    \ = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] vowels6 = { 'b', 'c', 'd', 'f',\
    \ 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y',\
    \ 'z' };\n        char[] letters6 = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k',\
    \ 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n       \
    \ char[] vowels7 = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p',\
    \ 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] letters7 = {\
    \ 'b', 'c', 'd', 'f', 'g', 'h\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv4mekwpt.cs(42,54): error CS1010: Newline in constant

    /tmp/tmpv4mekwpt.cs(43,6): error CS1002: ; expected

    /tmp/tmpv4mekwpt.cs(44,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpv4mekwpt.cs(52,2): error CS1513: } expected

    '
  timestamp: 1659793690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in \"aeiou\") {\n            result += (char)(c ^ 0x20);\n        }\n    \
    \    foreach (char c in \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n\
    \        }\n        foreach (char c in \"AEIOU\") {\n            result += (char)(c\
    \ ^ 0x20);\n        }\n        foreach (char c in \"AEIOU\") {\n            result\
    \ += (char)(c ^ 0x20);\n        }\n        foreach (char c in \"AEIOU\") {\n \
    \           result += (char)(c ^ 0x20);\n        }\n        foreach (char c in\
    \ \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n        }\n        foreach\
    \ (char c in \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n        }\n\
    \        foreach (char c in \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n\
    \        }\n        foreach (char c in \"AEIOU\") {\n            result += (char)(c\
    \ ^ 0x20);\n        }\n        foreach (char c in \"AEIOU\") {\n            result\
    \ += (char)(c ^ 0x20);\n        }\n        foreach (char c in \"AEIOU\") {\n \
    \           result += (char)(c ^ 0x20);\n        }\n        foreach (char c in\
    \ \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n        }\n        foreach\
    \ (char c in \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n        }\n\
    \        foreach (char c in \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n\
    \        }\n        foreach (char c in \"AEIOU\") {\n            result += (char)(c\
    \ ^ 0x20);\n        }\n        foreach (char c in \"AEIOU\") {\n            result\
    \ += (char)(c ^ 0x20);\n        }\n        foreach (char c in \"AEIOU\") {\n \
    \           result += (char)(c ^ 0x20);\n        }\n        foreach (char c in\
    \ \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n        }\n        foreach\
    \ (char c in \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n        }\n\
    \        foreach (char c in \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n\
    \        }\n        foreach (char c in \"AEIOU\") {\n            result += (char)(c\
    \ ^ 0x20);\n        }\n        foreach (char c in \"AEIOU\") {\n            result\
    \ += (char)(c ^ 0x20);\n        }\n        foreach (char c in \"AEIOU\") {\n \
    \           result += (char)(c ^ 0x20);\n        }\n        foreach (char c in\
    \ \"AEIO\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpncb76l00.cs(93,28): error CS1010: Newline in constant

    /tmp/tmpncb76l00.cs(93,33): error CS1026: ) expected

    /tmp/tmpncb76l00.cs(93,33): error CS1525: Invalid expression term ''}''

    /tmp/tmpncb76l00.cs(93,33): error CS1002: ; expected

    '
  timestamp: 1659793691
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            result += (char)(c + 1);\n        }\n \
    \       foreach (char c in message.ToUpper()) {\n            result += (char)(c\
    \ + 1);\n        }\n        foreach (char c in message.Replace(\"a\", \"A\").Replace(\"\
    e\", \"E\").Replace(\"i\", \"I\").Replace(\"o\", \"O\").Replace(\"u\", \"U\").Replace(\"\
    y\", \"Y\").Replace(\"A\", \"a\").Replace(\"E\", \"e\").Replace(\"I\", \"i\").Replace(\"\
    O\", \"o\").Replace(\"U\", \"u\").Replace(\"Y\", \"y\")) {\n            result\
    \ += (char)(c + 1);\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\"\
    )));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"\
    YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"\
    tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\"\
    )).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a592b468b8da4275a17a602d31686d91>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a592b468b8da4275a17a602d31686d91>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793691
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            if (char.IsLetter(c)) {\n             \
    \   result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToLower()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dff6ba0d1de4d5683fd3b486f78feae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dff6ba0d1de4d5683fd3b486f78feae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            if (char.IsLetter(c)) {\n             \
    \   result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in result.ToLower()) {\n            if (char.IsLetter(c)) {\n            \
    \    result += (char)(c - 1);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e8ddcc2884e849289b326e9851edaaa3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e8ddcc2884e849289b326e9851edaaa3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c ^ 0x20);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c9cd25c1e1f54474ac1e6bfc524aabf5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c9cd25c1e1f54474ac1e6bfc524aabf5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in \"aeiou\") {\n            int index = message.IndexOf(c);\n           \
    \ if (index > 0) {\n                result += (char)(message.Substring(index -\
    \ 1, 1) ^ 0x20);\n            }\n        }\n        return result;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(Encode((\"TEST\"\
    )).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"mWDCSKR\"\
    )));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7jq1ewys.cs(27,34): error CS0019: Operator ''^'' cannot be applied to
    operands of type ''string'' and ''int''

    '
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in \"aeiou\") {\n            result += (char)(c ^ 0x20);\n        }\n    \
    \    return result;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5c96229cefd4ccca908c39e7c4823e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5c96229cefd4ccca908c39e7c4823e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in \"aeiou\") {\n            result += (char)(c ^ 0x20);\n        }\n    \
    \    foreach (char c in \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n\
    \        }\n        foreach (char c in \"AEIOU\") {\n            result += (char)(c\
    \ ^ 0x20);\n        }\n        foreach (char c in \"AEIOU\") {\n            result\
    \ += (char)(c ^ 0x20);\n        }\n        foreach (char c in \"AEIOU\") {\n \
    \           result += (char)(c ^ 0x20);\n        }\n        foreach (char c in\
    \ \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n        }\n        foreach\
    \ (char c in \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n        }\n\
    \        foreach (char c in \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n\
    \        }\n        foreach (char c in \"AEIOU\") {\n            result += (char)(c\
    \ ^ 0x20);\n        }\n        foreach (char c in \"AEIOU\") {\n            result\
    \ += (char)(c ^ 0x20);\n        }\n        foreach (char c in \"AEIOU\") {\n \
    \           result += (char)(c ^ 0x20);\n        }\n        foreach (char c in\
    \ \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n        }\n        foreach\
    \ (char c in \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n        }\n\
    \        foreach (char c in \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n\
    \        }\n        foreach (char c in \"AEIOU\") {\n            result += (char)(c\
    \ ^ 0x20);\n        }\n        foreach (char c in \"AEIOU\") {\n            result\
    \ += (char)(c ^ 0x20);\n        }\n        foreach (char c in \"AEIOU\") {\n \
    \           result += (char)(c ^ 0x20);\n        }\n        foreach (char c in\
    \ \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n        }\n        foreach\
    \ (char c in \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n        }\n\
    \        foreach (char c in \"AEIOU\") {\n            result += (char)(c ^ 0x20);\n\
    \        }\n        foreach (char c in \"AEIOU\") {\n            result += (char)(c\
    \ ^ 0x20);\n        }\n        foreach (char c in \"AEIOU\") {\n            result\
    \ += (char)(c ^ 0x20);\n        }\n        foreach (char c in \"AEIOU\") {\n \
    \           result += (char)(c ^ 0x20);\n        }\n        foreach (char c in\
    \ \"AEIO\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpncb76l00.cs(93,28): error CS1010: Newline in constant

    /tmp/tmpncb76l00.cs(93,33): error CS1026: ) expected

    /tmp/tmpncb76l00.cs(93,33): error CS1525: Invalid expression term ''}''

    /tmp/tmpncb76l00.cs(93,33): error CS1002: ; expected

    '
  timestamp: 1659793691
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToLower() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToLower() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToLower() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToLower() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToLower() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToLower() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToLower() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToLower() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToLower() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToLower() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToLower() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToLower() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToLower() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToLower() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToLower() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToLower() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToLower() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToLower() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToLower() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToLower() +\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg9xuvmjt.cs(64,23): error CS1525: Invalid expression term ''}''

    /tmp/tmpg9xuvmjt.cs(64,23): error CS1026: ) expected

    /tmp/tmpg9xuvmjt.cs(64,23): error CS1002: ; expected

    /tmp/tmpg9xuvmjt.cs(66,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpg9xuvmjt.cs(74,2): error CS1513: } expected

    '
  timestamp: 1659793689
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            if (char.IsLetter(c)) {\n                result += char.ToUpper(c);\n\
    \            }\n            else {\n                result += c;\n           \
    \ }\n        }\n        char[] vowels = new char[] { 'a', 'e', 'i', 'o', 'u' };\n\
    \        char[] letters = new char[] { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k',\
    \ 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n       \
    \ char[] vowels2 = new char[] { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] letters2\
    \ = new char[] { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] vowels3 = new char[]\
    \ { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] letters3 = new char[] { 'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z' };\n        char[] vowels4 = new char[] { 'b', 'c', 'd',\
    \ 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x',\
    \ 'y', 'z' };\n        char[] letters4 = new char[] { 'b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'\
    \ };\n        char[] vowels5 = new char[] { 'b', 'c', 'd', 'f', 'g', 'h', 'j',\
    \ 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n  \
    \      char[] letters5 = new char[] { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k',\
    \ 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n       \
    \ char[] vowels6 = new char[] { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] letters6\
    \ = new char[] { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] vowels7 = new char[]\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpm6_1sf81.cs(41,36): error CS1002: ; expected

    '
  timestamp: 1659793689
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            if (c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n                result += c;\n            }\n     \
    \   }\n        foreach (char c in result.ToLower()) {\n            if (c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                result +=\
    \ c;\n            }\n        }\n        foreach (char c in result.ToLower()) {\n\
    \            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\
    \                result += c;\n            }\n        }\n        foreach (char\
    \ c in result.ToLower()) {\n            if (c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n                result += c;\n            }\n     \
    \   }\n        foreach (char c in result.ToLower()) {\n            if (c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                result +=\
    \ c;\n            }\n        }\n        foreach (char c in result.ToLower()) {\n\
    \            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\
    \                result += c;\n            }\n        }\n        foreach (char\
    \ c in result.ToLower()) {\n            if (c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n                result += c;\n            }\n     \
    \   }\n        foreach (char c in result.ToLower()) {\n            if (c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                result +=\
    \ c;\n            }\n        }\n        foreach (char c in result.ToLower()) {\n\
    \            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\
    \                result += c;\n            }\n        }\n        foreach (char\
    \ c in result.ToLower()) {\n            if (c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n                result += c;\n            }\n     \
    \   }\n        foreach (char c in result.ToLower()) {\n            if (c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                result +=\
    \ c;\n            }\n        }\n        foreach (char c in result.ToLower()) {\n\
    \            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\
    \                result += c;\n            }\n        }\n        foreach (char\
    \ c in result.ToLower()) {\n            if (c == 'a' || c == 'e' || c == 'i' ||\
    \ c\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmputd9ndnd.cs(85,54): error CS1026: ) expected

    /tmp/tmputd9ndnd.cs(85,54): error CS1525: Invalid expression term ''}''

    /tmp/tmputd9ndnd.cs(85,54): error CS1002: ; expected

    /tmp/tmputd9ndnd.cs(87,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmputd9ndnd.cs(95,2): error CS1513: } expected

    '
  timestamp: 1659793691
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dcf52f9569d14947a30a1b82cb6beb47>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dcf52f9569d14947a30a1b82cb6beb47>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            if (char.IsLetter(c)) {\n                result += (char.ToLower(c));\n\
    \            }\n            else {\n                result += (char.ToUpper(c));\n\
    \            }\n        }\n        char[] vowels = { 'a', 'e', 'i', 'o', 'u' };\n\
    \        char[] letters = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] vowels2\
    \ = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] letters2 = { 'a', 'e', 'i',\
    \ 'o', 'u' };\n        char[] vowels3 = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k',\
    \ 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n       \
    \ char[] letters3 = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p',\
    \ 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] vowels4 = { 'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z' };\n        char[] letters4 = { 'b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'\
    \ };\n        char[] vowels5 = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[]\
    \ letters5 = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] vowels6 = { 'b', 'c',\
    \ 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w',\
    \ 'x', 'y', 'z' };\n        char[] letters6 = { 'b', 'c', 'd', 'f', 'g', 'h',\
    \ 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n\
    \        char[] vowels7 = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] letters7\
    \ = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', '\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdq_3597k.cs(42,99): error CS1010: Newline in constant

    /tmp/tmpdq_3597k.cs(42,99): error CS1011: Empty character literal

    /tmp/tmpdq_3597k.cs(43,6): error CS1002: ; expected

    /tmp/tmpdq_3597k.cs(44,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpdq_3597k.cs(52,2): error CS1513: } expected

    '
  timestamp: 1659793691
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(\n                ((int)c).ToString().ToUpper()\
    \ +\n                ((int)c).ToString().ToLower()\n            );\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2phntoiz.cs(22,23): error CS0030: Cannot convert type ''string'' to ''char''

    '
  timestamp: 1659793690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in result.ToCharArray()) {\n            if (char.IsUpper(c)) {\n         \
    \       result += (char)(c ^ 0x20);\n            }\n        }\n        foreach\
    \ (char c in result.ToCharArray()) {\n            if (char.IsUpper(c)) {\n   \
    \             result += (char)(c ^ 0x20);\n            }\n        }\n        foreach\
    \ (char c in result.ToCharArray()) {\n            if (char.IsUpper(c)) {\n   \
    \             result += (char)(c ^ 0x20);\n            }\n        }\n        foreach\
    \ (char c in result.ToCharArray()) {\n            if (char.IsUpper(c)) {\n   \
    \             result += (char)(c ^ 0x20);\n            }\n        }\n        foreach\
    \ (char c in result.ToCharArray()) {\n            if (char.IsUpper(c)) {\n   \
    \             result += (char)(c ^ 0x20);\n            }\n        }\n        foreach\
    \ (char c in result.ToCharArray()) {\n            if (char.IsUpper(c)) {\n   \
    \             result += (char)(c ^ 0x20);\n            }\n        }\n        foreach\
    \ (char c in result.ToCharArray()) {\n            if (char.IsUpper(c)) {\n   \
    \             result += (char)(c ^ 0x20);\n            }\n        }\n        foreach\
    \ (char c in result.ToCharArray()) {\n            if (char.IsUpper(c)) {\n   \
    \             result += (char)(c ^ 0x20);\n            }\n        }\n        foreach\
    \ (char c in result.ToCharArray()) {\n            if (char.IsUpper(c)) {\n   \
    \             result += (char)(c ^ 0x20);\n            }\n        }\n        foreach\
    \ (char c in result.ToCharArray()) {\n            if (char.IsUpper(c)) {\n   \
    \             result += (char)(c ^ 0x20);\n            }\n        }\n        foreach\
    \ (char c in result.ToCharArray()) {\n            if (char.IsUpper(c)) {\n   \
    \             result += (char)(c ^ 0x20);\n            }\n        }\n        foreach\
    \ (char c in result.ToCharArray()) {\n            if (char.IsUpper(c)) {\n   \
    \             result += (char)(c ^ 0x20);\n            }\n        }\n        foreach\
    \ (char c in result.ToCharArray()) {\n            if (char.IsUpper(c)) {\n   \
    \             result += (char)(c ^ 0x20);\n            }\n        }\n        foreach\
    \ (char c in result.ToCharArray()) {\n            if (char.IsUpper(c)) {\n   \
    \             result += (char)(c ^ 0x20);\n            }\n        }\n        foreach\
    \ (char c in result.ToCharArray()) {\n            if (char.IsUpper(c)) {\n   \
    \             result += (char)(c ^ 0x20);\n            }\n        }\n        foreach\
    \ (char c in result.ToCharArray()) {\n            if (char.IsUpper(c)) {\n   \
    \             result += (char)(c ^ \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzdlnoacj.cs(101,37): error CS1525: Invalid expression term ''}''

    /tmp/tmpzdlnoacj.cs(101,37): error CS1026: ) expected

    /tmp/tmpzdlnoacj.cs(101,37): error CS1002: ; expected

    /tmp/tmpzdlnoacj.cs(103,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpzdlnoacj.cs(111,2): error CS1513: } expected

    '
  timestamp: 1659793691
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            if (char.IsLetter(c)) {\n                result += (char.ToUpper(c));\n\
    \            }\n            else {\n                result += (char.ToLower(c));\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\"\
    )));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"\
    YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"\
    tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\"\
    )).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e7b4532d78f4479c97dbbbdf511021bc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e7b4532d78f4479c97dbbbdf511021bc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            if (char.IsLetter(c)) {\n                result += (char.IsUpper(c)\
    \ ? char.ToLower(c) : char.ToUpper(c));\n            }\n            else {\n \
    \               result += c;\n            }\n        }\n        char[] vowels\
    \ = new char[] {'a', 'e', 'i', 'o', 'u', 'y'};\n        char[] letters = new char[]\
    \ {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\
    \ 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};\n        char[] vowels2\
    \ = new char[] {'A', 'E', 'I', 'O', 'U', 'Y'};\n        char[] letters2 = new\
    \ char[] {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N',\
    \ 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'};\n        char[]\
    \ vowels3 = new char[] {'a', 'e', 'i', 'o', 'u', 'y'};\n        char[] letters3\
    \ = new char[] {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\
    \ 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};\n        char[]\
    \ vowels4 = new char[] {'A', 'E', 'I', 'O', 'U', 'Y'};\n        char[] letters4\
    \ = new char[] {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',\
    \ 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'};\n        char[]\
    \ vowels5 = new char[] {'a', 'e', 'i', 'o', 'u', 'y'};\n        char[] letters5\
    \ = new char[] {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\
    \ 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};\n        char[]\
    \ vowels6 = new char[] {'A', 'E', 'I', 'O', 'U', 'Y'};\n        char[] letters6\
    \ = new char[] {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',\
    \ 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'};\n        char[]\
    \ vowels7 = new char[] {'a', 'e', 'i', 'o', 'u', 'y'};\n        char[] letters7\
    \ = new char[] {'a', 'b', 'c', 'd', 'e', 'f', 'g', '\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\"\
    )));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"\
    YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"\
    tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\"\
    )).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5guflohr.cs(42,74): error CS1010: Newline in constant

    /tmp/tmp5guflohr.cs(42,74): error CS1011: Empty character literal

    /tmp/tmp5guflohr.cs(43,6): error CS1002: ; expected

    /tmp/tmp5guflohr.cs(44,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp5guflohr.cs(52,2): error CS1513: } expected

    '
  timestamp: 1659793691
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in result) {\n            int index = ((int)c) - 1;\n            if (index >=\
    \ 0 && index < 26) {\n                result += (char)(Char.ToUpper((char)c));\n\
    \            }\n        }\n        foreach (char c in result) {\n            int\
    \ index = ((int)c) - 1;\n            if (index >= 0 && index < 26) {\n       \
    \         result += (char)(Char.ToLower((char)c));\n            }\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ef2bca32cfa34de8bc5d222501d8c4d0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ef2bca32cfa34de8bc5d222501d8c4d0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            if (char.IsLetter(c)) {\n                result += (char.ToLower(c));\n\
    \            }\n            else {\n                result += (char.ToUpper(c));\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\"\
    )));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"\
    YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"\
    tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\"\
    )).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8d6750189d7c4864b347a523a31763e0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8d6750189d7c4864b347a523a31763e0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c >= 'a' && c <= 'z' ? c : ((int)c + 1));\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a1d563b6688c47f6af0e9eb4a89416b6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a1d563b6688c47f6af0e9eb4a89416b6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in result.ToCharArray()) {\n            int index = GetIndex(c);\n       \
    \     if (index != -1) {\n                char newChar = GetChar(index);\n   \
    \             result += newChar;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_ibw6gm9.cs(25,25): error CS0103: The name ''GetIndex'' does not exist
    in the current context

    /tmp/tmp_ibw6gm9.cs(27,32): error CS0103: The name ''GetChar'' does not exist
    in the current context

    '
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c >= 'a' && c <= 'z' ? c : \n              \
    \  c >= 'A' && c <= 'Z' ? c : \n                ((int)c - 96) % 26 + 96);\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b730192fffd147fa98641cd6e9ac6c96>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b730192fffd147fa98641cd6e9ac6c96>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793692
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            result += (char)(c + 1);\n        }\n \
    \       foreach (char c in message.ToUpper()) {\n            result += (char)(c\
    \ + 1);\n        }\n        foreach (char c in message.ToUpper()) {\n        \
    \    result += (char)(c + 1);\n        }\n        foreach (char c in message.ToLower())\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToUpper()) {\n            result += (char)(c + 1);\n        }\n \
    \       foreach (char c in message.ToUpper()) {\n            result += (char)(c\
    \ + 1);\n        }\n        foreach (char c in message.ToLower()) {\n        \
    \    result += (char)(c + 1);\n        }\n        foreach (char c in message.ToUpper())\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToUpper()) {\n            result += (char)(c + 1);\n        }\n \
    \       foreach (char c in message.ToLower()) {\n            result += (char)(c\
    \ + 1);\n        }\n        foreach (char c in message.ToUpper()) {\n        \
    \    result += (char)(c + 1);\n        }\n        foreach (char c in message.ToUpper())\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            result += (char)(c + 1);\n        }\n \
    \       foreach (char c in message.ToUpper()) {\n            result += (char)(c\
    \ + 1);\n        }\n        foreach (char c in message.ToUpper()) {\n        \
    \    result += (char)(c + 1);\n        }\n        foreach (char c in message.ToLower())\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToUpper()) {\n            result += (char)(c + 1);\n        }\n \
    \       foreach (char c in message.ToUpper()) {\n            result += (char)(c\
    \ + 1);\n        }\n        foreach (char c in message.ToLower()) {\n        \
    \    result += (char)(c + 1);\n        }\n        foreach (char c in message.ToUpper())\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToUpper()) {\n            result += (char)(c + 1);\n        }\n \
    \       foreach (char c in message.ToLower()) {\n            result += (char)(c\
    \ + 1);\n        }\n        foreach (char c in message.ToUpper()) {\n        \
    \    result += (char)(c + 1);\n        }\n        foreach (char c in message.ToUpper())\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            result += (char)(c + 1);\n        }\n \
    \       foreach (char c in message.ToUpper()) {\n            result += (char)(c\
    \ + 1);\n        }\n        foreach (char c in message.ToUpper()) {\n        \
    \    result += (char)(c + 1);\n        }\n        foreach (char c in message.\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6ducpvdx.cs(105,36): error CS1001: Identifier expected

    /tmp/tmp6ducpvdx.cs(105,36): error CS1026: ) expected

    /tmp/tmp6ducpvdx.cs(105,36): error CS1525: Invalid expression term ''}''

    /tmp/tmp6ducpvdx.cs(105,36): error CS1002: ; expected

    '
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            if (c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n                result += c;\n            }\n     \
    \   }\n        foreach (char c in message.ToUpper()) {\n            if (c == 'A'\
    \ || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n                result +=\
    \ c;\n            }\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\"\
    )));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"\
    YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"\
    tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\"\
    )).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <acfd11be5e2245f0917bd4300f22e316>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <acfd11be5e2245f0917bd4300f22e316>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            if (char.IsLetter(c)) {\n                result += char.ToUpper(c);\n\
    \            }\n            else {\n                result += c;\n           \
    \ }\n        }\n        char[] vowels = new char[] { 'a', 'e', 'i', 'o', 'u' };\n\
    \        char[] letters = new char[] { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k',\
    \ 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n       \
    \ char[] letters2 = new char[] { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[]\
    \ letters3 = new char[] { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\
    \ 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] letters4\
    \ = new char[] { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] letters5 = new char[]\
    \ { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] letters6 = new char[] { 'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z' };\n        char[] letters7 = new char[] { 'b', 'c', 'd',\
    \ 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x',\
    \ 'y', 'z' };\n        char[] letters8 = new char[] { 'b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'\
    \ };\n        char[] letters9 = new char[] { 'b', 'c', 'd', 'f', 'g', 'h', 'j',\
    \ 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n  \
    \      char[] letters10 = new char[] { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k',\
    \ 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n       \
    \ char[] letters11 = new char[] { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[]\
    \ letters\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpm_fss386.cs(41,23): error CS1002: ; expected

    '
  timestamp: 1659793692
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        char[] charArray = message.ToCharArray();\n        string\
    \ result = \"\";\n        for (int i = 0; i < charArray.Length; i++) {\n     \
    \       char c = charArray[i];\n            if (char.IsLetter(c)) {\n        \
    \        result += char.ToUpper(c);\n            }\n            else {\n     \
    \           result += c;\n            }\n        }\n        for (int i = 0; i\
    \ < result.Length; i++) {\n            char c = result[i];\n            if (char.IsLetter(c))\
    \ {\n                char nextLetter = charArray[(i + 1) % (result.Length)];\n\
    \                result += nextLetter;\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.Encode (System.String message) [0x00087]\
    \ in <fb9f2037ee3241d8b009d68b9afd1168>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <fb9f2037ee3241d8b009d68b9afd1168>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of\
    \ the array.\n  at Problem.Encode (System.String message) [0x00087] in <fb9f2037ee3241d8b009d68b9afd1168>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <fb9f2037ee3241d8b009d68b9afd1168>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            if (char.IsLetter(c)) {\n             \
    \   result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in result.ToLower()) {\n            if (char.IsLetter(c)) {\n            \
    \    result += (char)(c - 1);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e8ddcc2884e849289b326e9851edaaa3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e8ddcc2884e849289b326e9851edaaa3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dcf52f9569d14947a30a1b82cb6beb47>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dcf52f9569d14947a30a1b82cb6beb47>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in result.ToCharArray()) {\n            int index = GetIndex(c);\n       \
    \     if (index != -1) {\n                char replacement = GetReplacement(c);\n\
    \                result += replacement;\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkzk00t7y.cs(25,25): error CS0103: The name ''GetIndex'' does not exist
    in the current context

    /tmp/tmpkzk00t7y.cs(27,36): error CS0103: The name ''GetReplacement'' does not
    exist in the current context

    '
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in \"aeiou\") {\n            result += (char)(c ^ 0x20);\n        }\n    \
    \    return result;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5c96229cefd4ccca908c39e7c4823e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5c96229cefd4ccca908c39e7c4823e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in \"aeiou\") {\n            int index = message.IndexOf(c);\n           \
    \ if (index != -1) {\n                result += (char)(message.Substring(index,\
    \ 2) ^ 0x20);\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"\
    tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"mWDCSKR\")));\n \
    \   Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfyyd8bn4.cs(27,34): error CS0019: Operator ''^'' cannot be applied to
    operands of type ''string'' and ''int''

    '
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            if (char.IsLetter(c)) {\n             \
    \   result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToLower()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dff6ba0d1de4d5683fd3b486f78feae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dff6ba0d1de4d5683fd3b486f78feae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            if (char.IsLetter(c)) {\n                result += (char.IsUpper(c)\
    \ ? char.ToLower(c) : char.ToUpper(c));\n            }\n        }\n        foreach\
    \ (char c in result) {\n            int index = result.IndexOf(c);\n         \
    \   if (index != -1) {\n                string vowels = \"aeiouAEIOU\";\n    \
    \            string replacement = vowels.Substring(index - 2, 2);\n          \
    \      result += replacement;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: StartIndex\
    \ cannot be less than zero.\nParameter name: startIndex\n  at System.String.Substring\
    \ (System.Int32 startIndex, System.Int32 length) [0x00004] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.Encode (System.String message) [0x0008e] in <43da026bc62543e19b5f66ec6a6f19f8>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <43da026bc62543e19b5f66ec6a6f19f8>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: StartIndex\
    \ cannot be less than zero.\nParameter name: startIndex\n  at System.String.Substring\
    \ (System.Int32 startIndex, System.Int32 length) [0x00004] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.Encode (System.String message) [0x0008e] in <43da026bc62543e19b5f66ec6a6f19f8>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <43da026bc62543e19b5f66ec6a6f19f8>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in \"aeiouAEIOU\") {\n            result += (char)(c ^ 0x20);\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4e0645eea20f42cab378d4fd41e2f3eb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4e0645eea20f42cab378d4fd41e2f3eb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793692
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            if (char.IsLetter(c)) {\n                result += char.ToUpper(c);\n\
    \            }\n            else {\n                result += c;\n           \
    \ }\n        }\n        char[] vowels = { 'a', 'e', 'i', 'o', 'u' };\n       \
    \ char[] letters = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p',\
    \ 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] vowels2 = { 'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z' };\n        char[] letters2 = { 'b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'\
    \ };\n        char[] vowels3 = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[]\
    \ letters3 = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] vowels4 = { 'b', 'c',\
    \ 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w',\
    \ 'x', 'y', 'z' };\n        char[] letters4 = { 'b', 'c', 'd', 'f', 'g', 'h',\
    \ 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n\
    \        char[] vowels5 = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] letters5\
    \ = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] vowels6 = { 'b', 'c', 'd', 'f',\
    \ 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y',\
    \ 'z' };\n        char[] letters6 = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k',\
    \ 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n       \
    \ char[] vowels7 = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p',\
    \ 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] letters7 = {\
    \ 'b', 'c', 'd', 'f', 'g', '\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5eegzlhf.cs(42,54): error CS1010: Newline in constant

    /tmp/tmp5eegzlhf.cs(42,54): error CS1011: Empty character literal

    /tmp/tmp5eegzlhf.cs(43,6): error CS1002: ; expected

    /tmp/tmp5eegzlhf.cs(44,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp5eegzlhf.cs(52,2): error CS1513: } expected

    '
  timestamp: 1659793691
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in \"aeiouAEIOU\") {\n            result += (char)(c + 1);\n        }\n    \
    \    return result;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1001af0ad84c4bea9baa26f950244d03>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1001af0ad84c4bea9baa26f950244d03>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793691
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            result += (char)(c + 1);\n        }\n \
    \       foreach (char c in message.ToUpper()) {\n            result += (char)(c\
    \ + 1);\n        }\n        foreach (char c in message.ToUpper()) {\n        \
    \    result += (char)(c + 1);\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"\
    tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"mWDCSKR\")));\n \
    \   Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e2759012a56c47a9932769357f02489c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e2759012a56c47a9932769357f02489c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in \"aeiouAEIOU\") {\n            int index = message.IndexOf(c);\n        \
    \    if (index != -1) {\n                result += message.Substring(index, 2);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\"\
    )));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"\
    YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"\
    tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\"\
    )).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bbeaaaf4d6fd4ecb9b77a404619b9e7a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bbeaaaf4d6fd4ecb9b77a404619b9e7a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        char[] chars = message.ToCharArray();\n\
    \        foreach (char c in chars) {\n            if (char.IsUpper(c)) {\n   \
    \             result += (char.ToLower(c) + char.ToUpper(c));\n            }\n\
    \            else if (char.IsLower(c)) {\n                result += (char.ToUpper(c)\
    \ + char.ToLower(c));\n            }\n            else {\n                result\
    \ += c;\n            }\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\"\
    )));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"\
    YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"\
    tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\"\
    )).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <24b066c947f74f22b0d3cdfa8e47692e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <24b066c947f74f22b0d3cdfa8e47692e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            if (char.IsLetter(c)) {\n                result += (char.ToLower(c));\n\
    \            }\n            else {\n                result += (char.ToUpper(c));\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\"\
    )));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"\
    YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"\
    tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\"\
    )).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8d6750189d7c4864b347a523a31763e0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8d6750189d7c4864b347a523a31763e0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in \"aeiou\") {\n            result += (char)(c ^ 0x20);\n        }\n    \
    \    return result;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5c96229cefd4ccca908c39e7c4823e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5c96229cefd4ccca908c39e7c4823e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            if (char.IsLetter(c)) {\n                result += (char.ToLower(c));\n\
    \            }\n            else {\n                result += (char.ToUpper(c));\n\
    \            }\n        }\n        foreach (char c in result) {\n            int\
    \ index = result.IndexOf(c);\n            if (index != -1) {\n               \
    \ string vowels = \"AEIOUaeiou\";\n                string replacement = vowels.Substring(2\
    \ * index, 1);\n                result += replacement;\n            }\n      \
    \  }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5e667ff698854c0d9167199327d2204c>:0 \n\nUnhandled Exception:\n\
    System.ArgumentOutOfRangeException: Index and length must refer to a location\
    \ within the string.\nParameter name: length\n  at System.String.Substring (System.Int32\
    \ startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.Encode (System.String message) [0x00098] in <5e667ff698854c0d9167199327d2204c>:0\
    \ \n  at Problem.Main (System.String[] args) [0x0001b] in <5e667ff698854c0d9167199327d2204c>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ and length must refer to a location within the string.\nParameter name: length\n\
    \  at System.String.Substring (System.Int32 startIndex, System.Int32 length) [0x0004c]\
    \ in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Encode (System.String\
    \ message) [0x00098] in <5e667ff698854c0d9167199327d2204c>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0001b] in <5e667ff698854c0d9167199327d2204c>:0 \n"
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            if (c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n                result += c;\n            }\n     \
    \   }\n        foreach (char c in message.ToUpper()) {\n            if (c == 'A'\
    \ || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n                result +=\
    \ c;\n            }\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\"\
    )));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"\
    YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"\
    tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\"\
    )).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <acfd11be5e2245f0917bd4300f22e316>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <acfd11be5e2245f0917bd4300f22e316>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793691
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in \"aeiou\") {\n            result += (char)(c ^ 0x20);\n        }\n    \
    \    return result;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5c96229cefd4ccca908c39e7c4823e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5c96229cefd4ccca908c39e7c4823e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793691
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in \"aeiou\") {\n            result += (char)(c ^ 0x20);\n        }\n    \
    \    return result;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5c96229cefd4ccca908c39e7c4823e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5c96229cefd4ccca908c39e7c4823e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793691
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            if (char.IsLetter(c)) {\n                result += (char.IsUpper(c)\
    \ ? char.ToUpper(c) : char.ToLower(c));\n            }\n            else {\n \
    \               result += c;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ac5744f48da847378419dc69ace4c917>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ac5744f48da847378419dc69ace4c917>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793692
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            if (char.IsLetter(c)) {\n             \
    \   result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"\
    tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"mWDCSKR\")));\n \
    \   Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuf6_wsmi.cs(110,32): error CS1026: ) expected

    /tmp/tmpuf6_wsmi.cs(110,32): error CS1525: Invalid expression term ''}''

    /tmp/tmpuf6_wsmi.cs(110,32): error CS1002: ; expected

    /tmp/tmpuf6_wsmi.cs(112,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpuf6_wsmi.cs(120,2): error CS1513: } expected

    '
  timestamp: 1659793691
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in \"aeiouAEIOU\") {\n            result += (char)(c ^ 0x20);\n        }\n\
    \        foreach (char c in \"AEIOUaeiou\") {\n            result += (char)(c\
    \ ^ 0x20);\n        }\n        foreach (char c in \"AEIOUaeiouAEIOU\") {\n   \
    \         result += (char)(c ^ 0x20);\n        }\n        foreach (char c in \"\
    aeiouAEIOUaeiouAEIOU\") {\n            result += (char)(c ^ 0x20);\n        }\n\
    \        foreach (char c in \"AEIOUaeiouAEIOUaeiouAEIOU\") {\n            result\
    \ += (char)(c ^ 0x20);\n        }\n        foreach (char c in \"aeiouAEIOUaeiouAEIOUaeiouAEIOU\"\
    ) {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU\") {\n            result += (char)(c\
    \ ^ 0x20);\n        }\n        foreach (char c in \"aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU\"\
    ) {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU\") {\n            result\
    \ += (char)(c ^ 0x20);\n        }\n        foreach (char c in \"aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU\"\
    ) {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU\") {\n      \
    \      result += (char)(c ^ 0x20);\n        }\n        foreach (char c in \"aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU\"\
    ) {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU\")\
    \ {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in \"aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0xdj7s5v.cs(63,28): error CS1010: Newline in constant

    /tmp/tmp0xdj7s5v.cs(63,64): error CS1026: ) expected

    /tmp/tmp0xdj7s5v.cs(63,64): error CS1525: Invalid expression term ''}''

    /tmp/tmp0xdj7s5v.cs(63,64): error CS1002: ; expected

    '
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            result += (char)(c + 1);\n        }\n \
    \       foreach (char c in message.ToUpper()) {\n            result += (char)(c\
    \ + 1);\n        }\n        foreach (char c in message.ToLower()) {\n        \
    \    result += (char)(c + 1);\n        }\n        foreach (char c in message.ToUpper())\
    \ {\n            result += (char)(c + 1);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ca46963c488453badf3775add54952d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ca46963c488453badf3775add54952d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            result += (char)(c + 1);\n        }\n \
    \       foreach (char c in message.ToUpper()) {\n            result += (char)(c\
    \ + 1);\n        }\n        foreach (char c in message.Replace(\"a\", \"A\").Replace(\"\
    e\", \"E\").Replace(\"i\", \"I\").Replace(\"o\", \"O\").Replace(\"u\", \"U\").Replace(\"\
    y\", \"Y\").Replace(\"A\", \"a\").Replace(\"E\", \"e\").Replace(\"I\", \"i\").Replace(\"\
    O\", \"o\").Replace(\"U\", \"u\").Replace(\"Y\", \"y\")) {\n            result\
    \ += (char)(c + 1);\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\"\
    )));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"\
    YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"\
    tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\"\
    )).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a592b468b8da4275a17a602d31686d91>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a592b468b8da4275a17a602d31686d91>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c ^ 0x20);\n        }\n        foreach (char\
    \ c in \"aeiou\") {\n            int index = message.IndexOf(c);\n           \
    \ result += message.Substring(0, index) + message.Substring(index + 1);\n    \
    \    }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"\
    Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"\
    ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"tHKS KS\
    \ C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\")).Equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Length cannot\
    \ be less than zero.\nParameter name: length\n  at System.String.Substring (System.Int32\
    \ startIndex, System.Int32 length) [0x00031] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.Encode (System.String message) [0x0005d] in <d2a53a2f5def411bbe41d3c8d3471b98>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <d2a53a2f5def411bbe41d3c8d3471b98>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Length\
    \ cannot be less than zero.\nParameter name: length\n  at System.String.Substring\
    \ (System.Int32 startIndex, System.Int32 length) [0x00031] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.Encode (System.String message) [0x0005d] in <d2a53a2f5def411bbe41d3c8d3471b98>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <d2a53a2f5def411bbe41d3c8d3471b98>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            if (char.IsLetter(c)) {\n             \
    \   result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c - 1);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e23263975c514e6880d8c17529b1aabb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e23263975c514e6880d8c17529b1aabb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            if (char.IsLetter(c)) {\n                result += (char.ToLower(c));\n\
    \            }\n            else {\n                result += (char.ToUpper(c));\n\
    \            }\n        }\n        char[] vowels = new char[] { 'A', 'E', 'I',\
    \ 'O', 'U' };\n        char[] letters = new char[] { 'a', 'e', 'i', 'o', 'u' };\n\
    \        char[] lettersAndVowels = new char[] { 'a', 'e', 'i', 'o', 'u', 'A',\
    \ 'E', 'I', 'O', 'U' };\n        char[] lettersAndVowelsAndLetters = new char[]\
    \ { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U', 'a', 'e', 'i', 'o', 'u',\
    \ 'a', 'e', 'i', 'o', 'u' };\n        char[] lettersAndVowelsAndLettersAndVowels\
    \ = new char[] { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U', 'a', 'e', 'i',\
    \ 'o', 'u', 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U', 'a', 'e', 'i', 'o',\
    \ 'u', 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U', 'a', 'e', 'i', 'o', 'u',\
    \ 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U', 'a', 'e', 'i', 'o', 'u', 'a',\
    \ 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U', 'a', 'e', 'i', 'o', 'u', 'a', 'e',\
    \ 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U', 'a', 'e', 'i', 'o', 'u', 'a', 'e', 'i',\
    \ 'o', 'u', 'A', 'E', 'I', 'O', 'U', 'a', 'e', 'i', 'o', 'u', 'a', 'e', 'i', 'o',\
    \ 'u', 'A', 'E', 'I', 'O', 'U', 'a', 'e', 'i', 'o', 'u', 'a', 'e', 'i', 'o', 'u',\
    \ 'A', 'E', 'I', 'O', 'U', 'a', 'e', 'i', 'o', 'u', 'a', 'e', 'i', 'o', 'u', 'A',\
    \ 'E', 'I', 'O', 'U', 'a', 'e', 'i', 'o', 'u', 'a', 'e', 'i', 'o', 'u', 'A', 'E',\
    \ 'I', 'O', 'U', 'a', 'e', 'i', 'o', 'u', 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I',\
    \ 'O', 'U', 'a', 'e', 'i', 'o', 'u', 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O',\
    \ 'U', 'a', 'e', 'i', 'o', 'u', 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U',\
    \ 'a', 'e', 'i', 'o', 'u', 'a', 'e', 'i', 'o', 'u', 'A\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Encode((\"TEST\")).Equals((\"tgst\"\
    )));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"mWDCSKR\")));\n    Debug.Assert(Encode((\"\
    YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"This is a message\")).Equals((\"\
    tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"I DoNt KnOw WhAt tO WrItE\"\
    )).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi86hbhrv.cs(33,1142): error CS1010: Newline in constant

    /tmp/tmpi86hbhrv.cs(34,6): error CS1002: ; expected

    /tmp/tmpi86hbhrv.cs(35,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpi86hbhrv.cs(43,2): error CS1513: } expected

    '
  timestamp: 1659793692
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        char[] vowels = { 'a', 'e',\
    \ 'i', 'o', 'u' };\n        char[] letters = { 'b', 'c', 'd', 'f', 'g', 'h', 'j',\
    \ 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n  \
    \      char[] messageChars = message.ToCharArray();\n        foreach (char c in\
    \ messageChars) {\n            if (vowels.Contains(c)) {\n                result\
    \ += letters[messageChars.IndexOf(c) + 2];\n            } else {\n           \
    \     result += c;\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"TEST\"\
    )).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"mWDCSKR\"\
    )));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpht3nu9zt.cs(26,48): error CS1501: No overload for method ''IndexOf'' takes
    1 arguments

    '
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            if (char.IsLetter(c)) {\n             \
    \   result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in result.ToLower()) {\n            if (char.IsLetter(c)) {\n            \
    \    result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in result.ToUpper()) {\n            if (char.IsLetter(c)) {\n            \
    \    result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in result.ToUpper()) {\n            if (char.IsLetter(c)) {\n            \
    \    result += (char)(c + 1);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5409232fc8b246d7af723acaf5b35903>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5409232fc8b246d7af723acaf5b35903>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string\
    \ message) {\n        string result = \"\";\n        foreach (char c in message)\
    \ {\n            result += (char)(c + 1);\n        }\n        foreach (char c\
    \ in message.ToLower()) {\n            if (char.IsLetter(c)) {\n             \
    \   result += (char)(c + 1);\n            }\n        }\n        foreach (char\
    \ c in message.ToUpper()) {\n            if (char.IsLetter(c)) {\n           \
    \     result += (char)(c - 1);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
    TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
    mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
    This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e23263975c514e6880d8c17529b1aabb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e23263975c514e6880d8c17529b1aabb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793691
