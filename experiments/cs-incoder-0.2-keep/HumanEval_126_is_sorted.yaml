name: HumanEval_126_is_sorted
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a list of numbers, return whether or not they are sorted\n\
  \    // in ascending order. If list has more than 1 duplicate of the same\n    //\
  \ number, return False. Assume no negative numbers and only integers.\n    // Examples\n\
  \    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
  \    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1, 2, 3, 4, 5,\
  \ 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    // is_sorted([1,\
  \ 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
  \    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    public static bool IsSorted(List<long>\
  \ lst) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
  \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
  \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
  \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
  \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
  \ (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new\
  \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,\
  \ (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n\
  \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n\
  \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))\
  \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
  \ (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))\
  \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
  \ (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n\
  \    }\n\n}\n"
completions: ["        if (lst.Count < 2)\n            return true;\n        long\
    \ last = lst[0];\n        bool isSorted = false;\n        for (int i = 1; i <\
    \ lst.Count; i++) {\n            if (lst[i] < last) {\n                isSorted\
    \ = false;\n                break;\n            }\n            isSorted = true;\n\
    \            last = lst[i];\n        }\n        return isSorted;", "        if\
    \ (lst.Count < 2)\n            return true;\n        long last = lst[0];\n   \
    \     bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n \
    \           if (lst[i] < last) {\n                isSorted = false;\n        \
    \        break;\n            }\n            last = lst[i];\n        }\n      \
    \  return isSorted;", "        if (lst.Count < 2)\n            return true;\n\
    \        long last = lst[0];\n        bool isSorted = false;\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < last) {\n           \
    \     isSorted = false;\n                break;\n            }\n            isSorted\
    \ = true;\n            last = lst[i];\n        }\n        return isSorted;", " \
    \       if (lst.Count < 2)\n            return true;\n        var seen = new HashSet<long>();\n\
    \        foreach (var item in lst) {\n            if (seen.Add(item))\n      \
    \          return false;\n        }\n        return true;", "        if (lst.Count\
    \ < 2)\n            return true;\n        long last = lst[0];\n        long lastCount\
    \ = 0;\n        bool isSorted = false;\n        foreach (long num in lst) {\n\
    \            if (num == last)\n                lastCount++;\n            else\n\
    \            {\n                if (lastCount > 1)\n                    return\
    \ false;\n                isSorted = true;\n                last = num;\n    \
    \            lastCount = 1;\n            }\n        }\n        return isSorted;",
  "        if (lst.Count < 2)\n            return true;\n        long lastValue =\
    \ lst[0];\n        bool isSorted = false;\n        foreach (long value in lst)\
    \ {\n            if (value >= lastValue)\n                return false;\n    \
    \        lastValue = value;\n        }\n        return true;", "        if (lst.Count\
    \ < 2)\n            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            isSorted = true;\n            last = lst[i];\n        }\n\
    \        return isSorted;", "        long last = lst[0];\n        bool isSorted\
    \ = false;\n        foreach (long num in lst) {\n            if (num > last) {\n\
    \                isSorted = false;\n                break;\n            }\n  \
    \          last = num;\n        }\n        return isSorted;", "        long last\
    \ = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] > last) {\n                isSorted = false;\n\
    \                break;\n            }\n            last = lst[i];\n        }\n\
    \        return isSorted;", "        if (lst.Count < 2) return true;\n       \
    \ long last = lst[0];\n        bool isSorted = false;\n        for (int i = 1;\
    \ i < lst.Count; i++) {\n            if (lst[i] < last) {\n                isSorted\
    \ = false;\n                break;\n            }\n            if (lst[i] == last)\
    \ {\n                isSorted = true;\n                break;\n            }\n\
    \            last = lst[i];\n        }\n        return isSorted;", "        if\
    \ (lst.Count < 2)\n            return true;\n        long last = lst[0];\n   \
    \     bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < last) {\n                isSorted = false;\n       \
    \         break;\n            }\n            isSorted = true;\n            last\
    \ = lst[i];\n        }\n        return isSorted;", "        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool first = true;\n\
    \        foreach (long num in lst) {\n            if (first && num == last)\n\
    \                return false;\n            if (num < last)\n                return\
    \ false;\n            first = false;\n            last = num;\n        }\n   \
    \     return true;", "        if (lst.Count < 2)\n            return true;\n \
    \       var hash = new Dictionary<long, long>();\n        foreach (var item in\
    \ lst)\n            hash[item] = hash[item] ?? 0;\n        foreach (var item in\
    \ lst)\n            if (hash[item] == 0)\n                return false;\n    \
    \    return true;", "        if (lst.Count < 2)\n            return true;\n  \
    \      long last = lst[0];\n        bool isSorted = false;\n        for (int i\
    \ = 1; i < lst.Count; i++) {\n            if (lst[i] < last) {\n             \
    \   isSorted = false;\n                break;\n            }\n            isSorted\
    \ = true;\n            last = lst[i];\n        }\n        return isSorted;", " \
    \       if (lst.Count < 2) return true;\n        if (lst.Count > 2) return false;\n\
    \        long last = lst[0];\n        bool isSorted = false;\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] > last) {\n           \
    \     isSorted = false;\n                break;\n            }\n            last\
    \ = lst[i];\n        }\n        return isSorted;", "        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        long lastCount\
    \ = 0;\n        foreach (long num in lst) {\n            if (num == last)\n  \
    \              lastCount++;\n            else\n                if (lastCount >\
    \ 1)\n                    return false;\n                else\n              \
    \      lastCount = 1;\n            last = num;\n        }\n        return true;",
  "        if (lst.Count < 2)\n            return true;\n        long last = lst[0];\n\
    \        bool flag = true;\n        for (int i = 1; i < lst.Count; i++) {\n  \
    \          if (lst[i] > last) {\n                flag = false;\n             \
    \   break;\n            }\n            last = lst[i];\n        }\n        return\
    \ flag;", "        long prev = 0;\n        foreach (long n in lst) {\n       \
    \     if (n == prev) {\n                return false;\n            }\n       \
    \     prev = n;\n        }\n        return true;", "        long lastValue = lst[0];\n\
    \        bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < lastValue) {\n                isSorted = false;\n  \
    \              break;\n            }\n            if (lst[i] == lastValue) {\n\
    \                isSorted = true;\n            }\n            lastValue = lst[i];\n\
    \        }\n        return isSorted;", "        if (lst.Count < 2)\n         \
    \   return true;\n        long last = lst[0];\n        bool first = true;\n  \
    \      foreach (long num in lst) {\n            if (first && num == last)\n  \
    \              continue;\n            first = false;\n            if (num < last)\n\
    \                return false;\n            last = num;\n        }\n        return\
    \ true;"]
stop_tokens:
- "\n    }\n"
