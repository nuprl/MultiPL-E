language: cs
name: HumanEval_9_rolling_max
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        var result = new List<long>();\n        var
    rollingMax = numbers.Max();\n        var rollingMaxIndex = -1;\n        var rollingMaxValue
    = rollingMax;\n        var rollingMaxIndexes = new List<int>();\n        var rollingMaxIndexesCount
    = numbers.Count;\n        var rollingMaxIndexesIndex = 0;\n        var rollingMaxIndexesIndexCount
    = 0;\n        var rollingMaxIndexesIndexCountMax = numbers.Count - 1;\n        while
    (rollingMaxIndexesIndexCount < rollingMaxIndexesIndexCountMax) {\n            rollingMaxIndexesIndexCount++;\n
    \           rollingMaxIndexesIndex++;\n            if (rollingMaxIndexesIndex
    == rollingMaxIndexesCount) {\n                rollingMaxIndexesIndex = 0;\n                rollingMaxIndexesIndexCount++;\n
    \           }\n            if (rollingMaxIndexesIndex == rollingMaxIndexesCountMax)
    {\n                rollingMaxIndexesIndex = 0;\n                rollingMaxIndexesIndexCountMax--;\n
    \           }\n            if (rollingMaxIndexesIndex == rollingMaxIndexesIndexCountMax)
    {\n                rollingMaxIndexesIndex++;\n                rollingMaxIndexesIndexCountMax--;\n
    \           }\n            if (rollingMaxIndexesIndex == rollingMaxIndexesCountMax)
    {\n                rollingMaxIndexesIndex++;\n                rollingMaxIndexesIndexCountMax--;\n
    \           }\n            if (rollingMaxIndexesIndex == rollingMaxIndexesCountMax)
    {\n                rollingMaxIndexesIndex++;\n                rollingMaxIndexesIndexCountMax--;\n
    \           }\n            if (rollingMaxIndexesIndex == rollingMaxIndexesCountMax)
    {\n                rollingMaxIndexesIndex++;\n                rollingMaxIndexesIndexCountMax--;\n
    \           }\n            if (rollingMaxIndexesIndex == rollingMaxIndexesCountMax)
    {\n                rollingMaxIndexesIndex++;\n                rollingMaxIndexesIndexCountMax--;\n
    \           }\n            if (rollingMaxIndexesIndex == rollingMaxIndexesCountMax)
    {\n                rollingMaxIndexesIndex++;\n                rollingMaxIndexesIndexCountMax--;\n
    \           }\n            if (rollingMaxIndexesIndex == rollingMaxIndexesCountMax)
    {\n                rollingMaxIndexesIndex++;\n                rollingMaxIndexesIndexCountMax--;\n
    \           }\n            if (rollingMaxIndexesIndex == rollingMaxIndexesCountMax)
    {\n                rollingMaxIndexesIndex++;\n                rollingMaxIndexesIndexCountMax\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprys92vzk.cs(64,47): error CS1002: ; expected

    /tmp/tmprys92vzk.cs(66,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmprys92vzk.cs(73,2): error CS1513: } expected

    '
  timestamp: 1659795325
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = 0;\n        long currentSum =
    0;\n        long sum = 0;\n        foreach (long number in numbers) {\n            currentSum
    += number;\n            if (currentSum > max) {\n                max = currentSum;\n
    \               currentMax = number;\n            }\n            sum += number;\n
    \           if (sum > currentMax) {\n                currentMax = sum;\n                currentSum
    = number;\n            }\n            result.Add(currentMax);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <03af45fabb9542c78786c381221ad1cb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <03af45fabb9542c78786c381221ad1cb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659795325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = 0;\n        long currentMaxIndex
    = 0;\n        long currentMaxValue = numbers[0];\n        foreach (long number
    in numbers) {\n            if (number > currentMaxValue) {\n                currentMaxValue
    = number;\n                currentMaxIndex = result.Count;\n            }\n            if
    (number > max) {\n                max = number;\n                currentMax =
    number;\n            }\n            if (number == currentMaxValue) {\n                currentMaxIndex++;\n
    \           }\n            result.Add(number);\n        }\n        result.Add(max);\n
    \       result.Add(currentMax);\n        result.Add(currentMaxIndex);\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00010] in <1de39eac9cb34e0fab50ad20e87a6d0f>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <1de39eac9cb34e0fab50ad20e87a6d0f>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00010] in <1de39eac9cb34e0fab50ad20e87a6d0f>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <1de39eac9cb34e0fab50ad20e87a6d0f>:0
    \n"
  stdout: ''
  timestamp: 1659795325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = 0;\n        long currentSum =
    0;\n        long currentSumOfSquares = 0;\n        long currentSumOfSquareOfSum
    = 0;\n        long currentSumOfSquareOfSumOfSquares = 0;\n        long currentSumOfSquareOfSumOfSquareOfSum
    = 0;\n        long currentSumOfSquareOfSumOfSquareOfSumOfSquares = 0;\n        long
    currentSumOfSquareOfSumOfSquareOfSumOfSquareOfSum = 0;\n        long currentSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquares
    = 0;\n        long currentSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSum
    = 0;\n        long currentSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquares
    = 0;\n        long currentSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSum
    = 0;\n        long currentSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquares
    = 0;\n        long currentSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSum
    = 0;\n        long currentSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquares
    = 0;\n        long currentSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSum
    = 0;\n        long currentSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquares
    = 0;\n        long currentSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSum
    = 0;\n        long currentSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSum
    = 0;\n        long currentSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSum
    = 0;\n        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvkx164my.cs(15,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    /tmp/tmpvkx164my.cs(16,14): warning CS0219: The variable ''currentMax'' is assigned
    but its value is never used

    /tmp/tmpvkx164my.cs(17,14): warning CS0219: The variable ''currentSum'' is assigned
    but its value is never used

    /tmp/tmpvkx164my.cs(18,14): warning CS0219: The variable ''currentSumOfSquares''
    is assigned but its value is never used

    /tmp/tmpvkx164my.cs(19,14): warning CS0219: The variable ''currentSumOfSquareOfSum''
    is assigned but its value is never used

    /tmp/tmpvkx164my.cs(20,14): warning CS0219: The variable ''currentSumOfSquareOfSumOfSquares''
    is assigned but its value is never used

    /tmp/tmpvkx164my.cs(21,14): warning CS0219: The variable ''currentSumOfSquareOfSumOfSquareOfSum''
    is assigned but its value is never used

    /tmp/tmpvkx164my.cs(22,14): warning CS0219: The variable ''currentSumOfSquareOfSumOfSquareOfSumOfSquares''
    is assigned but its value is never used

    /tmp/tmpvkx164my.cs(23,14): warning CS0219: The variable ''currentSumOfSquareOfSumOfSquareOfSumOfSquareOfSum''
    is assigned but its value is never used

    /tmp/tmpvkx164my.cs(24,14): warning CS0219: The variable ''currentSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquares''
    is assigned but its value is never used

    /tmp/tmpvkx164my.cs(25,14): warning CS0219: The variable ''currentSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSum''
    is assigned but its value is never used

    /tmp/tmpvkx164my.cs(26,14): warning CS0219: The variable ''currentSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquares''
    is assigned but its value is never used

    /tmp/tmpvkx164my.cs(27,14): warning CS0219: The variable ''currentSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSum''
    is assigned but its value is never used

    /tmp/tmpvkx164my.cs(28,14): warning CS0219: The variable ''currentSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquare'
  timestamp: 1659795325
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = 0;\n        long currentSum =
    0;\n        long currentCount = 0;\n        foreach (long number in numbers) {\n
    \           currentSum += number;\n            if (currentSum > max) {\n                max
    = currentSum;\n                currentMax = currentCount;\n            }\n            currentCount++;\n
    \       }\n        result.Add(max);\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab63abb112e8451389efe70e6be9be2a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab63abb112e8451389efe70e6be9be2a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659795325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.Max();\n        long currentMax = maxValue;\n
    \       long currentSum = 0;\n        long currentCount = 0;\n        long currentSumOfSquares
    = 0;\n        foreach (long number in numbers) {\n            currentSum += number;\n
    \           currentCount += 1;\n            currentSumOfSquares += number * number;\n
    \           if (currentCount > 1) {\n                currentMax = Math.Max(currentMax,
    currentSum);\n                currentSum = 0;\n                currentCount =
    0;\n                currentSumOfSquares = 0;\n            }\n            if (currentCount
    == 1) {\n                result.Add(currentMax);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <09316c2456724b1392b54d6eb5e2c85d>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <09316c2456724b1392b54d6eb5e2c85d>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <09316c2456724b1392b54d6eb5e2c85d>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <09316c2456724b1392b54d6eb5e2c85d>:0
    \n"
  stdout: ''
  timestamp: 1659795325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.Max();\n        long currentMax = maxValue;\n
    \       long currentMaxIndex = -1;\n        long currentMaxIndexInResult = -1;\n
    \       long currentMaxIndexInResultInResult = -1;\n        long currentMaxIndexInResultInResultInResult
    = -1;\n        long currentMaxIndexInResultInResultInResultInResult = -1;\n        long
    currentMaxIndexInResultInResultInResultInResultInResult = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResult
    = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResult
    = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult
    = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult
    = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResult\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps_buyxm8.cs(38,77): error CS1002: ; expected

    '
  timestamp: 1659795325
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long current = 0;\n        long last = 0;\n        foreach
    (long number in numbers) {\n            current = number;\n            if (number
    > max) {\n                max = number;\n            }\n            if (number
    == max) {\n                result.Add(last);\n            }\n            last
    = current;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5b1de45cdd0d4da08bf30f23a90595ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5b1de45cdd0d4da08bf30f23a90595ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659795325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = numbers.First();\n        foreach
    (long number in numbers) {\n            if (number > currentMax) {\n                currentMax
    = number;\n            }\n            if (number == currentMax) {\n                result.Add(number);\n
    \           }\n            else {\n                max = Math.Max(max, currentMax);\n
    \               result.Add(max);\n                currentMax = number;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <682e7c2c168c42d8b3b5868036d3b0ce>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <682e7c2c168c42d8b3b5868036d3b0ce>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <682e7c2c168c42d8b3b5868036d3b0ce>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <682e7c2c168c42d8b3b5868036d3b0ce>:0
    \n"
  stdout: ''
  timestamp: 1659795325
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = 0;\n        long currentSum =
    0;\n        long sum = 0;\n        foreach (long number in numbers) {\n            currentSum
    += number;\n            if (currentSum > max) {\n                max = currentSum;\n
    \           }\n            if (currentSum == max) {\n                result.Add(number);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <84d41be7024b49ac8126ea05b1456f5a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <84d41be7024b49ac8126ea05b1456f5a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659795325
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long cur = 0;\n        foreach (long n in numbers)
    {\n            cur = n;\n            while (cur > 0) {\n                result.Add(cur);\n
    \               cur = cur - 1;\n            }\n            max = Math.Max(max,
    n);\n        }\n        result.Add(max);\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0a91b2fedac5471380aa91a67c4ffaa5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0a91b2fedac5471380aa91a67c4ffaa5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659795325
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = 0;\n        long currentMaxIndex
    = 0;\n        foreach (long number in numbers) {\n            if (number > max)
    {\n                max = number;\n                currentMax = number;\n                currentMaxIndex
    = result.Count;\n            }\n            else if (number == max) {\n                currentMax
    = number;\n                currentMaxIndex = result.Count;\n            }\n            else
    if (number < max) {\n                result.Add(number);\n            }\n        }\n
    \       result.Add(max);\n        result.Add(currentMax);\n        result.Add(currentMaxIndex);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <72b036be0f194425b4b7a14b86648824>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <72b036be0f194425b4b7a14b86648824>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659795325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.Max();\n        long currentMax = maxValue;\n
    \       long currentMaxIndex = -1;\n        long currentMaxIndex = numbers.Count;\n
    \       long currentMaxIndexInResult = 0;\n        long currentMaxIndexInResultInResult
    = 0;\n        long currentMaxIndexInResultInResultInResult = 0;\n        long
    currentMaxIndexInResultInResultInResultInResult = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResult
    = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResult
    = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResult
    = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult
    = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult
    = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResult\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxd96j65d.cs(40,85): error CS1002: ; expected

    '
  timestamp: 1659795325
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = 0;\n        long currentSum =
    0;\n        long sum = 0;\n        foreach (long number in numbers) {\n            sum
    += number;\n            if (sum > currentSum) {\n                currentSum =
    sum;\n                currentMax = number;\n            }\n            if (sum
    == currentSum) {\n                result.Add(currentMax);\n                currentMax
    = 0;\n                currentSum = 0;\n            }\n        }\n        if (currentMax
    != 0) {\n            result.Add(currentMax);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6d4da7e2169b48cca628b9a3980e3188>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6d4da7e2169b48cca628b9a3980e3188>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659795325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.First();\n        long currentMax = maxValue;\n
    \       long currentMaxIndex = -1;\n        long currentMaxIndexInResult = -1;\n
    \       bool isMax = true;\n        foreach (long number in numbers) {\n            if
    (number > currentMax) {\n                currentMax = number;\n                currentMaxIndex
    = result.Count;\n                currentMaxIndexInResult = currentMaxIndex;\n
    \               isMax = true;\n            }\n            else if (number == currentMax)
    {\n                currentMaxIndexInResult++;\n            }\n            else
    {\n                isMax = false;\n            }\n            if (isMax) {\n                result.Add(number);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <ab915babe3254c148a7763d88899b3ad>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <ab915babe3254c148a7763d88899b3ad>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <ab915babe3254c148a7763d88899b3ad>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <ab915babe3254c148a7763d88899b3ad>:0
    \n"
  stdout: ''
  timestamp: 1659795325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = numbers.Max();\n        long currentMax = max;\n        long
    currentMaxIndex = 0;\n        long currentMaxValue = numbers[0];\n        long
    currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueValue
    = numbers[currentMaxValueIndex];\n        long currentMaxValueValueIndex = numbers.IndexOf(currentMaxValueValue);\n
    \       long currentMaxValueValueValue = numbers[currentMaxValueValueIndex];\n
    \       long currentMaxValueValueValueIndex = numbers.IndexOf(currentMaxValueValueValue);\n
    \       long currentMaxValueValueValueValue = numbers[currentMaxValueValueValueIndex];\n
    \       long currentMaxValueValueValueIndex =\n            numbers.IndexOf(currentMaxValueValueValue);\n
    \       long currentMaxValueValueValueValue = numbers[currentMaxValueValueValueIndex];\n
    \       long currentMaxValueValueValueValueIndex =\n            numbers.IndexOf(currentMaxValueValueValueValue);\n
    \       long currentMaxValueValueValueValueIndex =\n            numbers.IndexOf(currentMaxValueValueValueValue);\n
    \       long currentMaxValueValueValueValueIndex =\n            numbers.IndexOf(currentMaxValueValueValueValue);\n
    \       long currentMaxValueValueValueValueIndex =\n            numbers.IndexOf(currentMaxValueValueValueValue);\n
    \       long currentMaxValueValueValueValueValueIndex =\n            numbers.IndexOf(currentMaxValueValueValueValue);\n
    \       long currentMaxValueValueValueValueValueIndex =\n            numbers.IndexOf(currentMaxValueValueValueValue);\n
    \       long currentMaxValueValueValueValueValueIndex =\n            numbers.IndexOf(currentMaxValueValueValueValue);\n
    \       long currentMaxValueValueValueValueValueIndex =\n            numbers.IndexOf(currentMaxValueValueValueValue);\n
    \       long currentMaxValueValueValueValueValueIndex =\n            numbers.IndexOf(currentMaxValueValueValueValue);\n
    \       long currentMaxValueValueValueValueValueValueIndex =\n            numbers.IndexOf(currentMaxValueValueValueValue);\n
    \       long currentMaxValueValueValueValueValueValueIndex =\n            numbers.IndexOf(currentMaxValueValueValueValue);\n
    \       long currentMaxValueValueValueValueValueValueIndex =\n            numbers.IndexOf(currentMaxValueValueValueValue);\n
    \       long currentMaxValueValueValueValueValueValueIndex =\n            numbers.IndexOf(currentMaxValueValueValueValue);\n
    \       long currentMaxValueValueValueValueValueValueIndex =\n            numbers.IndexOf(currentMaxValueValueValueValue);\n
    \       long currentMaxValueValueValueValueValueValueIndex =\n            numbers.IndexOf(current\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmyvfj_dd.cs(57,36): error CS1026: ) expected

    /tmp/tmpmyvfj_dd.cs(57,36): error CS1002: ; expected

    '
  timestamp: 1659795325
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = 0;\n        long currentMaxIndex
    = 0;\n        foreach (long number in numbers) {\n            if (number > max)
    {\n                max = number;\n                currentMax = number;\n                currentMaxIndex
    = numbers.IndexOf(number);\n            }\n            else if (number == max)
    {\n                currentMax = number;\n                currentMaxIndex = numbers.IndexOf(number);\n
    \           }\n            else {\n                result.Add(currentMax);\n                max
    = number;\n                currentMax = number;\n                currentMaxIndex
    = numbers.IndexOf(number);\n            }\n        }\n        result.Add(currentMax);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <633c4d75c51e4f968b37e695b2a19d14>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <633c4d75c51e4f968b37e695b2a19d14>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659795325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        var rollingMax = new List<long>();\n
    \       var rollingMaxIndex = 0;\n        var rollingMaxValue = numbers.First();\n
    \       rollingMax.Add(rollingMaxValue);\n        foreach (var number in numbers)
    {\n            if (number > rollingMaxValue) {\n                rollingMaxValue
    = number;\n                rollingMax.Add(rollingMaxValue);\n                rollingMaxIndex++;\n
    \           }\n            else {\n                rollingMaxValue = rollingMax[rollingMaxIndex];\n
    \           }\n        }\n        return rollingMax;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00009] in <bd1e7f556a9f48818e3c8f3b380a0123>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <bd1e7f556a9f48818e3c8f3b380a0123>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00009] in <bd1e7f556a9f48818e3c8f3b380a0123>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <bd1e7f556a9f48818e3c8f3b380a0123>:0
    \n"
  stdout: ''
  timestamp: 1659795325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.Max();\n        long currentMax = maxValue;\n
    \       long currentSum = 0;\n        long currentSumOfSquares = 0;\n        long
    currentSumOfSquaresOfSquares = 0;\n        long currentSumOfSquaresOfSquaresOfSquares
    = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquares = 0;\n        long
    currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares
    = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares
    = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares
    = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares
    = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares
    = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares
    = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares
    = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares
    = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares
    = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares
    = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares
    = 0;\n        long currentSum\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1jbo8l1h.cs(34,24): error CS1002: ; expected

    '
  timestamp: 1659795325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = 0;\n        long currentMaxIndex
    = 0;\n        long currentMaxValue = numbers[0];\n        long currentMaxValueIndex
    = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueValue = currentMaxValue;\n
    \       long currentMaxValueValueIndex = numbers.IndexOf(currentMaxValueValue);\n
    \       foreach (long number in numbers) {\n            if (number > currentMaxValue)
    {\n                currentMaxValue = number;\n                currentMaxIndex
    = currentMaxValueIndex;\n                currentMaxValue = currentMaxValueValue;\n
    \               currentMaxValueIndex = currentMaxValueValueIndex;\n                currentMaxValue
    = currentMaxValueValue;\n            }\n            if (number > max) {\n                max
    = number;\n                currentMaxValue = number;\n                currentMaxIndex
    = currentMaxValueIndex;\n                currentMaxValue = currentMaxValueValue;\n
    \               currentMaxValueIndex = currentMaxValueValueIndex;\n                currentMaxValue
    = currentMaxValueValue;\n            }\n            result.Add(number);\n        }\n
    \       result.Add(max);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00010] in <ea061dfdc0954933b0a824039684c898>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <ea061dfdc0954933b0a824039684c898>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00010] in <ea061dfdc0954933b0a824039684c898>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <ea061dfdc0954933b0a824039684c898>:0
    \n"
  stdout: ''
  timestamp: 1659795325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = numbers.First();\n        foreach
    (long number in numbers) {\n            if (number > currentMax) {\n                result.Add(currentMax);\n
    \               max = currentMax;\n                currentMax = number;\n            }\n
    \           else {\n                max = Math.Max(number, max);\n            }\n
    \       }\n        result.Add(max);\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <926902fac61d4489819079b422c023d5>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <926902fac61d4489819079b422c023d5>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <926902fac61d4489819079b422c023d5>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <926902fac61d4489819079b422c023d5>:0
    \n"
  stdout: ''
  timestamp: 1659795325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = numbers.Max();\n        long current = max;\n        long rollingMax
    = max;\n        long rollingMaxIndex = -1;\n        foreach (long number in numbers)
    {\n            if (number > rollingMax) {\n                result.Add(rollingMax);\n
    \               rollingMax = number;\n                rollingMaxIndex = result.Count
    - 1;\n            }\n            current = number;\n            if (number > rollingMax)
    {\n                rollingMax = number;\n                rollingMaxIndex = result.Count
    - 1;\n            }\n        }\n        result.Add(rollingMax);\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <ce9f04a736ad4de68c8610c7564bfae1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <ce9f04a736ad4de68c8610c7564bfae1>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <ce9f04a736ad4de68c8610c7564bfae1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <ce9f04a736ad4de68c8610c7564bfae1>:0
    \n"
  stdout: ''
  timestamp: 1659795325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.Max();\n        long currentMax = maxValue;\n
    \       long currentSum = 0;\n        long currentSumOfSquares = 0;\n        long
    currentSumOfSquareOfDifferences = 0;\n        long currentSumOfSquareOfDifferenceOfDifferences
    = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferences = 0;\n
    \       long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferences
    = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences
    = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences
    = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences
    = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences
    = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences
    = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences
    = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences
    = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences
    = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences
    = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences
    = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences
    = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences
    = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences
    = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences
    = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifference\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp43i0lv57.cs(37,92): error CS1002: ; expected

    '
  timestamp: 1659795325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.Max();\n        long currentMax = maxValue;\n
    \       long currentMaxIndex = 0;\n        long currentMaxIndex2 = 0;\n        long
    currentMaxIndex3 = 0;\n        long currentMaxIndex4 = 0;\n        long currentMaxIndex5
    = 0;\n        long currentMaxIndex6 = 0;\n        long currentMaxIndex7 = 0;\n
    \       long currentMaxIndex8 = 0;\n        long currentMaxIndex9 = 0;\n        long
    currentMaxIndex10 = 0;\n        long currentMaxIndex11 = 0;\n        long currentMaxIndex12
    = 0;\n        long currentMaxIndex13 = 0;\n        long currentMaxIndex14 = 0;\n
    \       long currentMaxIndex15 = 0;\n        long currentMaxIndex16 = 0;\n        long
    currentMaxIndex17 = 0;\n        long currentMaxIndex18 = 0;\n        long currentMaxIndex19
    = 0;\n        long currentMaxIndex20 = 0;\n        long currentMaxIndex21 = 0;\n
    \       long currentMaxIndex22 = 0;\n        long currentMaxIndex23 = 0;\n        long
    currentMaxIndex24 = 0;\n        long currentMaxIndex25 = 0;\n        long currentMaxIndex26
    = 0;\n        long currentMaxIndex27 = 0;\n        long currentMaxIndex28 = 0;\n
    \       long currentMaxIndex29 = 0;\n        long currentMaxIndex30 = 0;\n        long
    currentMaxIndex31 = 0;\n        long currentMaxIndex32 = 0;\n        long currentMaxIndex33
    = 0;\n        long currentMaxIndex34 = 0;\n        long currentMaxIndex35 = 0;\n
    \       long currentMaxIndex36 = 0;\n        long currentMaxIndex37 = 0;\n        long
    currentMaxIndex38 = 0;\n        long currentMaxIndex39 = 0;\n        long currentMaxIndex40
    = 0;\n        long currentMaxIndex41 = 0;\n        long currentMaxIndex42 = 0;\n
    \       long currentMaxIndex43 = 0;\n        long currentMaxIndex44 = 0;\n        long
    currentMaxIndex45 = 0;\n        long currentMaxIndex46 = 0;\n        long currentMaxIndex47
    = 0;\n        long currentMaxIndex48 = 0;\n        long currentMaxIndex49 = 0;\n
    \       long currentMaxIndex50 = 0;\n        long currentMaxIndex51 = 0;\n        long
    currentMaxIndex52 = 0;\n        long currentMaxIndex53 = 0;\n        long currentMaxIndex54
    = 0;\n        long currentMaxIndex55 = 0;\n        long currentMaxIndex56 = 0;\n
    \       long currentMaxIndex57 = 0;\n        long currentMaxIndex58 = 0;\n        long
    currentMaxIndex59 = 0;\n        long currentMaxIndex60 = 0;\n        long currentMaxIndex61
    = 0;\n        long current\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps3iup6fy.cs(78,21): error CS1002: ; expected

    '
  timestamp: 1659795325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> max = new List<long>();\n
    \       long maxElement = numbers.Max();\n        long currentMaxElement = maxElement;\n
    \       long currentMaxIndex = numbers.IndexOf(maxElement);\n        long currentMaxIndexInList
    = currentMaxIndex + 1;\n        long currentMaxIndexInListInList = currentMaxIndexInList
    + 1;\n        long currentMaxIndexInListInListInList = currentMaxIndexInListInList
    + 1;\n        long currentMaxIndexInListInListInListInList = currentMaxIndexInListInListInList
    + 1;\n        long currentMaxIndexInListInListInListInListInList = currentMaxIndexInListInListInListInList
    + 1;\n        long currentMaxIndexInListInListInListInListInListInList = currentMaxIndexInListInListInListInListInList
    + 1;\n        long currentMaxIndexInListInListInListInListInListInListInList =
    currentMaxIndexInListInListInListInListInListInListInList + 1;\n        long currentMaxIndexInListInListInListInListInListInListInListInListInList
    = currentMaxIndexInListInListInListInListInListInListInListInListInList + 1;\n
    \       long currentMaxIndexInListInListInListInListInListInListInListInListInListInList
    = currentMaxIndexInListInListInListInListInListInListInListInListInListInListInList
    + 1;\n        long currentMaxIndexInListInListInListInListInListInListInListInListInListInListInListInList
    = currentMaxIndexInListInListInListInListInListInListInListInListInListInListInListInList
    + 1;\n        long currentMaxIndexInListInListInListInListInListInListInListInListInListInListInListInListInList
    = currentMaxIndexInListInListInListInListInListInListInListInListInListInListInListInListInList
    + 1;\n        long currentMaxIndexInListInListInListInListInListInListInListInListInListInListInListInListInListInListInList
    = currentMaxIndexInListInListInListInListInListInListInListInListInListInListInListInListInListInListInList
    + 1;\n        long current\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoc1jy09i.cs(30,21): error CS1002: ; expected

    '
  timestamp: 1659795325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.Max();\n        long currentMax = maxValue;\n
    \       long currentSum = 0;\n        long currentCount = 0;\n        foreach
    (long number in numbers) {\n            currentSum += number;\n            if
    (currentSum > currentMax) {\n                currentMax = currentSum;\n                currentCount
    = 1;\n            } else {\n                currentCount++;\n            }\n            result.Add(currentMax);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <dd37050e58ab4f5aaa65d6092e6876b4>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <dd37050e58ab4f5aaa65d6092e6876b4>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <dd37050e58ab4f5aaa65d6092e6876b4>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <dd37050e58ab4f5aaa65d6092e6876b4>:0
    \n"
  stdout: ''
  timestamp: 1659795325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.Max();\n        long currentMax = maxValue;\n
    \       long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long
    currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex
    = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n
    \       long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long
    currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex
    = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n
    \       long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long
    currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex
    = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n
    \       long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long
    currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex
    = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n
    \       long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long
    currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex
    = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n
    \       long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long
    currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex
    = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n
    \       long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long
    currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex
    = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n
    \       long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long
    currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex
    = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n
    \       long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long
    currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex
    = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n
    \       long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long
    currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex
    = -1;\n        long currentMaxIndex = -1;\n        long current\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphog0b_2m.cs(86,21): error CS1002: ; expected

    '
  timestamp: 1659795325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long cur = numbers.First();\n        long curMax
    = numbers.First();\n        foreach (long n in numbers) {\n            if (n >
    cur) {\n                result.Add(curMax);\n                curMax = cur;\n                cur
    = n;\n            } else {\n                curMax = cur;\n                cur
    = n;\n            }\n        }\n        result.Add(curMax);\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <6d9b032b31be4e1e8a6cd33f905d9c4f>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <6d9b032b31be4e1e8a6cd33f905d9c4f>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <6d9b032b31be4e1e8a6cd33f905d9c4f>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <6d9b032b31be4e1e8a6cd33f905d9c4f>:0
    \n"
  stdout: ''
  timestamp: 1659795325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = numbers.First();\n        long
    currentMaxIndex = 0;\n        long currentMaxValue = numbers.First();\n        foreach
    (long number in numbers) {\n            if (number > currentMax) {\n                currentMax
    = number;\n                currentMaxIndex = currentMaxValue - currentMax;\n            }\n
    \           currentMaxValue = number;\n        }\n        result.Add(currentMax);\n
    \       long currentMaxValue = numbers.First();\n        long currentMaxIndex
    = currentMaxValue - currentMax;\n        foreach (long number in numbers) {\n
    \           if (number > currentMax) {\n                currentMax = number;\n
    \               currentMaxIndex = currentMaxValue - currentMax;\n            }\n
    \           currentMaxValue = number;\n            result.Add(currentMax);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpy2uqgkix.cs(27,14): error CS0128: A local variable or function named ''currentMaxValue''
    is already defined in this scope

    /tmp/tmpy2uqgkix.cs(28,14): error CS0128: A local variable or function named ''currentMaxIndex''
    is already defined in this scope

    /tmp/tmpy2uqgkix.cs(15,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    '
  timestamp: 1659795325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.Max();\n        long currentMax = maxValue;\n
    \       long currentMaxIndex = 0;\n        long currentMaxIndex2 = 0;\n        long
    currentMaxIndex3 = 0;\n        long currentMaxIndex4 = 0;\n        long currentMaxIndex5
    = 0;\n        long currentMaxIndex6 = 0;\n        long currentMaxIndex7 = 0;\n
    \       long currentMaxIndex8 = 0;\n        long currentMaxIndex9 = 0;\n        long
    currentMaxIndex10 = 0;\n        long currentMaxIndex11 = 0;\n        long currentMaxIndex12
    = 0;\n        long currentMaxIndex13 = 0;\n        long currentMaxIndex14 = 0;\n
    \       long currentMaxIndex15 = 0;\n        long currentMaxIndex16 = 0;\n        long
    currentMaxIndex17 = 0;\n        long currentMaxIndex18 = 0;\n        long currentMaxIndex19
    = 0;\n        long currentMaxIndex20 = 0;\n        long currentMaxIndex21 = 0;\n
    \       long currentMaxIndex22 = 0;\n        long currentMaxIndex23 = 0;\n        long
    currentMaxIndex24 = 0;\n        long currentMaxIndex25 = 0;\n        long currentMaxIndex26
    = 0;\n        long currentMaxIndex27 = 0;\n        long currentMaxIndex28 = 0;\n
    \       long currentMaxIndex29 = 0;\n        long currentMaxIndex30 = 0;\n        long
    currentMaxIndex31 = 0;\n        long currentMaxIndex32 = 0;\n        long currentMaxIndex33
    = 0;\n        long currentMaxIndex34 = 0;\n        long currentMaxIndex35 = 0;\n
    \       long currentMaxIndex36 = 0;\n        long currentMaxIndex37 = 0;\n        long
    currentMaxIndex38 = 0;\n        long currentMaxIndex39 = 0;\n        long currentMaxIndex40
    = 0;\n        long currentMaxIndex41 = 0;\n        long currentMaxIndex42 = 0;\n
    \       long currentMaxIndex43 = 0;\n        long currentMaxIndex44 = 0;\n        long
    currentMaxIndex45 = 0;\n        long currentMaxIndex46 = 0;\n        long currentMaxIndex47
    = 0;\n        long currentMaxIndex48 = 0;\n        long currentMaxIndex49 = 0;\n
    \       long currentMaxIndex50 = 0;\n        long currentMaxIndex51 = 0;\n        long
    currentMaxIndex52 = 0;\n        long currentMaxIndex53 = 0;\n        long currentMaxIndex54
    = 0;\n        long currentMaxIndex55 = 0;\n        long currentMaxIndex56 = 0;\n
    \       long currentMaxIndex57 = 0;\n        long currentMaxIndex58 = 0;\n        long
    currentMaxIndex59 = 0;\n        long currentMaxIndex60 = 0;\n        long currentMaxIndex61
    = 0;\n        long current\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps3iup6fy.cs(78,21): error CS1002: ; expected

    '
  timestamp: 1659795325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = numbers.First();\n        foreach
    (long number in numbers) {\n            if (number > currentMax) {\n                max
    = currentMax;\n                currentMax = number;\n            }\n            else
    if (number == currentMax) {\n                currentMax = number;\n            }\n
    \           else {\n                max = Math.Max(max, currentMax);\n                currentMax
    = number;\n            }\n            result.Add(max);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <463e61d09f1241b3871f9070ff7e3ee3>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <463e61d09f1241b3871f9070ff7e3ee3>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <463e61d09f1241b3871f9070ff7e3ee3>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <463e61d09f1241b3871f9070ff7e3ee3>:0
    \n"
  stdout: ''
  timestamp: 1659795326
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = 0;\n        long currentMaxIndex
    = 0;\n        foreach (long number in numbers) {\n            if (number > max)
    {\n                max = number;\n                currentMax = max;\n                currentMaxIndex
    = result.Count;\n            }\n            else if (number == max) {\n                currentMax
    = number;\n                currentMaxIndex = result.Count;\n            }\n            else
    {\n                result.Add(max);\n                max = number;\n                currentMax
    = max;\n                currentMaxIndex = result.Count;\n            }\n        }\n
    \       result.Add(max);\n        result.Add(currentMax);\n        result.Add(currentMaxIndex);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <55da93aa027647098c5448a9ac770e1c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <55da93aa027647098c5448a9ac770e1c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659795326
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = numbers.First();\n        long
    currentMaxIndex = -1;\n        foreach (long number in numbers) {\n            if
    (number > currentMax) {\n                currentMax = number;\n                currentMaxIndex
    = result.Count;\n            }\n            if (number == currentMax) {\n                result.Add(number);\n
    \           }\n        }\n        if (currentMaxIndex != result.Count) {\n            result.Add(currentMax);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <755dff730ff047ccafdb1fbaa73bfaed>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <755dff730ff047ccafdb1fbaa73bfaed>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <755dff730ff047ccafdb1fbaa73bfaed>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <755dff730ff047ccafdb1fbaa73bfaed>:0
    \n"
  stdout: ''
  timestamp: 1659795326
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = numbers.First();\n        long maxIndex = 0;\n        long
    maxValue = numbers.First();\n        foreach (long number in numbers) {\n            if
    (number > maxValue) {\n                maxValue = number;\n                maxIndex
    = result.Count;\n            }\n            if (number == maxValue) {\n                result.Add(number);\n
    \           }\n            else {\n                result.Add(maxValue);\n            }\n
    \       }\n        result.Add(maxValue);\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <33588aed1dc245dcade2d600910188a5>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <33588aed1dc245dcade2d600910188a5>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <33588aed1dc245dcade2d600910188a5>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <33588aed1dc245dcade2d600910188a5>:0
    \n"
  stdout: ''
  timestamp: 1659795326
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = numbers.Max();\n        long currentMax = max;\n        long
    currentSum = 0;\n        long currentSumOfSquares = 0;\n        long currentSumOfCubes
    = 0;\n        long currentSumOfPowers = 0;\n        long currentSumOfPowersOfSquares
    = 0;\n        long currentSumOfPowersOfCubes = 0;\n        long currentSumOfPowersOfPowers
    = 0;\n        long currentSumOfPowersOfPowersOfSquares = 0;\n        long currentSumOfPowersOfPowersOfCubes
    = 0;\n        long currentSumOfPowersOfPowersOfPowers = 0;\n        long currentSumOfPowersOfPowersOfPowersOfSquares
    = 0;\n        long currentSumOfPowersOfPowersOfPowersOfCubes = 0;\n        long
    currentSumOfPowersOfPowersOfPowersOfPowers = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfSquares
    = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfCubes = 0;\n        long
    currentSumOfPowersOfPowersOfPowersOfPowersOfPowers = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares
    = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfCubes =
    0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers =
    0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares =
    0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfCubes = 0;\n
    \       long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers = 0;\n
    \       long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares = 0;\n
    \       long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfCubes = 0;\n
    \       long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers = 0;\n
    \       long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares = 0;\n
    \       long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfCubes = 0;\n
    \       long currentSumOfPowersOfPowersOfPowersOfPowersOfPower\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqqbx95hg.cs(44,63): error CS1002: ; expected

    '
  timestamp: 1659795325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.Max();\n        long currentMax = maxValue;\n
    \       long currentMaxIndex = -1;\n        long currentMaxIndex2 = -1;\n        long
    currentMaxIndex3 = -1;\n        long currentMaxIndex4 = -1;\n        long currentMaxIndex5
    = -1;\n        long currentMaxIndex6 = -1;\n        long currentMaxIndex7 = -1;\n
    \       long currentMaxIndex8 = -1;\n        long currentMaxIndex9 = -1;\n        long
    currentMaxIndex10 = -1;\n        long currentMaxIndex11 = -1;\n        long currentMaxIndex12
    = -1;\n        long currentMaxIndex13 = -1;\n        long currentMaxIndex14 =
    -1;\n        long currentMaxIndex15 = -1;\n        long currentMaxIndex16 = -1;\n
    \       long currentMaxIndex17 = -1;\n        long currentMaxIndex18 = -1;\n        long
    currentMaxIndex19 = -1;\n        long currentMaxIndex20 = -1;\n        long currentMaxIndex21
    = -1;\n        long currentMaxIndex22 = -1;\n        long currentMaxIndex23 =
    -1;\n        long currentMaxIndex24 = -1;\n        long currentMaxIndex25 = -1;\n
    \       long currentMaxIndex26 = -1;\n        long currentMaxIndex27 = -1;\n        long
    currentMaxIndex28 = -1;\n        long currentMaxIndex29 = -1;\n        long currentMaxIndex30
    = -1;\n        long currentMaxIndex31 = -1;\n        long currentMaxIndex32 =
    -1;\n        long currentMaxIndex33 = -1;\n        long currentMaxIndex34 = -1;\n
    \       long currentMaxIndex35 = -1;\n        long currentMaxIndex36 = -1;\n        long
    currentMaxIndex37 = -1;\n        long currentMaxIndex38 = -1;\n        long currentMaxIndex39
    = -1;\n        long currentMaxIndex40 = -1;\n        long currentMaxIndex41 =
    -1;\n        long currentMaxIndex42 = -1;\n        long currentMaxIndex43 = -1;\n
    \       long currentMaxIndex44 = -1;\n        long currentMaxIndex45 = -1;\n        long
    currentMaxIndex46 = -1;\n        long currentMaxIndex47 = -1;\n        long currentMaxIndex48
    = -1;\n        long currentMaxIndex49 = -1;\n        long currentMaxIndex50 =
    -1;\n        long currentMaxIndex51 = -1;\n        long currentMaxIndex52 = -1;\n
    \       long currentMaxIndex53 = -1;\n        long currentMaxIndex54 = -1;\n        long
    currentMaxIndex55 = -1;\n        long currentMax\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpexqeeex1.cs(72,24): error CS1002: ; expected

    '
  timestamp: 1659795325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.Max();\n        long currentMax = maxValue;\n
    \       long currentSum = 0;\n        long currentCount = 0;\n        foreach
    (long number in numbers) {\n            currentSum += number;\n            if
    (currentSum > currentMax) {\n                currentMax = currentSum;\n                currentCount
    = 1;\n            } else {\n                currentCount++;\n            }\n            result.Add(currentMax);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <dd37050e58ab4f5aaa65d6092e6876b4>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <dd37050e58ab4f5aaa65d6092e6876b4>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <dd37050e58ab4f5aaa65d6092e6876b4>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <dd37050e58ab4f5aaa65d6092e6876b4>:0
    \n"
  stdout: ''
  timestamp: 1659795325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.Max();\n        long currentMax = maxValue;\n
    \       long currentMaxIndex = 0;\n        long currentMaxIndexValue = 0;\n        long
    currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3 = 0;\n        long
    currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5 = 0;\n        long
    currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7 = 0;\n        long
    currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9 = 0;\n        long
    currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11 = 0;\n        long
    currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13 = 0;\n        long
    currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15 = 0;\n        long
    currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17 = 0;\n        long
    currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19 = 0;\n        long
    currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21 = 0;\n        long
    currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23 = 0;\n        long
    currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25 = 0;\n        long
    currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27 = 0;\n        long
    currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29 = 0;\n        long
    currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31 = 0;\n        long
    currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33 = 0;\n        long
    currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35 = 0;\n        long
    currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37 = 0;\n        long
    currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39 = 0;\n        long
    currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41 = 0;\n        long
    currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43 = 0;\n        long
    currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45 = 0;\n        long
    currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47 = 0;\n        long
    currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49 = 0;\n        long
    currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51 = 0;\n        long
    currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53 = 0;\n        long
    currentMaxIndexValue54\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoxwoiwng.cs(71,36): error CS1002: ; expected

    '
  timestamp: 1659795325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.Max();\n        long currentMax = maxValue;\n
    \       long currentMaxIndex = 0;\n        long currentMaxIndexValue = 0;\n        long
    currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3 = 0;\n        long
    currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5 = 0;\n        long
    currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7 = 0;\n        long
    currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9 = 0;\n        long
    currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11 = 0;\n        long
    currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13 = 0;\n        long
    currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15 = 0;\n        long
    currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17 = 0;\n        long
    currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19 = 0;\n        long
    currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21 = 0;\n        long
    currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23 = 0;\n        long
    currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25 = 0;\n        long
    currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27 = 0;\n        long
    currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29 = 0;\n        long
    currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31 = 0;\n        long
    currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33 = 0;\n        long
    currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35 = 0;\n        long
    currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37 = 0;\n        long
    currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39 = 0;\n        long
    currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41 = 0;\n        long
    currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43 = 0;\n        long
    currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45 = 0;\n        long
    currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47 = 0;\n        long
    currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49 = 0;\n        long
    currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51 = 0;\n        long
    currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53 = 0;\n        long
    currentMaxIndexValue54\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoxwoiwng.cs(71,36): error CS1002: ; expected

    '
  timestamp: 1659795325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = numbers.First();\n        long currentMax = max;\n        long
    currentMaxIndex = -1;\n        foreach (long number in numbers) {\n            if
    (number > max) {\n                currentMax = max;\n                currentMaxIndex
    = result.Count;\n            }\n            max = number;\n            result.Add(max);\n
    \       }\n        if (currentMaxIndex == result.Count) {\n            result.Add(max);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <57498abb7c554759bb8a51d3e16ec62f>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <57498abb7c554759bb8a51d3e16ec62f>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <57498abb7c554759bb8a51d3e16ec62f>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <57498abb7c554759bb8a51d3e16ec62f>:0
    \n"
  stdout: ''
  timestamp: 1659795326
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = 0;\n        long currentSum =
    0;\n        long currentSum2 = 0;\n        long currentSum3 = 0;\n        long
    currentSum4 = 0;\n        long currentSum5 = 0;\n        long currentSum6 = 0;\n
    \       long currentSum7 = 0;\n        long currentSum8 = 0;\n        long currentSum9
    = 0;\n        long currentSum10 = 0;\n        long currentSum11 = 0;\n        long
    currentSum12 = 0;\n        long currentSum13 = 0;\n        long currentSum14 =
    0;\n        long currentSum15 = 0;\n        long currentSum16 = 0;\n        long
    currentSum17 = 0;\n        long currentSum18 = 0;\n        long currentSum19 =
    0;\n        long currentSum20 = 0;\n        long currentSum21 = 0;\n        long
    currentSum22 = 0;\n        long currentSum23 = 0;\n        long currentSum24 =
    0;\n        long currentSum25 = 0;\n        long currentSum26 = 0;\n        long
    currentSum27 = 0;\n        long currentSum28 = 0;\n        long currentSum29 =
    0;\n        long currentSum30 = 0;\n        long currentSum31 = 0;\n        long
    currentSum32 = 0;\n        long currentSum33 = 0;\n        long currentSum34 =
    0;\n        long currentSum35 = 0;\n        long currentSum36 = 0;\n        long
    currentSum37 = 0;\n        long currentSum38 = 0;\n        long currentSum39 =
    0;\n        long currentSum40 = 0;\n        long currentSum41 = 0;\n        long
    currentSum42 = 0;\n        long currentSum43 = 0;\n        long currentSum44 =
    0;\n        long currentSum45 = 0;\n        long currentSum46 = 0;\n        long
    currentSum47 = 0;\n        long currentSum48 = 0;\n        long currentSum49 =
    0;\n        long currentSum50 = 0;\n        long currentSum51 = 0;\n        long
    currentSum52 = 0;\n        long currentSum53 = 0;\n        long currentSum54 =
    0;\n        long currentSum55 = 0;\n        long currentSum56 = 0;\n        long
    currentSum57 = 0;\n        long currentSum58 = 0;\n        long currentSum59 =
    0;\n        long currentSum60 = 0;\n        long currentSum61 = 0;\n        long
    currentSum62 = 0;\n        long currentSum63 = 0;\n        long currentSum64 =
    0;\n        long currentSum65 = 0;\n        long currentSum66 = 0;\n        long
    currentSum67 = 0;\n        long currentSum68 = 0;\n        long currentSum69 =
    0;\n        long currentSum70 = 0;\n        long currentSum71 = 0;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9ojiae6f.cs(15,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    /tmp/tmp9ojiae6f.cs(16,14): warning CS0219: The variable ''currentMax'' is assigned
    but its value is never used

    /tmp/tmp9ojiae6f.cs(17,14): warning CS0219: The variable ''currentSum'' is assigned
    but its value is never used

    /tmp/tmp9ojiae6f.cs(18,14): warning CS0219: The variable ''currentSum2'' is assigned
    but its value is never used

    /tmp/tmp9ojiae6f.cs(19,14): warning CS0219: The variable ''currentSum3'' is assigned
    but its value is never used

    /tmp/tmp9ojiae6f.cs(20,14): warning CS0219: The variable ''currentSum4'' is assigned
    but its value is never used

    /tmp/tmp9ojiae6f.cs(21,14): warning CS0219: The variable ''currentSum5'' is assigned
    but its value is never used

    /tmp/tmp9ojiae6f.cs(22,14): warning CS0219: The variable ''currentSum6'' is assigned
    but its value is never used

    /tmp/tmp9ojiae6f.cs(23,14): warning CS0219: The variable ''currentSum7'' is assigned
    but its value is never used

    /tmp/tmp9ojiae6f.cs(24,14): warning CS0219: The variable ''currentSum8'' is assigned
    but its value is never used

    /tmp/tmp9ojiae6f.cs(25,14): warning CS0219: The variable ''currentSum9'' is assigned
    but its value is never used

    /tmp/tmp9ojiae6f.cs(26,14): warning CS0219: The variable ''currentSum10'' is assigned
    but its value is never used

    /tmp/tmp9ojiae6f.cs(27,14): warning CS0219: The variable ''currentSum11'' is assigned
    but its value is never used

    /tmp/tmp9ojiae6f.cs(28,14): warning CS0219: The variable ''currentSum12'' is assigned
    but its value is never used

    /tmp/tmp9ojiae6f.cs(29,14): warning CS0219: The variable ''currentSum13'' is assigned
    but its value is never used

    /tmp/tmp9ojiae6f.cs(30,14): warning CS0219: The variable ''currentSum14'' is assigned
    but its value is never used

    /tmp/tmp9ojiae6f.cs(31,14): warning CS0219: The variable ''currentSum15'' is assigned
    but its value is never used

    /tmp/tmp9ojiae6f.cs(32,14): warning CS'
  timestamp: 1659795326
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = 0;\n        long currentNumber
    = 0;\n        foreach (long number in numbers) {\n            currentNumber =
    number;\n            currentMax = number;\n            while (currentNumber >
    max) {\n                result.Add(currentMax);\n                currentMax =
    currentNumber;\n                currentNumber = numbers.Skip(numbers.IndexOf(currentMax)).First();\n
    \           }\n            max = currentMax;\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Timeout
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <505249ddfaf94191ac8470ec03615a2f>:0
    \n"
  stdout: None
  timestamp: 1659795331
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = 0;\n        long currentMaxIndex
    = 0;\n        long currentMaxValue = numbers[0];\n        long currentMaxValueIndex
    = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long
    currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex
    = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long
    currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex
    = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long
    currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex
    = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long
    currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex
    = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long
    currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex
    = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long
    currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex
    = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long
    currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex
    = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long
    currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex
    = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long
    currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex
    = numbers.Index\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmgf8agxg.cs(55,50): error CS1002: ; expected

    '
  timestamp: 1659795325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.Max();\n        long currentMax = maxValue;\n
    \       long currentMaxIndex = 0;\n        long currentMaxIndexValue = 0;\n        long
    currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3 = 0;\n        long
    currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5 = 0;\n        long
    currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7 = 0;\n        long
    currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9 = 0;\n        long
    currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11 = 0;\n        long
    currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13 = 0;\n        long
    currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15 = 0;\n        long
    currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17 = 0;\n        long
    currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19 = 0;\n        long
    currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21 = 0;\n        long
    currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23 = 0;\n        long
    currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25 = 0;\n        long
    currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27 = 0;\n        long
    currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29 = 0;\n        long
    currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31 = 0;\n        long
    currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33 = 0;\n        long
    currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35 = 0;\n        long
    currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37 = 0;\n        long
    currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39 = 0;\n        long
    currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41 = 0;\n        long
    currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43 = 0;\n        long
    currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45 = 0;\n        long
    currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47 = 0;\n        long
    currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49 = 0;\n        long
    currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51 = 0;\n        long
    currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53 = 0;\n        long
    currentMaxIndexValue54\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoxwoiwng.cs(71,36): error CS1002: ; expected

    '
  timestamp: 1659795325
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long current = 0;\n        foreach (long number
    in numbers) {\n            if (number > max) {\n                max = number;\n
    \               current = number;\n            }\n            else {\n                current
    = current > number ? current : number;\n            }\n            result.Add(current);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <499a8af94e934b3899c3f954a7426510>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <499a8af94e934b3899c3f954a7426510>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659795326
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long cur = 0;\n        foreach (long n in numbers)
    {\n            cur = n;\n            max = Math.Max(max, cur);\n            result.Add(max);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dfe23833c1544e32bffd6972bfecfbe4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dfe23833c1544e32bffd6972bfecfbe4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659795326
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = 0;\n        long currentMaxIndex
    = 0;\n        foreach (long number in numbers) {\n            if (number > max)
    {\n                max = number;\n                currentMax = number;\n                currentMaxIndex
    = result.Count;\n            }\n            else {\n                if (number
    == max) {\n                    currentMax = number;\n                    currentMaxIndex
    = result.Count;\n                }\n                else {\n                    result.Add(max);\n
    \                   max = number;\n                    currentMax = number;\n
    \                   currentMaxIndex = result.Count;\n                }\n            }\n
    \       }\n        result.Add(max);\n        result.Add(currentMax);\n        result.Add(currentMaxIndex);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1dec682c4a014e17a5190bd33a531143>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1dec682c4a014e17a5190bd33a531143>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659795326
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        var rollingMax = new List<long>();\n
    \       var rollingMaxIndex = 0;\n        var rollingMaxValue = numbers.First();\n
    \       var rollingMaxCount = 1;\n        foreach (var number in numbers) {\n
    \           if (number > rollingMaxValue) {\n                rollingMaxValue =
    number;\n                rollingMaxCount = 1;\n            }\n            else
    if (number == rollingMaxValue) {\n                rollingMaxCount++;\n            }\n
    \           else {\n                rollingMax.Add(rollingMaxValue);\n                rollingMaxValue
    = number;\n                rollingMaxCount = 1;\n            }\n            if
    (rollingMaxIndex == numbers.Count - 1) {\n                rollingMax.Add(rollingMaxValue);\n
    \           }\n            rollingMaxIndex++;\n        }\n        return rollingMax;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00009] in <c86e1331034747beaa0da279a84cae38>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <c86e1331034747beaa0da279a84cae38>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00009] in <c86e1331034747beaa0da279a84cae38>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <c86e1331034747beaa0da279a84cae38>:0
    \n"
  stdout: ''
  timestamp: 1659795326
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long current = 0;\n        long sum = 0;\n        foreach
    (long n in numbers) {\n            current = n;\n            sum += current;\n
    \           if (sum > max) {\n                max = sum;\n            }\n            result.Add(max);\n
    \           sum = 0;\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2ecc45a1b34148e89947fdadcb7554f6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2ecc45a1b34148e89947fdadcb7554f6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659795326
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = numbers.First();\n        long maxIndex = 0;\n        long
    currentMax = max;\n        long currentMaxIndex = numbers.IndexOf(max);\n        long
    currentMaxValue = numbers[currentMaxIndex];\n        long currentMaxIndex = currentMaxIndex
    + 1;\n        long currentMaxValue = numbers[currentMaxIndex];\n        long currentMaxIndex
    = currentMaxIndex + 1;\n        long currentMaxValue = numbers[currentMaxIndex];\n
    \       long currentMaxIndex = currentMaxIndex + 1;\n        long currentMaxValue
    = numbers[currentMaxIndex];\n        long currentMaxIndex = currentMaxIndex +
    1;\n        long currentMaxValue = numbers[currentMaxIndex];\n        long currentMaxIndex
    = currentMaxIndex + 1;\n        long currentMaxValue = numbers[currentMaxIndex];\n
    \       long currentMaxIndex = currentMaxIndex + 1;\n        long currentMaxValue
    = numbers[currentMaxIndex];\n        long currentMaxIndex = currentMaxIndex +
    1;\n        long currentMaxValue = numbers[currentMaxIndex];\n        long currentMaxIndex
    = currentMaxIndex + 1;\n        long currentMaxValue = numbers[currentMaxIndex];\n
    \       long currentMaxIndex = currentMaxIndex + 1;\n        long currentMaxValue
    = numbers[currentMaxIndex];\n        long currentMaxIndex = currentMaxIndex +
    1;\n        long currentMaxValue = numbers[currentMaxIndex];\n        long currentMaxIndex
    = currentMaxIndex + 1;\n        long currentMaxValue = numbers[currentMaxIndex];\n
    \       long currentMaxIndex = currentMaxIndex + 1;\n        long currentMaxValue
    = numbers[currentMaxIndex];\n        long currentMaxIndex = currentMaxIndex +
    1;\n        long currentMaxValue = numbers[currentMaxIndex];\n        long currentMaxIndex
    = currentMaxIndex + 1;\n        long currentMaxValue = numbers[currentMaxIndex];\n
    \       long currentMaxIndex = currentMaxIndex + 1;\n        long currentMaxValue
    = numbers[currentMaxIndex];\n        long currentMaxIndex = currentMaxIndex +
    1;\n        long currentMaxValue = numbers[currentMaxIndex];\n        long currentMaxIndex
    = currentMaxIndex + 1;\n        long currentMaxValue = numbers[currentMaxIndex];\n
    \       long currentMaxIndex = currentMaxIndex + 1;\n        long currentMaxValue
    = numbers[currentMaxIndex];\n        long currentMaxIndex = currentMaxIndex +
    1;\n        long currentMaxValue = numbers[currentMaxIndex];\n        long currentMaxIndex
    = currentMaxIndex + 1;\n        long currentMaxValue = numbers[currentMaxIndex];\n
    \       long currentMaxIndex = currentMaxIndex + 1;\n        long currentMaxValue
    = numbers[current\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv6r0vcua.cs(61,47): error CS1003: Syntax error, '']'' expected

    /tmp/tmpv6r0vcua.cs(61,47): error CS1002: ; expected

    '
  timestamp: 1659795326
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = numbers.First();\n        long
    currentMaxIndex = -1;\n        foreach (long number in numbers) {\n            if
    (number > currentMax) {\n                currentMax = number;\n                currentMaxIndex
    = result.Count;\n            }\n            long index = currentMaxIndex + 1;\n
    \           while (index > 0 && number > result[index - 1]) {\n                result[index]
    = result[index - 1];\n                index--;\n            }\n            result[index]
    = number;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppk5h79i6.cs(24,49): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmppk5h79i6.cs(25,24): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmppk5h79i6.cs(25,40): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmppk5h79i6.cs(28,20): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmppk5h79i6.cs(15,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    '
  timestamp: 1659795326
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = 0;\n        long currentSum =
    0;\n        long sum = 0;\n        long currentSum2 = 0;\n        long currentSum3
    = 0;\n        long currentSum4 = 0;\n        long currentSum5 = 0;\n        long
    currentSum6 = 0;\n        long currentSum7 = 0;\n        long currentSum8 = 0;\n
    \       long currentSum9 = 0;\n        long currentSum10 = 0;\n        long currentSum11
    = 0;\n        long currentSum12 = 0;\n        long currentSum13 = 0;\n        long
    currentSum14 = 0;\n        long currentSum15 = 0;\n        long currentSum16 =
    0;\n        long currentSum17 = 0;\n        long currentSum18 = 0;\n        long
    currentSum19 = 0;\n        long currentSum20 = 0;\n        long currentSum21 =
    0;\n        long currentSum22 = 0;\n        long currentSum23 = 0;\n        long
    currentSum24 = 0;\n        long currentSum25 = 0;\n        long currentSum26 =
    0;\n        long currentSum27 = 0;\n        long currentSum28 = 0;\n        long
    currentSum29 = 0;\n        long currentSum30 = 0;\n        long currentSum31 =
    0;\n        long currentSum32 = 0;\n        long currentSum33 = 0;\n        long
    currentSum34 = 0;\n        long currentSum35 = 0;\n        long currentSum36 =
    0;\n        long currentSum37 = 0;\n        long currentSum38 = 0;\n        long
    currentSum39 = 0;\n        long currentSum40 = 0;\n        long currentSum41 =
    0;\n        long currentSum42 = 0;\n        long currentSum43 = 0;\n        long
    currentSum44 = 0;\n        long currentSum45 = 0;\n        long currentSum46 =
    0;\n        long currentSum47 = 0;\n        long currentSum48 = 0;\n        long
    currentSum49 = 0;\n        long currentSum50 = 0;\n        long currentSum51 =
    0;\n        long currentSum52 = 0;\n        long currentSum53 = 0;\n        long
    currentSum54 = 0;\n        long currentSum55 = 0;\n        long currentSum56 =
    0;\n        long currentSum57 = 0;\n        long currentSum58 = 0;\n        long
    currentSum59 = 0;\n        long currentSum60 = 0;\n        long currentSum61 =
    0;\n        long currentSum62 = 0;\n        long currentSum63 = 0;\n        long
    currentSum64 = 0;\n        long currentSum65 = 0;\n        long currentSum66 =
    0;\n        long currentSum67 = 0;\n        long currentSum68 = 0;\n        long
    currentSum69 = 0;\n        long currentSum70 = 0;\n        \n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph0iutb6m.cs(15,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    /tmp/tmph0iutb6m.cs(16,14): warning CS0219: The variable ''currentMax'' is assigned
    but its value is never used

    /tmp/tmph0iutb6m.cs(17,14): warning CS0219: The variable ''currentSum'' is assigned
    but its value is never used

    /tmp/tmph0iutb6m.cs(18,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmph0iutb6m.cs(19,14): warning CS0219: The variable ''currentSum2'' is assigned
    but its value is never used

    /tmp/tmph0iutb6m.cs(20,14): warning CS0219: The variable ''currentSum3'' is assigned
    but its value is never used

    /tmp/tmph0iutb6m.cs(21,14): warning CS0219: The variable ''currentSum4'' is assigned
    but its value is never used

    /tmp/tmph0iutb6m.cs(22,14): warning CS0219: The variable ''currentSum5'' is assigned
    but its value is never used

    /tmp/tmph0iutb6m.cs(23,14): warning CS0219: The variable ''currentSum6'' is assigned
    but its value is never used

    /tmp/tmph0iutb6m.cs(24,14): warning CS0219: The variable ''currentSum7'' is assigned
    but its value is never used

    /tmp/tmph0iutb6m.cs(25,14): warning CS0219: The variable ''currentSum8'' is assigned
    but its value is never used

    /tmp/tmph0iutb6m.cs(26,14): warning CS0219: The variable ''currentSum9'' is assigned
    but its value is never used

    /tmp/tmph0iutb6m.cs(27,14): warning CS0219: The variable ''currentSum10'' is assigned
    but its value is never used

    /tmp/tmph0iutb6m.cs(28,14): warning CS0219: The variable ''currentSum11'' is assigned
    but its value is never used

    /tmp/tmph0iutb6m.cs(29,14): warning CS0219: The variable ''currentSum12'' is assigned
    but its value is never used

    /tmp/tmph0iutb6m.cs(30,14): warning CS0219: The variable ''currentSum13'' is assigned
    but its value is never used

    /tmp/tmph0iutb6m.cs(31,14): warning CS0219: The variable ''currentSum14'' is assigned
    but its value is never used

    /tmp/tmph0iutb6m.cs(32,14): warning CS0219: The'
  timestamp: 1659795326
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.Max();\n        long currentMax = maxValue;\n
    \       long currentMaxIndex = -1;\n        long currentMaxIndexInResult = -1;\n
    \       long currentMaxIndexInResultInResult = -1;\n        long currentMaxIndexInResultInResultInResult
    = -1;\n        long currentMaxIndexInResultInResultInResultInResult = -1;\n        long
    currentMaxIndexInResultInResultInResultInResultInResult = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResult
    = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResult
    = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult
    = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult
    = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = -1;\n        long currentMaxIndex\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3a1u6kkk.cs(38,29): error CS1002: ; expected

    '
  timestamp: 1659795326
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = 0;\n        long currentNumber
    = 0;\n        long currentSum = 0;\n        long currentSumOfSquares = 0;\n        long
    currentSumOfProducts = 0;\n        foreach (long number in numbers) {\n            currentNumber
    = number;\n            currentSum = 0;\n            currentSumOfSquares = 0;\n
    \           currentSumOfProducts = 0;\n            while (currentNumber > 0) {\n
    \               currentSum = currentSum + currentNumber;\n                currentSumOfSquares
    = currentSumOfSquares + currentNumber * currentNumber;\n                currentSumOfProducts
    = currentSumOfProducts + currentNumber;\n                currentNumber = currentNumber
    - 1;\n            }\n            if (currentSum > max) {\n                max
    = currentSum;\n            }\n            if (currentSumOfSquares > currentMax)
    {\n                currentMax = currentSumOfSquares;\n            }\n            if
    (currentSumOfProducts > currentMax) {\n                currentMax = currentSumOfProducts;\n
    \           }\n            result.Add(currentMax);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f3a46d3b738e4d1db281df6d21f00008>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f3a46d3b738e4d1db281df6d21f00008>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659795327
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long cur = 0;\n        long prev = 0;\n        foreach
    (long n in numbers) {\n            prev = cur;\n            cur = n;\n            if
    (cur > max) {\n                max = cur;\n            }\n            result.Add(max);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cd49b3e7448b4c9b98924fbeecf5089c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cd49b3e7448b4c9b98924fbeecf5089c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659795327
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = 0;\n        long currentMaxIndex
    = 0;\n        long currentMaxValue = numbers[0];\n        foreach (long number
    in numbers) {\n            if (number > currentMaxValue) {\n                currentMaxValue
    = number;\n                currentMaxIndex = result.Count;\n            }\n            if
    (number > max) {\n                max = number;\n                currentMaxValue
    = number;\n                currentMaxIndex = result.Count;\n            }\n            result.Add(number);\n
    \       }\n        result.Add(max);\n        result.Add(currentMaxValue);\n        result.Add(currentMaxIndex);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00010] in <9bf907ff33be4ae184733994c0c15be8>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <9bf907ff33be4ae184733994c0c15be8>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00010] in <9bf907ff33be4ae184733994c0c15be8>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <9bf907ff33be4ae184733994c0c15be8>:0
    \n"
  stdout: ''
  timestamp: 1659795327
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long current = numbers.First();\n        long previous
    = numbers.First();\n        foreach (long number in numbers) {\n            if
    (number > max) {\n                max = number;\n            }\n            if
    (number > current) {\n                result.Add(max);\n                max =
    number;\n            }\n            previous = current;\n            current =
    number;\n        }\n        result.Add(max);\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <9522c3f9bc3f41cfba1f97194cada25a>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <9522c3f9bc3f41cfba1f97194cada25a>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <9522c3f9bc3f41cfba1f97194cada25a>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <9522c3f9bc3f41cfba1f97194cada25a>:0
    \n"
  stdout: ''
  timestamp: 1659795327
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.Max();\n        long currentMax = maxValue;\n
    \       long currentMaxIndex = 0;\n        long currentMaxIndex2 = 0;\n        long
    currentMaxIndex3 = 0;\n        long currentMaxIndex4 = 0;\n        long currentMaxIndex5
    = 0;\n        long currentMaxIndex6 = 0;\n        long currentMaxIndex7 = 0;\n
    \       long currentMaxIndex8 = 0;\n        long currentMaxIndex9 = 0;\n        long
    currentMaxIndex10 = 0;\n        long currentMaxIndex11 = 0;\n        long currentMaxIndex12
    = 0;\n        long currentMaxIndex13 = 0;\n        long currentMaxIndex14 = 0;\n
    \       long currentMaxIndex15 = 0;\n        long currentMaxIndex16 = 0;\n        long
    currentMaxIndex17 = 0;\n        long currentMaxIndex18 = 0;\n        long currentMaxIndex19
    = 0;\n        long currentMaxIndex20 = 0;\n        long currentMaxIndex21 = 0;\n
    \       long currentMaxIndex22 = 0;\n        long currentMaxIndex23 = 0;\n        long
    currentMaxIndex24 = 0;\n        long currentMaxIndex25 = 0;\n        long currentMaxIndex26
    = 0;\n        long currentMaxIndex27 = 0;\n        long currentMaxIndex28 = 0;\n
    \       long currentMaxIndex29 = 0;\n        long currentMaxIndex30 = 0;\n        long
    currentMaxIndex31 = 0;\n        long currentMaxIndex32 = 0;\n        long currentMaxIndex33
    = 0;\n        long currentMaxIndex34 = 0;\n        long currentMaxIndex35 = 0;\n
    \       long currentMaxIndex36 = 0;\n        long currentMaxIndex37 = 0;\n        long
    currentMaxIndex38 = 0;\n        long currentMaxIndex39 = 0;\n        long currentMaxIndex40
    = 0;\n        long currentMaxIndex41 = 0;\n        long currentMaxIndex42 = 0;\n
    \       long currentMaxIndex43 = 0;\n        long currentMaxIndex44 = 0;\n        long
    currentMaxIndex45 = 0;\n        long currentMaxIndex46 = 0;\n        long currentMaxIndex47
    = 0;\n        long currentMaxIndex48 = 0;\n        long currentMaxIndex49 = 0;\n
    \       long currentMaxIndex50 = 0;\n        long currentMaxIndex51 = 0;\n        long
    currentMaxIndex52 = 0;\n        long currentMaxIndex53 = 0;\n        long currentMaxIndex54
    = 0;\n        long currentMaxIndex55 = 0;\n        long currentMaxIndex56 = 0;\n
    \       long currentMaxIndex57 = 0;\n        long currentMaxIndex58 = 0;\n        long
    currentMaxIndex59 = 0;\n        long currentMaxIndex60 = 0;\n        long currentMaxIndex61
    = 0;\n        long current\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps3iup6fy.cs(78,21): error CS1002: ; expected

    '
  timestamp: 1659795325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.Max();\n        long currentMax = maxValue;\n
    \       long currentMaxIndex = 0;\n        long currentMaxIndexValue = 0;\n        long
    currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3 = 0;\n        long
    currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5 = 0;\n        long
    currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7 = 0;\n        long
    currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9 = 0;\n        long
    currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11 = 0;\n        long
    currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13 = 0;\n        long
    currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15 = 0;\n        long
    currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17 = 0;\n        long
    currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19 = 0;\n        long
    currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21 = 0;\n        long
    currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23 = 0;\n        long
    currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25 = 0;\n        long
    currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27 = 0;\n        long
    currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29 = 0;\n        long
    currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31 = 0;\n        long
    currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33 = 0;\n        long
    currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35 = 0;\n        long
    currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37 = 0;\n        long
    currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39 = 0;\n        long
    currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41 = 0;\n        long
    currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43 = 0;\n        long
    currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45 = 0;\n        long
    currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47 = 0;\n        long
    currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49 = 0;\n        long
    currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51 = 0;\n        long
    currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53 = 0;\n        long
    currentMaxIndexValue54\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoxwoiwng.cs(71,36): error CS1002: ; expected

    '
  timestamp: 1659795325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.Max();\n        long currentMax = maxValue;\n
    \       long currentMaxIndex = 0;\n        long currentMaxIndexValue = 0;\n        long
    currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3 = 0;\n        long
    currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5 = 0;\n        long
    currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7 = 0;\n        long
    currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9 = 0;\n        long
    currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11 = 0;\n        long
    currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13 = 0;\n        long
    currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15 = 0;\n        long
    currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17 = 0;\n        long
    currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19 = 0;\n        long
    currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21 = 0;\n        long
    currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23 = 0;\n        long
    currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25 = 0;\n        long
    currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27 = 0;\n        long
    currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29 = 0;\n        long
    currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31 = 0;\n        long
    currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33 = 0;\n        long
    currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35 = 0;\n        long
    currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37 = 0;\n        long
    currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39 = 0;\n        long
    currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41 = 0;\n        long
    currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43 = 0;\n        long
    currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45 = 0;\n        long
    currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47 = 0;\n        long
    currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49 = 0;\n        long
    currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51 = 0;\n        long
    currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53 = 0;\n        long
    currentMaxIndexValue54\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoxwoiwng.cs(71,36): error CS1002: ; expected

    '
  timestamp: 1659795325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = 0;\n        long currentMaxIndex
    = 0;\n        long currentMaxValue = numbers[0];\n        long currentMaxValueIndex
    = numbers.IndexOf(currentMaxValue);\n        foreach (long number in numbers)
    {\n            if (number > currentMaxValue) {\n                currentMaxValue
    = number;\n                currentMaxIndex = currentMaxValueIndex;\n            }\n
    \           if (number == currentMaxValue) {\n                currentMaxIndex++;\n
    \           }\n            if (currentMaxIndex == currentMaxValueIndex) {\n                currentMaxIndex
    = 0;\n                currentMaxValue = number;\n                result.Add(currentMaxValue);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00010] in <747611f583b743d1a60803902e412243>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <747611f583b743d1a60803902e412243>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00010] in <747611f583b743d1a60803902e412243>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <747611f583b743d1a60803902e412243>:0
    \n"
  stdout: ''
  timestamp: 1659795327
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.Max();\n        long currentMax = maxValue;\n
    \       long currentMaxIndex = 0;\n        long currentMaxIndexValue = 0;\n        long
    currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3 = 0;\n        long
    currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5 = 0;\n        long
    currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7 = 0;\n        long
    currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9 = 0;\n        long
    currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11 = 0;\n        long
    currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13 = 0;\n        long
    currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15 = 0;\n        long
    currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17 = 0;\n        long
    currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19 = 0;\n        long
    currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21 = 0;\n        long
    currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23 = 0;\n        long
    currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25 = 0;\n        long
    currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27 = 0;\n        long
    currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29 = 0;\n        long
    currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31 = 0;\n        long
    currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33 = 0;\n        long
    currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35 = 0;\n        long
    currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37 = 0;\n        long
    currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39 = 0;\n        long
    currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41 = 0;\n        long
    currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43 = 0;\n        long
    currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45 = 0;\n        long
    currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47 = 0;\n        long
    currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49 = 0;\n        long
    currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51 = 0;\n        long
    currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53 = 0;\n        long
    currentMaxIndexValue54\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoxwoiwng.cs(71,36): error CS1002: ; expected

    '
  timestamp: 1659795325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.Max();\n        long currentMax = maxValue;\n
    \       long currentMaxIndex = 0;\n        long currentMaxIndexInResult = 0;\n
    \       long currentMaxIndexInResultInResult = 0;\n        long currentMaxIndexInResultInResultInResult
    = 0;\n        long currentMaxIndexInResultInResultInResultInResult = 0;\n        long
    currentMaxIndexInResultInResultInResultInResultInResult = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResult
    = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResult
    = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResult
    = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResult
    = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResult
    = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult
    = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult
    = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult
    = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult
    = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult
    = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult
    = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult
    = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult
    = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult
    = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult
    = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult
    = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult
    = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult
    = 0;\n        long currentMaxIndexInResultInResultInResultInResultIn\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqh56u42_.cs(41,63): error CS1002: ; expected

    '
  timestamp: 1659795326
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.Max();\n        long currentMax = maxValue;\n
    \       long currentMaxIndex = -1;\n        long currentMaxIndexValue = numbers.First();\n
    \       long currentMaxIndexValueIndex = -1;\n        foreach (long number in
    numbers) {\n            if (number > currentMax) {\n                currentMax
    = number;\n                currentMaxIndex = currentMaxIndexValue;\n                currentMaxIndexValue
    = currentMaxIndexValueIndex;\n            }\n            if (number == currentMax)
    {\n                currentMaxIndexValueIndex++;\n                if (currentMaxIndexValueIndex
    == numbers.Count) {\n                    result.Add(currentMax);\n                    currentMaxIndexValueIndex
    = 0;\n                }\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <886ebacc5acc4e8fb0aeb2a200d6babf>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <886ebacc5acc4e8fb0aeb2a200d6babf>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <886ebacc5acc4e8fb0aeb2a200d6babf>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <886ebacc5acc4e8fb0aeb2a200d6babf>:0
    \n"
  stdout: ''
  timestamp: 1659795327
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = 0;\n        long currentMaxIndex
    = 0;\n        long currentMaxValue = numbers[0];\n        long currentMaxValueIndex
    = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueCount = 1;\n
    \       long currentMaxValueCountIndex = 0;\n        long currentMaxValueCountValue
    = numbers.Count;\n        long currentMaxValueCountValueIndex = numbers.IndexOf(currentMaxValueCountValue);\n
    \       long currentMaxValueCountValueCount = 1;\n        long currentMaxValueCountValueCountIndex
    = 0;\n        long currentMaxValueCountValueCountValue = numbers.Count;\n        long
    currentMaxValueCountValueCountValueIndex = numbers.IndexOf(currentMaxValueCountValueCountValue);\n
    \       long currentMaxValueCountValueCountValueCount = 1;\n        long currentMaxValueCountValueCountValueCountIndex
    = 0;\n        long currentMaxValueCountValueCountValueCountValue = numbers.Count;\n
    \       long currentMaxValueCountValueCountValueCountValueIndex = numbers.IndexOf(currentMaxValueCountValueCountValueCountValue);\n
    \       long currentMaxValueCountValueCountValueCountValueCount = 1;\n        long
    currentMaxValueCountValueCountValueCountValueIndex = 0;\n        long currentMaxValueCountValueCountValueCountValueCountValue
    = numbers.Count;\n        long currentMaxValueCountValueCountValueCountValueCountValueIndex
    = numbers.IndexOf(currentMaxValueCountValueCountValueCountValueCountValue);\n
    \       long currentMaxValueCountValueCountValueCountValueCountValueCount = 1;\n
    \       long currentMaxValueCountValueCountValueCountValueCountValueIndex = 0;\n
    \       long currentMaxValueCountValueCountValueCountValueCountValueCountValue
    = numbers.Count;\n        long currentMaxValueCountValueCountValueCountValueCountValueCountValueIndex
    = numbers.IndexOf(currentMaxValueCountValueCountValueCountValueCountValueCountValue);\n
    \       long currentMaxValueCountValueCountValueCountValueCountValueCountValueCount
    = 1;\n        long currentMaxValueCountValueCountValueCountValueCountValueCountValueIndex
    = 0;\n        long currentMaxValueCountValueCountValueCountValueCountValueCountValueCountValue
    = numbers.Count;\n        long currentMaxValueCountValueCountValueCountValueCountValueCountValueCountValueIndex
    = numbers.IndexOf(currentMaxValueCountValueCountValueCountValueCountValueCountValue);\n
    \       long currentMaxValueCountValueCountValueCountValueCountValueCountValueCountValueCount
    = 1;\n        long currentMaxValueCountValueCountValueCountValueCountValueCountValueCountValueIndex
    = 0;\n        long currentMaxValueCountValueCount\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppdjig04z.cs(46,44): error CS1002: ; expected

    '
  timestamp: 1659795326
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long current = numbers.First();\n        long previous
    = numbers.First();\n        long rollingMax = numbers.First();\n        foreach
    (long number in numbers) {\n            if (number > rollingMax) {\n                rollingMax
    = number;\n            }\n            if (number > max) {\n                max
    = number;\n            }\n            if (number == current) {\n                result.Add(number);\n
    \           }\n            previous = current;\n            current = number;\n
    \       }\n        result.Add(rollingMax);\n        result.Add(max);\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <967d7a5e02e4446a8ac8fe92e3ecf6d2>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <967d7a5e02e4446a8ac8fe92e3ecf6d2>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <967d7a5e02e4446a8ac8fe92e3ecf6d2>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <967d7a5e02e4446a8ac8fe92e3ecf6d2>:0
    \n"
  stdout: ''
  timestamp: 1659795327
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = 0;\n        long currentMaxIndex
    = 0;\n        long currentMaxValue = numbers[0];\n        foreach (long number
    in numbers) {\n            if (number > currentMaxValue) {\n                currentMaxValue
    = number;\n                currentMaxIndex = result.Count;\n            }\n            if
    (number > max) {\n                max = number;\n            }\n            if
    (number == currentMaxValue) {\n                currentMaxIndex++;\n            }\n
    \           result.Insert(currentMaxIndex, number);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9chk4fgp.cs(30,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp9chk4fgp.cs(16,14): warning CS0219: The variable ''currentMax'' is assigned
    but its value is never used

    '
  timestamp: 1659795327
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.Max();\n        long currentMax = maxValue;\n
    \       long currentMaxIndex = -1;\n        long currentMaxIndexInResult = -1;\n
    \       foreach (long number in numbers) {\n            if (number > currentMax)
    {\n                currentMax = number;\n                currentMaxIndex = result.Count;\n
    \           }\n            if (number == currentMax) {\n                currentMaxIndexInResult
    = currentMaxIndex;\n            }\n            result.Add(number);\n        }\n
    \       if (currentMaxIndexInResult == -1) {\n            result.Add(currentMax);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <32ed66841768454b9e5d2fbe4c6b9ca8>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <32ed66841768454b9e5d2fbe4c6b9ca8>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <32ed66841768454b9e5d2fbe4c6b9ca8>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <32ed66841768454b9e5d2fbe4c6b9ca8>:0
    \n"
  stdout: ''
  timestamp: 1659795327
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.Max();\n        long currentMax = maxValue;\n
    \       long currentMaxIndex = 0;\n        long currentMaxIndex2 = 0;\n        long
    currentMaxIndex3 = 0;\n        long currentMaxIndex4 = 0;\n        long currentMaxIndex5
    = 0;\n        long currentMaxIndex6 = 0;\n        long currentMaxIndex7 = 0;\n
    \       long currentMaxIndex8 = 0;\n        long currentMaxIndex9 = 0;\n        long
    currentMaxIndex10 = 0;\n        long currentMaxIndex11 = 0;\n        long currentMaxIndex12
    = 0;\n        long currentMaxIndex13 = 0;\n        long currentMaxIndex14 = 0;\n
    \       long currentMaxIndex15 = 0;\n        long currentMaxIndex16 = 0;\n        long
    currentMaxIndex17 = 0;\n        long currentMaxIndex18 = 0;\n        long currentMaxIndex19
    = 0;\n        long currentMaxIndex20 = 0;\n        long currentMaxIndex21 = 0;\n
    \       long currentMaxIndex22 = 0;\n        long currentMaxIndex23 = 0;\n        long
    currentMaxIndex24 = 0;\n        long currentMaxIndex25 = 0;\n        long currentMaxIndex26
    = 0;\n        long currentMaxIndex27 = 0;\n        long currentMaxIndex28 = 0;\n
    \       long currentMaxIndex29 = 0;\n        long currentMaxIndex30 = 0;\n        long
    currentMaxIndex31 = 0;\n        long currentMaxIndex32 = 0;\n        long currentMaxIndex33
    = 0;\n        long currentMaxIndex34 = 0;\n        long currentMaxIndex35 = 0;\n
    \       long currentMaxIndex36 = 0;\n        long currentMaxIndex37 = 0;\n        long
    currentMaxIndex38 = 0;\n        long currentMaxIndex39 = 0;\n        long currentMaxIndex40
    = 0;\n        long currentMaxIndex41 = 0;\n        long currentMaxIndex42 = 0;\n
    \       long currentMaxIndex43 = 0;\n        long currentMaxIndex44 = 0;\n        long
    currentMaxIndex45 = 0;\n        long currentMaxIndex46 = 0;\n        long currentMaxIndex47
    = 0;\n        long currentMaxIndex48 = 0;\n        long currentMaxIndex49 = 0;\n
    \       long currentMaxIndex50 = 0;\n        long currentMaxIndex51 = 0;\n        long
    currentMaxIndex52 = 0;\n        long currentMaxIndex53 = 0;\n        long currentMaxIndex54
    = 0;\n        long currentMaxIndex55 = 0;\n        long currentMaxIndex56 = 0;\n
    \       long currentMaxIndex57 = 0;\n        long currentMaxIndex58 = 0;\n        long
    currentMaxIndex59 = 0;\n        long currentMaxIndex60 = 0;\n        long currentMaxIndex61
    = 0;\n        long current\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps3iup6fy.cs(78,21): error CS1002: ; expected

    '
  timestamp: 1659795325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.Max();\n        long currentMax = maxValue;\n
    \       long currentSum = 0;\n        long currentSumOfSquares = 0;\n        long
    currentSumOfPowers = 0;\n        long currentSumOfPowersOfSquares = 0;\n        long
    currentSumOfPowersOfPowers = 0;\n        long currentSumOfPowersOfPowersOfSquares
    = 0;\n        long currentSumOfPowersOfPowersOfPowers = 0;\n        long currentSumOfPowersOfPowersOfPowersOfSquares
    = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowers = 0;\n        long
    currentSumOfPowersOfPowersOfPowersOfPowersOfSquares = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowers
    = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares
    = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers
    = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares
    = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers
    = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares
    = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers
    = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares
    = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers
    = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares
    = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers
    = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares
    = 0;\n        long currentSumOfPower\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf_ooxihl.cs(39,31): error CS1002: ; expected

    '
  timestamp: 1659795326
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = numbers.First();\n        foreach
    (long number in numbers) {\n            if (number > currentMax) {\n                currentMax
    = number;\n            }\n            if (number > max) {\n                max
    = number;\n            }\n            result.Add(number);\n        }\n        result.Add(max);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <1df8c49e16154278acfa6f0a2640f2cb>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <1df8c49e16154278acfa6f0a2640f2cb>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <1df8c49e16154278acfa6f0a2640f2cb>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <1df8c49e16154278acfa6f0a2640f2cb>:0
    \n"
  stdout: ''
  timestamp: 1659795327
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.Max();\n        long currentMaxValue = maxValue;\n
    \       long currentMaxIndex = -1;\n        long currentMaxIndexValue = numbers.Max();\n
    \       long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue
    = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n        long
    currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n
    \       long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue
    = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n        long
    currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n
    \       long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue
    = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n        long
    currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n
    \       long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue
    = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n        long
    currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n
    \       long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue
    = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n        long
    currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n
    \       long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue
    = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n        long
    currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n
    \       long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue
    = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n        long
    currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n
    \       long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue
    = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n        long
    currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n
    \       long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue
    = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n        long
    currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n
    \       long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue
    = numbers.Max();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfin3agzs.cs(19,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpfin3agzs.cs(20,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpfin3agzs.cs(21,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpfin3agzs.cs(22,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpfin3agzs.cs(23,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpfin3agzs.cs(24,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpfin3agzs.cs(25,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpfin3agzs.cs(26,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpfin3agzs.cs(27,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpfin3agzs.cs(28,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpfin3agzs.cs(29,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpfin3agzs.cs(30,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpfin3agzs.cs(31,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpfin3agzs.cs(32,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpfin3agzs.cs(33,14): error CS0128: A local variable '
  timestamp: 1659795327
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.Max();\n        long currentMax = maxValue;\n
    \       long currentSum = 0;\n        long currentCount = 0;\n        long currentSumOfSquares
    = 0;\n        foreach (long number in numbers) {\n            currentSum += number;\n
    \           currentCount++;\n            currentSumOfSquares += number * number;\n
    \           if (currentCount > 1) {\n                currentMax = Math.Max(currentMax,
    currentSum);\n                currentSum = 0;\n                currentCount =
    0;\n                currentSumOfSquares = 0;\n            }\n            if (currentCount
    == 1 && currentSumOfSquares == currentSum) {\n                result.Add(currentMax);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <3acdf657c2744a0b9a9d5e0211386fb8>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <3acdf657c2744a0b9a9d5e0211386fb8>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <3acdf657c2744a0b9a9d5e0211386fb8>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <3acdf657c2744a0b9a9d5e0211386fb8>:0
    \n"
  stdout: ''
  timestamp: 1659795327
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = 0;\n        long currentSum =
    0;\n        long currentSumOfSquares = 0;\n        long currentSumOfSquareOfMax
    = 0;\n        foreach (long number in numbers) {\n            currentSum = currentSum
    + number;\n            currentSumOfSquares = currentSumOfSquares + number * number;\n
    \           currentSumOfSquareOfMax = currentSumOfSquareOfMax + Math.Max(number,
    max);\n            max = Math.Max(number, max);\n            if (currentSumOfSquareOfMax
    >= currentSumOfSquares) {\n                result.Add(currentMax);\n                currentMax
    = 0;\n                currentSum = 0;\n                currentSumOfSquares = 0;\n
    \               currentSumOfSquareOfMax = 0;\n            }\n            currentMax
    = number;\n        }\n        if (currentSumOfSquareOfMax >= currentSumOfSquares)
    {\n            result.Add(currentMax);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eec1fc853ad748c4984545c7be26a496>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eec1fc853ad748c4984545c7be26a496>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659795327
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = 0;\n        long currentMaxIndex
    = 0;\n        long currentMaxValue = numbers[0];\n        long currentMaxValueIndex
    = -1;\n        foreach (long number in numbers) {\n            if (number > currentMaxValue)
    {\n                currentMaxValue = number;\n                currentMaxIndex
    = currentMaxValue;\n            }\n            if (number == currentMaxValue)
    {\n                currentMaxIndex++;\n            }\n            if (currentMaxIndex
    > currentMaxValueIndex) {\n                currentMaxValue = numbers[currentMaxIndex];\n
    \               currentMaxIndex = currentMaxValue;\n                currentMaxValueIndex
    = currentMaxIndex;\n            }\n            result.Add(currentMaxValue);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2fvnw2o8.cs(29,43): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp2fvnw2o8.cs(15,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    /tmp/tmp2fvnw2o8.cs(16,14): warning CS0219: The variable ''currentMax'' is assigned
    but its value is never used

    '
  timestamp: 1659795327
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long maxIndex = 0;\n        long currentMax = numbers[0];\n
    \       long currentMaxIndex = numbers[0];\n        foreach (long number in numbers)
    {\n            if (number > currentMax) {\n                currentMax = number;\n
    \               currentMaxIndex = currentMaxIndex;\n            }\n            if
    (number == currentMax) {\n                currentMaxIndex++;\n            }\n
    \           if (currentMaxIndex == numbers.Count) {\n                result.Add(currentMax);\n
    \               currentMax = number;\n                currentMaxIndex = currentMaxIndex;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x0000d] in <011dae8f5a8c42e48a0ea6577d758934>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <011dae8f5a8c42e48a0ea6577d758934>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x0000d] in <011dae8f5a8c42e48a0ea6577d758934>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <011dae8f5a8c42e48a0ea6577d758934>:0
    \n"
  stdout: ''
  timestamp: 1659795327
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = 0;\n        long currentNumber
    = 0;\n        long currentSum = 0;\n        long currentSumOfSquares = 0;\n        long
    currentSumOfSquareRoot = 0;\n        long currentSumOfSquareRootOfSquares = 0;\n
    \       long currentSumOfSquareRootOfSquareRoot = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquares
    = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRoot = 0;\n        long
    currentSumOfSquareRootOfSquareRootOfSquareRootOfSquares = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares
    = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares
    = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares
    = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares
    = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares
    = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares
    = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares
    = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares
    = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares
    = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares
    = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares
    = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares
    = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares
    = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares
    = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares
    = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquare\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi3lvgo86.cs(41,104): error CS1002: ; expected

    '
  timestamp: 1659795326
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.Max();\n        long currentMaxValue = maxValue;\n
    \       long currentMaxIndex = 0;\n        long currentMaxIndexValue = 0;\n        long
    currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3 = 0;\n        long
    currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5 = 0;\n        long
    currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7 = 0;\n        long
    currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9 = 0;\n        long
    currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11 = 0;\n        long
    currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13 = 0;\n        long
    currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15 = 0;\n        long
    currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17 = 0;\n        long
    currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19 = 0;\n        long
    currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21 = 0;\n        long
    currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23 = 0;\n        long
    currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25 = 0;\n        long
    currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27 = 0;\n        long
    currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29 = 0;\n        long
    currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31 = 0;\n        long
    currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33 = 0;\n        long
    currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35 = 0;\n        long
    currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37 = 0;\n        long
    currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39 = 0;\n        long
    currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41 = 0;\n        long
    currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43 = 0;\n        long
    currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45 = 0;\n        long
    currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47 = 0;\n        long
    currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49 = 0;\n        long
    currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51 = 0;\n        long
    currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53 = 0;\n        long
    currentMaxIndexValue54\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6d75ykon.cs(71,36): error CS1002: ; expected

    '
  timestamp: 1659795326
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = 0;\n        long currentNumber
    = 0;\n        foreach (long number in numbers) {\n            currentNumber =
    number;\n            currentMax = number;\n            while (currentNumber >
    0) {\n                currentMax = Math.Max(currentMax, currentNumber);\n                currentNumber--;\n
    \           }\n            result.Add(currentMax);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <375d824a1ee34e018ff91a4e00388f6d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <375d824a1ee34e018ff91a4e00388f6d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659795327
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.Max();\n        long currentMax = maxValue;\n
    \       long currentSum = 0;\n        long currentSumOfSquares = 0;\n        long
    currentSumOfSquareOfDifferences = 0;\n        long currentSumOfDifferences = 0;\n
    \       long currentSumOfDifferenceSquares = 0;\n        long currentSumOfDifferenceSquareOfDifferences
    = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquares = 0;\n        long
    currentSumOfDifferenceSquareOfDifferenceSquareOfDifferences = 0;\n        long
    currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares = 0;\n        long
    currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences
    = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares
    = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences
    = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences
    = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares
    = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences
    = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences
    = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences
    = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences
    = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares
    = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences
    = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences
    = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences
    = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences
    = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares
    = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences
    = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifference\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0rpy2iib.cs(42,126): error CS1002: ; expected

    '
  timestamp: 1659795327
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.Max();\n        long currentMax = maxValue;\n
    \       long currentMaxIndex = -1;\n        long currentMaxIndex = numbers.Count;\n
    \       long currentMaxValue = numbers.Max();\n        long currentMaxValueIndex
    = -1;\n        long currentMaxValueIndex = numbers.Count;\n        long currentMaxValueValue
    = numbers.Max();\n        long currentMaxValueValueIndex = -1;\n        long currentMaxValueValueIndex
    = numbers.Count;\n        long currentMaxValueValueValue = numbers.Max();\n        long
    currentMaxValueValueValueIndex = -1;\n        long currentMaxValueValueValueIndex
    = numbers.Count;\n        long currentMaxValueValueValueValue = numbers.Max();\n
    \       long currentMaxValueValueValueIndex = -1;\n        long currentMaxValueValueValueIndex
    = numbers.Count;\n        long currentMaxValueValueValueValue = numbers.Max();\n
    \       long currentMaxValueValueValueIndex = -1;\n        long currentMaxValueValueValueIndex
    = numbers.Count;\n        long currentMaxValueValueValueValue = numbers.Max();\n
    \       long currentMaxValueValueValueIndex = -1;\n        long currentMaxValueValueValueIndex
    = numbers.Count;\n        long currentMaxValueValueValueValue = numbers.Max();\n
    \       long currentMaxValueValueValueIndex = -1;\n        long currentMaxValueValueValueIndex
    = numbers.Count;\n        long currentMaxValueValueValueValue = numbers.Max();\n
    \       long currentMaxValueValueValueIndex = -1;\n        long currentMaxValueValueValueIndex
    = numbers.Count;\n        long currentMaxValueValueValueValue = numbers.Max();\n
    \       long currentMaxValueValueValueIndex = -1;\n        long currentMaxValueValueValueIndex
    = numbers.Count;\n        long currentMaxValueValueValueValue = numbers.Max();\n
    \       long currentMaxValueValueValueIndex = -1;\n        long currentMaxValueValueValueIndex
    = numbers.Count;\n        long currentMaxValueValueValueValue = numbers.Max();\n
    \       long currentMaxValueValueValueIndex = -1;\n        long currentMaxValueValueValueIndex
    = numbers.Count;\n        long currentMaxValueValueValueValue = numbers.Max();\n
    \       long currentMaxValueValueValueIndex = -1;\n        long currentMaxValueValueValueIndex
    = numbers.Count;\n        long currentMaxValueValueValueValue = numbers.Max();\n
    \       long currentMaxValueValueValueIndex = -1;\n        long currentMaxValueValueValueIndex
    = numbers.Count;\n        long currentMaxValueValueValueValue = numbers.Max();\n
    \       long currentMaxValueValueValueIndex = -1;\n        long currentMaxValueValueValueIndex
    = numbers.Count;\n        long currentMaxValueValue\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd36jlfs0.cs(61,34): error CS1002: ; expected

    '
  timestamp: 1659795327
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = 0;\n        long currentNumber
    = 0;\n        long currentSum = 0;\n        long currentSumOfSquares = 0;\n        long
    currentSumOfSquareRoot = 0;\n        foreach (long number in numbers) {\n            currentNumber
    = number;\n            currentSum = 0;\n            currentSumOfSquares = 0;\n
    \           currentSumOfSquareRoot = 0;\n            while (currentNumber > 0)
    {\n                currentSum += currentNumber;\n                currentSumOfSquares
    += currentNumber * currentNumber;\n                currentSumOfSquareRoot += Math.Sqrt(currentSumOfSquares);\n
    \               currentNumber--;\n            }\n            currentMax = currentSum;\n
    \           if (currentSumOfSquareRoot > max) {\n                max = currentSumOfSquareRoot;\n
    \           }\n            result.Add(currentMax);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9uhpor3g.cs(29,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659795327
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long current = 0;\n        long sum = 0;\n        foreach
    (var number in numbers) {\n            max = Math.Max(max, number);\n            current
    = sum + number;\n            sum = current;\n            result.Add(max);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <22173e78a9924ed1a14359794448d85d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <22173e78a9924ed1a14359794448d85d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659795327
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.Max();\n        long currentMax = maxValue;\n
    \       long currentMaxIndex = -1;\n        long currentMaxIndexInResult = -1;\n
    \       long currentMaxIndexInResultInResult = -1;\n        long currentMaxIndexInResultInResultInResult
    = -1;\n        long currentMaxIndexInResultInResultInResultInResult = -1;\n        long
    currentMaxIndexInResultInResultInResultInResultInResult = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResult
    = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResult
    = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult
    = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult
    = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResult\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps_buyxm8.cs(38,77): error CS1002: ; expected

    '
  timestamp: 1659795325
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = 0;\n        long currentSum =
    0;\n        long sum = 0;\n        foreach (long n in numbers) {\n            currentSum
    += n;\n            if (currentSum > max) {\n                max = currentSum;\n
    \               currentMax = n;\n            }\n            sum += n;\n            if
    (sum > currentMax) {\n                result.Add(currentMax);\n                currentSum
    = sum - currentMax;\n                currentMax = n;\n            }\n        }\n
    \       if (currentSum > max) {\n            result.Add(currentMax);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6eb6929b0bce4191977ef0e97c4be45d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6eb6929b0bce4191977ef0e97c4be45d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659795327
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = 0;\n        long current = 0;\n
    \       long sum = 0;\n        foreach (long number in numbers) {\n            currentMax
    = current;\n            current = number;\n            sum += current;\n            if
    (sum > max) {\n                max = sum;\n            }\n            if (sum
    == currentMax) {\n                result.Add(current);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b67719df1775487aace3baa20a3a131d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b67719df1775487aace3baa20a3a131d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659795327
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.Max();\n        long currentMaxValue = maxValue;\n
    \       long currentMaxIndex = -1;\n        long currentMaxIndexValue = numbers.Max();\n
    \       long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue
    = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n        long
    currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n
    \       long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue
    = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n        long
    currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n
    \       long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue
    = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n        long
    currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n
    \       long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue
    = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n        long
    currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n
    \       long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue
    = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n        long
    currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n
    \       long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue
    = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n        long
    currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n
    \       long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue
    = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n        long
    currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n
    \       long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue
    = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n        long
    currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n
    \       long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue
    = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n        long
    currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n
    \       long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue
    = numbers.Max();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfin3agzs.cs(19,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpfin3agzs.cs(20,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpfin3agzs.cs(21,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpfin3agzs.cs(22,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpfin3agzs.cs(23,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpfin3agzs.cs(24,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpfin3agzs.cs(25,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpfin3agzs.cs(26,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpfin3agzs.cs(27,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpfin3agzs.cs(28,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpfin3agzs.cs(29,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpfin3agzs.cs(30,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpfin3agzs.cs(31,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpfin3agzs.cs(32,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpfin3agzs.cs(33,14): error CS0128: A local variable '
  timestamp: 1659795327
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.Max();\n        long currentMax = maxValue;\n
    \       long currentMaxIndex = 0;\n        long currentMaxIndexInResult = 0;\n
    \       long currentMaxIndexInResultInResult = 0;\n        long currentMaxIndexInResultInResultInResult
    = 0;\n        long currentMaxIndexInResultInResultInResultInResult = 0;\n        long
    currentMaxIndexInResultInResultInResultInResultInResult = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResult
    = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResult
    = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult
    = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult
    = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult
    = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = 0;\n        long currentMaxIndex\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3gxr2pct.cs(40,29): error CS1002: ; expected

    '
  timestamp: 1659795327
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = numbers.First();\n        long
    currentMaxIndex = -1;\n        long currentMaxValue = numbers.First();\n        long
    currentMaxValueIndex = -1;\n        foreach (long number in numbers) {\n            if
    (number > currentMax) {\n                currentMax = number;\n                currentMaxIndex
    = currentMaxValueIndex;\n                currentMaxValue = currentMaxValue;\n
    \               currentMaxValueIndex = currentMaxIndex;\n            }\n            if
    (number == currentMax) {\n                currentMaxValueIndex++;\n                if
    (currentMaxValueIndex == numbers.Count) {\n                    result.Add(currentMax);\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <5651fffd27a74f6e888ed0a94b0c1db0>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5651fffd27a74f6e888ed0a94b0c1db0>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <5651fffd27a74f6e888ed0a94b0c1db0>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5651fffd27a74f6e888ed0a94b0c1db0>:0
    \n"
  stdout: ''
  timestamp: 1659795327
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.First();\n        long currentMax = maxValue;\n
    \       long currentMaxIndex = 0;\n        long currentMaxIndex2 = numbers.Count
    - 1;\n        long currentMaxIndex3 = numbers.Count - 2;\n        long currentMaxIndex4
    = numbers.Count - 3;\n        long currentMaxIndex5 = numbers.Count - 4;\n        long
    currentMaxIndex6 = numbers.Count - 5;\n        long currentMaxIndex7 = numbers.Count
    - 6;\n        long currentMaxIndex8 = numbers.Count - 7;\n        long currentMaxIndex9
    = numbers.Count - 8;\n        long currentMaxIndex10 = numbers.Count - 9;\n        long
    currentMaxIndex11 = numbers.Count - 10;\n        long currentMaxIndex12 = numbers.Count
    - 11;\n        long currentMaxIndex13 = numbers.Count - 12;\n        long currentMaxIndex14
    = numbers.Count - 13;\n        long currentMaxIndex15 = numbers.Count - 14;\n
    \       long currentMaxIndex16 = numbers.Count - 15;\n        long currentMaxIndex17
    = numbers.Count - 16;\n        long currentMaxIndex18 = numbers.Count - 17;\n
    \       long currentMaxIndex19 = numbers.Count - 18;\n        long currentMaxIndex20
    = numbers.Count - 19;\n        long currentMaxIndex21 = numbers.Count - 20;\n
    \       long currentMaxIndex22 = numbers.Count - 21;\n        long currentMaxIndex23
    = numbers.Count - 22;\n        long currentMaxIndex24 = numbers.Count - 23;\n
    \       long currentMaxIndex25 = numbers.Count - 24;\n        long currentMaxIndex26
    = numbers.Count - 25;\n        long currentMaxIndex27 = numbers.Count - 26;\n
    \       long currentMaxIndex28 = numbers.Count - 27;\n        long currentMaxIndex29
    = numbers.Count - 28;\n        long currentMaxIndex30 = numbers.Count - 29;\n
    \       long currentMaxIndex31 = numbers.Count - 30;\n        long currentMaxIndex32
    = numbers.Count - 31;\n        long currentMaxIndex33 = numbers.Count - 32;\n
    \       long currentMaxIndex34 = numbers.Count - 33;\n        long currentMaxIndex35
    = numbers.Count - 34;\n        long currentMaxIndex36 = numbers.Count - 35;\n
    \       long currentMaxIndex37 = numbers.Count - 36;\n        long currentMaxIndex38
    = numbers.Count - 37;\n        long currentMaxIndex39 = numbers.Count - 38;\n
    \       long currentMaxIndex40 = numbers.Count - 39;\n        long \n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp363044yc.cs(57,13): error CS1001: Identifier expected

    /tmp/tmp363044yc.cs(57,13): error CS1002: ; expected

    '
  timestamp: 1659795327
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = 0;\n        long currentSum =
    0;\n        long currentCount = 0;\n        foreach (long number in numbers) {\n
    \           currentSum += number;\n            currentCount += 1;\n            if
    (currentCount > max) {\n                max = currentCount;\n                currentMax
    = currentSum;\n            }\n        }\n        result.Add(currentMax);\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a94ff321db954aacb5bd6be35df6720c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a94ff321db954aacb5bd6be35df6720c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659795328
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.Max();\n        long currentMax = maxValue;\n
    \       long currentMaxIndex = 0;\n        long currentMaxIndexValue = 0;\n        long
    currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3 = 0;\n        long
    currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5 = 0;\n        long
    currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7 = 0;\n        long
    currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9 = 0;\n        long
    currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11 = 0;\n        long
    currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13 = 0;\n        long
    currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15 = 0;\n        long
    currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17 = 0;\n        long
    currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19 = 0;\n        long
    currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21 = 0;\n        long
    currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23 = 0;\n        long
    currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25 = 0;\n        long
    currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27 = 0;\n        long
    currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29 = 0;\n        long
    currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31 = 0;\n        long
    currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33 = 0;\n        long
    currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35 = 0;\n        long
    currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37 = 0;\n        long
    currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39 = 0;\n        long
    currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41 = 0;\n        long
    currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43 = 0;\n        long
    currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45 = 0;\n        long
    currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47 = 0;\n        long
    currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49 = 0;\n        long
    currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51 = 0;\n        long
    currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53 = 0;\n        long
    currentMaxIndexValue54\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoxwoiwng.cs(71,36): error CS1002: ; expected

    '
  timestamp: 1659795325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = numbers.Max();\n        long current = max;\n        long previous
    = max;\n        foreach (long number in numbers) {\n            if (number > max)
    {\n                max = number;\n            }\n            current = Math.Max(current,
    number);\n            if (current == previous) {\n                result.Add(current);\n
    \           }\n            previous = current;\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <f3f914f9b4f44cc286591e7a722def33>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <f3f914f9b4f44cc286591e7a722def33>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <f3f914f9b4f44cc286591e7a722def33>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <f3f914f9b4f44cc286591e7a722def33>:0
    \n"
  stdout: ''
  timestamp: 1659795328
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.Max();\n        long currentMaxValue = maxValue;\n
    \       long currentMaxIndex = 0;\n        long currentMaxIndexValue = 0;\n        long
    currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3 = 0;\n        long
    currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5 = 0;\n        long
    currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7 = 0;\n        long
    currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9 = 0;\n        long
    currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11 = 0;\n        long
    currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13 = 0;\n        long
    currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15 = 0;\n        long
    currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17 = 0;\n        long
    currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19 = 0;\n        long
    currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21 = 0;\n        long
    currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23 = 0;\n        long
    currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25 = 0;\n        long
    currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27 = 0;\n        long
    currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29 = 0;\n        long
    currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31 = 0;\n        long
    currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33 = 0;\n        long
    currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35 = 0;\n        long
    currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37 = 0;\n        long
    currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39 = 0;\n        long
    currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41 = 0;\n        long
    currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43 = 0;\n        long
    currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45 = 0;\n        long
    currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47 = 0;\n        long
    currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49 = 0;\n        long
    currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51 = 0;\n        long
    currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53 = 0;\n        long
    currentMaxIndexValue54\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6d75ykon.cs(71,36): error CS1002: ; expected

    '
  timestamp: 1659795326
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = numbers.Max();\n        long current = max;\n        long previous
    = max;\n        foreach (long number in numbers) {\n            if (number > current)
    {\n                result.Add(current);\n                current = number;\n            }\n
    \           previous = current;\n            current = Math.Max(current, number);\n
    \       }\n        result.Add(current);\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <2e38476dc5894e4ea3a10db3af60e0e3>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <2e38476dc5894e4ea3a10db3af60e0e3>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <2e38476dc5894e4ea3a10db3af60e0e3>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <2e38476dc5894e4ea3a10db3af60e0e3>:0
    \n"
  stdout: ''
  timestamp: 1659795327
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = 0;\n        long currentMaxIndex
    = 0;\n        long currentMaxValue = numbers[0];\n        long currentMaxValueIndex
    = -1;\n        foreach (long number in numbers) {\n            if (number > currentMaxValue)
    {\n                currentMaxValue = number;\n                currentMaxIndex
    = currentMaxValue - 1;\n            }\n            if (number == currentMaxValue)
    {\n                currentMaxIndex++;\n            }\n            if (currentMaxIndex
    > currentMaxValueIndex) {\n                currentMaxValue = numbers[currentMaxIndex];\n
    \               currentMaxIndex = currentMaxValue - 1;\n            }\n            result.Add(currentMaxValue);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7u4s1j0f.cs(29,43): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp7u4s1j0f.cs(15,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    /tmp/tmp7u4s1j0f.cs(16,14): warning CS0219: The variable ''currentMax'' is assigned
    but its value is never used

    '
  timestamp: 1659795327
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = 0;\n        long currentSum =
    0;\n        long currentSumOfSquares = 0;\n        long currentSumOfSquareRoots
    = 0;\n        foreach (long number in numbers) {\n            currentSum = currentSum
    + number;\n            currentSumOfSquares = currentSumOfSquares + number * number;\n
    \           currentSumOfSquareRoots = currentSumOfSquareRoots + Math.Sqrt(number);\n
    \           if (currentSumOfSquares > currentSumOfSquares) {\n                currentMax
    = currentSum;\n            }\n            if (currentSumOfSquareRoots > currentSumOfSquares)
    {\n                currentMax = currentSumOfSquareRoots;\n            }\n            if
    (currentSumOfSquares > currentSum) {\n                currentMax = currentSum;\n
    \           }\n            if (currentSumOfSquareRoots > currentSum) {\n                currentMax
    = currentSumOfSquareRoots;\n            }\n            result.Add(currentMax);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu6ycx5kn.cs(23,39): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpu6ycx5kn.cs(24,17): warning CS1718: Comparison made to same variable;
    did you mean to compare something else?

    /tmp/tmpu6ycx5kn.cs(15,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    '
  timestamp: 1659795327
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        var result = new List<long>();\n        var
    rollingMax = new List<long>();\n        long max = 0;\n        long currentMax
    = 0;\n        foreach (var number in numbers) {\n            rollingMax.Add(number);\n
    \           max = Math.Max(max, number);\n            currentMax = Math.Max(currentMax,
    number);\n        }\n        result.Add(max);\n        rollingMax.Add(max);\n
    \       rollingMax.Add(currentMax);\n        rollingMax.Add(max);\n        rollingMax.Add(max);\n
    \       rollingMax.Add(max);\n        rollingMax.Add(max);\n        rollingMax.Add(max);\n
    \       rollingMax.Add(max);\n        rollingMax.Add(max);\n        rollingMax.Add(max);\n
    \       rollingMax.Add(max);\n        rollingMax.Add(max);\n        rollingMax.Add(max);\n
    \       rollingMax.Add(max);\n        rollingMax.Add(max);\n        rollingMax.Add(max);\n
    \       rollingMax.Add(max);\n        rollingMax.Add(max);\n        rollingMax.Add(max);\n
    \       rollingMax.Add(max);\n        rollingMax.Add(max);\n        rollingMax.Add(max);\n
    \       rollingMax.Add(max);\n        rollingMax.Add(max);\n        rollingMax.Add(max);\n
    \       rollingMax.Add(max);\n        rollingMax.Add(max);\n        rollingMax.Add(max);\n
    \       rollingMax.Add(max);\n        rollingMax.Add(max);\n        rollingMax.Add(max);\n
    \       rollingMax.Add(max);\n        rollingMax.Add(max);\n        rollingMax.Add(max);\n
    \       rollingMax.Add(max);\n        rollingMax.Add(max);\n        rollingMax.Add(max);\n
    \       rollingMax.Add(max);\n        rollingMax.Add(max);\n        rollingMax.Add(max);\n
    \       rollingMax.Add(max);\n        rollingMax.Add(max);\n        rollingMax.Add(max);\n
    \       rollingMax.Add(max);\n        rollingMax.Add(max);\n        rollingMax.Add(max);\n
    \       rollingMax.Add(max);\n        rollingMax.Add(max);\n        rollingMax.Add(max\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpij4v8ekm.cs(72,27): error CS1026: ) expected

    /tmp/tmpij4v8ekm.cs(72,27): error CS1002: ; expected

    '
  timestamp: 1659795327
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = numbers.First();\n        long
    currentMaxIndex = -1;\n        foreach (long number in numbers) {\n            if
    (number > currentMax) {\n                currentMax = number;\n                currentMaxIndex
    = result.Count;\n            }\n            else if (number == currentMax) {\n
    \               currentMaxIndex++;\n            }\n            result.Add(number);\n
    \           if (currentMaxIndex == numbers.Count - 1) {\n                result.Add(currentMax);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <cbed7cc99fdb4cecad2c019cbeda1e68>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <cbed7cc99fdb4cecad2c019cbeda1e68>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <cbed7cc99fdb4cecad2c019cbeda1e68>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <cbed7cc99fdb4cecad2c019cbeda1e68>:0
    \n"
  stdout: ''
  timestamp: 1659795328
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = numbers.First();\n        long
    currentMaxIndex = -1;\n        foreach (long number in numbers) {\n            if
    (number > currentMax) {\n                currentMax = number;\n                currentMaxIndex
    = result.Count;\n            }\n            if (number == currentMax) {\n                result.Add(number);\n
    \           }\n        }\n        if (currentMaxIndex < result.Count) {\n            result.RemoveAt(currentMaxIndex);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp04owdhlm.cs(28,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp04owdhlm.cs(15,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    '
  timestamp: 1659795327
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = 0;\n        long currentNumber
    = 0;\n        foreach (long number in numbers) {\n            currentNumber =
    number;\n            currentMax = number;\n            while (currentNumber !=
    0) {\n                currentMax = Math.Max(currentMax, currentNumber);\n                currentNumber
    = currentNumber / 2;\n            }\n            result.Add(currentMax);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <682cf7dc650848e2bf70e41aa303df3d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <682cf7dc650848e2bf70e41aa303df3d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659795328
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = 0;\n        long currentSum =
    0;\n        long currentSumOfSquares = 0;\n        foreach (long number in numbers)
    {\n            currentSum += number;\n            currentSumOfSquares += number
    * number;\n            if (currentSum > max) {\n                max = currentSum;\n
    \           }\n            if (currentSumOfSquares > currentMax) {\n                currentMax
    = currentSumOfSquares;\n            }\n            result.Add(number);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f9497c7cc99642078feab5adf3b0d968>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f9497c7cc99642078feab5adf3b0d968>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659795328
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.Max();\n        long currentMax = maxValue;\n
    \       long currentMaxIndex = 0;\n        long currentMaxIndex = numbers.Count;\n
    \       long currentMaxValue = numbers.Max();\n        long currentMaxValue =
    numbers.Max();\n        long currentMaxValue = numbers.Max();\n        long currentMaxValue
    = numbers.Max();\n        long currentMaxValue = numbers.Max();\n        long
    currentMaxValue = numbers.Max();\n        long currentMaxValue = numbers.Max();\n
    \       long currentMaxValue = numbers.Max();\n        long currentMaxValue =
    numbers.Max();\n        long currentMaxValue = numbers.Max();\n        long currentMaxValue
    = numbers.Max();\n        long currentMaxValue = numbers.Max();\n        long
    currentMaxValue = numbers.Max();\n        long currentMaxValue = numbers.Max();\n
    \       long currentMaxValue = numbers.Max();\n        long currentMaxValue =
    numbers.Max();\n        long currentMaxValue = numbers.Max();\n        long currentMaxValue
    = numbers.Max();\n        long currentMaxValue = numbers.Max();\n        long
    currentMaxValue = numbers.Max();\n        long currentMaxValue = numbers.Max();\n
    \       long currentMaxValue = numbers.Max();\n        long currentMaxValue =
    numbers.Max();\n        long currentMaxValue = numbers.Max();\n        long currentMaxValue
    = numbers.Max();\n        long currentMaxValue = numbers.Max();\n        long
    currentMaxValue = numbers.Max();\n        long currentMaxValue = numbers.Max();\n
    \       long currentMaxValue = numbers.Max();\n        long currentMaxValue =
    numbers.Max();\n        long currentMaxValue = numbers.Max();\n        long currentMaxValue
    = numbers.Max();\n        long currentMaxValue = numbers.Max();\n        long
    currentMaxValue = numbers.Max();\n        long currentMaxValue = numbers.Max();\n
    \       long currentMaxValue = numbers.Max();\n        long currentMaxValue =
    numbers.Max();\n        long currentMaxValue = numbers.Max();\n        long currentMaxValue
    = numbers.Max();\n        long currentMaxValue = numbers.Max();\n        long
    currentMaxValue = numbers.Max();\n        long currentMaxValue = numbers.Max();\n
    \       long currentMaxValue = numbers.Max();\n        long currentMaxValue =
    numbers.Max();\n        long currentMaxValue = numbers.Max();\n        long currentMaxValue
    = numbers.Max();\n        long currentMaxValue = numbers.Max();\n        long
    currentMaxValue = numbers.Max();\n        long currentMaxValue = numbers.Max();\n
    \       long currentMaxValue = numbers.Max();\n        long currentMaxValue =
    numbers.Max();\n        long currentMaxValue = numbers.Max();\n        long \n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1aj09o5u.cs(71,13): error CS1001: Identifier expected

    /tmp/tmp1aj09o5u.cs(71,13): error CS1002: ; expected

    '
  timestamp: 1659795327
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.Max();\n        long currentMax = maxValue;\n
    \       long currentMaxIndex = 0;\n        long currentMaxIndexValue = 0;\n        long
    currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3 = 0;\n        long
    currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5 = 0;\n        long
    currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7 = 0;\n        long
    currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9 = 0;\n        long
    currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11 = 0;\n        long
    currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13 = 0;\n        long
    currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15 = 0;\n        long
    currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17 = 0;\n        long
    currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19 = 0;\n        long
    currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21 = 0;\n        long
    currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23 = 0;\n        long
    currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25 = 0;\n        long
    currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27 = 0;\n        long
    currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29 = 0;\n        long
    currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31 = 0;\n        long
    currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33 = 0;\n        long
    currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35 = 0;\n        long
    currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37 = 0;\n        long
    currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39 = 0;\n        long
    currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41 = 0;\n        long
    currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43 = 0;\n        long
    currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45 = 0;\n        long
    currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47 = 0;\n        long
    currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49 = 0;\n        long
    currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51 = 0;\n        long
    currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53 = 0;\n        long
    currentMaxIndexValue54\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoxwoiwng.cs(71,36): error CS1002: ; expected

    '
  timestamp: 1659795325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = numbers.First();\n        foreach
    (long number in numbers) {\n            if (number > currentMax) {\n                currentMax
    = number;\n            }\n            if (number > max) {\n                max
    = number;\n            }\n            result.Add(number);\n        }\n        result.Add(max);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <1df8c49e16154278acfa6f0a2640f2cb>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <1df8c49e16154278acfa6f0a2640f2cb>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <1df8c49e16154278acfa6f0a2640f2cb>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <1df8c49e16154278acfa6f0a2640f2cb>:0
    \n"
  stdout: ''
  timestamp: 1659795327
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = numbers.First();\n        long
    currentMaxIndex = -1;\n        foreach (long number in numbers) {\n            if
    (number > currentMax) {\n                currentMax = number;\n                currentMaxIndex
    = result.Count;\n            }\n            if (number == currentMax) {\n                result.Add(number);\n
    \           }\n        }\n        if (currentMaxIndex != result.Count) {\n            result.Add(currentMax);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <755dff730ff047ccafdb1fbaa73bfaed>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <755dff730ff047ccafdb1fbaa73bfaed>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <755dff730ff047ccafdb1fbaa73bfaed>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <755dff730ff047ccafdb1fbaa73bfaed>:0
    \n"
  stdout: ''
  timestamp: 1659795326
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = 0;\n        long currentSum =
    0;\n        long currentSumOfSquares = 0;\n        foreach (long number in numbers)
    {\n            currentSum = currentSum + number;\n            currentSumOfSquares
    = currentSumOfSquares + number * number;\n            if (currentSum > max) {\n
    \               max = currentSum;\n                currentMax = currentSum;\n
    \           }\n            else if (currentSum == max) {\n                currentMax
    = currentMax == 0 ? number : Math.Max(currentMax, number);\n            }\n            else
    if (currentSumOfSquares > max * max) {\n                max = currentSum;\n                currentMax
    = currentSum;\n            }\n            else if (currentSumOfSquares == max
    * max) {\n                currentMax = currentMax == 0 ? number : Math.Max(currentMax,
    number);\n            }\n        }\n        result.Add(currentMax);\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a49703039b344f23a04583f6dc685bce>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a49703039b344f23a04583f6dc685bce>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659795328
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = 0;\n        long currentNumber
    = 0;\n        long currentSum = 0;\n        long currentSumOfSquares = 0;\n        long
    currentSumOfSquareOfNumbers = 0;\n        foreach (long number in numbers) {\n
    \           currentNumber = number;\n            currentSum = 0;\n            currentSumOfSquares
    = 0;\n            currentSumOfSquareOfNumbers = 0;\n            while (currentNumber
    != 0) {\n                currentSum += currentNumber;\n                currentSumOfSquares
    += currentNumber * currentNumber;\n                currentSumOfSquareOfNumbers
    += currentNumber;\n                currentNumber /= 10;\n            }\n            currentMax
    = currentSum;\n            if (currentMax == currentSum) {\n                currentMax
    = currentSumOfSquareOfNumbers;\n            }\n            if (currentMax > max)
    {\n                max = currentMax;\n            }\n            result.Add(currentMax);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b933d85518084a20888f7a6eba3eeff0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b933d85518084a20888f7a6eba3eeff0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659795328
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.First();\n        long currentMax = maxValue;\n
    \       long currentMaxIndex = -1;\n        long currentMaxIndex2 = -1;\n        foreach
    (long number in numbers) {\n            if (number > currentMax) {\n                currentMax
    = number;\n                currentMaxIndex = currentMaxIndex2;\n            }\n
    \           else if (number == currentMax) {\n                currentMaxIndex++;\n
    \           }\n            else {\n                result.Add(currentMax);\n                currentMax
    = number;\n                currentMaxIndex = currentMaxIndex2;\n            }\n
    \           currentMaxIndex2 = currentMaxIndex;\n        }\n        result.Add(currentMax);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <6b22d22cfed949778b98090e9517036d>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <6b22d22cfed949778b98090e9517036d>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <6b22d22cfed949778b98090e9517036d>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <6b22d22cfed949778b98090e9517036d>:0
    \n"
  stdout: ''
  timestamp: 1659795328
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.Max();\n        long currentMax = maxValue;\n
    \       long currentSum = 0;\n        long currentSumOfSquares = 0;\n        long
    currentSumOfSquareOfDifferences = 0;\n        long currentSumOfDifferences = 0;\n
    \       long currentSumOfDifferenceSquares = 0;\n        long currentSumOfDifferenceSquareOfDifferences
    = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquares = 0;\n        long
    currentSumOfDifferenceSquareOfDifferenceSquareOfDifferences = 0;\n        long
    currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares = 0;\n        long
    currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences
    = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares
    = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences
    = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences
    = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares
    = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences
    = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences
    = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences
    = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences
    = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares
    = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences
    = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences
    = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences
    = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences
    = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares
    = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares
    = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOf\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpytc_81p5.cs(42,134): error CS1002: ; expected

    '
  timestamp: 1659795327
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.Max();\n        long currentMax = maxValue;\n
    \       long currentMaxIndex = -1;\n        long currentMaxIndexValue = numbers.Count;\n
    \       long currentMaxIndexValueSum = 0;\n        long currentMaxIndexValueSum2
    = 0;\n        long currentMaxIndexValueSum3 = 0;\n        long currentMaxIndexValueSum4
    = 0;\n        long currentMaxIndexValueSum5 = 0;\n        long currentMaxIndexValueSum6
    = 0;\n        long currentMaxIndexValueSum7 = 0;\n        long currentMaxIndexValueSum8
    = 0;\n        long currentMaxIndexValueSum9 = 0;\n        long currentMaxIndexValueSum10
    = 0;\n        long currentMaxIndexValueSum11 = 0;\n        long currentMaxIndexValueSum12
    = 0;\n        long currentMaxIndexValueSum13 = 0;\n        long currentMaxIndexValueSum14
    = 0;\n        long currentMaxIndexValueSum15 = 0;\n        long currentMaxIndexValueSum16
    = 0;\n        long currentMaxIndexValueSum17 = 0;\n        long currentMaxIndexValueSum18
    = 0;\n        long currentMaxIndexValueSum19 = 0;\n        long currentMaxIndexValueSum20
    = 0;\n        long currentMaxIndexValueSum21 = 0;\n        long currentMaxIndexValueSum22
    = 0;\n        long currentMaxIndexValueSum23 = 0;\n        long currentMaxIndexValueSum24
    = 0;\n        long currentMaxIndexValueSum25 = 0;\n        long currentMaxIndexValueSum26
    = 0;\n        long currentMaxIndexValueSum27 = 0;\n        long currentMaxIndexValueSum28
    = 0;\n        long currentMaxIndexValueSum29 = 0;\n        long currentMaxIndexValueSum30
    = 0;\n        long currentMaxIndexValueSum31 = 0;\n        long currentMaxIndexValueSum32
    = 0;\n        long currentMaxIndexValueSum33 = 0;\n        long currentMaxIndexValueSum34
    = 0;\n        long currentMaxIndexValueSum35 = 0;\n        long currentMaxIndexValueSum36
    = 0;\n        long currentMaxIndexValueSum37 = 0;\n        long currentMaxIndexValueSum38
    = 0;\n        long currentMaxIndexValueSum39 = 0;\n        long currentMaxIndexValueSum40
    = 0;\n        long currentMaxIndexValueSum41 = 0;\n        long currentMaxIndexValueSum42
    = 0;\n        long currentMaxIndexValueSum43 = 0;\n        long currentMaxIndexValueSum44
    = 0;\n        long currentMaxIndexValueSum45 = 0;\n        long currentMaxIndexValueSum46
    = 0;\n        long currentMaxIndexValueSum47 = 0;\n        long currentMax\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjzswvgz8.cs(66,24): error CS1002: ; expected

    '
  timestamp: 1659795327
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = 0;\n        long currentMaxIndex
    = 0;\n        long currentMaxValue = numbers[0];\n        long currentMaxValueIndex
    = numbers.IndexOf(currentMaxValue);\n        foreach (long number in numbers)
    {\n            if (number > currentMaxValue) {\n                currentMaxValue
    = number;\n                currentMaxIndex = currentMaxValueIndex;\n            }\n
    \           if (number == currentMaxValue) {\n                currentMaxIndex++;\n
    \           }\n            if (currentMaxIndex == currentMaxValueIndex) {\n                result.Add(currentMaxValue);\n
    \               currentMaxValue = numbers[currentMaxIndex];\n                currentMaxIndex
    = numbers.IndexOf(currentMaxValue);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptir3h_4x.cs(30,43): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmptir3h_4x.cs(15,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    /tmp/tmptir3h_4x.cs(16,14): warning CS0219: The variable ''currentMax'' is assigned
    but its value is never used

    '
  timestamp: 1659795328
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        var result = new List<long>();\n        var
    rollingMax = new List<long>();\n        var rollingMaxIndex = 0;\n        var
    rollingMaxValue = numbers.First();\n        rollingMax.Add(rollingMaxValue);\n
    \       rollingMaxIndex++;\n        foreach (var number in numbers) {\n            if
    (number > rollingMaxValue) {\n                rollingMax.Add(number);\n                rollingMaxIndex++;\n
    \           }\n            else {\n                rollingMaxValue = number;\n
    \               rollingMaxIndex = rollingMax.Count;\n            }\n        }\n
    \       result.Add(rollingMaxValue);\n        while (rollingMaxIndex > 0) {\n
    \           rollingMaxValue = rollingMax[rollingMaxIndex - 1];\n            rollingMaxIndex--;\n
    \           foreach (var number in numbers.Where(x => x > rollingMaxValue)) {\n
    \               rollingMaxValue = number;\n                rollingMaxIndex++;\n
    \               rollingMax.Add(rollingMaxValue);\n            }\n            result.Add(rollingMaxValue);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00015] in <8561db0f348b47268ac2ffdc784d5a78>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <8561db0f348b47268ac2ffdc784d5a78>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00015] in <8561db0f348b47268ac2ffdc784d5a78>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <8561db0f348b47268ac2ffdc784d5a78>:0
    \n"
  stdout: ''
  timestamp: 1659795328
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = numbers.First();\n        foreach
    (long number in numbers) {\n            if (number > currentMax) {\n                currentMax
    = number;\n            }\n            if (number == currentMax) {\n                result.Add(number);\n
    \           }\n            else {\n                result.Add(currentMax);\n                currentMax
    = number;\n            }\n        }\n        result.Add(currentMax);\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <f640721924a540d5807b922b96420338>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <f640721924a540d5807b922b96420338>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <f640721924a540d5807b922b96420338>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <f640721924a540d5807b922b96420338>:0
    \n"
  stdout: ''
  timestamp: 1659795328
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long cur = 0;\n        long curMax = 0;\n        foreach
    (long n in numbers) {\n            cur = n;\n            curMax = max;\n            max
    = Math.Max(max, n);\n            if (cur > max) {\n                result.Add(curMax);\n
    \               cur = max;\n            }\n        }\n        result.Add(cur);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <261503d5fa1d4ffc8c38b20f0a75943e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <261503d5fa1d4ffc8c38b20f0a75943e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659795328
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.Max();\n        long currentMax = maxValue;\n
    \       long currentSum = 0;\n        long currentSumOfSquares = 0;\n        long
    currentSumOfProducts = 0;\n        long currentSumOfProductsOfSquares = 0;\n        long
    currentSumOfProductsOfProducts = 0;\n        long currentSumOfProductsOfProductsOfSquares
    = 0;\n        long currentSumOfProductsOfProductsOfProducts = 0;\n        long
    currentSumOfProductsOfProductsOfProductsOfSquares = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProducts
    = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfSquares
    = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProducts
    = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfSquares
    = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProducts
    = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares
    = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProducts
    = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares
    = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProducts
    = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares
    = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProducts
    = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares
    = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProducts
    = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares
    = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProducts
    = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares
    = 0;\n        long \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_7pkym51.cs(41,13): error CS1001: Identifier expected

    /tmp/tmp_7pkym51.cs(41,13): error CS1002: ; expected

    '
  timestamp: 1659795328
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = 0;\n        long currentNumber
    = 0;\n        long previousNumber = 0;\n        foreach (long number in numbers)
    {\n            currentNumber = number;\n            currentMax = number;\n            previousNumber
    = currentNumber;\n            while (currentNumber != 0) {\n                currentMax
    = Math.Max(currentMax, currentNumber);\n                currentNumber = currentNumber
    - 1;\n            }\n            result.Add(currentMax);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4af8963cbfb9445cbea9692ee52079bb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4af8963cbfb9445cbea9692ee52079bb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659795328
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = 0;\n        long currentMaxIndex
    = 0;\n        long currentMaxValue = numbers[0];\n        foreach (long number
    in numbers) {\n            if (number > currentMaxValue) {\n                currentMaxValue
    = number;\n                currentMaxIndex = result.Count;\n            }\n            if
    (number > max) {\n                max = number;\n                currentMaxValue
    = number;\n                currentMaxIndex = result.Count;\n            }\n            result.Add(number);\n
    \       }\n        result.Add(max);\n        result.Add(currentMaxValue);\n        result.Add(currentMaxIndex);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00010] in <9bf907ff33be4ae184733994c0c15be8>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <9bf907ff33be4ae184733994c0c15be8>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00010] in <9bf907ff33be4ae184733994c0c15be8>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <9bf907ff33be4ae184733994c0c15be8>:0
    \n"
  stdout: ''
  timestamp: 1659795327
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.Max();\n        long currentMax = maxValue;\n
    \       long currentMaxIndex = 0;\n        long currentMaxIndex2 = 0;\n        long
    currentMaxIndex3 = 0;\n        long currentMaxIndex4 = 0;\n        long currentMaxIndex5
    = 0;\n        long currentMaxIndex6 = 0;\n        long currentMaxIndex7 = 0;\n
    \       long currentMaxIndex8 = 0;\n        long currentMaxIndex9 = 0;\n        long
    currentMaxIndex10 = 0;\n        long currentMaxIndex11 = 0;\n        long currentMaxIndex12
    = 0;\n        long currentMaxIndex13 = 0;\n        long currentMaxIndex14 = 0;\n
    \       long currentMaxIndex15 = 0;\n        long currentMaxIndex16 = 0;\n        long
    currentMaxIndex17 = 0;\n        long currentMaxIndex18 = 0;\n        long currentMaxIndex19
    = 0;\n        long currentMaxIndex20 = 0;\n        long currentMaxIndex21 = 0;\n
    \       long currentMaxIndex22 = 0;\n        long currentMaxIndex23 = 0;\n        long
    currentMaxIndex24 = 0;\n        long currentMaxIndex25 = 0;\n        long currentMaxIndex26
    = 0;\n        long currentMaxIndex27 = 0;\n        long currentMaxIndex28 = 0;\n
    \       long currentMaxIndex29 = 0;\n        long currentMaxIndex30 = 0;\n        long
    currentMaxIndex31 = 0;\n        long currentMaxIndex32 = 0;\n        long currentMaxIndex33
    = 0;\n        long currentMaxIndex34 = 0;\n        long currentMaxIndex35 = 0;\n
    \       long currentMaxIndex36 = 0;\n        long currentMaxIndex37 = 0;\n        long
    currentMaxIndex38 = 0;\n        long currentMaxIndex39 = 0;\n        long currentMaxIndex40
    = 0;\n        long currentMaxIndex41 = 0;\n        long currentMaxIndex42 = 0;\n
    \       long currentMaxIndex43 = 0;\n        long currentMaxIndex44 = 0;\n        long
    currentMaxIndex45 = 0;\n        long currentMaxIndex46 = 0;\n        long currentMaxIndex47
    = 0;\n        long currentMaxIndex48 = 0;\n        long currentMaxIndex49 = 0;\n
    \       long currentMaxIndex50 = 0;\n        long currentMaxIndex51 = 0;\n        long
    currentMaxIndex52 = 0;\n        long currentMaxIndex53 = 0;\n        long currentMaxIndex54
    = 0;\n        long currentMaxIndex55 = 0;\n        long currentMaxIndex56 = 0;\n
    \       long currentMaxIndex57 = 0;\n        long currentMaxIndex58 = 0;\n        long
    currentMaxIndex59 = 0;\n        long currentMaxIndex60 = 0;\n        long currentMaxIndex61
    = 0;\n        long current\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps3iup6fy.cs(78,21): error CS1002: ; expected

    '
  timestamp: 1659795325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.Max();\n        long currentMax = maxValue;\n
    \       long currentMaxIndex = -1;\n        long currentMaxIndex2 = -1;\n        long
    currentMaxIndex3 = -1;\n        long currentMaxIndex4 = -1;\n        long currentMaxIndex5
    = -1;\n        long currentMaxIndex6 = -1;\n        long currentMaxIndex7 = -1;\n
    \       long currentMaxIndex8 = -1;\n        long currentMaxIndex9 = -1;\n        long
    currentMaxIndex10 = -1;\n        long currentMaxIndex11 = -1;\n        long currentMaxIndex12
    = -1;\n        long currentMaxIndex13 = -1;\n        long currentMaxIndex14 =
    -1;\n        long currentMaxIndex15 = -1;\n        long currentMaxIndex16 = -1;\n
    \       long currentMaxIndex17 = -1;\n        long currentMaxIndex18 = -1;\n        long
    currentMaxIndex19 = -1;\n        long currentMaxIndex20 = -1;\n        long currentMaxIndex21
    = -1;\n        long currentMaxIndex22 = -1;\n        long currentMaxIndex23 =
    -1;\n        long currentMaxIndex24 = -1;\n        long currentMaxIndex25 = -1;\n
    \       long currentMaxIndex26 = -1;\n        long currentMaxIndex27 = -1;\n        long
    currentMaxIndex28 = -1;\n        long currentMaxIndex29 = -1;\n        long currentMaxIndex30
    = -1;\n        long currentMaxIndex31 = -1;\n        long currentMaxIndex32 =
    -1;\n        long currentMaxIndex33 = -1;\n        long currentMaxIndex34 = -1;\n
    \       long currentMaxIndex35 = -1;\n        long currentMaxIndex36 = -1;\n        long
    currentMaxIndex37 = -1;\n        long currentMaxIndex38 = -1;\n        long currentMaxIndex39
    = -1;\n        long currentMaxIndex40 = -1;\n        long currentMaxIndex41 =
    -1;\n        long currentMaxIndex42 = -1;\n        long currentMaxIndex43 = -1;\n
    \       long currentMaxIndex44 = -1;\n        long currentMaxIndex45 = -1;\n        long
    currentMaxIndex46 = -1;\n        long currentMaxIndex47 = -1;\n        long currentMaxIndex48
    = -1;\n        long currentMaxIndex49 = -1;\n        long currentMaxIndex50 =
    -1;\n        long currentMaxIndex51 = -1;\n        long currentMaxIndex52 = -1;\n
    \       long currentMaxIndex53 = -1;\n        long currentMaxIndex54 = -1;\n        long
    currentMaxIndex55 = -1;\n        long currentMax\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpexqeeex1.cs(72,24): error CS1002: ; expected

    '
  timestamp: 1659795325
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long current = 0;\n        foreach (long n in numbers)
    {\n            current = Math.Max(current, n);\n            if (current > max)
    {\n                max = current;\n            }\n            result.Add(current);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e041821c004c4885ab0652be7911e045>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e041821c004c4885ab0652be7911e045>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659795328
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long current = 0;\n        long sum = 0;\n        foreach
    (long n in numbers) {\n            sum += n;\n            if (sum > max) {\n                max
    = sum;\n                current = n;\n            }\n            result.Add(current);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <221be93f3fce4ae5812f940954a0976a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <221be93f3fce4ae5812f940954a0976a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659795328
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> max = new List<long>();\n
    \       long maxValue = numbers.First();\n        long currentMax = maxValue;\n
    \       foreach (long number in numbers) {\n            if (number > maxValue)
    {\n                max.Add(currentMax);\n                currentMax = number;\n
    \           } else {\n                currentMax = number;\n            }\n        }\n
    \       max.Add(currentMax);\n        return max;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <e22bb71177ee4a55841becfb29ba15a4>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <e22bb71177ee4a55841becfb29ba15a4>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <e22bb71177ee4a55841becfb29ba15a4>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <e22bb71177ee4a55841becfb29ba15a4>:0
    \n"
  stdout: ''
  timestamp: 1659795328
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = 0;\n        long currentMaxIndex
    = 0;\n        long currentMaxValue = numbers[0];\n        long currentMaxValueIndex
    = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueValue = numbers[currentMaxValueIndex];\n
    \       long currentMaxValueValueIndex = numbers.IndexOf(currentMaxValueValue);\n
    \       long currentMaxValueValueValue = numbers[currentMaxValueValueIndex];\n
    \       long currentMaxValueValueValueIndex = numbers.IndexOf(currentMaxValueValueValue);\n
    \       long currentMaxValueValueValueValue = numbers[currentMaxValueValueValueIndex];\n
    \       long currentMaxValueValueValueValueIndex = numbers.IndexOf(currentMaxValueValueValueValue);\n
    \       long currentMaxValueValueValueValueValue = numbers[currentMaxValueValueValueValueIndex];\n
    \       long currentMaxValueValueValueValueValueIndex = numbers.IndexOf(currentMaxValueValueValueValueValue);\n
    \       long currentMaxValueValueValueValueValueValue = numbers[currentMaxValueValueValueValueValueIndex];\n
    \       long currentMaxValueValueValueValueValueIndex = numbers.IndexOf(currentMaxValueValueValueValueValue);\n
    \       long currentMaxValueValueValueValueValueValue = numbers[currentMaxValueValueValueValueValueIndex];\n
    \       long currentMaxValueValueValueValueValueValueIndex = numbers.IndexOf(currentMaxValueValueValueValueValue);\n
    \       long currentMaxValueValueValueValueValueValueValue = numbers[currentMaxValueValueValueValueValueValueIndex];\n
    \       long currentMaxValueValueValueValueValueValueIndex = numbers.IndexOf(currentMaxValueValueValueValueValue);\n
    \       long currentMaxValueValueValueValueValueValueValue = numbers[currentMaxValueValueValueValueValueValueIndex];\n
    \       long currentMaxValueValueValueValueValueValueIndex = numbers.IndexOf(currentMaxValueValueValueValueValue);\n
    \       long currentMaxValueValueValueValueValueValueValue = numbers[currentMaxValueValueValueValueValueValueIndex];\n
    \       long currentMaxValueValueValueValueValueValueIndex = numbers.IndexOf(currentMaxValueValueValueValueValue);\n
    \       long currentMaxValueValueValueValueValueValueValue = numbers[currentMaxValueValueValueValueValueValueIndex];\n
    \       long currentMaxValueValueValueValueValueValueIndex = numbers.IndexOf(currentMaxValueValueValueValueValue);\n
    \       long currentMaxValueValueValueValueValueValueValue = numbers[currentMaxValueValueValueValueValueValueIndex];\n
    \       long currentMaxValueValueValueValueValueValueIndex = numbers.IndexOf(currentMaxValueValueValueValueValue);\n
    \       long currentMaxValueValue\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbex9zm6t.cs(42,34): error CS1002: ; expected

    '
  timestamp: 1659795328
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = 0;\n        long current = 0;\n
    \       long sum = 0;\n        foreach (long n in numbers) {\n            currentMax
    = n;\n            current = 0;\n            sum = 0;\n            while (current
    < currentMax) {\n                sum += current;\n                current++;\n
    \           }\n            max = Math.Max(max, sum);\n            result.Add(max);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8c7d005f36c74ae7a95dc26ee8601309>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8c7d005f36c74ae7a95dc26ee8601309>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659795328
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        var rollingMax = new List<long>();\n
    \       var rollingMaxIndex = 0;\n        var rollingMaxValue = numbers.First();\n
    \       var rollingMaxMaxValue = rollingMaxValue;\n        var rollingMaxMaxIndex
    = 0;\n        var rollingMaxMaxIndex2 = 0;\n        var rollingMaxMaxValue2 =
    rollingMaxValue;\n        var rollingMaxMaxIndex2 = 0;\n        var rollingMaxMaxValue3
    = rollingMaxValue;\n        var rollingMaxMaxIndex3 = 0;\n        var rollingMaxMaxValue4
    = rollingMaxValue;\n        var rollingMaxMaxIndex4 = 0;\n        var rollingMaxMaxValue5
    = rollingMaxValue;\n        var rollingMaxMaxIndex5 = 0;\n        var rollingMaxMaxValue6
    = rollingMaxValue;\n        var rollingMaxMaxIndex6 = 0;\n        var rollingMaxMaxValue7
    = rollingMaxValue;\n        var rollingMaxMaxIndex7 = 0;\n        var rollingMaxMaxValue8
    = rollingMaxValue;\n        var rollingMaxMaxIndex8 = 0;\n        var rollingMaxMaxValue9
    = rollingMaxValue;\n        var rollingMaxMaxIndex9 = 0;\n        var rollingMaxMaxValue10
    = rollingMaxValue;\n        var rollingMaxMaxIndex10 = 0;\n        var rollingMaxMaxValue11
    = rollingMaxValue;\n        var rollingMaxMaxIndex11 = 0;\n        var rollingMaxMaxValue12
    = rollingMaxValue;\n        var rollingMaxMaxIndex12 = 0;\n        var rollingMaxMaxValue13
    = rollingMaxValue;\n        var rollingMaxMaxIndex13 = 0;\n        var rollingMaxMaxValue14
    = rollingMaxValue;\n        var rollingMaxMaxIndex14 = 0;\n        var rollingMaxMaxValue15
    = rollingMaxValue;\n        var rollingMaxMaxIndex15 = 0;\n        var rollingMaxMaxValue16
    = rollingMaxValue;\n        var rollingMaxMaxIndex16 = 0;\n        var rollingMaxMaxValue17
    = rollingMaxValue;\n        var rollingMaxMaxIndex17 = 0;\n        var rollingMaxMaxValue18
    = rollingMaxValue;\n        var rollingMaxMaxIndex18 = 0;\n        var rollingMaxMaxValue19
    = rollingMaxValue;\n        var rollingMaxMaxIndex19 = 0;\n        var rollingMaxMaxValue20
    = rollingMaxValue;\n        var rollingMaxMaxIndex20 = 0;\n        var rollingMaxMaxValue21
    = rollingMaxValue;\n        var rollingMaxMaxIndex21 = 0;\n        var rollingMaxMaxValue22
    = rollingMaxValue;\n        var rollingMaxMaxIndex22 = 0;\n        var rollingMaxMaxValue23
    = rollingMaxValue;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpp5ww3oir.cs(21,13): error CS0128: A local variable or function named ''rollingMaxMaxIndex2''
    is already defined in this scope

    /tmp/tmpp5ww3oir.cs(15,13): warning CS0219: The variable ''rollingMaxIndex'' is
    assigned but its value is never used

    /tmp/tmpp5ww3oir.cs(18,13): warning CS0219: The variable ''rollingMaxMaxIndex''
    is assigned but its value is never used

    /tmp/tmpp5ww3oir.cs(19,13): warning CS0219: The variable ''rollingMaxMaxIndex2''
    is assigned but its value is never used

    /tmp/tmpp5ww3oir.cs(21,13): warning CS0219: The variable ''rollingMaxMaxIndex2''
    is assigned but its value is never used

    /tmp/tmpp5ww3oir.cs(23,13): warning CS0219: The variable ''rollingMaxMaxIndex3''
    is assigned but its value is never used

    /tmp/tmpp5ww3oir.cs(25,13): warning CS0219: The variable ''rollingMaxMaxIndex4''
    is assigned but its value is never used

    /tmp/tmpp5ww3oir.cs(27,13): warning CS0219: The variable ''rollingMaxMaxIndex5''
    is assigned but its value is never used

    /tmp/tmpp5ww3oir.cs(29,13): warning CS0219: The variable ''rollingMaxMaxIndex6''
    is assigned but its value is never used

    /tmp/tmpp5ww3oir.cs(31,13): warning CS0219: The variable ''rollingMaxMaxIndex7''
    is assigned but its value is never used

    /tmp/tmpp5ww3oir.cs(33,13): warning CS0219: The variable ''rollingMaxMaxIndex8''
    is assigned but its value is never used

    /tmp/tmpp5ww3oir.cs(35,13): warning CS0219: The variable ''rollingMaxMaxIndex9''
    is assigned but its value is never used

    /tmp/tmpp5ww3oir.cs(37,13): warning CS0219: The variable ''rollingMaxMaxIndex10''
    is assigned but its value is never used

    /tmp/tmpp5ww3oir.cs(39,13): warning CS0219: The variable ''rollingMaxMaxIndex11''
    is assigned but its value is never used

    /tmp/tmpp5ww3oir.cs(41,13): warning CS0219: The variable ''rollingMaxMaxIndex12''
    is assigned but its value is never used

    /tmp/tmpp5ww3oir.cs(43,13): warning CS0219: The variable ''rollingMaxMaxIndex13''
    is assigned but its value is never used

    /tmp/'
  timestamp: 1659795328
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = 0;\n        long currentMaxIndex
    = 0;\n        long currentMaxValue = numbers[0];\n        foreach (long number
    in numbers) {\n            if (number > currentMaxValue) {\n                currentMaxValue
    = number;\n                currentMaxIndex = result.Count;\n            }\n            if
    (number > max) {\n                max = number;\n                currentMax =
    number;\n                currentMaxIndex = result.Count;\n            }\n            if
    (number == currentMaxValue) {\n                currentMaxIndex++;\n            }\n
    \           result.Add(number);\n        }\n        result.Add(max);\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00010] in <6801c477866f4f88a8e29df67db5e2d8>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <6801c477866f4f88a8e29df67db5e2d8>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00010] in <6801c477866f4f88a8e29df67db5e2d8>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <6801c477866f4f88a8e29df67db5e2d8>:0
    \n"
  stdout: ''
  timestamp: 1659795328
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = numbers.Max();\n        long currentMax = max;\n        long
    currentMaxIndex = -1;\n        long currentMaxValue = numbers.First();\n        long
    currentMaxValueIndex = -1;\n        foreach (long number in numbers) {\n            if
    (number > currentMax) {\n                currentMax = number;\n                currentMaxIndex
    = currentMaxIndex;\n                currentMaxValue = currentMaxValue;\n                currentMaxValueIndex
    = currentMaxValueIndex;\n            }\n            if (number == currentMax)
    {\n                currentMaxIndex++;\n                currentMaxValue = number;\n
    \               currentMaxValueIndex = currentMaxIndex;\n            }\n            if
    (number > currentMaxValue) {\n                currentMaxValue = number;\n                currentMaxValueIndex
    = currentMaxIndex;\n            }\n        }\n        result.Add(currentMaxValue);\n
    \       result.Add(currentMaxValue);\n        result.Add(currentMaxValue);\n        result.Add(currentMaxValue);\n
    \       result.Add(currentMaxValue);\n        result.Add(currentMaxValue);\n        result.Add(currentMaxValue);\n
    \       result.Add(currentMaxValue);\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <a22e7edd345c44b39c541284723255a8>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <a22e7edd345c44b39c541284723255a8>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <a22e7edd345c44b39c541284723255a8>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <a22e7edd345c44b39c541284723255a8>:0
    \n"
  stdout: ''
  timestamp: 1659795328
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.First();\n        long currentMax = maxValue;\n
    \       long currentMaxIndex = 0;\n        foreach (long number in numbers) {\n
    \           if (number > currentMax) {\n                currentMax = number;\n
    \               currentMaxIndex = result.Count;\n            }\n            result.Add(number);\n
    \       }\n        result.Add(currentMax);\n        result.Add(currentMaxIndex);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <865281a0015e4919b9e85a71dbbd2fc0>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <865281a0015e4919b9e85a71dbbd2fc0>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <865281a0015e4919b9e85a71dbbd2fc0>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <865281a0015e4919b9e85a71dbbd2fc0>:0
    \n"
  stdout: ''
  timestamp: 1659795328
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = 0;\n        long currentNumber
    = 0;\n        foreach (long number in numbers) {\n            currentNumber =
    number;\n            currentMax = number;\n            while (currentNumber >
    currentMax) {\n                currentMax = currentNumber;\n                currentNumber
    -= currentMax;\n            }\n            result.Add(currentMax);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a7e76a8c777d49eab3db4797831f643d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a7e76a8c777d49eab3db4797831f643d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659795329
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = 0;\n        long currentMaxIndex
    = 0;\n        long currentMaxValue = numbers[0];\n        long currentMaxValueIndex
    = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueCount = 1;\n
    \       long currentMaxValueCountIndex = 0;\n        long currentMaxValueCountValue
    = numbers.Count;\n        long currentMaxValueCountValueIndex = numbers.IndexOf(currentMaxValueCountValue);\n
    \       long currentMaxValueCountValueCount = 1;\n        long currentMaxValueCountValueCountIndex
    = 0;\n        long currentMaxValueCountValueCountValue = numbers.Count;\n        long
    currentMaxValueCountValueCountValueIndex = numbers.IndexOf(currentMaxValueCountValueCountValue);\n
    \       long currentMaxValueCountValueCountValueCount = 1;\n        long currentMaxValueCountValueCountValueCountIndex
    = 0;\n        long currentMaxValueCountValueCountValueCountValue = numbers.Count;\n
    \       long currentMaxValueCountValueCountValueCountValueIndex = numbers.IndexOf(currentMaxValueCountValueCountValueCountValue);\n
    \       long currentMaxValueCountValueCountValueCountValueCount = 1;\n        long
    currentMaxValueCountValueCountValueCountValueIndex = 0;\n        long currentMaxValueCountValueCountValueCountValueCountValue
    = numbers.Count;\n        long currentMaxValueCountValueCountValueCountValueCountValueIndex
    = numbers.IndexOf(currentMaxValueCountValueCountValueCountValueCountValue);\n
    \       long currentMaxValueCountValueCountValueCountValueCountValueCount = 1;\n
    \       long currentMaxValueCountValueCountValueCountValueCountValueIndex = 0;\n
    \       long currentMaxValueCountValueCountValueCountValueCountValueCountValue
    = numbers.Count;\n        long currentMaxValueCountValueCountValueCountValueCountValueCountValueIndex
    = numbers.IndexOf(currentMaxValueCountValueCountValueCountValueCountValueCountValue);\n
    \       long currentMaxValueCountValueCountValueCountValueCountValueCountValueCount
    = 1;\n        long currentMaxValueCountValueCountValueCountValueCountValueCountValueIndex
    = 0;\n        long currentMaxValueCountValueCountValueCountValueCountValueCountValueCountValue
    = numbers.Count;\n        long currentMaxValueCountValueCountValueCountValueCountValueCountValueCountValueIndex
    = numbers.IndexOf(currentMaxValueCountValueCountValueCountValueCountValueCountValueCountValue);\n
    \       long currentMaxValueCountValueCountValueCountValueCountValueCountValueCountValueCount
    = 1;\n        long currentMaxValueCountValueCountValueCountValueCountValueCountValueCountValueIndex
    = 0;\n        long currentMaxValueCount\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvpncofjf.cs(46,34): error CS1002: ; expected

    '
  timestamp: 1659795328
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = numbers.First();\n        foreach
    (long number in numbers) {\n            if (number > currentMax) {\n                currentMax
    = number;\n            }\n            if (number > max) {\n                max
    = number;\n            }\n            result.Add(currentMax);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <583d0c9f902541938c096efbc242c78f>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <583d0c9f902541938c096efbc242c78f>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <583d0c9f902541938c096efbc242c78f>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <583d0c9f902541938c096efbc242c78f>:0
    \n"
  stdout: ''
  timestamp: 1659795328
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = 0;\n        long currentSum =
    0;\n        long sum = 0;\n        long currentSumOfSquares = 0;\n        long
    currentSumOfPowers = 0;\n        long currentSumOfPowersOfSquares = 0;\n        long
    currentSumOfPowersOfSquaresOfPowers = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquares
    = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowers = 0;\n
    \       long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquares = 0;\n
    \       long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowers
    = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquares
    = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowers
    = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquares
    = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowers
    = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquares
    = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowers
    = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquares
    = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquares
    = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquares\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5ux_6kg8.cs(35,109): error CS1002: ; expected

    '
  timestamp: 1659795328
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = numbers.First();\n        long
    currentMaxIndex = 0;\n        long currentMaxValue = numbers.First();\n        long
    currentMaxIndexValue = numbers.First();\n        foreach (long number in numbers)
    {\n            if (number > currentMax) {\n                currentMax = number;\n
    \               currentMaxIndex = currentMaxIndex;\n                currentMaxValue
    = currentMaxValue;\n                currentMaxIndexValue = currentMaxIndexValue;\n
    \           }\n            if (number == currentMax) {\n                currentMaxIndex++;\n
    \               currentMaxIndexValue = currentMaxIndex;\n            }\n            if
    (number > currentMaxValue) {\n                currentMaxValue = number;\n                currentMaxIndexValue
    = currentMaxIndex;\n            }\n            if (number == currentMaxValue)
    {\n                currentMaxIndex++;\n                currentMaxIndexValue =
    currentMaxIndex;\n            }\n            result.Add(number);\n        }\n
    \       result.Add(currentMax);\n        result.Add(currentMaxValue);\n        result.Add(currentMaxIndex);\n
    \       result.Add(currentMaxIndexValue);\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <ca373d18f3254fe6b151796d0671ec3f>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <ca373d18f3254fe6b151796d0671ec3f>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <ca373d18f3254fe6b151796d0671ec3f>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <ca373d18f3254fe6b151796d0671ec3f>:0
    \n"
  stdout: ''
  timestamp: 1659795328
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long current = 0;\n        long sum = 0;\n        foreach
    (long number in numbers) {\n            sum += number;\n            if (sum >
    max) {\n                max = sum;\n                current = number;\n            }\n
    \           result.Add(current);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <20c2683dab414f0a90fc4b11f105b95d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <20c2683dab414f0a90fc4b11f105b95d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659795329
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = 0;\n        long currentSum =
    0;\n        long sum = 0;\n        foreach (long number in numbers) {\n            currentMax
    = number;\n            currentSum = number;\n            sum = number;\n            while
    (currentSum > 0) {\n                currentSum -= max;\n                currentMax
    -= max;\n                result.Add(currentMax);\n                sum += currentMax;\n
    \           }\n            max = currentMax;\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Timeout
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3d6bb26e3ee48618f0949bc5ebfae16>:0
    \n"
  stdout: None
  timestamp: 1659795334
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.Max();\n        long currentMax = maxValue;\n
    \       long currentMaxIndex = 0;\n        long currentMaxIndexValue = 0;\n        long
    currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3 = 0;\n        long
    currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5 = 0;\n        long
    currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7 = 0;\n        long
    currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9 = 0;\n        long
    currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11 = 0;\n        long
    currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13 = 0;\n        long
    currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15 = 0;\n        long
    currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17 = 0;\n        long
    currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19 = 0;\n        long
    currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21 = 0;\n        long
    currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23 = 0;\n        long
    currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25 = 0;\n        long
    currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27 = 0;\n        long
    currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29 = 0;\n        long
    currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31 = 0;\n        long
    currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33 = 0;\n        long
    currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35 = 0;\n        long
    currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37 = 0;\n        long
    currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39 = 0;\n        long
    currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41 = 0;\n        long
    currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43 = 0;\n        long
    currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45 = 0;\n        long
    currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47 = 0;\n        long
    currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49 = 0;\n        long
    currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51 = 0;\n        long
    currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53 = 0;\n        long
    currentMaxIndexValue54\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoxwoiwng.cs(71,36): error CS1002: ; expected

    '
  timestamp: 1659795325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = numbers.Max();\n        long current = max;\n        long rollingMax
    = max;\n        foreach (long number in numbers) {\n            rollingMax = Math.Max(rollingMax,
    number);\n            if (rollingMax > current) {\n                result.Add(rollingMax);\n
    \               current = rollingMax;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <37be4ea9242e46aca51b7bbc354b00ce>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <37be4ea9242e46aca51b7bbc354b00ce>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <37be4ea9242e46aca51b7bbc354b00ce>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <37be4ea9242e46aca51b7bbc354b00ce>:0
    \n"
  stdout: ''
  timestamp: 1659795329
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = 0;\n        long currentMaxIndex
    = 0;\n        long currentMaxValue = numbers[0];\n        long currentMaxIndexValue
    = numbers[0];\n        long currentMaxIndexValue2 = numbers[0];\n        long
    currentMaxIndexValue3 = numbers[0];\n        long currentMaxIndexValue4 = numbers[0];\n
    \       long currentMaxIndexValue5 = numbers[0];\n        long currentMaxIndexValue6
    = numbers[0];\n        long currentMaxIndexValue7 = numbers[0];\n        long
    currentMaxIndexValue8 = numbers[0];\n        long currentMaxIndexValue9 = numbers[0];\n
    \       long currentMaxIndexValue10 = numbers[0];\n        long currentMaxIndexValue11
    = numbers[0];\n        long currentMaxIndexValue12 = numbers[0];\n        long
    currentMaxIndexValue13 = numbers[0];\n        long currentMaxIndexValue14 = numbers[0];\n
    \       long currentMaxIndexValue15 = numbers[0];\n        long currentMaxIndexValue16
    = numbers[0];\n        long currentMaxIndexValue17 = numbers[0];\n        long
    currentMaxIndexValue18 = numbers[0];\n        long currentMaxIndexValue19 = numbers[0];\n
    \       long currentMaxIndexValue20 = numbers[0];\n        long currentMaxIndexValue21
    = numbers[0];\n        long currentMaxIndexValue22 = numbers[0];\n        long
    currentMaxIndexValue23 = numbers[0];\n        long currentMaxIndexValue24 = numbers[0];\n
    \       long currentMaxIndexValue25 = numbers[0];\n        long currentMaxIndexValue26
    = numbers[0];\n        long currentMaxIndexValue27 = numbers[0];\n        long
    currentMaxIndexValue28 = numbers[0];\n        long currentMaxIndexValue29 = numbers[0];\n
    \       long currentMaxIndexValue30 = numbers[0];\n        long currentMaxIndexValue31
    = numbers[0];\n        long currentMaxIndexValue32 = numbers[0];\n        long
    currentMaxIndexValue33 = numbers[0];\n        long currentMaxIndexValue34 = numbers[0];\n
    \       long currentMaxIndexValue35 = numbers[0];\n        long currentMaxIndexValue36
    = numbers[0];\n        long currentMaxIndexValue37 = numbers[0];\n        long
    currentMaxIndexValue38 = numbers[0];\n        long currentMaxIndexValue39 = numbers[0];\n
    \       long currentMaxIndexValue40 = numbers[0];\n        long currentMaxIndexValue41
    = numbers[0];\n        long currentMaxIndexValue42 = numbers[0];\n        long
    currentMaxIndexValue43 = numbers[0];\n        long currentMaxIndexValue44 = numbers[0];\n
    \       long currentMaxIndex\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqgtktu63.cs(63,29): error CS1002: ; expected

    '
  timestamp: 1659795328
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long current = 0;\n        foreach (long number
    in numbers) {\n            current = Math.Max(current, number);\n            if
    (current > max) {\n                max = current;\n            }\n            result.Add(max);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6814cf9fd46a4e7199bc6406a2b3344a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6814cf9fd46a4e7199bc6406a2b3344a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659795329
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long current = 0;\n        long sum = 0;\n        foreach
    (var number in numbers) {\n            sum += number;\n            if (sum > max)
    {\n                max = sum;\n                current = number;\n            }\n
    \           result.Add(current);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <02172045d7ce483592b95990ea89d58a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <02172045d7ce483592b95990ea89d58a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659795329
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = numbers.Max();\n        long currentMax = max;\n        long
    currentMaxIndex = -1;\n        foreach (long number in numbers) {\n            if
    (number > currentMax) {\n                currentMax = number;\n                currentMaxIndex
    = result.Count;\n            }\n            if (number == currentMax) {\n                result.Add(number);\n
    \           }\n        }\n        if (currentMaxIndex != result.Count) {\n            result.Insert(currentMaxIndex,
    currentMax);\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfvcm7lcv.cs(28,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659795329
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = 0;\n        long currentMaxIndex
    = 0;\n        long currentMaxValue = numbers[0];\n        long currentMaxValueIndex
    = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long
    currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex
    = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long
    currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex
    = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long
    currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex
    = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long
    currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex
    = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long
    currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex
    = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long
    currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex
    = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long
    currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex
    = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long
    currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex
    = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long
    currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex
    = numbers.Index\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmgf8agxg.cs(55,50): error CS1002: ; expected

    '
  timestamp: 1659795325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.Max();\n        long currentMax = maxValue;\n
    \       long currentMaxIndex = -1;\n        long currentMaxIndexValue = numbers.Last();\n
    \       long currentMaxIndexValue2 = numbers.Last();\n        long currentMaxIndexValue3
    = numbers.Last();\n        long currentMaxIndexValue4 = numbers.Last();\n        long
    currentMaxIndexValue5 = numbers.Last();\n        long currentMaxIndexValue6 =
    numbers.Last();\n        long currentMaxIndexValue7 = numbers.Last();\n        long
    currentMaxIndexValue8 = numbers.Last();\n        long currentMaxIndexValue9 =
    numbers.Last();\n        long currentMaxIndexValue10 = numbers.Last();\n        long
    currentMaxIndexValue11 = numbers.Last();\n        long currentMaxIndexValue12
    = numbers.Last();\n        long currentMaxIndexValue13 = numbers.Last();\n        long
    currentMaxIndexValue14 = numbers.Last();\n        long currentMaxIndexValue15
    = numbers.Last();\n        long currentMaxIndexValue16 = numbers.Last();\n        long
    currentMaxIndexValue17 = numbers.Last();\n        long currentMaxIndexValue18
    = numbers.Last();\n        long currentMaxIndexValue19 = numbers.Last();\n        long
    currentMaxIndexValue20 = numbers.Last();\n        long currentMaxIndexValue21
    = numbers.Last();\n        long currentMaxIndexValue22 = numbers.Last();\n        long
    currentMaxIndexValue23 = numbers.Last();\n        long currentMaxIndexValue24
    = numbers.Last();\n        long currentMaxIndexValue25 = numbers.Last();\n        long
    currentMaxIndexValue26 = numbers.Last();\n        long currentMaxIndexValue27
    = numbers.Last();\n        long currentMaxIndexValue28 = numbers.Last();\n        long
    currentMaxIndexValue29 = numbers.Last();\n        long currentMaxIndexValue30
    = numbers.Last();\n        long currentMaxIndexValue31 = numbers.Last();\n        long
    currentMaxIndexValue32 = numbers.Last();\n        long currentMaxIndexValue33
    = numbers.Last();\n        long currentMaxIndexValue34 = numbers.Last();\n        long
    currentMaxIndexValue35 = numbers.Last();\n        long currentMaxIndexValue36
    = numbers.Last();\n        long currentMaxIndexValue37 = numbers.Last();\n        long
    currentMaxIndexValue38 = numbers.Last();\n        long currentMaxIndexValue39
    = numbers.Last();\n        long currentMaxIndexValue40 = numbers.Last();\n        long
    currentMaxIndexValue41 = numbers.Last();\n\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoys_hru2.cs(17,14): warning CS0219: The variable ''currentMaxIndex'' is
    assigned but its value is never used

    /tmp/tmpoys_hru2.cs(13,30): error CS0161: ''Problem.RollingMax(List<long>)'':
    not all code paths return a value

    '
  timestamp: 1659795329
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.Max();\n        long currentMax = maxValue;\n
    \       long currentMaxIndex = 0;\n        long currentMaxIndexValue = 0;\n        long
    currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3 = 0;\n        long
    currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5 = 0;\n        long
    currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7 = 0;\n        long
    currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9 = 0;\n        long
    currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11 = 0;\n        long
    currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13 = 0;\n        long
    currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15 = 0;\n        long
    currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17 = 0;\n        long
    currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19 = 0;\n        long
    currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21 = 0;\n        long
    currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23 = 0;\n        long
    currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25 = 0;\n        long
    currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27 = 0;\n        long
    currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29 = 0;\n        long
    currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31 = 0;\n        long
    currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33 = 0;\n        long
    currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35 = 0;\n        long
    currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37 = 0;\n        long
    currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39 = 0;\n        long
    currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41 = 0;\n        long
    currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43 = 0;\n        long
    currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45 = 0;\n        long
    currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47 = 0;\n        long
    currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49 = 0;\n        long
    currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51 = 0;\n        long
    currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53 = 0;\n        long
    currentMaxIndexValue54\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoxwoiwng.cs(71,36): error CS1002: ; expected

    '
  timestamp: 1659795325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = 0;\n        long currentMaxIndex
    = 0;\n        long currentMaxValue = numbers[0];\n        long currentMaxValueIndex
    = -1;\n        foreach (long number in numbers) {\n            if (number > currentMaxValue)
    {\n                currentMaxValue = number;\n                currentMaxIndex
    = currentMaxValue;\n                currentMaxValueIndex = currentMaxIndex;\n
    \           }\n            if (number == currentMaxValue) {\n                currentMaxIndex++;\n
    \           }\n            if (currentMaxIndex == currentMaxValueIndex) {\n                result.Add(currentMaxValue);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00010] in <3f8a568bfa844df98b487fdcd5d92214>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <3f8a568bfa844df98b487fdcd5d92214>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00010] in <3f8a568bfa844df98b487fdcd5d92214>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <3f8a568bfa844df98b487fdcd5d92214>:0
    \n"
  stdout: ''
  timestamp: 1659795329
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.Max();\n        long currentMax = maxValue;\n
    \       long currentMaxIndex = 0;\n        long currentMaxIndexValue = 0;\n        long
    currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3 = 0;\n        long
    currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5 = 0;\n        long
    currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7 = 0;\n        long
    currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9 = 0;\n        long
    currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11 = 0;\n        long
    currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13 = 0;\n        long
    currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15 = 0;\n        long
    currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17 = 0;\n        long
    currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19 = 0;\n        long
    currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21 = 0;\n        long
    currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23 = 0;\n        long
    currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25 = 0;\n        long
    currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27 = 0;\n        long
    currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29 = 0;\n        long
    currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31 = 0;\n        long
    currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33 = 0;\n        long
    currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35 = 0;\n        long
    currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37 = 0;\n        long
    currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39 = 0;\n        long
    currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41 = 0;\n        long
    currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43 = 0;\n        long
    currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45 = 0;\n        long
    currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47 = 0;\n        long
    currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49 = 0;\n        long
    currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51 = 0;\n        long
    currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53 = 0;\n        long
    currentMaxIndexValue54\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoxwoiwng.cs(71,36): error CS1002: ; expected

    '
  timestamp: 1659795325
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long current = 0;\n        long sum = 0;\n        foreach
    (long number in numbers) {\n            sum += number;\n            if (sum >
    max) {\n                max = sum;\n                current = number;\n            }\n
    \           result.Add(current);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <20c2683dab414f0a90fc4b11f105b95d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <20c2683dab414f0a90fc4b11f105b95d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659795329
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.Max();\n        long currentMax = maxValue;\n
    \       long currentMaxIndex = -1;\n        long currentMaxIndex2 = -1;\n        long
    currentMaxIndex3 = -1;\n        long currentMaxIndex4 = -1;\n        long currentMaxIndex5
    = -1;\n        long currentMaxIndex6 = -1;\n        long currentMaxIndex7 = -1;\n
    \       long currentMaxIndex8 = -1;\n        long currentMaxIndex9 = -1;\n        long
    currentMaxIndex10 = -1;\n        long currentMaxIndex11 = -1;\n        long currentMaxIndex12
    = -1;\n        long currentMaxIndex13 = -1;\n        long currentMaxIndex14 =
    -1;\n        long currentMaxIndex15 = -1;\n        long currentMaxIndex16 = -1;\n
    \       long currentMaxIndex17 = -1;\n        long currentMaxIndex18 = -1;\n        long
    currentMaxIndex19 = -1;\n        long currentMaxIndex20 = -1;\n        long currentMaxIndex21
    = -1;\n        long currentMaxIndex22 = -1;\n        long currentMaxIndex23 =
    -1;\n        long currentMaxIndex24 = -1;\n        long currentMaxIndex25 = -1;\n
    \       long currentMaxIndex26 = -1;\n        long currentMaxIndex27 = -1;\n        long
    currentMaxIndex28 = -1;\n        long currentMaxIndex29 = -1;\n        long currentMaxIndex30
    = -1;\n        long currentMaxIndex31 = -1;\n        long currentMaxIndex32 =
    -1;\n        long currentMaxIndex33 = -1;\n        long currentMaxIndex34 = -1;\n
    \       long currentMaxIndex35 = -1;\n        long currentMaxIndex36 = -1;\n        long
    currentMaxIndex37 = -1;\n        long currentMaxIndex38 = -1;\n        long currentMaxIndex39
    = -1;\n        long currentMaxIndex40 = -1;\n        long currentMaxIndex41 =
    -1;\n        long currentMaxIndex42 = -1;\n        long currentMaxIndex43 = -1;\n
    \       long currentMaxIndex44 = -1;\n        long currentMaxIndex45 = -1;\n        long
    currentMaxIndex46 = -1;\n        long currentMaxIndex47 = -1;\n        long currentMaxIndex48
    = -1;\n        long currentMaxIndex49 = -1;\n        long currentMaxIndex50 =
    -1;\n        long currentMaxIndex51 = -1;\n        long currentMaxIndex52 = -1;\n
    \       long currentMaxIndex53 = -1;\n        long currentMaxIndex54 = -1;\n        long
    currentMaxIndex55 = -1;\n        long currentMax\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpexqeeex1.cs(72,24): error CS1002: ; expected

    '
  timestamp: 1659795325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long maxIndex = 0;\n        long currentMax = numbers[0];\n
    \       long currentMaxIndex = numbers.IndexOf(currentMax);\n        long currentMaxValue
    = currentMax;\n        long currentMaxIndexValue = currentMaxIndex;\n        foreach
    (long number in numbers) {\n            if (number > currentMaxValue) {\n                max
    = currentMaxValue;\n                maxIndex = currentMaxIndexValue;\n                currentMaxValue
    = number;\n                currentMaxIndexValue = numbers.IndexOf(currentMaxValue);\n
    \               currentMaxIndex = currentMaxIndexValue;\n            }\n            if
    (number > max) {\n                max = number;\n                maxIndex = numbers.IndexOf(number);\n
    \           }\n        }\n        result.Add(max);\n        result.Add(maxIndex);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x0000d] in <288946e665c948e9982a9fee555876f7>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <288946e665c948e9982a9fee555876f7>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x0000d] in <288946e665c948e9982a9fee555876f7>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <288946e665c948e9982a9fee555876f7>:0
    \n"
  stdout: ''
  timestamp: 1659795329
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = numbers.First();\n        long maxIndex = 0;\n        for (int
    i = 1; i < numbers.Count; i++) {\n            if (numbers[i] > max) {\n                max
    = numbers[i];\n                maxIndex = i;\n            }\n        }\n        result.Add(max);\n
    \       for (int i = maxIndex + 1; i < numbers.Count; i++) {\n            result.Add(numbers[i]);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdnhfvb1l.cs(24,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659795329
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long current = 0;\n        long sum = 0;\n        foreach
    (long n in numbers) {\n            current = n;\n            sum += current;\n
    \           if (sum > max) {\n                max = sum;\n            }\n            result.Add(max);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <534c651c9850483abc1b4aa956a5cfe9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <534c651c9850483abc1b4aa956a5cfe9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659795329
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.Max();\n        long currentMax = maxValue;\n
    \       long currentMaxIndex = 0;\n        long currentMaxIndex2 = 0;\n        long
    currentMaxIndex3 = 0;\n        long currentMaxIndex4 = 0;\n        long currentMaxIndex5
    = 0;\n        long currentMaxIndex6 = 0;\n        long currentMaxIndex7 = 0;\n
    \       long currentMaxIndex8 = 0;\n        long currentMaxIndex9 = 0;\n        long
    currentMaxIndex10 = 0;\n        long currentMaxIndex11 = 0;\n        long currentMaxIndex12
    = 0;\n        long currentMaxIndex13 = 0;\n        long currentMaxIndex14 = 0;\n
    \       long currentMaxIndex15 = 0;\n        long currentMaxIndex16 = 0;\n        long
    currentMaxIndex17 = 0;\n        long currentMaxIndex18 = 0;\n        long currentMaxIndex19
    = 0;\n        long currentMaxIndex20 = 0;\n        long currentMaxIndex21 = 0;\n
    \       long currentMaxIndex22 = 0;\n        long currentMaxIndex23 = 0;\n        long
    currentMaxIndex24 = 0;\n        long currentMaxIndex25 = 0;\n        long currentMaxIndex26
    = 0;\n        long currentMaxIndex27 = 0;\n        long currentMaxIndex28 = 0;\n
    \       long currentMaxIndex29 = 0;\n        long currentMaxIndex30 = 0;\n        long
    currentMaxIndex31 = 0;\n        long currentMaxIndex32 = 0;\n        long currentMaxIndex33
    = 0;\n        long currentMaxIndex34 = 0;\n        long currentMaxIndex35 = 0;\n
    \       long currentMaxIndex36 = 0;\n        long currentMaxIndex37 = 0;\n        long
    currentMaxIndex38 = 0;\n        long currentMaxIndex39 = 0;\n        long currentMaxIndex40
    = 0;\n        long currentMaxIndex41 = 0;\n        long currentMaxIndex42 = 0;\n
    \       long currentMaxIndex43 = 0;\n        long currentMaxIndex44 = 0;\n        long
    currentMaxIndex45 = 0;\n        long currentMaxIndex46 = 0;\n        long currentMaxIndex47
    = 0;\n        long currentMaxIndex48 = 0;\n        long currentMaxIndex49 = 0;\n
    \       long currentMaxIndex50 = 0;\n        long currentMaxIndex51 = 0;\n        long
    currentMaxIndex52 = 0;\n        long currentMaxIndex53 = 0;\n        long currentMaxIndex54
    = 0;\n        long currentMaxIndex55 = 0;\n        long currentMaxIndex56 = 0;\n
    \       long currentMaxIndex57 = 0;\n        long currentMaxIndex58 = 0;\n        long
    currentMaxIndex59 = 0;\n        long currentMaxIndex60 = 0;\n        long currentMaxIndex61
    = 0;\n        long current\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps3iup6fy.cs(78,21): error CS1002: ; expected

    '
  timestamp: 1659795325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.Max();\n        long currentMax = maxValue;\n
    \       long currentSum = 0;\n        long currentCount = 0;\n        long currentSumOfSquares
    = 0;\n        foreach (long number in numbers) {\n            currentSum += number;\n
    \           currentCount += 1;\n            currentSumOfSquares += number * number;\n
    \           if (currentCount > 1) {\n                currentMax = Math.Max(currentMax,
    currentSum);\n                currentSum = 0;\n                currentCount =
    0;\n                currentSumOfSquares = 0;\n            }\n            if (currentCount
    == 1) {\n                result.Add(currentMax);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <09316c2456724b1392b54d6eb5e2c85d>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <09316c2456724b1392b54d6eb5e2c85d>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <09316c2456724b1392b54d6eb5e2c85d>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <09316c2456724b1392b54d6eb5e2c85d>:0
    \n"
  stdout: ''
  timestamp: 1659795325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.First();\n        long currentMax = maxValue;\n
    \       long currentMaxIndex = 0;\n        foreach (long number in numbers) {\n
    \           if (number > currentMax) {\n                currentMax = number;\n
    \               currentMaxIndex = result.Count;\n            }\n            if
    (number == currentMax) {\n                result.Add(number);\n            }\n
    \       }\n        if (currentMaxIndex < result.Count) {\n            result.RemoveAt(currentMaxIndex);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6c_qiq2q.cs(28,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659795329
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = numbers.First();\n        long
    currentMaxIndex = -1;\n        foreach (long number in numbers) {\n            if
    (number > currentMax) {\n                currentMax = number;\n                currentMaxIndex
    = result.Count;\n            }\n            if (number == currentMax) {\n                result.Add(number);\n
    \           }\n        }\n        if (currentMaxIndex != result.Count) {\n            result.Insert(currentMaxIndex,
    currentMax);\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk9ekjpwc.cs(28,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpk9ekjpwc.cs(15,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    '
  timestamp: 1659795329
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = 0;\n        long currentNumber
    = 0;\n        long currentSum = 0;\n        long currentSumOfSquares = 0;\n        long
    currentSumOfSquareOfDifferences = 0;\n        long currentSumOfDifferences = 0;\n
    \       long currentSumOfDifferenceSquares = 0;\n        long currentSumOfDifferenceSquareOfDifferences
    = 0;\n        long currentSumOfSquaresOfDifferences = 0;\n        long currentSumOfSquaresOfDifferenceSquares
    = 0;\n        long currentSumOfSquaresOfDifferenceSquareOfDifferences = 0;\n        long
    currentSumOfDifferenceSquareOfSquaresOfDifferences = 0;\n        long currentSumOfSquaresOfSquaresOfDifferenceSquareOfDifferences
    = 0;\n        long currentSumOfSquaresOfSquaresOfDifferenceSquareOfSquaresOfDifferences
    = 0;\n        long currentSumOfSquaresOfSquaresOfDifferenceSquareOfSquaresOfDifferences
    = 0;\n        long currentSumOfSquaresOfSquaresOfDifferenceSquareOfSquaresOfSquaresOfDifferences
    = 0;\n        long currentSumOfSquaresOfSquaresOfDifferenceSquareOfSquaresOfSquaresOfDifferences
    = 0;\n        long currentSumOfSquaresOfSquaresOfDifferenceSquareOfSquaresOfSquaresOfSquaresOfDifferences
    = 0;\n        long currentSumOfSquaresOfSquaresOfDifferenceSquareOfSquaresOfSquaresOfSquaresOfDifferences
    = 0;\n        long currentSumOfSquaresOfSquaresOfDifferenceSquareOfSquaresOfSquaresOfSquaresOfDifferences
    = 0;\n        long currentSumOfSquaresOfSquaresOfDifferenceSquareOfSquaresOfSquaresOfSquaresOfDifferences
    = 0;\n        long currentSumOfSquaresOfSquaresOfDifferenceSquareOfSquaresOfSquaresOfSquaresOfDifferences
    = 0;\n        long currentSumOfSquaresOfSquaresOfDifferenceSquareOfSquaresOfSquaresOfSquaresOfDifferences
    = 0;\n        long currentSumOfSquaresOfSquaresOfDifferenceSquareOfSquaresOfSquaresOfSquaresOfDifferences
    = 0;\n        long currentSumOfSquaresOfSquaresOfDifferenceSquareOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences
    = 0;\n        long currentSumOfSquaresOfSquaresOfDifferenceSquareOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences
    = 0;\n        long currentSumOfSquaresOfSquaresOfDifferenceSquareOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences
    = 0;\n        long currentSumOfSquaresOfSquares\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpng3vbfga.cs(43,42): error CS1002: ; expected

    '
  timestamp: 1659795329
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.Max();\n        long currentMax = maxValue;\n
    \       long currentMaxIndex = 0;\n        long currentMaxIndexValue = 0;\n        long
    currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3 = 0;\n        long
    currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5 = 0;\n        long
    currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7 = 0;\n        long
    currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9 = 0;\n        long
    currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11 = 0;\n        long
    currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13 = 0;\n        long
    currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15 = 0;\n        long
    currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17 = 0;\n        long
    currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19 = 0;\n        long
    currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21 = 0;\n        long
    currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23 = 0;\n        long
    currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25 = 0;\n        long
    currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27 = 0;\n        long
    currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29 = 0;\n        long
    currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31 = 0;\n        long
    currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33 = 0;\n        long
    currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35 = 0;\n        long
    currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37 = 0;\n        long
    currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39 = 0;\n        long
    currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41 = 0;\n        long
    currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43 = 0;\n        long
    currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45 = 0;\n        long
    currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47 = 0;\n        long
    currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49 = 0;\n        long
    currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51 = 0;\n        long
    currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53 = 0;\n        long
    currentMaxIndexValue54\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoxwoiwng.cs(71,36): error CS1002: ; expected

    '
  timestamp: 1659795325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = numbers.First();\n        foreach
    (long number in numbers) {\n            if (number > currentMax) {\n                result.Add(currentMax);\n
    \               max = currentMax;\n                currentMax = number;\n            }\n
    \           else if (number == currentMax) {\n                currentMax = number;\n
    \           }\n            else {\n                currentMax = currentMax + number;\n
    \           }\n        }\n        result.Add(currentMax);\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <863bd211fae2405f8a174109a4a1fe17>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <863bd211fae2405f8a174109a4a1fe17>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <863bd211fae2405f8a174109a4a1fe17>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <863bd211fae2405f8a174109a4a1fe17>:0
    \n"
  stdout: ''
  timestamp: 1659795329
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.Max();\n        long currentMax = maxValue;\n
    \       long currentMaxIndex = -1;\n        long currentMaxIndexValue = numbers.First();\n
    \       long currentMaxIndexValue2 = numbers.First();\n        long currentMaxIndexValue3
    = numbers.First();\n        long currentMaxIndexValue4 = numbers.First();\n        long
    currentMaxIndexValue5 = numbers.First();\n        long currentMaxIndexValue6 =
    numbers.First();\n        long currentMaxIndexValue7 = numbers.First();\n        long
    currentMaxIndexValue8 = numbers.First();\n        long currentMaxIndexValue9 =
    numbers.First();\n        long currentMaxIndexValue10 = numbers.First();\n        long
    currentMaxIndexValue11 = numbers.First();\n        long currentMaxIndexValue12
    = numbers.First();\n        long currentMaxIndexValue13 = numbers.First();\n        long
    currentMaxIndexValue14 = numbers.First();\n        long currentMaxIndexValue15
    = numbers.First();\n        long currentMaxIndexValue16 = numbers.First();\n        long
    currentMaxIndexValue17 = numbers.First();\n        long currentMaxIndexValue18
    = numbers.First();\n        long currentMaxIndexValue19 = numbers.First();\n        long
    currentMaxIndexValue20 = numbers.First();\n        long currentMaxIndexValue21
    = numbers.First();\n        long currentMaxIndexValue22 = numbers.First();\n        long
    currentMaxIndexValue23 = numbers.First();\n        long currentMaxIndexValue24
    = numbers.First();\n        long currentMaxIndexValue25 = numbers.First();\n        long
    currentMaxIndexValue26 = numbers.First();\n        long currentMaxIndexValue27
    = numbers.First();\n        long currentMaxIndexValue28 = numbers.First();\n        long
    currentMaxIndexValue29 = numbers.First();\n        long currentMaxIndexValue30
    = numbers.First();\n        long currentMaxIndexValue31 = numbers.First();\n        long
    currentMaxIndexValue32 = numbers.First();\n        long currentMaxIndexValue33
    = numbers.First();\n        long currentMaxIndexValue34 = numbers.First();\n        long
    currentMaxIndexValue35 = numbers.First();\n        long currentMaxIndexValue36
    = numbers.First();\n        long currentMaxIndexValue37 = numbers.First();\n        long
    currentMaxIndexValue38 = numbers.First();\n        long currentMaxIndexValue39
    = numbers.First();\n        long currentMaxIndexValue40 = numbers.First();\n        long
    currentMaxIndexValue41 = numbers.First();\n\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphax09c_8.cs(17,14): warning CS0219: The variable ''currentMaxIndex'' is
    assigned but its value is never used

    /tmp/tmphax09c_8.cs(13,30): error CS0161: ''Problem.RollingMax(List<long>)'':
    not all code paths return a value

    '
  timestamp: 1659795329
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.Max();\n        long currentMax = maxValue;\n
    \       long currentMaxIndex = -1;\n        long currentMaxValue = numbers.First();\n
    \       long currentMaxIndexValue = numbers.First();\n        foreach (long number
    in numbers) {\n            if (number > currentMaxValue) {\n                currentMaxValue
    = number;\n                currentMaxIndex = currentMaxIndexValue;\n            }\n
    \           if (number == currentMaxValue) {\n                currentMaxIndex++;\n
    \               currentMaxIndexValue = currentMaxIndex;\n            }\n            if
    (currentMaxIndex == currentMaxIndexValue) {\n                result.Add(currentMaxValue);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <654dda2ada034343aa3b45320c7db1d7>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <654dda2ada034343aa3b45320c7db1d7>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <654dda2ada034343aa3b45320c7db1d7>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <654dda2ada034343aa3b45320c7db1d7>:0
    \n"
  stdout: ''
  timestamp: 1659795329
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.Max();\n        long currentMax = maxValue;\n
    \       long currentSum = 0;\n        long currentSumOfSquares = 0;\n        long
    currentSumOfProducts = 0;\n        foreach (long number in numbers) {\n            currentSum
    += number;\n            currentSumOfSquares += number * number;\n            currentSumOfProducts
    += number * currentSum;\n            if (currentSum > currentMax) {\n                currentMax
    = currentSum;\n            }\n            if (currentSumOfSquares > currentMax
    * currentMax) {\n                currentMax = currentSumOfSquares;\n            }\n
    \           if (currentSumOfProducts > currentMax * currentMax) {\n                currentMax
    = currentSumOfProducts;\n            }\n            result.Add(currentMax);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <cd39658679104948ae68c83da240760a>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <cd39658679104948ae68c83da240760a>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <cd39658679104948ae68c83da240760a>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <cd39658679104948ae68c83da240760a>:0
    \n"
  stdout: ''
  timestamp: 1659795329
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.Max();\n        long currentMax = maxValue;\n
    \       long currentMaxIndex = 0;\n        long currentMaxIndex2 = 0;\n        long
    currentMaxIndex3 = 0;\n        long currentMaxIndex4 = 0;\n        long currentMaxIndex5
    = 0;\n        long currentMaxIndex6 = 0;\n        long currentMaxIndex7 = 0;\n
    \       long currentMaxIndex8 = 0;\n        long currentMaxIndex9 = 0;\n        long
    currentMaxIndex10 = 0;\n        long currentMaxIndex11 = 0;\n        long currentMaxIndex12
    = 0;\n        long currentMaxIndex13 = 0;\n        long currentMaxIndex14 = 0;\n
    \       long currentMaxIndex15 = 0;\n        long currentMaxIndex16 = 0;\n        long
    currentMaxIndex17 = 0;\n        long currentMaxIndex18 = 0;\n        long currentMaxIndex19
    = 0;\n        long currentMaxIndex20 = 0;\n        long currentMaxIndex21 = 0;\n
    \       long currentMaxIndex22 = 0;\n        long currentMaxIndex23 = 0;\n        long
    currentMaxIndex24 = 0;\n        long currentMaxIndex25 = 0;\n        long currentMaxIndex26
    = 0;\n        long currentMaxIndex27 = 0;\n        long currentMaxIndex28 = 0;\n
    \       long currentMaxIndex29 = 0;\n        long currentMaxIndex30 = 0;\n        long
    currentMaxIndex31 = 0;\n        long currentMaxIndex32 = 0;\n        long currentMaxIndex33
    = 0;\n        long currentMaxIndex34 = 0;\n        long currentMaxIndex35 = 0;\n
    \       long currentMaxIndex36 = 0;\n        long currentMaxIndex37 = 0;\n        long
    currentMaxIndex38 = 0;\n        long currentMaxIndex39 = 0;\n        long currentMaxIndex40
    = 0;\n        long currentMaxIndex41 = 0;\n        long currentMaxIndex42 = 0;\n
    \       long currentMaxIndex43 = 0;\n        long currentMaxIndex44 = 0;\n        long
    currentMaxIndex45 = 0;\n        long currentMaxIndex46 = 0;\n        long currentMaxIndex47
    = 0;\n        long currentMaxIndex48 = 0;\n        long currentMaxIndex49 = 0;\n
    \       long currentMaxIndex50 = 0;\n        long currentMaxIndex51 = 0;\n        long
    currentMaxIndex52 = 0;\n        long currentMaxIndex53 = 0;\n        long currentMaxIndex54
    = 0;\n        long currentMaxIndex55 = 0;\n        long currentMaxIndex56 = 0;\n
    \       long currentMaxIndex57 = 0;\n        long currentMaxIndex58 = 0;\n        long
    currentMaxIndex59 = 0;\n        long currentMaxIndex60 = 0;\n        long currentMaxIndex61
    = 0;\n        long current\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps3iup6fy.cs(78,21): error CS1002: ; expected

    '
  timestamp: 1659795325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = 0;\n        long currentMaxIndex
    = 0;\n        long currentMaxValue = numbers[0];\n        long currentMaxValueIndex
    = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueValue = numbers[currentMaxValueIndex];\n
    \       long currentMaxValueValueIndex = numbers.IndexOf(currentMaxValueValue);\n
    \       long currentMaxValueValueValue = numbers[currentMaxValueValueIndex];\n
    \       long currentMaxValueValueValueIndex = numbers.IndexOf(currentMaxValueValueValue);\n
    \       long currentMaxValueValueValueValue = numbers[currentMaxValueValueValueIndex];\n
    \       long currentMaxValueValueValueValueIndex = numbers.IndexOf(currentMaxValueValueValueValue);\n
    \       long currentMaxValueValueValueValueValue = numbers[currentMaxValueValueValueValueIndex];\n
    \       long currentMaxValueValueValueValueValueIndex = numbers.IndexOf(currentMaxValueValueValueValueValue);\n
    \       long currentMaxValueValueValueValueValueValue = numbers[currentMaxValueValueValueValueValueIndex];\n
    \       long currentMaxValueValueValueValueValueIndex = numbers.IndexOf(currentMaxValueValueValueValueValue);\n
    \       long currentMaxValueValueValueValueValueValue = numbers[currentMaxValueValueValueValueValueIndex];\n
    \       long currentMaxValueValueValueValueValueValueIndex = numbers.IndexOf(currentMaxValueValueValueValueValue);\n
    \       long currentMaxValueValueValueValueValueValueValue = numbers[currentMaxValueValueValueValueValueValueIndex];\n
    \       long currentMaxValueValueValueValueValueValueIndex = numbers.IndexOf(currentMaxValueValueValueValueValue);\n
    \       long currentMaxValueValueValueValueValueValueValue = numbers[currentMaxValueValueValueValueValueValueIndex];\n
    \       long currentMaxValueValueValueValueValueValueIndex = numbers.IndexOf(currentMaxValueValueValueValueValue);\n
    \       long currentMaxValueValueValueValueValueValueValue = numbers[currentMaxValueValueValueValueValueValueIndex];\n
    \       long currentMaxValueValueValueValueValueValueIndex = numbers.IndexOf(currentMaxValueValueValueValueValue);\n
    \       long currentMaxValueValueValueValueValueValueValue = numbers[currentMaxValueValueValueValueValueValueIndex];\n
    \       long currentMaxValueValueValueValueValueValueIndex = numbers.IndexOf(currentMaxValueValueValueValueValue);\n
    \       long currentMaxValueValueValueValueValueValueValue = numbers[currentMaxValueValueValueValueValueValueIndex];\n
    \       long currentMaxValueValueValueValueValueValueIndex = numbers.IndexOf(currentMaxValueValueValueValueValue);\n
    \       long currentMaxValueValue\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbex9zm6t.cs(42,34): error CS1002: ; expected

    '
  timestamp: 1659795328
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.Max();\n        long currentMax = maxValue;\n
    \       long currentSum = 0;\n        long currentSumOfSquares = 0;\n        long
    currentSumOfSquareOfDifferences = 0;\n        long currentSumOfSquareOfDifferenceOfDifferences
    = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferences = 0;\n
    \       long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferences
    = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences
    = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences
    = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences
    = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences
    = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences
    = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences
    = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences
    = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences
    = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences
    = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences
    = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences
    = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences
    = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences
    = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences
    = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifference\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp43i0lv57.cs(37,92): error CS1002: ; expected

    '
  timestamp: 1659795325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.Max();\n        long currentMaxValue = maxValue;\n
    \       long currentMaxIndex = 0;\n        long currentMaxIndexValue = 0;\n        long
    currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3 = 0;\n        long
    currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5 = 0;\n        long
    currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7 = 0;\n        long
    currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9 = 0;\n        long
    currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11 = 0;\n        long
    currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13 = 0;\n        long
    currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15 = 0;\n        long
    currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17 = 0;\n        long
    currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19 = 0;\n        long
    currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21 = 0;\n        long
    currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23 = 0;\n        long
    currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25 = 0;\n        long
    currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27 = 0;\n        long
    currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29 = 0;\n        long
    currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31 = 0;\n        long
    currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33 = 0;\n        long
    currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35 = 0;\n        long
    currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37 = 0;\n        long
    currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39 = 0;\n        long
    currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41 = 0;\n        long
    currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43 = 0;\n        long
    currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45 = 0;\n        long
    currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47 = 0;\n        long
    currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49 = 0;\n        long
    currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51 = 0;\n        long
    currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53 = 0;\n        long
    currentMaxIndexValue54\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6d75ykon.cs(71,36): error CS1002: ; expected

    '
  timestamp: 1659795326
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        var rollingMax = new List<long>();\n
    \       var rollingMaxIndex = 0;\n        var rollingMaxValue = numbers.First();\n
    \       var rollingMaxMaxValue = rollingMaxValue;\n        var rollingMaxMaxIndex
    = rollingMaxIndex;\n        foreach (var number in numbers) {\n            if
    (number > rollingMaxValue) {\n                rollingMaxValue = number;\n                rollingMaxMaxIndex
    = rollingMaxIndex;\n            }\n            rollingMax.Add(number);\n            rollingMaxMaxValue
    = Math.Max(rollingMaxMaxValue, number);\n            rollingMaxMaxIndex++;\n        }\n
    \       rollingMax.Add(rollingMaxValue);\n        rollingMax.Add(rollingMaxMaxValue);\n
    \       rollingMax.Add(rollingMaxMaxIndex);\n        return rollingMax;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00009] in <a6cf266322204d65be8808aecf098281>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <a6cf266322204d65be8808aecf098281>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00009] in <a6cf266322204d65be8808aecf098281>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <a6cf266322204d65be8808aecf098281>:0
    \n"
  stdout: ''
  timestamp: 1659795329
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = numbers.First();\n        long
    currentMaxIndex = -1;\n        foreach (long number in numbers) {\n            if
    (number > currentMax) {\n                currentMax = number;\n                currentMaxIndex
    = result.Count;\n            }\n            if (number == currentMax) {\n                result.Add(number);\n
    \           }\n        }\n        if (currentMaxIndex < result.Count) {\n            result.Insert(currentMaxIndex,
    currentMax);\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr0s_onzq.cs(28,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpr0s_onzq.cs(15,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    '
  timestamp: 1659795329
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = 0;\n        long currentNumber
    = 0;\n        long currentSum = 0;\n        foreach (long number in numbers) {\n
    \           currentNumber = number;\n            currentSum = currentNumber;\n
    \           while (currentSum <= currentMax) {\n                currentMax = currentSum;\n
    \               currentSum = 0;\n                foreach (long number in numbers)
    {\n                    if (number > currentMax) {\n                        currentMax
    = number;\n                        currentSum = currentNumber;\n                    }\n
    \                   currentSum += number;\n                }\n                result.Add(currentMax);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9nr3rb6a.cs(25,31): error CS0136: A local or parameter named ''number''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp9nr3rb6a.cs(15,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    '
  timestamp: 1659795329
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = 0;\n        long currentSum =
    0;\n        foreach (long number in numbers) {\n            currentSum += number;\n
    \           if (currentSum > max) {\n                max = currentSum;\n                currentMax
    = number;\n            }\n        }\n        result.Add(currentMax);\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <db6f2a7954114a1082f29a1a8483015a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <db6f2a7954114a1082f29a1a8483015a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659795329
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = numbers.Max();\n        long current = max;\n        long rollingMax
    = max;\n        foreach (long number in numbers) {\n            if (number > rollingMax)
    {\n                rollingMax = number;\n            }\n            if (number
    == current) {\n                result.Add(number);\n            }\n            current
    = number;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <e2f356318eb940c8b134f0b520d7057a>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <e2f356318eb940c8b134f0b520d7057a>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <e2f356318eb940c8b134f0b520d7057a>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <e2f356318eb940c8b134f0b520d7057a>:0
    \n"
  stdout: ''
  timestamp: 1659795329
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long current = 0;\n        foreach (long number
    in numbers) {\n            if (number > max) {\n                max = number;\n
    \               current = 1;\n            }\n            else if (number == max)
    {\n                current++;\n            }\n            else {\n                result.Add(max);\n
    \               max = number;\n                current = 1;\n            }\n        }\n
    \       result.Add(max);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f166d9c9f9ba4a1bb98634c0e2c8aabc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f166d9c9f9ba4a1bb98634c0e2c8aabc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659795329
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        var rollingMax = new List<long>();\n
    \       var rollingMaxIndex = 0;\n        var rollingMaxValue = numbers.First();\n
    \       var rollingMaxMaxValue = rollingMaxValue;\n        foreach (var number
    in numbers) {\n            if (number > rollingMaxValue) {\n                rollingMaxValue
    = number;\n                rollingMaxMaxValue = rollingMaxValue;\n            }\n
    \           if (number == rollingMaxValue) {\n                rollingMax.Add(number);\n
    \               rollingMaxIndex++;\n            }\n            if (rollingMaxIndex
    == rollingMax.Count) {\n                rollingMax.Add(rollingMaxMaxValue);\n
    \           }\n        }\n        return rollingMax;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00009] in <f497fbfed3a141b5a66715d1d2100d71>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <f497fbfed3a141b5a66715d1d2100d71>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00009] in <f497fbfed3a141b5a66715d1d2100d71>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <f497fbfed3a141b5a66715d1d2100d71>:0
    \n"
  stdout: ''
  timestamp: 1659795329
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.Max();\n        long currentMax = maxValue;\n
    \       long currentMaxIndex = 0;\n        long currentMaxIndexValue = 0;\n        long
    currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3 = 0;\n        long
    currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5 = 0;\n        long
    currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7 = 0;\n        long
    currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9 = 0;\n        long
    currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11 = 0;\n        long
    currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13 = 0;\n        long
    currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15 = 0;\n        long
    currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17 = 0;\n        long
    currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19 = 0;\n        long
    currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21 = 0;\n        long
    currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23 = 0;\n        long
    currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25 = 0;\n        long
    currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27 = 0;\n        long
    currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29 = 0;\n        long
    currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31 = 0;\n        long
    currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33 = 0;\n        long
    currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35 = 0;\n        long
    currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37 = 0;\n        long
    currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39 = 0;\n        long
    currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41 = 0;\n        long
    currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43 = 0;\n        long
    currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45 = 0;\n        long
    currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47 = 0;\n        long
    currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49 = 0;\n        long
    currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51 = 0;\n        long
    currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53 = 0;\n        long
    currentMaxIndexValue54\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoxwoiwng.cs(71,36): error CS1002: ; expected

    '
  timestamp: 1659795325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.Max();\n        long currentMax = maxValue;\n
    \       long currentMaxIndex = 0;\n        long currentMaxIndexValue = 0;\n        long
    currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3 = 0;\n        long
    currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5 = 0;\n        long
    currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7 = 0;\n        long
    currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9 = 0;\n        long
    currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11 = 0;\n        long
    currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13 = 0;\n        long
    currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15 = 0;\n        long
    currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17 = 0;\n        long
    currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19 = 0;\n        long
    currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21 = 0;\n        long
    currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23 = 0;\n        long
    currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25 = 0;\n        long
    currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27 = 0;\n        long
    currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29 = 0;\n        long
    currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31 = 0;\n        long
    currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33 = 0;\n        long
    currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35 = 0;\n        long
    currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37 = 0;\n        long
    currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39 = 0;\n        long
    currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41 = 0;\n        long
    currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43 = 0;\n        long
    currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45 = 0;\n        long
    currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47 = 0;\n        long
    currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49 = 0;\n        long
    currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51 = 0;\n        long
    currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53 = 0;\n        long
    currentMaxIndexValue54\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoxwoiwng.cs(71,36): error CS1002: ; expected

    '
  timestamp: 1659795325
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long cur = 0;\n        foreach (long n in numbers)
    {\n            max = Math.Max(max, n);\n            cur = n;\n            result.Add(max);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e726899519bf4bc98d487188757978e9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e726899519bf4bc98d487188757978e9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659795329
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = 0;\n        long currentNumber
    = 0;\n        long currentSum = 0;\n        long currentSumOfSquares = 0;\n        long
    currentSumOfSquareRoots = 0;\n        long currentSumOfSquareRootOfSquares = 0;\n
    \       long currentSumOfSquareRootOfSquareRoots = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquares
    = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRoots = 0;\n        long
    currentSumOfSquareRootOfSquareRootOfSquareRootOfSquares = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares
    = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares
    = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares
    = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares
    = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares
    = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares
    = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares
    = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares
    = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares
    = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares
    = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares
    = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares
    = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares
    = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares
    = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares
    = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares
    = 0;\n        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnumrr61o.cs(27,14): error CS0128: A local variable or function named ''currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares''
    is already defined in this scope

    /tmp/tmpnumrr61o.cs(28,14): error CS0128: A local variable or function named ''currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares''
    is already defined in this scope

    /tmp/tmpnumrr61o.cs(30,14): error CS0128: A local variable or function named ''currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares''
    is already defined in this scope

    /tmp/tmpnumrr61o.cs(32,14): error CS0128: A local variable or function named ''currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares''
    is already defined in this scope

    /tmp/tmpnumrr61o.cs(33,14): error CS0128: A local variable or function named ''currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares''
    is already defined in this scope

    /tmp/tmpnumrr61o.cs(34,14): error CS0128: A local variable or function named ''currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares''
    is already defined in this scope

    /tmp/tmpnumrr61o.cs(35,14): error CS0128: A local variable or function named ''currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares''
    is already defined in this scope

    /tmp/tmpnumrr61o.cs(36,14): error CS0128: A local variable or function named ''currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares''
    is already defined in this scope

    /tmp/tmpnumrr61o.cs(37,14): error CS0128: A local variable or function named ''currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares''
    is already defined in this scope

    /tmp/tmpnumrr61o.cs(38,14): error CS0128: A local variable or function named ''currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareR'
  timestamp: 1659795329
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.Max();\n        long currentMax = maxValue;\n
    \       long currentMaxIndex = 0;\n        long currentMaxIndex = numbers.IndexOf(currentMax);\n
    \       long currentMaxValue = numbers.ElementAt(currentMaxIndex);\n        long
    currentMaxIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValue
    = numbers.ElementAt(currentMaxIndex);\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValue = numbers.ElementAt(currentMaxIndex);\n        long
    currentMaxIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValue
    = numbers.ElementAt(currentMaxIndex);\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValue = numbers.ElementAt(currentMaxIndex);\n        long
    currentMaxIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValue
    = numbers.ElementAt(currentMaxIndex);\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValue = numbers.ElementAt(currentMaxIndex);\n        long
    currentMaxIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValue
    = numbers.ElementAt(currentMaxIndex);\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValue = numbers.ElementAt(currentMaxIndex);\n        long
    currentMaxIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValue
    = numbers.ElementAt(currentMaxIndex);\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValue = numbers.ElementAt(currentMaxIndex);\n        long
    currentMaxIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValue
    = numbers.ElementAt(currentMaxIndex);\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValue = numbers.ElementAt(currentMaxIndex);\n        long
    currentMaxIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValue
    = numbers.ElementAt(currentMaxIndex);\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValue = numbers.ElementAt(currentMaxIndex);\n        long
    currentMaxIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValue
    = numbers.ElementAt(currentMaxIndex);\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValue = numbers.ElementAt(currentMaxIndex);\n        long
    currentMaxIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValue
    = numbers.ElementAt(currentMaxIndex);\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValue = numbers.ElementAt(currentMaxIndex);\n        long
    currentMaxIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValue
    = numbers.ElementAt(currentMaxIndex);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpaodilpj8.cs(18,14): error CS0128: A local variable or function named ''currentMaxIndex''
    is already defined in this scope

    /tmp/tmpaodilpj8.cs(19,50): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpaodilpj8.cs(20,14): error CS0128: A local variable or function named ''currentMaxIndex''
    is already defined in this scope

    /tmp/tmpaodilpj8.cs(21,14): error CS0128: A local variable or function named ''currentMaxValue''
    is already defined in this scope

    /tmp/tmpaodilpj8.cs(21,50): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpaodilpj8.cs(22,14): error CS0128: A local variable or function named ''currentMaxIndex''
    is already defined in this scope

    /tmp/tmpaodilpj8.cs(23,14): error CS0128: A local variable or function named ''currentMaxValue''
    is already defined in this scope

    /tmp/tmpaodilpj8.cs(23,50): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpaodilpj8.cs(24,14): error CS0128: A local variable or function named ''currentMaxIndex''
    is already defined in this scope

    /tmp/tmpaodilpj8.cs(25,14): error CS0128: A local variable or function named ''currentMaxValue''
    is already defined in this scope

    /tmp/tmpaodilpj8.cs(25,50): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpaodilpj8.cs(26,14): error CS0128: A local variable or function named ''currentMaxIndex''
    is already defined in this scope

    /tmp/tmpaodilpj8.cs(27,14): error CS0128: A local variable or function named ''currentMaxValue''
    is already defined in this scope

    /tmp/tmpaodilpj8.cs(27,50): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpaodilpj8.cs(28,14): error CS0128: A local variable or function named ''currentMaxIndex''
    is already defined in this scope

    /tmp/tmpaodilpj8.cs(29,14): error CS0128: A local variable or function named ''currentMaxValue''
    is already defined in this scope

    /tmp/tmpaodilpj8.cs(29,50): error CS1503: Argument 2: cannot co'
  timestamp: 1659795329
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> max = new List<long>();\n
    \       long maxElement = numbers.Max();\n        long currentMaxElement = maxElement;\n
    \       long currentMax = maxElement;\n        long currentMaxIndex = -1;\n        long
    currentMaxIndex2 = -1;\n        long currentMaxIndex3 = -1;\n        long currentMaxIndex4
    = -1;\n        long currentMaxIndex5 = -1;\n        long currentMaxIndex6 = -1;\n
    \       long currentMaxIndex7 = -1;\n        long currentMaxIndex8 = -1;\n        long
    currentMaxIndex9 = -1;\n        long currentMaxIndex10 = -1;\n        long currentMaxIndex11
    = -1;\n        long currentMaxIndex12 = -1;\n        long currentMaxIndex13 =
    -1;\n        long currentMaxIndex14 = -1;\n        long currentMaxIndex15 = -1;\n
    \       long currentMaxIndex16 = -1;\n        long currentMaxIndex17 = -1;\n        long
    currentMaxIndex18 = -1;\n        long currentMaxIndex19 = -1;\n        long currentMaxIndex20
    = -1;\n        long currentMaxIndex21 = -1;\n        long currentMaxIndex22 =
    -1;\n        long currentMaxIndex23 = -1;\n        long currentMaxIndex24 = -1;\n
    \       long currentMaxIndex25 = -1;\n        long currentMaxIndex26 = -1;\n        long
    currentMaxIndex27 = -1;\n        long currentMaxIndex28 = -1;\n        long currentMaxIndex29
    = -1;\n        long currentMaxIndex30 = -1;\n        long currentMaxIndex31 =
    -1;\n        long currentMaxIndex32 = -1;\n        long currentMaxIndex33 = -1;\n
    \       long currentMaxIndex34 = -1;\n        long currentMaxIndex35 = -1;\n        long
    currentMaxIndex36 = -1;\n        long currentMaxIndex37 = -1;\n        long currentMaxIndex38
    = -1;\n        long currentMaxIndex39 = -1;\n        long currentMaxIndex40 =
    -1;\n        long currentMaxIndex41 = -1;\n        long currentMaxIndex42 = -1;\n
    \       long currentMaxIndex43 = -1;\n        long currentMaxIndex44 = -1;\n        long
    currentMaxIndex45 = -1;\n        long currentMaxIndex46 = -1;\n        long currentMaxIndex47
    = -1;\n        long currentMaxIndex48 = -1;\n        long currentMaxIndex49 =
    -1;\n        long currentMaxIndex50 = -1;\n        long currentMaxIndex51 = -1;\n
    \       long currentMaxIndex52 = -1;\n        long currentMaxIndex53 = -1;\n        long
    currentMaxIndex54 = -1;\n        long current\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqohn_t0j.cs(72,21): error CS1002: ; expected

    '
  timestamp: 1659795329
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        var result = new List<long>();\n        var
    rollingMax = new List<long>();\n        var rollingMaxIndex = 0;\n        var
    currentMax = numbers.First();\n        rollingMax.Add(currentMax);\n        foreach
    (var number in numbers) {\n            if (number > currentMax) {\n                currentMax
    = number;\n                rollingMax.Add(number);\n                rollingMaxIndex++;\n
    \           }\n            else {\n                rollingMax[rollingMaxIndex]
    = number;\n            }\n        }\n        result.AddRange(rollingMax);\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x0000f] in <3472f2003c174f14977160c03fe42bc7>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <3472f2003c174f14977160c03fe42bc7>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x0000f] in <3472f2003c174f14977160c03fe42bc7>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <3472f2003c174f14977160c03fe42bc7>:0
    \n"
  stdout: ''
  timestamp: 1659795330
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = 0;\n        long currentSum =
    0;\n        long sum = 0;\n        foreach (long number in numbers) {\n            currentSum
    = currentSum + number;\n            if (currentSum > max) {\n                max
    = currentSum;\n                currentMax = number;\n            }\n            sum
    += number;\n        }\n        result.Add(currentMax);\n        result.Add(max);\n
    \       result.Add(sum);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <243278cf9d4342ed9e28802da19af814>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <243278cf9d4342ed9e28802da19af814>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659795330
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = 0;\n        long currentMaxIndex
    = 0;\n        long currentMaxValue = numbers[0];\n        long currentMaxIndex
    = numbers.IndexOf(currentMaxValue);\n        long currentMaxValue = numbers[0];\n
    \       long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n        long
    currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMax\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp15ff40qz.cs(66,24): error CS1002: ; expected

    '
  timestamp: 1659795329
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.Max();\n        long currentMax = maxValue;\n
    \       long currentSum = 0;\n        long currentSumOfSquares = 0;\n        long
    currentSumOfProducts = 0;\n        long currentProduct = 1;\n        long currentProductOfSquares
    = 0;\n        long currentProductOfProducts = 0;\n        foreach (long number
    in numbers) {\n            currentSum += number;\n            currentSumOfSquares
    += number * number;\n            currentSumOfProducts += number * currentProduct;\n
    \           currentProduct *= number;\n            currentProductOfSquares +=
    currentProduct * currentProduct;\n            currentProductOfProducts += currentProduct
    * currentSum;\n        }\n        result.Add(currentMax);\n        result.Add(currentSum);\n
    \       result.Add(currentSumOfSquares);\n        result.Add(currentSumOfProducts);\n
    \       result.Add(currentProduct);\n        result.Add(currentProductOfSquares);\n
    \       result.Add(currentProductOfProducts);\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <3e931c944a73474285edb17436bd1c53>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <3e931c944a73474285edb17436bd1c53>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <3e931c944a73474285edb17436bd1c53>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <3e931c944a73474285edb17436bd1c53>:0
    \n"
  stdout: ''
  timestamp: 1659795330
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = numbers.Max();\n        long current = numbers.First();\n        long
    rollingMax = current;\n        long rollingMaxIndex = -1;\n        for (int i
    = 0; i < numbers.Count; i++) {\n            long next = numbers[i];\n            if
    (next > rollingMax) {\n                rollingMax = next;\n                rollingMaxIndex
    = i;\n            }\n            if (next == max) {\n                result.Add(rollingMax);\n
    \               rollingMax = current;\n                rollingMaxIndex = i;\n
    \           }\n            current = next;\n        }\n        result.Add(rollingMax);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <e7e6fb7c765c4726afa701901f91e801>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <e7e6fb7c765c4726afa701901f91e801>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <e7e6fb7c765c4726afa701901f91e801>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <e7e6fb7c765c4726afa701901f91e801>:0
    \n"
  stdout: ''
  timestamp: 1659795330
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long maxIndex = 0;\n        long currentMax = numbers.First();\n
    \       long currentMaxIndex = numbers.First();\n        foreach (long number
    in numbers) {\n            if (number > currentMax) {\n                max = number;\n
    \               maxIndex = currentMaxIndex;\n            }\n            currentMax
    = number;\n            currentMaxIndex++;\n        }\n        result.Add(max);\n
    \       result.Add(maxIndex);\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x0000d] in <02a7ccd89ede4faeb93cff5ff4fc1a02>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <02a7ccd89ede4faeb93cff5ff4fc1a02>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x0000d] in <02a7ccd89ede4faeb93cff5ff4fc1a02>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <02a7ccd89ede4faeb93cff5ff4fc1a02>:0
    \n"
  stdout: ''
  timestamp: 1659795330
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        var rollingMax = new List<long>();\n
    \       var currentMax = numbers.First();\n        var currentMaxIndex = 0;\n
    \       var currentMaxValue = numbers.First();\n        rollingMax.Add(currentMax);\n
    \       numbers.Remove(currentMax);\n        foreach (var number in numbers) {\n
    \           if (number > currentMax) {\n                currentMax = number;\n
    \               currentMaxIndex = rollingMax.Count;\n                currentMaxValue
    = number;\n            }\n            rollingMax.Add(number);\n        }\n        return
    rollingMax;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <6d6369520b2741ef8b3c349497188bc6>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <6d6369520b2741ef8b3c349497188bc6>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <6d6369520b2741ef8b3c349497188bc6>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <6d6369520b2741ef8b3c349497188bc6>:0
    \n"
  stdout: ''
  timestamp: 1659795330
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.Max();\n        long currentMax = maxValue;\n
    \       long currentMaxIndex = -1;\n        long currentMaxIndexInResult = -1;\n
    \       long currentMaxIndexInResultInResult = -1;\n        long currentMaxIndexInResultInResultInResult
    = -1;\n        long currentMaxIndexInResultInResultInResultInResult = -1;\n        long
    currentMaxIndexInResultInResultInResultInResultInResult = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResult
    = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResult
    = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult
    = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult
    = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult
    = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResult\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqfp96ffh.cs(38,85): error CS1002: ; expected

    '
  timestamp: 1659795329
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        var result = new List<long>();\n        var
    rollingMax = new List<long>();\n        var rollingMaxIndex = 0;\n        var
    rollingMaxValue = numbers.First();\n        var rollingMaxCount = 1;\n        foreach
    (var number in numbers) {\n            if (number > rollingMaxValue) {\n                rollingMax.Add(rollingMaxValue);\n
    \               rollingMaxValue = number;\n                rollingMaxCount = 1;\n
    \           } else {\n                rollingMaxCount++;\n            }\n            if
    (rollingMaxCount > numbers.Count) {\n                result.Add(rollingMaxValue);\n
    \               rollingMaxValue = number;\n                rollingMaxCount = 1;\n
    \               rollingMaxIndex++;\n            }\n        }\n        if (rollingMaxCount
    > numbers.Count) {\n            result.Add(rollingMaxValue);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x0000f] in <ae5188dbd266409ab6c30810d5ca1772>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <ae5188dbd266409ab6c30810d5ca1772>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x0000f] in <ae5188dbd266409ab6c30810d5ca1772>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <ae5188dbd266409ab6c30810d5ca1772>:0
    \n"
  stdout: ''
  timestamp: 1659795330
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = 0;\n        long currentSum =
    0;\n        long sum = 0;\n        foreach (long number in numbers) {\n            currentSum
    += number;\n            if (currentSum > max) {\n                max = currentSum;\n
    \               currentMax = number;\n            }\n            sum += number;\n
    \       }\n        result.Add(currentMax);\n        result.Add(max);\n        result.Add(sum);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c0865505ac3a4f749e38255adbd0fddf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c0865505ac3a4f749e38255adbd0fddf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659795330
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = 0;\n        long currentMaxIndex
    = 0;\n        long currentMaxValue = numbers[0];\n        long currentMaxIndex
    = numbers.IndexOf(currentMaxValue);\n        long currentMaxValue = numbers[0];\n
    \       long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n        long
    currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n
    \       long currentMax\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp15ff40qz.cs(66,24): error CS1002: ; expected

    '
  timestamp: 1659795329
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = numbers.Max();\n        long currentMax = max;\n        long
    currentMaxIndex = -1;\n        long currentMaxValue = numbers.First();\n        for
    (int i = 0; i < numbers.Count; i++) {\n            long value = numbers[i];\n
    \           if (value > currentMax) {\n                currentMax = value;\n                currentMaxIndex
    = i;\n                currentMaxValue = numbers[i];\n            }\n        }\n
    \       result.Add(currentMaxValue);\n        for (int i = currentMaxIndex + 1;
    i < numbers.Count; i++) {\n            long value = numbers[i];\n            if
    (value > currentMax) {\n                currentMax = value;\n                currentMaxIndex
    = i;\n                currentMaxValue = numbers[i];\n            }\n            result.Add(currentMaxValue);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5gurs03_.cs(28,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659795330
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = 0;\n        long currentMaxIndex
    = 0;\n        long currentMaxValue = numbers[0];\n        foreach (long number
    in numbers) {\n            if (number > currentMaxValue) {\n                currentMaxValue
    = number;\n                currentMaxIndex = result.Count;\n            }\n            if
    (number > max) {\n                max = number;\n                currentMax =
    number;\n                currentMaxIndex = result.Count;\n            }\n            result.Insert(currentMaxIndex,
    currentMax);\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdsayx5s6.cs(29,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659795330
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = 0;\n        long currentMaxIndex
    = 0;\n        foreach (long number in numbers) {\n            if (number > max)
    {\n                max = number;\n                currentMax = max;\n                currentMaxIndex
    = result.Count;\n            }\n            else if (number == max) {\n                currentMax
    = number;\n                currentMaxIndex = result.Count;\n            }\n            else
    if (number < max) {\n                result.Add(max);\n                max = number;\n
    \               currentMax = max;\n                currentMaxIndex = result.Count;\n
    \           }\n        }\n        result.Add(max);\n        result.Add(currentMax);\n
    \       result.Add(currentMaxIndex);\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b0e9f3a812e24011bff66ed8a9aed3c8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b0e9f3a812e24011bff66ed8a9aed3c8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659795330
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long maxValue = numbers.Max();\n        long currentMax = maxValue;\n
    \       long currentMaxIndex = 0;\n        long currentMaxIndexValue = 0;\n        long
    currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3 = 0;\n        long
    currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5 = 0;\n        long
    currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7 = 0;\n        long
    currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9 = 0;\n        long
    currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11 = 0;\n        long
    currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13 = 0;\n        long
    currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15 = 0;\n        long
    currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17 = 0;\n        long
    currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19 = 0;\n        long
    currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21 = 0;\n        long
    currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23 = 0;\n        long
    currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25 = 0;\n        long
    currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27 = 0;\n        long
    currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29 = 0;\n        long
    currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31 = 0;\n        long
    currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33 = 0;\n        long
    currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35 = 0;\n        long
    currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37 = 0;\n        long
    currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39 = 0;\n        long
    currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41 = 0;\n        long
    currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43 = 0;\n        long
    currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45 = 0;\n        long
    currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47 = 0;\n        long
    currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49 = 0;\n        long
    currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51 = 0;\n        long
    currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53 = 0;\n        long
    currentMaxIndexValue54\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoxwoiwng.cs(71,36): error CS1002: ; expected

    '
  timestamp: 1659795325
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long currentMax = 0;\n        long currentNumber
    = 0;\n        foreach (long number in numbers) {\n            currentNumber =
    number;\n            currentMax = number;\n            while (currentNumber !=
    0) {\n                currentMax = Math.Max(currentMax, currentNumber);\n                currentNumber
    = currentNumber / 10;\n            }\n            result.Add(currentMax);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b8577f4993c241cd86c4fca2602a1c7a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b8577f4993c241cd86c4fca2602a1c7a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659795330
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        var result = new List<long>();\n        var
    rollingMax = new List<long>();\n        var rollingMaxIndex = 0;\n        var
    rollingMaxValue = numbers.First();\n        rollingMax.Add(rollingMaxValue);\n
    \       numbers.RemoveAt(0);\n        foreach (var number in numbers) {\n            if
    (number > rollingMaxValue) {\n                rollingMaxValue = number;\n                rollingMax.Add(rollingMaxValue);\n
    \           }\n            else {\n                rollingMaxValue = rollingMax[rollingMaxIndex];\n
    \               rollingMaxIndex++;\n                rollingMax.Add(rollingMaxValue);\n
    \           }\n            result.Add(rollingMaxValue);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x0000f] in <f741394d4d2d4dbf995d1571241abe86>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <f741394d4d2d4dbf995d1571241abe86>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x0000f] in <f741394d4d2d4dbf995d1571241abe86>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <f741394d4d2d4dbf995d1571241abe86>:0
    \n"
  stdout: ''
  timestamp: 1659795330
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long cur = 0;\n        long maxIndex = 0;\n        foreach
    (long n in numbers) {\n            if (n > max) {\n                max = n;\n
    \               maxIndex = result.Count;\n            }\n            long index
    = maxIndex - 1;\n            while (index >= 0) {\n                if (result[index]
    > n) {\n                    result[index] = n;\n                    break;\n                }\n
    \               index--;\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsz1mbgrr.cs(25,28): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpsz1mbgrr.cs(26,28): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpsz1mbgrr.cs(16,14): warning CS0219: The variable ''cur'' is assigned but
    its value is never used

    '
  timestamp: 1659795330
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long current = 0;\n        long last = 0;\n        foreach
    (long number in numbers) {\n            current = number;\n            if (number
    > max) {\n                max = number;\n            }\n            if (number
    == max) {\n                result.Add(last);\n                last = current;\n
    \           }\n        }\n        result.Add(last);\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1608acfacdb14cf9bdbdcdc439a1adc0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1608acfacdb14cf9bdbdcdc439a1adc0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659795330
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n
    \       long max = 0;\n        long current = numbers.First();\n        long previous
    = numbers.First();\n        long currentMax = numbers.First();\n        long previousMax
    = numbers.First();\n        foreach (long number in numbers) {\n            if
    (number > current) {\n                currentMax = current;\n                current
    = 0;\n            }\n            if (number > previous) {\n                previousMax
    = previous;\n                previous = 0;\n            }\n            if (number
    > currentMax - previousMax) {\n                currentMax = number;\n            }\n
    \           if (number > previousMax - currentMax) {\n                previousMax
    = number;\n            }\n            current = number;\n            previous
    = number;\n            result.Add(number);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <bb87c59657c147de820fa08a86340713>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <bb87c59657c147de820fa08a86340713>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <bb87c59657c147de820fa08a86340713>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <bb87c59657c147de820fa08a86340713>:0
    \n"
  stdout: ''
  timestamp: 1659795330
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,
    2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>
    RollingMax(List<long> numbers) {\n        var rollingMax = new List<long>();\n
    \       var rollingMaxIndex = 0;\n        var rollingMaxValue = numbers.First();\n
    \       var rollingMaxIndexes = new List<int>();\n        rollingMaxIndexes.Add(0);\n
    \       while (rollingMaxIndex < numbers.Count) {\n            var rollingMaxValue
    = numbers[rollingMaxIndex];\n            var rollingMaxIndexes = new List<int>();\n
    \           rollingMaxIndexes.Add(rollingMaxIndex);\n            while (rollingMaxIndex
    < numbers.Count && numbers[rollingMaxIndex] < rollingMaxValue) {\n                rollingMaxIndexes.Add(rollingMaxIndex);\n
    \               rollingMaxIndex++;\n            }\n            rollingMaxIndexes.Add(rollingMaxIndex
    - 1);\n            rollingMaxIndex++;\n            rollingMaxIndexes.Add(rollingMaxIndex
    - 1);\n            rollingMaxIndex++;\n            rollingMaxIndexes.Add(rollingMaxIndex
    - 1);\n            rollingMaxIndex++;\n            rollingMaxIndexes.Add(rollingMaxIndex
    - 1);\n            rollingMaxIndex++;\n            rollingMaxIndexes.Add(rollingMaxIndex
    - 1);\n            rollingMaxIndex++;\n            rollingMaxIndexes.Add(rollingMaxIndex
    - 1);\n            rollingMaxIndex++;\n            rollingMaxIndexes.Add(rollingMaxIndex
    - 1);\n            rollingMaxIndex++;\n            rollingMaxIndexes.Add(rollingMaxIndex
    - 1);\n            rollingMaxIndex++;\n            rollingMaxIndexes.Add(rollingMaxIndex
    - 1);\n            rollingMaxIndex++;\n            rollingMaxIndexes.Add(rollingMaxIndex
    - 1);\n            rollingMaxIndex++;\n            rollingMaxIndexes.Add(rollingMaxIndex
    - 1);\n            rollingMaxIndex++;\n            rollingMaxIndexes.Add(rollingMaxIndex
    - 1);\n            rollingMaxIndex++;\n            rollingMaxIndexes.Add(rollingMaxIndex
    - 1);\n            rollingMaxIndex++;\n            rollingMaxIndexes.Add(rollingMaxIndex
    - 1);\n            rollingMaxIndex++;\n            rollingMaxIndexes.Add(rollingMaxIndex
    - 1);\n            rollingMaxIndex++;\n            rollingMaxIndexes.Add(rollingMaxIndex
    - 1);\n            rollingMaxIndex++;\n            rollingMaxIndexes.Add(rollingMaxIndex
    - 1);\n            rollingMaxIndex++;\n            rollingMaxIndexes.Add(rollingMaxIndex
    - 1);\n            rollingMaxIndex++;\n\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt9m3rale.cs(65,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpt9m3rale.cs(72,2): error CS1513: } expected

    '
  timestamp: 1659795330
