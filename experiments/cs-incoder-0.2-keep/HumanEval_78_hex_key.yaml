name: HumanEval_78_hex_key
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You have been tasked to write a function that receives \n  \
  \  // a hexadecimal number as a string and counts the number of hexadecimal \n \
  \   // digits that are primes (prime number, or a prime, is a natural number \n\
  \    // greater than 1 that is not a product of two smaller natural numbers).\n\
  \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
  \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
  \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
  \ 13).\n    // Note: you may assume the input is always correct or empty string,\
  \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n   \
  \ // For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output\
  \ should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For\
  \ num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"\
  \ the output should be 2.\n    public static long HexKey(string num) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
  AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
  ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
  123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
  )) == (12L));\n    }\n\n}\n"
completions: ["        long numDigits = num.Length;\n        long numPrimes = 0;\n\
    \        long numPrimeDigits = 0;\n        long numPrimeDigits2 = 0;\n       \
    \ long numPrimeDigits3 = 0;\n        long numPrimeDigits4 = 0;\n        long numPrimeDigits5\
    \ = 0;\n        long numPrimeDigits6 = 0;\n        long numPrimeDigits7 = 0;\n\
    \        long numPrimeDigits8 = 0;\n        long numPrimeDigits9 = 0;\n      \
    \  long numPrimeDigits10 = 0;\n        long numPrimeDigits11 = 0;\n        long\
    \ numPrimeDigits12 = 0;\n        long numPrimeDigits13 = 0;\n        long numPrimeDigits14\
    \ = 0;\n        long numPrimeDigits15 = 0;\n        long numPrimeDigits16 = 0;\n\
    \        long numPrimeDigits17 = 0;\n        long numPrimeDigits18 = 0;\n    \
    \    long numPrimeDigits19 = 0;\n        long numPrimeDigits20 = 0;\n        long\
    \ numPrimeDigits21 = 0;\n        long numPrimeDigits22 = 0;\n        long numPrimeDigits23\
    \ = 0;\n        long numPrimeDigits24 = 0;\n        long numPrimeDigits25 = 0;\n\
    \        long numPrimeDigits26 = 0;\n        long numPrimeDigits27 = 0;\n    \
    \    long numPrimeDigits28 = 0;\n        long numPrimeDigits29 = 0;\n        long\
    \ numPrimeDigits30 = 0;\n        long numPrimeDigits31 = 0;\n        long numPrimeDigits32\
    \ = 0;\n        long numPrimeDigits33 = 0;\n        long numPrimeDigits34 = 0;\n\
    \        long numPrimeDigits35 = 0;\n        long numPrimeDigits36 = 0;\n    \
    \    long numPrimeDigits37 = 0;\n        long numPrimeDigits38 = 0;\n        long\
    \ numPrimeDigits39 = 0;\n        long numPrimeDigits40 = 0;\n        long numPrimeDigits41\
    \ = 0;\n        long numPrimeDigits42 = 0;\n        long numPrimeDigits43 = 0;\n\
    \        long numPrimeDigits44 = 0;\n        long numPrimeDigits45 = 0;\n    \
    \    long numPrimeDigits46 = 0;\n        long numPrimeDigits47 = 0;\n        long\
    \ numPrimeDigits48 = 0;\n        long numPrimeDigits49 = 0;\n        long numPrimeDigits50\
    \ = 0;\n        ", "        long result = 0;\n        string hex = num.ToUpper();\n\
    \        foreach (char c in hex) {\n            int digit = c - 'A';\n       \
    \     if (digit > 9) {\n                digit = digit - 9;\n            }\n  \
    \          if (digit == 0) {\n                continue;\n            }\n     \
    \       result += (long)Math.Pow(digit, 2);\n        }\n        return result;",
  "        long result = 0;\n        foreach (char c in num) {\n            int digit\
    \ = c - '0';\n            if (digit < 0 || digit > 9) {\n                throw\
    \ new ArgumentException(\"Hexadecimal digit must be between 0 and 9\");\n    \
    \        }\n            result += (long)Math.Pow(16, digit);\n        }\n    \
    \    return result;", "        long result = 0;\n        foreach (char c in num)\
    \ {\n            int digit = c - '0';\n            if (digit < 0 || digit > 9)\
    \ {\n                throw new ArgumentOutOfRangeException(\"num\");\n       \
    \     }\n            result += (long)Math.Pow(16, digit);\n        }\n       \
    \ return result;", "        long result = 0;\n        foreach (char c in num)\
    \ {\n            int digit = c - '0';\n            if (digit < 0 || digit > 9)\
    \ {\n                throw new ArgumentException(\"Hexadecimal digit must be between\
    \ 0 and 9\");\n            }\n            result += (long)Math.Pow(16, digit);\n\
    \        }\n        return result;", "        long result = 0;\n        foreach\
    \ (char c in num.ToUpper()) {\n            int digit = c - 'A';\n            if\
    \ (digit < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"\
    num\");\n            }\n            result += (long)Math.Pow(16, digit);\n   \
    \     }\n        return result;", "        long result = 0;\n        foreach (char\
    \ c in num) {\n            int digit = c - '0';\n            if (digit < 0 ||\
    \ digit > 9) {\n                throw new ArgumentException(\"Hexadecimal digit\
    \ must be between 0 and 9\");\n            }\n            result += (long)Math.Pow(16,\
    \ digit);\n        }\n        return result;", "        long result = 0;\n   \
    \     foreach (char c in num) {\n            int digit = c - 'A';\n          \
    \  if (digit < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"\
    Invalid hexadecimal digit\");\n            }\n            result += (long)Math.Pow(16,\
    \ digit);\n        }\n        return result;", "        long result = 0;\n   \
    \     string hex = num.ToUpper();\n        foreach (char c in hex) {\n       \
    \     int num = Convert.ToInt32(c);\n            if (num > 9) {\n            \
    \    num -= 10;\n            }\n            if (num % 2 == 0) {\n            \
    \    result += (long)num;\n            }\n        }\n        return result;",
  "        long sum = 0;\n        long digit = 0;\n        long count = 0;\n     \
    \   bool isPrime = true;\n        foreach (char c in num) {\n            digit\
    \ = Convert.ToInt64(c);\n            sum += digit;\n            count += 1;\n\
    \            if (isPrime) {\n                isPrime = IsPrime(digit);\n     \
    \       }\n        }\n        return count;", "        long result = 0;\n    \
    \    bool isPrime = true;\n        foreach (char c in num.ToUpper()) {\n     \
    \       int digit = c - 'A';\n            if (digit < 0 || digit > 9) {\n    \
    \            throw new ArgumentOutOfRangeException(\"num\");\n            }\n\
    \            long digitValue = Convert.ToInt64(Math.Pow(16, digit));\n       \
    \     if (isPrime) {\n                digitValue += digit;\n            }\n  \
    \          isPrime = IsPrime(digitValue);\n            if (isPrime) {\n      \
    \          result += digitValue;\n            }\n        }\n        return result;",
  "        long sum = 0;\n        long pow = 1;\n        string hex = num.ToUpper();\n\
    \        foreach (char c in hex) {\n            int d = Convert.ToInt32(c);\n\
    \            sum += d * pow;\n            pow *= 16;\n        }\n        return\
    \ sum;", "        long result = 0;\n        long sum = 0;\n        foreach (char\
    \ c in num) {\n            int digit = c - '0';\n            sum += digit * digit;\n\
    \        }\n        if (sum % 2 == 0) {\n            result += 2;\n        }\n\
    \        long limit = (long)Math.Sqrt(sum);\n        long limit2 = limit / 2;\n\
    \        long limit3 = limit / 3;\n        long limit4 = limit / 4;\n        long\
    \ limit5 = limit / 5;\n        long limit6 = limit / 6;\n        long limit7 =\
    \ limit / 7;\n        long limit8 = limit / 8;\n        long limit9 = limit /\
    \ 9;\n        long limit10 = limit / 10;\n        long limit11 = limit / 11;\n\
    \        long limit12 = limit / 12;\n        long limit13 = limit / 13;\n    \
    \    long limit14 = limit / 14;\n        long limit15 = limit / 15;\n        long\
    \ limit16 = limit / 16;\n        long limit17 = limit / 17;\n        long limit18\
    \ = limit / 18;\n        long limit19 = limit / 19;\n        long limit20 = limit\
    \ / 20;\n        long limit21 = limit / 21;\n        long limit22 = limit / 22;\n\
    \        long limit23 = limit / 23;\n        long limit24 = limit / 24;\n    \
    \    long limit25 = limit / 25;\n        long limit26 = limit / 26;\n        long\
    \ limit27 = limit / 27;\n        long limit28 = limit / 28;\n        long limit29\
    \ = limit / 29;\n        long limit30 = limit / 30;\n        long limit31 = limit\
    \ / 31;\n        long limit32 = limit / 32;\n        long limit33 = limit / 33;\n\
    \        long limit34 = limit / 34;\n        long limit35 = limit / 35;\n    \
    \    long limit36 = limit / 36;\n        long limit37 = limit / 37;\n        long\
    \ limit38 = limit / 38;\n        long limit39 = limit / 39;\n        long limit40\
    \ = limit / 40;\n        long limit41 = limit / 41;\n        long limit42 = limit\
    \ / 42;\n        long limit43 = limit / 43;\n        long limit44 = limit / 44;\n\
    \        long limit45 = limit / 45;\n        long limit46 = limit / 46;\n    \
    \    long limit47 = limit / 47;\n        long limit48 = limit / 48;\n        long\
    \ limit49 = limit / 49;\n        long ", "        long result = 0;\n        string\
    \ hex = num.ToUpper();\n        foreach (char c in hex) {\n            int digit\
    \ = Convert.ToInt32(c);\n            if (digit < 'A' || digit > 'F') {\n     \
    \           throw new ArgumentOutOfRangeException(\"Hex digit must be between\
    \ A and F\");\n            }\n            result += (digit - 'A') * Math.Pow(16,\
    \ hex.Length - 1 - hex.IndexOf(c));\n        }\n        return result;", "   \
    \     long result = 0;\n        foreach (char c in num) {\n            int digit\
    \ = c - '0';\n            if (digit < 0 || digit > 9) {\n                throw\
    \ new ArgumentOutOfRangeException(\"num\");\n            }\n            result\
    \ += (long)Math.Pow(16, digit);\n        }\n        return result;", "       \
    \ long result = 0;\n        foreach (char c in num) {\n            int digit =\
    \ c - '0';\n            if (digit >= 2 && digit <= 9) {\n                result\
    \ += digit * digit;\n            }\n        }\n        return result;", "    \
    \    long result = 0;\n        foreach (char c in num) {\n            int digit\
    \ = c - 'A';\n            if (digit < 0 || digit > 9) {\n                throw\
    \ new ArgumentOutOfRangeException(\"num\");\n            }\n            int digit2\
    \ = digit * digit;\n            if (digit2 > 9) {\n                throw new ArgumentOutOfRangeException(\"\
    num\");\n            }\n            result += digit * digit2;\n        }\n   \
    \     return result;", "        long result = 0;\n        foreach (char c in num.ToUpper())\
    \ {\n            int digit = c - 'A';\n            if (digit < 0 || digit > 9)\
    \ {\n                throw new ArgumentException(\"Invalid hexadecimal digit:\
    \ \" + c);\n            }\n            result += (long)Math.Pow(16, digit);\n\
    \        }\n        return result;", "        long result = 0;\n        foreach\
    \ (char c in num) {\n            int digit = c - '0';\n            if (digit >=\
    \ 2 && digit <= 9) {\n                result += digit * digit;\n            }\n\
    \        }\n        return result;", "        long result = 0;\n        string\
    \ hex = num.ToUpper();\n        foreach (char c in hex) {\n            int digit\
    \ = c - 'A';\n            if (digit >= 2 && digit <= 9) {\n                result\
    \ += digit * digit;\n            }\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
