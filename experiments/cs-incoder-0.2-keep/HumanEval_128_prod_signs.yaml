name: HumanEval_128_prod_signs
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given an array arr of integers and you need to return\n\
  \    // sum of magnitudes of integers multiplied by product of all signs\n    //\
  \ of each number in the array, represented by 1, -1 or 0.\n    // Note: return None\
  \ for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2, -4]) == -9\n\
  \    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) == None\n    public\
  \ static Nullable<long> ProdSigns(List<long> arr) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
  \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
  \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
  \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
  \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
  \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
  \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
  \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
  \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
  \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
  \    }\n\n}\n"
completions: ["        if (arr.Count == 0)\n            return null;\n        long\
    \ sign = 1;\n        long prod = 1;\n        long sum = 0;\n        foreach (long\
    \ i in arr) {\n            sum += sign * i;\n            sign *= -1;\n       \
    \     prod *= sign;\n        }\n        return sum == 0 ? null : sum * prod;",
  "        if (arr.Count == 0)\n            return null;\n        long prod = 1;\n\
    \        long sign = 1;\n        long sum = 0;\n        foreach (long i in arr)\n\
    \        {\n            sign *= i;\n            sum += sign;\n            prod\
    \ *= sign;\n        }\n        if (sum == 0)\n            return null;\n     \
    \   return sum;", "        if (arr.Count == 0)\n            return null;\n   \
    \     long product = 1;\n        long sign = 1;\n        long sum = 0;\n     \
    \   foreach (long i in arr) {\n            sign *= i;\n            sum += sign;\n\
    \            product *= sign;\n        }\n        if (sum == 0)\n            return\
    \ null;\n        return sum;", "        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long product = 1;\n        long sign = 1;\n      \
    \  long sum = 0;\n        foreach (long i in arr) {\n            sign = sign *\
    \ i;\n            sum += sign;\n            product *= sign;\n        }\n    \
    \    if (sum == 0) {\n            return null;\n        }\n        return sum;",
  "        if (arr.Count == 0)\n            return null;\n        var signs = new\
    \ List<long>();\n        var product = 1;\n        foreach (var num in arr)\n\
    \        {\n            signs.Add(Math.Sign(num));\n            product *= num;\n\
    \        }\n        var sum = 0;\n        foreach (var sign in signs)\n      \
    \  {\n            sum += sign * product;\n        }\n        return sum;", " \
    \       if (arr.Count == 0) {\n            return null;\n        }\n        long\
    \ product = 1;\n        long sign = 1;\n        long sum = 0;\n        foreach\
    \ (long i in arr) {\n            sign = sign * i;\n            sum += sign;\n\
    \            product *= sign;\n        }\n        if (sum == 0) {\n          \
    \  return null;\n        }\n        return sum;", "        if (arr.Count == 0)\n\
    \            return null;\n        var signs = new List<long>();\n        var\
    \ product = 1;\n        foreach (var i in arr) {\n            signs.Add(i);\n\
    \            product *= i;\n        }\n        var result = signs.Sum(x => x *\
    \ product);\n        if (result < 0)\n            return null;\n        return\
    \ result;", "        if (arr.Count == 0) {\n            return null;\n       \
    \ }\n        long product = 1;\n        long sign = 1;\n        foreach (var item\
    \ in arr) {\n            product *= item;\n            sign *= (item < 0) ? 1\
    \ : -1;\n        }\n        return sign * product;", "        if (arr.Count ==\
    \ 0)\n            return null;\n        long sign = 1;\n        long product =\
    \ 1;\n        long sum = 0;\n        foreach (long i in arr) {\n            sum\
    \ += Math.Abs(i);\n            product *= i;\n            sign *= i;\n       \
    \ }\n        if (sum == 0)\n            return null;\n        return sign * Math.Abs(product);",
  "        if (arr.Count == 0)\n            return null;\n        long product = 1;\n\
    \        long sign = 1;\n        foreach (long i in arr) {\n            product\
    \ *= i;\n            sign *= i;\n        }\n        long result = sign * product;\n\
    \        if (result < 0)\n            return null;\n        return result;", " \
    \       if (arr.Count == 0)\n            return null;\n        long product =\
    \ 1;\n        long sum = 0;\n        bool sign = true;\n        foreach (long\
    \ i in arr) {\n            sign = sign ? i : -i;\n            product *= sign;\n\
    \            sum += sign * i;\n        }\n        if (sum == 0)\n            return\
    \ null;\n        return sum * product;", "        if (arr.Count == 0)\n      \
    \      return null;\n        var signs = arr.Select(x => x < 0 ? -1 : 1).ToArray();\n\
    \        var mags = arr.Select(x => Math.Abs(x)).ToArray();\n        var product\
    \ = signs.Aggregate((x, y) => x * y);\n        var result = mags.Aggregate((x,\
    \ y) => x * y);\n        if (product == 0)\n            return null;\n       \
    \ return result * product;", "        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sign = 1;\n        long product = 1;\n      \
    \  long sum = 0;\n        foreach (long i in arr) {\n            sign *= i;\n\
    \            product *= i;\n            sum += sign;\n        }\n        if (sum\
    \ == 0) {\n            return null;\n        }\n        return sum * product;",
  "        if (arr.Count == 0) {\n            return null;\n        }\n        long\
    \ product = 1;\n        long sign = 1;\n        foreach (var item in arr) {\n\
    \            product *= item;\n            sign *= (item < 0) ? -1 : 1;\n    \
    \    }\n        return sign * product;", "        if (arr.Count == 0) {\n    \
    \        return null;\n        }\n        var signs = new List<long>();\n    \
    \    var product = 1;\n        foreach (var num in arr) {\n            var sign\
    \ = num >= 0 ? 1 : -1;\n            signs.Add(sign);\n            product *= sign;\n\
    \        }\n        var magnitudes = arr.Select(x => Math.Abs(x)).ToList();\n\
    \        var result = magnitudes.Aggregate((x, y) => x * y);\n        return signs.Aggregate((x,\
    \ y) => x * y) * result;", "        if (arr.Count == 0)\n            return null;\n\
    \        long product = 1;\n        long sign = 1;\n        long sum = 0;\n  \
    \      foreach (long i in arr)\n        {\n            sum += Math.Abs(i);\n \
    \           product *= i;\n            sign *= (i < 0) ? -1 : 1;\n        }\n\
    \        return sum * sign;", "        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long product = 1;\n        long sum = 0;\n       \
    \ bool sign = true;\n        foreach (long i in arr) {\n            sign = sign\
    \ && i > 0;\n            sum += sign * i;\n            product *= sign;\n    \
    \    }\n        return sum > 0 ? sum : sum * -1;", "        if (arr.Count == 0)\n\
    \            return null;\n        var signs = arr.Select(x => (x < 0) ? 1 : -1).ToArray();\n\
    \        var magnitudes = arr.Select(x => (x < 0) ? x : 0).ToArray();\n      \
    \  var product = signs.Aggregate((x, y) => x * y);\n        var result = magnitudes.Aggregate((x,\
    \ y) => x * y);\n        return result.Equals(product) ? result : null;", "  \
    \      if (arr.Count == 0)\n            return null;\n        var signs = arr.Select(x\
    \ => (x < 0) ? -1 : 1).ToArray();\n        var product = signs.Aggregate((x, y)\
    \ => x * y);\n        var magnitudes = arr.Select(x => Math.Abs(x)).ToArray();\n\
    \        return magnitudes.Aggregate((x, y) => x * product);", "        if (arr.Count\
    \ == 0)\n            return null;\n        var signs = new List<long>();\n   \
    \     var product = 1;\n        foreach (var item in arr)\n        {\n       \
    \     signs.Add(item < 0 ? -1 : 1);\n            product *= item;\n        }\n\
    \        var magnitude = signs.Aggregate((x, y) => x * y);\n        return product\
    \ * magnitude;"]
stop_tokens:
- "\n    }\n"
