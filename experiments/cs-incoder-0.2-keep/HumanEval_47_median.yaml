name: HumanEval_47_median
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
  \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
  \    public static float Median(List<long> l) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
  \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
  \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L, (long)4L,\
  \ (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
  \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
  \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
  \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
  \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
completions: ["        long sum = 0;\n        long count = 0;\n        foreach (long\
    \ x in l)\n            sum += x;\n        foreach (long x in l)\n            count\
    \ += 1;\n        if (count % 2 == 0)\n            return (sum / 2);\n        else\n\
    \            return (float)(sum / 2);", "        long median = l.OrderBy(x =>\
    \ x).Skip(l.Count / 2).First();\n        return median;", "        long median\
    \ = 0;\n        long min = 0;\n        long max = 0;\n        foreach (long i\
    \ in l) {\n            if (i < min) min = i;\n            if (i > max) max = i;\n\
    \        }\n        if (min == max) return (float)min;\n        if (min > max)\
    \ return (float)max;\n        float median = (float)min;\n        float temp =\
    \ (float)max;\n        while (temp - median > 1) {\n            median = (float)((median\
    \ + temp) / 2);\n            temp = median;\n        }\n        return median;",
  "        float median;\n        long medianIndex;\n        float min;\n        float\
    \ max;\n        float sum;\n        float sumOfSquares;\n        float average;\n\
    \        float variance;\n        float standardDeviation;\n        float medianOfThree;\n\
    \        float medianOfTwo;\n        float medianOfOne;\n        float medianOfThreeIndex;\n\
    \        float medianOfTwoIndex;\n        float medianOfOneIndex;\n        float\
    \ medianOfThreeValue;\n        float medianOfTwoValue;\n        float medianOfOneValue;\n\
    \        float medianOfThreeCount;\n        float medianOfTwoCount;\n        float\
    \ medianOfOneCount;\n        float medianOfThreeSum;\n        float medianOfTwoSum;\n\
    \        float medianOfOneSum;\n        float medianOfThreeSumOfSquares;\n   \
    \     float medianOfTwoSumOfSquares;\n        float medianOfOneSumOfSquares;\n\
    \        float medianOfThreeAverage;\n        float medianOfTwoAverage;\n    \
    \    float medianOfOneAverage;\n        float medianOfThreeVariance;\n       \
    \ float medianOfTwoVariance;\n        float medianOfOneVariance;\n        float\
    \ medianOfThreeStandardDeviation;\n        float medianOfTwoStandardDeviation;\n\
    \        float medianOfOneStandardDeviation;\n        float medianOfThreeStandardDeviationIndex;\n\
    \        float medianOfTwoStandardDeviationIndex;\n        float medianOfOneStandardDeviationIndex;\n\
    \        float medianOfThreeStandardDeviationValue;\n        float medianOfTwoStandardDeviationValue;\n\
    \        float medianOfOneStandardDeviationValue;\n        float medianOfThreeStandardDeviationCount;\n\
    \        float medianOfTwoStandardDeviationCount;\n        float medianOfOneStandardDeviationCount;\n\
    \        float medianOfThreeStandardDeviationSum;\n        float medianOfTwoStandardDeviationSum;\n\
    \        float medianOfOneStandardDeviationSum;\n        float medianOfThreeStandardDeviationSumOfSquares;\n\
    \        float medianOfTwoStandardDeviationSumOfSquares;\n        float medianOfOneStandardDeviationSumOfSquares;\n\
    \        float medianOfThreeStandardDeviationAverage;\n        float medianOfTwoStandardDeviationAverage;\n\
    \        float medianOfOneStandardDeviationAverage;\n        float medianOfThreeStandardDeviationVariance;\n\
    \        ", "        float median;\n        if (l.Count % 2 == 0) {\n        \
    \    median = (float)(l.Skip(l.Count / 2).Take(1).Sum() / 2);\n        } else\
    \ {\n            median = (float)(l.Skip(l.Count / 2).Take(l.Count / 2).Sum()\
    \ / 2);\n        }\n        return median;", "        float median;\n        median\
    \ = l.OrderBy(x => x).Skip(l.Count / 2).First();\n        return median;", " \
    \       long median = l.OrderBy(x => x).Skip(l.Count / 2).First();\n        return\
    \ median / l.Count;", "        float median;\n        if (l.Count % 2 == 0) {\n\
    \            median = (float)(l.Skip(l.Count / 2).Average());\n        } else\
    \ {\n            median = (float)(l.Skip(l.Count / 2 + 1).Average());\n      \
    \  }\n        return median;", "        float median;\n        float n = l.Count;\n\
    \        if (n < 2) return 0;\n        median = (float)l.OrderBy(x => x).Skip(n\
    \ / 2).Take(1).Single();\n        return median;", "        float median;\n  \
    \      if (l.Count % 2 == 0) {\n            median = (float)l.Skip(l.Count / 2).Average();\n\
    \        } else {\n            median = (float)l.Skip(l.Count / 2 + 1).Average();\n\
    \        }\n        return median;", "        long median = 0;\n        long min\
    \ = l.Min();\n        long max = l.Max();\n        if (min == max) {\n       \
    \     return min;\n        }\n        if (min > max) {\n            long temp\
    \ = min;\n            min = max;\n            max = temp;\n        }\n       \
    \ long mid = min + ((max - min) / 2);\n        foreach (long x in l) {\n     \
    \       if (x < mid) {\n                median = x;\n            }\n        }\n\
    \        return median;", "        long median = 0;\n        long count = 0;\n\
    \        foreach (long i in l) {\n            count += i;\n        }\n       \
    \ if (count % 2 == 0) {\n            median = (long)((double)l.Where(x => x >\
    \ 0).Count() / 2);\n        } else {\n            median = (long)((double)l.Where(x\
    \ => x < 0).Count() / 2);\n        }\n        return (float)median;", "      \
    \  long median = 0;\n        long count = 0;\n        foreach (long x in l) {\n\
    \            count++;\n            if (count % 2 == 0) {\n                median\
    \ = (median + x) / 2;\n            } else {\n                median = x;\n   \
    \         }\n        }\n        return median;", "        long median = 0;\n \
    \       long total = 0;\n        foreach (long x in l) {\n            total +=\
    \ x;\n        }\n        median = total / l.Count;\n        float medianFloat\
    \ = Convert.ToSingle(median);\n        return medianFloat;", "        l.Sort();\n\
    \        int mid = l.Count / 2;\n        if (l.Count % 2 == 0) {\n           \
    \ return l[mid];\n        } else {\n            return (float)l[mid] + (float)l[mid+1];\n\
    \        }", "        l.Sort();\n        float median = 0;\n        if (l.Count\
    \ % 2 == 0) {\n            median = (float)(l[l.Count / 2] + l[l.Count / 2 - 1])\
    \ / 2;\n        } else {\n            median = l[l.Count / 2];\n        }\n  \
    \      return median;", "        long sum = 0;\n        long count = 0;\n    \
    \    foreach (long i in l) {\n            sum += i;\n            count++;\n  \
    \      }\n        if (count == 0) {\n            return 0;\n        }\n      \
    \  float median = (float)sum / count;\n        return median;", "        l.Sort();\n\
    \        float median;\n        if (l.Count % 2 == 0) {\n            median =\
    \ (float)(l[l.Count / 2 - 1] + l[l.Count / 2]) / 2;\n        } else {\n      \
    \      median = l[l.Count / 2];\n        }\n        return median;", "       \
    \ long median = 0;\n        long total = 0;\n        foreach (long i in l) {\n\
    \            total += i;\n        }\n        median = total / l.Count;\n     \
    \   float medianFloat = float.Parse(median.ToString());\n        return medianFloat;",
  "        long median = 0;\n        long count = 0;\n        foreach (long i in l)\
    \ {\n            count += 1;\n            if (count > 1) {\n                median\
    \ = (median + i) / 2;\n            }\n        }\n        return median;"]
stop_tokens:
- "\n    }\n"
