name: HumanEval_30_get_positive
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return only positive numbers in the list.\n    // >>> get_positive([-1,\
  \ 2, -4, 5, 6])\n    // [2, 5, 6]\n    // >>> get_positive([5, 3, -5, 2, -3, 3,\
  \ 9, 0, 123, 1, -10])\n    // [5, 3, 2, 3, 9, 123, 1]\n    public static List<long>\
  \ GetPositive(List<long> l) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPositive((new\
  \ List<long>(new long[]{(long)-1L, (long)-2L, (long)4L, (long)5L, (long)6L}))).Equals((new\
  \ List<long>(new long[]{(long)4L, (long)5L, (long)6L}))));\n    Debug.Assert(GetPositive((new\
  \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)3L, (long)3L,\
  \ (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L}))).Equals((new List<long>(new\
  \ long[]{(long)5L, (long)3L, (long)2L, (long)3L, (long)3L, (long)9L, (long)123L,\
  \ (long)1L}))));\n    Debug.Assert(GetPositive((new List<long>(new long[]{(long)-1L,\
  \ (long)-2L}))).Equals((new List<long>())));\n    Debug.Assert(GetPositive((new\
  \ List<long>())).Equals((new List<long>())));\n    }\n\n}\n"
completions: ["        var positives = new List<long>();\n        foreach (var item\
    \ in l) {\n            if (item > 0) positives.Add(item);\n        }\n       \
    \ return positives;", "        List<long> result = new List<long>();\n       \
    \ foreach (long i in l) {\n            if (i >= 0) {\n                result.Add(i);\n\
    \            }\n        }\n        return result;", "        List<long> positive\
    \ = new List<long>();\n        foreach (long i in l) {\n            if (i >= 0)\
    \ {\n                positive.Add(i);\n            }\n        }\n        return\
    \ positive;", "        var positive = new List<long>();\n        foreach (var\
    \ i in l) {\n            if (i >= 0) {\n                positive.Add(i);\n   \
    \         }\n        }\n        return positive;", "        List<long> positive\
    \ = new List<long>();\n        foreach (long i in l) {\n            if (i >= 0)\n\
    \                positive.Add(i);\n        }\n        return positive;", "   \
    \     List<long> positive = new List<long>();\n        foreach (long i in l) {\n\
    \            if (i >= 0) {\n                positive.Add(i);\n            }\n\
    \        }\n        return positive;", "        List<long> positive = new List<long>();\n\
    \        foreach (long i in l) {\n            if (i >= 0)\n                positive.Add(i);\n\
    \        }\n        return positive;", "        List<long> positive = new List<long>();\n\
    \        foreach (long n in l) {\n            if (n > 0) {\n                positive.Add(n);\n\
    \            }\n        }\n        return positive;", "        List<long> positive\
    \ = new List<long>();\n        foreach (long i in l) {\n            if (i >= 0)\
    \ {\n                positive.Add(i);\n            }\n        }\n        return\
    \ positive;", "        List<long> positive = new List<long>();\n        foreach\
    \ (long n in l) {\n            if (n > 0) {\n                positive.Add(n);\n\
    \            }\n        }\n        return positive;", "        List<long> positive\
    \ = new List<long>();\n        foreach (long i in l) {\n            if (i >= 0)\
    \ {\n                positive.Add(i);\n            }\n        }\n        return\
    \ positive;", "        List<long> positive = new List<long>();\n        foreach\
    \ (long i in l) {\n            if (i >= 0)\n                positive.Add(i);\n\
    \        }\n        return positive;", "        List<long> positive = new List<long>();\n\
    \        foreach (long i in l) {\n            if (i >= 0) positive.Add(i);\n \
    \       }\n        return positive;", "        List<long> positive = new List<long>();\n\
    \        foreach (long n in l) {\n            if (n > 0) positive.Add(n);\n  \
    \      }\n        return positive;", "        List<long> result = new List<long>();\n\
    \        foreach (long i in l) {\n            if (i >= 0) result.Add(i);\n   \
    \     }\n        return result;", "        List<long> positive = new List<long>();\n\
    \        foreach (long i in l) {\n            if (i >= 0) positive.Add(i);\n \
    \       }\n        return positive;", "        List<long> positive = new List<long>();\n\
    \        foreach (long n in l) {\n            if (n > 0) positive.Add(n);\n  \
    \      }\n        return positive;", "        List<long> positive = new List<long>();\n\
    \        foreach (long n in l) {\n            if (n > 0) positive.Add(n);\n  \
    \      }\n        return positive;", "        List<long> result = new List<long>();\n\
    \        foreach (long i in l) {\n            if (i >= 0) result.Add(i);\n   \
    \     }\n        return result;", "        List<long> result = new List<long>();\n\
    \        foreach (long i in l) {\n            if (i >= 0)\n                result.Add(i);\n\
    \        }\n        return result;"]
stop_tokens:
- "\n    }\n"
