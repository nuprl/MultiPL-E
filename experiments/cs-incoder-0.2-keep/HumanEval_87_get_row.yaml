name: HumanEval_87_get_row
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n   \
  \ // which is similar to matrix, however, unlike matrices,\n    // each row may\
  \ contain a different number of columns.\n    // Given lst, and integer x, find\
  \ integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2)\
  \ ...] such that\n    // each tuple is a coordinate - (row, columns), starting with\
  \ 0.\n    // Sort coordinates initially by rows in ascending order.\n    // Also,\
  \ sort coordinates of the row by columns in descending order.\n    // Examples:\n\
  \    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n\
  \    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1)\
  \ == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static\
  \ List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new\
  \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),\
  \ (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,\
  \ long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,\
  \ long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,\
  \ long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new\
  \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
  \ (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),\
  \ (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,\
  \ (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,\
  \ (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,\
  \ long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,\
  \ long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,\
  \ long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,\
  \ long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new\
  \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
  \ (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new\
  \ long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),\
  \ (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,\
  \ (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,\
  \ (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,\
  \ long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,\
  \ long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,\
  \ long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,\
  \ long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,\
  \ long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,\
  \ long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,\
  \ long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),\
  \ (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new\
  \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),\
  \ (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new\
  \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new\
  \ List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,\
  \ long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
completions: ["        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n\
    \        foreach (var row in lst) {\n            var tuple = new Tuple<long, long>(row.IndexOf(x),\
    \ row.Last());\n            result.Add(tuple);\n        }\n        return result.OrderBy(x\
    \ => x.Item1).ThenByDescending(x => x.Item2).ToList();", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long num in row) {\n                if (num\
    \ == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(num),\
    \ row.LastIndexOf(num)));\n                }\n            }\n        }\n     \
    \   return result.OrderBy(t => t.Item1).ThenByDescending(t => t.Item2).ToList();",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (var row in lst) {\n            foreach (var item in row) {\n    \
    \            if (item == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(row), row.IndexOf(row)));\n                }\n           \
    \ }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> res = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ num in row) {\n                if (num == x) {\n                    res.Add(new\
    \ Tuple<long, long>(row.IndexOf(num), row.IndexOf(x)));\n                }\n \
    \           }\n        }\n        return res.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<long> row = new List<long>();\n        List<long> column\
    \ = new List<long>();\n        foreach (List<long> row in lst) {\n           \
    \ row.Sort();\n            column.Sort();\n            if (row.Contains(x)) {\n\
    \                result.Add(new Tuple<long, long>(row.IndexOf(x), column.IndexOf(x)));\n\
    \            }\n        }\n        return result;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long val in row) {\n                if (val\
    \ == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(val),\
    \ row.LastIndexOf(val)));\n                }\n            }\n        }\n     \
    \   return result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   List<long> row = new List<long>();\n        List<long> col = new List<long>();\n\
    \        foreach (List<long> row in lst) {\n            row.Sort();\n        \
    \    col.AddRange(row.Skip(1).Take(row.Count - 1));\n            col.Sort();\n\
    \            row.Sort();\n            foreach (long c in col) {\n            \
    \    if (c == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(0),\
    \ col.IndexOf(c)));\n                }\n            }\n        }\n        return\
    \ result;", "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n\
    \        foreach (var row in lst) {\n            foreach (var item in row) {\n\
    \                if (item == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(item), row.LastIndexOf(item)));\n                }\n     \
    \       }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(row), row.IndexOf(row)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            long y = row.FindIndex(x\
    \ => x == x);\n            if (y != -1) {\n                result.Add(new Tuple<long,\
    \ long>(row.IndexOf(x), y));\n            }\n        }\n        return result.OrderBy(x\
    \ => x.Item1).ThenByDescending(x => x.Item2).ToList();", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (var row in\
    \ lst) {\n            foreach (var item in row) {\n                if (item ==\
    \ x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(row),\
    \ row.IndexOf(row)));\n                }\n            }\n        }\n        return\
    \ result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();", "  \
    \      List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (var row in lst) {\n            foreach (var item in row) {\n    \
    \            if (item == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(row), row.IndexOf(row)));\n                }\n           \
    \ }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        var result = new List<Tuple<long, long>>();\n\
    \        var rows = lst.Select(row => row.ToArray()).ToArray();\n        var rows\
    \ = rows.Where(row => row.All(i => i != x)).ToArray();\n        var rows = rows.OrderBy(row\
    \ => row.Length).ThenByDescending(row => row.First()).ToArray();\n        var\
    \ rows = rows.Select(row => Tuple.Create(row.Length, row.First())).ToArray();\n\
    \        var rows = rows.OrderBy(row => row.Item2).ThenByDescending(row => row.Item1).ToArray();\n\
    \        var rows = rows.Select(row => Tuple.Create(row.Item1, row.Item2)).ToArray();\n\
    \        foreach (var row in rows) {\n            var columns = lst.Where(col\
    \ => col.Contains(row.Item1)).Select(col => col.ToArray()).ToArray();\n      \
    \      var columns = columns.Where(col => col.All(i => i != x)).ToArray();\n \
    \           var columns = columns.OrderBy(col => col.Length).ThenByDescending(col\
    \ => col.First()).ToArray();\n            var columns = columns.Select(col =>\
    \ Tuple.Create(col.Length, col.First())).ToArray();\n            var columns =\
    \ columns.OrderBy(col => col.Item2).ThenByDescending(col => col.Item1).ToArray();\n\
    \            var columns = columns.Select(col => Tuple.Create(col.Item1, col.Item2)).ToArray();\n\
    \            foreach (var column in columns) {\n                result.Add(Tuple.Create(row.Item1,\
    \ column.Item1));\n                result.Add(Tuple.Create(row.Item1, column.Item2));\n\
    \            }\n        }\n        return result;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long num in row) {\n                if (num\
    \ == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(num),\
    \ row.IndexOf(x)));\n                }\n            }\n        }\n        return\
    \ result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();", "  \
    \      List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (var row in lst) {\n            foreach (var item in row) {\n    \
    \            if (item == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(row), row.IndexOf(row)));\n                }\n           \
    \ }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ num in row) {\n                if (num == x) {\n                    result.Add(new\
    \ Tuple<long, long>((long)row.IndexOf(num), (long)row.IndexOf(x)));\n        \
    \        }\n            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ n in row) {\n                if (n == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(n), row.IndexOf(x)));\n                }\n   \
    \         }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<List<long>> row = new List<List<long>>();\n        foreach\
    \ (List<long> row in lst) {\n            row.Add(0);\n        }\n        foreach\
    \ (List<long> row in lst) {\n            row.Sort();\n            row.Reverse();\n\
    \            row.Add(0);\n        }\n        foreach (List<long> row in lst) {\n\
    \            row.Sort();\n            row.Reverse();\n            row.Add(0);\n\
    \        }\n        foreach (List<long> row in lst) {\n            row.Sort();\n\
    \            row.Reverse();\n            row.Add(0);\n        }\n        foreach\
    \ (List<long> row in lst) {\n            row.Sort();\n            row.Reverse();\n\
    \            row.Add(0);\n        }\n        foreach (List<long> row in lst) {\n\
    \            row.Sort();\n            row.Reverse();\n            row.Add(0);\n\
    \        }\n        foreach (List<long> row in lst) {\n            row.Sort();\n\
    \            row.Reverse();\n            row.Add(0);\n        }\n        foreach\
    \ (List<long> row in lst) {\n            row.Sort();\n            row.Reverse();\n\
    \            row.Add(0);\n        }\n        foreach (List<long> row in lst) {\n\
    \            row.Sort();\n            row.Reverse();\n            row.Add(0);\n\
    \        }\n        foreach (List<long> row in lst) {\n            row.Sort();\n\
    \            row.Reverse();\n            row.Add(0);\n        }\n        foreach\
    \ (List<long> row in lst) {\n            row.Sort();\n            row.Reverse();\n\
    \            row.Add(0);\n        }\n        foreach (List<long> row in lst) {\n\
    \            row.Sort();\n            row.Reverse();\n            row.Add(0);\n\
    \        }\n        foreach (List<long> row in lst) {\n            row.Sort();\n\
    \            row.Reverse();\n            row.Add(0);\n        }\n        foreach\
    \ (List<long> row in lst) {\n            row.Sort();\n            row.Reverse();\n\
    \            row.Add(0);\n        }\n        foreach (List<long> row in lst) {\n\
    \            row.Sort();\n            row.Reverse();\n            row.Add(0);\n\
    \        }\n        foreach (List<long> row in lst) {\n            row.Sort();\n\
    \            row.Reverse();\n            row.Add(0);\n        }\n        foreach\
    \ (List<long> row in lst) {\n            row.Sort();\n            row.Reverse();\n\
    \            row.Add(0);\n        }\n        foreach (List<long> row in lst) {\n\
    \            row.Sort();\n            row.Reverse();\n            row.Add(0);\n\
    \        }\n        foreach (List<long> row in lst) {\n            row.Sort();\n\
    \            row.Reverse();\n            row.Add(0);\n", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (var row in\
    \ lst) {\n            foreach (var col in row.OrderByDescending(c => c)) {\n \
    \               if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(row), col.IndexOf(col)));\n                }\n           \
    \ }\n        }\n        return result.OrderBy(r => r.Item1).ThenBy(r => r.Item2).ToList();",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (var row in lst) {\n            foreach (var item in row) {\n    \
    \            if (item == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(item), row.LastIndexOf(item)));\n                }\n     \
    \       }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();"]
stop_tokens:
- "\n    }\n"
