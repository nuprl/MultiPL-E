name: HumanEval_87_get_row
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n   \
  \ // which is similar to matrix, however, unlike matrices,\n    // each row may\
  \ contain a different number of columns.\n    // Given lst, and integer x, find\
  \ integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2)\
  \ ...] such that\n    // each tuple is a coordinate - (row, columns), starting with\
  \ 0.\n    // Sort coordinates initially by rows in ascending order.\n    // Also,\
  \ sort coordinates of the row by columns in descending order.\n    // Examples:\n\
  \    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n\
  \    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1)\
  \ == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static\
  \ List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new\
  \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),\
  \ (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,\
  \ long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,\
  \ long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,\
  \ long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new\
  \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
  \ (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),\
  \ (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,\
  \ (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,\
  \ (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,\
  \ long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,\
  \ long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,\
  \ long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,\
  \ long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new\
  \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
  \ (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new\
  \ long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),\
  \ (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,\
  \ (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,\
  \ (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,\
  \ long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,\
  \ long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,\
  \ long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,\
  \ long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,\
  \ long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,\
  \ long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,\
  \ long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),\
  \ (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new\
  \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),\
  \ (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new\
  \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new\
  \ List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,\
  \ long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
completions: ["        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n\
    \        foreach (var row in lst) {\n            var tuple = new Tuple<long, long>(row.IndexOf(x),\
    \ row.Last());\n            result.Add(tuple);\n        }\n        return result.OrderBy(x\
    \ => x.Item1).ThenByDescending(x => x.Item2).ToList();", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long num in row) {\n                if (num\
    \ == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(num),\
    \ row.LastIndexOf(num)));\n                }\n            }\n        }\n     \
    \   return result.OrderBy(t => t.Item1).ThenByDescending(t => t.Item2).ToList();",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (var row in lst) {\n            foreach (var item in row) {\n    \
    \            if (item == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(row), row.IndexOf(row)));\n                }\n           \
    \ }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> res = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ num in row) {\n                if (num == x) {\n                    res.Add(new\
    \ Tuple<long, long>(row.IndexOf(num), row.IndexOf(x)));\n                }\n \
    \           }\n        }\n        return res.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<long> row = new List<long>();\n        List<long> column\
    \ = new List<long>();\n        foreach (List<long> row in lst) {\n           \
    \ row.Sort();\n            column.Sort();\n            if (row.Contains(x)) {\n\
    \                result.Add(new Tuple<long, long>(row.IndexOf(x), column.IndexOf(x)));\n\
    \            }\n        }\n        return result;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long val in row) {\n                if (val\
    \ == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(val),\
    \ row.LastIndexOf(val)));\n                }\n            }\n        }\n     \
    \   return result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   List<long> row = new List<long>();\n        List<long> col = new List<long>();\n\
    \        foreach (List<long> row in lst) {\n            row.Sort();\n        \
    \    col.AddRange(row.Skip(1).Take(row.Count - 1));\n            col.Sort();\n\
    \            row.Sort();\n            foreach (long c in col) {\n            \
    \    if (c == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(0),\
    \ col.IndexOf(c)));\n                }\n            }\n        }\n        return\
    \ result;", "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n\
    \        foreach (var row in lst) {\n            foreach (var item in row) {\n\
    \                if (item == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(item), row.LastIndexOf(item)));\n                }\n     \
    \       }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(row), row.IndexOf(row)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            long y = row.FindIndex(x\
    \ => x == x);\n            if (y != -1) {\n                result.Add(new Tuple<long,\
    \ long>(row.IndexOf(x), y));\n            }\n        }\n        return result.OrderBy(x\
    \ => x.Item1).ThenByDescending(x => x.Item2).ToList();", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (var row in\
    \ lst) {\n            foreach (var item in row) {\n                if (item ==\
    \ x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(row),\
    \ row.IndexOf(row)));\n                }\n            }\n        }\n        return\
    \ result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();", "  \
    \      List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (var row in lst) {\n            foreach (var item in row) {\n    \
    \            if (item == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(row), row.IndexOf(row)));\n                }\n           \
    \ }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        var result = new List<Tuple<long, long>>();\n\
    \        var rows = lst.Select(row => row.ToArray()).ToArray();\n        var rows\
    \ = rows.Where(row => row.All(i => i != x)).ToArray();\n        var rows = rows.OrderBy(row\
    \ => row.Length).ThenByDescending(row => row.First()).ToArray();\n        var\
    \ rows = rows.Select(row => Tuple.Create(row.Length, row.First())).ToArray();\n\
    \        var rows = rows.OrderBy(row => row.Item2).ThenByDescending(row => row.Item1).ToArray();\n\
    \        var rows = rows.Select(row => Tuple.Create(row.Item1, row.Item2)).ToArray();\n\
    \        foreach (var row in rows) {\n            var columns = lst.Where(col\
    \ => col.Contains(row.Item1)).Select(col => col.ToArray()).ToArray();\n      \
    \      var columns = columns.Where(col => col.All(i => i != x)).ToArray();\n \
    \           var columns = columns.OrderBy(col => col.Length).ThenByDescending(col\
    \ => col.First()).ToArray();\n            var columns = columns.Select(col =>\
    \ Tuple.Create(col.Length, col.First())).ToArray();\n            var columns =\
    \ columns.OrderBy(col => col.Item2).ThenByDescending(col => col.Item1).ToArray();\n\
    \            var columns = columns.Select(col => Tuple.Create(col.Item1, col.Item2)).ToArray();\n\
    \            foreach (var column in columns) {\n                result.Add(Tuple.Create(row.Item1,\
    \ column.Item1));\n                result.Add(Tuple.Create(row.Item1, column.Item2));\n\
    \            }\n        }\n        return result;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long num in row) {\n                if (num\
    \ == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(num),\
    \ row.IndexOf(x)));\n                }\n            }\n        }\n        return\
    \ result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();", "  \
    \      List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (var row in lst) {\n            foreach (var item in row) {\n    \
    \            if (item == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(row), row.IndexOf(row)));\n                }\n           \
    \ }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ num in row) {\n                if (num == x) {\n                    result.Add(new\
    \ Tuple<long, long>((long)row.IndexOf(num), (long)row.IndexOf(x)));\n        \
    \        }\n            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ n in row) {\n                if (n == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(n), row.IndexOf(x)));\n                }\n   \
    \         }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<List<long>> row = new List<List<long>>();\n        foreach\
    \ (List<long> row in lst) {\n            row.Add(0);\n        }\n        foreach\
    \ (List<long> row in lst) {\n            row.Sort();\n            row.Reverse();\n\
    \            row.Add(0);\n        }\n        foreach (List<long> row in lst) {\n\
    \            row.Sort();\n            row.Reverse();\n            row.Add(0);\n\
    \        }\n        foreach (List<long> row in lst) {\n            row.Sort();\n\
    \            row.Reverse();\n            row.Add(0);\n        }\n        foreach\
    \ (List<long> row in lst) {\n            row.Sort();\n            row.Reverse();\n\
    \            row.Add(0);\n        }\n        foreach (List<long> row in lst) {\n\
    \            row.Sort();\n            row.Reverse();\n            row.Add(0);\n\
    \        }\n        foreach (List<long> row in lst) {\n            row.Sort();\n\
    \            row.Reverse();\n            row.Add(0);\n        }\n        foreach\
    \ (List<long> row in lst) {\n            row.Sort();\n            row.Reverse();\n\
    \            row.Add(0);\n        }\n        foreach (List<long> row in lst) {\n\
    \            row.Sort();\n            row.Reverse();\n            row.Add(0);\n\
    \        }\n        foreach (List<long> row in lst) {\n            row.Sort();\n\
    \            row.Reverse();\n            row.Add(0);\n        }\n        foreach\
    \ (List<long> row in lst) {\n            row.Sort();\n            row.Reverse();\n\
    \            row.Add(0);\n        }\n        foreach (List<long> row in lst) {\n\
    \            row.Sort();\n            row.Reverse();\n            row.Add(0);\n\
    \        }\n        foreach (List<long> row in lst) {\n            row.Sort();\n\
    \            row.Reverse();\n            row.Add(0);\n        }\n        foreach\
    \ (List<long> row in lst) {\n            row.Sort();\n            row.Reverse();\n\
    \            row.Add(0);\n        }\n        foreach (List<long> row in lst) {\n\
    \            row.Sort();\n            row.Reverse();\n            row.Add(0);\n\
    \        }\n        foreach (List<long> row in lst) {\n            row.Sort();\n\
    \            row.Reverse();\n            row.Add(0);\n        }\n        foreach\
    \ (List<long> row in lst) {\n            row.Sort();\n            row.Reverse();\n\
    \            row.Add(0);\n        }\n        foreach (List<long> row in lst) {\n\
    \            row.Sort();\n            row.Reverse();\n            row.Add(0);\n\
    \        }\n        foreach (List<long> row in lst) {\n            row.Sort();\n\
    \            row.Reverse();\n            row.Add(0);\n", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (var row in\
    \ lst) {\n            foreach (var col in row.OrderByDescending(c => c)) {\n \
    \               if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(row), col.IndexOf(col)));\n                }\n           \
    \ }\n        }\n        return result.OrderBy(r => r.Item1).ThenBy(r => r.Item2).ToList();",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (var row in lst) {\n            foreach (var item in row) {\n    \
    \            if (item == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(item), row.LastIndexOf(item)));\n                }\n     \
    \       }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        if (lst.Count == 0) {\n            return result;\n     \
    \   }\n        List<long> row = new List<long>();\n        List<long> col = new\
    \ List<long>();\n        foreach (List<long> row in lst) {\n            row.Sort();\n\
    \            col.AddRange(row.Skip(1).Take(row.Count - 1));\n            col.Sort();\n\
    \            foreach (long col in col) {\n                if (col == x) {\n  \
    \                  result.Add(new Tuple<long, long>(row.Count, col));\n      \
    \          }\n            }\n        }\n        return result;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long num in row) {\n                if (num\
    \ == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(num),\
    \ row.IndexOf(x)));\n                }\n            }\n        }\n        return\
    \ result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();", "  \
    \      List<Tuple<long, long>> res = new List<Tuple<long, long>>();\n        foreach\
    \ (List<long> row in lst) {\n            foreach (long num in row) {\n       \
    \         if (num == x) {\n                    res.Add(new Tuple<long, long>(row.IndexOf(num),\
    \ row.IndexOf(num)));\n                }\n            }\n        }\n        return\
    \ res.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();", "     \
    \   List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        foreach\
    \ (List<long> row in lst) {\n            foreach (long n in row) {\n         \
    \       if (n == x) {\n                    result.Add(new Tuple<long, long>((long)row.IndexOf(row),\
    \ row.IndexOf(n)));\n                }\n            }\n        }\n        return\
    \ result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();", "  \
    \      List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (List<long> row in lst) {\n            foreach (long num in row) {\n\
    \                if (num == x) {\n                    result.Add(new Tuple<long,\
    \ long>((long)row.IndexOf(num), row.IndexOf(x)));\n                }\n       \
    \     }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            List<long>\
    \ columns = new List<long>();\n            foreach (long n in row) {\n       \
    \         if (n == x) {\n                    columns.Add(n);\n               \
    \ }\n            }\n            result.Add(new Tuple<long, long>(row.Count, columns.Count));\n\
    \        }\n        return result;", "        List<Tuple<long, long>> result =\
    \ new List<Tuple<long, long>>();\n        foreach (var row in lst) {\n       \
    \     foreach (var col in row.OrderByDescending(y => y).TakeWhile(y => y != x))\
    \ {\n                result.Add(new Tuple<long, long>(row.IndexOf(col), col.IndexOf(x)));\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var col\
    \ in row.OrderByDescending(c => c)) {\n                if (col == x) {\n     \
    \               result.Add(new Tuple<long, long>(row.IndexOf(x), col.IndexOf(x)));\n\
    \                }\n            }\n        }\n        return result.OrderBy(t\
    \ => t.Item1).ThenByDescending(t => t.Item2).ToList();", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (var row in\
    \ lst) {\n            var found = false;\n            foreach (var item in row)\
    \ {\n                if (item == x) {\n                    found = true;\n   \
    \                 break;\n                }\n            }\n            if (found)\
    \ {\n                result.Add(new Tuple<long, long>(row.IndexOf(row), row.IndexOf(row)));\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        var result = new List<Tuple<long, long>>();\n\
    \        var rows = lst.Select(row => row.ToList()).ToList();\n        var rows\
    \ = rows.OrderBy(row => row.Count).ThenByDescending(row => row.Count).ToList();\n\
    \        var cols = rows.First().ToList();\n        var rows = rows.Select(row\
    \ => row.OrderBy(c => c).ThenByDescending(c => c).ToList()).ToList();\n      \
    \  var rows = rows.Select(row => row.Select(c => new Tuple<long, long>(c.Item1,\
    \ c.Item2)).ToList()).ToList();\n        var rows = rows.Select(row => row.Select(c\
    \ => new Tuple<long, long>(c.Item1, c.Item2)).OrderBy(c => c.Item1).ThenByDescending(c\
    \ => c.Item2).ToList()).ToList();\n        var rows = rows.Select(row => row.Select(c\
    \ => new Tuple<long, long>(c.Item1, c.Item2)).OrderByDescending(c => c.Item1).ThenBy(c\
    \ => c.Item2).ToList()).ToList();\n        var rows = rows.Select(row => row.Select(c\
    \ => new Tuple<long, long>(c.Item1, c.Item2)).OrderBy(c => c.Item1).ThenBy(c =>\
    \ c.Item2).ToList()).ToList();\n        var rows = rows.Select(row => row.Select(c\
    \ => new Tuple<long, long>(c.Item1, c.Item2)).OrderByDescending(c => c.Item1).ThenBy(c\
    \ => c.Item2).ToList()).ToList();\n        var rows = rows.Select(row => row.Select(c\
    \ => new Tuple<long, long>(c.Item1, c.Item2)).OrderBy(c => c.Item1).ThenBy(c =>\
    \ c.Item2).ToList()).ToList();\n        var rows = rows.Select(row => row.Select(c\
    \ => new Tuple<long, long>(c.Item1, c.Item2)).OrderByDescending(c => c.Item1).ThenBy(c\
    \ => c.Item2).ToList()).ToList();\n        var rows = rows.Select(row => row.Select(c\
    \ => new Tuple<long, long>(c.Item1, c.Item2)).OrderBy(c => c.Item1).ThenBy(c =>\
    \ c.Item2).ToList()).ToList();\n        var rows = rows.Select(row => row.Select(c\
    \ => new Tuple<long, long>(c.Item1, c.Item2)).OrderByDescending(c => c.Item1).ThenBy(c\
    \ => c.Item2).ToList()).ToList();\n        var rows = rows.Select(row => ", " \
    \       List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n    \
    \    foreach (var row in lst) {\n            foreach (var item in row) {\n   \
    \             if (item == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(item), row.IndexOf(x)));\n                }\n            }\n\
    \        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x =>\
    \ x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            long y = row.FindIndex(x\
    \ => x == x);\n            if (y != -1) {\n                result.Add(new Tuple<long,\
    \ long>(row.IndexOf(x), y));\n            }\n        }\n        return result.OrderBy(x\
    \ => x.Item1).ThenByDescending(x => x.Item2).ToList();", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        List<long> row = new\
    \ List<long>();\n        foreach (List<long> row in lst) {\n            row.Add(0);\n\
    \        }\n        long rowCount = 0;\n        long colCount = 0;\n        foreach\
    \ (List<long> row in lst) {\n            if (row.Count > colCount) {\n       \
    \         colCount = row.Count;\n            }\n            if (row.Count > rowCount)\
    \ {\n                rowCount = row.Count;\n            }\n        }\n       \
    \ long row = 0;\n        long col = 0;\n        long rowCount = 0;\n        long\
    \ colCount = 0;\n        foreach (List<long> row in lst) {\n            if (row.Count\
    \ > colCount) {\n                colCount = row.Count;\n            }\n      \
    \      if (row.Count > rowCount) {\n                rowCount = row.Count;\n  \
    \          }\n        }\n        foreach (List<long> row in lst) {\n         \
    \   if (row.Count > colCount) {\n                colCount = row.Count;\n     \
    \       }\n            if (row.Count > rowCount) {\n                rowCount =\
    \ row.Count;\n            }\n        }\n        foreach (List<long> row in lst)\
    \ {\n            if (row.Count > colCount) {\n                colCount = row.Count;\n\
    \            }\n            if (row.Count > rowCount) {\n                rowCount\
    \ = row.Count;\n            }\n        }\n        foreach (List<long> row in lst)\
    \ {\n            if (row.Count > colCount) {\n                colCount = row.Count;\n\
    \            }\n            if (row.Count > rowCount) {\n                rowCount\
    \ = row.Count;\n            }\n        }\n        foreach (List<long> row in lst)\
    \ {\n            if (row.Count > colCount) {\n                colCount = row.Count;\n\
    \            }\n            if (row.Count > rowCount) {\n                rowCount\
    \ = row.Count;\n            }\n        }\n        foreach (List<long> row in lst)\
    \ {\n            if (row.Count > colCount) {\n                colCount = row.Count;\n\
    \            }\n            if (row.Count > rowCount) {\n                rowCount\
    \ = row.Count;\n            }\n        }\n        foreach (List<long> row in lst)\
    \ {\n            if (row.Count > colCount) {\n                colCount = row.Count;\n\
    \            }\n            if (row.Count > rowCount) {\n                rowCount\
    \ = row.Count;\n            }\n        }\n        foreach (List<long> row in lst)\
    \ {\n            if (row.Count > colCount) {\n                colCount = row.Count;\n\
    \            }\n            if (row.Count > rowCount) {\n                rowCount\
    \ = row.Count;\n            }\n        }\n        foreach (List<long> row in lst)\
    \ {\n            if (row.Count > colCount) {\n                colCount = row.Count;\n\
    \            }\n            if (row.Count > ", "        var result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            var found = false;\n\
    \            foreach (var item in row) {\n                if (item == x) {\n \
    \                   found = true;\n                    break;\n              \
    \  }\n            }\n            if (found) {\n                result.Add(new\
    \ Tuple<long, long>(row.IndexOf(row), row.IndexOf(row)));\n            }\n   \
    \     }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (List<long> row in lst) {\n            foreach (long num in row) {\n\
    \                if (num == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(num), row.LastIndexOf(num)));\n                }\n       \
    \     }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var item\
    \ in row) {\n                if (item == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(row), row.IndexOf(row)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            List<long>\
    \ rowCopy = new List<long>(row);\n            int rowCount = rowCopy.Count;\n\
    \            int colCount = row.Count;\n            int rowIndex = -1;\n     \
    \       int colIndex = -1;\n            while (rowIndex < rowCount - 1) {\n  \
    \              rowIndex++;\n                colIndex = 0;\n                while\
    \ (colIndex < colCount - 1) {\n                    colIndex++;\n             \
    \       if (rowCopy[rowIndex] == x) {\n                        result.Add(new\
    \ Tuple<long, long>(rowIndex, colIndex));\n                    }\n           \
    \     }\n            }\n        }\n        return result;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long num in row) {\n                if (num\
    \ == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(num),\
    \ row.LastIndexOf(num)));\n                }\n            }\n        }\n     \
    \   return result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   List<long> row = new List<long>();\n        List<long> col = new List<long>();\n\
    \        foreach (List<long> row in lst) {\n            row.Sort();\n        \
    \    col.AddRange(row.Skip(1).Take(row.Count - 1));\n            col.Sort();\n\
    \            foreach (long col in col) {\n                if (col == x) {\n  \
    \                  result.Add(new Tuple<long, long>(row.Count - 1, col.Count -\
    \ 1));\n                }\n            }\n        }\n        return result;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   List<long> row = new List<long>();\n        List<long> col = new List<long>();\n\
    \        foreach (List<long> row in lst) {\n            row.Sort();\n        \
    \    col.Sort();\n            if (row.Contains(x)) {\n                result.Add(new\
    \ Tuple<long, long>(row.IndexOf(x), col.IndexOf(x)));\n            }\n       \
    \ }\n        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            List<long>\
    \ columns = new List<long>();\n            foreach (long i in row) {\n       \
    \         if (i == x) {\n                    columns.Add(i);\n               \
    \ }\n            }\n            result.Add(new Tuple<long, long>(row.Count, columns.Count));\n\
    \        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x =>\
    \ x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        if (lst.Count == 0) {\n            return result;\n     \
    \   }\n        long maxRow = lst[0].Count;\n        long maxCol = lst[0].Max();\n\
    \        long minRow = lst[0].Min();\n        long minCol = lst[0].Min();\n  \
    \      long maxRowInRow = 0;\n        long maxColInCol = 0;\n        long minRowInRow\
    \ = 0;\n        long minColInCol = 0;\n        foreach (List<long> row in lst)\
    \ {\n            maxRowInRow = row.Max();\n            maxColInCol = row.Max();\n\
    \            minRowInRow = row.Min();\n            minColInCol = row.Min();\n\
    \        }\n        long row = 0;\n        long col = 0;\n        long rowInRow\
    \ = 0;\n        long colInCol = 0;\n        long rowInRowInRow = 0;\n        long\
    \ colInColInCol = 0;\n        long rowInRowInCol = 0;\n        long colInColInRow\
    \ = 0;\n        foreach (List<long> row in lst) {\n            foreach (long col\
    \ in row) {\n                rowInRow = row;\n                colInCol = col;\n\
    \                rowInRowInRow = rowInRow;\n                colInColInCol = colInCol;\n\
    \                rowInRowInCol = rowInRow;\n                colInColInRow = colInCol;\n\
    \                while (row < maxRow && col < maxCol) {\n                    if\
    \ (lst[row][col] == x) {\n                        result.Add(new Tuple<long, long>(rowInRow,\
    \ colInCol));\n                        break;\n                    }\n       \
    \             rowInRow++;\n                    colInCol++;\n                }\n\
    \                while (row < maxRow && col > minCol) {\n                    if\
    \ (lst[row][col] == x) {\n                        result.Add(new Tuple<long, long>(rowInRow,\
    \ colInCol));\n                        break;\n                    }\n       \
    \             rowInRow++;\n                    colInCol--;\n                }\n\
    \                while (row > minRow && col < maxCol) {\n                    if\
    \ (lst[row][col] == x) {\n                        result.Add(new Tuple<long, long>(rowInRow,\
    \ colInCol));\n                        break;\n                    }\n       \
    \             rowInRow--;\n                    colInCol++;\n                }\n\
    \                while (row > minRow && col > minCol) {\n                    if\
    \ (lst[row][col] == x) {\n                        result.Add(new Tuple<long, long>(rowInRow,\
    \ colInCol));\n                        break;\n                    }\n       \
    \             rowInRow", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ num in row) {\n                if (num == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(num), row.LastIndexOf(num)));\n              \
    \  }\n            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ n in row) {\n                if (n == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(n), row.IndexOf(n)));\n                }\n   \
    \         }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ num in row) {\n                if (num == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(num), row.IndexOf(x)));\n                }\n \
    \           }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<List<long>> row = new List<List<long>>();\n        foreach\
    \ (List<long> list in lst) {\n            row.Add(list);\n        }\n        foreach\
    \ (List<long> list in row) {\n            long y = list.FindIndex(x => x == x);\n\
    \            if (y != -1) {\n                result.Add(new Tuple<long, long>(0,\
    \ y));\n            }\n        }\n        List<Tuple<long, long>> sorted = result.OrderBy(x\
    \ => x.Item1).ThenByDescending(x => x.Item2).ToList();\n        return sorted;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (List<long> row in lst) {\n            foreach (long col in row) {\n\
    \                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(col), row.LastIndexOf(col)));\n                }\n       \
    \     }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(row), row.IndexOf(row)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(t => t.Item1).ThenByDescending(t\
    \ => t.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            List<long>\
    \ columns = new List<long>();\n            foreach (long n in row) {\n       \
    \         if (n == x) {\n                    columns.Add(n);\n               \
    \ }\n            }\n            result.Add(new Tuple<long, long>(row.Count, columns.Count));\n\
    \        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x =>\
    \ x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            var tuple = new Tuple<long,\
    \ long>(row.IndexOf(x), row.Last());\n            result.Add(tuple);\n       \
    \ }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (List<long> row in lst) {\n            List<long> columns = new List<long>();\n\
    \            foreach (long i in row) {\n                if (i == x) {\n      \
    \              columns.Add(i);\n                }\n            }\n           \
    \ result.Add(new Tuple<long, long>(row.Count, columns.Count));\n        }\n  \
    \      return result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (var row in lst) {\n            foreach (var item in row) {\n    \
    \            if (item == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(row), row.IndexOf(row)));\n                }\n           \
    \ }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            List<long>\
    \ rowCopy = new List<long>(row);\n            int rowLength = rowCopy.Count;\n\
    \            int colLength = row.Count;\n            int rowIndex = 0;\n     \
    \       int colIndex = 0;\n            while (rowIndex < rowLength && colIndex\
    \ < colLength) {\n                if (rowCopy[rowIndex] == x) {\n            \
    \        result.Add(new Tuple<long, long>(rowIndex, colIndex));\n            \
    \        rowIndex++;\n                    colIndex++;\n                } else\
    \ if (rowCopy[rowIndex] < x) {\n                    rowIndex++;\n            \
    \    } else {\n                    colIndex++;\n                }\n          \
    \  }\n        }\n        return result;", "        var result = new List<Tuple<long,\
    \ long>>();\n        var rows = lst.SelectMany(x => x).Distinct().ToList();\n\
    \        var columns = rows.Max();\n        var rows = rows.OrderBy(x => x).ToList();\n\
    \        var columns = columns.OrderByDescending(x => x).ToList();\n        var\
    \ rows = rows.Select(x => new Tuple<long, long>(x.Item1, x.Item2 - 1)).ToList();\n\
    \        var columns = columns.Select(x => new Tuple<long, long>(x.Item1, x.Item2\
    \ - 1)).ToList();\n        var rows = rows.Select(x => new Tuple<long, long>(x.Item1,\
    \ x.Item2)).ToList();\n        var columns = columns.Select(x => new Tuple<long,\
    \ long>(x.Item1, x.Item2)).ToList();\n        var rows = rows.Select(x => new\
    \ Tuple<long, long>(x.Item1, x.Item2)).ToList();\n        var columns = columns.Select(x\
    \ => new Tuple<long, long>(x.Item1, x.Item2)).ToList();\n        var rows = rows.Select(x\
    \ => new Tuple<long, long>(x.Item1, x.Item2)).ToList();\n        var columns =\
    \ columns.Select(x => new Tuple<long, long>(x.Item1, x.Item2)).ToList();\n   \
    \     var rows = rows.Select(x => new Tuple<long, long>(x.Item1, x.Item2)).ToList();\n\
    \        var columns = columns.Select(x => new Tuple<long, long>(x.Item1, x.Item2)).ToList();\n\
    \        var rows = rows.Select(x => new Tuple<long, long>(x.Item1, x.Item2)).ToList();\n\
    \        var columns = columns.Select(x => new Tuple<long, long>(x.Item1, x.Item2)).ToList();\n\
    \        var rows = rows.Select(x => new Tuple<long, long>(x.Item1, x.Item2)).ToList();\n\
    \        var columns = columns.Select(x => new Tuple<long, long>(x.Item1, x.Item2)).ToList();\n\
    \        var rows = rows.Select(x => new Tuple<long, long>(x.Item1, x.Item2)).ToList();\n\
    \        var columns = columns.Select(x => new Tuple<long, long>(x.Item1, x.Item2)).ToList();\n\
    \        var rows = rows.Select(x => new Tuple<long, long>(x.Item1, x.Item2)).ToList();\n\
    \        var columns = columns.Select(x => new Tuple<long, long>(x.Item1, x.Item2)).ToList();\n\
    \        var rows = rows.Select(x => new Tuple<long, long>(x.Item1, ", "     \
    \   List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        foreach\
    \ (List<long> row in lst) {\n            foreach (long n in row) {\n         \
    \       if (n == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(n),\
    \ row.IndexOf(x)));\n                }\n            }\n        }\n        return\
    \ result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();", "  \
    \      List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (List<long> row in lst) {\n            List<long> columns = new List<long>();\n\
    \            foreach (long i in row) {\n                if (i == x) {\n      \
    \              columns.Add(i);\n                }\n            }\n           \
    \ result.Add(new Tuple<long, long>(row.Count, columns.Count));\n        }\n  \
    \      return result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   List<long> row = new List<long>();\n        List<long> col = new List<long>();\n\
    \        foreach (List<long> row in lst) {\n            row.Sort();\n        \
    \    col.AddRange(row.Skip(1).Take(row.Count - 1).ToList());\n            col.Sort();\n\
    \            long y = col.Last();\n            long z = row.Last();\n        \
    \    if (x == y) {\n                result.Add(new Tuple<long, long>(0, row.Count\
    \ - 1));\n            } else if (x == z) {\n                result.Add(new Tuple<long,\
    \ long>(row.Count - 1, row.Count - 1));\n            } else if (x > y && x > z)\
    \ {\n                result.Add(new Tuple<long, long>(row.Count - 1, row.Count\
    \ - 1));\n            } else if (y > z) {\n                result.Add(new Tuple<long,\
    \ long>(0, row.Count - 1));\n            }\n        }\n        return result;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (List<long> row in lst) {\n            foreach (long num in row) {\n\
    \                if (num == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(num), row.IndexOf(x)));\n                }\n            }\n\
    \        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x =>\
    \ x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            List<Tuple<long,\
    \ long>> rowResult = new List<Tuple<long, long>>();\n            foreach (long\
    \ n in row) {\n                if (n == x) {\n                    rowResult.Add(new\
    \ Tuple<long, long>(0, row.IndexOf(n)));\n                }\n            }\n \
    \           result.AddRange(rowResult);\n        }\n        return result.OrderBy(x\
    \ => x.Item1).ThenByDescending(x => x.Item2).ToList();", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        List<Tuple<long, long>>\
    \ row = new List<Tuple<long, long>>();\n        foreach (List<long> row in lst)\
    \ {\n            row.Sort();\n            row.Reverse();\n            foreach\
    \ (long col in row) {\n                if (col == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(row), row.IndexOf(row)));\n                }\n\
    \            }\n        }\n        return result;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        List<long> row = new\
    \ List<long>();\n        List<long> col = new List<long>();\n        foreach (List<long>\
    \ row in lst) {\n            row.Sort();\n            col.AddRange(row.Skip(1).Take(row.Count\
    \ - 1).ToList());\n            col.Sort();\n            row.Sort();\n        \
    \    foreach (long c in col) {\n                if (c == x) {\n              \
    \      result.Add(new Tuple<long, long>(row.IndexOf(row[0]), col.IndexOf(c)));\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if\
    \ (lst.Count == 0) {\n            return result;\n        }\n        List<long>\
    \ row = new List<long>();\n        List<long> col = new List<long>();\n      \
    \  foreach (List<long> row in lst) {\n            row.Sort();\n            col.AddRange(row.Distinct().OrderByDescending(x\
    \ => x).ToList());\n            col.Sort();\n            foreach (long col in\
    \ col) {\n                if (col.Equals(x)) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(col), col.IndexOf(col)));\n                }\n\
    \            }\n        }\n        return result;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (var row in\
    \ lst) {\n            var tuple = new Tuple<long, long>(0, 0);\n            foreach\
    \ (var item in row) {\n                if (item == x) {\n                    tuple.Item1\
    \ = row.IndexOf(item);\n                    tuple.Item2 = row.IndexOf(x);\n  \
    \                  break;\n                }\n            }\n            result.Add(tuple);\n\
    \        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x =>\
    \ x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var col\
    \ in row.OrderByDescending(c => c)) {\n                if (col == x) {\n     \
    \               result.Add(new Tuple<long, long>(row.IndexOf(row), row.IndexOf(col)));\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        foreach\
    \ (List<long> row in lst) {\n            foreach (long num in row) {\n       \
    \         if (num == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(num),\
    \ row.LastIndexOf(num)));\n                }\n            }\n        }\n     \
    \   return result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();",
  "        List<Tuple<long, long>> res = new List<Tuple<long, long>>();\n        foreach\
    \ (List<long> row in lst) {\n            foreach (long num in row) {\n       \
    \         if (num == x) {\n                    res.Add(new Tuple<long, long>(row.IndexOf(num),\
    \ row.IndexOf(x)));\n                }\n            }\n        }\n        return\
    \ res.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();", "     \
    \   List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        foreach\
    \ (var row in lst) {\n            foreach (var item in row) {\n              \
    \  if (item == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(item),\
    \ row.IndexOf(x)));\n                }\n            }\n        }\n        return\
    \ result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();", "  \
    \      List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (List<long> row in lst) {\n            List<Tuple<long, long>> rowResult\
    \ = new List<Tuple<long, long>>();\n            foreach (long num in row) {\n\
    \                if (num == x) {\n                    rowResult.Add(new Tuple<long,\
    \ long>(row.IndexOf(num), row.IndexOf(x)));\n                }\n            }\n\
    \            result.AddRange(rowResult);\n        }\n        return result.OrderBy(x\
    \ => x.Item1).ThenByDescending(x => x.Item2).ToList();", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (var row in\
    \ lst) {\n            foreach (var item in row) {\n                if (item ==\
    \ x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(row),\
    \ row.IndexOf(row)));\n                }\n            }\n        }\n        return\
    \ result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();", "  \
    \      List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (var row in lst) {\n            foreach (var item in row) {\n    \
    \            if (item == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(item), row.IndexOf(x)));\n                }\n            }\n\
    \        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x =>\
    \ x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            var rowTuple = new\
    \ Tuple<long, long>(row.Count, row.Count);\n            foreach (var item in row)\
    \ {\n                if (item == x) {\n                    result.Add(rowTuple);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        List<Tuple<long, long>> res = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            List<long>\
    \ col = new List<long>();\n            foreach (long n in row) {\n           \
    \     if (n == x) {\n                    col.Add(n);\n                }\n    \
    \        }\n            res.Add(new Tuple<long, long>(row.Count, col.Count));\n\
    \        }\n        return res.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (var row in lst) {\n            foreach (var col in row.OrderByDescending(y\
    \ => y).TakeWhile(y => y != x)) {\n                result.Add(new Tuple<long,\
    \ long>(row, col));\n            }\n        }\n        return result;", "    \
    \    List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n       \
    \ foreach (var row in lst) {\n            foreach (var col in row.OrderByDescending(c\
    \ => c)) {\n                if (col == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(row), col.IndexOf(col)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(t => t.Item1).ThenByDescending(t\
    \ => t.Item2).ToList();", "        List<Tuple<long, long>> res = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            var found = false;\n\
    \            foreach (var v in row) {\n                if (v == x) {\n       \
    \             found = true;\n                    break;\n                }\n \
    \           }\n            if (found) {\n                res.Add(new Tuple<long,\
    \ long>(row.IndexOf(row.FindIndex(x => x == x)), row.IndexOf(row.FindIndex(x =>\
    \ x == x))));\n            }\n        }\n        return res.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var item\
    \ in row) {\n                if (item == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(row), row.IndexOf(row)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            List<Tuple<long,\
    \ long>> rowResult = new List<Tuple<long, long>>();\n            foreach (long\
    \ num in row) {\n                if (num == x) {\n                    rowResult.Add(new\
    \ Tuple<long, long>((long)row.IndexOf(num), row.IndexOf(x)));\n              \
    \  }\n            }\n            result.AddRange(rowResult);\n        }\n    \
    \    return result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (List<long> row in lst) {\n            foreach (long num in row) {\n\
    \                if (num == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(num), row.IndexOf(x)));\n                }\n            }\n\
    \        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x =>\
    \ x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        if (lst.Count == 0) {\n            return result;\n     \
    \   }\n        long maxRow = lst[0].Count;\n        long maxCol = lst[0].Max();\n\
    \        long minRow = lst[0].Min();\n        long minCol = lst[0].Min();\n  \
    \      long maxRow2 = maxRow;\n        long maxCol2 = maxCol;\n        long minRow2\
    \ = minRow;\n        long minCol2 = minCol;\n        long maxRow3 = maxRow;\n\
    \        long maxCol3 = maxCol;\n        long minRow3 = minRow;\n        long\
    \ minCol3 = minCol;\n        long maxRow4 = maxRow;\n        long maxCol4 = maxCol;\n\
    \        long minRow4 = minRow;\n        long minCol4 = minCol;\n        long\
    \ maxRow5 = maxRow;\n        long maxCol5 = maxCol;\n        long minRow5 = minRow;\n\
    \        long minCol5 = minCol;\n        long maxRow6 = maxRow;\n        long\
    \ maxCol6 = maxCol;\n        long minRow6 = minRow;\n        long minCol6 = minCol;\n\
    \        long maxRow7 = maxRow;\n        long maxCol7 = maxCol;\n        long\
    \ minRow7 = minRow;\n        long minCol7 = minCol;\n        long maxRow8 = maxRow;\n\
    \        long maxCol8 = maxCol;\n        long minRow8 = minRow;\n        long\
    \ minCol8 = minCol;\n        long maxRow9 = maxRow;\n        long maxCol9 = maxCol;\n\
    \        long minRow9 = minRow;\n        long minCol9 = minCol;\n        long\
    \ maxRow10 = maxRow;\n        long maxCol10 = maxCol;\n        long minRow10 =\
    \ minRow;\n        long minCol10 = minCol;\n        long maxRow11 = maxRow;\n\
    \        long maxCol11 = maxCol;\n        long minRow11 = minRow;\n        long\
    \ minCol11 = minCol;\n        long maxRow12 = maxRow;\n        long maxCol12 =\
    \ maxCol;\n        long minRow12 = minRow;\n        long minCol12 = minCol;\n\
    \        long maxRow13 = maxRow;\n        long maxCol13 = maxCol;\n        long\
    \ minRow13 = minRow;\n        long minCol13 = minCol;\n        long maxRow14 =\
    \ max", "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n\
    \        foreach (List<long> row in lst) {\n            foreach (long col in row)\
    \ {\n                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(col), row.LastIndexOf(col)));\n                }\n       \
    \     }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var item\
    \ in row) {\n                if (item == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(row), row.IndexOf(row)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<long> row = new List<long>();\n        List<long> col\
    \ = new List<long>();\n        foreach (List<long> row in lst) {\n           \
    \ row.Sort();\n            col.AddRange(row.Skip(1).Take(row.Count - 1));\n  \
    \          col.Sort();\n            foreach (long c in col) {\n              \
    \  if (c == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(row[0]),\
    \ col.IndexOf(c)));\n                }\n            }\n        }\n        return\
    \ result;", "        List<Tuple<long, long>> res = new List<Tuple<long, long>>();\n\
    \        foreach (var row in lst) {\n            foreach (var col in row.OrderByDescending(c\
    \ => c)) {\n                if (col == x) {\n                    res.Add(new Tuple<long,\
    \ long>(row.IndexOf(x), col.IndexOf(x)));\n                }\n            }\n\
    \        }\n        return res.OrderBy(t => t.Item1).ThenByDescending(t => t.Item2).ToList();",
  "        var result = new List<Tuple<long, long>>();\n        foreach (var row in\
    \ lst) {\n            var rowTuple = new Tuple<long, long>(row.Count, row.Count);\n\
    \            foreach (var item in row) {\n                if (item == x) {\n \
    \                   result.Add(rowTuple);\n                    break;\n      \
    \          }\n            }\n        }\n        return result.OrderBy(t => t.Item1).ThenByDescending(t\
    \ => t.Item2).ToList();", "        List<Tuple<long, long>> res = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var col\
    \ in row.OrderByDescending(c => c)) {\n                if (col == x) {\n     \
    \               res.Add(new Tuple<long, long>((long)row.IndexOf(x), col));\n \
    \               }\n            }\n        }\n        return res.OrderBy(r => r.Item1).ThenByDescending(r\
    \ => r.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        if (lst.Count == 0) {\n            return result;\n     \
    \   }\n        long maxRow = lst[0].Count;\n        long maxCol = lst[0].Max();\n\
    \        long row = 0;\n        long col = 0;\n        bool found = false;\n \
    \       foreach (List<long> row in lst) {\n            if (row.Count == maxRow)\
    \ {\n                found = true;\n                for (int i = 0; i < row.Count;\
    \ i++) {\n                    if (row[i] == x) {\n                        result.Add(new\
    \ Tuple<long, long>(row, i));\n                        break;\n              \
    \      }\n                }\n            }\n            if (found) {\n       \
    \         col++;\n                if (col == maxCol) {\n                    row++;\n\
    \                    col = 0;\n                }\n            }\n        }\n \
    \       return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            List<long>\
    \ col = new List<long>();\n            foreach (long n in row) {\n           \
    \     if (n == x) {\n                    col.Add(n);\n                }\n    \
    \        }\n            result.Add(new Tuple<long, long>(row.Count, col.Count));\n\
    \        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x =>\
    \ x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ num in row) {\n                if (num == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(num), row.IndexOf(x)));\n                }\n \
    \           }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(col), row.LastIndexOf(col)));\n              \
    \  }\n            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            var rowTuple = new\
    \ Tuple<long, long>(0, 0);\n            foreach (var item in row) {\n        \
    \        if (item == x) {\n                    rowTuple.Item1 = row.IndexOf(item);\n\
    \                    rowTuple.Item2 = row.IndexOf(x);\n                    break;\n\
    \                }\n            }\n            result.Add(rowTuple);\n       \
    \ }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (var row in lst) {\n            foreach (var item in row) {\n    \
    \            if (item == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(item), row.IndexOf(x)));\n                }\n            }\n\
    \        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x =>\
    \ x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ n in row) {\n                if (n == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(n), row.IndexOf(n)));\n                }\n   \
    \         }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var item\
    \ in row) {\n                if (item == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(row), row.IndexOf(row)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ n in row) {\n                if (n == x) {\n                    result.Add(new\
    \ Tuple<long, long>((long)row.IndexOf(row), row.IndexOf(row)));\n            \
    \    }\n            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            long y = row.FindIndex(i\
    \ => i == x);\n            if (y >= 0) {\n                result.Add(new Tuple<long,\
    \ long>(row.IndexOf(x), y));\n            }\n        }\n        return result.OrderBy(i\
    \ => i.Item1).ThenByDescending(i => i.Item2).ToList();", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (List<long>\
    \ row in lst) {\n            List<Tuple<long, long>> rowResult = new List<Tuple<long,\
    \ long>>();\n            foreach (long n in row) {\n                if (n == x)\
    \ {\n                    rowResult.Add(new Tuple<long, long>((long)row.IndexOf(n),\
    \ row.IndexOf(n)));\n                }\n            }\n            result.AddRange(rowResult);\n\
    \        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x =>\
    \ x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ num in row) {\n                if (num == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(num), row.IndexOf(x)));\n                }\n \
    \           }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ num in row) {\n                if (num == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(num), row.IndexOf(x)));\n                }\n \
    \           }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<List<long>> row = new List<List<long>>();\n        foreach\
    \ (List<long> row in lst) {\n            if (row.Contains(x)) {\n            \
    \    result.Add(new Tuple<long, long>(row.IndexOf(x), row.LastIndexOf(x)));\n\
    \            }\n        }\n        return result;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long col in row) {\n                if (col\
    \ == x) {\n                    result.Add(new Tuple<long, long>((long)row.IndexOf(row),\
    \ row.IndexOf(col)));\n                }\n            }\n        }\n        return\
    \ result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();", "  \
    \      List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (List<long> row in lst) {\n            foreach (long num in row) {\n\
    \                if (num == x) {\n                    result.Add(new Tuple<long,\
    \ long>((long)row.IndexOf(num), row.IndexOf(x)));\n                }\n       \
    \     }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ n in row) {\n                if (n == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(row), row.IndexOf(row)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(t => t.Item1).ThenByDescending(t\
    \ => t.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            var rowTuple = new\
    \ Tuple<long, long>(row.Count, row.Count);\n            foreach (var item in row)\
    \ {\n                if (item == x) {\n                    result.Add(rowTuple);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (var row in lst) {\n            foreach (var item in row) {\n    \
    \            if (item == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(row), row.IndexOf(row)));\n                }\n           \
    \ }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var item\
    \ in row) {\n                if (item == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(item), row.IndexOf(x)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<long> row = new List<long>();\n        List<long> col\
    \ = new List<long>();\n        foreach (List<long> row in lst) {\n           \
    \ row.Sort();\n            col.AddRange(row.Take(row.Count - 1).ToList());\n \
    \           col.Sort();\n            if (col.Contains(x)) {\n                result.Add(new\
    \ Tuple<long, long>(row.Count - 1, col.Count - 1));\n            }\n        }\n\
    \        return result;", "        List<Tuple<long, long>> res = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var col\
    \ in row.OrderByDescending(y => y)) {\n                if (col == x) {\n     \
    \               res.Add(new Tuple<long, long>(row.IndexOf(row), col.IndexOf(col)));\n\
    \                }\n            }\n        }\n        return res.OrderBy(x =>\
    \ x.Item1).ThenByDescending(x => x.Item2).ToList();", "        var result = new\
    \ List<Tuple<long, long>>();\n        foreach (var row in lst) {\n           \
    \ var rowTuple = new Tuple<long, long>(row.Count, 0);\n            foreach (var\
    \ item in row) {\n                if (item == x) {\n                    rowTuple.Item1\
    \ = row.Count;\n                    rowTuple.Item2 = row.Count - 1;\n        \
    \            result.Add(rowTuple);\n                    break;\n             \
    \   }\n            }\n        }\n        return result;", "        var result\
    \ = new List<Tuple<long, long>>();\n        var rows = lst.Select(x => x.ToList()).ToList();\n\
    \        var cols = rows.First().ToList();\n        var rowIndex = 0;\n      \
    \  var colIndex = 0;\n        while (rowIndex < rows.Count && colIndex < cols.Count)\
    \ {\n            var row = rows[rowIndex];\n            var col = cols[colIndex];\n\
    \            if (row.Contains(x)) {\n                result.Add(new Tuple<long,\
    \ long>(rowIndex, colIndex));\n            }\n            if (colIndex == cols.Count\
    \ - 1) {\n                rowIndex++;\n                colIndex = 0;\n       \
    \     } else {\n                colIndex++;\n            }\n        }\n      \
    \  return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(col), row.LastIndexOf(col)));\n              \
    \  }\n            }\n        }\n        return result.OrderBy(t => t.Item1).ThenByDescending(t\
    \ => t.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<long> row = new List<long>();\n        List<long> col\
    \ = new List<long>();\n        foreach (List<long> row in lst) {\n           \
    \ row.Sort();\n            col.AddRange(row.Skip(1).Take(row.Count - 1));\n  \
    \          col.Sort();\n            long y = col.Last();\n            long x =\
    \ row.Last();\n            result.Add(new Tuple<long, long>(x, y));\n        }\n\
    \        result.Sort((x, y) => x.Item1.CompareTo(y.Item1));\n        result.Sort((x,\
    \ y) => y.Item2.CompareTo(x.Item2));\n        return result;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (var row in\
    \ lst) {\n            foreach (var item in row) {\n                if (item ==\
    \ x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(row),\
    \ row.IndexOf(row)));\n                }\n            }\n        }\n        return\
    \ result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();", "  \
    \      List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (List<long> row in lst) {\n            foreach (long col in row) {\n\
    \                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(col), row.LastIndexOf(col)));\n                }\n       \
    \     }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<long> row = new List<long>();\n        List<long> col\
    \ = new List<long>();\n        foreach (List<long> row in lst) {\n           \
    \ row.Sort();\n            foreach (long c in row) {\n                col.Add(c);\n\
    \            }\n            col.Sort();\n            foreach (long c in col) {\n\
    \                if (c == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(row.Last()), col.IndexOf(col.Last())));\n                }\n\
    \            }\n        }\n        return result;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long num in row) {\n                if (num\
    \ == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(num),\
    \ row.IndexOf(x)));\n                }\n            }\n        }\n        return\
    \ result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();", "  \
    \      List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (var row in lst) {\n            foreach (var item in row) {\n    \
    \            if (item == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(row), row.IndexOf(row)));\n                }\n           \
    \ }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> res = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ num in row) {\n                if (num == x) {\n                    res.Add(new\
    \ Tuple<long, long>(row.IndexOf(num), row.IndexOf(x)));\n                }\n \
    \           }\n        }\n        return res.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ num in row) {\n                if (num == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(num), row.IndexOf(x)));\n                }\n \
    \           }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<long> row = new List<long>();\n        List<long> col\
    \ = new List<long>();\n        foreach (List<long> row in lst) {\n           \
    \ row.Sort();\n            foreach (long c in row) {\n                col.Add(c);\n\
    \            }\n            col.Sort();\n            col.Reverse();\n        \
    \    col.Add(x);\n            result.Add(new Tuple<long, long>(row.Count, col.Count));\n\
    \        }\n        return result;", "        List<Tuple<long, long>> result =\
    \ new List<Tuple<long, long>>();\n        foreach (List<long> row in lst) {\n\
    \            foreach (long n in row) {\n                if (n == x) {\n      \
    \              result.Add(new Tuple<long, long>(row.IndexOf(row), row.IndexOf(row)));\n\
    \                }\n            }\n        }\n        return result.OrderBy(x\
    \ => x.Item1).ThenByDescending(x => x.Item2).ToList();", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (var row in\
    \ lst) {\n            foreach (var col in row.OrderByDescending(x => x).TakeWhile(x\
    \ => x != x)) {\n                if (col == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(row), col.IndexOf(col)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var col\
    \ in row.OrderByDescending(c => c)) {\n                if (col == x) {\n     \
    \               result.Add(new Tuple<long, long>(row.IndexOf(row), col.IndexOf(col)));\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        foreach\
    \ (var row in lst) {\n            var y = row.FindIndex(i => i == x);\n      \
    \      if (y >= 0) {\n                result.Add(new Tuple<long, long>(y, row.FindIndex(i\
    \ => i == x - 1)));\n            }\n        }\n        return result.OrderBy(i\
    \ => i.Item1).ThenByDescending(i => i.Item2).ToList();", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (var row in\
    \ lst) {\n            foreach (var item in row) {\n                if (item ==\
    \ x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(item),\
    \ row.IndexOf(x)));\n                }\n            }\n        }\n        return\
    \ result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();", "  \
    \      List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (List<long> row in lst) {\n            foreach (long n in row) {\n\
    \                if (n == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(n), row.IndexOf(x)));\n                }\n            }\n\
    \        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x =>\
    \ x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var item\
    \ in row) {\n                if (item == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(row), row.IndexOf(row)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        var result = new List<Tuple<long, long>>();\n\
    \        var rows = lst.Select(x => x.ToList()).ToList();\n        var rows =\
    \ rows.Where(x => x.Count() > 0).ToList();\n        var rows = rows.OrderBy(x\
    \ => x.Count()).ToList();\n        var rows = rows.OrderByDescending(x => x.Count()).ToList();\n\
    \        var rows = rows.OrderBy(x => x.First()).ToList();\n        var rows =\
    \ rows.OrderByDescending(x => x.First()).ToList();\n        var rows = rows.OrderBy(x\
    \ => x.Last()).ToList();\n        var rows = rows.OrderByDescending(x => x.Last()).ToList();\n\
    \        var rows = rows.OrderBy(x => x.Count()).ToList();\n        var rows =\
    \ rows.OrderByDescending(x => x.Count()).ToList();\n        var rows = rows.OrderBy(x\
    \ => x.First()).ToList();\n        var rows = rows.OrderByDescending(x => x.First()).ToList();\n\
    \        var rows = rows.OrderBy(x => x.Last()).ToList();\n        var rows =\
    \ rows.OrderByDescending(x => x.Last()).ToList();\n        var rows = rows.OrderBy(x\
    \ => x.Count()).ToList();\n        var rows = rows.OrderByDescending(x => x.Count()).ToList();\n\
    \        var rows = rows.OrderBy(x => x.First()).ToList();\n        var rows =\
    \ rows.OrderByDescending(x => x.First()).ToList();\n        var rows = rows.OrderBy(x\
    \ => x.Last()).ToList();\n        var rows = rows.OrderByDescending(x => x.Last()).ToList();\n\
    \        var rows = rows.OrderBy(x => x.Count()).ToList();\n        var rows =\
    \ rows.OrderByDescending(x => x.Count()).ToList();\n        var rows = rows.OrderBy(x\
    \ => x.First()).ToList();\n        var rows = rows.OrderByDescending(x => x.First()).ToList();\n\
    \        var rows = rows.OrderBy(x => x.Last()).ToList();\n        var rows =\
    \ rows.OrderByDescending(x => x.Last()).ToList();\n        var rows = rows.OrderBy(x\
    \ => x.Count()).ToList();\n        var rows = rows.OrderByDescending(x => x.Count()).ToList();\n\
    \        var rows = rows.OrderBy(x => x.First()).ToList();\n        var rows =\
    \ rows.OrderByDescending(x => x.First()).ToList();\n        var rows = rows.OrderBy(x\
    \ => x.Last()).ToList();\n        var rows = rows.OrderByDescending(x => x.Last()).ToList();\n\
    \        var rows = rows.OrderBy(", "        List<Tuple<long, long>> res = new\
    \ List<Tuple<long, long>>();\n        foreach (List<long> row in lst) {\n    \
    \        List<long> rowCopy = new List<long>(row);\n            int index = rowCopy.FindIndex(v\
    \ => v == x);\n            if (index >= 0) {\n                res.Add(new Tuple<long,\
    \ long>(index, rowCopy.FindIndex(v => v == x)));\n            }\n        }\n \
    \       return res.OrderBy(v => v.Item1).ThenByDescending(v => v.Item2).ToList();",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (List<long> row in lst) {\n            foreach (long val in row) {\n\
    \                if (val == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(val), row.LastIndexOf(val)));\n                }\n       \
    \     }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ num in row) {\n                if (num == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(num), row.IndexOf(x)));\n                }\n \
    \           }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var col\
    \ in row.OrderByDescending(c => c)) {\n                if (col == x) {\n     \
    \               result.Add(new Tuple<long, long>(row.IndexOf(row), col.IndexOf(col)));\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        foreach\
    \ (List<long> row in lst) {\n            foreach (long num in row) {\n       \
    \         if (num == x) {\n                    result.Add(new Tuple<long, long>((long)row.IndexOf(num),\
    \ row.IndexOf(x)));\n                }\n            }\n        }\n        return\
    \ result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();", "  \
    \      List<Tuple<long, long>> res = new List<Tuple<long, long>>();\n        List<long>\
    \ row = new List<long>();\n        List<long> col = new List<long>();\n      \
    \  foreach (List<long> row in lst) {\n            row.Sort();\n            col.AddRange(row.Skip(1).Take(row.Count\
    \ - 1));\n            col.Sort();\n            foreach (long c in col) {\n   \
    \             if (c == x) {\n                    res.Add(new Tuple<long, long>(row.Count,\
    \ col.Count));\n                    break;\n                }\n            }\n\
    \        }\n        return res;", "        List<Tuple<long, long>> result = new\
    \ List<Tuple<long, long>>();\n        foreach (List<long> row in lst) {\n    \
    \        foreach (long num in row) {\n                if (num == x) {\n      \
    \              result.Add(new Tuple<long, long>(row.IndexOf(num), row.IndexOf(x)));\n\
    \                }\n            }\n        }\n        return result.OrderBy(x\
    \ => x.Item1).ThenByDescending(x => x.Item2).ToList();", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        List<Tuple<long, long>>\
    \ row = new List<Tuple<long, long>>();\n        foreach (List<long> row in lst)\
    \ {\n            row.Sort();\n            foreach (long y in row) {\n        \
    \        if (y == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(row),\
    \ row.IndexOf(row)));\n                }\n            }\n        }\n        return\
    \ result;", "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n\
    \        foreach (List<long> row in lst) {\n            foreach (long num in row)\
    \ {\n                if (num == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(num), row.IndexOf(x)));\n                }\n            }\n\
    \        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x =>\
    \ x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(row), row.IndexOf(row)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ num in row) {\n                if (num == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(num), row.IndexOf(x)));\n                }\n \
    \           }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ n in row) {\n                if (n == x) {\n                    result.Add(new\
    \ Tuple<long, long>((long)row.IndexOf(row), row.IndexOf(n)));\n              \
    \  }\n            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> res = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            List<long>\
    \ rowCopy = new List<long>(row);\n            int index = rowCopy.FindIndex(i\
    \ => i == x);\n            if (index >= 0) {\n                res.Add(new Tuple<long,\
    \ long>(index, rowCopy.IndexOf(index)));\n            }\n        }\n        return\
    \ res.OrderBy(i => i.Item1).ThenByDescending(i => i.Item2).ToList();", "     \
    \   List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        foreach\
    \ (var row in lst) {\n            var rowTuple = new Tuple<long, long>(row.Count,\
    \ 0);\n            foreach (var item in row) {\n                if (item == x)\
    \ {\n                    rowTuple.Item2 = row.IndexOf(item);\n               \
    \     break;\n                }\n            }\n            result.Add(rowTuple);\n\
    \        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x =>\
    \ x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var item\
    \ in row) {\n                if (item == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(item), row.IndexOf(x)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        if (lst.Count == 0) {\n            return result;\n     \
    \   }\n        List<long> row = new List<long>();\n        List<long> col = new\
    \ List<long>();\n        foreach (List<long> row in lst) {\n            row.Sort();\n\
    \            col.AddRange(row.Reverse());\n        }\n        col.Sort();\n  \
    \      long rowCount = row.Count;\n        long colCount = col.Count;\n      \
    \  long rowSum = 0;\n        long colSum = 0;\n        long rowMax = rowCount\
    \ - 1;\n        long colMax = colCount - 1;\n        long rowMin = 0;\n      \
    \  long colMin = 0;\n        long rowSum2 = 0;\n        long colSum2 = 0;\n  \
    \      long rowMax2 = 0;\n        long colMax2 = 0;\n        long rowMin2 = 0;\n\
    \        long colMin2 = 0;\n        long rowSum3 = 0;\n        long colSum3 =\
    \ 0;\n        long rowMax3 = 0;\n        long colMax3 = 0;\n        long rowMin3\
    \ = 0;\n        long colMin3 = 0;\n        long rowSum4 = 0;\n        long colSum4\
    \ = 0;\n        long rowMax4 = 0;\n        long colMax4 = 0;\n        long rowMin4\
    \ = 0;\n        long colMin4 = 0;\n        long rowSum5 = 0;\n        long colSum5\
    \ = 0;\n        long rowMax5 = 0;\n        long colMax5 = 0;\n        long rowMin5\
    \ = 0;\n        long colMin5 = 0;\n        long rowSum6 = 0;\n        long colSum6\
    \ = 0;\n        long rowMax6 = 0;\n        long colMax6 = 0;\n        long rowMin6\
    \ = 0;\n        long colMin6 = 0;\n        long rowSum7 = 0;\n        long colSum7\
    \ = 0;\n        long rowMax7 = 0;\n        long colMax7 = 0;\n        long rowMin7\
    \ = 0;\n        long colMin7 = 0;\n        long rowSum8 = 0;\n        long colSum8\
    \ = 0;\n        long rowMax8 = 0;\n        long colMax8 = 0;\n        long rowMin8\
    \ = 0;\n        long colMin8 = 0;\n        long rowSum9 = 0;\n        long colSum9\
    \ = 0;\n        long rowMax9 = 0;\n        long colMax9 = 0;\n        long rowMin9\
    \ = 0;\n        long colMin9 = 0;\n        long rowSum10 = 0;\n        long colSum10\
    \ = 0;\n        long rowMax10 = 0;\n        long colMax10 = 0;\n        long rowMin10\
    \ = 0;\n        long colMin10 = 0;\n        long rowSum11 = 0;\n        long colSum11\
    \ = 0;\n        long rowMax11 = 0;", "        List<Tuple<long, long>> result =\
    \ new List<Tuple<long, long>>();\n        List<long> row = new List<long>();\n\
    \        List<long> col = new List<long>();\n        foreach (List<long> row in\
    \ lst) {\n            row.Sort();\n            col.AddRange(row.Skip(1).Take(row.Count\
    \ - 1));\n            col.Sort();\n            row.Sort();\n            foreach\
    \ (long col in col) {\n                if (col == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(row[0]), col.IndexOf(col)));\n               \
    \ }\n            }\n        }\n        return result;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (var row in\
    \ lst) {\n            foreach (var item in row) {\n                if (item ==\
    \ x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(item),\
    \ row.LastIndexOf(item)));\n                }\n            }\n        }\n    \
    \    return result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (var row in lst) {\n            foreach (var item in row) {\n    \
    \            if (item == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(item), row.IndexOf(x)));\n                }\n            }\n\
    \        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x =>\
    \ x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        if (lst.Count == 0) {\n            return result;\n     \
    \   }\n        long maxRow = lst[0].Count;\n        long maxCol = lst[0].Max();\n\
    \        long row = 0;\n        long col = 0;\n        foreach (List<long> row\
    \ in lst) {\n            if (row.Count > maxRow) {\n                maxRow = row.Count;\n\
    \            }\n            if (row.Max() > maxCol) {\n                maxCol\
    \ = row.Max();\n            }\n        }\n        long maxRowInRow = maxRow -\
    \ 1;\n        long maxColInCol = maxCol - 1;\n        long rowInRow = 0;\n   \
    \     long colInCol = 0;\n        long rowInRowInCol = 0;\n        long colInColInRow\
    \ = 0;\n        long rowInRowInColInRow = 0;\n        long colInColInRowInCol\
    \ = 0;\n        long rowInRowInColInRowInCol = 0;\n        long colInColInRowInColInRow\
    \ = 0;\n        long rowInRowInColInRowInColInRow = 0;\n        long colInColInRowInColInRowInCol\
    \ = 0;\n        long rowInRowInColInRowInColInRowInCol = 0;\n        long colInColInRowInColInRowInColInRow\
    \ = 0;\n        long rowInRowInColInRowInColInRowInColInRow = 0;\n        long\
    \ colInColInRowInColInRowInColInRowInColInRow = 0;\n        long rowInRowInColInRowInColInRowInColInRowInColInRow\
    \ = 0;\n        long colInColInRowInColInRowInColInRowInColInRowInCol = 0;\n \
    \       long rowInRowInColInRowInColInRowInColInRowInColInRowInCol = 0;\n    \
    \    long colInColInRowInColInRowInColInRowInColInRowInColInRow = 0;\n       \
    \ long rowInRowInColInRowInColInRowInColInRowInColInRowInColInRow = 0;\n     \
    \   long colInColInRowInColInRowInColInRowInColInRowInColInRowInCol = 0;\n   \
    \     long rowInRowInColInRowInColInRowInColInRowInColInRowInColInRow = 0;\n \
    \       long colInColInRowInColInRowInColInRowInColInRowInCol", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (var row in\
    \ lst) {\n            foreach (var item in row) {\n                if (item ==\
    \ x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(row),\
    \ row.IndexOf(row)));\n                }\n            }\n        }\n        return\
    \ result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();", "  \
    \      var result = new List<Tuple<long, long>>();\n        var rows = lst.Select(row\
    \ => row.ToArray()).ToArray();\n        var rows = rows.Where(row => row.All(i\
    \ => i >= 0)).ToArray();\n        var rows = rows.Where(row => row.Length > 0).ToArray();\n\
    \        var rows = rows.OrderBy(row => row.Length).ToArray();\n        var rows\
    \ = rows.OrderByDescending(row => row.Length).ToArray();\n        var rows = rows.OrderBy(row\
    \ => row.First()).ToArray();\n        var rows = rows.OrderByDescending(row =>\
    \ row.First()).ToArray();\n        var rows = rows.OrderBy(row => row.Last()).ToArray();\n\
    \        var rows = rows.OrderByDescending(row => row.Last()).ToArray();\n   \
    \     var rows = rows.OrderBy(row => row.Sum()).ToArray();\n        var rows =\
    \ rows.OrderByDescending(row => row.Sum()).ToArray();\n        var rows = rows.OrderBy(row\
    \ => row.Max()).ToArray();\n        var rows = rows.OrderByDescending(row => row.Max()).ToArray();\n\
    \        var rows = rows.OrderBy(row => row.Min()).ToArray();\n        var rows\
    \ = rows.OrderByDescending(row => row.Min()).ToArray();\n        var rows = rows.OrderBy(row\
    \ => row.Average()).ToArray();\n        var rows = rows.OrderByDescending(row\
    \ => row.Average()).ToArray();\n        var rows = rows.OrderBy(row => row.StandardDeviation()).ToArray();\n\
    \        var rows = rows.OrderByDescending(row => row.StandardDeviation()).ToArray();\n\
    \        var rows = rows.OrderBy(row => row.Count()).ToArray();\n        var rows\
    \ = rows.OrderByDescending(row => row.Count()).ToArray();\n        var rows =\
    \ rows.OrderBy(row => row.Sum(i => i)).ToArray();\n        var rows = rows.OrderByDescending(row\
    \ => row.Sum(i => i)).ToArray();\n        var rows = rows.OrderBy(row => row.Max(i\
    \ => i)).ToArray();\n        var rows = rows.OrderByDescending(row => row.Max(i\
    \ => i)).ToArray();\n        var rows = rows.OrderBy(row => row.Min(i => i)).ToArray();\n\
    \        var rows = rows.OrderByDescending(row => row.Min(i => i)).ToArray();\n\
    \        var rows = rows.OrderBy(row => row.Average(i => i)).ToArray();\n    \
    \    var rows = rows.OrderByDescending(row => row.Average(i => i)).ToArray();\n\
    \        var rows = rows.OrderBy(row => row.StandardDevi", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (List<long>\
    \ row in lst) {\n            List<long> columns = new List<long>();\n        \
    \    foreach (long n in row) {\n                if (n == x) {\n              \
    \      columns.Add(n);\n                }\n            }\n            columns.Sort();\n\
    \            columns.Reverse();\n            columns.Sort();\n            result.Add(new\
    \ Tuple<long, long>(row.Count, columns.Count));\n        }\n        result.Sort();\n\
    \        result.Sort((x, y) => x.Item1.CompareTo(y.Item1));\n        result.Sort((x,\
    \ y) => y.Item2.CompareTo(x.Item2));\n        return result;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (var row in\
    \ lst) {\n            foreach (var item in row) {\n                if (item ==\
    \ x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(row),\
    \ row.IndexOf(row)));\n                }\n            }\n        }\n        return\
    \ result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();", "  \
    \      List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   List<long> row = new List<long>();\n        List<long> col = new List<long>();\n\
    \        foreach (List<long> row in lst) {\n            row.Sort();\n        \
    \    col.AddRange(row.Skip(1).Take(row.Count - 1).ToList());\n            col.Sort();\n\
    \            row.Sort();\n            foreach (long c in col) {\n            \
    \    if (c == x) {\n                    result.Add(new Tuple<long, long>(row.Count,\
    \ col.Count));\n                }\n            }\n        }\n        return result;",
  "        List<Tuple<long, long>> res = new List<Tuple<long, long>>();\n        foreach\
    \ (var row in lst) {\n            foreach (var col in row.OrderByDescending(c\
    \ => c)) {\n                if (col == x) {\n                    res.Add(new Tuple<long,\
    \ long>(row.IndexOf(row), col.IndexOf(col)));\n                }\n           \
    \ }\n        }\n        return res.OrderBy(r => r.Item1).ThenByDescending(r =>\
    \ r.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ num in row) {\n                if (num == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(num), row.IndexOf(x)));\n                }\n \
    \           }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            long y = row.FindIndex(x\
    \ => x == x);\n            if (y != -1) {\n                result.Add(new Tuple<long,\
    \ long>(row.IndexOf(x), y));\n            }\n        }\n        return result.OrderBy(x\
    \ => x.Item1).ThenByDescending(x => x.Item2).ToList();", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (var row in\
    \ lst) {\n            foreach (var col in row.OrderByDescending(c => c)) {\n \
    \               if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(row), col.IndexOf(col)));\n                }\n           \
    \ }\n        }\n        return result.OrderBy(t => t.Item1).ThenByDescending(t\
    \ => t.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var item\
    \ in row) {\n                if (item == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(row), row.IndexOf(row)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> res = new List<Tuple<long,\
    \ long>>();\n        List<long> row = new List<long>();\n        List<long> col\
    \ = new List<long>();\n        foreach (List<long> row in lst) {\n           \
    \ row.Sort();\n            col.Sort();\n            if (row.Contains(x)) {\n \
    \               res.Add(new Tuple<long, long>(row.IndexOf(x), col.IndexOf(x)));\n\
    \            }\n        }\n        return res;", "        List<Tuple<long, long>>\
    \ result = new List<Tuple<long, long>>();\n        foreach (List<long> row in\
    \ lst) {\n            foreach (long col in row) {\n                if (col ==\
    \ x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(col),\
    \ row.LastIndexOf(col)));\n                }\n            }\n        }\n     \
    \   return result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();",
  "        var result = new List<Tuple<long, long>>();\n        var rows = lst.Select(x\
    \ => x.ToList()).ToList();\n        var sortedRows = rows.OrderBy(x => x.Count).ThenByDescending(x\
    \ => x.Count).ToList();\n        var sortedRowsCount = sortedRows.Count;\n   \
    \     var sortedRowsIndex = 0;\n        var sortedRowsCount = sortedRows.Count;\n\
    \        var sortedRowsIndex = 0;\n        foreach (var row in sortedRows) {\n\
    \            var rowCount = row.Count;\n            var rowIndex = 0;\n      \
    \      var rowCount = row.Count;\n            var rowIndex = 0;\n            while\
    \ (rowIndex < rowCount) {\n                if (row[rowIndex] == x) {\n       \
    \             result.Add(new Tuple<long, long>(sortedRowsIndex + 1, rowIndex +\
    \ 1));\n                    break;\n                }\n                rowIndex++;\n\
    \            }\n            sortedRowsIndex++;\n        }\n        return result;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   List<long> row = new List<long>();\n        List<long> col = new List<long>();\n\
    \        foreach (List<long> row in lst) {\n            row.Sort();\n        \
    \    foreach (long col in row) {\n                col.Reverse();\n           \
    \     col.Add(x);\n                col.Sort();\n                result.Add(new\
    \ Tuple<long, long>(row.Count, col.Count));\n            }\n        }\n      \
    \  return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ num in row) {\n                if (num == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(num), row.LastIndexOf(num)));\n              \
    \  }\n            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        if (lst.Count == 0) {\n            return result;\n     \
    \   }\n        long maxRow = lst[0].Count;\n        long maxCol = lst[0].Count;\n\
    \        foreach (List<long> row in lst) {\n            if (row.Count > maxRow)\
    \ {\n                maxRow = row.Count;\n            }\n            if (row.Count\
    \ > maxCol) {\n                maxCol = row.Count;\n            }\n        }\n\
    \        long row = 0;\n        long col = 0;\n        foreach (List<long> row\
    \ in lst) {\n            if (row == null) {\n                continue;\n     \
    \       }\n            long rowCount = row.Count;\n            long colCount =\
    \ row.Count;\n            while (row < rowCount && col < colCount) {\n       \
    \         if (row[row] == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row, col));\n                }\n                row++;\n             \
    \   col++;\n            }\n        }\n        List<Tuple<long, long>> sortedResult\
    \ = result.OrderByDescending(x => x.Item1).ThenByDescending(x => x.Item2).ToList();\n\
    \        return sortedResult;", "        List<Tuple<long, long>> res = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ num in row) {\n                if (num == x) {\n                    res.Add(new\
    \ Tuple<long, long>(row.IndexOf(num), row.IndexOf(num)));\n                }\n\
    \            }\n        }\n        return res.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        var row = new List<Tuple<long, long>>();\n\
    \        var rows = new List<List<long>>();\n        var rowIndex = 0;\n     \
    \   var columnIndex = 0;\n        foreach (var row in lst) {\n            rows.Add(row);\n\
    \            if (rowIndex == x) {\n                row.Sort();\n             \
    \   row.Reverse();\n                row.Sort();\n                row.Reverse();\n\
    \                row.Sort();\n                row.Reverse();\n               \
    \ row.Sort();\n                row.Reverse();\n                row.Sort();\n \
    \               row.Reverse();\n                row.Sort();\n                row.Reverse();\n\
    \                row.Sort();\n                row.Reverse();\n               \
    \ row.Sort();\n                row.Reverse();\n                row.Sort();\n \
    \               row.Reverse();\n                row.Sort();\n                row.Reverse();\n\
    \                row.Sort();\n                row.Reverse();\n               \
    \ row.Sort();\n                row.Reverse();\n                row.Sort();\n \
    \               row.Reverse();\n                row.Sort();\n                row.Reverse();\n\
    \                row.Sort();\n                row.Reverse();\n               \
    \ row.Sort();\n                row.Reverse();\n                row.Sort();\n \
    \               row.Reverse();\n                row.Sort();\n                row.Reverse();\n\
    \                row.Sort();\n                row.Reverse();\n               \
    \ row.Sort();\n                row.Reverse();\n                row.Sort();\n \
    \               row.Reverse();\n                row.Sort();\n                row.Reverse();\n\
    \                row.Sort();\n                row.Reverse();\n               \
    \ row.Sort();\n                row.Reverse();\n                row.Sort();\n \
    \               row.Reverse();\n                row.Sort();\n                row.Reverse();\n\
    \                row.Sort();\n                row.Reverse();\n               \
    \ row.Sort();\n                row.Reverse();\n                row.Sort();\n \
    \               row.Reverse();\n                row.Sort();\n                row.Reverse();\n\
    \                row.Sort();\n                row.Reverse();\n               \
    \ row.Sort();\n                row.Reverse();\n                row.Sort();\n \
    \               row.Reverse();\n                row.Sort();\n                row.Reverse();\n\
    \                row.Sort();\n                row.Reverse();\n               \
    \ row.Sort();\n                row.Reverse();\n                row.Sort();\n \
    \               row.Reverse();\n                row.Sort();\n                row.Reverse();\n\
    \                row.Sort();\n                row.Reverse();\n               \
    \ row.Sort();\n                row.Reverse();\n                row.Sort();\n \
    \               row.Reverse();\n                row.Sort();\n                row.Reverse();\n\
    \                row.Sort();\n                row.Reverse();\n               \
    \ row.Sort();\n                row.Reverse();\n                row.Sort();\n \
    \               row.Reverse();\n                row.Sort();\n                row.Reverse();\n\
    \                row.Sort", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        if (lst.Count == 0) {\n            return result;\n     \
    \   }\n        List<long> row = new List<long>();\n        List<long> col = new\
    \ List<long>();\n        long maxRow = 0;\n        long maxCol = 0;\n        foreach\
    \ (List<long> row in lst) {\n            row.Sort();\n            col.AddRange(row.Skip(1).Take(row.Count\
    \ - 1).ToList());\n            col.Sort();\n            long maxRow = row.Count\
    \ > maxRow ? row.Count : maxRow;\n            long maxCol = col.Count > maxCol\
    \ ? col.Count : maxCol;\n        }\n        long rowCount = maxRow;\n        long\
    \ colCount = maxCol;\n        long rowSum = 0;\n        long colSum = 0;\n   \
    \     long rowMax = 0;\n        long colMax = 0;\n        long rowMin = 0;\n \
    \       long colMin = 0;\n        long rowSum2 = 0;\n        long colSum2 = 0;\n\
    \        long rowMax2 = 0;\n        long colMax2 = 0;\n        long rowMin2 =\
    \ 0;\n        long colMin2 = 0;\n        long rowSum3 = 0;\n        long colSum3\
    \ = 0;\n        long rowMax3 = 0;\n        long colMax3 = 0;\n        long rowMin3\
    \ = 0;\n        long colMin3 = 0;\n        long rowSum4 = 0;\n        long colSum4\
    \ = 0;\n        long rowMax4 = 0;\n        long colMax4 = 0;\n        long rowMin4\
    \ = 0;\n        long colMin4 = 0;\n        long rowSum5 = 0;\n        long colSum5\
    \ = 0;\n        long rowMax5 = 0;\n        long colMax5 = 0;\n        long rowMin5\
    \ = 0;\n        long colMin5 = 0;\n        long rowSum6 = 0;\n        long colSum6\
    \ = 0;\n        long rowMax6 = 0;\n        long colMax6 = 0;\n        long rowMin6\
    \ = 0;\n        long colMin6 = 0;\n        long rowSum7 = 0;\n        long colSum7\
    \ = 0;\n        long rowMax7 = 0;\n        long colMax7 = 0;\n        long rowMin7\
    \ = 0;\n        long colMin7 = 0;\n        long rowSum8 = 0;\n        long colSum8\
    \ = 0;\n        long rowMax8 = 0;\n        long colMax8 = 0;\n        long rowMin8\
    \ = 0;\n        long colMin8 = 0;\n        long rowSum9 = 0;\n        long colSum9\
    \ = 0;\n        long rowMax9 = 0;\n        long colMax9 = 0;\n        long rowMin9\
    \ = 0;\n        long colMin9 = 0;\n        long rowSum10 = 0;\n        long colSum10",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (List<long> row in lst) {\n            foreach (long col in row) {\n\
    \                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(row), row.IndexOf(row)));\n                }\n           \
    \ }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            long rowSum\
    \ = 0;\n            foreach (long n in row) {\n                rowSum += n;\n\
    \            }\n            if (rowSum == x) {\n                result.Add(new\
    \ Tuple<long, long>(row.Count - 1, row.Count - 1));\n            }\n        }\n\
    \        return result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (List<long> row in lst) {\n            long rowSum = 0;\n        \
    \    foreach (long n in row) {\n                rowSum += n;\n            }\n\
    \            if (rowSum == x) {\n                result.Add(new Tuple<long, long>(row.Count\
    \ - 1, row.Count - 1));\n            }\n        }\n        return result.OrderBy(t\
    \ => t.Item1).ThenByDescending(t => t.Item2).ToList();", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (List<long>\
    \ row in lst) {\n            List<long> rowCopy = new List<long>(row);\n     \
    \       int rowLength = rowCopy.Count;\n            int colLength = row.Count;\n\
    \            int rowIndex = -1;\n            int colIndex = -1;\n            while\
    \ (rowIndex < rowLength - 1) {\n                rowIndex++;\n                colIndex\
    \ = 0;\n                while (colIndex < colLength - 1) {\n                 \
    \   colIndex++;\n                    if (rowCopy[rowIndex] == x && rowCopy[rowIndex\
    \ + 1] == rowCopy[rowIndex]) {\n                        result.Add(new Tuple<long,\
    \ long>(rowIndex, colIndex));\n                    }\n                }\n    \
    \        }\n        }\n        return result;", "        List<Tuple<long, long>>\
    \ result = new List<Tuple<long, long>>();\n        foreach (var row in lst) {\n\
    \            var rowTuple = new Tuple<long, long>(0, 0);\n            foreach\
    \ (var item in row) {\n                if (item == x) {\n                    rowTuple.Item1\
    \ = row.IndexOf(item);\n                    rowTuple.Item2 = row.LastIndexOf(item);\n\
    \                    break;\n                }\n            }\n            result.Add(rowTuple);\n\
    \        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x =>\
    \ x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ num in row) {\n                if (num == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(num), row.IndexOf(x)));\n                }\n \
    \           }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ num in row) {\n                if (num == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(num), row.IndexOf(x)));\n                }\n \
    \           }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<long> row = new List<long>();\n        List<long> col\
    \ = new List<long>();\n        foreach (List<long> row in lst) {\n           \
    \ row.Sort();\n            col.AddRange(row.Skip(1).Take(row.Count - 1));\n  \
    \          col.Sort();\n            long y = col.Last();\n            long xx\
    \ = x - y;\n            if (xx < 0) xx += row.Count;\n            long yy = y\
    \ + 1;\n            while (yy >= row.Count) yy -= row.Count;\n            result.Add(new\
    \ Tuple<long, long>(yy, xx));\n        }\n        result.Sort((x, y) => x.Item1.CompareTo(y.Item1));\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ n in row) {\n                if (n == x) {\n                    result.Add(new\
    \ Tuple<long, long>((long)row.IndexOf(row), row.IndexOf(row)));\n            \
    \    }\n            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var col\
    \ in row.OrderByDescending(y => y).TakeWhile(y => y != x)) {\n               \
    \ result.Add(new Tuple<long, long>(row.IndexOf(col), col.IndexOf(x)));\n     \
    \       }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ num in row) {\n                if (num == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(num), row.LastIndexOf(num)));\n              \
    \  }\n            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> res = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var item\
    \ in row) {\n                if (item == x) {\n                    res.Add(new\
    \ Tuple<long, long>(row.IndexOf(row), row.IndexOf(row)));\n                }\n\
    \            }\n        }\n        return res.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        if (lst.Count == 0) {\n            return result;\n     \
    \   }\n        List<long> row = new List<long>();\n        List<long> column =\
    \ new List<long>();\n        foreach (List<long> row in lst) {\n            row.Sort();\n\
    \            column.Sort();\n            long xx = row.FindIndex(v => v == x);\n\
    \            if (xx >= 0) {\n                result.Add(new Tuple<long, long>(xx,\
    \ column.FindIndex(v => v == x)));\n            }\n        }\n        return result;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (var row in lst) {\n            var found = false;\n            foreach\
    \ (var item in row) {\n                if (item == x) {\n                    found\
    \ = true;\n                    break;\n                }\n            }\n    \
    \        if (found) {\n                result.Add(new Tuple<long, long>(row.IndexOf(row),\
    \ row.IndexOf(row)));\n            }\n        }\n        return result.OrderBy(x\
    \ => x.Item1).ThenByDescending(x => x.Item2).ToList();", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (List<long>\
    \ row in lst) {\n            long y = GetColumn(row, x);\n            result.Add(new\
    \ Tuple<long, long>(row.IndexOf(x), y));\n        }\n        return result.OrderBy(x\
    \ => x.Item1).ThenByDescending(x => x.Item2).ToList();", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long n in row) {\n                if (n\
    \ == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(n),\
    \ row.IndexOf(x)));\n                }\n            }\n        }\n        return\
    \ result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();", "  \
    \      List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (var row in lst) {\n            foreach (var col in row.OrderByDescending(c\
    \ => c)) {\n                if (col == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(x), col.IndexOf(x)));\n                }\n   \
    \         }\n        }\n        return result;", "        List<Tuple<long, long>>\
    \ result = new List<Tuple<long, long>>();\n        foreach (List<long> row in\
    \ lst) {\n            List<Tuple<long, long>> rowResult = new List<Tuple<long,\
    \ long>>();\n            foreach (long col in row) {\n                if (col\
    \ == x) {\n                    rowResult.Add(new Tuple<long, long>(0, row.IndexOf(col)));\n\
    \                }\n            }\n            result.AddRange(rowResult);\n \
    \       }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();",
  "        var result = new List<Tuple<long, long>>();\n        foreach (var row in\
    \ lst) {\n            var tuple = new Tuple<long, long>(row.IndexOf(x), row.Last());\n\
    \            result.Add(tuple);\n        }\n        return result.OrderBy(t =>\
    \ t.Item1).ThenByDescending(t => t.Item2).ToList();", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long num in row) {\n                if (num\
    \ == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(num),\
    \ row.LastIndexOf(num)));\n                }\n            }\n        }\n     \
    \   return result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (List<long> row in lst) {\n            foreach (long num in row) {\n\
    \                if (num == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(num), row.IndexOf(x)));\n                }\n            }\n\
    \        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x =>\
    \ x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var col\
    \ in row.OrderByDescending(i => i)) {\n                if (col == x) {\n     \
    \               result.Add(new Tuple<long, long>(row.IndexOf(row), col.IndexOf(col)));\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        foreach\
    \ (List<long> row in lst) {\n            foreach (long n in row)\n           \
    \     if (n == x)\n                    result.Add(new Tuple<long, long>(row.IndexOf(row),\
    \ row.IndexOf(n)));\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(col), row.LastIndexOf(col)));\n              \
    \  }\n            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        var result = new List<Tuple<long, long>>();\n\
    \        foreach (var row in lst) {\n            var rowTuple = new Tuple<long,\
    \ long>(row.Count, row.Count);\n            foreach (var col in row.OrderByDescending(i\
    \ => i)) {\n                if (col == x) {\n                    rowTuple.Item1\
    \ = row.IndexOf(col);\n                    rowTuple.Item2 = col.Index;\n     \
    \               break;\n                }\n            }\n            result.Add(rowTuple);\n\
    \        }\n        return result.OrderBy(i => i.Item1).ThenByDescending(i =>\
    \ i.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var col\
    \ in row.OrderByDescending(c => c)) {\n                if (col == x) {\n     \
    \               result.Add(new Tuple<long, long>(row.IndexOf(x), col.IndexOf(x)));\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        foreach\
    \ (List<long> row in lst) {\n            foreach (long num in row) {\n       \
    \         if (num == x) {\n                    result.Add(new Tuple<long, long>((long)row.IndexOf(num),\
    \ (long)row.IndexOf(x)));\n                }\n            }\n        }\n     \
    \   return result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (List<long> row in lst) {\n            long y = row.FindIndex(i =>\
    \ i == x);\n            if (y >= 0) {\n                result.Add(new Tuple<long,\
    \ long>(row.IndexOf(x), y));\n            }\n        }\n        return result.OrderBy(i\
    \ => i.Item1).ThenByDescending(i => i.Item2).ToList();", "        var result =\
    \ new List<Tuple<long, long>>();\n        foreach (var row in lst) {\n       \
    \     var found = false;\n            foreach (var item in row) {\n          \
    \      if (item == x) {\n                    found = true;\n                 \
    \   break;\n                }\n            }\n            if (found) {\n     \
    \           result.Add(new Tuple<long, long>(row.IndexOf(x), row.Last()));\n \
    \           }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n\
    \        List<Tuple<long, long>> column = new List<Tuple<long, long>>();\n   \
    \     foreach (List<long> row in lst) {\n            foreach (long col in row)\
    \ {\n                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(row), col.IndexOf(col)));\n                }\n           \
    \ }\n        }\n        foreach (List<long> row in lst) {\n            foreach\
    \ (long col in row) {\n                if (col != x) {\n                    column.Add(new\
    \ Tuple<long, long>(row.IndexOf(row), col.IndexOf(col)));\n                }\n\
    \            }\n        }\n        foreach (Tuple<long, long> col in column) {\n\
    \            row.Insert(col.Item1, new Tuple<long, long>(col.Item2, row.IndexOf(row)));\n\
    \        }\n        foreach (Tuple<long, long> col in row) {\n            column.Insert(col.Item1,\
    \ new Tuple<long, long>(col.Item2, column.IndexOf(col)));\n        }\n       \
    \ foreach (Tuple<long, long> col in column) {\n            row.Insert(col.Item1,\
    \ new Tuple<long, long>(col.Item2, row.IndexOf(row)));\n        }\n        foreach\
    \ (Tuple<long, long> col in row) {\n            column.Insert(col.Item1, new Tuple<long,\
    \ long>(col.Item2, column.IndexOf(col)));\n        }\n        foreach (Tuple<long,\
    \ long> col in column) {\n            row.Insert(col.Item1, new Tuple<long, long>(col.Item2,\
    \ row.IndexOf(row)));\n        }\n        foreach (Tuple<long, long> col in row)\
    \ {\n            column.Insert(col.Item1, new Tuple<long, long>(col.Item2, column.IndexOf(col)));\n\
    \        }\n        foreach (Tuple<long, long> col in column) {\n            row.Insert(col.Item1,\
    \ new Tuple<long, long>(col.Item2, row.IndexOf(row)));\n        }\n        foreach\
    \ (Tuple<long, long> col in row) {\n            column.Insert(col.Item1, new Tuple<long,\
    \ long>(col.Item2, column.IndexOf(col)));\n        }\n        foreach (Tuple<long,\
    \ long> col in column) {\n            row.Insert(col.Item1, new Tuple<long, long>(col.Item2,\
    \ row.IndexOf(row)));\n        }\n        foreach (Tuple<long, long> col in row)\
    \ {\n            column.Insert(col.Item1, new Tuple<long, long>(col.Item2, column.IndexOf(col)));\n\
    \        }\n        foreach (Tuple<long, long> col in column) {\n            row.Insert(col.Item",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (List<long> row in lst) {\n            foreach (long num in row) {\n\
    \                if (num == x) {\n                    result.Add(new Tuple<long,\
    \ long>((long)row.IndexOf(num), row.IndexOf(x)));\n                }\n       \
    \     }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ n in row) {\n                if (n == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(n), row.IndexOf(x)));\n                }\n   \
    \         }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            var tuple = new Tuple<long,\
    \ long>(row.IndexOf(x), row.Last());\n            result.Add(tuple);\n       \
    \ }\n        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ num in row) {\n                if (num == x) {\n                    result.Add(new\
    \ Tuple<long, long>((long)row.IndexOf(num), row.IndexOf(x)));\n              \
    \  }\n            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();"]
stop_tokens:
- "\n    }\n"
