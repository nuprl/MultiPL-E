language: cs
name: HumanEval_3_below_zero
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.Sum();\n        return balance < 0;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e79a48045efd4babbd2721b4a34df55d>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    if (operations.Count == 0) return true;\n        var balance = operations.First();\n\
    \        foreach (var operation in operations.Skip(1))\n        {\n          \
    \  if (balance < 0)\n            {\n                return true;\n           \
    \ }\n            balance = balance - operation;\n        }\n        return false;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <41e54d88f2034e5ba2f31962a706ccdc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <41e54d88f2034e5ba2f31962a706ccdc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.Sum();\n        return balance < 0;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e79a48045efd4babbd2721b4a34df55d>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.Sum();\n        return balance < 0;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e79a48045efd4babbd2721b4a34df55d>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.Sum();\n        return balance < 0;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e79a48045efd4babbd2721b4a34df55d>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\n\
    \        {\n            if (balance < 0)\n            {\n                return\
    \ true;\n            }\n            balance = balance - operation;\n        }\n\
    \        return false;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805820
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\
    \ {\n            if (balance < 0)\n                return true;\n            balance\
    \ = balance - operation;\n        }\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <38b1ededb44b4e3f8187e834c46b4135>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <38b1ededb44b4e3f8187e834c46b4135>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <38b1ededb44b4e3f8187e834c46b4135>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <38b1ededb44b4e3f8187e834c46b4135>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (long operation in operations.Skip(1))\n\
    \        {\n            if (operation < 0)\n            {\n                return\
    \ false;\n            }\n            balance -= operation;\n            if (balance\
    \ < 0)\n            {\n                return true;\n            }\n        }\n\
    \        return false;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <5b304e660f434d20a9b0eb4554944daf>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5b304e660f434d20a9b0eb4554944daf>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <5b304e660f434d20a9b0eb4554944daf>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5b304e660f434d20a9b0eb4554944daf>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805820
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = 0;\n        foreach (var operation in operations) {\n    \
    \        if (operation == -2)\n                balance -= 1;\n            else\
    \ if (operation == 2)\n                balance += 1;\n            else\n     \
    \           balance += operation;\n            if (balance < 0)\n            \
    \    return true;\n        }\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==\
    \ (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e7b005c2cc0b49bfa67d24349216eea1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e7b005c2cc0b49bfa67d24349216eea1>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\n\
    \        {\n            if (balance < 0)\n            {\n                return\
    \ true;\n            }\n            balance = balance - operation;\n        }\n\
    \        return false;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805820
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = 0;\n        foreach (var operation in operations) {\n    \
    \        if (operation == 1) {\n                balance += operation;\n      \
    \      }\n            else if (operation == -1) {\n                balance -=\
    \ operation;\n            }\n            else {\n                throw new ArgumentException(\"\
    Invalid operation\");\n            }\n            if (balance < 0) {\n       \
    \         return true;\n            }\n        }\n        return false;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Invalid operation\n \
    \ at Problem.BelowZero (System.Collections.Generic.List`1[T] operations) [0x0003c]\
    \ in <4ff64d3eea9140c69730d82cc7d31414>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x0002a] in <4ff64d3eea9140c69730d82cc7d31414>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.ArgumentException: Invalid operation\n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x0003c] in <4ff64d3eea9140c69730d82cc7d31414>:0\
    \ \n  at Problem.Main (System.String[] args) [0x0002a] in <4ff64d3eea9140c69730d82cc7d31414>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805820
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\
    \ {\n            if (balance < 0)\n                return true;\n            balance\
    \ += operation;\n        }\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,\
    \ (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805820
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.Sum();\n        if (balance < 0)\n            return\
    \ true;\n        return false;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e2ff64624df841ec9bcbfec6a6879f7c>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = 0;\n        foreach (var operation in operations) {\n    \
    \        balance = balance + operation;\n            if (balance < 0) {\n    \
    \            return true;\n            }\n        }\n        return false;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805820
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\
    \ {\n            if (balance < 0)\n                return true;\n            balance\
    \ = balance - operation;\n        }\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <38b1ededb44b4e3f8187e834c46b4135>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <38b1ededb44b4e3f8187e834c46b4135>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <38b1ededb44b4e3f8187e834c46b4135>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <38b1ededb44b4e3f8187e834c46b4135>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (long op in operations.Skip(1))\
    \ {\n            if (op < 0)\n                return false;\n            balance\
    \ -= op;\n            if (balance < 0)\n                return true;\n       \
    \ }\n        return false;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <933be7a196c042efb013baa003518dc7>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <933be7a196c042efb013baa003518dc7>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <933be7a196c042efb013baa003518dc7>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <933be7a196c042efb013baa003518dc7>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (long operation in operations.Skip(1))\n\
    \        {\n            if (balance < 0)\n            {\n                return\
    \ true;\n            }\n            balance += operation;\n        }\n       \
    \ return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <ec5dae1d1e394e9eb3ec434ea8e1c7ef>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <ec5dae1d1e394e9eb3ec434ea8e1c7ef>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <ec5dae1d1e394e9eb3ec434ea8e1c7ef>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <ec5dae1d1e394e9eb3ec434ea8e1c7ef>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = 0;\n        foreach (var op in operations) {\n           \
    \ balance = balance + op;\n            if (balance < 0) {\n                return\
    \ true;\n            }\n        }\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==\
    \ (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805820
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\n\
    \        {\n            if (balance < 0)\n            {\n                return\
    \ true;\n            }\n            balance = balance - operation;\n        }\n\
    \        return false;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805820
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    // Your code here\n        long sum = 0;\n        foreach (var item in operations)\
    \ {\n            sum += item;\n        }\n        if (sum < 0)\n            return\
    \ true;\n        return false;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ebc6b2ee5a1411ca841e3d40c20945a>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.Sum();\n        if (balance < 0)\n            return\
    \ true;\n        return false;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e2ff64624df841ec9bcbfec6a6879f7c>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (long operation in operations.Skip(1))\n\
    \        {\n            if (operation < 0)\n            {\n                return\
    \ false;\n            }\n            balance += operation;\n            if (balance\
    \ < 0)\n            {\n                return true;\n            }\n        }\n\
    \        return false;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <24148e3240fa414aa76cdc3bf52c0e69>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <24148e3240fa414aa76cdc3bf52c0e69>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <24148e3240fa414aa76cdc3bf52c0e69>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <24148e3240fa414aa76cdc3bf52c0e69>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    // Your code here\n        var sum = 0;\n        foreach (var item in operations)\
    \ {\n            sum += item;\n        }\n        if (sum < 0) {\n           \
    \ return true;\n        }\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,\
    \ (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbp4m03tt.cs(20,13): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659805820
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = 0;\n        foreach (var operation in operations) {\n    \
    \        if (operation == 0) continue;\n            balance = balance + operation;\n\
    \            if (balance < 0) {\n                return true;\n            }\n\
    \        }\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = 0;\n        foreach (var operation in operations) {\n    \
    \        balance = balance + operation;\n            if (balance < 0) {\n    \
    \            return true;\n            }\n        }\n        return false;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805820
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    // Your code here\n        long balance = operations.Sum();\n        if (balance\
    \ < 0)\n            return true;\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==\
    \ (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <441bfcea3a564b8c93ce7586f76c5ad6>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    // Your code here\n        long balance = operations.First();\n        foreach\
    \ (var operation in operations.Skip(1))\n        {\n            if (balance <\
    \ 0)\n            {\n                return true;\n            }\n           \
    \ balance = balance - operation;\n        }\n        return false;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <8987876d8af3415d88e406512ae8cf9d>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <8987876d8af3415d88e406512ae8cf9d>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <8987876d8af3415d88e406512ae8cf9d>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <8987876d8af3415d88e406512ae8cf9d>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (var op in operations.Skip(1))\
    \ {\n            if (op < 0)\n                return false;\n            balance\
    \ += op;\n        }\n        return balance < 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,\
    \ (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <8e6561de4d7e4d589ea20bdf1688a477>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <8e6561de4d7e4d589ea20bdf1688a477>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <8e6561de4d7e4d589ea20bdf1688a477>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <8e6561de4d7e4d589ea20bdf1688a477>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805820
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (long operation in operations.Skip(1))\
    \ {\n            if (operation < 0) {\n                balance -= operation;\n\
    \            } else {\n                balance += operation;\n            }\n\
    \            if (balance < 0) {\n                return true;\n            }\n\
    \        }\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <2a3a8b4024c346109159083ea5e5f890>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <2a3a8b4024c346109159083ea5e5f890>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <2a3a8b4024c346109159083ea5e5f890>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <2a3a8b4024c346109159083ea5e5f890>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805820
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = 0;\n        foreach (var operation in operations) {\n    \
    \        if (operation == -2)\n                balance -= 1;\n            else\
    \ if (operation == 2)\n                balance += 1;\n            else\n     \
    \           balance += operation;\n            if (balance < 0)\n            \
    \    return true;\n        }\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==\
    \ (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e7b005c2cc0b49bfa67d24349216eea1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e7b005c2cc0b49bfa67d24349216eea1>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = 0;\n        foreach (var operation in operations) {\n    \
    \        balance = balance + operation;\n            if (balance < 0) {\n    \
    \            return true;\n            }\n        }\n        return false;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805820
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    // Your code here\n        long balance = operations.Sum();\n        return\
    \ balance < 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b7638f472c114d81aca86197e4b40bf5>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\n\
    \        {\n            if (balance < 0)\n            {\n                return\
    \ true;\n            }\n            balance = balance - operation;\n        }\n\
    \        return false;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805820
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = 0;\n        foreach (var operation in operations) {\n    \
    \        if (operation == 1) {\n                balance += operation;\n      \
    \      }\n            else if (operation == -1) {\n                balance -=\
    \ operation;\n            }\n            else {\n                throw new ArgumentException(\"\
    Invalid operation\");\n            }\n        }\n        return balance < 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Invalid operation\n \
    \ at Problem.BelowZero (System.Collections.Generic.List`1[T] operations) [0x0003c]\
    \ in <487763e7012e4ef6bd56a2fb96f7d102>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x0002a] in <487763e7012e4ef6bd56a2fb96f7d102>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.ArgumentException: Invalid operation\n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x0003c] in <487763e7012e4ef6bd56a2fb96f7d102>:0\
    \ \n  at Problem.Main (System.String[] args) [0x0002a] in <487763e7012e4ef6bd56a2fb96f7d102>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805820
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = 0;\n        foreach (var operation in operations) {\n    \
    \        if (operation == -2)\n                balance -= 1;\n            else\
    \ if (operation == 2)\n                balance += 1;\n            else\n     \
    \           balance += operation;\n            if (balance < 0)\n            \
    \    return true;\n        }\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==\
    \ (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e7b005c2cc0b49bfa67d24349216eea1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e7b005c2cc0b49bfa67d24349216eea1>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\
    \ {\n            if (balance < 0)\n                return true;\n            balance\
    \ += operation;\n        }\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,\
    \ (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805820
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.Sum();\n        return balance < 0;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e79a48045efd4babbd2721b4a34df55d>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\
    \ {\n            if (balance < 0)\n                return true;\n            balance\
    \ += operation;\n        }\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,\
    \ (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805820
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (var op in operations.Skip(1))\
    \ {\n            if (op < 0)\n                return false;\n            balance\
    \ -= op;\n            if (balance < 0)\n                return true;\n       \
    \ }\n        return false;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <d4caa189eb5141e094e3886ab3c6fa40>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <d4caa189eb5141e094e3886ab3c6fa40>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <d4caa189eb5141e094e3886ab3c6fa40>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <d4caa189eb5141e094e3886ab3c6fa40>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\
    \ {\n            if (balance < 0)\n                return true;\n            balance\
    \ += operation;\n        }\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,\
    \ (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805820
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\
    \ {\n            if (balance < 0)\n                return true;\n            balance\
    \ += operation;\n        }\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,\
    \ (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805820
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\
    \ {\n            if (balance < 0)\n                return true;\n            balance\
    \ += operation;\n        }\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,\
    \ (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805820
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.Sum();\n        if (balance < 0)\n            return\
    \ true;\n        return false;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e2ff64624df841ec9bcbfec6a6879f7c>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (long operation in operations.Skip(1))\
    \ {\n            if (operation < 0)\n                return false;\n         \
    \   balance -= operation;\n            if (balance < 0)\n                return\
    \ true;\n        }\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <c336cc6a18f14fb593c29420055964ca>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <c336cc6a18f14fb593c29420055964ca>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <c336cc6a18f14fb593c29420055964ca>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <c336cc6a18f14fb593c29420055964ca>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\
    \ {\n            if (balance < 0)\n                return true;\n            balance\
    \ += operation;\n        }\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,\
    \ (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805820
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\n\
    \        {\n            if (balance < 0)\n            {\n                return\
    \ true;\n            }\n            balance = balance - operation;\n        }\n\
    \        return false;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805820
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (long op in operations.Skip(1))\
    \ {\n            if (op < 0)\n                return false;\n            balance\
    \ += op;\n        }\n        return balance < 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,\
    \ (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <eabe413216a44431a878471b7d71f441>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <eabe413216a44431a878471b7d71f441>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <eabe413216a44431a878471b7d71f441>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <eabe413216a44431a878471b7d71f441>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\n\
    \        {\n            if (balance < 0)\n            {\n                return\
    \ true;\n            }\n            else\n            {\n                balance\
    \ -= operation;\n            }\n        }\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <0bda9453f66c47d8a7c3bf86450ecd65>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0bda9453f66c47d8a7c3bf86450ecd65>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <0bda9453f66c47d8a7c3bf86450ecd65>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0bda9453f66c47d8a7c3bf86450ecd65>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.Sum();\n        return balance < 0;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e79a48045efd4babbd2721b4a34df55d>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = 0;\n        foreach (var operation in operations) {\n    \
    \        if (operation == -2)\n                balance -= 1;\n            else\
    \ if (operation == 2)\n                balance += 1;\n            else\n     \
    \           balance += operation;\n            if (balance < 0)\n            \
    \    return true;\n        }\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==\
    \ (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e7b005c2cc0b49bfa67d24349216eea1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e7b005c2cc0b49bfa67d24349216eea1>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = 0;\n        foreach (var operation in operations) {\n    \
    \        if (operation == -2)\n                balance -= 1;\n            else\
    \ if (operation == 2)\n                balance += 1;\n            else\n     \
    \           balance += operation;\n            if (balance < 0)\n            \
    \    return true;\n        }\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==\
    \ (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e7b005c2cc0b49bfa67d24349216eea1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e7b005c2cc0b49bfa67d24349216eea1>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.Sum();\n        return balance < 0;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e79a48045efd4babbd2721b4a34df55d>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    if (operations.Count < 1)\n            return false;\n        var balance\
    \ = operations.First();\n        for (int i = 1; i < operations.Count; i++) {\n\
    \            if (balance < 0)\n                return true;\n            balance\
    \ = operations[i];\n        }\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==\
    \ (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <797adffe182f4f75a20495e1bb11018c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <797adffe182f4f75a20495e1bb11018c>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\
    \ {\n            if (balance < 0)\n                return true;\n            balance\
    \ += operation;\n        }\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,\
    \ (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805820
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.Sum();\n        if (balance < 0)\n            return\
    \ true;\n        else\n            return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,\
    \ (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <12c756bb21024bc5b64d9cc400364f82>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\
    \ {\n            if (balance < 0)\n                return true;\n            balance\
    \ = balance - operation;\n        }\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <38b1ededb44b4e3f8187e834c46b4135>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <38b1ededb44b4e3f8187e834c46b4135>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <38b1ededb44b4e3f8187e834c46b4135>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <38b1ededb44b4e3f8187e834c46b4135>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\
    \ {\n            if (balance < 0)\n                return true;\n            balance\
    \ += operation;\n        }\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,\
    \ (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805820
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\n\
    \        {\n            if (balance < 0)\n            {\n                return\
    \ true;\n            }\n            else\n            {\n                balance\
    \ -= operation;\n            }\n        }\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <0bda9453f66c47d8a7c3bf86450ecd65>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0bda9453f66c47d8a7c3bf86450ecd65>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <0bda9453f66c47d8a7c3bf86450ecd65>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0bda9453f66c47d8a7c3bf86450ecd65>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.Sum();\n        return balance < 0;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e79a48045efd4babbd2721b4a34df55d>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.Sum();\n        return balance < 0;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e79a48045efd4babbd2721b4a34df55d>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (long op in operations.Skip(1))\n\
    \        {\n            if (op < 0)\n            {\n                return false;\n\
    \            }\n            balance += op;\n            if (balance < 0)\n   \
    \         {\n                return true;\n            }\n        }\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <11c4c9b6a2a842baabf10a2781754777>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <11c4c9b6a2a842baabf10a2781754777>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <11c4c9b6a2a842baabf10a2781754777>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <11c4c9b6a2a842baabf10a2781754777>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (long op in operations.Skip(1))\n\
    \        {\n            if (op < 0)\n            {\n                balance =\
    \ balance - op;\n            }\n            else\n            {\n            \
    \    balance = balance + op;\n            }\n            if (balance < 0)\n  \
    \          {\n                return true;\n            }\n        }\n       \
    \ return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <c20f1b2e951b4db8a4cc1391a1c821e8>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <c20f1b2e951b4db8a4cc1391a1c821e8>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <c20f1b2e951b4db8a4cc1391a1c821e8>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <c20f1b2e951b4db8a4cc1391a1c821e8>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\n\
    \        {\n            if (balance < 0)\n            {\n                return\
    \ true;\n            }\n            balance = balance - operation;\n        }\n\
    \        return false;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805820
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = 0;\n        foreach (var operation in operations) {\n    \
    \        balance = balance + operation;\n            if (balance < 0) {\n    \
    \            return true;\n            }\n        }\n        return false;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805820
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.Sum();\n        return balance < 0;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e79a48045efd4babbd2721b4a34df55d>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\
    \ {\n            if (balance < 0)\n                return true;\n            balance\
    \ = balance - operation;\n        }\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <38b1ededb44b4e3f8187e834c46b4135>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <38b1ededb44b4e3f8187e834c46b4135>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <38b1ededb44b4e3f8187e834c46b4135>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <38b1ededb44b4e3f8187e834c46b4135>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = 0;\n        foreach (var operation in operations) {\n    \
    \        balance = balance + operation;\n            if (balance < 0) {\n    \
    \            return true;\n            }\n        }\n        return false;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805820
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\n\
    \        {\n            if (balance < 0)\n            {\n                return\
    \ true;\n            }\n            balance = balance - operation;\n        }\n\
    \        return false;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805820
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\
    \ {\n            if (balance < 0)\n                return true;\n            balance\
    \ += operation;\n        }\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,\
    \ (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805820
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.Sum();\n        if (balance < 0) {\n          \
    \  return true;\n        }\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,\
    \ (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5621fdefecf44461bf9f17d70dc69313>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\
    \ {\n            if (balance < 0)\n                return true;\n            balance\
    \ += operation;\n        }\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,\
    \ (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805820
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.Sum();\n        return balance < 0;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e79a48045efd4babbd2721b4a34df55d>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = 0;\n        foreach (var operation in operations) {\n    \
    \        if (operation == -2)\n                balance = balance - operation;\n\
    \            else if (operation == 2)\n                balance = balance + operation;\n\
    \            else\n                balance = balance + operation;\n          \
    \  if (balance < 0)\n                return true;\n        }\n        return false;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9b5c29572d054f3282acdc27fb41d9de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9b5c29572d054f3282acdc27fb41d9de>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = 0;\n        foreach (var operation in operations) {\n    \
    \        balance = balance + operation;\n            if (balance < 0) {\n    \
    \            return true;\n            }\n        }\n        return false;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805820
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\
    \ {\n            if (balance < 0)\n                return true;\n            balance\
    \ += operation;\n        }\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,\
    \ (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805820
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\n\
    \        {\n            if (balance < 0)\n            {\n                return\
    \ true;\n            }\n            balance = balance - operation;\n        }\n\
    \        return false;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805820
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    if (operations.Count < 1) {\n            return false;\n        }\n     \
    \   long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\
    \ {\n            if (operation == -operation) {\n                return false;\n\
    \            }\n            if (balance < operation) {\n                return\
    \ true;\n            }\n            balance -= operation;\n        }\n       \
    \ return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d5d6289aa63a4bd5a4961e4e801282d9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d5d6289aa63a4bd5a4961e4e801282d9>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.Sum();\n        return balance < 0;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e79a48045efd4babbd2721b4a34df55d>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\n\
    \        {\n            if (balance < 0)\n            {\n                return\
    \ true;\n            }\n            else\n            {\n                balance\
    \ -= operation;\n            }\n        }\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <0bda9453f66c47d8a7c3bf86450ecd65>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0bda9453f66c47d8a7c3bf86450ecd65>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <0bda9453f66c47d8a7c3bf86450ecd65>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0bda9453f66c47d8a7c3bf86450ecd65>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (long op in operations.Skip(1))\n\
    \        {\n            if (op < 0)\n            {\n                return false;\n\
    \            }\n            balance -= op;\n            if (balance < 0)\n   \
    \         {\n                return true;\n            }\n        }\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <aff862cacc4142e78b0e68bea528520a>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <aff862cacc4142e78b0e68bea528520a>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <aff862cacc4142e78b0e68bea528520a>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <aff862cacc4142e78b0e68bea528520a>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.Sum();\n        if (balance < 0) {\n          \
    \  return true;\n        }\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,\
    \ (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5621fdefecf44461bf9f17d70dc69313>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    if (operations.Count < 1) {\n            return false;\n        }\n     \
    \   long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\
    \ {\n            if (balance < 0)\n                return true;\n            balance\
    \ += operation;\n        }\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,\
    \ (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <27eca796c5444717a8c3d9a37ea24a0b>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.Sum();\n        if (balance < 0)\n            return\
    \ true;\n        else\n            return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,\
    \ (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <12c756bb21024bc5b64d9cc400364f82>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.Sum();\n        return balance < 0;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e79a48045efd4babbd2721b4a34df55d>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    if (operations.Count < 1)\n            return false;\n        long balance\
    \ = operations[0];\n        for (int i = 1; i < operations.Count; i++) {\n   \
    \         long operation = operations[i];\n            if (operation < 0) {\n\
    \                balance -= operation;\n            } else {\n               \
    \ balance += operation;\n            }\n            if (balance < 0) {\n     \
    \           return true;\n            }\n        }\n        return false;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b9cc02d6ebaf4c1392e6dff4def9899a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b9cc02d6ebaf4c1392e6dff4def9899a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = 0;\n        foreach (var operation in operations) {\n    \
    \        if (operation == -2)\n                balance -= 1;\n            else\
    \ if (operation == 2)\n                balance += 1;\n            else\n     \
    \           balance += operation;\n            if (balance < 0)\n            \
    \    return true;\n        }\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==\
    \ (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e7b005c2cc0b49bfa67d24349216eea1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e7b005c2cc0b49bfa67d24349216eea1>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = 0;\n        foreach (var operation in operations) {\n    \
    \        balance = balance + operation;\n            if (balance < 0) {\n    \
    \            return true;\n            }\n        }\n        return false;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805820
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\n\
    \        {\n            if (balance < 0)\n            {\n                return\
    \ true;\n            }\n            balance = balance - operation;\n        }\n\
    \        return false;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805820
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = 0;\n        foreach (var operation in operations) {\n    \
    \        balance = balance + operation;\n            if (balance < 0) {\n    \
    \            return true;\n            }\n        }\n        return false;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805820
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = 0;\n        foreach (var operation in operations) {\n    \
    \        if (operation == -2)\n                balance -= 1;\n            else\
    \ if (operation == 2)\n                balance += 1;\n            else\n     \
    \           throw new ArgumentException(\"Invalid operation\");\n            if\
    \ (balance < 0)\n                return true;\n        }\n        return false;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Invalid operation\n \
    \ at Problem.BelowZero (System.Collections.Generic.List`1[T] operations) [0x0003a]\
    \ in <12eb0b96f296431eb48243f749668c17>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x0002a] in <12eb0b96f296431eb48243f749668c17>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.ArgumentException: Invalid operation\n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x0003a] in <12eb0b96f296431eb48243f749668c17>:0\
    \ \n  at Problem.Main (System.String[] args) [0x0002a] in <12eb0b96f296431eb48243f749668c17>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\n\
    \        {\n            if (balance < 0)\n            {\n                return\
    \ true;\n            }\n            balance = balance - operation;\n        }\n\
    \        return false;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805820
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\n\
    \        {\n            if (balance < 0)\n            {\n                return\
    \ true;\n            }\n            balance = balance - operation;\n        }\n\
    \        return false;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805820
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    // Your code here\n        long balance = operations.Sum();\n        if (balance\
    \ < 0) {\n            return true;\n        }\n        return false;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <acc5dcb81852425393cb679424ff42c3>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = 0;\n        foreach (var operation in operations) {\n    \
    \        balance = balance + operation;\n            if (balance < 0) {\n    \
    \            return true;\n            }\n        }\n        return false;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805820
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (long operation in operations.Skip(1))\n\
    \        {\n            if (operation < 0)\n            {\n                return\
    \ false;\n            }\n            balance += operation;\n            if (balance\
    \ < 0)\n            {\n                return true;\n            }\n        }\n\
    \        return false;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <24148e3240fa414aa76cdc3bf52c0e69>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <24148e3240fa414aa76cdc3bf52c0e69>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <24148e3240fa414aa76cdc3bf52c0e69>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <24148e3240fa414aa76cdc3bf52c0e69>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\n\
    \        {\n            if (balance < 0)\n            {\n                return\
    \ true;\n            }\n            balance = balance - operation;\n        }\n\
    \        return false;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805820
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = 0;\n        foreach (var op in operations) {\n           \
    \ if (op > 0) {\n                balance += op;\n            }\n            else\
    \ if (op < 0) {\n                balance -= op;\n            }\n            else\
    \ {\n                return true;\n            }\n        }\n        return balance\
    \ < 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5d8dd1301b0e4b2eab990291e8186fb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5d8dd1301b0e4b2eab990291e8186fb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.Sum();\n        return balance < 0;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e79a48045efd4babbd2721b4a34df55d>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\n\
    \        {\n            if (balance < 0)\n            {\n                return\
    \ true;\n            }\n            balance = balance - operation;\n        }\n\
    \        return false;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805820
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.Sum();\n        if (balance < 0)\n            return\
    \ true;\n        else\n            return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,\
    \ (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <12c756bb21024bc5b64d9cc400364f82>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\
    \ {\n            if (balance < 0)\n                return true;\n            balance\
    \ = balance - operation;\n        }\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <38b1ededb44b4e3f8187e834c46b4135>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <38b1ededb44b4e3f8187e834c46b4135>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <38b1ededb44b4e3f8187e834c46b4135>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <38b1ededb44b4e3f8187e834c46b4135>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    if (operations.Count < 2) return false;\n        long balance = operations[0];\n\
    \        long withdraw = operations[1];\n        long deposit = operations[2];\n\
    \        if (withdraw < 0 || deposit < 0) return false;\n        if (withdraw\
    \ > deposit) return false;\n        if (withdraw == deposit) return true;\n  \
    \      if (balance < 0 && withdraw > 0) return true;\n        if (balance > 0\
    \ && withdraw < 0) return true;\n        if (balance < 0 && withdraw < 0) return\
    \ true;\n        if (balance > 0 && withdraw > 0) return true;\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <839a20b303e94b719cbf119686af2f3d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <839a20b303e94b719cbf119686af2f3d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.Sum();\n        return balance < 0;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e79a48045efd4babbd2721b4a34df55d>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.Sum();\n        if (balance < 0)\n            return\
    \ true;\n        return false;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e2ff64624df841ec9bcbfec6a6879f7c>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (var op in operations.Skip(1))\n\
    \        {\n            if (op < 0)\n            {\n                return false;\n\
    \            }\n            balance = balance - op;\n            if (balance <\
    \ 0)\n            {\n                return true;\n            }\n        }\n\
    \        return false;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <59d61ab2806d48e0a12142162233533c>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <59d61ab2806d48e0a12142162233533c>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <59d61ab2806d48e0a12142162233533c>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <59d61ab2806d48e0a12142162233533c>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.Sum();\n        return balance < 0;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e79a48045efd4babbd2721b4a34df55d>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\
    \ {\n            if (balance < 0)\n                return true;\n            balance\
    \ = balance - operation;\n        }\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <38b1ededb44b4e3f8187e834c46b4135>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <38b1ededb44b4e3f8187e834c46b4135>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <38b1ededb44b4e3f8187e834c46b4135>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <38b1ededb44b4e3f8187e834c46b4135>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = 0;\n        foreach (var operation in operations) {\n    \
    \        balance = balance + operation;\n            if (balance < 0) {\n    \
    \            return true;\n            }\n        }\n        return false;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805820
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\n\
    \        {\n            if (balance < 0)\n            {\n                return\
    \ true;\n            }\n            else\n            {\n                balance\
    \ -= operation;\n            }\n        }\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <0bda9453f66c47d8a7c3bf86450ecd65>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0bda9453f66c47d8a7c3bf86450ecd65>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <0bda9453f66c47d8a7c3bf86450ecd65>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0bda9453f66c47d8a7c3bf86450ecd65>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = 0;\n        foreach (var operation in operations) {\n    \
    \        if (operation == 1) {\n                balance += 1;\n            } else\
    \ if (operation == -1) {\n                balance -= 1;\n            }\n     \
    \   }\n        return balance < 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cc0da7a813664bb5a1db30ab316461b9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cc0da7a813664bb5a1db30ab316461b9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805821
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\n\
    \        {\n            if (balance < 0)\n            {\n                return\
    \ true;\n            }\n            balance = balance - operation;\n        }\n\
    \        return false;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805820
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.Sum();\n        return balance < 0;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e79a48045efd4babbd2721b4a34df55d>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.Sum();\n        return balance < 0;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e79a48045efd4babbd2721b4a34df55d>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.Sum();\n        return balance < 0;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e79a48045efd4babbd2721b4a34df55d>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (long operation in operations.Skip(1))\n\
    \        {\n            if (operation < 0)\n            {\n                balance\
    \ -= operation;\n            }\n            else\n            {\n            \
    \    balance += operation;\n            }\n            if (balance < 0)\n    \
    \        {\n                return true;\n            }\n        }\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <e4d65dc8517346b188b24479afce9a8d>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <e4d65dc8517346b188b24479afce9a8d>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <e4d65dc8517346b188b24479afce9a8d>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <e4d65dc8517346b188b24479afce9a8d>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (long operation in operations.Skip(1))\n\
    \        {\n            if (operation < 0)\n            {\n                return\
    \ false;\n            }\n            balance = balance - operation;\n        \
    \    if (balance < 0)\n            {\n                return true;\n         \
    \   }\n        }\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <b9fb860772c94d2da274f83dd354cc15>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <b9fb860772c94d2da274f83dd354cc15>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <b9fb860772c94d2da274f83dd354cc15>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <b9fb860772c94d2da274f83dd354cc15>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.Sum();\n        if (balance < 0)\n            return\
    \ true;\n        return false;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e2ff64624df841ec9bcbfec6a6879f7c>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = 0;\n        foreach (var operation in operations) {\n    \
    \        balance = balance + operation;\n            if (balance < 0) {\n    \
    \            return true;\n            }\n        }\n        return false;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805820
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\n\
    \        {\n            if (balance < 0)\n            {\n                return\
    \ true;\n            }\n            balance = balance - operation;\n        }\n\
    \        return false;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805820
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (long operation in operations.Skip(1))\
    \ {\n            if (operation < 0) {\n                balance -= operation;\n\
    \            } else {\n                balance += operation;\n            }\n\
    \            if (balance < 0) {\n                return true;\n            }\n\
    \        }\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <2a3a8b4024c346109159083ea5e5f890>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <2a3a8b4024c346109159083ea5e5f890>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <2a3a8b4024c346109159083ea5e5f890>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <2a3a8b4024c346109159083ea5e5f890>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805820
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\n\
    \        {\n            if (balance < 0)\n            {\n                return\
    \ true;\n            }\n            else\n            {\n                balance\
    \ -= operation;\n            }\n        }\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <0bda9453f66c47d8a7c3bf86450ecd65>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0bda9453f66c47d8a7c3bf86450ecd65>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <0bda9453f66c47d8a7c3bf86450ecd65>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0bda9453f66c47d8a7c3bf86450ecd65>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (long operation in operations.Skip(1))\n\
    \        {\n            if (operation < 0)\n            {\n                return\
    \ false;\n            }\n            balance -= operation;\n            if (balance\
    \ < 0)\n            {\n                return true;\n            }\n        }\n\
    \        return false;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <5b304e660f434d20a9b0eb4554944daf>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5b304e660f434d20a9b0eb4554944daf>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <5b304e660f434d20a9b0eb4554944daf>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5b304e660f434d20a9b0eb4554944daf>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805820
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = 0;\n        foreach (var op in operations) {\n           \
    \ balance = balance + op;\n            if (balance < 0) {\n                return\
    \ true;\n            }\n        }\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==\
    \ (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805820
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.Sum();\n        if (balance < 0)\n            return\
    \ true;\n        else\n            return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,\
    \ (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <12c756bb21024bc5b64d9cc400364f82>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.Sum();\n        return balance < 0;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e79a48045efd4babbd2721b4a34df55d>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (long operation in operations.Skip(1))\n\
    \        {\n            if (operation < 0)\n            {\n                return\
    \ false;\n            }\n            balance -= operation;\n            if (balance\
    \ < 0)\n            {\n                return true;\n            }\n        }\n\
    \        return false;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <5b304e660f434d20a9b0eb4554944daf>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5b304e660f434d20a9b0eb4554944daf>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <5b304e660f434d20a9b0eb4554944daf>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5b304e660f434d20a9b0eb4554944daf>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805820
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    // Your code goes here\n        long balance = operations.First();\n    \
    \    foreach (var operation in operations.Skip(1)) {\n            if (balance\
    \ < 0)\n                return true;\n            balance = balance - operation;\n\
    \        }\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <a136bccad4cd4c5984a535c8909ff41d>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <a136bccad4cd4c5984a535c8909ff41d>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <a136bccad4cd4c5984a535c8909ff41d>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <a136bccad4cd4c5984a535c8909ff41d>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.Sum();\n        return balance < 0;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e79a48045efd4babbd2721b4a34df55d>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.Sum();\n        return balance < 0;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e79a48045efd4babbd2721b4a34df55d>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = 0;\n        foreach (var operation in operations) {\n    \
    \        if (operation == -2)\n                balance -= 1;\n            else\
    \ if (operation == 2)\n                balance += 1;\n            else\n     \
    \           throw new Exception(\"Invalid operation\");\n            if (balance\
    \ < 0)\n                return true;\n        }\n        return false;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.Exception: Invalid operation\n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x0003a] in <a28bac278dba409f9a7c6198b17c9324>:0\
    \ \n  at Problem.Main (System.String[] args) [0x0002a] in <a28bac278dba409f9a7c6198b17c9324>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.Exception: Invalid operation\n \
    \ at Problem.BelowZero (System.Collections.Generic.List`1[T] operations) [0x0003a]\
    \ in <a28bac278dba409f9a7c6198b17c9324>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x0002a] in <a28bac278dba409f9a7c6198b17c9324>:0 \n"
  stdout: ''
  timestamp: 1659805822
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\
    \ {\n            if (balance < 0)\n                return true;\n            balance\
    \ += operation;\n        }\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,\
    \ (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805820
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = 0;\n        foreach (var operation in operations) {\n    \
    \        if (operation == -2)\n                balance -= 1000;\n            else\
    \ if (operation == 2)\n                balance += 1000;\n            else\n  \
    \              balance += operation;\n            if (balance < 0)\n         \
    \       return true;\n        }\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==\
    \ (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <292b587810254606bf7a0e94bf0f81ac>:0 \n"
  stdout: ''
  timestamp: 1659805822
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\
    \ {\n            if (balance < 0)\n                return true;\n            balance\
    \ += operation;\n        }\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,\
    \ (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805820
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    // Your code here\n        long sum = 0;\n        foreach (var item in operations)\
    \ {\n            sum += item;\n        }\n        if (sum < 0)\n            return\
    \ true;\n        return false;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ebc6b2ee5a1411ca841e3d40c20945a>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\
    \ {\n            if (balance < 0)\n                return true;\n            balance\
    \ += operation;\n        }\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,\
    \ (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805820
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (long op in operations.Skip(1))\n\
    \        {\n            if (op < 0)\n            {\n                balance +=\
    \ op;\n            }\n            else\n            {\n                balance\
    \ -= op;\n            }\n            if (balance < 0)\n            {\n       \
    \         return true;\n            }\n        }\n        return false;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <83f63df06af7426f9adc285ec717384b>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <83f63df06af7426f9adc285ec717384b>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <83f63df06af7426f9adc285ec717384b>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <83f63df06af7426f9adc285ec717384b>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805822
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (long op in operations.Skip(1))\
    \ {\n            if (op < 0)\n                return true;\n            balance\
    \ -= op;\n            if (balance < 0)\n                return true;\n       \
    \ }\n        return false;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <376d128089d647c4a4d6fa5ff629ffd1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <376d128089d647c4a4d6fa5ff629ffd1>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <376d128089d647c4a4d6fa5ff629ffd1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <376d128089d647c4a4d6fa5ff629ffd1>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805822
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\
    \ {\n            if (operation == -2)\n                return true;\n        \
    \    if (operation == -1)\n                balance -= 1;\n            else if\
    \ (operation == 1)\n                balance += 1;\n            else if (operation\
    \ == 2)\n                balance -= 1;\n            else if (operation == 3)\n\
    \                balance += 1;\n            else\n                throw new ArgumentException(\"\
    Invalid operation\");\n        }\n        return balance < 0;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <e054c6775ac245f0a6f07e7ed6d31cec>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <e054c6775ac245f0a6f07e7ed6d31cec>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <e054c6775ac245f0a6f07e7ed6d31cec>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <e054c6775ac245f0a6f07e7ed6d31cec>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805822
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.Sum();\n        if (balance < 0) {\n          \
    \  return true;\n        }\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,\
    \ (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5621fdefecf44461bf9f17d70dc69313>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\
    \ {\n            if (balance < 0)\n                return true;\n            balance\
    \ = balance - operation;\n        }\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <38b1ededb44b4e3f8187e834c46b4135>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <38b1ededb44b4e3f8187e834c46b4135>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <38b1ededb44b4e3f8187e834c46b4135>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <38b1ededb44b4e3f8187e834c46b4135>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = 0;\n        foreach (var operation in operations) {\n    \
    \        if (operation == -2)\n                balance -= 1;\n            else\
    \ if (operation == 2)\n                balance += 1;\n            else\n     \
    \           balance += operation;\n            if (balance < 0)\n            \
    \    return true;\n        }\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==\
    \ (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e7b005c2cc0b49bfa67d24349216eea1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e7b005c2cc0b49bfa67d24349216eea1>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.Sum();\n        return balance < 0;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e79a48045efd4babbd2721b4a34df55d>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\n\
    \        {\n            balance = balance - operation;\n            if (balance\
    \ < 0)\n            {\n                return true;\n            }\n        }\n\
    \        return false;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <49e2451e339c42d08d20f8912897a708>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <49e2451e339c42d08d20f8912897a708>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <49e2451e339c42d08d20f8912897a708>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <49e2451e339c42d08d20f8912897a708>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805822
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = 0;\n        foreach (var operation in operations) {\n    \
    \        if (operation == -2)\n                balance -= operation;\n       \
    \     else if (operation == 2)\n                balance += operation;\n      \
    \      else\n                balance += operation;\n            if (balance <\
    \ 0)\n                return true;\n        }\n        return false;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a7ffffae32934ad0a2bba0b0be14560c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a7ffffae32934ad0a2bba0b0be14560c>:0 \n"
  stdout: ''
  timestamp: 1659805822
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = 0;\n        foreach (var operation in operations) {\n    \
    \        if (operation == -2)\n                balance -= 1;\n            else\
    \ if (operation == 2)\n                balance += 1;\n            else\n     \
    \           balance += operation;\n            if (balance < 0)\n            \
    \    return true;\n        }\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==\
    \ (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e7b005c2cc0b49bfa67d24349216eea1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e7b005c2cc0b49bfa67d24349216eea1>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (long op in operations.Skip(1))\n\
    \        {\n            if (balance < 0)\n            {\n                return\
    \ true;\n            }\n            balance = balance - op;\n        }\n     \
    \   return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <c1674dca60074d1194630c4fc6694fb5>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <c1674dca60074d1194630c4fc6694fb5>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <c1674dca60074d1194630c4fc6694fb5>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <c1674dca60074d1194630c4fc6694fb5>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805822
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    if (operations.Count < 1)\n            return false;\n        long balance\
    \ = operations.First();\n        foreach (var operation in operations.Skip(1))\n\
    \        {\n            if (balance < 0)\n                return true;\n     \
    \       balance = balance - operation;\n        }\n        return false;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e8ff07d364924a7090590bf2bf85d347>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e8ff07d364924a7090590bf2bf85d347>:0 \n"
  stdout: ''
  timestamp: 1659805822
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (long operation in operations.Skip(1))\n\
    \        {\n            if (operation < 0)\n            {\n                return\
    \ false;\n            }\n            balance -= operation;\n            if (balance\
    \ < 0)\n            {\n                return true;\n            }\n        }\n\
    \        return false;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <5b304e660f434d20a9b0eb4554944daf>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5b304e660f434d20a9b0eb4554944daf>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <5b304e660f434d20a9b0eb4554944daf>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5b304e660f434d20a9b0eb4554944daf>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805820
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = 0;\n        foreach (var op in operations) {\n           \
    \ if (op == 1) {\n                balance += 1;\n            } else if (op ==\
    \ -1) {\n                balance -= 1;\n            }\n        }\n        return\
    \ balance < 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9f51cb6bcf24493398826d41ec1a0688>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9f51cb6bcf24493398826d41ec1a0688>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805822
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\
    \ {\n            if (balance < 0)\n                return true;\n            balance\
    \ = balance - operation;\n        }\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <38b1ededb44b4e3f8187e834c46b4135>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <38b1ededb44b4e3f8187e834c46b4135>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <38b1ededb44b4e3f8187e834c46b4135>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <38b1ededb44b4e3f8187e834c46b4135>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = 0;\n        foreach (var operation in operations) {\n    \
    \        if (operation == 1) {\n                balance += operation;\n      \
    \      }\n            else if (operation == -1) {\n                balance -=\
    \ operation;\n            }\n            else {\n                throw new ArgumentException(\"\
    Operation must be 1 or -1\");\n            }\n            if (balance < 0) {\n\
    \                return true;\n            }\n        }\n        return false;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Operation must be 1 or\
    \ -1\n  at Problem.BelowZero (System.Collections.Generic.List`1[T] operations)\
    \ [0x0003c] in <ef94db5a71a847b6a3f7dfbb0ff9aa3f>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x0002a] in <ef94db5a71a847b6a3f7dfbb0ff9aa3f>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.ArgumentException: Operation must be 1 or -1\n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x0003c] in <ef94db5a71a847b6a3f7dfbb0ff9aa3f>:0\
    \ \n  at Problem.Main (System.String[] args) [0x0002a] in <ef94db5a71a847b6a3f7dfbb0ff9aa3f>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805822
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (long op in operations.Skip(1))\n\
    \        {\n            if (op < 0)\n            {\n                balance -=\
    \ op;\n            }\n            else\n            {\n                balance\
    \ += op;\n            }\n            if (balance < 0)\n            {\n       \
    \         return true;\n            }\n        }\n        return false;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <514bb455a65c4a5cb3b32ef0dff10e56>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <514bb455a65c4a5cb3b32ef0dff10e56>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <514bb455a65c4a5cb3b32ef0dff10e56>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <514bb455a65c4a5cb3b32ef0dff10e56>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805822
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.Sum();\n        if (balance < 0)\n            return\
    \ true;\n        return false;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e2ff64624df841ec9bcbfec6a6879f7c>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = 0;\n        foreach (var op in operations) {\n           \
    \ if (op < 0) {\n                balance -= op;\n            } else {\n      \
    \          balance += op;\n            }\n        }\n        return balance <\
    \ 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <497cf40232f748678501923974811eea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <497cf40232f748678501923974811eea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805822
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.Sum();\n        if (balance < 0)\n            return\
    \ true;\n        else\n            return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,\
    \ (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <12c756bb21024bc5b64d9cc400364f82>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.Sum();\n        if (balance < 0) {\n          \
    \  return true;\n        }\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,\
    \ (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5621fdefecf44461bf9f17d70dc69313>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\
    \ {\n            if (balance < 0)\n                return true;\n            balance\
    \ -= operation;\n        }\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,\
    \ (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <8148dec712704c3faed16f7ab5372b3b>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <8148dec712704c3faed16f7ab5372b3b>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <8148dec712704c3faed16f7ab5372b3b>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <8148dec712704c3faed16f7ab5372b3b>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805822
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (long operation in operations.Skip(1))\n\
    \        {\n            if (operation < 0)\n            {\n                return\
    \ false;\n            }\n            balance += operation;\n            if (balance\
    \ < 0)\n            {\n                return true;\n            }\n        }\n\
    \        return false;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <24148e3240fa414aa76cdc3bf52c0e69>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <24148e3240fa414aa76cdc3bf52c0e69>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <24148e3240fa414aa76cdc3bf52c0e69>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <24148e3240fa414aa76cdc3bf52c0e69>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    // Your code here\n        long balance = operations.Sum();\n        if (balance\
    \ < 0)\n            return true;\n        else\n            return false;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8c1f31c3092046a2981a57f3219dd950>:0 \n"
  stdout: ''
  timestamp: 1659805822
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = 0;\n        foreach (var operation in operations) {\n    \
    \        balance = balance + operation;\n            if (balance < 0) {\n    \
    \            return true;\n            }\n        }\n        return false;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805820
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.Sum();\n        return balance < 0;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e79a48045efd4babbd2721b4a34df55d>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\
    \ {\n            if (balance < 0)\n                return true;\n            balance\
    \ += operation;\n        }\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,\
    \ (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805820
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\n\
    \        {\n            if (balance < 0)\n            {\n                return\
    \ true;\n            }\n            balance = balance - operation;\n        }\n\
    \        return false;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805820
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (long operation in operations.Skip(1))\n\
    \        {\n            if (balance < 0)\n            {\n                return\
    \ true;\n            }\n            balance = balance - operation;\n        }\n\
    \        return false;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <8c146d865c394f18bc343a7bfd3f89e2>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <8c146d865c394f18bc343a7bfd3f89e2>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <8c146d865c394f18bc343a7bfd3f89e2>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <8c146d865c394f18bc343a7bfd3f89e2>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805822
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (long operation in operations.Skip(1))\n\
    \        {\n            if (operation < 0)\n            {\n                return\
    \ false;\n            }\n            balance = balance - operation;\n        \
    \    if (balance < 0)\n            {\n                return true;\n         \
    \   }\n        }\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <b9fb860772c94d2da274f83dd354cc15>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <b9fb860772c94d2da274f83dd354cc15>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <b9fb860772c94d2da274f83dd354cc15>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <b9fb860772c94d2da274f83dd354cc15>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.Sum();\n        return balance < 0;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e79a48045efd4babbd2721b4a34df55d>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = 0;\n        foreach (var operation in operations) {\n    \
    \        if (operation == 1) {\n                balance += 1;\n            } else\
    \ if (operation == -1) {\n                balance -= 1;\n            }\n     \
    \   }\n        return balance < 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cc0da7a813664bb5a1db30ab316461b9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cc0da7a813664bb5a1db30ab316461b9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.Sum();\n        return balance < 0;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e79a48045efd4babbd2721b4a34df55d>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = 0;\n        foreach (var operation in operations) {\n    \
    \        balance = balance + operation;\n            if (balance < 0) {\n    \
    \            return true;\n            }\n        }\n        return false;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805820
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\n\
    \        {\n            if (balance < 0)\n            {\n                return\
    \ true;\n            }\n            balance = balance - operation;\n        }\n\
    \        return false;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805820
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = 0;\n        foreach (var operation in operations) {\n    \
    \        balance = balance + operation;\n            if (balance < 0) {\n    \
    \            return true;\n            }\n        }\n        return false;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805820
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\n\
    \        {\n            if (balance < 0)\n            {\n                return\
    \ true;\n            }\n            balance += operation;\n        }\n       \
    \ return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <3a3f06b1cea54fa6ac37402a89632767>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <3a3f06b1cea54fa6ac37402a89632767>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <3a3f06b1cea54fa6ac37402a89632767>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <3a3f06b1cea54fa6ac37402a89632767>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805822
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (long op in operations.Skip(1))\n\
    \        {\n            if (op < 0)\n            {\n                return false;\n\
    \            }\n            balance -= op;\n            if (balance < 0)\n   \
    \         {\n                return true;\n            }\n        }\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <aff862cacc4142e78b0e68bea528520a>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <aff862cacc4142e78b0e68bea528520a>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <aff862cacc4142e78b0e68bea528520a>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <aff862cacc4142e78b0e68bea528520a>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (long operation in operations.Skip(1))\n\
    \        {\n            if (operation < 0)\n            {\n                balance\
    \ = balance * -1;\n            }\n            else\n            {\n          \
    \      balance += operation;\n            }\n            if (balance < 0)\n  \
    \          {\n                return true;\n            }\n        }\n       \
    \ return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <f42c0c49cdd446ab928c5fcf9c69cf9e>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <f42c0c49cdd446ab928c5fcf9c69cf9e>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <f42c0c49cdd446ab928c5fcf9c69cf9e>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <f42c0c49cdd446ab928c5fcf9c69cf9e>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805822
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\
    \ {\n            if (balance < 0)\n                return true;\n            balance\
    \ += operation;\n        }\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,\
    \ (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805820
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\
    \ {\n            if (balance < 0)\n                return true;\n            balance\
    \ = balance - operation;\n        }\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <38b1ededb44b4e3f8187e834c46b4135>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <38b1ededb44b4e3f8187e834c46b4135>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <38b1ededb44b4e3f8187e834c46b4135>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <38b1ededb44b4e3f8187e834c46b4135>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    // Your code here\n        long balance = operations.First();\n        foreach\
    \ (long operation in operations.Skip(1))\n        {\n            if (operation\
    \ < 0)\n            {\n                balance -= operation;\n            }\n\
    \            else\n            {\n                balance += operation;\n    \
    \        }\n            if (balance < 0)\n            {\n                return\
    \ true;\n            }\n        }\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==\
    \ (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <5d923a5948824626be4465e5dfd491b6>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5d923a5948824626be4465e5dfd491b6>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <5d923a5948824626be4465e5dfd491b6>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5d923a5948824626be4465e5dfd491b6>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805822
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\
    \ {\n            if (balance < 0)\n                return true;\n            balance\
    \ += operation;\n        }\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,\
    \ (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <4402c0c3c98e4f01974332f927335be9>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805820
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\n\
    \        {\n            if (balance < 0)\n            {\n                return\
    \ true;\n            }\n            balance = balance - operation;\n        }\n\
    \        return false;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805820
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\
    \ {\n            if (balance < 0)\n                return true;\n            balance\
    \ = balance - operation;\n        }\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <38b1ededb44b4e3f8187e834c46b4135>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <38b1ededb44b4e3f8187e834c46b4135>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <38b1ededb44b4e3f8187e834c46b4135>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <38b1ededb44b4e3f8187e834c46b4135>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = 0;\n        foreach (var operation in operations) {\n    \
    \        if (operation == -2)\n                balance -= 1;\n            else\
    \ if (operation == 2)\n                balance += 1;\n            else\n     \
    \           balance += operation;\n            if (balance < 0)\n            \
    \    return true;\n        }\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==\
    \ (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e7b005c2cc0b49bfa67d24349216eea1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e7b005c2cc0b49bfa67d24349216eea1>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = 0;\n        foreach (var operation in operations) {\n    \
    \        if (operation == -2)\n                balance -= 1;\n            else\
    \ if (operation == 2)\n                balance += 1;\n            else\n     \
    \           balance += operation;\n            if (balance < 0)\n            \
    \    return true;\n        }\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==\
    \ (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e7b005c2cc0b49bfa67d24349216eea1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e7b005c2cc0b49bfa67d24349216eea1>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (var op in operations.Skip(1))\n\
    \        {\n            if (op > 0)\n            {\n                balance +=\
    \ op;\n            }\n            else\n            {\n                if (balance\
    \ < 0)\n                {\n                    return true;\n                }\n\
    \                else\n                {\n                    balance -= op;\n\
    \                }\n            }\n        }\n        return balance < 0;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <c981a32dd01e4167ab58272ae470a496>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <c981a32dd01e4167ab58272ae470a496>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <c981a32dd01e4167ab58272ae470a496>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <c981a32dd01e4167ab58272ae470a496>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805822
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = 0;\n        foreach (var operation in operations) {\n    \
    \        balance = balance + operation;\n            if (balance < 0) {\n    \
    \            return true;\n            }\n        }\n        return false;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805820
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = 0;\n        foreach (var op in operations) {\n           \
    \ balance = balance + op;\n            if (balance < 0) {\n                return\
    \ true;\n            }\n        }\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==\
    \ (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805820
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\n\
    \        {\n            if (balance < 0)\n            {\n                return\
    \ true;\n            }\n            balance = balance - operation;\n        }\n\
    \        return false;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805820
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    // Your code here\n        long balance = operations.Sum();\n        if (balance\
    \ < 0)\n            return true;\n        else\n            return false;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8c1f31c3092046a2981a57f3219dd950>:0 \n"
  stdout: ''
  timestamp: 1659805822
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.Sum();\n        return balance < 0;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e79a48045efd4babbd2721b4a34df55d>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\
    \ {\n            if (operation == -2)\n                return true;\n        \
    \    else if (operation == -1)\n                balance -= operation;\n      \
    \      else if (operation == 1)\n                balance += operation;\n     \
    \       else if (operation == 2)\n                balance -= operation;\n    \
    \        else if (operation == 3)\n                balance += operation;\n   \
    \         else\n                throw new ArgumentException(\"Invalid operation\"\
    );\n        }\n        return balance < 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <b2bdfeeea7ae431c92225879975413ee>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <b2bdfeeea7ae431c92225879975413ee>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <b2bdfeeea7ae431c92225879975413ee>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <b2bdfeeea7ae431c92225879975413ee>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805822
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.Sum();\n        if (balance < 0)\n            return\
    \ true;\n        return false;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e2ff64624df841ec9bcbfec6a6879f7c>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.Sum();\n        if (balance < 0)\n            return\
    \ true;\n        return false;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e2ff64624df841ec9bcbfec6a6879f7c>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (long operation in operations.Skip(1))\
    \ {\n            if (operation < 0) {\n                balance -= operation;\n\
    \            } else {\n                balance += operation;\n            }\n\
    \            if (balance < 0) {\n                return true;\n            }\n\
    \        }\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <2a3a8b4024c346109159083ea5e5f890>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <2a3a8b4024c346109159083ea5e5f890>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <2a3a8b4024c346109159083ea5e5f890>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <2a3a8b4024c346109159083ea5e5f890>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805820
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\n\
    \        {\n            if (balance < 0)\n            {\n                return\
    \ true;\n            }\n            balance = balance - operation;\n        }\n\
    \        return false;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805820
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.Sum();\n        return balance < 0;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e79a48045efd4babbd2721b4a34df55d>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = 0;\n        foreach (var operation in operations) {\n    \
    \        balance = balance + operation;\n            if (balance < 0) {\n    \
    \            return true;\n            }\n        }\n        return false;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805820
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.Sum();\n        return balance < 0;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e79a48045efd4babbd2721b4a34df55d>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.Sum();\n        return balance < 0;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e79a48045efd4babbd2721b4a34df55d>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.Sum();\n        return balance < 0;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e79a48045efd4babbd2721b4a34df55d>:0 \n"
  stdout: ''
  timestamp: 1659805821
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = 0;\n        foreach (var operation in operations) {\n    \
    \        balance = balance + operation;\n            if (balance < 0) {\n    \
    \            return true;\n            }\n        }\n        return false;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805820
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    //\
    \ >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n\
    \    // True\n    public static bool BelowZero(List<long> operations) {\n    \
    \    long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\n\
    \        {\n            if (balance < 0)\n            {\n                return\
    \ true;\n            }\n            balance = balance - operation;\n        }\n\
    \        return false;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0af94c6b7e7e4df79f18359acbb5ceec>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805820
